{"version":3,"sources":["extensions/samples/BracketsConfigCentral/main.js"],"names":["define","require","exports","module","FileUtils","brackets","getModule","ExtensionUtils","DocumentManager","MainViewFactory","Mustache","ConfigViewContent","_module","ConfigView","doc","$container","this","json","JSON","parse","getText","$view","$","render","css","background-image","getNativeModuleDirectoryPath","background-position","background-repeat","append","_createConfigViewOf","file","pane","result","Deferred","view","findViewOfFile","fullPath","showView","resolve","getFile","getDocumentForPath","done","$el","addView","fail","fileError","reject","promise","prototype","updateLayout","destroy","remove","configViewFactory","canOpenFile","filename","substr","lastIndexOf","toLowerCase","openFile","loadStyleSheet","registerViewFactory"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAI/B,IAAIC,UAA8BC,SAASC,UAAU,kBACjDC,eAA8BF,SAASC,UAAU,wBACjDE,gBAA8BH,SAASC,UAAU,4BACjDG,gBAA8BJ,SAASC,UAAU,wBACjDI,SAA8BL,SAASC,UAAU,gCACjDK,kBAA8BV,QAAQ,gCAGtCW,QAAUT,OAGd,SAASU,WAAWC,IAAKC,YACrBC,KAAKD,WAAaA,WAClBC,KAAKF,IAAMA,IACXE,KAAKC,KAAOC,KAAKC,MAAMH,KAAKF,IAAIM,WAChCJ,KAAKK,MAAQC,EAAEZ,SAASa,OAAOZ,kBAAmBK,KAAKC,OACvDD,KAAKK,MAAMG,IAAI,CACXC,mBAAoB,cAAgBrB,UAAUsB,6BAA6Bd,SAAW,4BACtFe,sBAAuB,eACvBC,oBAAqB,cAEzBb,WAAWc,OAAOb,KAAKK,OA8B3B,SAASS,oBAAoBC,KAAMC,MAC/B,IAAIC,OAAS,IAAIX,EAAEY,SACfC,KAAOH,KAAKI,eAAeL,KAAKM,UAiBpC,OAfIF,MAEAH,KAAKM,SAASH,MACdF,OAAOM,QAAQJ,KAAKK,YAEpBhC,gBAAgBiC,mBAAmBV,KAAKM,UACnCK,KAAK,SAAU5B,KACZ,IAAIqB,KAAO,IAAItB,WAAWC,IAAKkB,KAAKW,KACpCX,KAAKY,QAAQT,MAAM,GACnBF,OAAOM,QAAQzB,IAAIiB,QAEtBc,KAAK,SAAUC,WACZb,OAAOc,OAAOD,aAGnBb,OAAOe,UA1ClBnC,WAAWoC,UAAUT,QAAU,WAC3B,OAAOxB,KAAKF,IAAIiB,MAMpBlB,WAAWoC,UAAUC,aAAe,aAMpCrC,WAAWoC,UAAUE,QAAU,WAC3BnC,KAAKK,MAAM+B,UAmCf,IAAIC,kBAAoB,CACpBC,YAAa,SAAUjB,UACnB,IAAIkB,SACJ,MAAmC,mBADpBlB,SAASmB,OAAOnB,SAASoB,YAAY,KAAO,GAC1CC,eAErBC,SAAU,SAAU5B,KAAMC,MACtB,OAAOF,oBAAoBC,KAAMC,QAKzCzB,eAAeqD,eAAezD,OAAQ,qBACtCM,gBAAgBoD,oBAAoBR","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    // Brackets modules\n    var FileUtils                   = brackets.getModule(\"file/FileUtils\"),\n        ExtensionUtils              = brackets.getModule(\"utils/ExtensionUtils\"),\n        DocumentManager             = brackets.getModule(\"document/DocumentManager\"),\n        MainViewFactory             = brackets.getModule(\"view/MainViewFactory\"),\n        Mustache                    = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        ConfigViewContent           = require(\"text!htmlContent/Config.html\");\n\n    /* our module object */\n    var _module = module;\n\n    /* @type {Object.<string, ConfigView>} List of open views */\n    function ConfigView(doc, $container) {\n        this.$container = $container;\n        this.doc = doc;\n        this.json = JSON.parse(this.doc.getText());\n        this.$view = $(Mustache.render(ConfigViewContent, this.json));\n        this.$view.css({\n            \"background-image\": \"url(file://\" + FileUtils.getNativeModuleDirectoryPath(_module) + \"/htmlContent/logo-sm.png)\",\n            \"background-position\": \"bottom right\",\n            \"background-repeat\": \"no-repeat\"\n        });\n        $container.append(this.$view);\n    }\n\n    /*\n     * Retrieves the file object for this view\n     * return {!File} the file object for this view\n     */\n    ConfigView.prototype.getFile = function () {\n        return this.doc.file;\n    };\n\n    /*\n     * Updates the layout of the view\n     */\n    ConfigView.prototype.updateLayout = function () {\n    };\n\n    /*\n     * Destroys the view\n     */\n    ConfigView.prototype.destroy = function () {\n        this.$view.remove();\n    };\n\n    /*\n     * Creates a view of a file (.brackets.json)\n     * @param {!File} file - the file to create a view for\n     * @param {!Pane} pane - the pane where to create the view\n     * @private\n     */\n    function _createConfigViewOf(file, pane) {\n        var result = new $.Deferred(),\n            view = pane.findViewOfFile(file.fullPath);\n\n        if (view) {\n            // existing view, then just show it\n            pane.showView(view);\n            result.resolve(view.getFile());\n        } else {\n            DocumentManager.getDocumentForPath(file.fullPath)\n                .done(function (doc) {\n                    var view = new ConfigView(doc, pane.$el);\n                    pane.addView(view, true);\n                    result.resolve(doc.file);\n                })\n                .fail(function (fileError) {\n                    result.reject(fileError);\n                });\n        }\n        return result.promise();\n    }\n\n    /*\n     *  Create a view factory that can create views for the file\n     *  `.brackets.json` in a project's root folder.\n     */\n    var configViewFactory = {\n        canOpenFile: function (fullPath) {\n            var filename = fullPath.substr(fullPath.lastIndexOf(\"/\") + 1);\n            return (filename.toLowerCase() === \".brackets.json\");\n        },\n        openFile: function (file, pane) {\n            return _createConfigViewOf(file, pane);\n        }\n    };\n\n    /* load styles used by our template */\n    ExtensionUtils.loadStyleSheet(module, \"styles/styles.css\");\n    MainViewFactory.registerViewFactory(configViewFactory);\n});\n"],"file":"main.js"}