{"version":3,"sources":["extensions/default/RemoteFileAdapter/main.js"],"names":["define","require","exports","module","AppInit","brackets","getModule","QuickOpen","PathUtils","CommandManager","Commands","ExtensionUtils","WorkingSetView","MainViewManager","Menus","HTTP_PROTOCOL","HTTPS_PROTOCOL","protocolClassProvider","data","fullPath","startsWith","_setMenuItemsVisible","file","getCurrentlyViewedFile","ACTIVE_PANE","cMenuItems","FILE_SAVE","FILE_RENAME","NAVIGATE_SHOW_IN_FILE_TREE","enable","constructor","name","forEach","item","get","setEnabled","_getGitHubRawURL","urlObject","pathVector","pathname","split","BLOB_STRING_LOCATION","length","newPath","splice","join","href","_getGitLabRawURL","_getRawURL","url","URL","hostname","loadStyleSheet","htmlReady","getContextMenu","ContextMenuIds","WORKING_SET_CONTEXT_MENU","on","addQuickOpenPlugin","languageIds","search","$","Deferred","resolve","arguments","match","query","protocol","parseUrl","indexOf","itemFocus","itemSelect","execute","FILE_OPEN","addClassProvider"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,QAAkBC,SAASC,UAAU,iBACrCC,UAAkBF,SAASC,UAAU,oBACrCE,UAAkBH,SAASC,UAAU,oCACrCG,eAAkBJ,SAASC,UAAU,0BACrCI,SAAkBL,SAASC,UAAU,oBACrCK,eAAiBN,SAASC,UAAU,wBACpCM,eAAiBP,SAASC,UAAU,0BACpCO,gBAAkBR,SAASC,UAAU,wBACrCQ,MAAkBT,SAASC,UAAU,iBAErCS,cAAgB,QAChBC,eAAiB,SAIrB,SAASC,sBAAsBC,MAC3B,OAAIA,KAAKC,SAASC,WAAW,WAClB,OAGPF,KAAKC,SAASC,WAAW,YAClB,QAGJ,GAMX,SAASC,uBACL,IAAIC,KAAOT,gBAAgBU,uBAAuBV,gBAAgBW,aAC9DC,WAAa,CAACf,SAASgB,UAAWhB,SAASiB,YAAajB,SAASkB,4BAEjEC,QAAUP,MAAmC,eAA1BA,KAAKQ,YAAYC,KAGxCN,WAAWO,QAAQ,SAAUC,MACzBxB,eAAeyB,IAAID,MAAME,WAAWN,UAI5C,SAASO,iBAAiBC,WACtB,IAAIC,WAAaD,UAAUE,SAASC,MAAM,KACtCC,qBAAuB,EAC3B,GAAGH,WAAWI,OAAOD,GAA+D,SAArCH,WADpB,GACgE,CAIvF,IAAIK,QACJ,OAFAL,WAAWM,OAJY,EAIgB,uCACzBN,WAAWO,KAAK,OAIlC,OAAOR,UAAUS,KAGrB,SAASC,iBAAiBV,WAEtB,IAAIC,WAAaD,UAAUE,SAASC,MAAM,KACtCC,qBAAuB,EAC3B,GAAGH,WAAWI,OAAOD,GAA+D,SAArCH,WADpB,GACgE,CAIvF,IAAIK,QACJ,OAFAL,WAJuB,GAIY,2BACrBA,WAAWO,KAAK,OAIlC,OAAOR,UAAUS,KAUrB,SAASE,WAAWC,KAChB,IAAIZ,UAAY,IAAIa,IAAID,KACxB,OAAQZ,UAAUc,UAClB,IAAK,aAAc,OAAOf,iBAAiBC,WAC3C,IAAK,aAAc,OAAOU,iBAAiBV,WAC3C,QAAS,OAAOY,KAtEpBtC,eAAeyC,eAAejD,OAAQ,cA0EtCC,QAAQiD,UAAU,WAEdvC,MAAMwC,eAAexC,MAAMyC,eAAeC,0BAA0BC,GAAG,wBAAyBpC,sBAChGR,gBAAgB4C,GAAG,oBAAqBpC,sBAGxCd,UAAUmD,mBACN,CACI3B,KAAM,wBACN4B,YAAa,GACbC,OAAQ,WACJ,OAAOC,EAAEC,WAAWC,QAAQ,CAACC,UAAU,MAE3CC,MAAO,SAAUC,OACb,IAAIC,SAAW3D,UAAU4D,SAASF,OAAOC,SACzC,OAA8D,IAAvD,CAACpD,cAAeC,gBAAgBqD,QAAQF,WAEnDG,UAAW,SAAUJ,SAGrBK,WAAY,WACR9D,eAAe+D,QAAQ9D,SAAS+D,UAAW,CAACtD,SAAU6B,WAAWgB,UAAU,SAKvFpD,eAAe8D,iBAAiBzD","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2018 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var AppInit         = brackets.getModule(\"utils/AppInit\"),\n        QuickOpen       = brackets.getModule(\"search/QuickOpen\"),\n        PathUtils       = brackets.getModule(\"thirdparty/path-utils/path-utils\"),\n        CommandManager  = brackets.getModule(\"command/CommandManager\"),\n        Commands        = brackets.getModule(\"command/Commands\"),\n        ExtensionUtils = brackets.getModule(\"utils/ExtensionUtils\"),\n        WorkingSetView = brackets.getModule(\"project/WorkingSetView\"),\n        MainViewManager = brackets.getModule(\"view/MainViewManager\"),\n        Menus           = brackets.getModule(\"command/Menus\");\n\n    var HTTP_PROTOCOL = \"http:\",\n        HTTPS_PROTOCOL = \"https:\";\n\n    ExtensionUtils.loadStyleSheet(module, \"styles.css\");\n\n    function protocolClassProvider(data) {\n        if (data.fullPath.startsWith(\"http://\")) {\n            return \"http\";\n        }\n\n        if (data.fullPath.startsWith(\"https://\")) {\n            return \"https\";\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Disable context menus which are not useful for remote file\n     */\n    function _setMenuItemsVisible() {\n        var file = MainViewManager.getCurrentlyViewedFile(MainViewManager.ACTIVE_PANE),\n            cMenuItems = [Commands.FILE_SAVE, Commands.FILE_RENAME, Commands.NAVIGATE_SHOW_IN_FILE_TREE],\n            // Enable menu options when no file is present in active pane\n            enable = !file || (file.constructor.name !== \"RemoteFile\");\n\n            // Enable or disable commands based on whether the file is a remoteFile or not.\n        cMenuItems.forEach(function (item) {\n            CommandManager.get(item).setEnabled(enable);\n        });\n    }\n\n    function _getGitHubRawURL(urlObject) {\n        let pathVector = urlObject.pathname.split(\"/\");\n        let BLOB_STRING_LOCATION = 3;\n        if(pathVector.length>BLOB_STRING_LOCATION+1 && pathVector[BLOB_STRING_LOCATION] === \"blob\"){\n            // Github blob URL of the form https://github.com/brackets-cont/brackets/blob/master/.gitignore\n            // transform to https://raw.githubusercontent.com/brackets-cont/brackets/master/.gitignore\n            pathVector.splice(BLOB_STRING_LOCATION,1);\n            let newPath = pathVector.join(\"/\");\n            return `https://raw.githubusercontent.com${newPath}`;\n        }\n\n        return urlObject.href;\n    }\n\n    function _getGitLabRawURL(urlObject) {\n        // Gitlab does not specify CORS, so this wont work in phoenix, but will work in brackets for now\n        let pathVector = urlObject.pathname.split(\"/\");\n        let BLOB_STRING_LOCATION = 4;\n        if(pathVector.length>BLOB_STRING_LOCATION+1 && pathVector[BLOB_STRING_LOCATION] === \"blob\"){\n            // GitLab blob URL of the form https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/.codeclimate.yml\n            // transform to https://gitlab.com/gitlab-org/gitlab-foss/-/raw/master/.codeclimate.yml\n            pathVector[BLOB_STRING_LOCATION] = \"raw\";\n            let newPath = pathVector.join(\"/\");\n            return `https://gitlab.com${newPath}`;\n        }\n\n        return urlObject.href;\n    }\n\n    /**\n     * Checks the URL to see if it is from known code URL sites(Eg. Github) and transforms\n     * it into URLs to fetch raw code.\n     * @param url\n     * @private\n     * @return code URL if transformed, else returns the arg URL as is\n     */\n    function _getRawURL(url) {\n        let urlObject = new URL(url);\n        switch (urlObject.hostname) {\n        case \"github.com\": return _getGitHubRawURL(urlObject);\n        case \"gitlab.com\": return _getGitLabRawURL(urlObject);\n        default: return url;\n        }\n    }\n\n    AppInit.htmlReady(function () {\n\n        Menus.getContextMenu(Menus.ContextMenuIds.WORKING_SET_CONTEXT_MENU).on(\"beforeContextMenuOpen\", _setMenuItemsVisible);\n        MainViewManager.on(\"currentFileChange\", _setMenuItemsVisible);\n\n        // Register as quick open plugin for file URI's having HTTP:|HTTPS: protocol\n        QuickOpen.addQuickOpenPlugin(\n            {\n                name: \"Remote file URI input\",\n                languageIds: [], // for all language modes\n                search: function () {\n                    return $.Deferred().resolve([arguments[0]]);\n                },\n                match: function (query) {\n                    var protocol = PathUtils.parseUrl(query).protocol;\n                    return [HTTP_PROTOCOL, HTTPS_PROTOCOL].indexOf(protocol) !== -1;\n                },\n                itemFocus: function (query) {\n                    // no op\n                },\n                itemSelect: function () {\n                    CommandManager.execute(Commands.FILE_OPEN, {fullPath: _getRawURL(arguments[0])});\n                }\n            }\n        );\n\n        WorkingSetView.addClassProvider(protocolClassProvider);\n    });\n\n});\n"],"file":"main.js"}