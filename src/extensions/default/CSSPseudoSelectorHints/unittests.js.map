{"version":3,"sources":["extensions/default/CSSPseudoSelectorHints/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","CSSPseudoSelectorCodeHints","PseudoStaticDataRaw","PseudoStaticData","JSON","parse","describe","defaultContent","testDocument","testEditor","expectHints","provider","implicitChar","returnWholeObj","expect","hasHints","toBe","hintsObj","getHints","toBeTruthy","hints","verifyListsAreIdentical","hintList","values","i","length","verifyFirstEntry","expectedFirstHint","modesToTest","modeCounter","selectMode","beforeEach","mock","createMockEditor","editor","doc","afterEach","destroyMockEditor","testAllHints","setCursorPos","line","ch","pseudoSelectorHints","console","log","stringify","Object","keys","classes","sort","testFilteredHints","testNoHints","it","elements"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2017 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeEach, afterEach */\n\ndefine(function (require, exports, module) {\n\n\n    var SpecRunnerUtils             = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        CSSPseudoSelectorCodeHints  = require(\"main\"),\n        PseudoStaticDataRaw         = require(\"text!PseudoSelectors.json\"),\n        PseudoStaticData            = JSON.parse(PseudoStaticDataRaw);\n\n    describe(\"unit:CSS Pseudo class/element Code Hinting\", function () {\n\n        var defaultContent = \".selector1: { \\n\" +\n                             \"} \\n\" +\n                             \".selector2:: { \\n\" +\n                             \"} \\n\" +\n                             \".selector3:n { \\n\" +\n                             \"} \\n\" +\n                             \".selector4::f { \\n\" +\n                             \"} \\n\";\n\n\n        var testDocument, testEditor;\n\n        // Ask provider for hints at current cursor position; expect it to return some\n        function expectHints(provider, implicitChar, returnWholeObj) {\n            expect(provider.hasHints(testEditor, implicitChar)).toBe(true);\n            var hintsObj = provider.getHints();\n            expect(hintsObj).toBeTruthy();\n            // return just the array of hints if returnWholeObj is falsy\n            return returnWholeObj ? hintsObj : hintsObj.hints;\n        }\n\n        // compares lists to ensure they are the same\n        function verifyListsAreIdentical(hintList, values) {\n            var i;\n            expect(hintList.length).toBe(values.length);\n            for (i = 0; i < values.length; i++) {\n                expect(hintList[i]).toBe(values[i]);\n            }\n        }\n\n\n        function verifyFirstEntry(hintList, expectedFirstHint) {\n            expect(hintList[0]).toBe(expectedFirstHint);\n        }\n\n\n        var modesToTest = ['css', 'scss', 'less'],\n            modeCounter;\n\n\n        var selectMode = function () {\n            return modesToTest[modeCounter];\n        };\n\n        describe(\"Pseudo classes in different style modes\", function () {\n            beforeEach(function () {\n                // create Editor instance (containing a CodeMirror instance)\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, selectMode());\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            var testAllHints = function () {\n                    testEditor.setCursorPos({ line: 0, ch: 11 });    // after :\n                    var hintList = expectHints(CSSPseudoSelectorCodeHints.pseudoSelectorHints);\n                    console.log(JSON.stringify(hintList));\n                    verifyFirstEntry(hintList, \"active\");  // filtered on \"empty string\"\n                    verifyListsAreIdentical(hintList, Object.keys(PseudoStaticData.classes).sort());\n                },\n                testFilteredHints = function () {\n                    testEditor.setCursorPos({ line: 4, ch: 12 });    // after :n\n                    var hintList = expectHints(CSSPseudoSelectorCodeHints.pseudoSelectorHints);\n                    console.log(JSON.stringify(hintList));\n                    verifyFirstEntry(hintList, \"not(selectors)\");  // filtered on \"n\"\n                    verifyListsAreIdentical(hintList, [\"not(selectors)\",\n                        \"nth-child(n)\",\n                        \"nth-last-child(n)\",\n                        \"nth-last-of-type(n)\",\n                        \"nth-of-type(n)\"]);\n                },\n                testNoHints = function () {\n                    testEditor.setCursorPos({ line: 0, ch: 10 });    // after {\n                    expect(CSSPseudoSelectorCodeHints.pseudoSelectorHints.hasHints(testEditor, 'a')).toBe(false);\n                };\n\n            for (modeCounter in modesToTest) {\n                it(\"should list all Pseudo selectors right after :\", testAllHints);\n                it(\"should list filtered pseudo selectors right after :n\", testFilteredHints);\n                it(\"should not list rule hints if the cursor is before :\", testNoHints);\n            }\n        });\n\n\n        describe(\"Pseudo elements in various style modes\", function () {\n\n            beforeEach(function () {\n                // create Editor instance (containing a CodeMirror instance)\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, selectMode());\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            var testAllHints = function () {\n                    testEditor.setCursorPos({ line: 2, ch: 12 });    // after ::\n                    var hintList = expectHints(CSSPseudoSelectorCodeHints.pseudoSelectorHints);\n                    console.log(JSON.stringify(hintList));\n                    verifyFirstEntry(hintList, \"after\");  // filtered on \"empty string\"\n                    verifyListsAreIdentical(hintList, Object.keys(PseudoStaticData.elements).sort());\n                },\n                testFilteredHints = function () {\n                    testEditor.setCursorPos({ line: 6, ch: 13 });    // after ::f\n                    var hintList = expectHints(CSSPseudoSelectorCodeHints.pseudoSelectorHints);\n                    console.log(JSON.stringify(hintList));\n                    verifyFirstEntry(hintList, \"first-letter\");  // filtered on \"f\"\n                    verifyListsAreIdentical(hintList, [\"first-letter\",\n                        \"first-line\"]);\n                },\n                testNoHints = function () {\n                    testEditor.setCursorPos({ line: 2, ch: 10 });    // after ::f\n                    expect(CSSPseudoSelectorCodeHints.pseudoSelectorHints.hasHints(testEditor, 'c')).toBe(false);\n                };\n\n            for (modeCounter in modesToTest) {\n                it(\"should list all Pseudo selectors right after :\", testAllHints);\n                it(\"should list filtered pseudo selectors right after ::f\", testFilteredHints);\n                it(\"should not list rule hints if the cursor is before :\", testNoHints);\n            }\n\n        });\n\n    });\n});\n\n"],"file":"unittests.js"}