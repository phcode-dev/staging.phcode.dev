{"version":3,"sources":["extensions/default/HtmlEntityCodeHints/main.js"],"names":["define","require","exports","module","AppInit","brackets","getModule","CodeHintManager","ExtensionUtils","HTMLUtils","PreferencesManager","Strings","HtmlSpecialChars","specialChars","_encodeValue","value","replace","_decodeValue","SpecialCharHints","this","primaryTriggerKeys","currentQuery","definePreference","description","DESCRIPTION_SPECIAL_CHAR_HINTS","prototype","hasHints","editor","implicitChar","_getQuery","getHints","query","result","indexOf","$","map","index","shownValue","sort","_internalSort","hints","match","selectInitial","handleWideResults","a","b","num1","num2","slice","toLowerCase","parseInt","length","localeCompare","lineContentBeforeCursor","startChar","endChar","cursor","getCursorPos","getTagInfo","tagName","document","getRange","line","ch","lastIndexOf","insertHint","completion","start","end","getLine","subLine","ampersandPos","semicolonPos","entityMatch","replaceRange","appReady","loadStyleSheet","JSON","parse","specialCharHints","registerHintProvider"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var AppInit             = brackets.getModule(\"utils/AppInit\"),\n        CodeHintManager     = brackets.getModule(\"editor/CodeHintManager\"),\n        ExtensionUtils      = brackets.getModule(\"utils/ExtensionUtils\"),\n        HTMLUtils           = brackets.getModule(\"language/HTMLUtils\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        Strings             = brackets.getModule(\"strings\"),\n        HtmlSpecialChars    = require(\"text!SpecialChars.json\"),\n        specialChars;\n\n\n    PreferencesManager.definePreference(\"codehint.SpecialCharHints\", \"boolean\", true, {\n        description: Strings.DESCRIPTION_SPECIAL_CHAR_HINTS\n    });\n\n    /**\n     * Encodes the special Char value given.\n     *\n     * @param {string} value\n     * The value to encode\n     *\n     * @return {string}\n     * The encoded string\n     */\n    function _encodeValue(value) {\n        return value.replace(\"&\", \"&amp;\").replace(\"#\", \"&#35;\");\n    }\n\n    /**\n     * Decodes the special Char value given.\n     *\n     * @param {string} value\n     * The value to decode\n     *\n     * @return {string}\n     * The decoded string\n     */\n    function _decodeValue(value) {\n        return value.replace(\"&amp;\", \"&\").replace(\"&#35;\", \"#\");\n    }\n\n    /**\n     * @constructor\n     */\n    function SpecialCharHints() {\n        this.primaryTriggerKeys = \"&ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#0123456789\";\n        this.currentQuery = \"\";\n    }\n\n    /**\n     * Determines whether HtmlSpecialChar hints are available in the current editor\n     * context.\n     *\n     * @param {Editor} editor\n     * A non-null editor object for the active window.\n     *\n     * @param {string} implicitChar\n     * Either null, if the hinting request was explicit, or a single character\n     * that represents the last insertion and that indicates an implicit\n     * hinting request.\n     *\n     * @return {boolean}\n     * Determines whether the current provider is able to provide hints for\n     * the given editor context and, in case implicitChar is non- null,\n     * whether it is appropriate to do so.\n     */\n    SpecialCharHints.prototype.hasHints = function (editor, implicitChar) {\n        this.editor = editor;\n\n        return this._getQuery() !== null;\n    };\n\n    /**\n     * Returns a list of available HtmlSpecialChar hints if possible for the current\n     * editor context.\n     *\n     * @param {string} implicitChar\n     * Either null, if the hinting request was explicit, or a single character\n     * that represents the last insertion and that indicates an implicit\n     * hinting request.\n     *\n     * @return {jQuery.Deferred|{\n     *              hints: Array.<string|jQueryObject>,\n     *              match: string,\n     *              selectInitial: boolean,\n     *              handleWideResults: boolean}}\n     * Null if the provider wishes to end the hinting session. Otherwise, a\n     * response object that provides:\n     * 1. a sorted array hints that consists of strings\n     * 2. a string match that is used by the manager to emphasize matching\n     *    substrings when rendering the hint list\n     * 3. a boolean that indicates whether the first result, if one exists,\n     *    should be selected by default in the hint list window.\n     * 4. handleWideResults, a boolean (or undefined) that indicates whether\n     *    to allow result string to stretch width of display.\n     */\n    SpecialCharHints.prototype.getHints = function (implicitChar) {\n        var query,\n            result;\n\n        if (implicitChar === null || this.primaryTriggerKeys.indexOf(implicitChar) !== -1) {\n            this.currentQuery = query = this._getQuery();\n            result = $.map(specialChars, function (value, index) {\n                if (value.indexOf(query) === 0) {\n                    var shownValue = _encodeValue(value);\n                    return shownValue  + \"; <span class='entity-display-character'>\" + value + \";</span>\";\n                }\n            }).sort(this._internalSort);\n\n            if (query !== null) {\n                query = _encodeValue(query);\n            }\n\n            return {\n                hints: result,\n                match: query,\n                selectInitial: true,\n                handleWideResults: false\n            };\n        }\n\n        return null;\n    };\n\n    /**\n     * Sort function used internally when sorting the Hints\n     *\n     * @param {string} value\n     * The value to decode\n     *\n     * @return {string}\n     * The decoded string\n     */\n    SpecialCharHints.prototype._internalSort = function (a, b) {\n        a = _decodeValue(a.slice(0, a.indexOf(\" \"))).toLowerCase();\n        b = _decodeValue(b.slice(0, b.indexOf(\" \"))).toLowerCase();\n\n        if (a.indexOf(\"#\") !== -1 && b.indexOf(\"#\") !== -1) {\n            var num1 = parseInt(a.slice(a.indexOf(\"#\") + 1, a.length - 1), 10),\n                num2 = parseInt(b.slice(b.indexOf(\"#\") + 1, b.length - 1), 10);\n\n            return (num1 - num2);\n        }\n\n        return a.localeCompare(b);\n    };\n\n    /**\n     * Returns a query for the Hints\n     *\n     * @return {string}\n     * The Query for which to search\n     */\n    SpecialCharHints.prototype._getQuery = function () {\n        var query,\n            lineContentBeforeCursor,\n            startChar,\n            endChar,\n            cursor = this.editor.getCursorPos();\n\n        if (HTMLUtils.getTagInfo(this.editor, cursor).tagName !== \"\") {\n            return null;\n        }\n\n        lineContentBeforeCursor = this.editor.document.getRange({\n            line: cursor.line,\n            ch: 0\n        }, cursor);\n\n        startChar = lineContentBeforeCursor.lastIndexOf(\"&\");\n        endChar = lineContentBeforeCursor.lastIndexOf(\";\");\n\n        // If no startChar was found or the endChar is greater than the startChar then it is no entity\n        if (startChar === -1 || endChar > startChar) {\n            return null;\n        }\n\n        query = this.editor.document.getRange({\n            line: cursor.line,\n            ch: startChar\n        }, cursor);\n\n        return query;\n    };\n\n    /**\n     * Inserts a given HtmlSpecialChar hint into the current editor context.\n     *\n     * @param {string} completition\n     * The hint to be inserted into the editor context.\n     *\n     * @return {boolean}\n     * Indicates whether the manager should follow hint insertion with an\n     * additional explicit hint request.\n     */\n    SpecialCharHints.prototype.insertHint = function (completion) {\n        var start = {line: -1, ch: -1},\n            end = {line: -1, ch: -1},\n            cursor = this.editor.getCursorPos(),\n            line = this.editor.document.getLine(cursor.line),\n            subLine,\n            ampersandPos,\n            semicolonPos,\n            entityMatch;\n\n        end.line = start.line = cursor.line;\n        start.ch = cursor.ch - this.currentQuery.length;\n        subLine = line.slice(cursor.ch);\n        ampersandPos = subLine.indexOf(\"&\");\n        semicolonPos = subLine.indexOf(\";\");\n        end.ch = start.ch + this.currentQuery.length;\n\n        // We're looking for ';' in line before next '&'\n        if (semicolonPos !== -1 && (ampersandPos === -1 || ampersandPos > semicolonPos)) {\n\n            subLine = subLine.slice(0, semicolonPos);\n\n            // regexp must match entire subLine string\n            entityMatch = subLine.match(/^(#?[0-9]+)|([a-zA-Z]+)$/);\n            if (entityMatch && entityMatch.length > 0 && entityMatch.index === 0 &&\n                    entityMatch[0].length === subLine.length) {\n                // replace entity\n                end.ch = line.indexOf(\";\", start.ch) + 1;\n            }\n        }\n\n        completion = completion.slice(0, completion.indexOf(\" \"));\n        completion = _decodeValue(completion);\n        if (start.ch !== end.ch) {\n            this.editor.document.replaceRange(completion, start, end);\n        } else {\n            this.editor.document.replaceRange(completion, start);\n        }\n\n        return false;\n    };\n\n    AppInit.appReady(function () {\n        ExtensionUtils.loadStyleSheet(module, \"styles.css\");\n        // Parse JSON files\n        specialChars = JSON.parse(HtmlSpecialChars);\n\n        // Register code hint providers\n        var specialCharHints = new SpecialCharHints();\n\n        CodeHintManager.registerHintProvider(specialCharHints, [\"html\"], 1);\n    });\n\n    //Export Hints for Unit Tests\n    exports.SpecialCharHints = SpecialCharHints;\n});\n"],"file":"main.js"}