{"version":3,"sources":["extensions/default/CodeFolding/main.js"],"names":["define","require","exports","module","CodeMirror","brackets","getModule","Strings","AppInit","CommandManager","DocumentManager","Editor","EditorManager","ProjectManager","ViewStateManager","KeyBindingManager","ExtensionUtils","Menus","prefs","COLLAPSE_ALL","COLLAPSE","EXPAND","EXPAND_ALL","GUTTER_NAME","CODE_FOLDING_GUTTER_PRIORITY","codeFoldingMenuDivider","collapseKey","collapseKeyDisplay","expandKey","expandKeyDisplay","collapseAllKey","expandAllKey","loadStyleSheet","foldGutter","foldCode","indentFold","handlebarsFold","selectionFold","_isInitialized","restoreLineFolds","editor","rangeEqualsSelection","range","selection","from","line","start","ch","to","end","isInViewStateSelection","viewState","selections","some","saveFolds","getSetting","cm","_codeMirror","getViewState","document","file","path","fullPath","folds","_lineFolds","getFolds","nonSelectionFolds","selectionFolds","Object","keys","forEach","getValidFolds","setFolds","Number","saveLineFolds","length","undefined","onGutterClick","gutter","event","opts","state","options","pos","Pos","isFolded","altKey","commands","unfoldAll","unfoldCode","fold","auto","foldToLevel","collapseCurrent","getFocusedEditor","cursor","i","getCursorPos","setCursorPos","expandCurrent","collapseAll","foldAll","expandAll","clearGutter","BLANK_GUTTER_CLASS","blank","window","createElement","className","vp","getViewport","operation","eachLine","setGutterMarker","lineNo","setupGutterEventListeners","$","getRootElement","addClass","setOption","getGutterElement","on","mouseenter","updateInViewport","mouseleave","removeClass","removeGutters","unregisterGutter","defineOption","enableFoldingInEditor","refresh","onActiveEditorChanged","current","previous","saveBeforeClose","getActiveEditor","deinit","removeBinding","getMenu","AppMenuBar","VIEW_MENU","removeMenuDivider","id","removeMenuItem","off","forEveryEditor","init","registerGlobalHelper","mode","registerHelper","doc","_masterEditor","addMenuDivider","addMenuItem","addBinding","key","displayKey","registerGutter","watchPrefsForChanges","prefsObject","e","data","ids","indexOf","isEnabled","htmlReady","register","COLLAPSE_CURRENT","EXPAND_CURRENT"],"mappings":"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","sourcesContent":["/*\n* Copyright (c) 2013 Patrick Oladimeji. All rights reserved.\n*\n* Permission is hereby granted, free of charge, to any person obtaining a\n* copy of this software and associated documentation files (the \"Software\"),\n* to deal in the Software without restriction, including without limitation\n* the rights to use, copy, modify, merge, publish, distribute, sublicense,\n* and/or sell copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n* DEALINGS IN THE SOFTWARE.\n*\n*/\n/**\n * Code folding extension for brackets\n * @author Patrick Oladimeji\n * @date 10/24/13 9:35:26 AM\n */\n\ndefine(function (require, exports, module) {\n\n\n    var CodeMirror              = brackets.getModule(\"thirdparty/CodeMirror/lib/codemirror\"),\n        Strings                 = brackets.getModule(\"strings\"),\n        AppInit                 = brackets.getModule(\"utils/AppInit\"),\n        CommandManager          = brackets.getModule(\"command/CommandManager\"),\n        DocumentManager         = brackets.getModule(\"document/DocumentManager\"),\n        Editor                  = brackets.getModule(\"editor/Editor\").Editor,\n        EditorManager           = brackets.getModule(\"editor/EditorManager\"),\n        ProjectManager          = brackets.getModule(\"project/ProjectManager\"),\n        ViewStateManager        = brackets.getModule(\"view/ViewStateManager\"),\n        KeyBindingManager       = brackets.getModule(\"command/KeyBindingManager\"),\n        ExtensionUtils          = brackets.getModule(\"utils/ExtensionUtils\"),\n        Menus                   = brackets.getModule(\"command/Menus\"),\n        prefs                   = require(\"Prefs\"),\n        COLLAPSE_ALL            = \"codefolding.collapse.all\",\n        COLLAPSE                = \"codefolding.collapse\",\n        EXPAND                  = \"codefolding.expand\",\n        EXPAND_ALL              = \"codefolding.expand.all\",\n        GUTTER_NAME             = \"CodeMirror-foldgutter\",\n        CODE_FOLDING_GUTTER_PRIORITY   = Editor.CODE_FOLDING_GUTTER_PRIORITY,\n        codeFoldingMenuDivider  = \"codefolding.divider\",\n        collapseKey             = \"Alt-Shift-Left\",\n        collapseKeyDisplay      = \"Alt-Shift-←\",\n        expandKey               = \"Alt-Shift-Right\",\n        expandKeyDisplay               = \"Alt-Shift-→\",\n        collapseAllKey          = \"Ctrl-Alt-[\",\n        expandAllKey            = \"Ctrl-Alt-]\";\n\n    ExtensionUtils.loadStyleSheet(module, \"main.less\");\n\n    // Load CodeMirror addons\n    brackets.getModule([\"thirdparty/CodeMirror/addon/fold/brace-fold\"]);\n    brackets.getModule([\"thirdparty/CodeMirror/addon/fold/comment-fold\"]);\n    brackets.getModule([\"thirdparty/CodeMirror/addon/fold/markdown-fold\"]);\n\n    // Still using slightly modified versions of the foldcode.js and foldgutter.js since we\n    // need to modify the gutter click handler to take care of some collapse and expand features\n    // e.g. collapsing all children when 'alt' key is pressed\n    var foldGutter              = require(\"foldhelpers/foldgutter\"),\n        foldCode                = require(\"foldhelpers/foldcode\"),\n        indentFold              = require(\"foldhelpers/indentFold\"),\n        handlebarsFold          = require(\"foldhelpers/handlebarsFold\"),\n        selectionFold           = require(\"foldhelpers/foldSelected\");\n\n\n    /** Set to true when init() has run; set back to false after deinit() has run */\n    var _isInitialized = false;\n\n    /** Used to keep track of files for which line folds have been restored.*/\n\n    /**\n      * Restores the linefolds in the editor using values fetched from the preference store\n      * Checks the document to ensure that changes have not been made (e.g., in a different editor)\n      * to invalidate the saved line folds.\n      * Selection Folds are found by comparing the line folds in the preference store with the\n      * selection ranges in the viewState of the current document. Any selection range in the view state\n      * that is folded in the prefs will be folded. Unlike other fold range finder, the only validation\n      * on selection folds is to check that they satisfy the minimum fold range.\n      * @param {Editor} editor  the editor whose saved line folds should be restored\n      */\n    function restoreLineFolds(editor) {\n        /**\n         * Checks if the range from and to Pos is the same as the selection start and end Pos\n         * @param   {Object}  range     {from, to} where from and to are CodeMirror.Pos objects\n         * @param   {Object}  selection {start, end} where start and end are CodeMirror.Pos objects\n         * @returns {Boolean} true if the range and selection span the same region and false otherwise\n         */\n        function rangeEqualsSelection(range, selection) {\n            return range.from.line === selection.start.line && range.from.ch === selection.start.ch &&\n                range.to.line === selection.end.line && range.to.ch === selection.end.ch;\n        }\n\n        /**\n         * Checks if the range is equal to one of the selections in the viewState\n         * @param   {Object}  range     {from, to} where from and to are CodeMirror.Pos objects.\n         * @param   {Object}  viewState The current editor's ViewState object\n         * @returns {Boolean} true if the range is found in the list of selections or false if not.\n         */\n        function isInViewStateSelection(range, viewState) {\n            if (!viewState || !viewState.selections) {\n                return false;\n            }\n\n            return viewState.selections.some(function (selection) {\n                return rangeEqualsSelection(range, selection);\n            });\n        }\n\n        var saveFolds = prefs.getSetting(\"saveFoldStates\");\n\n        if (!editor || !saveFolds) {\n            if (editor) {\n                editor._codeMirror._lineFolds = editor._codeMirror._lineFolds || {};\n            }\n            return;\n        }\n\n        var cm = editor._codeMirror;\n        var viewState = ViewStateManager.getViewState(editor.document.file);\n        var path = editor.document.file.fullPath;\n        var folds = cm._lineFolds || prefs.getFolds(path) || {};\n\n        //separate out selection folds from non-selection folds\n        var nonSelectionFolds = {}, selectionFolds = {}, range;\n        Object.keys(folds).forEach(function (line) {\n            range = folds[line];\n            if (isInViewStateSelection(range, viewState)) {\n                selectionFolds[line] = range;\n            } else {\n                nonSelectionFolds[line] = range;\n            }\n        });\n        nonSelectionFolds = cm.getValidFolds(nonSelectionFolds);\n        //add the selection folds\n        Object.keys(selectionFolds).forEach(function (line) {\n            nonSelectionFolds[line] = selectionFolds[line];\n        });\n        cm._lineFolds = nonSelectionFolds;\n        prefs.setFolds(path, cm._lineFolds);\n        Object.keys(cm._lineFolds).forEach(function (line) {\n            cm.foldCode(Number(line), {range: cm._lineFolds[line]});\n        });\n    }\n\n    /**\n      * Saves the line folds in the editor using the preference storage\n      * @param {Editor} editor the editor whose line folds should be saved\n      */\n    function saveLineFolds(editor) {\n        var saveFolds = prefs.getSetting(\"saveFoldStates\");\n        if (!editor || !saveFolds) {\n            return;\n        }\n        var folds = editor._codeMirror._lineFolds || {};\n        var path = editor.document.file.fullPath;\n        if (Object.keys(folds).length) {\n            prefs.setFolds(path, folds);\n        } else {\n            prefs.setFolds(path, undefined);\n        }\n    }\n\n    /**\n      * Event handler for gutter click. Manages folding and unfolding code regions. If the Alt key\n      * is pressed while clicking the fold gutter, child code fragments are also folded/unfolded\n      * up to a level defined in the `maxFoldLevel' preference.\n      * @param {!CodeMirror} cm the CodeMirror object\n      * @param {number} line the line number for the clicked gutter\n      * @param {string} gutter the name of the gutter element clicked\n      * @param {!KeyboardEvent} event the underlying dom event triggered for the gutter click\n      */\n    function onGutterClick(cm, line, gutter, event) {\n        var opts = cm.state.foldGutter.options, pos = CodeMirror.Pos(line);\n        if (gutter !== opts.gutter) { return; }\n        var range;\n        var _lineFolds = cm._lineFolds;\n        if (cm.isFolded(line)) {\n            if (event.altKey) { // unfold code including children\n                range = _lineFolds[line];\n                CodeMirror.commands.unfoldAll(cm, range.from.line, range.to.line);\n            } else {\n                cm.unfoldCode(line, {range: _lineFolds[line]});\n            }\n        } else {\n            if (event.altKey) {\n                range = CodeMirror.fold.auto(cm, pos);\n                if (range) {\n                    CodeMirror.commands.foldToLevel(cm, range.from.line, range.to.line);\n                }\n            } else {\n                cm.foldCode(line);\n            }\n        }\n    }\n\n    /**\n      * Collapses the code region nearest the current cursor position.\n      * Nearest is found by searching from the current line and moving up the document until an\n      * opening code-folding region is found.\n      */\n    function collapseCurrent() {\n        var editor = EditorManager.getFocusedEditor();\n        if (!editor) {\n            return;\n        }\n        var cm = editor._codeMirror;\n        var cursor = editor.getCursorPos(), i;\n        // Move cursor up until a collapsible line is found\n        for (i = cursor.line; i >= 0; i--) {\n            if (cm.foldCode(i)) {\n                editor.setCursorPos(i);\n                return;\n            }\n        }\n    }\n\n    /**\n      * Expands the code region at the current cursor position.\n      */\n    function expandCurrent() {\n        var editor = EditorManager.getFocusedEditor();\n        if (editor) {\n            var cursor = editor.getCursorPos(), cm = editor._codeMirror;\n            cm.unfoldCode(cursor.line);\n        }\n    }\n\n    /**\n      * Collapses all foldable regions in the current document. Folding is done up to a level 'n'\n      * which is defined in the `maxFoldLevel` preference. Levels refer to fold heirarchies e.g., for the following\n      * code fragment, the function is level 1, the if statement is level 2 and the forEach is level 3\n      *\n      *     function sample() {\n      *         if (debug) {\n      *             logMessages.forEach(function (m) {\n      *                 console.debug(m);\n      *             });\n      *         }\n      *     }\n      */\n    function collapseAll() {\n        var editor = EditorManager.getFocusedEditor();\n        if (editor) {\n            var cm = editor._codeMirror;\n            CodeMirror.commands.foldAll(cm);\n        }\n    }\n\n    /**\n      * Expands all folded regions in the current document\n      */\n    function expandAll() {\n        var editor = EditorManager.getFocusedEditor();\n        if (editor) {\n            var cm = editor._codeMirror;\n            CodeMirror.commands.unfoldAll(cm);\n        }\n    }\n\n    function clearGutter(editor) {\n        var cm = editor._codeMirror;\n        var BLANK_GUTTER_CLASS = \"CodeMirror-foldgutter-blank\";\n        editor.clearGutter(GUTTER_NAME);\n        var blank = window.document.createElement(\"div\");\n        blank.className = BLANK_GUTTER_CLASS;\n        var vp = cm.getViewport();\n        cm.operation(function () {\n            cm.eachLine(vp.from, vp.to, function (line) {\n                editor.setGutterMarker(line.lineNo(), GUTTER_NAME, blank);\n            });\n        });\n    }\n\n    /**\n      * Renders and sets up event listeners the code-folding gutter.\n      * @param {Editor} editor the editor on which to initialise the fold gutter\n      */\n    function setupGutterEventListeners(editor) {\n        var cm = editor._codeMirror;\n        $(editor.getRootElement()).addClass(\"folding-enabled\");\n        cm.setOption(\"foldGutter\", {onGutterClick: onGutterClick});\n\n        $(cm.getGutterElement()).on({\n            mouseenter: function () {\n                if (prefs.getSetting(\"hideUntilMouseover\")) {\n                    foldGutter.updateInViewport(cm);\n                } else {\n                    $(editor.getRootElement()).addClass(\"over-gutter\");\n                }\n            },\n            mouseleave: function () {\n                if (prefs.getSetting(\"hideUntilMouseover\")) {\n                    clearGutter(editor);\n                } else {\n                    $(editor.getRootElement()).removeClass(\"over-gutter\");\n                }\n            }\n        });\n    }\n\n    /**\n      * Remove the fold gutter for a given CodeMirror instance.\n      * @param {Editor} editor the editor instance whose gutter should be removed\n      */\n    function removeGutters(editor) {\n        Editor.unregisterGutter(GUTTER_NAME);\n        $(editor.getRootElement()).removeClass(\"folding-enabled\");\n        CodeMirror.defineOption(\"foldGutter\", false, null);\n    }\n\n    /**\n      * Add gutter and restore saved expand/collapse state.\n      * @param {Editor} editor the editor instance where gutter should be added.\n      */\n    function enableFoldingInEditor(editor) {\n        restoreLineFolds(editor);\n        setupGutterEventListeners(editor);\n        editor._codeMirror.refresh();\n    }\n\n    /**\n      * When a brand new editor is seen, initialise fold-gutter and restore line folds in it.\n      * Save line folds in departing editor in case it's getting closed.\n      * @param {object} event the event object\n      * @param {Editor} current the current editor\n      * @param {Editor} previous the previous editor\n      */\n    function onActiveEditorChanged(event, current, previous) {\n        if (current && !current._codeMirror._lineFolds) {\n            enableFoldingInEditor(current);\n        }\n        if (previous) {\n            saveLineFolds(previous);\n        }\n    }\n\n    /**\n      * Saves the line folds in the current full editor before it is closed.\n      */\n    function saveBeforeClose() {\n        // We've already saved all other open editors when they go active->inactive\n        saveLineFolds(EditorManager.getActiveEditor());\n    }\n\n    /**\n     * Remove code-folding functionality\n     */\n    function deinit() {\n        _isInitialized = false;\n\n        KeyBindingManager.removeBinding(collapseKey);\n        KeyBindingManager.removeBinding(expandKey);\n        KeyBindingManager.removeBinding(collapseAllKey);\n        KeyBindingManager.removeBinding(expandAllKey);\n\n        //remove menus\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).removeMenuDivider(codeFoldingMenuDivider.id);\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).removeMenuItem(COLLAPSE);\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).removeMenuItem(EXPAND);\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).removeMenuItem(COLLAPSE_ALL);\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).removeMenuItem(EXPAND_ALL);\n\n        EditorManager.off(\".CodeFolding\");\n        DocumentManager.off(\".CodeFolding\");\n        ProjectManager.off(\".CodeFolding\");\n\n        // Remove gutter & revert collapsed sections in all currently open editors\n        Editor.forEveryEditor(function (editor) {\n            CodeMirror.commands.unfoldAll(editor._codeMirror);\n        });\n        removeGutters();\n    }\n\n    /**\n     * Enable code-folding functionality\n     */\n    function init() {\n        _isInitialized = true;\n\n        foldCode.init();\n        foldGutter.init();\n\n        // Many CodeMirror modes specify which fold helper should be used for that language. For a few that\n        // don't, we register helpers explicitly here. We also register a global helper for generic indent-based\n        // folding, which cuts across all languages if enabled via preference.\n        CodeMirror.registerGlobalHelper(\"fold\", \"selectionFold\", function (mode, cm) {\n            return prefs.getSetting(\"makeSelectionsFoldable\");\n        }, selectionFold);\n        CodeMirror.registerGlobalHelper(\"fold\", \"indent\", function (mode, cm) {\n            return prefs.getSetting(\"alwaysUseIndentFold\");\n        }, indentFold);\n\n        CodeMirror.registerHelper(\"fold\", \"handlebars\", handlebarsFold);\n        CodeMirror.registerHelper(\"fold\", \"htmlhandlebars\", handlebarsFold);\n        CodeMirror.registerHelper(\"fold\", \"htmlmixed\", handlebarsFold);\n\n        EditorManager.on(\"activeEditorChange.CodeFolding\", onActiveEditorChanged);\n        DocumentManager.on(\"documentRefreshed.CodeFolding\", function (event, doc) {\n            restoreLineFolds(doc._masterEditor);\n        });\n\n        ProjectManager.on(\"beforeProjectClose.CodeFolding beforeAppClose.CodeFolding\", saveBeforeClose);\n\n        //create menus\n        codeFoldingMenuDivider = Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).addMenuDivider();\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).addMenuItem(COLLAPSE_ALL);\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).addMenuItem(EXPAND_ALL);\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).addMenuItem(COLLAPSE);\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).addMenuItem(EXPAND);\n\n        //register keybindings\n        KeyBindingManager.addBinding(COLLAPSE_ALL, [ {key: collapseAllKey}]);\n        KeyBindingManager.addBinding(EXPAND_ALL, [ {key: expandAllKey}]);\n        KeyBindingManager.addBinding(COLLAPSE, [{key: collapseKey, displayKey: collapseKeyDisplay}]);\n        KeyBindingManager.addBinding(EXPAND, [{key:expandKey, displayKey: expandKeyDisplay}]);\n\n\n        // Add gutters & restore saved expand/collapse state in all currently open editors\n        Editor.registerGutter(GUTTER_NAME, CODE_FOLDING_GUTTER_PRIORITY);\n        Editor.forEveryEditor(function (editor) {\n            enableFoldingInEditor(editor);\n        });\n    }\n\n    /**\n      * Register change listener for the preferences file.\n      */\n    function watchPrefsForChanges() {\n        prefs.prefsObject.on(\"change\", function (e, data) {\n            if (data.ids.indexOf(\"enabled\") > -1) {\n                // Check if enabled state mismatches whether code-folding is actually initialized (can't assume\n                // since preference change events can occur when the value hasn't really changed)\n                var isEnabled = prefs.getSetting(\"enabled\");\n                if (isEnabled && !_isInitialized) {\n                    init();\n                } else if (!isEnabled && _isInitialized) {\n                    deinit();\n                }\n            }\n        });\n    }\n\n    AppInit.htmlReady(function () {\n        CommandManager.register(Strings.COLLAPSE_ALL, COLLAPSE_ALL, collapseAll);\n        CommandManager.register(Strings.EXPAND_ALL, EXPAND_ALL, expandAll);\n        CommandManager.register(Strings.COLLAPSE_CURRENT, COLLAPSE, collapseCurrent);\n        CommandManager.register(Strings.EXPAND_CURRENT, EXPAND, expandCurrent);\n\n        if (prefs.getSetting(\"enabled\")) {\n            init();\n        }\n        watchPrefsForChanges();\n    });\n});\n"],"file":"main.js"}