{"version":3,"sources":["extensions/default/PrefsCodeHints/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","PrefsCodeHints","testPreferences","JSON","parse","describe","testContent","testDocument","testEditor","mockEditor","extractHintList","hintList","$","map","$node","find","text","expectHints","provider","expect","hasHints","toBe","hintObj","getHints","toBeTruthy","hints","expectNoHints","verifyHints","expectedHint","verifyHintsExcluded","unexpectedHint","indexOf","selectHint","index","not","insertHint","expectTokenAt","pos","string","type","token","_codeMirror","getTokenAt","fixPos","sticky","expectCursorAt","selection","getSelection","start","toEql","end","beforeEach","createMockEditor","startLine","endLine","editor","doc","file","_name","_setupTestEnvironment","afterEach","destroy","it","setCursorPos","line","ch","hintProvider","replaceRange"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2015 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, beforeEach, afterEach, it, expect*/\n\ndefine(function (require, exports, module) {\n\n\n    // Load dependencies.\n    var SpecRunnerUtils     = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        PrefsCodeHints      = require(\"./main\"),\n        testPreferences     = JSON.parse(require(\"text!./unittest-files/preferences.json\"));\n\n    describe(\"unit:Preferences Code Hints\", function () {\n        var testContent, testDocument, testEditor, mockEditor;\n\n        // A sample preferences file to run tests against.\n        testContent =   \"{\\n\" +\n                        \"    \\\"closeBrackets\\\": true,\\n\" +\n                        \"    \\\"insertHintOnTab\\\": false,\\n\" +\n                        \"    \\\"language.fileExtensions\\\": {\\n\" +\n                        \"        \\\"txt\\\": \\\"markdown\\\"\\n\" +\n                        \"    },\\n\" +\n                        \"    \\\"language.fileNames\\\": {\\n\" +\n                        \"        \\\"README.txt\\\": \\\"markdown\\\"\\n\" +\n                        \"    },\\n\" +\n                        \"    \\\"language\\\": {\\n\" +\n                        \"        \\\"javascript\\\": {\\n\" +\n                        \"            \\\"spaceUnits\\\": 4,\\n\" +\n                        \"            \\\"useTabChar\\\": false\\n\" +\n                        \"        },\\n\" +\n                        \"        \\\"php\\\": {\\n\" +\n                        \"            \\\"tabSize\\\": 4,\\n\" +\n                        \"            \\\"useTabChar\\\":true,\\n\" +\n                        \"            \\\"closeBrackets\\\":false\\n\" +\n                        \"        }\\n\" +\n                        \"    },\\n\" +\n                        \"    \\\"jslint.options\\\": {\\n\" +\n                        \"        \\\"devel\\\": true,\\n\" +\n                        \"        \\\"regexp\\\": true\\n\" +\n                        \"    },\\n\" +\n                        \"    \\\"linting.prefer\\\": [\\\"JSHint\\\",\\\"JSLint\\\"],\\n\" +\n                        \"    \\n\" +\n                        \"    \\\"linting.usePreferredOnly\\\" false,\" +\n                        \"    \\n\" +\n                        \"}\";\n\n        beforeEach(function () {\n            mockEditor = SpecRunnerUtils.createMockEditor(testContent, \"json\", {\n                startLine: 0,\n                endLine: 30\n            });\n            testEditor = mockEditor.editor;\n            testDocument = mockEditor.doc;\n\n            // Rename the file to preferences file.\n            testDocument.file._name = \".brackets.json\";\n\n            // Setup a test environment by loading minimum preferences required to run unit tests.\n            PrefsCodeHints._setupTestEnvironment(testDocument, testPreferences);\n        });\n\n        afterEach(function () {\n            testEditor.destroy();\n            testDocument = null;\n        });\n\n        // Extracts hints out of their DOM nodes.\n        function extractHintList(hintList) {\n            return $.map(hintList, function ($node) {\n                return $node.find(\".hint-obj\").text();\n            });\n        }\n\n        // Determines the availability of hints.\n        function expectHints(provider) {\n            expect(provider.hasHints(testEditor, null)).toBe(true);\n            var hintObj = provider.getHints();\n            expect(hintObj).toBeTruthy();\n            return hintObj.hints;\n        }\n\n        // Determines the non-availability of hints.\n        function expectNoHints(provider) {\n            var hasHints = provider.hasHints(testEditor, null);\n            if (!hasHints) {\n                expect(hasHints).toBe(false);\n            } else {\n                expect(provider.getHints(null)).toBe(null);\n            }\n        }\n\n        // Determines the presence of a hint in the hint list.\n        function verifyHints(hintList, expectedHint) {\n            var hints = extractHintList(hintList);\n            expect(hints[0]).toBe(expectedHint);\n        }\n\n        // Determines the exclusion of a hint in the hint list.\n        function verifyHintsExcluded(hintList, unexpectedHint) {\n            var hints = extractHintList(hintList);\n            expect(hints.indexOf(unexpectedHint)).toBe(-1);\n        }\n\n        // Inserts the selected hint.\n        function selectHint(provider, expectedHint) {\n            var hintList = expectHints(provider),\n                hints = extractHintList(hintList),\n                index = hints.indexOf(expectedHint);\n            expect(index).not.toBe(-1);\n            return provider.insertHint(hintList[index]);\n        }\n\n        // Determines a token at any given position.\n        function expectTokenAt(pos, string, type) {\n            var token = testEditor._codeMirror.getTokenAt(pos);\n            expect(token.string).toBe(string);\n            expect(token.type).toBe(type);\n        }\n\n        // Helper functions for testing cursor position / selection range\n        function fixPos(pos) {\n            if (!(\"sticky\" in pos)) {\n                pos.sticky = null;\n            }\n            return pos;\n        }\n\n        // Determines the position of the cursor.\n        function expectCursorAt(pos) {\n            var selection = testEditor.getSelection();\n            expect(fixPos(selection.start)).toEql(fixPos(selection.end));\n            expect(fixPos(selection.start)).toEql(fixPos(pos));\n        }\n\n        describe(\"File name based hinting\", function () {\n\n            it(\"it should hint in .brackets.json\", function () {\n                // Between \" and closeBrackets\"\n                testEditor.setCursorPos({line: 1, ch: 5});\n                expectHints(PrefsCodeHints.hintProvider);\n\n                testEditor.setCursorPos({line: 1, ch: 20});\n                expectHints(PrefsCodeHints.hintProvider);\n            });\n\n            it(\"it should hint in brackets.json\", function () {\n                testDocument.file._name = \"brackets.json\";\n                PrefsCodeHints._setupTestEnvironment(testDocument, testPreferences);\n\n                // Between \" and closeBrackets\"\n                testEditor.setCursorPos({line: 1, ch: 5});\n                expectHints(PrefsCodeHints.hintProvider);\n\n                // After \"closeBrackets\":\n                testEditor.setCursorPos({line: 1, ch: 20});\n                expectHints(PrefsCodeHints.hintProvider);\n            });\n\n            it(\"it should NOT hint in other JSON files\", function () {\n                testDocument.file._name = \"package.json\";\n                PrefsCodeHints._setupTestEnvironment(testDocument, testPreferences);\n\n                // Between \" and closeBrackets\"\n                testEditor.setCursorPos({line: 1, ch: 5});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"closeBrackets\":\n                testEditor.setCursorPos({line: 1, ch: 20});\n                expectNoHints(PrefsCodeHints.hintProvider);\n            });\n        });\n\n        describe(\"Key Hints\", function () {\n            it(\"should hint at the begininng of a key\", function () {\n                var hintList;\n\n                // Between \" and language\"\n                testEditor.setCursorPos({line: 9, ch: 5});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"closeOthers.above\");\n\n                // Between \" and javascript\"\n                testEditor.setCursorPos({line: 10, ch: 9});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"audio\");\n\n                // Between \" and spaceUnits\"\n                testEditor.setCursorPos({line: 11, ch: 13});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"closeBrackets\");\n            });\n            it(\"should hint in the center of a key\", function () {\n                var hintList;\n\n                // In \"language\"\n                testEditor.setCursorPos({line: 9, ch: 9});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"language\");\n\n                // In \"javascript\"\n                testEditor.setCursorPos({line: 10, ch: 14});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"javascript\");\n\n                // In \"spaceUnits\"\n                testEditor.setCursorPos({line: 11, ch: 18});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"spaceUnits\");\n            });\n            it(\"should hint at the end of a key\", function () {\n                var hintList;\n\n                // Between \"language and \"\n                testEditor.setCursorPos({line: 9, ch: 13});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"language\");\n\n                // Between \"javascript and \"\n                testEditor.setCursorPos({line: 10, ch: 19});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"javascript\");\n\n                // Between \"spaceUnits and \"\n                testEditor.setCursorPos({line: 11, ch: 23});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"spaceUnits\");\n            });\n\n            it(\"should NOT hint for blacklisted parent keys\", function () {\n                // Between \" and txt\"\n                testEditor.setCursorPos({line: 4, ch: 9});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // In \"txt\"\n                testEditor.setCursorPos({line: 4, ch: 11});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // Between \" and README.txt\"\n                testEditor.setCursorPos({line: 7, ch: 9});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // In \"README.txt\"\n                testEditor.setCursorPos({line: 7, ch: 15});\n                expectNoHints(PrefsCodeHints.hintProvider);\n            });\n\n            it(\"should NOT hint before initial quote of a key\", function () {\n                // Before \"closeBrackets\"\n                testEditor.setCursorPos({line: 1, ch: 4});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // Before \"language\"\n                testEditor.setCursorPos({line: 9, ch: 4});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // Before \"javascript\"\n                testEditor.setCursorPos({line: 10, ch: 8});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // Before \"spaceUnits\"\n                testEditor.setCursorPos({line: 11, ch: 12});\n                expectNoHints(PrefsCodeHints.hintProvider);\n            });\n            it(\"should NOT hint after final quote of a key\", function () {\n                // After \"closeBrackets\"\n                testEditor.setCursorPos({line: 1, ch: 19});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"language\"\n                testEditor.setCursorPos({line: 9, ch: 14});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"javascript\"\n                testEditor.setCursorPos({line: 10, ch: 20});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"spaceUnits\"\n                testEditor.setCursorPos({line: 11, ch: 24});\n                expectNoHints(PrefsCodeHints.hintProvider);\n            });\n\n            it(\"should NOT include keys already used in the context of current object\", function () {\n                var hintList;\n\n                // Between \" and insertHintOnTab\"\n                testEditor.setCursorPos({line: 2, ch: 5});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHintsExcluded(hintList, \"closeBrackets\");\n                verifyHintsExcluded(hintList, \"language.fileExtensions\");\n                verifyHintsExcluded(hintList, \"language.fileNames\");\n                verifyHintsExcluded(hintList, \"language\");\n                verifyHintsExcluded(hintList, \"jslint.options\");\n                verifyHintsExcluded(hintList, \"linting.prefer\");\n                verifyHintsExcluded(hintList, \"linting.usePreferredOnly\");\n\n                // Between \" and insertHintOnTab\"\n                testEditor.setCursorPos({line: 15, ch: 13});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHintsExcluded(hintList, \"useTabChar\");\n                verifyHintsExcluded(hintList, \"closeBrackets\");\n            });\n        });\n\n        describe(\"Value Hints\", function () {\n            it(\"should hint after a colon\", function () {\n                var hintList;\n\n                // After \"closeBrackets\":\n                testEditor.setCursorPos({line: 1, ch: 20});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n\n                // After \"insertHintOnTab\":\n                testEditor.setCursorPos({line: 2, ch: 22});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n\n                // After \"useTabChar\":\n                testEditor.setCursorPos({line: 12, ch: 25});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n            });\n            it(\"should hint after after a space followed by a colon\", function () {\n                var hintList;\n\n                // After \"closeBrackets\":+space\n                testEditor.setCursorPos({line: 1, ch: 21});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n\n                // After \"insertHintOnTab\":+space\n                testEditor.setCursorPos({line: 2, ch: 23});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n\n                // After \"useTabChar\":+space\n                testEditor.setCursorPos({line: 12, ch: 26});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n            });\n            it(\"should hint even if space is missing after a colon\", function () {\n                var hintList;\n\n                // After \"useTabChar\":\n                testEditor.setCursorPos({line: 16, ch: 25});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n\n                // After \"closeBrackets\":\n                testEditor.setCursorPos({line: 17, ch: 28});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n            });\n            it(\"should hint at the beginning of value\", function () {\n                var hintList;\n\n                // After \"closeBrackets\": t\n                testEditor.setCursorPos({line: 1, ch: 22});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"true\");\n\n                // After \"insertHintOnTab\": f\n                testEditor.setCursorPos({line: 2, ch: 24});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n\n                // After \"useTabChar\": f\n                testEditor.setCursorPos({line: 12, ch: 27});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n            });\n            it(\"should hint at the center of value\", function () {\n                var hintList;\n\n                // After \"closeBrackets\": tru\n                testEditor.setCursorPos({line: 1, ch: 24});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"true\");\n\n                // After \"insertHintOnTab\": fal\n                testEditor.setCursorPos({line: 2, ch: 26});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n\n                // After \"useTabChar\": fal\n                testEditor.setCursorPos({line: 12, ch: 29});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n            });\n            it(\"should hint at the end of the value\", function () {\n                var hintList;\n\n                // After \"closeBrackets\": true\n                testEditor.setCursorPos({line: 1, ch: 25});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"true\");\n\n                // After \"insertHintOnTab\": false\n                testEditor.setCursorPos({line: 2, ch: 28});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n\n                // After \"useTabChar\": false\n                testEditor.setCursorPos({line: 12, ch: 31});\n                hintList = expectHints(PrefsCodeHints.hintProvider);\n                verifyHints(hintList, \"false\");\n            });\n\n            it(\"should NOT hint if the corresponding colon is missing\", function () {\n                // After \"linting.usePreferredOnly\"\n                testEditor.setCursorPos({line: 26, ch: 30});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"linting.usePreferredOnly\"+space\n                testEditor.setCursorPos({line: 26, ch: 31});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"linting.usePreferredOnly\" f\n                testEditor.setCursorPos({line: 26, ch: 32});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"linting.usePreferredOnly\" fal\n                testEditor.setCursorPos({line: 26, ch: 34});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"linting.usePreferredOnly\" false\n                testEditor.setCursorPos({line: 26, ch: 36});\n                expectNoHints(PrefsCodeHints.hintProvider);\n            });\n            it(\"should NOT hint after a comma\", function () {\n                // After \"closeBrackets\": true,\n                testEditor.setCursorPos({line: 1, ch: 26});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"insertHintOnTab\": false,\n                testEditor.setCursorPos({line: 2, ch: 29});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"javascript\": { [rules] },\n                testEditor.setCursorPos({line: 13, ch: 10});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"language\": { [languages] },\n                testEditor.setCursorPos({line: 19, ch: 6});\n                expectNoHints(PrefsCodeHints.hintProvider);\n            });\n            it(\"should NOT hint before opening braces\", function () {\n                // Between \"javascript\": and {\n                testEditor.setCursorPos({line: 10, ch: 22});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"javascript\": {\n                testEditor.setCursorPos({line: 10, ch: 23});\n                expectNoHints(PrefsCodeHints.hintProvider);\n            });\n            it(\"should NOT hint after closing braces\", function () {\n                // After \"javascript\": { [rules] }\n                testEditor.setCursorPos({line: 13, ch: 9});\n                expectNoHints(PrefsCodeHints.hintProvider);\n\n                // After \"language\": { [languages] }\n                testEditor.setCursorPos({line: 19, ch: 5});\n                expectNoHints(PrefsCodeHints.hintProvider);\n            });\n            it(\"should NOT hint before opening brackets\", function () {\n                testEditor.setCursorPos({line: 10, ch: 22});\n                expectNoHints(PrefsCodeHints.hintProvider);\n            });\n            it(\"should NOT hint after closing brackets\", function () {\n                testEditor.setCursorPos({line: 10, ch: 22});\n                expectNoHints(PrefsCodeHints.hintProvider);\n            });\n        });\n\n        describe(\"Key Insertion\", function () {\n            it(\"should enter entire key after initial quote is typed\", function () {\n                testDocument.replaceRange(\"\\\"\", {line: 25, ch: 4});\n                testEditor.setCursorPos({line: 25, ch: 5});\n                selectHint(PrefsCodeHints.hintProvider, \"closeOthers.above\");\n                expectTokenAt({line: 25, ch: 22}, \"\\\"closeOthers.above\\\"\", \"string property\");\n                expectTokenAt({line: 25, ch: 24}, \":\", null);\n                expectCursorAt({line: 25, ch: 25});\n            });\n            it(\"should enter entire key after first letter of a key is typed\", function () {\n                testDocument.replaceRange(\"\\\"c\", {line: 25, ch: 4});\n                testEditor.setCursorPos({line: 25, ch: 6});\n                selectHint(PrefsCodeHints.hintProvider, \"closeOthers.above\");\n                expectTokenAt({line: 25, ch: 22}, \"\\\"closeOthers.above\\\"\", \"string property\");\n                expectTokenAt({line: 25, ch: 24}, \":\", null);\n                expectCursorAt({line: 25, ch: 25});\n            });\n            it(\"should enter entire key after few initial letters are typed\", function () {\n                testDocument.replaceRange(\"\\\"close\", {line: 25, ch: 4});\n                testEditor.setCursorPos({line: 25, ch: 10});\n                selectHint(PrefsCodeHints.hintProvider, \"closeOthers.above\");\n                expectTokenAt({line: 25, ch: 22}, \"\\\"closeOthers.above\\\"\", \"string property\");\n                expectTokenAt({line: 25, ch: 24}, \":\", null);\n                expectCursorAt({line: 25, ch: 25});\n            });\n            it(\"should replace existing key after few initial letter are typed\", function () {\n                testDocument.replaceRange(\"\\\"closeOthers.above\\\": true,\", {line: 25, ch: 4});\n                testEditor.setCursorPos({line: 25, ch: 17});\n                selectHint(PrefsCodeHints.hintProvider, \"closeOthers.below\");\n                expectTokenAt({line: 25, ch: 22}, \"\\\"closeOthers.below\\\"\", \"string property\");\n                expectTokenAt({line: 25, ch: 24}, \":\", null);\n                expectCursorAt({line: 25, ch: 23});\n            });\n            it(\"should append braces to a hint in case it is an object\", function () {\n                testDocument.replaceRange(\"\\\"\", {line: 25, ch: 4});\n                testEditor.setCursorPos({line: 25, ch: 5});\n                selectHint(PrefsCodeHints.hintProvider, \"closeTags\");\n                expectTokenAt({line: 25, ch: 14}, \"\\\"closeTags\\\"\", \"string property\");\n                expectTokenAt({line: 25, ch: 16}, \":\", null);\n                expectTokenAt({line: 25, ch: 18}, \"{\", null);\n                expectTokenAt({line: 25, ch: 19}, \"}\", null);\n                expectCursorAt({line: 25, ch: 18});\n            });\n            it(\"should append brackets to a hint in case it in an array\", function () {\n                testDocument.replaceRange(\"\\\"closeTags\\\": { \\\"\\\" }\", {line: 25, ch: 4});\n                testEditor.setCursorPos({line: 25, ch: 20});\n                selectHint(PrefsCodeHints.hintProvider, \"indentTags\");\n                expectTokenAt({line: 25, ch: 30}, \"\\\"indentTags\\\"\", \"string property\");\n                expectTokenAt({line: 25, ch: 32}, \":\", null);\n                expectTokenAt({line: 25, ch: 34}, \"[\", null);\n                expectTokenAt({line: 25, ch: 35}, \"]\", null);\n                expectCursorAt({line: 25, ch: 34});\n            });\n\n            it(\"should NOT replace colon and braces/brackets if they already exists\", function () {\n                // After close in \"closeBrackets\": true\n                testEditor.setCursorPos({line: 1, ch: 10});\n                expectTokenAt({line: 1, ch: 20}, \":\", null);\n                selectHint(PrefsCodeHints.hintProvider, \"closeOthers.above\");\n                expectTokenAt({line: 1, ch: 24}, \":\", null);\n            });\n        });\n\n        describe(\"Value Insertion\", function () {\n            it(\"should insert a value of type Boolean\", function () {\n                testDocument.replaceRange(\"\\\"closeOthers.above\\\":,\", {line: 25, ch: 4});\n                testEditor.setCursorPos({line: 25, ch: 24});\n                selectHint(PrefsCodeHints.hintProvider, \"true\");\n                expectTokenAt({line: 25, ch: 28}, \"true\", \"atom\");\n                expectCursorAt({line: 25, ch: 28});\n            });\n            it(\"should replace current token when editing\", function () {\n                testDocument.replaceRange(\"\\\"closeOthers.above\\\": tru\", {line: 25, ch: 4});\n                testEditor.setCursorPos({line: 25, ch: 28});\n                selectHint(PrefsCodeHints.hintProvider, \"true\");\n                expectTokenAt({line: 25, ch: 28}, \"true\", \"atom\");\n                expectCursorAt({line: 25, ch: 29});\n            });\n            it(\"should insert a value of type String\", function () {\n                testDocument.replaceRange(\",\\n        \\\"pavement\\\":\", {line: 7, ch: 32});\n                testEditor.setCursorPos({line: 8, ch: 19});\n                selectHint(PrefsCodeHints.hintProvider, \"python\");\n                expectTokenAt({line: 8, ch: 27}, \"\\\"python\\\"\", \"string\");\n                expectCursorAt({line: 8, ch: 27});\n            });\n            it(\"should insert a value if the next token is also a value\", function () {\n                // Before true\n                testEditor.setCursorPos({line: 1, ch: 21});\n                selectHint(PrefsCodeHints.hintProvider, \"false\");\n                expectTokenAt({line: 1, ch: 26}, \"false\", \"atom\");\n                expectCursorAt({line: 1, ch: 26});\n\n                // Before \"JSHint\"\n                testEditor.setCursorPos({line: 24, ch: 23});\n                selectHint(PrefsCodeHints.hintProvider, \"JSLint\");\n                expectTokenAt({line: 24, ch: 31}, \"\\\"JSLint\\\"\", \"string\");\n                expectCursorAt({line: 24, ch: 31});\n            });\n        });\n    });\n});\n"],"file":"unittests.js"}