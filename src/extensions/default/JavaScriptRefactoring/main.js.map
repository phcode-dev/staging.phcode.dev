{"version":3,"sources":["extensions/default/JavaScriptRefactoring/main.js"],"names":["define","require","exports","module","AppInit","brackets","getModule","PreferencesManager","Strings","RenameIdentifier","ExtractToVariable","ExtractToFunction","WrapSelection","CommandManager","Menus","Metrics","_","EditorManager","jsRefactoringEnabled","KeyboardPrefs","JSON","parse","EXTRACTTO_VARIABLE","EXTRACTTO_FUNCTION","REFACTOR_RENAME","REFACTORWRAPINTRYCATCH","REFACTORWRAPINCONDITION","REFACTORCONVERTTOARROWFN","REFACTORCREATEGETSET","_isRefactoringEnabled","get","_handleRefactor","functionName","eventName","eventType","handleRename","handleExtractToVariable","handleExtractToFunction","wrapInTryCatch","wrapInCondition","convertToArrowFunction","createGettersAndSetters","editor","getActiveEditor","getModeForSelection","countEvent","EVENT_TYPE","CODE_HINTS","definePreference","description","DESCRIPTION_CODE_REFACTORING","on","appReady","subMenu","getContextMenu","ContextMenuIds","EDITOR_MENU","addSubMenu","CMD_REFACTOR","menuLocation","AppMenuBar","EDIT_MENU","getMenu","addMenuDivider","register","CMD_REFACTORING_RENAME","partial","addMenuItem","renameIdentifier","CMD_EXTRACTTO_VARIABLE","extractToVariable","CMD_EXTRACTTO_FUNCTION","extractToFunction","CMD_REFACTORING_TRY_CATCH","CMD_REFACTORING_CONDITION","CMD_REFACTORING_ARROW_FUNCTION","CMD_REFACTORING_GETTERS_SETTERS"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n\n    var AppInit              = brackets.getModule(\"utils/AppInit\"),\n        PreferencesManager   = brackets.getModule(\"preferences/PreferencesManager\"),\n        Strings              = brackets.getModule(\"strings\"),\n        RenameIdentifier     = require(\"RenameIdentifier\"),\n        ExtractToVariable    = require(\"ExtractToVariable\"),\n        ExtractToFunction    = require(\"ExtractToFunction\"),\n        WrapSelection        = require(\"WrapSelection\"),\n        CommandManager       = brackets.getModule(\"command/CommandManager\"),\n        Menus                = brackets.getModule(\"command/Menus\"),\n        Metrics              = brackets.getModule(\"utils/Metrics\"),\n        _                    = brackets.getModule(\"thirdparty/lodash\"),\n        EditorManager        = brackets.getModule(\"editor/EditorManager\");\n\n    var jsRefactoringEnabled     = true;\n\n    var KeyboardPrefs = JSON.parse(require(\"text!keyboard.json\"));\n\n    // Command ids\n    var EXTRACTTO_VARIABLE       = \"refactoring.extractToVariable\",\n        EXTRACTTO_FUNCTION       = \"refactoring.extractToFunction\",\n        REFACTOR_RENAME          = \"refactoring.renamereference\",\n        REFACTORWRAPINTRYCATCH   = \"refactoring.wrapintrycatch\",\n        REFACTORWRAPINCONDITION  = \"refactoring.wrapincondition\",\n        REFACTORCONVERTTOARROWFN = \"refactoring.converttoarrowfunction\",\n        REFACTORCREATEGETSET     = \"refactoring.creategettersandsetters\";\n\n    // This preference controls whether to create a session and process all JS files or not.\n    PreferencesManager.definePreference(\"refactoring.JSRefactoring\", \"boolean\", true, {\n        description: Strings.DESCRIPTION_CODE_REFACTORING\n    });\n\n\n    /**\n     * Check whether any of refactoring hints preferences for JS Refactoring is disabled\n     * @return {boolean} enabled/disabled\n     */\n    function _isRefactoringEnabled() {\n        return (PreferencesManager.get(\"refactoring.JSRefactoring\") !== false);\n    }\n\n    PreferencesManager.on(\"change\", \"refactoring.JSRefactoring\", function () {\n        jsRefactoringEnabled = _isRefactoringEnabled();\n    });\n\n    function _handleRefactor(functionName) {\n        var eventName, eventType = \"\";\n\n        switch (functionName) {\n        case REFACTOR_RENAME:\n            eventName = REFACTOR_RENAME;\n            eventType = \"rename\";\n            RenameIdentifier.handleRename();\n            break;\n        case EXTRACTTO_VARIABLE:\n            eventName = EXTRACTTO_VARIABLE;\n            eventType = \"extractToVariable\";\n            ExtractToVariable.handleExtractToVariable();\n            break;\n        case EXTRACTTO_FUNCTION:\n            eventName = EXTRACTTO_FUNCTION;\n            eventType = \"extractToFunction\";\n            ExtractToFunction.handleExtractToFunction();\n            break;\n        case REFACTORWRAPINTRYCATCH:\n            eventName = REFACTORWRAPINTRYCATCH;\n            eventType = \"wrapInTryCatch\";\n            WrapSelection.wrapInTryCatch();\n            break;\n        case REFACTORWRAPINCONDITION:\n            eventName = REFACTORWRAPINCONDITION;\n            eventType = \"wrapInCondition\";\n            WrapSelection.wrapInCondition();\n            break;\n        case REFACTORCONVERTTOARROWFN:\n            eventName = REFACTORCONVERTTOARROWFN;\n            eventType = \"convertToFunction\";\n            WrapSelection.convertToArrowFunction();\n            break;\n        case REFACTORCREATEGETSET:\n            eventName = REFACTORCREATEGETSET;\n            eventType = \"createGetterSetter\";\n            WrapSelection.createGettersAndSetters();\n            break;\n        }\n        if (eventName) {\n            var editor = EditorManager.getActiveEditor();\n\n            // Logging should be done only when the context is javascript\n            if (!editor || editor.getModeForSelection() !== \"javascript\") {\n                return;\n            }\n            // Send analytics data for js refactoring\n            Metrics.countEvent(\n                Metrics.EVENT_TYPE.CODE_HINTS,\n                \"jsRefactor\",\n                eventType\n            );\n        }\n    }\n\n    AppInit.appReady(function () {\n\n        if (jsRefactoringEnabled) {\n            var subMenu = Menus.getContextMenu(Menus.ContextMenuIds.EDITOR_MENU).addSubMenu(Strings.CMD_REFACTOR, \"refactor-submenu\");\n\n            var menuLocation = Menus.AppMenuBar.EDIT_MENU;\n\n            Menus.getMenu(menuLocation).addMenuDivider();\n\n            // Rename Identifier\n            CommandManager.register(Strings.CMD_REFACTORING_RENAME, REFACTOR_RENAME, _.partial(_handleRefactor, REFACTOR_RENAME));\n            subMenu.addMenuItem(REFACTOR_RENAME);\n            Menus.getMenu(menuLocation).addMenuItem(REFACTOR_RENAME, KeyboardPrefs.renameIdentifier);\n\n            // Extract to Variable\n            CommandManager.register(Strings.CMD_EXTRACTTO_VARIABLE, EXTRACTTO_VARIABLE, _.partial(_handleRefactor, EXTRACTTO_VARIABLE));\n            subMenu.addMenuItem(EXTRACTTO_VARIABLE);\n            Menus.getMenu(menuLocation).addMenuItem(EXTRACTTO_VARIABLE, KeyboardPrefs.extractToVariable);\n\n            // Extract to Function\n            CommandManager.register(Strings.CMD_EXTRACTTO_FUNCTION, EXTRACTTO_FUNCTION, _.partial(_handleRefactor, EXTRACTTO_FUNCTION));\n            subMenu.addMenuItem(EXTRACTTO_FUNCTION);\n            Menus.getMenu(menuLocation).addMenuItem(EXTRACTTO_FUNCTION, KeyboardPrefs.extractToFunction);\n\n            // Wrap Selection\n            CommandManager.register(Strings.CMD_REFACTORING_TRY_CATCH, REFACTORWRAPINTRYCATCH, _.partial(_handleRefactor, REFACTORWRAPINTRYCATCH));\n            subMenu.addMenuItem(REFACTORWRAPINTRYCATCH);\n            Menus.getMenu(menuLocation).addMenuItem(REFACTORWRAPINTRYCATCH);\n\n            CommandManager.register(Strings.CMD_REFACTORING_CONDITION, REFACTORWRAPINCONDITION, _.partial(_handleRefactor, REFACTORWRAPINCONDITION));\n            subMenu.addMenuItem(REFACTORWRAPINCONDITION);\n            Menus.getMenu(menuLocation).addMenuItem(REFACTORWRAPINCONDITION);\n\n            CommandManager.register(Strings.CMD_REFACTORING_ARROW_FUNCTION, REFACTORCONVERTTOARROWFN, _.partial(_handleRefactor, REFACTORCONVERTTOARROWFN));\n            subMenu.addMenuItem(REFACTORCONVERTTOARROWFN);\n            Menus.getMenu(menuLocation).addMenuItem(REFACTORCONVERTTOARROWFN);\n\n            CommandManager.register(Strings.CMD_REFACTORING_GETTERS_SETTERS, REFACTORCREATEGETSET, _.partial(_handleRefactor, REFACTORCREATEGETSET));\n            subMenu.addMenuItem(REFACTORCREATEGETSET);\n            Menus.getMenu(menuLocation).addMenuItem(REFACTORCREATEGETSET);\n        }\n    });\n});\n"],"file":"main.js"}