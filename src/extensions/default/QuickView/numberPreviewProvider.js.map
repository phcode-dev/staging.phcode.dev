{"version":3,"sources":["extensions/default/QuickView/numberPreviewProvider.js"],"names":["define","require","exports","module","PreferencesManager","brackets","getModule","Strings","AppInit","QuickView","Metrics","colorGradientProvider","PREF_ENABLED_KEY","prefs","getExtensionPrefs","enabled","definePreference","description","DESCRIPTION_NUMBER_QUICK_VIEW","lastOriginId","_splitNumber","numStr","length","split","match","number","decimalPlaces","roundTo","units","e","_getWordAfterPos","editor","pos","wordRange","getWordAt","text","startsWith","slice","endPos","ch","startPos","wordFull","getTextBetween","startChInWord","line","effectiveStartPos","effectiveEndPos","trimmedWord","substring","_isCSSUnit","str","regexPattern","test","getQuickView","token","Promise","resolve","reject","startCh","start","endCh","end","numberStr","string","type","getNumberAt","nextPos","nextWord","trim","sPos","ePos","editOrigin","$content","$","changedMetricSent","find","knob","stopper","step","max","width","height","fgColor","fontSize","format","value","Math","round","getValue","userInput","changedSplit","change","document","batchOperation","setSelection","replaceStr","replaceRange","countEvent","EVENT_TYPE","QUICK_VIEW","changeStart","lockQuickView","changeEnd","unlockQuickView","content","exclusive","editsDoc","filterQuickView","popovers","numberQuickView","colorQuickView","popover","providerInfo","provider","QUICK_VIEW_NAME","on","get","appReady","registerQuickViewProvider"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n    // Brackets modules\n    let PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        Strings             = brackets.getModule(\"strings\"),\n        AppInit             = brackets.getModule(\"utils/AppInit\"),\n        QuickView           = brackets.getModule(\"features/QuickViewManager\"),\n        Metrics             = brackets.getModule(\"utils/Metrics\"),\n        colorGradientProvider = require(\"./colorGradientProvider\");\n\n    const PREF_ENABLED_KEY = \"numberEditor\";\n\n    let prefs = PreferencesManager.getExtensionPrefs(\"quickview\");\n    prefs.definePreference(PREF_ENABLED_KEY, \"boolean\", true, {\n        description: Strings.DESCRIPTION_NUMBER_QUICK_VIEW\n    });\n\n    let enabled;                             // Only show preview if true\n    let lastOriginId = 0;\n\n    function _splitNumber(numStr) {\n        // https://stackoverflow.com/questions/2868947/split1px-into-1px-1-px-in-javascript\n        try{\n            if(numStr.length > 15){\n                // empirically, anything larger than 15 chars is not a number we can process\n                return null;\n            }\n            let split = numStr.match(/(^-?)(\\d*\\.?\\d*)(.*)/); // \"1px\" -> [\"1px\", \"1\", \"px\"]\n            let number = split[1] + split[2] || \"\";\n            let decimalPlaces = number.split(\".\")[1];\n            decimalPlaces = decimalPlaces && decimalPlaces.length || 0;\n            let roundTo;\n            switch (decimalPlaces) {\n            case 0: roundTo = 1; break;\n            case 1: roundTo = 10; break;\n            case 2: roundTo = 100; break;\n            default: roundTo = 100; break;\n            }\n            return {\n                number,\n                units: split[3] || \"\",\n                decimalPlaces,\n                roundTo\n            };\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getWordAfterPos(editor, pos) {\n        // Find the word at the specified position\n        const wordRange = editor.getWordAt(pos);\n        if(wordRange.text.startsWith('%')) {\n            wordRange.text = wordRange.text.slice(0, 1);\n            wordRange.endPos.ch = wordRange.startPos.ch + 1;\n        }\n        const wordFull = editor.getTextBetween(wordRange.startPos, wordRange.endPos);\n\n        // Calculate effective start position within the word, if startPos is within the word\n        let startChInWord = 0;\n        if (wordRange.startPos.line === pos.line && wordRange.startPos.ch < pos.ch) {\n            startChInWord = pos.ch - wordRange.startPos.ch;\n        }\n\n        // Calculate the effective start and end positions of the trimmed word within the editor\n        const effectiveStartPos = {\n            line: wordRange.startPos.line,\n            ch: wordRange.startPos.ch + startChInWord\n        };\n\n        const effectiveEndPos = wordRange.endPos; // The end position remains the same as the original word's end\n\n        // Trim the word based on the effective start position\n        const trimmedWord = wordFull.substring(startChInWord);\n\n        // Return the trimmed word along with its start and end positions\n        return {\n            text: trimmedWord,\n            startPos: effectiveStartPos,\n            endPos: effectiveEndPos\n        };\n    }\n\n    function _isCSSUnit(str) {\n        // Regular expression pattern that matches common CSS units\n        const regexPattern = /^(px|cm|mm|Q|in|pc|pt|em|ex|ch|rem|vw|vh|vmin|vmax|lh|%)$/;\n\n        return regexPattern.test(str);\n    }\n\n    function getQuickView(editor, pos, token, line) {\n        return new Promise((resolve, reject)=>{\n            let startCh = token.start,\n                endCh = token.end,\n                numberStr = token.string;\n            if(token.type === \"string\" && enabled) {\n                // this is for inline html attributes like style=\"width:10px;\"\n                // if the user hover over the 10 or px part, we should show the preview.\n                const number = editor.getNumberAt(pos);\n                if(number) {\n                    // user hovered over the numeric (Eg.10) part\n                    numberStr = number.text;\n                    startCh = number.startPos.ch;\n                    endCh = number.endPos.ch;\n                    // check if we can extract units\n                    const nextPos = {line: number.endPos.line, ch: number.endPos.ch};\n                    const nextWord = _getWordAfterPos(editor, nextPos);\n                    if(_isCSSUnit(nextWord.text.trim())){\n                        numberStr = editor.getTextBetween(number.startPos, nextWord.endPos);\n                        endCh = nextWord.endPos.ch;\n                    }\n                } else {\n                    // the user hovers on the unit field or this is not a numeric string.\n                    // for the unit field, we could add logic to detect the numeric field, but not doing that\n                    // rn due to resource crunch.\n                    reject();\n                    return;\n                }\n            } else if(token.type !== \"number\" || !enabled){\n                reject();\n                return;\n            }\n            let sPos = {line: pos.line, ch: startCh},\n                ePos = {line: pos.line, ch: endCh};\n            let editOrigin = \"+NumberQuickView_\" + (lastOriginId++);\n            let $content = $(`<div><input type=\"text\" value=\"${numberStr}\" class=\"dial\"><div>`);\n            let split = _splitNumber(numberStr);\n            if(!split){\n                reject();\n                return;\n            }\n            let changedMetricSent = false;\n            $content.find(\".dial\").knob({\n                stopper: false,\n                step: 1/split.roundTo,\n                max: 100/split.roundTo,\n                width: 100,\n                height: 100,\n                fgColor: \"#2893ef\",\n                fontSize: \"1em\",\n                format: function(value){\n                    return Math.round(value*split.roundTo)/split.roundTo + split.units;\n                },\n                getValue: function(userInput){\n                    let changedSplit = _splitNumber(userInput);\n                    split.units = changedSplit && changedSplit.units;\n                    return changedSplit && changedSplit.number;\n                },\n                change: function (value) {\n                    editor.document.batchOperation(function () {\n                        // Replace old color in code with the picker's color, and select it\n                        editor.setSelection(sPos, ePos); // workaround for #2805\n                        let replaceStr = Math.round(value*split.roundTo)/split.roundTo + split.units;\n                        editor.replaceRange(replaceStr, sPos, ePos, editOrigin);\n                        ePos = {line: sPos.line, ch: sPos.ch + replaceStr.length};\n                        editor.setSelection(sPos, ePos);\n                    });\n                    if(!changedMetricSent){\n                        Metrics.countEvent(Metrics.EVENT_TYPE.QUICK_VIEW, \"num\", \"changed\");\n                        changedMetricSent = true;\n                    }\n                },\n                changeStart: function () {\n                    QuickView.lockQuickView();\n                },\n                changeEnd: function () {\n                    QuickView.unlockQuickView();\n                }\n            });\n            resolve({\n                start: sPos,\n                end: ePos,\n                content: $content,\n                exclusive: true,\n                editsDoc: true\n            });\n            Metrics.countEvent(Metrics.EVENT_TYPE.QUICK_VIEW, \"num\", \"show\");\n        });\n    }\n\n    function filterQuickView(popovers){\n        // rgb(10 , 100, 20), hover over these kind of numbers should open color quick view if present over number view\n        let numberQuickView, colorQuickView;\n        for(let popover of popovers){\n            if(popover.providerInfo.provider.QUICK_VIEW_NAME === exports.QUICK_VIEW_NAME){\n                numberQuickView = popover;\n            } else if(popover.providerInfo.provider.QUICK_VIEW_NAME === colorGradientProvider.QUICK_VIEW_NAME){\n                colorQuickView = popover;\n            }\n        }\n        if(colorQuickView){\n            return [colorQuickView];\n        }\n\n        return [numberQuickView] || popovers;\n    }\n\n    prefs.on(\"change\", PREF_ENABLED_KEY, function () {\n        enabled = prefs.get(PREF_ENABLED_KEY);\n    });\n\n    AppInit.appReady(function () {\n        enabled = prefs.get(PREF_ENABLED_KEY);\n        QuickView.registerQuickViewProvider(exports, [\"html\", \"xhtml\", \"xml\", // xml takes care of html inside tsx/jsx\n            \"css\", \"less\", \"scss\", \"sass\"]);\n    });\n\n    exports.getQuickView = getQuickView;\n    exports.filterQuickView = filterQuickView;\n    exports.QUICK_VIEW_NAME = \"numberPreviewProvider\";\n\n});\n"],"file":"numberPreviewProvider.js"}