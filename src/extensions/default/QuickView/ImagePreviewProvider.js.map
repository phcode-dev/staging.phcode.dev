{"version":3,"sources":["extensions/default/QuickView/ImagePreviewProvider.js"],"names":["define","require","exports","module","FileUtils","brackets","getModule","FileSystem","PreferencesManager","LanguageManager","Strings","PathUtils","AppInit","QuickView","Metrics","FileViewController","enabled","prefs","extensionlessImagePreview","validProtocols","getQuickView","editor","pos","token","line","Promise","resolve","reject","urlRegEx","tokenString","urlMatch","sPos","ePos","type","string","exec","ch","index","length","replace","docPath","document","file","fullPath","imgPath","parsed","parseUrl","hasProtocol","protocol","indexOf","trim","toLowerCase","ext","filenameExtension","language","getLanguageForExtension","id","getId","isImage","loadFromDisk","window","path","normalize","getDirectoryPath","start","end","$imgPreview","$","_tryLoadingURLInIframe","$iframe","find","append","showHandlerWithImageURL","imageURL","img","src","on","this","naturalWidth","naturalHeight","UNIT_PIXELS","e","remove","preventDefault","_imageToDataURI","cb","contentType","name","endsWith","read","encoding","fs","BYTE_ARRAY_ENCODING","err","content","base64","btoa","Uint8Array","reduce","data","byte","String","fromCharCode","dataURL","attr","previewPopup","imageFile","getFileForPath","click","openAndSelectDocument","PROJECT_MANAGER","countEvent","EVENT_TYPE","QUICK_VIEW","setExtensionlessImagePreview","_extensionlessImagePreview","doNotSave","set","save","getExtensionPrefs","definePreference","description","DESCRIPTION_EXTENSION_LESS_IMAGE_PREVIEW","get","appReady","registerQuickViewProvider","QUICK_VIEW_NAME"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    // Brackets modules\n    let FileUtils           = brackets.getModule(\"file/FileUtils\"),\n        FileSystem          = brackets.getModule(\"filesystem/FileSystem\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        LanguageManager     = brackets.getModule(\"language/LanguageManager\"),\n        Strings             = brackets.getModule(\"strings\"),\n        PathUtils           = brackets.getModule(\"thirdparty/path-utils/path-utils\"),\n        AppInit             = brackets.getModule(\"utils/AppInit\"),\n        QuickView           = brackets.getModule(\"features/QuickViewManager\"),\n        Metrics             = brackets.getModule(\"utils/Metrics\"),\n        FileViewController  = brackets.getModule(\"project/FileViewController\");\n\n    let enabled,                             // Only show preview if true\n        prefs                      = null,   // Preferences\n        extensionlessImagePreview;           // Whether to try and preview extensionless URLs\n\n    // List of protocols which we will support for image preview urls\n    let validProtocols = [\"data:\", \"http:\", \"https:\", \"phtauri:\", \"asset:\", \"ftp:\", \"file:\"];\n\n    prefs = PreferencesManager.getExtensionPrefs(\"quickview\");\n\n    // Whether or not to try and show image previews for URLs missing extensions\n    // (e.g., https://avatars2.githubusercontent.com/u/476009?v=3&s=200)\n    prefs.definePreference(\"extensionlessImagePreview\", \"boolean\", true, {\n        description: Strings.DESCRIPTION_EXTENSION_LESS_IMAGE_PREVIEW\n    });\n\n\n    // Image preview provider -------------------------------------------------\n\n    function getQuickView(editor, pos, token, line) {\n\n        return new Promise((resolve, reject)=>{\n            // Check for image name\n            let urlRegEx = /url\\(([^\\)]*)\\)/gi,\n                tokenString,\n                urlMatch;\n\n            if (token.type === \"string\") {\n                tokenString = token.string;\n            } else {\n                urlMatch = urlRegEx.exec(line);\n                while (urlMatch) {\n                    if (pos.ch < urlMatch.index) {\n                        // match is past cursor, so stop looping\n                        break;\n                    } else if (pos.ch <= urlMatch.index + urlMatch[0].length) {\n                        tokenString = urlMatch[1];\n                        break;\n                    }\n                    urlMatch = urlRegEx.exec(line);\n                }\n            }\n\n            if (!tokenString) {\n                reject();\n                return;\n            }\n\n            // Strip leading/trailing quotes, if present\n            tokenString = tokenString.replace(/(^['\"])|(['\"]$)/g, \"\");\n\n            let sPos, ePos;\n            let docPath = editor.document.file.fullPath;\n            let imgPath;\n\n            // Determine whether or not this URL/path is likely to be an image.\n            let parsed = PathUtils.parseUrl(tokenString);\n            // If the URL has a protocol, check if it's one of the supported protocols\n            let hasProtocol = parsed.protocol !== \"\" && validProtocols.indexOf(parsed.protocol.trim().toLowerCase()) !== -1;\n            let ext = parsed.filenameExtension.replace(/^\\./, '');\n            let language = LanguageManager.getLanguageForExtension(ext);\n            let id = language && language.getId();\n            let isImage = id === \"image\" || id === \"svg\";\n            let loadFromDisk = null;\n\n            // Use this URL if this is an absolute URL and either points to a\n            // filename with a known image extension, or lacks an extension (e.g.,\n            // a web service that returns an image). Honour the extensionlessImagePreview\n            // preference as well in the latter case.\n            if (hasProtocol && (isImage || (!ext && extensionlessImagePreview))) {\n                imgPath = tokenString;\n            }\n            // Use this filename if this is a path with a known image extension.\n            else if (!hasProtocol && isImage) {\n                imgPath = '';\n                loadFromDisk = window.path.normalize(FileUtils.getDirectoryPath(docPath) + tokenString);\n            }\n\n            if (!loadFromDisk && !imgPath) {\n                reject();\n                return;\n            }\n\n            if (urlMatch) {\n                sPos = {line: pos.line, ch: urlMatch.index};\n                ePos = {line: pos.line, ch: urlMatch.index + urlMatch[0].length};\n            } else {\n                sPos = {line: pos.line, ch: token.start};\n                ePos = {line: pos.line, ch: token.end};\n            }\n\n            let $imgPreview = $(\"<div id='quick-view-image-preview'><div class='image-preview'>\"          +\n                \"    <img src=\\\"\" + imgPath + \"\\\">\"    +\n                \"</div></div>\");\n\n            function _tryLoadingURLInIframe() {\n                let $iframe = $(`<iframe class='image-preview' src=\"${imgPath}\">`);\n                $imgPreview.find(\".image-preview\").append($iframe);\n            }\n\n            function showHandlerWithImageURL(imageURL) {\n                // Hide the preview container until the image is loaded.\n                let img = $imgPreview.find(\"img\");\n                if(imageURL){\n                    img[0].src = imageURL;\n                }\n\n                img.on(\"load\", function () {\n                    $imgPreview\n                        .append(\"<div class='img-size'>\" +\n                            this.naturalWidth + \" &times; \" + this.naturalHeight + \" \" + Strings.UNIT_PIXELS +\n                            \"</div>\"\n                        );\n                }).on(\"error\", function (e) {\n                    img.remove();\n                    _tryLoadingURLInIframe();\n                    e.preventDefault();\n                });\n            }\n\n            function _imageToDataURI(file, cb) {\n                let contentType = \"data:image;base64,\";\n                if(file.name.endsWith('.svg')){\n                    contentType = \"data:image/svg+xml;base64,\";\n                }\n                file.read({encoding: window.fs.BYTE_ARRAY_ENCODING}, function (err, content) {\n                    if(err){\n                        cb(err);\n                        return;\n                    }\n                    let base64 = window.btoa(\n                        new Uint8Array(content)\n                            .reduce((data, byte) => data + String.fromCharCode(byte), '')\n                    );\n                    let dataURL= contentType + base64;\n                    cb(null, dataURL);\n                });\n            }\n\n            $imgPreview.attr(\"data-for-test\", imgPath || loadFromDisk);\n\n            let previewPopup = {\n                start: sPos,\n                end: ePos,\n                content: $imgPreview\n            };\n\n            if(loadFromDisk){\n                let imageFile = FileSystem.getFileForPath(loadFromDisk);\n                _imageToDataURI(imageFile, function (err, dataURL){\n                    if(!err){\n                        $imgPreview.click(function () {\n                            FileViewController.openAndSelectDocument(imageFile.fullPath,\n                                FileViewController.PROJECT_MANAGER);\n                            Metrics.countEvent(Metrics.EVENT_TYPE.QUICK_VIEW, \"image\", \"click\");\n                        });\n                        showHandlerWithImageURL(dataURL);\n                        Metrics.countEvent(Metrics.EVENT_TYPE.QUICK_VIEW, \"image\", \"show\");\n                        resolve(previewPopup);\n                    } else {\n                        reject();\n                    }\n                });\n            } else {\n                showHandlerWithImageURL();\n                resolve(previewPopup);\n            }\n        });\n    }\n\n    function setExtensionlessImagePreview(_extensionlessImagePreview, doNotSave) {\n        if (extensionlessImagePreview !== _extensionlessImagePreview) {\n            extensionlessImagePreview = _extensionlessImagePreview;\n            if (!doNotSave) {\n                prefs.set(\"extensionlessImagePreview\", enabled);\n                prefs.save();\n            }\n        }\n    }\n\n    setExtensionlessImagePreview(prefs.get(\"extensionlessImagePreview\"), true);\n\n    prefs.on(\"change\", \"extensionlessImagePreview\", function () {\n        setExtensionlessImagePreview(prefs.get(\"extensionlessImagePreview\"));\n    });\n\n    AppInit.appReady(function () {\n        QuickView.registerQuickViewProvider(exports, [\"all\"]);\n    });\n\n    exports.getQuickView = getQuickView;\n    exports.QUICK_VIEW_NAME = \"ImagePreviewProvider\";\n\n});\n"],"file":"ImagePreviewProvider.js"}