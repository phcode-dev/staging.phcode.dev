{"version":3,"sources":["extensions/default/HTMLCodeHints/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","Editor","HTMLCodeHints","describe","defaultContent","testDocument","testEditor","expectHints","provider","expect","hasHints","toBe","hintsObj","getHints","toBeTruthy","hints","expectNoHints","verifyTagHints","hintList","expectedFirstHint","indexOf","verifyAttrHints","beforeEach","createMockDocument","$","append","get","afterEach","destroy","remove","it","setText","setCursorPos","line","ch","tagHintProvider","replaceRange","not","getLine","attrHintProvider","length","selectHint","expectedHint","insertHint","fixPos","pos","sticky","expectCursorAt","selection","getSelection","start","toEql","end"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeEach, afterEach */\n\ndefine(function (require, exports, module) {\n\n\n    // Modules from the SpecRunner window\n    var SpecRunnerUtils = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        Editor          = brackets.getModule(\"editor/Editor\").Editor,\n        HTMLCodeHints   = require(\"main\");\n\n    describe(\"unit: HTML Code Hinting\", function () {\n\n        var defaultContent = \"<!doctype html>\\n\" +\n                             \"<html>\\n\" +\n                             \"<style type=\\\"text/css\\\">\\n\" +\n                             \"</style>\\n\" +\n                             \"<body>\\n\" +\n                             \"  <h1 id='foo'>Heading</h1>\\n\" +       // tag without whitespace\n                             \"  <h3 id  = 'bar' >Subheading</h3>\\n\" + // tag with whitespace\n                             \"  <p></p>\\n\" +                         // tag without attributes\n                             \"  <h5 id='aaa' class='bbb'></h5>\\n\" +  // tag with two attributes\n                             \"  <div \\n\" +                           // incomplete tag\n                             \"</body>\\n\" +\n                             \"</html>\\n\";\n\n        var testDocument, testEditor;\n\n        beforeEach(function () {\n            // create dummy Document for the Editor\n            testDocument = SpecRunnerUtils.createMockDocument(defaultContent, \"html\");\n\n            // create Editor instance (containing a CodeMirror instance)\n            $(\"body\").append(\"<div id='editor'/>\");\n            testEditor = new Editor(testDocument, true, $(\"#editor\").get(0));\n        });\n\n        afterEach(function () {\n            testEditor.destroy();\n            testEditor = null;\n            $(\"#editor\").remove();\n            testDocument = null;\n        });\n\n\n        // Ask provider for hints at current cursor position; expect it to return some\n        function expectHints(provider) {\n            expect(provider.hasHints(testEditor, null)).toBe(true);\n            var hintsObj = provider.getHints();\n            expect(hintsObj).toBeTruthy();\n            return hintsObj.hints; // return just the array of hints\n        }\n\n        // Ask provider for hints at current cursor position; expect it NOT to return any\n        function expectNoHints(provider) {\n            expect(provider.hasHints(testEditor, null)).toBe(false);\n        }\n\n        // Expect hintList to contain tag names, starting with given value (if unspecified, expects the default unfiltered list)\n        function verifyTagHints(hintList, expectedFirstHint) {\n            expect(hintList.indexOf(\"id\")).toBe(-1);   // make sure attribute names aren't sneaking in there\n\n            expectedFirstHint = expectedFirstHint || \"a\";  // assume unfiltered lists always start with \"a\"\n            expect(hintList[0]).toBe(expectedFirstHint);\n        }\n\n        // Expect hintList to contain attribute names, starting with given value (if unspecified, expects the default unfilered list)\n        function verifyAttrHints(hintList, expectedFirstHint) {\n            expect(hintList.indexOf(\"div\")).toBe(-1);   // make sure tag names aren't sneaking in there\n\n            expectedFirstHint = expectedFirstHint || \"accesskey\";  // assume unfiltered lists always start with \"accesskey\"\n            expect(hintList[0]).toBe(expectedFirstHint);\n        }\n\n\n        describe(\"Tag hint provider\", function () {\n\n            it(\"should not hint within <style> block\", function () {  // (bug #1277)\n                // Replace default test content with code containing a <style> block\n                testDocument.setText(\"<!doctype html>\\n\" +\n                                     \"<html>\\n\" +\n                                     \"<head>\\n\" +\n                                     \"  <style>\\n\" +\n                                     \"  </style>\\n\" +\n                                     \"</head>\\n\" +\n                                     \"<body>\\n\" +\n                                     \"</body>\\n\" +\n                                     \"</html>\\n\");\n\n                testEditor.setCursorPos({ line: 3, ch: 9 });        // cursor after the > in \"<style>\"\n                expectNoHints(HTMLCodeHints.tagHintProvider);\n            });\n\n            it(\"should hint for < just before existing tag\", function () {  // (bug #1260)\n                testDocument.replaceRange(\"<\", { line: 5, ch: 2 }); // insert text: \"<h1\" -> \"<<h1\"\n\n                testEditor.setCursorPos({ line: 5, ch: 3 });        // cursor between the two <s\n                var hintList = expectHints(HTMLCodeHints.tagHintProvider);\n                verifyTagHints(hintList);\n                expect(hintList.indexOf(\"div\")).not.toBe(-1);  // additional sanity check\n            });\n\n            it(\"should filter hints by prefix\", function () {  // (bug #1260)\n                testDocument.replaceRange(\"  <s\\n\", { line: 8, ch: 0 }); // insert new line \"<s\", after line \"<p></p>\"\n\n                testEditor.setCursorPos({ line: 8, ch: 4 });        // cursor at end of line\n                var hintList = expectHints(HTMLCodeHints.tagHintProvider);\n                verifyTagHints(hintList, \"samp\");\n                expect(hintList.indexOf(\"div\")).toBe(-1);\n                expect(hintList.indexOf(\"span\")).not.toBe(-1);\n            });\n\n            it(\"should list hints between '<' and some trailing spaces\", function () {  // (bug #1515)\n                // Replace line 9 with a complete div tag and insert a blank line and the closing div tag.\n                testDocument.replaceRange(\"<div>\\n   \\n</div>\", { line: 9, ch: 2 });\n                expect(testDocument.getLine(10)).toBe(\"   \");\n\n                // Insert a < on line 10\n                testDocument.replaceRange(\"<\", { line: 10, ch: 0 });\n                testEditor.setCursorPos({ line: 10, ch: 1 });   // cursor between < and some trailing whitespaces\n                var hintList = expectHints(HTMLCodeHints.tagHintProvider);\n                verifyTagHints(hintList);\n\n                // Replace '< ' on line 10 with '<\\t'\n                testDocument.replaceRange(\"<\\t\", { line: 10, ch: 0 }, { line: 10, ch: 2 });\n                testEditor.setCursorPos({ line: 10, ch: 1 });   // cursor between < and some trailing whitespaces\n                hintList = expectHints(HTMLCodeHints.tagHintProvider);\n                verifyTagHints(hintList);\n            });\n\n            //Test for issue #3339\n            it(\"should show HTML hints after HTML Entity on same line\", function () {\n                testDocument.replaceRange(\"&nbsp; Test <  \", { line: 8, ch: 0 });\n                testEditor.setCursorPos({ line: 8, ch: 13 });   // cursor between < and some trailing whitespaces\n                var hintList = expectHints(HTMLCodeHints.tagHintProvider);\n                verifyTagHints(hintList);\n            });\n        });\n\n        describe(\"Attribute name hint provider\", function () {\n\n            it(\"should list hints at start of existing attribute\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 6 });\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                verifyAttrHints(hintList);  // expect no filtering (bug #1311)\n            });\n            it(\"should list hints within existing attribute\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 7 });\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                verifyAttrHints(hintList, \"id\");  // filtered on \"i\"\n            });\n            it(\"should list hints at end of existing attribute\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 8 });\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                verifyAttrHints(hintList, \"id\");  // filtered on \"id\"\n            });\n            it(\"should list hints at end of existing attribute with whitespace\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 8 });        // cursor between end of attr (\"d\") and space\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                verifyAttrHints(hintList, \"id\");  // filtered on \"id\"\n            });\n            it(\"should list hints to right of attribute value and a space\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 18 });        // cursor between space (after attr value) and >\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                verifyAttrHints(hintList);  // expect no filtering\n            });\n\n            it(\"should NOT list hints to right of '=' sign on id attr\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 9 });\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n            it(\"should list hints to right of '=' sign\", function () {\n                testEditor.setCursorPos({ line: 2, ch: 12 });\n                expectHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should NOT list hints to right of '=' sign with whitespace on id attr\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 11 });   // cursor between = and space\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n                testEditor.setCursorPos({ line: 6, ch: 12 });   // cursor between space and '\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n            it(\"should list hints to right of '=' sign with whitespace\", function () {\n                testDocument.setText('<style type = \"text/css\">');\n                testEditor.setCursorPos({ line: 0, ch: 13 });   // cursor between = and space\n                expectHints(HTMLCodeHints.attrHintProvider);\n                testEditor.setCursorPos({ line: 0, ch: 14 });   // cursor between space and \"\n                expectHints(HTMLCodeHints.attrHintProvider);\n            });\n            it(\"should NOT list hints to right of attribute value with no separating space\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 14 });   // cursor between ' and >\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should NOT list hints within tag name\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 3 });   // cursor between < and start of tag name (\"h\")\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n                testEditor.setCursorPos({ line: 5, ch: 4 });   // cursor in middle of tag name\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n\n                // two cases for end of tag name:\n                testEditor.setCursorPos({ line: 5, ch: 5 });   // cursor between end of tag name (\"1\") and space\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n                testEditor.setCursorPos({ line: 7, ch: 4 });   // cursor between end of tag name (\"p\") and >\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n            it(\"should list hints to right of tag name and a space\", function () {  // (bug #1310)\n                testDocument.replaceRange(\" \", { line: 7, ch: 4 });  // insert a space: \"<p>\" -> \"<p >\"\n\n                testEditor.setCursorPos({ line: 7, ch: 5 });   // cursor between space and >\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                verifyAttrHints(hintList);  // expect no filtering\n            });\n            it(\"should list hints between tag name and attribute name (space on both sides of cursor)\", function () {\n                testDocument.replaceRange(\" \", { line: 5, ch: 5 });  // insert a space: \"<h1 id\" -> \"<h1  id\"\n\n                testEditor.setCursorPos({ line: 5, ch: 6 });   // cursor between two spaces, which are between end of tag name (\"p\") and start of attribute name\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                verifyAttrHints(hintList);  // expect no filtering\n            });\n            it(\"should list hints between prev attribute value and next attribute name (space on both sides of cursor)\", function () {\n                testDocument.replaceRange(\" \", { line: 8, ch: 14 });  // insert a space: \"'aaa' class\" -> \"'aaa'  class\"\n\n                testEditor.setCursorPos({ line: 8, ch: 15 });   // cursor between two spaces, which are between end of attribute value (\"p\") and start of attribute name\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                verifyAttrHints(hintList);  // expect no filtering\n            });\n\n            it(\"should NOT list hints to left of tag\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 0 });    // tag starting at column zero\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n\n                testEditor.setCursorPos({ line: 5, ch: 2 });    // tag with whitespace indent after it\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n            it(\"should NOT list hints within text content or whitespace\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 0 });    // whitespace\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n\n                testEditor.setCursorPos({ line: 5, ch: 18 });   // plain text content\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should NOT list hints within doctype 'tag'\", function () {\n                testEditor.setCursorPos({ line: 0, ch: 10 });\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should NOT list hints within closing tag\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 23 });   // cursor between < and /\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n                testEditor.setCursorPos({ line: 5, ch: 24 });   // cursor between / and start of tag name (\"h\")\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n                testEditor.setCursorPos({ line: 5, ch: 25 });   // cursor in middle of tag name\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n                testEditor.setCursorPos({ line: 5, ch: 26 });   // cursor between end of tag name (\"1\") and >  (bug #1335)\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should NOT list hints between begin 'div' and end 'div' tag\", function () {  // (bug #1510)\n                // replace line 9 with a complete div tag and insert a blank line and the closing div tag.\n                testDocument.replaceRange(\"<div>\\n   \\n  </div>\", { line: 9, ch: 2 });\n\n                testEditor.setCursorPos({ line: 10, ch: 2 });   // cursor between whitespaces on the newly inserted blank line\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n\n                testEditor.setCursorPos({ line: 9, ch: 7 });   // cursor to the right of <div>\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n\n                testEditor.setCursorPos({ line: 11, ch: 2 });   // cursor to the left of </div>\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should NOT list hints between an empty tag and 'body' end tag\", function () {  // (bug #1519)\n                // replace line 9 with an input tag and insert two extra blank lines with some whitespaces.\n                testDocument.replaceRange(\"<input type='button' />\\n  \\n   \", { line: 9, ch: 2 }, { line: 9, ch: 7 });\n\n                // Set cursor between whitespaces on one of the newly inserted blank lines.\n                testEditor.setCursorPos({ line: 11, ch: 2 });\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should NOT list hints between the 'body' begin tag and 'h1' begin tag\", function () {  // (bug #1519)\n                // Insert two blank lines with some whitespaces before line 5.\n                testDocument.replaceRange(\"\\n  \\n   \", { line: 5, ch: 0 });\n\n                // Set cursor between whitespaces on one of the newly inserted blank lines.\n                testEditor.setCursorPos({ line: 7, ch: 2 });\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should NOT list hints between the 'h1' end tag and 'h3' begin tag\", function () {  // (bug #1519)\n                // Insert two blank lines with some whitespaces before line 5.\n                testDocument.replaceRange(\"\\n  \\n   \", { line: 6, ch: 0 });\n\n                // Set cursor between whitespaces on one of the newly inserted blank lines.\n                testEditor.setCursorPos({ line: 8, ch: 2 });\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should NOT list hints after an HTML comment\", function () {  // (bug #1440)\n                // replace line 9 with an HTML comment and some spaces\n                testDocument.replaceRange(\"<!-- some comments -->    \", { line: 9, ch: 2 });\n\n                testEditor.setCursorPos({ line: 9, ch: 25 });   // cursor between whitespaces at the end of line 9\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should list hints on incomplete tag, after tag name\", function () {\n                testEditor.setCursorPos({ line: 9, ch: 7 });\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n\n                verifyAttrHints(hintList);  // expect no filtering\n            });\n            it(\"should NOT list hints on incomplete tag, at end of tag name\", function () {\n                testEditor.setCursorPos({ line: 9, ch: 5 });    // end of tag name\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n\n                testEditor.setCursorPos({ line: 9, ch: 6 });    // within tag name\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n            it(\"should NOT list hints to left of incomplete tag\", function () {\n                testEditor.setCursorPos({ line: 9, ch: 2 });\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should list hints on incomplete attribute\", function () {\n                testDocument.replaceRange(\"i\", { line: 9, ch: 7 });  // insert start of attribute: \"<div \" -> \"<div i\"\n\n                testEditor.setCursorPos({ line: 9, ch: 8 });\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                verifyAttrHints(hintList, \"id\");  // filtered on \"i\"\n            });\n        });\n\n        describe(\"Attribute value hint provider\", function () {\n\n            it(\"should list attribute value hints for a single quote after the equal sign\", function () {\n                testDocument.replaceRange(\" dir='\", { line: 7, ch: 4 });  // insert dir=' between <p and >\n\n                testEditor.setCursorPos({ line: 7, ch: 10 });       // set cursor right after dir='\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                expect(hintList.indexOf(\"ltr\")).not.toBe(-1);       // additional sanity check\n            });\n            it(\"should list attribute value hints within an existing attribute value\", function () {\n                testDocument.replaceRange(\" dir=\\\"ltr\\\"\", { line: 7, ch: 4 });  // insert dir=\"ltr\" between <p and >\n\n                testEditor.setCursorPos({ line: 7, ch: 11 });       // set cursor right after dir=\"l\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                expect(hintList.indexOf(\"ltr\")).not.toBe(-1);       // additional sanity check\n            });\n            it(\"should list attribute value hints within an unquoted attribute value\", function () {\n                testDocument.replaceRange(\" dir=ltr\", { line: 7, ch: 4 });  // insert dir=ltr between <p and >\n\n                testEditor.setCursorPos({ line: 7, ch: 10 });       // set cursor right after dir=l\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                expect(hintList.indexOf(\"ltr\")).not.toBe(-1);       // additional sanity check\n            });\n\n            it(\"should list sorted boolean attribute value hints\", function () {\n                testDocument.replaceRange(\" spellcheck=\\\"\", { line: 7, ch: 4 });  // insert spellcheck=\" between <p and >\n\n                testEditor.setCursorPos({ line: 7, ch: 17 });       // set cursor right after spellcheck=\"\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                expect(hintList.indexOf(\"false\")).toBe(0);\n                expect(hintList.indexOf(\"true\")).toBe(1);\n                expect(hintList.length).toBe(2);\n            });\n\n            it(\"should NOT list attribute value hints to the right of a closing double quote\", function () {\n                testDocument.replaceRange(\" dir=\\\"ltr\\\"\", { line: 7, ch: 4 });  // insert dir=\"ltr\" between <p and >\n\n                testEditor.setCursorPos({ line: 7, ch: 14 });       // set cursor right after dir=\"ltr\"\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n            it(\"should NOT list attribute value hints to the right of a closing single quote\", function () {\n                testDocument.replaceRange(\" dir='ltr'\", { line: 6, ch: 5 });  // insert dir='ltr' between <h3 and id\n\n                testEditor.setCursorPos({ line: 4, ch: 15 });       // set cursor right after dir='ltr'\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should list attribute value hints for type attribute of style tag\", function () {\n                // set cursor to the right of type attribute but before the closing quote\n                testEditor.setCursorPos({ line: 2, ch: 21 });\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n                expect(hintList.indexOf(\"text/css\")).not.toBe(-1);\n            });\n            it(\"should NOT list any attribute value for type attribute of embed tag\", function () {\n                // set cursor to the right of type attribute but before the closing quote\n                testEditor.setCursorPos({ line: 9, ch: 3 });\n                // Replace div on line 9 with embed type=' (\"<div \" --> \"<embed type='\")\n                testDocument.replaceRange(\"embed type='\", { line: 9, ch: 3 }, { line: 9, ch: 7 });\n                testEditor.setCursorPos({ line: 9, ch: 15 });\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n\n            it(\"should NOT list any attribute value for an unknown attribute name\", function () {\n                testDocument.replaceRange(\"foo='\", { line: 9, ch: 7 });  // insert foo=' after <div tag\n                testEditor.setCursorPos({ line: 9, ch: 12 });\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n        });\n\n\n        // CodeMirror doesn't correctly support valueless attributes, so none of them are included in the default\n        // test content above\n        describe(\"Valueless attributes\", function () {\n\n            it(\"should list hints after valueless attribute\", function () {  // (bug #1313)\n                testDocument.replaceRange(\"  <input checked >\\n\", { line: 9, ch: 0 });  // insert new line\n\n                testEditor.setCursorPos({ line: 9, ch: 17 });   // cursor between space and >\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n\n                // Expect no filtering - however, we offer some attributes (including first in the list) that\n                // are specific to the <input> tag, so we can't use the default \"no filtering\" empty arg here.\n                // (This smart filtering isn't officially part of the release, so no unit tests specifically\n                // targeting that functionality yet).\n                verifyAttrHints(hintList, \"accept\");\n            });\n\n            it(\"should list hints after attribute that follows a valueless attribute\", function () {  // (bug #1313)\n                testDocument.replaceRange(\"  <input checked accept='' >\\n\", { line: 9, ch: 0 });  // insert new line\n\n                testEditor.setCursorPos({ line: 9, ch: 27 });   // cursor between space and >\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n\n                // \"accept\" will get filtered and won't be the first one in the hints.\n                verifyAttrHints(hintList);\n            });\n\n            it(\"should list attribute value hints for an attribute that follows a valueless attribute\", function () {  // (bug #2804)\n                testDocument.replaceRange(\"  <input checked accept='' >\\n\", { line: 9, ch: 0 });  // insert new line\n\n                // cursor between quotes of accept attribute\n                testEditor.setCursorPos({ line: 9, ch: 25 });\n                var hintList = expectHints(HTMLCodeHints.attrHintProvider);\n\n                verifyAttrHints(hintList, \"application/msexcel\");\n\n                // cursor between equal sign and opening quote of accept attribute\n                testEditor.setCursorPos({ line: 9, ch: 24 });\n                hintList = expectHints(HTMLCodeHints.attrHintProvider);\n\n                verifyAttrHints(hintList, \"application/msexcel\");\n            });\n\n            it(\"should NOT list attribute value hints when the cursor is after the end quote of an attribute value\", function () {\n                testDocument.replaceRange(\"  <input checked accept='' >\\n\", { line: 9, ch: 0 });  // insert new line\n\n                // Set cursor after the closing quote of accept attribute\n                testEditor.setCursorPos({ line: 9, ch: 26 });\n                expectNoHints(HTMLCodeHints.attrHintProvider);\n            });\n        });\n\n\n        describe(\"Attribute insertion\", function () {\n\n            function selectHint(provider, expectedHint) {\n                var hintList = expectHints(provider);\n                expect(hintList.indexOf(expectedHint)).not.toBe(-1);\n                return provider.insertHint(expectedHint);\n            }\n\n            // Helper function for testing cursor position\n            function fixPos(pos) {\n                if (!(\"sticky\" in pos)) {\n                    pos.sticky = null;\n                }\n                return pos;\n            }\n            function expectCursorAt(pos) {\n                var selection = testEditor.getSelection();\n                expect(fixPos(selection.start)).toEql(fixPos(selection.end));\n                expect(fixPos(selection.start)).toEql(fixPos(pos));\n            }\n\n            it(\"should insert =\\\"\\\" after attribute\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 18 });   // cursor between space and >\n                selectHint(HTMLCodeHints.attrHintProvider, \"class\");\n                expect(testDocument.getLine(6)).toBe(\"  <h3 id  = 'bar' class=\\\"\\\">Subheading</h3>\");\n                expectCursorAt({ line: 6, ch: 25 });            // cursor between the two \"s\n            });\n\n            it(\"should make explicit request for new hints after attribute name has been inserted\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 18 });   // cursor between space and >\n                expect(selectHint(HTMLCodeHints.attrHintProvider, \"dir\")).toBe(true); // returning 'true' from insertHint (which is called by selectHint helper) initiates a new explicit hint request\n                expect(testDocument.getLine(6)).toBe(\"  <h3 id  = 'bar' dir=\\\"\\\">Subheading</h3>\");\n            });\n\n            it(\"should NOT insert =\\\"\\\" after valueless attribute\", function () {\n                testDocument.replaceRange(\"  <input \\n\", { line: 9, ch: 0 });  // insert new line\n\n                testEditor.setCursorPos({ line: 9, ch: 9 });    // cursor after trailing space\n                selectHint(HTMLCodeHints.attrHintProvider, \"checked\");\n                expect(testDocument.getLine(9)).toBe(\"  <input checked\");\n                expectCursorAt({ line: 9, ch: 16 });            // cursor at end of attr name\n            });\n\n            it(\"should insert a new attribute before the existing one that starts at cursor\", function () {  // (bug #1312)\n                testEditor.setCursorPos({ line: 5, ch: 6 });    // cursor between space and start of existing attribute name (\"id\")\n                selectHint(HTMLCodeHints.attrHintProvider, \"class\");\n                expect(testDocument.getLine(5)).toBe(\"  <h1 class=\\\"\\\"id='foo'>Heading</h1>\");\n                expectCursorAt({ line: 5, ch: 13 });            // cursor between two double-quotes\n            });\n            it(\"should change nothing when cursor at end\", function () {  // (bug #1314)\n                testEditor.setCursorPos({ line: 5, ch: 8 });    // cursor between end of existing attribute name (\"id\") and =\n                selectHint(HTMLCodeHints.attrHintProvider, \"id\");\n                expect(testDocument.getLine(5)).toBe(\"  <h1 id='foo'>Heading</h1>\");\n                expectCursorAt({ line: 5, ch: 8 });            // cursor stays at end of attr name\n            });\n\n            it(\"should insert a valueless attribute before the existing attribute that starts at cursor\", function () {\n                testDocument.replaceRange(\"  <input id='foo'>\\n\", { line: 9, ch: 0 });  // insert new line\n\n                testEditor.setCursorPos({ line: 9, ch: 9 });    // cursor after between \"i\" and \"d\"\n                selectHint(HTMLCodeHints.attrHintProvider, \"checked\");\n                expect(testDocument.getLine(9)).toBe(\"  <input checkedid='foo'>\");\n                expectCursorAt({ line: 9, ch: 16 });            // cursor between end of attr name and =\n            });\n\n            it(\"should insert a new atribute with an empty value before the existing valueless attribute\", function () {\n                testDocument.replaceRange(\"  <input checked>\\n\", { line: 9, ch: 0 });  // insert new line\n\n                testEditor.setCursorPos({ line: 9, ch: 9 });    // cursor after trailing space\n                selectHint(HTMLCodeHints.attrHintProvider, \"class\");\n                expect(testDocument.getLine(9)).toBe(\"  <input class=\\\"\\\"checked>\");\n                expectCursorAt({ line: 9, ch: 16 });            // cursor between the two \"s\n            });\n\n            it(\"should insert the selected attribute value with the closing (single) quote\", function () {\n                testDocument.replaceRange(\"dir='\", { line: 9, ch: 7 });  // insert dir=' after <div tag\n                testEditor.setCursorPos({ line: 9, ch: 12 });\n                selectHint(HTMLCodeHints.attrHintProvider, \"rtl\");\n                expect(testDocument.getLine(9)).toBe(\"  <div dir='rtl'\");\n                expectCursorAt({ line: 9, ch: 16 });            // cursor after the closing quote\n            });\n\n            it(\"should insert the selected attribute value with the closing (double) quote\", function () {\n                testDocument.replaceRange(\"dir=\\\"\", { line: 9, ch: 7 });  // insert dir=\" after <div tag\n                testEditor.setCursorPos({ line: 9, ch: 12 });\n                selectHint(HTMLCodeHints.attrHintProvider, \"rtl\");\n                expect(testDocument.getLine(9)).toBe(\"  <div dir=\\\"rtl\\\"\");\n                expectCursorAt({ line: 9, ch: 16 });            // cursor after the closing quote\n            });\n\n            it(\"should insert the selected attribute value inside the existing quotes\", function () {\n                testDocument.replaceRange(\"dir=\\\"\\\"\", { line: 9, ch: 7 });  // insert dir=\"\" after <div tag\n                testEditor.setCursorPos({ line: 9, ch: 12 });\n                selectHint(HTMLCodeHints.attrHintProvider, \"rtl\");\n                expect(testDocument.getLine(9)).toBe(\"  <div dir=\\\"rtl\\\"\");\n                expectCursorAt({ line: 9, ch: 16 });            // cursor after the closing quote\n            });\n\n            it(\"should insert the selected attribute value wrapped in double quotes\", function () {\n                testDocument.replaceRange(\"dir=\", { line: 9, ch: 7 });  // insert dir= after <div tag\n                testEditor.setCursorPos({ line: 9, ch: 11 });\n                selectHint(HTMLCodeHints.attrHintProvider, \"rtl\");\n                expect(testDocument.getLine(9)).toBe(\"  <div dir=\\\"rtl\\\"\");\n                expectCursorAt({ line: 9, ch: 16 });            // cursor after the closing quote\n            });\n\n            it(\"should replace the partially typed attribute value with the selected attribute value\", function () {\n                testDocument.replaceRange(\"dir=\\\"lt\", { line: 9, ch: 7 });  // insert dir=\"lt after <div tag\n                testEditor.setCursorPos({ line: 9, ch: 14 });\n                selectHint(HTMLCodeHints.attrHintProvider, \"ltr\");\n                expect(testDocument.getLine(9)).toBe(\"  <div dir=\\\"ltr\\\"\");\n                expectCursorAt({ line: 9, ch: 16 });            // cursor after the closing quote\n            });\n\n            it(\"should replace the partially typed attribute value with the selected attribute value\", function () {\n                testDocument.replaceRange(\"dir=lt\", { line: 9, ch: 7 });  // insert dir=\"lt after <div tag\n                testEditor.setCursorPos({ line: 9, ch: 13 });\n                selectHint(HTMLCodeHints.attrHintProvider, \"ltr\");\n                expect(testDocument.getLine(9)).toBe(\"  <div dir=ltr\");\n                expectCursorAt({ line: 9, ch: 14 });            // cursor after the closing quote\n            });\n\n            it(\"should replace an existing attribute value with the selected attribute value\", function () {\n                // Intentionally change the type of style attribute to an invalid value by replacing\n                // \"css\" with \"javascript\".\n                testDocument.replaceRange(\"javascript\", { line: 2, ch: 18 }, { line: 2, ch: 21 });\n                testEditor.setCursorPos({ line: 2, ch: 18 });\n                selectHint(HTMLCodeHints.attrHintProvider, \"text/css\");\n                expect(testDocument.getLine(2)).toBe(\"<style type=\\\"text/css\\\">\");\n                expectCursorAt({ line: 2, ch: 22 });            // cursor after the closing quote\n            });\n\n            it(\"should replace a quoted attribute value and keep the preceding space and quotes\", function () {\n                // Insert an unquoted attribute between <div and id on line 5.\n                testDocument.replaceRange(\"dir= \\\"ltr\\\" \", { line: 5, ch: 6 });\n                testEditor.setCursorPos({ line: 5, ch: 10 });   // Set the cursor between = and the space\n                // Select \"rtl\" to replace \"ltr\"\n                selectHint(HTMLCodeHints.attrHintProvider, \"rtl\");\n                expect(testDocument.getLine(5)).toBe(\"  <h1 dir= \\\"rtl\\\" id='foo'>Heading</h1>\");\n                expectCursorAt({ line: 5, ch: 16 });            // cursor after the closing quote\n\n                testEditor.setCursorPos({ line: 5, ch: 11 });   // Set the cursor between the space and the begin quote\n                // Select \"ltr\" to replace \"rtl\"\n                selectHint(HTMLCodeHints.attrHintProvider, \"ltr\");\n                expect(testDocument.getLine(5)).toBe(\"  <h1 dir= \\\"ltr\\\" id='foo'>Heading</h1>\");\n                expectCursorAt({ line: 5, ch: 16 });            // cursor after the closing quote\n            });\n\n            it(\"should replace the unquoted attribute value with the selected attribute value in quotes\", function () {\n                // Insert an unquoted attribute between <div and id on line 5.\n                testDocument.replaceRange(\"dir=ltr \", { line: 5, ch: 6 });\n                testEditor.setCursorPos({ line: 5, ch: 10 });\n                // Select \"rtl\" to replace \"ltr\"\n                selectHint(HTMLCodeHints.attrHintProvider, \"rtl\");\n                expect(testDocument.getLine(5)).toBe(\"  <h1 dir=\\\"rtl\\\" id='foo'>Heading</h1>\");\n                expectCursorAt({ line: 5, ch: 15 });            // cursor after the inserted value\n            });\n\n            it(\"should replace an unquoted attribute value when the cursor is inside that value\", function () {\n                // Insert an unquoted attribute between <div and id on line 5.\n                // intentionally have an invalid attribute lttr here\n                testDocument.replaceRange(\"dir= lttr \", { line: 5, ch: 6 });\n                testEditor.setCursorPos({ line: 5, ch: 12 });   // Set cursor after l in the invalid attribute value\n                selectHint(HTMLCodeHints.attrHintProvider, \"ltr\");\n                expect(testDocument.getLine(5)).toBe(\"  <h1 dir= ltr id='foo'>Heading</h1>\");\n                expectCursorAt({ line: 5, ch: 14 });            // cursor after the inserted value\n            });\n\n            it(\"should insert a quoted attribute value before an existing unquoted attribute value with preceding space character\", function () {\n                // Insert an unquoted attribute between <div and id on line 5.\n                testDocument.replaceRange(\"dir= ltr \", { line: 5, ch: 6 });\n                testEditor.setCursorPos({ line: 5, ch: 10 }); // Set cursor between = and the space\n                selectHint(HTMLCodeHints.attrHintProvider, \"rtl\");\n                expect(testDocument.getLine(5)).toBe(\"  <h1 dir=\\\"rtl\\\" ltr id='foo'>Heading</h1>\");\n                expectCursorAt({ line: 5, ch: 15 });          // cursor after the inserted value\n            });\n\n            it(\"should insert a quoted attribute value before an existing id attribute\", function () {\n                // Insert an unquoted attribute between <div and id on line 5.\n                testDocument.replaceRange(\"dir= \", { line: 5, ch: 6 });\n                testEditor.setCursorPos({ line: 5, ch: 10 }); // Set cursor between = and the space\n                selectHint(HTMLCodeHints.attrHintProvider, \"rtl\");\n                expect(testDocument.getLine(5)).toBe(\"  <h1 dir=\\\"rtl\\\" id='foo'>Heading</h1>\");\n                expectCursorAt({ line: 5, ch: 15 });          // cursor after the inserted value\n            });\n\n            it(\"should insert a quoted attribute value right before the closing > of the tag\", function () {\n                // Insert an unquoted attribute between <p and > on line 7.\n                testDocument.replaceRange(\" dir=\", { line: 7, ch: 4 });\n                testEditor.setCursorPos({ line: 7, ch: 9 }); // Set cursor between = and >\n                selectHint(HTMLCodeHints.attrHintProvider, \"rtl\");\n                expect(testDocument.getLine(7)).toBe(\"  <p dir=\\\"rtl\\\"></p>\");\n                expectCursorAt({ line: 7, ch: 14 });         // cursor after the inserted value\n            });\n\n            it(\"should insert a quoted attribute value without overwriting the closing > of the tag\", function () {\n                // Insert an attribute value right before > on line 7 with an opening double quote that\n                // creates an inbalanced string up to the first attribute value in the next tag.\n                testDocument.replaceRange(\"<a dir=\\\"><span class=\\\"foo\\\"></span></a>\", { line: 7, ch: 2 }, { line: 7, ch: 9 });\n                testEditor.setCursorPos({ line: 7, ch: 10 }); // Set cursor between dir=\" and >\n                selectHint(HTMLCodeHints.attrHintProvider, \"rtl\");\n                expect(testDocument.getLine(7)).toBe(\"  <a dir=\\\"rtl\\\"><span class=\\\"foo\\\"></span></a>\");\n                expectCursorAt({ line: 7, ch: 14 });          // cursor after the inserted value\n            });\n        });\n\n\n    }); // describe(\"HTML Code Hinting\"\n});\n"],"file":"unittests.js"}