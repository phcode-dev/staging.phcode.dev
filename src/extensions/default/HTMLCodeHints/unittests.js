define(function(require,exports,module){var SpecRunnerUtils=brackets.getModule("spec/SpecRunnerUtils"),Editor=brackets.getModule("editor/Editor").Editor,HTMLCodeHints=require("main");describe("unit: HTML Code Hinting",function(){var defaultContent="<!doctype html>\n<html>\n<style type=\"text/css\">\n</style>\n<body>\n  <h1 id='foo'>Heading</h1>\n  <h3 id  = 'bar' >Subheading</h3>\n  <p></p>\n  <h5 id='aaa' class='bbb'></h5>\n  <div \n</body>\n</html>\n",testDocument,testEditor;function expectHints(provider){expect(provider.hasHints(testEditor,null)).toBe(!0);var hintsObj=provider.getHints();return expect(hintsObj).toBeTruthy(),hintsObj.hints}function expectNoHints(provider){expect(provider.hasHints(testEditor,null)).toBe(!1)}function verifyTagHints(hintList,expectedFirstHint){expect(hintList.indexOf("id")).toBe(-1),expectedFirstHint=expectedFirstHint||"a",expect(hintList[0]).toBe(expectedFirstHint)}function verifyAttrHints(hintList,expectedFirstHint){expect(hintList.indexOf("div")).toBe(-1),expectedFirstHint=expectedFirstHint||"accesskey",expect(hintList[0]).toBe(expectedFirstHint)}beforeEach(function(){testDocument=SpecRunnerUtils.createMockDocument(defaultContent,"html"),$("body").append("<div id='editor'/>"),testEditor=new Editor(testDocument,!0,$("#editor").get(0))}),afterEach(function(){testEditor.destroy(),testEditor=null,$("#editor").remove(),testDocument=null}),describe("Tag hint provider",function(){it("should not hint within <style> block",function(){testDocument.setText("<!doctype html>\n<html>\n<head>\n  <style>\n  </style>\n</head>\n<body>\n</body>\n</html>\n"),testEditor.setCursorPos({line:3,ch:9}),expectNoHints(HTMLCodeHints.tagHintProvider)}),it("should hint for < just before existing tag",function(){testDocument.replaceRange("<",{line:5,ch:2}),testEditor.setCursorPos({line:5,ch:3});var hintList=expectHints(HTMLCodeHints.tagHintProvider);verifyTagHints(hintList),expect(hintList.indexOf("div")).not.toBe(-1)}),it("should filter hints by prefix",function(){testDocument.replaceRange("  <s\n",{line:8,ch:0}),testEditor.setCursorPos({line:8,ch:4});var hintList=expectHints(HTMLCodeHints.tagHintProvider);verifyTagHints(hintList,"samp"),expect(hintList.indexOf("div")).toBe(-1),expect(hintList.indexOf("span")).not.toBe(-1)}),it("should list hints between '<' and some trailing spaces",function(){testDocument.replaceRange("<div>\n   \n</div>",{line:9,ch:2}),expect(testDocument.getLine(10)).toBe("   "),testDocument.replaceRange("<",{line:10,ch:0}),testEditor.setCursorPos({line:10,ch:1});var hintList=expectHints(HTMLCodeHints.tagHintProvider);verifyTagHints(hintList),testDocument.replaceRange("<\t",{line:10,ch:0},{line:10,ch:2}),testEditor.setCursorPos({line:10,ch:1}),verifyTagHints(hintList=expectHints(HTMLCodeHints.tagHintProvider))}),it("should show HTML hints after HTML Entity on same line",function(){var hintList;testDocument.replaceRange("&nbsp; Test <  ",{line:8,ch:0}),testEditor.setCursorPos({line:8,ch:13}),verifyTagHints(expectHints(HTMLCodeHints.tagHintProvider))})}),describe("Attribute name hint provider",function(){it("should list hints at start of existing attribute",function(){var hintList;testEditor.setCursorPos({line:5,ch:6}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider))}),it("should list hints within existing attribute",function(){var hintList;testEditor.setCursorPos({line:5,ch:7}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider),"id")}),it("should list hints at end of existing attribute",function(){var hintList;testEditor.setCursorPos({line:5,ch:8}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider),"id")}),it("should list hints at end of existing attribute with whitespace",function(){var hintList;testEditor.setCursorPos({line:6,ch:8}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider),"id")}),it("should list hints to right of attribute value and a space",function(){var hintList;testEditor.setCursorPos({line:6,ch:18}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider))}),it("should NOT list hints to right of '=' sign on id attr",function(){testEditor.setCursorPos({line:5,ch:9}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should list hints to right of '=' sign",function(){testEditor.setCursorPos({line:2,ch:12}),expectHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints to right of '=' sign with whitespace on id attr",function(){testEditor.setCursorPos({line:6,ch:11}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:6,ch:12}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should list hints to right of '=' sign with whitespace",function(){testDocument.setText('<style type = "text/css">'),testEditor.setCursorPos({line:0,ch:13}),expectHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:0,ch:14}),expectHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints to right of attribute value with no separating space",function(){testEditor.setCursorPos({line:5,ch:14}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints within tag name",function(){testEditor.setCursorPos({line:5,ch:3}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:5,ch:4}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:5,ch:5}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:7,ch:4}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should list hints to right of tag name and a space",function(){var hintList;testDocument.replaceRange(" ",{line:7,ch:4}),testEditor.setCursorPos({line:7,ch:5}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider))}),it("should list hints between tag name and attribute name (space on both sides of cursor)",function(){var hintList;testDocument.replaceRange(" ",{line:5,ch:5}),testEditor.setCursorPos({line:5,ch:6}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider))}),it("should list hints between prev attribute value and next attribute name (space on both sides of cursor)",function(){var hintList;testDocument.replaceRange(" ",{line:8,ch:14}),testEditor.setCursorPos({line:8,ch:15}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider))}),it("should NOT list hints to left of tag",function(){testEditor.setCursorPos({line:4,ch:0}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:5,ch:2}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints within text content or whitespace",function(){testEditor.setCursorPos({line:5,ch:0}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:5,ch:18}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints within doctype 'tag'",function(){testEditor.setCursorPos({line:0,ch:10}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints within closing tag",function(){testEditor.setCursorPos({line:5,ch:23}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:5,ch:24}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:5,ch:25}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:5,ch:26}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints between begin 'div' and end 'div' tag",function(){testDocument.replaceRange("<div>\n   \n  </div>",{line:9,ch:2}),testEditor.setCursorPos({line:10,ch:2}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:9,ch:7}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:11,ch:2}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints between an empty tag and 'body' end tag",function(){testDocument.replaceRange("<input type='button' />\n  \n   ",{line:9,ch:2},{line:9,ch:7}),testEditor.setCursorPos({line:11,ch:2}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints between the 'body' begin tag and 'h1' begin tag",function(){testDocument.replaceRange("\n  \n   ",{line:5,ch:0}),testEditor.setCursorPos({line:7,ch:2}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints between the 'h1' end tag and 'h3' begin tag",function(){testDocument.replaceRange("\n  \n   ",{line:6,ch:0}),testEditor.setCursorPos({line:8,ch:2}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints after an HTML comment",function(){testDocument.replaceRange("\x3c!-- some comments --\x3e    ",{line:9,ch:2}),testEditor.setCursorPos({line:9,ch:25}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should list hints on incomplete tag, after tag name",function(){var hintList;testEditor.setCursorPos({line:9,ch:7}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider))}),it("should NOT list hints on incomplete tag, at end of tag name",function(){testEditor.setCursorPos({line:9,ch:5}),expectNoHints(HTMLCodeHints.attrHintProvider),testEditor.setCursorPos({line:9,ch:6}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list hints to left of incomplete tag",function(){testEditor.setCursorPos({line:9,ch:2}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should list hints on incomplete attribute",function(){var hintList;testDocument.replaceRange("i",{line:9,ch:7}),testEditor.setCursorPos({line:9,ch:8}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider),"id")})}),describe("Attribute value hint provider",function(){it("should list attribute value hints for a single quote after the equal sign",function(){testDocument.replaceRange(" dir='",{line:7,ch:4}),testEditor.setCursorPos({line:7,ch:10});var hintList=expectHints(HTMLCodeHints.attrHintProvider);expect(hintList.indexOf("ltr")).not.toBe(-1)}),it("should list attribute value hints within an existing attribute value",function(){testDocument.replaceRange(' dir="ltr"',{line:7,ch:4}),testEditor.setCursorPos({line:7,ch:11});var hintList=expectHints(HTMLCodeHints.attrHintProvider);expect(hintList.indexOf("ltr")).not.toBe(-1)}),it("should list attribute value hints within an unquoted attribute value",function(){testDocument.replaceRange(" dir=ltr",{line:7,ch:4}),testEditor.setCursorPos({line:7,ch:10});var hintList=expectHints(HTMLCodeHints.attrHintProvider);expect(hintList.indexOf("ltr")).not.toBe(-1)}),it("should list sorted boolean attribute value hints",function(){testDocument.replaceRange(' spellcheck="',{line:7,ch:4}),testEditor.setCursorPos({line:7,ch:17});var hintList=expectHints(HTMLCodeHints.attrHintProvider);expect(hintList.indexOf("false")).toBe(0),expect(hintList.indexOf("true")).toBe(1),expect(hintList.length).toBe(2)}),it("should NOT list attribute value hints to the right of a closing double quote",function(){testDocument.replaceRange(' dir="ltr"',{line:7,ch:4}),testEditor.setCursorPos({line:7,ch:14}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list attribute value hints to the right of a closing single quote",function(){testDocument.replaceRange(" dir='ltr'",{line:6,ch:5}),testEditor.setCursorPos({line:4,ch:15}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should list attribute value hints for type attribute of style tag",function(){testEditor.setCursorPos({line:2,ch:21});var hintList=expectHints(HTMLCodeHints.attrHintProvider);expect(hintList.indexOf("text/css")).not.toBe(-1)}),it("should NOT list any attribute value for type attribute of embed tag",function(){testEditor.setCursorPos({line:9,ch:3}),testDocument.replaceRange("embed type='",{line:9,ch:3},{line:9,ch:7}),testEditor.setCursorPos({line:9,ch:15}),expectNoHints(HTMLCodeHints.attrHintProvider)}),it("should NOT list any attribute value for an unknown attribute name",function(){testDocument.replaceRange("foo='",{line:9,ch:7}),testEditor.setCursorPos({line:9,ch:12}),expectNoHints(HTMLCodeHints.attrHintProvider)})}),describe("Valueless attributes",function(){it("should list hints after valueless attribute",function(){var hintList;testDocument.replaceRange("  <input checked >\n",{line:9,ch:0}),testEditor.setCursorPos({line:9,ch:17}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider),"accept")}),it("should list hints after attribute that follows a valueless attribute",function(){var hintList;testDocument.replaceRange("  <input checked accept='' >\n",{line:9,ch:0}),testEditor.setCursorPos({line:9,ch:27}),verifyAttrHints(expectHints(HTMLCodeHints.attrHintProvider))}),it("should list attribute value hints for an attribute that follows a valueless attribute",function(){testDocument.replaceRange("  <input checked accept='' >\n",{line:9,ch:0}),testEditor.setCursorPos({line:9,ch:25});var hintList=expectHints(HTMLCodeHints.attrHintProvider);verifyAttrHints(hintList,"application/msexcel"),testEditor.setCursorPos({line:9,ch:24}),verifyAttrHints(hintList=expectHints(HTMLCodeHints.attrHintProvider),"application/msexcel")}),it("should NOT list attribute value hints when the cursor is after the end quote of an attribute value",function(){testDocument.replaceRange("  <input checked accept='' >\n",{line:9,ch:0}),testEditor.setCursorPos({line:9,ch:26}),expectNoHints(HTMLCodeHints.attrHintProvider)})}),describe("Attribute insertion",function(){function selectHint(provider,expectedHint){var hintList=expectHints(provider);return expect(hintList.indexOf(expectedHint)).not.toBe(-1),provider.insertHint(expectedHint)}function fixPos(pos){return"sticky"in pos||(pos.sticky=null),pos}function expectCursorAt(pos){var selection=testEditor.getSelection();expect(fixPos(selection.start)).toEql(fixPos(selection.end)),expect(fixPos(selection.start)).toEql(fixPos(pos))}it('should insert ="" after attribute',function(){testEditor.setCursorPos({line:6,ch:18}),selectHint(HTMLCodeHints.attrHintProvider,"class"),expect(testDocument.getLine(6)).toBe("  <h3 id  = 'bar' class=\"\">Subheading</h3>"),expectCursorAt({line:6,ch:25})}),it("should make explicit request for new hints after attribute name has been inserted",function(){testEditor.setCursorPos({line:6,ch:18}),expect(selectHint(HTMLCodeHints.attrHintProvider,"dir")).toBe(!0),expect(testDocument.getLine(6)).toBe("  <h3 id  = 'bar' dir=\"\">Subheading</h3>")}),it('should NOT insert ="" after valueless attribute',function(){testDocument.replaceRange("  <input \n",{line:9,ch:0}),testEditor.setCursorPos({line:9,ch:9}),selectHint(HTMLCodeHints.attrHintProvider,"checked"),expect(testDocument.getLine(9)).toBe("  <input checked"),expectCursorAt({line:9,ch:16})}),it("should insert a new attribute before the existing one that starts at cursor",function(){testEditor.setCursorPos({line:5,ch:6}),selectHint(HTMLCodeHints.attrHintProvider,"class"),expect(testDocument.getLine(5)).toBe("  <h1 class=\"\"id='foo'>Heading</h1>"),expectCursorAt({line:5,ch:13})}),it("should change nothing when cursor at end",function(){testEditor.setCursorPos({line:5,ch:8}),selectHint(HTMLCodeHints.attrHintProvider,"id"),expect(testDocument.getLine(5)).toBe("  <h1 id='foo'>Heading</h1>"),expectCursorAt({line:5,ch:8})}),it("should insert a valueless attribute before the existing attribute that starts at cursor",function(){testDocument.replaceRange("  <input id='foo'>\n",{line:9,ch:0}),testEditor.setCursorPos({line:9,ch:9}),selectHint(HTMLCodeHints.attrHintProvider,"checked"),expect(testDocument.getLine(9)).toBe("  <input checkedid='foo'>"),expectCursorAt({line:9,ch:16})}),it("should insert a new atribute with an empty value before the existing valueless attribute",function(){testDocument.replaceRange("  <input checked>\n",{line:9,ch:0}),testEditor.setCursorPos({line:9,ch:9}),selectHint(HTMLCodeHints.attrHintProvider,"class"),expect(testDocument.getLine(9)).toBe('  <input class=""checked>'),expectCursorAt({line:9,ch:16})}),it("should insert the selected attribute value with the closing (single) quote",function(){testDocument.replaceRange("dir='",{line:9,ch:7}),testEditor.setCursorPos({line:9,ch:12}),selectHint(HTMLCodeHints.attrHintProvider,"rtl"),expect(testDocument.getLine(9)).toBe("  <div dir='rtl'"),expectCursorAt({line:9,ch:16})}),it("should insert the selected attribute value with the closing (double) quote",function(){testDocument.replaceRange('dir="',{line:9,ch:7}),testEditor.setCursorPos({line:9,ch:12}),selectHint(HTMLCodeHints.attrHintProvider,"rtl"),expect(testDocument.getLine(9)).toBe('  <div dir="rtl"'),expectCursorAt({line:9,ch:16})}),it("should insert the selected attribute value inside the existing quotes",function(){testDocument.replaceRange('dir=""',{line:9,ch:7}),testEditor.setCursorPos({line:9,ch:12}),selectHint(HTMLCodeHints.attrHintProvider,"rtl"),expect(testDocument.getLine(9)).toBe('  <div dir="rtl"'),expectCursorAt({line:9,ch:16})}),it("should insert the selected attribute value wrapped in double quotes",function(){testDocument.replaceRange("dir=",{line:9,ch:7}),testEditor.setCursorPos({line:9,ch:11}),selectHint(HTMLCodeHints.attrHintProvider,"rtl"),expect(testDocument.getLine(9)).toBe('  <div dir="rtl"'),expectCursorAt({line:9,ch:16})}),it("should replace the partially typed attribute value with the selected attribute value",function(){testDocument.replaceRange('dir="lt',{line:9,ch:7}),testEditor.setCursorPos({line:9,ch:14}),selectHint(HTMLCodeHints.attrHintProvider,"ltr"),expect(testDocument.getLine(9)).toBe('  <div dir="ltr"'),expectCursorAt({line:9,ch:16})}),it("should replace the partially typed attribute value with the selected attribute value",function(){testDocument.replaceRange("dir=lt",{line:9,ch:7}),testEditor.setCursorPos({line:9,ch:13}),selectHint(HTMLCodeHints.attrHintProvider,"ltr"),expect(testDocument.getLine(9)).toBe("  <div dir=ltr"),expectCursorAt({line:9,ch:14})}),it("should replace an existing attribute value with the selected attribute value",function(){testDocument.replaceRange("javascript",{line:2,ch:18},{line:2,ch:21}),testEditor.setCursorPos({line:2,ch:18}),selectHint(HTMLCodeHints.attrHintProvider,"text/css"),expect(testDocument.getLine(2)).toBe('<style type="text/css">'),expectCursorAt({line:2,ch:22})}),it("should replace a quoted attribute value and keep the preceding space and quotes",function(){testDocument.replaceRange('dir= "ltr" ',{line:5,ch:6}),testEditor.setCursorPos({line:5,ch:10}),selectHint(HTMLCodeHints.attrHintProvider,"rtl"),expect(testDocument.getLine(5)).toBe("  <h1 dir= \"rtl\" id='foo'>Heading</h1>"),expectCursorAt({line:5,ch:16}),testEditor.setCursorPos({line:5,ch:11}),selectHint(HTMLCodeHints.attrHintProvider,"ltr"),expect(testDocument.getLine(5)).toBe("  <h1 dir= \"ltr\" id='foo'>Heading</h1>"),expectCursorAt({line:5,ch:16})}),it("should replace the unquoted attribute value with the selected attribute value in quotes",function(){testDocument.replaceRange("dir=ltr ",{line:5,ch:6}),testEditor.setCursorPos({line:5,ch:10}),selectHint(HTMLCodeHints.attrHintProvider,"rtl"),expect(testDocument.getLine(5)).toBe("  <h1 dir=\"rtl\" id='foo'>Heading</h1>"),expectCursorAt({line:5,ch:15})}),it("should replace an unquoted attribute value when the cursor is inside that value",function(){testDocument.replaceRange("dir= lttr ",{line:5,ch:6}),testEditor.setCursorPos({line:5,ch:12}),selectHint(HTMLCodeHints.attrHintProvider,"ltr"),expect(testDocument.getLine(5)).toBe("  <h1 dir= ltr id='foo'>Heading</h1>"),expectCursorAt({line:5,ch:14})}),it("should insert a quoted attribute value before an existing unquoted attribute value with preceding space character",function(){testDocument.replaceRange("dir= ltr ",{line:5,ch:6}),testEditor.setCursorPos({line:5,ch:10}),selectHint(HTMLCodeHints.attrHintProvider,"rtl"),expect(testDocument.getLine(5)).toBe("  <h1 dir=\"rtl\" ltr id='foo'>Heading</h1>"),expectCursorAt({line:5,ch:15})}),it("should insert a quoted attribute value before an existing id attribute",function(){testDocument.replaceRange("dir= ",{line:5,ch:6}),testEditor.setCursorPos({line:5,ch:10}),selectHint(HTMLCodeHints.attrHintProvider,"rtl"),expect(testDocument.getLine(5)).toBe("  <h1 dir=\"rtl\" id='foo'>Heading</h1>"),expectCursorAt({line:5,ch:15})}),it("should insert a quoted attribute value right before the closing > of the tag",function(){testDocument.replaceRange(" dir=",{line:7,ch:4}),testEditor.setCursorPos({line:7,ch:9}),selectHint(HTMLCodeHints.attrHintProvider,"rtl"),expect(testDocument.getLine(7)).toBe('  <p dir="rtl"></p>'),expectCursorAt({line:7,ch:14})}),it("should insert a quoted attribute value without overwriting the closing > of the tag",function(){testDocument.replaceRange('<a dir="><span class="foo"></span></a>',{line:7,ch:2},{line:7,ch:9}),testEditor.setCursorPos({line:7,ch:10}),selectHint(HTMLCodeHints.attrHintProvider,"rtl"),expect(testDocument.getLine(7)).toBe('  <a dir="rtl"><span class="foo"></span></a>'),expectCursorAt({line:7,ch:14})})})})});
//# sourceMappingURL=unittests.js.map
