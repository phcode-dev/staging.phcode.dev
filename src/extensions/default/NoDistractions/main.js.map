{"version":3,"sources":["extensions/default/NoDistractions/main.js"],"names":["define","require","exports","module","Menus","brackets","getModule","CommandManager","Commands","Strings","PreferencesManager","ViewUtils","KeyBindingManager","Metrics","WorkspaceManager","PREFS_PURE_CODE","CMD_TOGGLE_PURE_CODE","CMD_TOGGLE_PANELS","togglePureCodeKey","togglePureCodeKeyMac","togglePanelsKey","togglePanelsKeyMac","togglePanelsKey_EN","togglePanelsKeyMac_EN","_previouslyOpenPanelIDs","panelsToggled","layoutUpdated","_updateCheckedState","get","setChecked","_togglePureCode","set","countEvent","EVENT_TYPE","UI","_hidePanelsIfRequired","panelIDs","getAllPanelIDs","forEach","panelID","panel","getPanelForID","isVisible","hide","push","_showPanelsIfRequired","show","_updateLayout","_togglePanels","initializeCommands","register","getMenu","AppMenuBar","VIEW_MENU","addMenuItem","AFTER","VIEW_HIDE_SIDEBAR","addBinding","key","platform","definePreference","description","DESCRIPTION_PURE_CODING_SURFACE","on","hideMainToolBar","execute","HIDE_SIDEBAR","showMainToolBar","SHOW_SIDEBAR","EVENT_WORKSPACE_PANEL_SHOWN"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,MAAsBC,SAASC,UAAU,iBACzCC,eAAsBF,SAASC,UAAU,0BACzCE,SAAsBH,SAASC,UAAU,oBACzCG,QAAsBJ,SAASC,UAAU,WACzCI,mBAAsBL,SAASC,UAAU,kCACzCK,UAAsBN,SAASC,UAAU,mBACzCM,kBAAsBP,SAASC,UAAU,6BACzCO,QAAsBR,SAASC,UAAU,iBACzCQ,iBAAsBT,SAASC,UAAU,yBAGzCS,gBAA4B,iBAC5BC,qBAA4B,sBAC5BC,kBAA4B,oBAG5BC,kBAA4B,eAC5BC,qBAA4B,cAC5BC,gBAA4B,eAC5BC,mBAA4B,cAC5BC,mBAA4B,eAC5BC,sBAA4B,cAG5BC,wBAA0B,GAC1BC,eAAgB,EAChBC,eAAgB,EAMpB,SAASC,sBACLpB,eAAeqB,IAAIZ,sBAAsBa,WAAWnB,mBAAmBkB,IAAIb,kBAO/E,SAASe,kBACLpB,mBAAmBqB,IAAIhB,iBAAkBL,mBAAmBkB,IAAIb,kBAChEF,QAAQmB,WAAWnB,QAAQoB,WAAWC,GAAI,iBAAkB,UAMhE,SAASC,wBACL,IAAIC,SAAWtB,iBAAiBuB,iBAChCb,wBAA0B,GAC1BY,SAASE,QAAQ,SAAUC,SACvB,IAAIC,MAAQ1B,iBAAiB2B,cAAcF,SACvCC,OAASA,MAAME,cACfF,MAAMG,OACNnB,wBAAwBoB,KAAKL,YAQzC,SAASM,wBACL,IAAIT,SAAWZ,wBACNc,QAAQ,SAAUC,SACvB,IAAIC,MAAQ1B,iBAAiB2B,cAAcF,SACvCC,OACAA,MAAMM,SAGdtB,wBAA0B,GAG9B,SAASuB,gBACLrB,eAAgB,EAChBD,eAAgB,EAUpB,SAASuB,iBACLvB,eAAiBA,gBAEbU,wBACAT,eAAgB,EAChBD,eAAgB,GACRC,eACRmB,wBAGJhC,QAAQmB,WAAWnB,QAAQoB,WAAWC,GAAI,iBAAkB,gBAyBhE,SAASe,qBACL1C,eAAe2C,SAASzC,QAAQO,qBAAsBA,qBAAsBc,iBAC5EvB,eAAe2C,SAASzC,QAAQQ,kBAAmBA,kBAAmB+B,eAEtE5C,MAAM+C,QAAQ/C,MAAMgD,WAAWC,WAAWC,YAAYrC,kBAAmB,GAAIb,MAAMmD,MAAO/C,SAASgD,mBACnGpD,MAAM+C,QAAQ/C,MAAMgD,WAAWC,WAAWC,YAAYtC,qBAAsB,GAAIZ,MAAMmD,MAAOtC,mBAE7FL,kBAAkB6C,WAAWzC,qBAAsB,CAAE,CAAC0C,IAAKxC,mBAAoB,CAACwC,IAAKvC,qBAAsBwC,SAAU,SAIrH/C,kBAAkB6C,WAAWxC,kBAAmB,CAAE,CAACyC,IAAKtC,iBAAkB,CAACsC,IAAKrC,mBAAoBsC,SAAU,SAC9G/C,kBAAkB6C,WAAWxC,kBAAmB,CAAE,CAACyC,IAAKpC,oBAAqB,CAACoC,IAAKnC,sBAAuBoC,SAAU,SAlCxHjD,mBAAmBkD,iBAAiB7C,gBAAiB,WAAW,EAAO,CACnE8C,YAAapD,QAAQqD,kCAGzBpD,mBAAmBqD,GAAG,SAAUhD,gBAAiB,WACzCL,mBAAmBkB,IAAIb,kBACvBJ,UAAUqD,kBACVzD,eAAe0D,QAAQzD,SAAS0D,cAChC/B,0BAEAxB,UAAUwD,kBACV5D,eAAe0D,QAAQzD,SAAS4D,cAChCvB,yBAEJlB,wBAGJb,iBAAiBiD,GAAGjD,iBAAiBuD,4BAA6BtB,eAoBlEE","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2015 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var Menus               = brackets.getModule(\"command/Menus\"),\n        CommandManager      = brackets.getModule(\"command/CommandManager\"),\n        Commands            = brackets.getModule(\"command/Commands\"),\n        Strings             = brackets.getModule(\"strings\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        ViewUtils           = brackets.getModule(\"utils/ViewUtils\"),\n        KeyBindingManager   = brackets.getModule(\"command/KeyBindingManager\"),\n        Metrics             = brackets.getModule(\"utils/Metrics\"),\n        WorkspaceManager    = brackets.getModule(\"view/WorkspaceManager\");\n\n    // Constants\n    var PREFS_PURE_CODE           = \"noDistractions\",\n        CMD_TOGGLE_PURE_CODE      = \"view.togglePureCode\",\n        CMD_TOGGLE_PANELS         = \"view.togglePanels\";\n\n    //key binding keys\n    var togglePureCodeKey         = \"Ctrl-Shift-2\",\n        togglePureCodeKeyMac      = \"Cmd-Shift-2\",\n        togglePanelsKey           = \"Ctrl-Shift-1\",\n        togglePanelsKeyMac        = \"Cmd-Shift-1\",\n        togglePanelsKey_EN        = \"Ctrl-Shift-`\",\n        togglePanelsKeyMac_EN     = \"Cmd-Shift-`\";\n\n    //locals\n    var _previouslyOpenPanelIDs = [],\n        panelsToggled = false,\n        layoutUpdated = false;\n\n    /**\n     * @private\n     * Updates the command checked status based on the preference for noDestraction mode\n     */\n    function _updateCheckedState() {\n        CommandManager.get(CMD_TOGGLE_PURE_CODE).setChecked(PreferencesManager.get(PREFS_PURE_CODE));\n    }\n\n    /**\n     * @private\n     * toggles noDisraction preference\n     */\n    function _togglePureCode() {\n        PreferencesManager.set(PREFS_PURE_CODE, !PreferencesManager.get(PREFS_PURE_CODE));\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, 'noDistractions', 'toggle');\n    }\n\n    /**\n     * hide all open panels\n     */\n    function _hidePanelsIfRequired() {\n        var panelIDs = WorkspaceManager.getAllPanelIDs();\n        _previouslyOpenPanelIDs = [];\n        panelIDs.forEach(function (panelID) {\n            var panel = WorkspaceManager.getPanelForID(panelID);\n            if (panel && panel.isVisible()) {\n                panel.hide();\n                _previouslyOpenPanelIDs.push(panelID);\n            }\n        });\n    }\n\n    /**\n     * show all open panels that was previously hidden by _hidePanelsIfRequired()\n     */\n    function _showPanelsIfRequired() {\n        var panelIDs = _previouslyOpenPanelIDs;\n        panelIDs.forEach(function (panelID) {\n            var panel = WorkspaceManager.getPanelForID(panelID);\n            if (panel) {\n                panel.show();\n            }\n        });\n        _previouslyOpenPanelIDs = [];\n    }\n\n    function _updateLayout() {\n        layoutUpdated = true;\n        panelsToggled = false;\n    }\n\n    /**\n     * We toggle panels in certain cases only :\n     * 1. if a panel is shown, toggle can hide it, and successive toggle can show the panel and repeat.\n     * 2. if a panel is hidden by toggle, and say the workspace changed making another panel visible by some operation;\n     * we reset toggle states so that toggle would hide the panel already present in the workspace.\n     * The already hidden panel should not be shown in the specific case for better UX.\n     */\n    function _togglePanels() {\n        panelsToggled = !panelsToggled;\n        if (panelsToggled) {\n            _hidePanelsIfRequired();\n            layoutUpdated = false;\n            panelsToggled = true;\n        } else if (!layoutUpdated) {\n            _showPanelsIfRequired();\n        }\n\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, 'noDistractions', 'togglePanels');\n    }\n\n    PreferencesManager.definePreference(PREFS_PURE_CODE, \"boolean\", false, {\n        description: Strings.DESCRIPTION_PURE_CODING_SURFACE\n    });\n\n    PreferencesManager.on(\"change\", PREFS_PURE_CODE, function () {\n        if (PreferencesManager.get(PREFS_PURE_CODE)) {\n            ViewUtils.hideMainToolBar();\n            CommandManager.execute(Commands.HIDE_SIDEBAR);\n            _hidePanelsIfRequired();\n        } else {\n            ViewUtils.showMainToolBar();\n            CommandManager.execute(Commands.SHOW_SIDEBAR);\n            _showPanelsIfRequired();\n        }\n        _updateCheckedState();\n    });\n\n    WorkspaceManager.on(WorkspaceManager.EVENT_WORKSPACE_PANEL_SHOWN, _updateLayout);\n\n    /**\n     * Register the Commands , add the Menu Items and key bindings\n     */\n    function initializeCommands() {\n        CommandManager.register(Strings.CMD_TOGGLE_PURE_CODE, CMD_TOGGLE_PURE_CODE, _togglePureCode);\n        CommandManager.register(Strings.CMD_TOGGLE_PANELS, CMD_TOGGLE_PANELS, _togglePanels);\n\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).addMenuItem(CMD_TOGGLE_PANELS, \"\", Menus.AFTER, Commands.VIEW_HIDE_SIDEBAR);\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).addMenuItem(CMD_TOGGLE_PURE_CODE, \"\", Menus.AFTER, CMD_TOGGLE_PANELS);\n\n        KeyBindingManager.addBinding(CMD_TOGGLE_PURE_CODE, [ {key: togglePureCodeKey}, {key: togglePureCodeKeyMac, platform: \"mac\"} ]);\n\n        //default toggle panel shortcut was ctrl+shift+` as it is present in one vertical line in the keyboard. However, we later learnt\n        //from IQE team than non-English keyboards does not have the ` char. So added one more shortcut ctrl+shift+1 which will be preferred\n        KeyBindingManager.addBinding(CMD_TOGGLE_PANELS, [ {key: togglePanelsKey}, {key: togglePanelsKeyMac, platform: \"mac\"} ]);\n        KeyBindingManager.addBinding(CMD_TOGGLE_PANELS, [ {key: togglePanelsKey_EN}, {key: togglePanelsKeyMac_EN, platform: \"mac\"} ]);\n    }\n\n    initializeCommands();\n\n});\n"],"file":"main.js"}