{"version":3,"sources":["extensions/default/JSLint/main.js"],"names":["define","require","exports","module","CodeInspection","brackets","getModule","Editor","PreferencesManager","Strings","_","prefs","getExtensionPrefs","_lastRunOptions","definePreference","undefined","description","DESCRIPTION_JSLINT_OPTIONS","keys","ass","type","DESCRIPTION_JSLINT_OPTIONS_ASS","initial","bitwise","DESCRIPTION_JSLINT_OPTIONS_BITWISE","browser","DESCRIPTION_JSLINT_OPTIONS_BROWSER","closure","DESCRIPTION_JSLINT_OPTIONS_CLOSURE","continue","DESCRIPTION_JSLINT_OPTIONS_CONTINUE","couch","DESCRIPTION_JSLINT_OPTIONS_COUCH","debug","DESCRIPTION_JSLINT_OPTIONS_DEBUG","devel","DESCRIPTION_JSLINT_OPTIONS_DEVEL","eqeq","DESCRIPTION_JSLINT_OPTIONS_EQEQ","es6","DESCRIPTION_JSLINT_OPTIONS_ES6","evil","DESCRIPTION_JSLINT_OPTIONS_EVIL","forin","DESCRIPTION_JSLINT_OPTIONS_FORIN","indent","DESCRIPTION_JSLINT_OPTIONS_INDENT","maxerr","DESCRIPTION_JSLINT_OPTIONS_MAXERR","maxlen","DESCRIPTION_JSLINT_OPTIONS_MAXLEN","newcap","DESCRIPTION_JSLINT_OPTIONS_NEWCAP","node","DESCRIPTION_JSLINT_OPTIONS_NODE","nomen","DESCRIPTION_JSLINT_OPTIONS_NOMEN","passfail","DESCRIPTION_JSLINT_OPTIONS_PASSFAIL","plusplus","DESCRIPTION_JSLINT_OPTIONS_PLUSPLUS","regexp","DESCRIPTION_JSLINT_OPTIONS_REGEXP","rhino","DESCRIPTION_JSLINT_OPTIONS_RHINO","sloppy","DESCRIPTION_JSLINT_OPTIONS_SLOPPY","stupid","DESCRIPTION_JSLINT_OPTIONS_STUPID","sub","DESCRIPTION_JSLINT_OPTIONS_SUB","todo","DESCRIPTION_JSLINT_OPTIONS_TODO","unparam","DESCRIPTION_JSLINT_OPTIONS_UNPARAM","vars","DESCRIPTION_JSLINT_OPTIONS_VARS","white","DESCRIPTION_JSLINT_OPTIONS_WHITE","on","e","data","options","get","isEqual","requestRun","JSLINT_NAME","ENVIRONMENTS","_getIndentSize","fullPath","getUseTabChar","getTabSize","getSpaceUnits","lintOneFile","text","replace","hasEnvironment","jslintResult","clone","some","env","JSLINT","errors","filter","err","result","map","jslintError","pos","line","ch","character","message","reason","Type","WARNING","length","aborted","META","register","name","scanFile"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global JSLINT */\n\n/**\n * Provides JSLint results via the core linting extension point\n */\ndefine(function (require, exports, module) {\n\n\n    // Load JSLint, a non-module lib\n    require(\"thirdparty/jslint/jslint\");\n\n    // Load dependent modules\n    var CodeInspection     = brackets.getModule(\"language/CodeInspection\"),\n        Editor             = brackets.getModule(\"editor/Editor\").Editor,\n        PreferencesManager = brackets.getModule(\"preferences/PreferencesManager\"),\n        Strings            = brackets.getModule(\"strings\"),\n        _                  = brackets.getModule(\"thirdparty/lodash\");\n\n    var prefs = PreferencesManager.getExtensionPrefs(\"jslint\");\n\n    /**\n     * @private\n     *\n     * Used to keep track of the last options JSLint was run with to avoid running\n     * again when there were no changes.\n     */\n    var _lastRunOptions;\n\n    prefs.definePreference(\"options\", \"object\", undefined, {\n        description: Strings.DESCRIPTION_JSLINT_OPTIONS,\n        keys: {\n            ass: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_ASS,\n                initial: false\n            },\n            bitwise: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_BITWISE,\n                initial: false\n            },\n            browser: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_BROWSER,\n                initial: false\n            },\n            closure: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_CLOSURE,\n                initial: false\n            },\n            \"continue\": {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_CONTINUE,\n                initial: false\n            },\n            couch: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_COUCH,\n                initial: false\n            },\n            debug: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_DEBUG,\n                initial: false\n            },\n            devel: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_DEVEL,\n                initial: false\n            },\n            eqeq: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_EQEQ,\n                initial: false\n            },\n            es6: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_ES6,\n                initial: false\n            },\n            evil: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_EVIL,\n                initial: false\n            },\n            forin: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_FORIN,\n                initial: false\n            },\n            indent: {\n                type: \"number\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_INDENT\n            },\n            maxerr: {\n                type: \"number\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_MAXERR\n            },\n            maxlen: {\n                type: \"number\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_MAXLEN\n            },\n            newcap: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_NEWCAP,\n                initial: false\n            },\n            node: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_NODE,\n                initial: false\n            },\n            nomen: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_NOMEN,\n                initial: false\n            },\n            passfail: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_PASSFAIL,\n                initial: false\n            },\n            plusplus: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_PLUSPLUS,\n                initial: false\n            },\n            regexp: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_REGEXP,\n                initial: false\n            },\n            rhino: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_RHINO,\n                initial: false\n            },\n            sloppy: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_SLOPPY,\n                initial: false\n            },\n            stupid: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_STUPID,\n                initial: false\n            },\n            sub: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_SUB,\n                initial: false\n            },\n            todo: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_TODO,\n                initial: false\n            },\n            unparam: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_UNPARAM,\n                initial: false\n            },\n            vars: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_VARS,\n                initial: false\n            },\n            white: {\n                type: \"boolean\",\n                description: Strings.DESCRIPTION_JSLINT_OPTIONS_WHITE,\n                initial: false\n            }\n        }\n    })\n        .on(\"change\", function (e, data) {\n            var options = prefs.get(\"options\");\n            if (!_.isEqual(options, _lastRunOptions)) {\n                CodeInspection.requestRun(Strings.JSLINT_NAME);\n            }\n        });\n\n    // Predefined environments understood by JSLint.\n    var ENVIRONMENTS = [\"browser\", \"node\", \"couch\", \"rhino\"];\n\n    // gets indentation size depending whether the tabs or spaces are used\n    function _getIndentSize(fullPath) {\n        return Editor.getUseTabChar(fullPath) ? Editor.getTabSize(fullPath) : Editor.getSpaceUnits(fullPath);\n    }\n\n    /**\n     * Run JSLint on the current document. Reports results to the main UI. Displays\n     * a gold star when no errors are found.\n     */\n    function lintOneFile(text, fullPath) {\n        // If a line contains only whitespace (here spaces or tabs), remove the whitespace\n        text = text.replace(/^[ \\t]+$/gm, \"\");\n\n        var options = prefs.get(\"options\");\n\n        _lastRunOptions = _.clone(options);\n\n        if (!options) {\n            options = {};\n        } else {\n            options = _.clone(options);\n        }\n\n        if (!options.indent) {\n            // default to using the same indentation value that the editor is using\n            options.indent = _getIndentSize(fullPath);\n        }\n\n        // If the user has not defined the environment, we use browser by default.\n        var hasEnvironment = _.some(ENVIRONMENTS, function (env) {\n            return options[env] !== undefined;\n        });\n\n        if (!hasEnvironment) {\n            options.browser = true;\n        }\n\n        var jslintResult = JSLINT(text, options);\n\n        if (!jslintResult) {\n            // Remove any trailing null placeholder (early-abort indicator)\n            var errors = JSLINT.errors.filter(function (err) { return err !== null; });\n\n            errors = errors.map(function (jslintError) {\n                return {\n                    // JSLint returns 1-based line/col numbers\n                    pos: { line: jslintError.line - 1, ch: jslintError.character - 1 },\n                    message: jslintError.reason,\n                    type: CodeInspection.Type.WARNING\n                };\n            });\n\n            var result = { errors: errors };\n\n            // If array terminated in a null it means there was a stop notice\n            if (errors.length !== JSLINT.errors.length) {\n                result.aborted = true;\n                errors[errors.length - 1].type = CodeInspection.Type.META;\n            }\n\n            return result;\n        }\n        return null;\n    }\n\n    // Register for JS files\n    CodeInspection.register(\"javascript\", {\n        name: Strings.JSLINT_NAME,\n        scanFile: lintOneFile\n    });\n});\n"],"file":"main.js"}