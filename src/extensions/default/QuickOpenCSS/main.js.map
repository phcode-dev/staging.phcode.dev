{"version":3,"sources":["extensions/default/QuickOpenCSS/main.js"],"names":["define","require","exports","module","EditorManager","brackets","getModule","QuickOpen","QuickOpenHelper","CSSUtils","DocumentManager","StringMatch","createSelectorList","doc","getCurrentDocument","docText","getText","extractAllSelectors","getLanguage","getMode","search","query","matcher","selectorList","slice","indexOf","length","filteredList","$","map","itemInfo","searchResult","match","getCompleteSelectors","selectorInfo","basicMatchSort","itemFocus","selectedItem","explicit","from","line","selectorStartLine","ch","selectorStartChar","to","selectorEndChar","getCurrentFullEditor","setSelection","itemSelect","addQuickOpenPlugin","name","languageIds"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,cAAsBC,SAASC,UAAU,wBACzCC,UAAsBF,SAASC,UAAU,oBACzCE,gBAAsBH,SAASC,UAAU,0BACzCG,SAAsBJ,SAASC,UAAU,qBACzCI,gBAAsBL,SAASC,UAAU,4BACzCK,YAAsBN,SAASC,UAAU,qBAQ7C,SAASM,qBACL,IAAIC,IAAMH,gBAAgBI,qBAC1B,GAAKD,IAAL,CAIA,IAAIE,QAAUF,IAAIG,UAClB,OAAOP,SAASQ,oBAAoBF,QAASF,IAAIK,cAAcC,YAQnE,SAASC,OAAOC,MAAOC,SACnB,IAAIC,aAAeD,QAAQC,aACtBA,eACDA,aAAeX,qBACfU,QAAQC,aAAeA,cAE3BF,MAAQA,MAAMG,MAAMH,MAAMI,QAAQ,KAAO,EAAGJ,MAAMK,QAGlD,IAAIC,aAAeC,EAAEC,IAAIN,aAAc,SAAUO,UAC7C,IAAIC,aAAeT,QAAQU,MAAMvB,SAASwB,qBAAqBH,UAAWT,OAI1E,OAHIU,eACAA,aAAaG,aAAeJ,UAEzBC,eAMX,OAFApB,YAAYwB,eAAeR,cAEpBA,aAUX,SAASS,UAAUC,aAAchB,MAAOiB,UACpC,MAAKD,cAAiBhB,MAAMK,OAAS,IAAMY,UAA3C,CAGA,IAAIJ,aAAeG,aAAaH,aAE5BK,KAAO,CAACC,KAAMN,aAAaO,kBAAmBC,GAAIR,aAAaS,mBAC/DC,GAAK,CAACJ,KAAMN,aAAaO,kBAAmBC,GAAIR,aAAaW,iBACjEzC,cAAc0C,uBAAuBC,aAAaR,KAAMK,IAAI,IAGhE,SAASI,WAAWX,aAAchB,OAC9Be,UAAUC,aAAchB,OAAO,GAKnCd,UAAU0C,mBACN,CACIC,KAAM,gBACNC,YAAa,CAAC,MAAO,OAAQ,QAC7B/B,OAAQA,OACRY,MAAOxB,gBAAgBwB,MACvBI,UAAWA,UACXY,WAAYA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var EditorManager       = brackets.getModule(\"editor/EditorManager\"),\n        QuickOpen           = brackets.getModule(\"search/QuickOpen\"),\n        QuickOpenHelper     = brackets.getModule(\"search/QuickOpenHelper\"),\n        CSSUtils            = brackets.getModule(\"language/CSSUtils\"),\n        DocumentManager     = brackets.getModule(\"document/DocumentManager\"),\n        StringMatch         = brackets.getModule(\"utils/StringMatch\");\n\n\n    /**\n     * Returns a list of information about selectors for a single document. This array is populated\n     * by createSelectorList()\n     * @return {?Array.<FileLocation>}\n     */\n    function createSelectorList() {\n        var doc = DocumentManager.getCurrentDocument();\n        if (!doc) {\n            return;\n        }\n\n        var docText = doc.getText();\n        return CSSUtils.extractAllSelectors(docText, doc.getLanguage().getMode());\n    }\n\n\n    /**\n     * @param {string} query what the user is searching for\n     * @return {Array.<SearchResult>} sorted and filtered results that match the query\n     */\n    function search(query, matcher) {\n        var selectorList = matcher.selectorList;\n        if (!selectorList) {\n            selectorList = createSelectorList();\n            matcher.selectorList = selectorList;\n        }\n        query = query.slice(query.indexOf(\"@\") + 1, query.length);\n\n        // Filter and rank how good each match is\n        var filteredList = $.map(selectorList, function (itemInfo) {\n            var searchResult = matcher.match(CSSUtils.getCompleteSelectors(itemInfo), query);\n            if (searchResult) {\n                searchResult.selectorInfo = itemInfo;\n            }\n            return searchResult;\n        });\n\n        // Sort based on ranking & basic alphabetical order\n        StringMatch.basicMatchSort(filteredList);\n\n        return filteredList;\n    }\n\n    /**\n     * Scroll to the selected item in the current document (unless no query string entered yet,\n     * in which case the topmost list item is irrelevant)\n     * @param {?SearchResult} selectedItem\n     * @param {string} query\n     * @param {boolean} explicit False if this is only highlighted due to being at top of list after search()\n     */\n    function itemFocus(selectedItem, query, explicit) {\n        if (!selectedItem || (query.length < 2 && !explicit)) {\n            return;\n        }\n        var selectorInfo = selectedItem.selectorInfo;\n\n        var from = {line: selectorInfo.selectorStartLine, ch: selectorInfo.selectorStartChar};\n        var to = {line: selectorInfo.selectorStartLine, ch: selectorInfo.selectorEndChar};\n        EditorManager.getCurrentFullEditor().setSelection(from, to, true);\n    }\n\n    function itemSelect(selectedItem, query) {\n        itemFocus(selectedItem, query, true);\n    }\n\n\n\n    QuickOpen.addQuickOpenPlugin(\n        {\n            name: \"CSS Selectors\",\n            languageIds: [\"css\", \"less\", \"scss\"],\n            search: search,\n            match: QuickOpenHelper.match,\n            itemFocus: itemFocus,\n            itemSelect: itemSelect\n        }\n    );\n\n\n});\n"],"file":"main.js"}