{"version":3,"sources":["extensions/default/Phoenix-live-preview/main.js"],"names":["define","require","exports","module","ExtensionUtils","brackets","getModule","EditorManager","ExtensionInterface","CommandManager","Commands","Menus","WorkspaceManager","AppInit","ProjectManager","MainViewManager","Strings","Mustache","Metrics","LiveDevelopment","LiveDevServerManager","StaticServer","utils","LIVE_PREVIEW_PANEL_ID","NAVIGATOR_REDIRECT_PAGE","IFRAME_EVENT_SERVER_READY","serverReady","LIVE_PREVIEW_IFRAME_HTML","_createStaticServer","config","pathResolver","makeProjectRelativeIfPossible","root","getProjectRoot","fullPath","$icon","$iframe","$panel","$pinUrlBtn","$highlightBtn","$livePreviewPopBtn","$reloadBtn","registerExtensionInterface","_DEFAULT_EXTENSIONS_INTERFACE_NAMES","PHOENIX_LIVE_PREVIEW","panelHTML","loadStyleSheet","panel","urlPinned","currentLivePreviewURL","_blankIframe","newIframe","$","insertAfter","remove","_setPanelVisibility","isVisible","toggleClass","show","_loadPreview","hide","_startOrStopLivePreviewIfRequired","explicitClickOnLPIcon","visible","isInactive","openLivePreview","closeLivePreview","isActive","livePreviewTabs","size","_toggleVisibilityOnClick","_togglePinUrl","pinStatus","hasClass","removeClass","addClass","setLivePreviewPinned","countEvent","EVENT_TYPE","LIVE_PREVIEW","_updateLiveHighlightToggleStatus","isHighlightEnabled","get","FILE_LIVE_HIGHLIGHT","getChecked","_toggleLiveHighlights","execute","_getTabNavigationURL","url","details","getLivePreviewDetails","openURL","URL","searchParams","set","PHCODE_LIVE_PREVIEW_QUERY_PARAM","href","getPageLoaderURL","_redirectAllTabs","newURL","messageToLivePreviewTabs","type","_popoutLivePreview","open","_setTitle","fileName","message","LIVE_DEV_SELECT_FILE_TO_PREVIEW","tooltip","LIVE_DEV_STATUS_TIP_OUT_OF_SYNC","document","getElementById","textContent","title","async","_createExtensionPanel","templateVars","livePreview","clickToReload","LIVE_DEV_CLICK_TO_RELOAD_PAGE","toggleLiveHighlight","LIVE_DEV_TOGGLE_LIVE_HIGHLIGHT","clickToPopout","LIVE_DEV_CLICK_POPOUT","clickToPinUnpin","LIVE_DEV_CLICK_TO_PIN_UNPIN","PANEL_MIN_SIZE","INITIAL_PANEL_SIZE","body","clientWidth","click","render","find","onload","attr","popoutSupported","Phoenix","browser","isTauri","desktop","isChromeBased","createPluginPanel","recomputeLayout","force","isPreviewLoadable","previewDetails","getPreviewDetails","newSrc","encodeURI","filePath","iframeURL","isImage","getExtension","_projectFileChanges","evt","changedFile","isPreviewableFile","isHTMLFile","livePreviewEnabledOnProjectSwitch","_projectOpened","getNoPreviewURL","_projectClosed","_activeDocChanged","_openLivePreviewURL","_event","currentPreviewDetails","console","error","_currentFileChanged","newFile","appReady","fileMenu","registerServer","create","on","EVENT_PROJECT_FILE_CHANGED","EVENT_PROJECT_OPEN","EVENT_PROJECT_CLOSE","register","CMD_LIVE_FILE_PREVIEW","FILE_LIVE_FILE_PREVIEW","getMenu","AppMenuBar","FILE_MENU","addMenuItem","setTimeout","EVENT_OPEN_PREVIEW_URL","EVENT_LIVE_HIGHLIGHT_PREF_CHANGED","_evt","event","consecutiveEmptyClientsCount","setInterval"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global Phoenix*/\n//jshint-ignore:no-start\n\ndefine(function (require, exports, module) {\n    const ExtensionUtils   = brackets.getModule(\"utils/ExtensionUtils\"),\n        EditorManager      = brackets.getModule(\"editor/EditorManager\"),\n        ExtensionInterface = brackets.getModule(\"utils/ExtensionInterface\"),\n        CommandManager     = brackets.getModule(\"command/CommandManager\"),\n        Commands           = brackets.getModule(\"command/Commands\"),\n        Menus              = brackets.getModule(\"command/Menus\"),\n        WorkspaceManager   = brackets.getModule(\"view/WorkspaceManager\"),\n        AppInit            = brackets.getModule(\"utils/AppInit\"),\n        ProjectManager     = brackets.getModule(\"project/ProjectManager\"),\n        MainViewManager    = brackets.getModule(\"view/MainViewManager\"),\n        Strings            = brackets.getModule(\"strings\"),\n        Mustache           = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        Metrics            = brackets.getModule(\"utils/Metrics\"),\n        LiveDevelopment    = brackets.getModule(\"LiveDevelopment/main\"),\n        LiveDevServerManager = brackets.getModule(\"LiveDevelopment/LiveDevServerManager\"),\n        StaticServer         = require(\"StaticServer\"),\n        utils = require('utils');\n\n    const LIVE_PREVIEW_PANEL_ID = \"live-preview-panel\",\n        NAVIGATOR_REDIRECT_PAGE = \"REDIRECT_PAGE\",\n        IFRAME_EVENT_SERVER_READY = 'SERVER_READY';\n    let serverReady = false;\n    const LIVE_PREVIEW_IFRAME_HTML = `\n    <iframe id=\"panel-live-preview-frame\" title=\"Live Preview\" style=\"border: none\"\n             width=\"100%\" height=\"100%\" seamless=\"true\"\n             src='about:blank'\n             sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms allow-modals allow-pointer-lock allow-presentation\">\n    </iframe>\n    `;\n\n    ExtensionInterface.registerExtensionInterface(\n        ExtensionInterface._DEFAULT_EXTENSIONS_INTERFACE_NAMES.PHOENIX_LIVE_PREVIEW, exports);\n\n    /**\n     * @private\n     * @return {StaticServerProvider} The singleton StaticServerProvider initialized\n     * on app ready.\n     */\n    function _createStaticServer() {\n        var config = {\n            pathResolver: ProjectManager.makeProjectRelativeIfPossible,\n            root: ProjectManager.getProjectRoot().fullPath\n        };\n\n        return new StaticServer.StaticServer(config);\n    }\n\n    // jQuery objects\n    let $icon,\n        $iframe,\n        $panel,\n        $pinUrlBtn,\n        $highlightBtn,\n        $livePreviewPopBtn,\n        $reloadBtn;\n\n\n    // Templates\n    let panelHTML       = require(\"text!panel.html\");\n    ExtensionUtils.loadStyleSheet(module, \"live-preview.css\");\n    // Other vars\n    let panel,\n        urlPinned,\n        currentLivePreviewURL = \"\";\n\n    function _blankIframe() {\n        // we have to remove the dom node altog as at time chrome fails to clear workers if we just change\n        // src. so we delete the node itself to eb thorough.\n        let newIframe = $(LIVE_PREVIEW_IFRAME_HTML);\n        newIframe.insertAfter($iframe);\n        $iframe.remove();\n        $iframe = newIframe;\n    }\n\n    function _setPanelVisibility(isVisible) {\n        if (isVisible) {\n            $icon.toggleClass(\"active\");\n            panel.show();\n            _loadPreview(true);\n        } else {\n            $icon.toggleClass(\"active\");\n            _blankIframe();\n            panel.hide();\n        }\n    }\n\n    function _startOrStopLivePreviewIfRequired(explicitClickOnLPIcon) {\n        let visible = panel && panel.isVisible();\n        if(visible && LiveDevelopment.isInactive()) {\n            LiveDevelopment.openLivePreview();\n        } else if(visible && explicitClickOnLPIcon) {\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n        } else if(!visible && LiveDevelopment.isActive() && StaticServer.livePreviewTabs.size === 0) {\n            LiveDevelopment.closeLivePreview();\n        }\n    }\n    function _toggleVisibilityOnClick() {\n        let visible = !panel.isVisible();\n        _setPanelVisibility(visible);\n        _startOrStopLivePreviewIfRequired(true);\n    }\n\n    function _togglePinUrl() {\n        let pinStatus = $pinUrlBtn.hasClass('pin-icon');\n        if(pinStatus){\n            $pinUrlBtn.removeClass('pin-icon').addClass('unpin-icon');\n        } else {\n            $pinUrlBtn.removeClass('unpin-icon').addClass('pin-icon');\n        }\n        urlPinned = !pinStatus;\n        LiveDevelopment.setLivePreviewPinned(urlPinned);\n        _loadPreview(true);\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"pinURLBtn\", \"click\");\n    }\n\n    function _updateLiveHighlightToggleStatus() {\n        let isHighlightEnabled = CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT).getChecked();\n        if(isHighlightEnabled){\n            $highlightBtn.removeClass('pointer-icon').addClass('pointer-fill-icon');\n        } else {\n            $highlightBtn.removeClass('pointer-fill-icon').addClass('pointer-icon');\n        }\n    }\n\n    function _toggleLiveHighlights() {\n        CommandManager.execute(Commands.FILE_LIVE_HIGHLIGHT);\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"HighlightBtn\", \"click\");\n    }\n\n    function _getTabNavigationURL(url) {\n        let details = LiveDevelopment.getLivePreviewDetails(),\n            openURL = new URL(url);\n        // we tag all externally opened urls with query string parameter phcodeLivePreview=\"true\" to address\n        // #LIVE_PREVIEW_TAB_NAVIGATION_RACE_FIX\n        openURL.searchParams.set(StaticServer.PHCODE_LIVE_PREVIEW_QUERY_PARAM, \"true\");\n        openURL = openURL.href;\n        if(details.URL !== url) {\n            openURL = utils.getPageLoaderURL(url);\n        }\n        return openURL;\n    }\n\n    function _redirectAllTabs(newURL) {\n        const openURL = _getTabNavigationURL(newURL);\n        StaticServer.messageToLivePreviewTabs({\n            type: NAVIGATOR_REDIRECT_PAGE,\n            URL: openURL\n        });\n    }\n\n    function _popoutLivePreview() {\n        // We cannot use $iframe.src here if panel is hidden\n        const openURL = _getTabNavigationURL(currentLivePreviewURL);\n        open(openURL, \"livePreview\", \"noopener,noreferrer\");\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"popoutBtn\", \"click\");\n        _loadPreview(true);\n        _setPanelVisibility(false);\n    }\n\n    function _setTitle(fileName) {\n        let message = Strings.LIVE_DEV_SELECT_FILE_TO_PREVIEW,\n            tooltip = message;\n        if(fileName){\n            message = `${fileName} - ${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC}`;\n            tooltip = `${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC} - ${fileName}`;\n        }\n        document.getElementById(\"panel-live-preview-title\").textContent = message;\n        document.getElementById(\"live-preview-plugin-toolbar\").title = tooltip;\n    }\n\n    async function _createExtensionPanel() {\n        let templateVars = {\n            Strings: Strings,\n            livePreview: Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC,\n            clickToReload: Strings.LIVE_DEV_CLICK_TO_RELOAD_PAGE,\n            toggleLiveHighlight: Strings.LIVE_DEV_TOGGLE_LIVE_HIGHLIGHT,\n            clickToPopout: Strings.LIVE_DEV_CLICK_POPOUT,\n            clickToPinUnpin: Strings.LIVE_DEV_CLICK_TO_PIN_UNPIN\n        };\n        const PANEL_MIN_SIZE = 50;\n        const INITIAL_PANEL_SIZE = document.body.clientWidth/2.5;\n        $icon = $(\"#toolbar-go-live\");\n        $icon.click(_toggleVisibilityOnClick);\n        $panel = $(Mustache.render(panelHTML, templateVars));\n        $iframe = $panel.find(\"#panel-live-preview-frame\");\n        $pinUrlBtn = $panel.find(\"#pinURLButton\");\n        $highlightBtn = $panel.find(\"#highlightLPButton\");\n        $reloadBtn = $panel.find(\"#reloadLivePreviewButton\");\n        $livePreviewPopBtn = $panel.find(\"#livePreviewPopoutButton\");\n        $iframe[0].onload = function () {\n            $iframe.attr('srcdoc', null);\n        };\n\n        const popoutSupported = Phoenix.browser.isTauri || Phoenix.browser.desktop.isChromeBased;\n        if(!popoutSupported){\n            // live preview can be popped out currently in only chrome based browsers. The cross domain iframe\n            // that serves the live preview(phcode.live) is sandboxed to the tab in which phcode.dev resides.\n            // all iframes in the tab can communicate between each other, but when you popout another tab, it forms\n            // its own sandbox and firefox/safari prevents communication from iframe in one tab to another. chrome\n            // doesn't seem to enforce this restriction. Since this is a core usecase, we will try to enable this\n            // workflow whenever possible.\n            $livePreviewPopBtn.addClass(\"forced-hidden\");\n        }\n\n        panel = WorkspaceManager.createPluginPanel(LIVE_PREVIEW_PANEL_ID, $panel,\n            PANEL_MIN_SIZE, $icon, INITIAL_PANEL_SIZE);\n\n        WorkspaceManager.recomputeLayout(false);\n        _updateLiveHighlightToggleStatus();\n        $pinUrlBtn.click(_togglePinUrl);\n        $highlightBtn.click(_toggleLiveHighlights);\n        $livePreviewPopBtn.click(_popoutLivePreview);\n        $reloadBtn.click(()=>{\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n            _loadPreview(true);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"reloadBtn\", \"click\");\n        });\n    }\n\n    async function _loadPreview(force) {\n        // we wait till the first server ready event is received till we render anything. else a 404-page may\n        // briefly flash on first load of phoenix as we try to load the page before the server is available.\n        const isPreviewLoadable = serverReady && (panel.isVisible() || StaticServer.livePreviewTabs.size > 0);\n        if(!isPreviewLoadable){\n            return;\n        }\n        // panel-live-preview-title\n        let previewDetails = await utils.getPreviewDetails();\n        if(urlPinned && !force) {\n            return;\n        }\n        let newSrc = encodeURI(previewDetails.URL);\n        _setTitle(previewDetails.filePath);\n        // we have to create a new iframe on every switch as we use cross domain iframes for phcode.live which\n        // the browser sandboxes strictly and sometimes it wont allow a src change on our iframe causing live\n        // preview breaks sporadically. to alleviate this, we create a new iframe every time.\n        currentLivePreviewURL = newSrc;\n        if(panel.isVisible()) {\n            let newIframe = $(LIVE_PREVIEW_IFRAME_HTML);\n            newIframe.insertAfter($iframe);\n            $iframe.remove();\n            $iframe = newIframe;\n            const iframeURL = utils.isImage(previewDetails.fullPath) ? _getTabNavigationURL(newSrc) : newSrc;\n            $iframe.attr('src', iframeURL);\n        }\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\",\n            utils.getExtension(previewDetails.fullPath));\n        _redirectAllTabs(newSrc);\n    }\n\n    async function _projectFileChanges(evt, changedFile) {\n        if(changedFile && utils.isPreviewableFile(changedFile.fullPath)){\n            // we are getting this change event somehow.\n            // bug, investigate why we get this change event as a project file change.\n            const previewDetails = await utils.getPreviewDetails();\n            if(!(LiveDevelopment.isActive() && previewDetails.isHTMLFile)) {\n                // We force reload live preview on save for all non html preview-able file or\n                // if html file and live preview isnt active.\n                _loadPreview(true);\n            }\n        }\n    }\n\n    let livePreviewEnabledOnProjectSwitch = false;\n    async function _projectOpened() {\n        if(urlPinned){\n            _togglePinUrl();\n        }\n        $iframe.attr('src', utils.getNoPreviewURL());\n        if(!panel.isVisible()){\n            return;\n        }\n        _loadPreview(true);\n    }\n\n    function _projectClosed() {\n        LiveDevelopment.closeLivePreview();\n        livePreviewEnabledOnProjectSwitch = false;\n    }\n\n    function _activeDocChanged() {\n        if(!LiveDevelopment.isActive() && !livePreviewEnabledOnProjectSwitch\n            && (panel.isVisible() || (StaticServer.livePreviewTabs.size > 0))) {\n            // we do this only once after project switch if live preview for a doc is not active.\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n            livePreviewEnabledOnProjectSwitch = true;\n        }\n    }\n\n    /**\n     * EVENT_OPEN_PREVIEW_URL triggers this once live preview infrastructure is instrumented and ready to accept live\n     * preview connections from browsers. So, if we have loaded an earlier live preview, that is most likely not\n     * instrumented code and just plain html for the previewed file. We force load the live preview again here to\n     * load the instrumented live preview code.\n     * @param _event\n     * @param previewDetails\n     * @return {Promise<void>}\n     * @private\n     */\n    async function _openLivePreviewURL(_event, previewDetails) {\n        _loadPreview(true);\n        const currentPreviewDetails = await utils.getPreviewDetails();\n        if(currentPreviewDetails.isHTMLFile && currentPreviewDetails.fullPath !== previewDetails.fullPath){\n            console.error(\"Live preview URLs differ between phoenix live preview extension and core live preview\",\n                currentPreviewDetails, previewDetails);\n        }\n    }\n\n    function _currentFileChanged(_event, newFile) {\n        if(newFile && utils.isPreviewableFile(newFile.fullPath)){\n            _loadPreview();\n        }\n    }\n\n    AppInit.appReady(function () {\n        _createExtensionPanel();\n        LiveDevServerManager.registerServer({ create: _createStaticServer }, 5);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED, _projectFileChanges);\n        MainViewManager.on(\"currentFileChange\", _currentFileChanged);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _projectOpened);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_CLOSE, _projectClosed);\n        EditorManager.on(\"activeEditorChange\", _activeDocChanged);\n        CommandManager.register(Strings.CMD_LIVE_FILE_PREVIEW,  Commands.FILE_LIVE_FILE_PREVIEW, function () {\n            _toggleVisibilityOnClick();\n        });\n        let fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        fileMenu.addMenuItem(Commands.FILE_LIVE_FILE_PREVIEW, \"\");\n        // We always show the live preview panel on startup if there is a preview file\n        setTimeout(async ()=>{\n            LiveDevelopment.openLivePreview();\n            let previewDetails = await utils.getPreviewDetails();\n            if(previewDetails.filePath){\n                // only show if there is some file to preview and not the default no-preview preview on startup\n                _setPanelVisibility(true);\n            }\n        }, 1000);\n        LiveDevelopment.on(LiveDevelopment.EVENT_OPEN_PREVIEW_URL, _openLivePreviewURL);\n        LiveDevelopment.on(LiveDevelopment.EVENT_LIVE_HIGHLIGHT_PREF_CHANGED, _updateLiveHighlightToggleStatus);\n        StaticServer.on(IFRAME_EVENT_SERVER_READY, function (_evt, event) {\n            serverReady = true;\n            _loadPreview(true);\n        });\n\n        let consecutiveEmptyClientsCount = 0;\n        setInterval(()=>{\n            if(StaticServer.livePreviewTabs.size === 0){\n                consecutiveEmptyClientsCount ++;\n            } else {\n                consecutiveEmptyClientsCount = 0;\n            }\n            if(consecutiveEmptyClientsCount > 5){\n                _startOrStopLivePreviewIfRequired();\n            }\n        }, 1000);\n    });\n\n    // private API to be used inside phoenix codebase only\n    exports.LIVE_PREVIEW_PANEL_ID = LIVE_PREVIEW_PANEL_ID;\n});\n\n\n"],"file":"main.js"}