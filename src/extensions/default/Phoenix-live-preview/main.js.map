{"version":3,"sources":["extensions/default/Phoenix-live-preview/main.js"],"names":["define","require","exports","module","ExtensionUtils","brackets","getModule","EditorManager","CommandManager","Commands","Menus","WorkspaceManager","AppInit","ProjectManager","MainViewManager","Strings","Mustache","Metrics","FileViewController","NotificationUI","LiveDevelopment","utils","LIVE_PREVIEW_PANEL_ID","NAVIGATOR_REDIRECT_PAGE","LIVE_PREVIEW_NAVIGATOR_CHANNEL_ID","Phoenix","PHOENIX_INSTANCE_ID","_livePreviewNavigationChannel","BroadcastChannel","livePreviewTabs","Map","$icon","$iframe","$panel","$pinUrlBtn","$highlightBtn","$livePreviewPopBtn","$reloadBtn","window","onmessage","event","type","data","set","clientID","lastSeen","Date","URL","console","error","TAB_HEARTBEAT_TIMEOUT","setInterval","endTime","tab","keys","timeDiff","get","delete","size","_startOrStopLivePreviewIfRequired","panelHTML","loadStyleSheet","panel","urlPinned","currentLivePreviewURL","_setPanelVisibility","isVisible","toggleClass","show","_loadPreview","attr","hide","explicitClickOnLPIcon","visible","isInactive","openLivePreview","closeLivePreview","_toggleVisibilityOnClick","_togglePinUrl","pinStatus","hasClass","removeClass","addClass","setLivePreviewPinned","countEvent","EVENT_TYPE","LIVE_PREVIEW","_updateLiveHighlightToggleStatus","isHighlightEnabled","FILE_LIVE_HIGHLIGHT","getChecked","_toggleLiveHighlights","execute","_stripURL","url","includes","split","_getTabNavigationURL","details","openURL","getLivePreviewDetails","location","href","_redirectAllTabs","newURL","postMessage","_popoutLivePreview","open","_setTitle","fileName","message","LIVE_DEV_SELECT_FILE_TO_PREVIEW","tooltip","LIVE_DEV_STATUS_TIP_OUT_OF_SYNC","document","getElementById","textContent","title","async","_createExtensionPanel","templateVars","livePreview","clickToReload","LIVE_DEV_CLICK_TO_RELOAD_PAGE","toggleLiveHighlight","LIVE_DEV_TOGGLE_LIVE_HIGHLIGHT","clickToPopout","LIVE_DEV_CLICK_POPOUT","clickToPinUnpin","LIVE_DEV_CLICK_TO_PIN_UNPIN","PANEL_MIN_SIZE","INITIAL_PANEL_SIZE","body","clientWidth","$","click","render","find","onload","createPluginPanel","recomputeLayout","_renderMarkdown","fullPath","newSrc","log","messageSW","root","paths","then","status","catch","err","_renderPreview","previewDetails","isMarkdownFile","getExtension","savedScrollPositions","_saveScrollPositionsIfPossible","currentSrc","src","getNoPreviewURL","scrollX","contentWindow","scrollY","e","force","saved","getPreviewDetails","encodeURI","filePath","contentDocument","savePageCtrlSDisabledByPhoenix","addEventListener","key","navigator","platform","match","metaKey","ctrlKey","preventDefault","scrollTo","savedPositions","_projectFileChanges","evt","changedFile","isFile","isActive","isHTMLFile","_showPopoutNotificationIfNeeded","livePreviewEnabledOnProjectSwitch","_projectOpened","isWithinProject","openAndSelectDocument","PROJECT_MANAGER","done","_projectClosed","_activeDocChanged","path","notificationKey","popoutMessageShown","localStorage","getItem","isPanelVisible","endsWith","createFromTemplate","GUIDED_LIVE_PREVIEW_POPOUT","allowedPlacements","autoCloseTimeS","dismissOnClick","setItem","_openLivePreviewURL","_event","currentPreviewDetails","appReady","fileMenu","on","EVENT_PROJECT_FILE_CHANGED","EVENT_PROJECT_OPEN","EVENT_PROJECT_CLOSE","register","CMD_LIVE_FILE_PREVIEW","FILE_LIVE_FILE_PREVIEW","getMenu","AppMenuBar","FILE_MENU","addMenuItem","setTimeout","EVENT_OPEN_PREVIEW_URL","EVENT_LIVE_HIGHLIGHT_PREF_CHANGED"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global Phoenix, logger*/\n//jshint-ignore:no-start\n\ndefine(function (require, exports, module) {\n    const ExtensionUtils   = brackets.getModule(\"utils/ExtensionUtils\"),\n        EditorManager      = brackets.getModule(\"editor/EditorManager\"),\n        CommandManager     = brackets.getModule(\"command/CommandManager\"),\n        Commands           = brackets.getModule(\"command/Commands\"),\n        Menus              = brackets.getModule(\"command/Menus\"),\n        WorkspaceManager   = brackets.getModule(\"view/WorkspaceManager\"),\n        AppInit            = brackets.getModule(\"utils/AppInit\"),\n        ProjectManager     = brackets.getModule(\"project/ProjectManager\"),\n        MainViewManager    = brackets.getModule(\"view/MainViewManager\"),\n        Strings            = brackets.getModule(\"strings\"),\n        Mustache           = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        Metrics            = brackets.getModule(\"utils/Metrics\"),\n        FileViewController = brackets.getModule(\"project/FileViewController\"),\n        NotificationUI = brackets.getModule(\"widgets/NotificationUI\"),\n        LiveDevelopment = brackets.getModule(\"LiveDevelopment/main\"),\n        utils = require('utils');\n\n    const LIVE_PREVIEW_PANEL_ID = \"live-preview-panel\",\n        NAVIGATOR_REDIRECT_PAGE = \"REDIRECT_PAGE\",\n        LIVE_PREVIEW_NAVIGATOR_CHANNEL_ID = `${Phoenix.PHOENIX_INSTANCE_ID}-nav-live-preview`,\n        _livePreviewNavigationChannel = new BroadcastChannel(LIVE_PREVIEW_NAVIGATOR_CHANNEL_ID),\n        livePreviewTabs = new Map();\n    window.livePreviewTabs = livePreviewTabs;\n\n    // jQuery objects\n    let $icon,\n        $iframe,\n        $panel,\n        $pinUrlBtn,\n        $highlightBtn,\n        $livePreviewPopBtn,\n        $reloadBtn;\n\n    _livePreviewNavigationChannel.onmessage = (event) => {\n        const type = event.data.type;\n        switch (type) {\n        case 'TAB_ONLINE': livePreviewTabs.set(event.data.clientID, {\n            lastSeen: new Date(),\n            URL: event.data.URL\n        }); break;\n        default: console.error(\"Live Preview Navigation Channel: received unknown message:\", event);\n        }\n    };\n\n    // If we didn't receive heartbeat message from a tab for 5 seconds, we assume tab closed\n    const TAB_HEARTBEAT_TIMEOUT = 5000; // in millis secs\n    setInterval(()=>{\n        let endTime = new Date();\n        for(let tab of livePreviewTabs.keys()){\n            let timeDiff = endTime - livePreviewTabs.get(tab).lastSeen; // in ms\n            if(timeDiff > TAB_HEARTBEAT_TIMEOUT){\n                livePreviewTabs.delete(tab);\n            }\n        }\n        if(livePreviewTabs.size === 0){\n            _startOrStopLivePreviewIfRequired();\n        }\n    }, 1000);\n\n\n    // Templates\n    let panelHTML       = require(\"text!panel.html\");\n    ExtensionUtils.loadStyleSheet(module, \"live-preview.css\");\n    // Other vars\n    let panel,\n        urlPinned,\n        currentLivePreviewURL = \"\";\n\n    function _setPanelVisibility(isVisible) {\n        if (isVisible) {\n            $icon.toggleClass(\"active\");\n            panel.show();\n            _loadPreview(true);\n        } else {\n            $icon.toggleClass(\"active\");\n            $iframe.attr('src', 'about:blank');\n            panel.hide();\n        }\n    }\n\n    function _startOrStopLivePreviewIfRequired(explicitClickOnLPIcon) {\n        let visible = panel && panel.isVisible();\n        if(visible && LiveDevelopment.isInactive()) {\n            LiveDevelopment.openLivePreview();\n        } else if(visible && explicitClickOnLPIcon) {\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n        } else if(!visible && livePreviewTabs.size === 0) {\n            LiveDevelopment.closeLivePreview();\n        }\n    }\n    function _toggleVisibilityOnClick() {\n        let visible = !panel.isVisible();\n        _setPanelVisibility(visible);\n        _startOrStopLivePreviewIfRequired(true);\n    }\n\n    function _togglePinUrl() {\n        let pinStatus = $pinUrlBtn.hasClass('pin-icon');\n        if(pinStatus){\n            $pinUrlBtn.removeClass('pin-icon').addClass('unpin-icon');\n        } else {\n            $pinUrlBtn.removeClass('unpin-icon').addClass('pin-icon');\n        }\n        urlPinned = !pinStatus;\n        LiveDevelopment.setLivePreviewPinned(urlPinned);\n        _loadPreview();\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"pinURLBtn\", \"click\");\n    }\n\n    function _updateLiveHighlightToggleStatus() {\n        let isHighlightEnabled = CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT).getChecked();\n        if(isHighlightEnabled){\n            $highlightBtn.removeClass('pointer-icon').addClass('pointer-fill-icon');\n        } else {\n            $highlightBtn.removeClass('pointer-fill-icon').addClass('pointer-icon');\n        }\n    }\n\n    function _toggleLiveHighlights() {\n        CommandManager.execute(Commands.FILE_LIVE_HIGHLIGHT);\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"HighlightBtn\", \"click\");\n    }\n\n    function _stripURL(url) {\n        if(url.includes(\"?\")){\n            url = url.split(\"?\")[0];\n        }\n        if(url.includes(\"#\")){\n            url = url.split(\"#\")[0];\n        }\n        return url;\n    }\n\n    function _getTabNavigationURL(url) {\n        let details = LiveDevelopment.getLivePreviewDetails(),\n            openURL = url;\n        if(details.URL !== url) {\n            openURL = `${_stripURL(location.href)}LiveDevelopment/pageLoader.html?`\n                +`broadcastChannel=${LIVE_PREVIEW_NAVIGATOR_CHANNEL_ID}&URL=${url}`;\n        }\n        return openURL;\n    }\n\n    function _redirectAllTabs(newURL) {\n        const openURL = _getTabNavigationURL(newURL);\n        _livePreviewNavigationChannel.postMessage({\n            type: NAVIGATOR_REDIRECT_PAGE,\n            URL: openURL\n        });\n    }\n\n    function _popoutLivePreview() {\n        const openURL = _getTabNavigationURL(currentLivePreviewURL);\n        open(openURL, \"livePreview\", \"noopener,noreferrer\");\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"popoutBtn\", \"click\");\n        _loadPreview(true);\n    }\n\n    function _setTitle(fileName) {\n        let message = Strings.LIVE_DEV_SELECT_FILE_TO_PREVIEW,\n            tooltip = message;\n        if(fileName){\n            message = `${fileName} - ${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC}`;\n            tooltip = `${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC} - ${fileName}`;\n        }\n        document.getElementById(\"panel-live-preview-title\").textContent = message;\n        document.getElementById(\"live-preview-plugin-toolbar\").title = tooltip;\n    }\n\n    async function _createExtensionPanel() {\n        let templateVars = {\n            Strings: Strings,\n            livePreview: Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC,\n            clickToReload: Strings.LIVE_DEV_CLICK_TO_RELOAD_PAGE,\n            toggleLiveHighlight: Strings.LIVE_DEV_TOGGLE_LIVE_HIGHLIGHT,\n            clickToPopout: Strings.LIVE_DEV_CLICK_POPOUT,\n            clickToPinUnpin: Strings.LIVE_DEV_CLICK_TO_PIN_UNPIN\n        };\n        const PANEL_MIN_SIZE = 50;\n        const INITIAL_PANEL_SIZE = document.body.clientWidth/2.5;\n        $icon = $(\"#toolbar-go-live\");\n        $icon.click(_toggleVisibilityOnClick);\n        $panel = $(Mustache.render(panelHTML, templateVars));\n        $iframe = $panel.find(\"#panel-live-preview-frame\");\n        $pinUrlBtn = $panel.find(\"#pinURLButton\");\n        $highlightBtn = $panel.find(\"#highlightLPButton\");\n        $reloadBtn = $panel.find(\"#reloadLivePreviewButton\");\n        $livePreviewPopBtn = $panel.find(\"#livePreviewPopoutButton\");\n        $iframe[0].onload = function () {\n            $iframe.attr('srcdoc', null);\n        };\n\n        panel = WorkspaceManager.createPluginPanel(LIVE_PREVIEW_PANEL_ID, $panel,\n            PANEL_MIN_SIZE, $icon, INITIAL_PANEL_SIZE);\n\n        WorkspaceManager.recomputeLayout(false);\n        _updateLiveHighlightToggleStatus();\n        $pinUrlBtn.click(_togglePinUrl);\n        $highlightBtn.click(_toggleLiveHighlights);\n        $livePreviewPopBtn.click(_popoutLivePreview);\n        $reloadBtn.click(()=>{\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n            _loadPreview(true);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"reloadBtn\", \"click\");\n        });\n    }\n\n    function _renderMarkdown(fullPath, newSrc) {\n        currentLivePreviewURL = newSrc;\n        console.log(`Markdown Static server _updateInstrumentedURLSInWorker: `, [fullPath], newSrc);\n        window.messageSW({\n            type: 'setInstrumentedURLs',\n            root: \"\",\n            paths: [fullPath]\n        }).then((status)=>{\n            console.log(`Markdown server received msg from Service worker: setInstrumentedURLs done: `, status);\n            if(panel.isVisible()){\n                $iframe.attr('srcdoc', null);\n                $iframe.attr('src', newSrc);\n            }\n            _redirectAllTabs(newSrc);\n        }).catch(err=>{\n            console.error(`Markdown error while from sw rendering failed for ${fullPath}: `, err);\n        });\n    }\n\n    function _renderPreview(previewDetails, newSrc) {\n        let fullPath = previewDetails.fullPath;\n        if(previewDetails.isMarkdownFile){\n            _renderMarkdown(fullPath, newSrc);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\", \"markdown\");\n        } else {\n            currentLivePreviewURL = newSrc;\n            if(panel.isVisible()){\n                $iframe.attr('srcdoc', null);\n                $iframe.attr('src', newSrc);\n            }\n            _redirectAllTabs(newSrc);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\", utils.getExtension(fullPath));\n        }\n    }\n\n    let savedScrollPositions = {};\n\n    function _saveScrollPositionsIfPossible() {\n        let currentSrc = $iframe.src || utils.getNoPreviewURL();\n        try{\n            let scrollX = $iframe[0].contentWindow.scrollX;\n            let scrollY = $iframe[0].contentWindow.scrollY;\n            savedScrollPositions[currentSrc] = {\n                scrollX: scrollX,\n                scrollY: scrollY\n            };\n            return {scrollX, scrollY, currentSrc};\n        }catch (e) {\n            return {scrollX: 0, scrollY: 0, currentSrc};\n        }\n    }\n\n    async function _loadPreview(force) {\n        if(panel.isVisible() || (livePreviewTabs.size > 0)){\n            let saved = _saveScrollPositionsIfPossible();\n            // panel-live-preview-title\n            let previewDetails = await utils.getPreviewDetails();\n            let newSrc = saved.currentSrc;\n            if (!urlPinned && previewDetails.URL) {\n                newSrc = encodeURI(previewDetails.URL);\n                _setTitle(previewDetails.filePath);\n            }\n            $iframe[0].onload = function () {\n                $iframe[0].contentDocument.savePageCtrlSDisabledByPhoenix = true;\n                $iframe[0].contentDocument.addEventListener(\"keydown\", function(e) {\n                    // inside live preview iframe, we disable ctrl-s browser save page dialog\n                    if (e.key === 's' && (navigator.platform.match(\"Mac\") ? e.metaKey : e.ctrlKey)) {\n                        e.preventDefault();\n                    }\n                }, false);\n                if(saved.currentSrc === newSrc){\n                    $iframe[0].contentWindow.scrollTo(saved.scrollX, saved.scrollY);\n                } else {\n                    let savedPositions = savedScrollPositions[newSrc];\n                    if(savedPositions){\n                        $iframe[0].contentWindow.scrollTo(savedPositions.scrollX, savedPositions.scrollY);\n                    }\n                }\n            };\n            if(saved.currentSrc !== newSrc || force === true){\n                $iframe.src = newSrc;\n                _renderPreview(previewDetails, newSrc);\n            }\n        }\n    }\n\n    async function _projectFileChanges(evt, changedFile) {\n        if(changedFile && changedFile.isFile && changedFile.fullPath && changedFile.fullPath !== '/fs/app/state.json'){\n            // we are getting this change event somehow.\n            // bug, investigate why we get this change event as a project file change.\n            const previewDetails = await utils.getPreviewDetails();\n            if(!(LiveDevelopment.isActive() && previewDetails.isHTMLFile)) {\n                // We force reload live preview on save for all non html preview-able file or\n                // if html file and live preview isnt active.\n                _loadPreview(true);\n            }\n            _showPopoutNotificationIfNeeded(changedFile.fullPath);\n        }\n    }\n\n    let livePreviewEnabledOnProjectSwitch = false;\n    async function _projectOpened() {\n        if(urlPinned){\n            _togglePinUrl();\n        }\n        $iframe[0].src = utils.getNoPreviewURL();\n        if(!panel.isVisible()){\n            return;\n        }\n        let previewDetails = await utils.getPreviewDetails();\n        if(previewDetails.fullPath && ProjectManager.isWithinProject(previewDetails.fullPath)){\n            FileViewController.openAndSelectDocument(previewDetails.fullPath, FileViewController.PROJECT_MANAGER)\n                .done(()=>{\n                    LiveDevelopment.closeLivePreview();\n                    LiveDevelopment.openLivePreview();\n                    _loadPreview(true);\n                });\n        }\n        _loadPreview(true);\n    }\n\n    function _projectClosed() {\n        LiveDevelopment.closeLivePreview();\n        livePreviewEnabledOnProjectSwitch = false;\n    }\n\n    function _activeDocChanged() {\n        if(!LiveDevelopment.isActive() && !livePreviewEnabledOnProjectSwitch\n            && (panel.isVisible() || (livePreviewTabs.size > 0))) {\n            // we do this only once after project switch if live preview for a doc is not active.\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n            livePreviewEnabledOnProjectSwitch = true;\n        }\n    }\n\n    function _showPopoutNotificationIfNeeded(path) {\n        let notificationKey = 'livePreviewPopoutShown';\n        let popoutMessageShown = localStorage.getItem(notificationKey);\n        if(!popoutMessageShown && WorkspaceManager.isPanelVisible(LIVE_PREVIEW_PANEL_ID)\n            && (path.endsWith('.html') || path.endsWith('.htm'))){\n            NotificationUI.createFromTemplate(Strings.GUIDED_LIVE_PREVIEW_POPOUT,\n                \"livePreviewPopoutButton\", {\n                    allowedPlacements: ['bottom'],\n                    autoCloseTimeS: 15,\n                    dismissOnClick: true}\n            );\n            localStorage.setItem(notificationKey, \"true\");\n        }\n    }\n\n    /**\n     * EVENT_OPEN_PREVIEW_URL triggers this once live preview infrastructure is instrumented and ready to accept live\n     * preview connections from browsers. So, if we have loaded an earlier live preview, that is most likely not\n     * instrumented code and just plain html for the previewed file. We force load the live preview again here to\n     * load the instrumented live preview code.\n     * @param _event\n     * @param previewDetails\n     * @return {Promise<void>}\n     * @private\n     */\n    async function _openLivePreviewURL(_event, previewDetails) {\n        _loadPreview(true);\n        const currentPreviewDetails = await utils.getPreviewDetails();\n        if(!currentPreviewDetails.isMarkdownFile && currentPreviewDetails.fullPath !== previewDetails.fullPath){\n            console.error(\"Live preview URLs differ between phoenix live preview extension and core live preview\",\n                currentPreviewDetails, previewDetails);\n        }\n    }\n\n    AppInit.appReady(function () {\n        _createExtensionPanel();\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED, _projectFileChanges);\n        MainViewManager.on(\"currentFileChange\", _loadPreview);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _projectOpened);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_CLOSE, _projectClosed);\n        EditorManager.on(\"activeEditorChange\", _activeDocChanged);\n        CommandManager.register(Strings.CMD_LIVE_FILE_PREVIEW,  Commands.FILE_LIVE_FILE_PREVIEW, function () {\n            _toggleVisibilityOnClick();\n        });\n        let fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        fileMenu.addMenuItem(Commands.FILE_LIVE_FILE_PREVIEW, \"\");\n        // We always show the live preview panel on startup if there is a preview file\n        setTimeout(async ()=>{\n            LiveDevelopment.openLivePreview();\n            let previewDetails = await utils.getPreviewDetails();\n            if(previewDetails.filePath){\n                // only show if there is some file to preview and not the default no-preview preview on startup\n                _setPanelVisibility(true);\n            }\n        }, 1000);\n        LiveDevelopment.on(LiveDevelopment.EVENT_OPEN_PREVIEW_URL, _openLivePreviewURL);\n        LiveDevelopment.on(LiveDevelopment.EVENT_LIVE_HIGHLIGHT_PREF_CHANGED, _updateLiveHighlightToggleStatus);\n    });\n});\n\n\n"],"file":"main.js"}