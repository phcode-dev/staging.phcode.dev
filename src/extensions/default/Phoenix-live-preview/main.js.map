{"version":3,"sources":["extensions/default/Phoenix-live-preview/main.js"],"names":["define","require","exports","module","ExtensionUtils","brackets","getModule","EditorManager","CommandManager","Commands","Menus","WorkspaceManager","AppInit","ProjectManager","MainViewManager","DocumentManager","Strings","Mustache","Metrics","FileViewController","NotificationUI","LiveDevelopment","marked","utils","LIVE_PREVIEW_PANEL_ID","setOptions","renderer","Renderer","pedantic","gfm","breaks","sanitize","smartLists","smartypants","xhtml","panelHTML","markdownHTMLTemplate","$icon","$iframe","$panel","$pinUrlBtn","$livePreviewPopBtn","$reloadBtn","loadStyleSheet","panel","urlPinned","tab","_setPanelVisibility","isVisible","toggleClass","show","_loadPreview","attr","hide","_startOrStopLivePreviewIfRequired","explicitClickOnLPIcon","visible","isInactive","openLivePreview","closeLivePreview","getConnectionIds","length","closed","_toggleVisibilityOnClick","_togglePinUrl","pinStatus","hasClass","removeClass","addClass","setLivePreviewPinned","countEvent","EVENT_TYPE","LIVE_PREVIEW","_popoutLivePreview","open","_setTitle","fileName","message","LIVE_DEV_SELECT_FILE_TO_PREVIEW","tooltip","LIVE_DEV_STATUS_TIP_OUT_OF_SYNC","document","getElementById","textContent","title","async","_createExtensionPanel","templateVars","livePreview","clickToReload","LIVE_DEV_CLICK_TO_RELOAD_PAGE","clickToPopout","LIVE_DEV_CLICK_POPOUT","clickToPinUnpin","LIVE_DEV_CLICK_TO_PIN_UNPIN","PANEL_MIN_SIZE","INITIAL_PANEL_SIZE","body","clientWidth","$","click","render","find","onload","createPluginPanel","recomputeLayout","_renderMarkdown","fullPath","getDocumentForPath","done","doc","text","getText","markdownHtml","markdownContent","parse","BOOTSTRAP_LIB_CSS","window","parent","Phoenix","baseURL","HIGHLIGHT_JS_CSS","HIGHLIGHT_JS","GFM_CSS","html","location","setTimeout","write","fail","err","console","error","_renderPreview","previewDetails","newSrc","isMarkdownFile","getExtension","savedScrollPositions","_saveScrollPositionsIfPossible","currentSrc","src","getNoPreviewURL","scrollX","contentWindow","scrollY","e","force","saved","getPreviewDetails","URL","encodeURI","filePath","scrollTo","savedPositions","_projectFileChanges","evt","changedFile","isFile","isActive","isHTMLFile","_showPopoutNotificationIfNeeded","livePreviewEnabledOnProjectSwitch","_projectOpened","openAndSelectDocument","PROJECT_MANAGER","_projectClosed","_activeDocChanged","path","notificationKey","popoutMessageShown","localStorage","getItem","isPanelVisible","endsWith","createFromTemplate","GUIDED_LIVE_PREVIEW_POPOUT","allowedPlacements","autoCloseTimeS","dismissOnClick","setItem","_openLivePreviewURL","_event","currentPreviewDetails","appReady","fileMenu","on","EVENT_PROJECT_FILE_CHANGED","EVENT_PROJECT_OPEN","EVENT_PROJECT_CLOSE","register","CMD_LIVE_FILE_PREVIEW","FILE_LIVE_FILE_PREVIEW","getMenu","AppMenuBar","FILE_MENU","addMenuItem","EVENT_OPEN_PREVIEW_URL","EVENT_CONNECTION_CLOSE"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global define, brackets */\n//jshint-ignore:no-start\n\ndefine(function (require, exports, module) {\n    const ExtensionUtils   = brackets.getModule(\"utils/ExtensionUtils\"),\n        EditorManager      = brackets.getModule(\"editor/EditorManager\"),\n        CommandManager     = brackets.getModule(\"command/CommandManager\"),\n        Commands           = brackets.getModule(\"command/Commands\"),\n        Menus              = brackets.getModule(\"command/Menus\"),\n        WorkspaceManager   = brackets.getModule(\"view/WorkspaceManager\"),\n        AppInit            = brackets.getModule(\"utils/AppInit\"),\n        ProjectManager     = brackets.getModule(\"project/ProjectManager\"),\n        MainViewManager    = brackets.getModule(\"view/MainViewManager\"),\n        DocumentManager    = brackets.getModule(\"document/DocumentManager\"),\n        Strings            = brackets.getModule(\"strings\"),\n        Mustache           = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        Metrics            = brackets.getModule(\"utils/Metrics\"),\n        FileViewController = brackets.getModule(\"project/FileViewController\"),\n        NotificationUI = brackets.getModule(\"widgets/NotificationUI\"),\n        LiveDevelopment = brackets.getModule(\"LiveDevelopment/main\"),\n        marked = require('thirdparty/marked.min'),\n        utils = require('utils');\n\n    const LIVE_PREVIEW_PANEL_ID = \"live-preview-panel\";\n\n    // TODO markdown advanced rendering options https://marked.js.org/using_advanced\n    marked.setOptions({\n        renderer: new marked.Renderer(),\n        // highlight: function(code, lang) {\n        //     const hljs = require('highlight.js');\n        //     const language = hljs.getLanguage(lang) ? lang : 'plaintext';\n        //     return hljs.highlight(code, { language }).value;\n        // },\n        // langPrefix: 'hljs language-', // highlight.js css expects a top-level 'hljs' class.\n        pedantic: false,\n        gfm: true,\n        breaks: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: false,\n        xhtml: false\n    });\n\n\n    // Templates\n    let panelHTML       = require(\"text!panel.html\"),\n        markdownHTMLTemplate = require(\"text!markdown.html\");\n    ExtensionUtils.loadStyleSheet(module, \"live-preview.css\");\n\n    // jQuery objects\n    let $icon,\n        $iframe,\n        $panel,\n        $pinUrlBtn,\n        $livePreviewPopBtn,\n        $reloadBtn;\n\n    // Other vars\n    let panel,\n        urlPinned,\n        tab = null;\n\n    function _setPanelVisibility(isVisible) {\n        if (isVisible) {\n            $icon.toggleClass(\"active\");\n            panel.show();\n            _loadPreview(true);\n        } else {\n            $icon.toggleClass(\"active\");\n            $iframe.attr('src', 'about:blank');\n            panel.hide();\n        }\n    }\n\n    function _startOrStopLivePreviewIfRequired(explicitClickOnLPIcon) {\n        let visible = panel.isVisible();\n        if(visible && LiveDevelopment.isInactive()) {\n            LiveDevelopment.openLivePreview();\n        } else if(visible && explicitClickOnLPIcon) {\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n        } else if(!visible && LiveDevelopment.getConnectionIds().length === 0 && (!tab || tab.closed)) {\n            LiveDevelopment.closeLivePreview();\n        }\n    }\n    function _toggleVisibilityOnClick() {\n        let visible = !panel.isVisible();\n        _setPanelVisibility(visible);\n        _startOrStopLivePreviewIfRequired(true);\n    }\n\n    function _togglePinUrl() {\n        let pinStatus = $pinUrlBtn.hasClass('pin-icon');\n        if(pinStatus){\n            $pinUrlBtn.removeClass('pin-icon').addClass('unpin-icon');\n        } else {\n            $pinUrlBtn.removeClass('unpin-icon').addClass('pin-icon');\n        }\n        urlPinned = !pinStatus;\n        LiveDevelopment.setLivePreviewPinned(urlPinned);\n        _loadPreview();\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"pinURLBtn\", \"click\");\n    }\n\n    function _popoutLivePreview() {\n        if(!tab || tab.closed){\n            tab = open();\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"popoutBtn\", \"click\");\n        }\n        _loadPreview(true);\n    }\n\n    function _setTitle(fileName) {\n        let message = Strings.LIVE_DEV_SELECT_FILE_TO_PREVIEW,\n            tooltip = message;\n        if(fileName){\n            message = `${fileName} - ${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC}`;\n            tooltip = `${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC} - ${fileName}`;\n        }\n        document.getElementById(\"panel-live-preview-title\").textContent = message;\n        document.getElementById(\"live-preview-plugin-toolbar\").title = tooltip;\n    }\n\n    async function _createExtensionPanel() {\n        let templateVars = {\n            Strings: Strings,\n            livePreview: Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC,\n            clickToReload: Strings.LIVE_DEV_CLICK_TO_RELOAD_PAGE,\n            clickToPopout: Strings.LIVE_DEV_CLICK_POPOUT,\n            clickToPinUnpin: Strings.LIVE_DEV_CLICK_TO_PIN_UNPIN\n        };\n        const PANEL_MIN_SIZE = 50;\n        const INITIAL_PANEL_SIZE = document.body.clientWidth/2.5;\n        $icon = $(\"#toolbar-go-live\");\n        $icon.click(_toggleVisibilityOnClick);\n        $panel = $(Mustache.render(panelHTML, templateVars));\n        $iframe = $panel.find(\"#panel-live-preview-frame\");\n        $pinUrlBtn = $panel.find(\"#pinURLButton\");\n        $reloadBtn = $panel.find(\"#reloadButton\");\n        $livePreviewPopBtn = $panel.find(\"#livePreviewPopoutButton\");\n        $iframe[0].onload = function () {\n            $iframe.attr('srcdoc', null);\n        };\n\n        panel = WorkspaceManager.createPluginPanel(LIVE_PREVIEW_PANEL_ID, $panel,\n            PANEL_MIN_SIZE, $icon, INITIAL_PANEL_SIZE);\n\n        WorkspaceManager.recomputeLayout(false);\n        $pinUrlBtn.click(_togglePinUrl);\n        $livePreviewPopBtn.click(_popoutLivePreview);\n        $reloadBtn.click(()=>{\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n            _loadPreview(true);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"reloadBtn\", \"click\");\n        });\n    }\n\n    function _renderMarkdown(fullPath) {\n        DocumentManager.getDocumentForPath(fullPath)\n            .done(function (doc) {\n                let text = doc.getText();\n                let markdownHtml = marked.parse(text);\n                let templateVars = {\n                    markdownContent: markdownHtml,\n                    BOOTSTRAP_LIB_CSS: `${window.parent.Phoenix.baseURL}thirdparty/bootstrap/bootstrap.min.css`,\n                    HIGHLIGHT_JS_CSS: `${window.parent.Phoenix.baseURL}thirdparty/highlight.js/styles/github.min.css`,\n                    HIGHLIGHT_JS: `${window.parent.Phoenix.baseURL}thirdparty/highlight.js/highlight.min.js`,\n                    GFM_CSS: `${window.parent.Phoenix.baseURL}thirdparty/gfm.min.css`\n                };\n                let html = Mustache.render(markdownHTMLTemplate, templateVars);\n                $iframe.attr('srcdoc', html);\n                if(tab && !tab.closed){\n                    tab.location = \"about:blank\";\n                    setTimeout(()=>{\n                        tab.window.document.write(html);\n                    }, 10); // timer hack, location and content cannot be set in a row,\n                    // we should move to iframe embedded controls\n                }\n            })\n            .fail(function (err) {\n                console.error(`Markdown rendering failed for ${fullPath}: `, err);\n            });\n    }\n\n    function _renderPreview(previewDetails, newSrc) {\n        let fullPath = previewDetails.fullPath;\n        if(previewDetails.isMarkdownFile){\n            $iframe.attr('src', 'about:blank');\n            _renderMarkdown(fullPath);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\", \"markdown\");\n        } else {\n            $iframe.attr('srcdoc', null);\n            $iframe.attr('src', newSrc);\n            if(tab && !tab.closed){\n                tab.location = newSrc;\n            }\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\", utils.getExtension(fullPath));\n        }\n    }\n\n    let savedScrollPositions = {};\n\n    function _saveScrollPositionsIfPossible() {\n        let currentSrc = $iframe.src || utils.getNoPreviewURL();\n        try{\n            let scrollX = $iframe[0].contentWindow.scrollX;\n            let scrollY = $iframe[0].contentWindow.scrollY;\n            savedScrollPositions[currentSrc] = {\n                scrollX: scrollX,\n                scrollY: scrollY\n            };\n            return {scrollX, scrollY, currentSrc};\n        }catch (e) {\n            return {scrollX: 0, scrollY: 0 , currentSrc};\n        }\n    }\n\n    async function _loadPreview(force) {\n        if(panel.isVisible() || (tab && !tab.closed)){\n            let saved = _saveScrollPositionsIfPossible();\n            // panel-live-preview-title\n            let previewDetails = await utils.getPreviewDetails();\n            let newSrc = saved.currentSrc;\n            if (!urlPinned && previewDetails.URL) {\n                newSrc = encodeURI(previewDetails.URL);\n                _setTitle(previewDetails.filePath);\n            }\n            $iframe[0].onload = function () {\n                if(saved.currentSrc === newSrc){\n                    $iframe[0].contentWindow.scrollTo(saved.scrollX, saved.scrollY);\n                } else {\n                    let savedPositions = savedScrollPositions[newSrc];\n                    if(savedPositions){\n                        $iframe[0].contentWindow.scrollTo(savedPositions.scrollX, savedPositions.scrollY);\n                    }\n                }\n            };\n            if(saved.currentSrc !== newSrc || force === true){\n                $iframe.src = newSrc;\n                _renderPreview(previewDetails, newSrc);\n            }\n        }\n    }\n\n    async function _projectFileChanges(evt, changedFile) {\n        if(changedFile && changedFile.isFile && changedFile.fullPath && changedFile.fullPath !== '/fs/app/state.json'){\n            // we are getting this change event somehow.\n            // bug, investigate why we get this change event as a project file change.\n            const previewDetails = await utils.getPreviewDetails();\n            if(!(LiveDevelopment.isActive() && previewDetails.isHTMLFile)) {\n                // We force reload live preview on save for all non html preview-able file or\n                // if html file and live preview isnt active.\n                _loadPreview(true);\n            }\n            _showPopoutNotificationIfNeeded(changedFile.fullPath);\n        }\n    }\n\n    let livePreviewEnabledOnProjectSwitch = false;\n    async function _projectOpened() {\n        if(urlPinned){\n            _togglePinUrl();\n        }\n        $iframe[0].src = utils.getNoPreviewURL();\n        if(tab && !tab.closed){\n            tab.location = utils.getNoPreviewURL();\n        }\n        if(!panel.isVisible()){\n            return;\n        }\n        let previewDetails = await utils.getPreviewDetails();\n        if(previewDetails.fullPath){\n            FileViewController.openAndSelectDocument(previewDetails.fullPath, FileViewController.PROJECT_MANAGER)\n                .done(()=>{\n                    LiveDevelopment.closeLivePreview();\n                    LiveDevelopment.openLivePreview();\n                    _loadPreview(true);\n                });\n        }\n        _loadPreview(true);\n    }\n\n    function _projectClosed() {\n        LiveDevelopment.closeLivePreview();\n        livePreviewEnabledOnProjectSwitch = false;\n    }\n\n    function _activeDocChanged() {\n        if(!LiveDevelopment.isActive() && !livePreviewEnabledOnProjectSwitch\n            && (panel.isVisible() || (tab && !tab.closed))) {\n            // we do this only once after project switch if live preview for a doc is not active.\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n            livePreviewEnabledOnProjectSwitch = true;\n        }\n    }\n\n    function _showPopoutNotificationIfNeeded(path) {\n        let notificationKey = 'livePreviewPopoutShown';\n        let popoutMessageShown = localStorage.getItem(notificationKey);\n        if(!popoutMessageShown && WorkspaceManager.isPanelVisible(LIVE_PREVIEW_PANEL_ID)\n            && (path.endsWith('.html') || path.endsWith('.htm'))){\n            NotificationUI.createFromTemplate(Strings.GUIDED_LIVE_PREVIEW_POPOUT,\n                \"livePreviewPopoutButton\", {\n                    allowedPlacements: ['bottom'],\n                    autoCloseTimeS: 15,\n                    dismissOnClick: true}\n            );\n            localStorage.setItem(notificationKey, \"true\");\n        }\n    }\n\n    /**\n     * EVENT_OPEN_PREVIEW_URL triggers this once live preview infrastructure is instrumented and ready to accept live\n     * preview connections from browsers. So, if we have loaded an earlier live preview, that is most likely not\n     * instrumented code and just plain html for the previewed file. We force load the live preview again here to\n     * load the instrumented live preview code.\n     * @param _event\n     * @param previewDetails\n     * @return {Promise<void>}\n     * @private\n     */\n    async function _openLivePreviewURL(_event, previewDetails) {\n        _loadPreview(true);\n        const currentPreviewDetails = await utils.getPreviewDetails();\n        if(!currentPreviewDetails.isMarkdownFile && currentPreviewDetails.fullPath !== previewDetails.fullPath){\n            console.error(\"Live preview URLs differ between phoenix live preview extension and core live preview\",\n                currentPreviewDetails, previewDetails);\n        }\n    }\n\n    AppInit.appReady(function () {\n        _createExtensionPanel();\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED, _projectFileChanges);\n        MainViewManager.on(\"currentFileChange\", _loadPreview);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _projectOpened);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_CLOSE, _projectClosed);\n        EditorManager.on(\"activeEditorChange\", _activeDocChanged);\n        CommandManager.register(Strings.CMD_LIVE_FILE_PREVIEW,  Commands.FILE_LIVE_FILE_PREVIEW, function () {\n            _toggleVisibilityOnClick();\n        });\n        let fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        fileMenu.addMenuItem(Commands.FILE_LIVE_FILE_PREVIEW, \"\");\n        // We always show the live preview panel on startup if there is a preview file\n        setTimeout(async ()=>{\n            LiveDevelopment.openLivePreview();\n            let previewDetails = await utils.getPreviewDetails();\n            if(previewDetails.filePath){\n                // only show if there is some file to preview and not the default no-preview preview on startup\n                _setPanelVisibility(true);\n            }\n        }, 1000);\n        LiveDevelopment.on(LiveDevelopment.EVENT_OPEN_PREVIEW_URL, _openLivePreviewURL);\n        LiveDevelopment.on(LiveDevelopment.EVENT_CONNECTION_CLOSE, function () {\n            // the connection close pool will take some time to settle\n            setTimeout(_startOrStopLivePreviewIfRequired, 15000);\n        });\n    });\n});\n\n\n"],"file":"main.js"}