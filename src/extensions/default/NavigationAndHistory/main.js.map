{"version":3,"sources":["extensions/default/NavigationAndHistory/main.js"],"names":["define","require","exports","module","_","brackets","getModule","AppInit","Async","Strings","MainViewManager","DocumentManager","DocumentCommandHandlers","EditorManager","ProjectManager","CommandManager","Commands","Dialogs","Menus","FileSystem","FileUtils","ViewUtils","KeyEvent","WorkingSetView","PreferencesManager","KeyBindingManager","ExtensionUtils","Mustache","NavigationProvider","KeyboardPrefs","JSON","parse","PREFS_RECENT_FILES","SHOW_RECENT_FILES","NEXT_IN_RECENT_FILES","PREV_IN_RECENT_FILES","OPEN_FILES_VIEW_STATE","htmlTemplate","dirtyDotTemplate","MAX_ENTRY_COUNT","isRecentFilesNavEnabled","_mrofList","$mrofContainer","$currentContext","activeEditor","_hideMROFList","_getPrefsContext","projectRoot","getProjectRoot","location","scope","layer","layerID","fullPath","_openEditorForContext","contextData","activePaneId","getActivePaneId","targetPaneId","paneId","getPaneCount","hideOnOpenFile","execute","FILE_OPEN","path","done","cursor","getActiveEditor","setCursorPos","centerOnCursor","_makeMROFListEntry","pane","cursorPos","file","_isOpenAndDirty","docIfOpen","getOpenDocumentForPath","isDirty","_checkExt","entry","index","deferred","$","Deferred","fileEntry","getFileForPath","indxInWS","inMem","findInWorkingSet","reject","resolve","exists","err","promise","_syncWithFileSystem","filter","e","doSequentially","_getFileListForEntries","entries","map","value","_addDirectoriesForDuplicateBaseNames","checked","baseName","getBaseName","push","forEach","length","dirs","getDirNamesForDuplicateFiles","find","each","$li","this","data","dirSplit","split","$dir","html","children","remove","append","_createFileEntries","$mrofList","$link","$newItem","isPaneLabelReqd","addClass","text","getPaneTitle","entryIndex","findIndex","record","name","isFile","getFileEntryDisplay","useIconProviders","attr","css","useClassProviders","prependTo","_createMROFList","paneList","getPaneIdList","mrofList","fileList","mrofEntry","paneCount","fileCount","getWorkingSet","findInGlobalMRUList","_handleArrowKeys","event","UP","DOWN","$context","$nextContext","which","prev","next","trigger","last","preventDefault","stopImmediatePropagation","_hideMROFListOnEscape","keyCode","DOM_VK_ESCAPE","_createMROFDisplayList","refresh","$def","_purgeAllExceptWorkingSet","empty","setViewState","_onFocus","$scope","target","parent","removeClass","_onClick","delegateTarget","render","appendTo","one","on","window","always","$fileLinks","first","_openFile","_hideMROFListOnNavigationEnd","DOM_VK_CONTROL","_moveNext","$next","_cmdMoveNext","$displayPromise","_movePrev","$prev","_cmdMovePrev","_updateCursorPosition","filePath","_addToMROFList","constructor","splice","unshift","_handleWorkingSetMove","sourcePaneId","destinationPaneId","tIndex","_handleAppClose","_initRecentFilesList","getViewState","getWorkingSetSize","ALL_PANES","_handleProjectOpen","_showRecentFileList","_handlePaneMerge","FIRST_PANE","itrIndex","_initRecentFileMenusAndCommands","menu","get","register","CMD_RECENT_FILES_OPEN","addBinding","CMD_NEXT_DOC","CMD_PREV_DOC","getMenu","AppMenuBar","FILE_MENU","addMenuItem","AFTER","FILE_OPEN_FOLDER","_initDefaultNavigationCommands","NAVIGATE_NEXT_DOC","NAVIGATE_PREV_DOC","_removeKeys","keys","config","removeBinding","key","_removeNavigationKeys","_deregisterSortcutsAndMenus","removeMenuItem","handleCurrentFileChange","newFile","newPaneId","oldFile","_handleActiveEditorChange","current","previous","document","_paneId","getCursorPos","_attachListners","_detachListners","off","definePreference","description","DESCRIPTION_RECENT_FILES_NAV","focus","appReady","loadStyleSheet","init"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,EAA0BC,SAASC,UAAU,qBAC7CC,QAA0BF,SAASC,UAAU,iBAC7CE,MAA0BH,SAASC,UAAU,eAC7CG,QAA0BJ,SAASC,UAAU,WAC7CI,gBAA0BL,SAASC,UAAU,wBAC7CK,gBAA0BN,SAASC,UAAU,4BAC7CM,wBAA0BP,SAASC,UAAU,oCAC7CO,cAA0BR,SAASC,UAAU,wBAC7CQ,eAA0BT,SAASC,UAAU,0BAC7CS,eAA0BV,SAASC,UAAU,0BAC7CU,SAA0BX,SAASC,UAAU,oBAC7CW,QAA0BZ,SAASC,UAAU,mBAC7CY,MAA0Bb,SAASC,UAAU,iBAC7Ca,WAA0Bd,SAASC,UAAU,yBAC7Cc,UAA0Bf,SAASC,UAAU,kBAC7Ce,UAA0BhB,SAASC,UAAU,mBAC7CgB,SAA0BjB,SAASC,UAAU,kBAC7CiB,eAA0BlB,SAASC,UAAU,0BAC7CkB,mBAA0BnB,SAASC,UAAU,kCAC7CmB,kBAA0BpB,SAASC,UAAU,6BAC7CoB,eAA0BrB,SAASC,UAAU,wBAC7CqB,SAA0BtB,SAASC,UAAU,gCAC7CsB,mBAA0B3B,QAAQ,sBAElC4B,cAAgBC,KAAKC,MAAM9B,QAAQ,uBAGnC+B,mBAA0B,0BAC1BC,kBAA0B,oBAC1BC,qBAA0B,oBAC1BC,qBAA0B,oBAC1BC,sBAA0B,YAE1BC,aAAepC,QAAQ,uCACvBqC,iBAAmB,2FAEnBC,gBAAqB,GAErBC,yBAA0B,EAO1BC,UAAY,GACZC,eAAiB,KAGjBC,gBACAC,aAEAC,cASJ,SAASC,mBACL,IAAIC,YAAcjC,eAAekC,iBACjC,MAAO,CAAEC,SAAU,CAAEC,MAAO,OAAQC,MAAO,UAAWC,QAASL,aAAeA,YAAYM,WAS9F,SAASC,sBAAsBC,aAG3B,IAAIC,aAAe9C,gBAAgB+C,kBAC/BC,aAAeH,YAAYI,OAa/B,OAVuC,IAAnCjD,gBAAgBkD,iBAEhBF,aAAeF,cAIfD,YAAYM,gBACZhB,gBAGG9B,eACF+C,QAAQ9C,SAAS+C,UAClB,CAAIV,SAAUE,YAAYS,KACtBL,OAAQD,eAGXO,KAAK,WACEV,YAAYW,UACZtB,aAAe/B,cAAcsD,mBAChBC,aAAab,YAAYW,QACtCtB,aAAayB,oBAa7B,SAASC,mBAAmBN,KAAMO,KAAMC,WACpC,MAAO,CACHC,KAAMT,KACNL,OAAQY,KACRL,OAAQM,WAUhB,SAASE,gBAAgBD,MAErB,IAAIE,UAAYhE,gBAAgBiE,uBAAuBH,KAAKpB,UAC5D,OAAQsB,WAAaA,UAAUE,QAGnC,SAASC,UAAUC,MAAOC,OACtB,IAAIC,SAAW,IAAIC,EAAEC,SACjBC,UAAYjE,WAAWkE,eAAeN,MAAMN,MAGxCa,SADJP,MAAMQ,OAGY,IAFH7E,gBAAgB8E,iBAAiBT,MAAMpB,OAAQoB,MAAMN,OAGhEhC,UAAUuC,OAAS,KACnBC,SAASQ,UAETR,SAASS,UAGbN,UAAUO,OAAO,SAAUC,IAAKD,SACvBC,KAAOD,OACRV,SAASS,WAETjD,UAAUuC,OAAS,KACnBC,SAASQ,YAKrB,OAAOR,SAASY,UAOpB,SAASC,sBAEL,OADArD,UAAYA,UAAUsD,OAAO,SAAUC,GAAK,OAAOA,IAC5CxF,MAAMyF,eAAexD,UAAWqC,WAAW,GAGtD,SAASoB,uBAAuBC,SAC5B,OAAOjB,EAAEkB,IAAID,QAAS,SAAUE,MAAOrB,OACnC,OAAO7D,WAAWkE,eAAegB,MAAM5B,QAI/C,SAAS6B,uCACL,IAAIC,QAAU,GAAIC,SAElBtB,EAAEkB,IAAI3D,UAAW,SAAU4D,MAAOrB,OAC9BwB,SAAWpF,UAAUqF,YAAYJ,MAAM5B,MAClC8B,QAAQC,YACTD,QAAQC,UAAY,IAExBD,QAAQC,UAAUE,KAAKL,SAI3BjG,EAAEuG,QAAQJ,QAAS,SAAUF,OACzB,GAAIA,MAAMO,OAAS,EAAG,CAClB,IAAIC,KAAOxF,UAAUyF,6BAA6BZ,uBAAuBG,QACzEnB,EAAEkB,IAAIC,MAAO,SAAUA,MAAOrB,OAE1BtC,eAAeqE,KAAK,mBAAmBC,KAAK,WACxC,IAAIC,IAAM/B,EAAEgC,MACZ,GAAID,IAAIE,KAAK,UAAYd,MAAM5B,KAAM,CACjC,IAAI2C,SAAWP,KAAK7B,OAAOqC,MAAM,KAC7BD,SAASR,OAAS,IAClBC,KAAK7B,OAASoC,SAAS,GAAK,MAAaA,SAASA,SAASR,OAAS,IAExE,IAAIU,KAAOpC,EAAE,6BAA6BqC,KAAK,YAAcV,KAAK7B,QAClEiC,IAAIO,SAAS,aAAaT,KAAK,kBAAkBU,SACjDR,IAAIO,SAAS,aAAaE,OAAOJ,cAQzD,SAASK,mBAAmBC,WACxB,IAAIT,KAAM/B,UAAWyC,MAAOC,SAIxBC,gBAAkBrH,gBAAgBkD,eAAiB,EAEnDmE,kBACArF,eAAesF,SAAS,cACxB9C,EAAE,oBAAqBxC,gBAAgBuF,KAAKvH,gBAAgBwH,aAAa,eACzEhD,EAAE,qBAAsBxC,gBAAgBuF,KAAKvH,gBAAgBwH,aAAa,iBAG9EhD,EAAE8B,KAAKvE,UAAW,SAAUuC,MAAOqB,OAE/B,IAAK0B,iBAAmB1B,MAAM1C,SAAWjD,gBAAgB+C,kBAAmB,CAGxE,IAAI0E,WAKJ,GALiB/H,EAAEgI,UAAU3F,UAAW,SAAU4F,QAC9C,OAAQA,QAAUA,OAAO5D,OAAS4B,MAAM5B,MAAQ4D,OAAO1E,SAAWjD,gBAAgB+C,qBAIpE,EACd,OAAO,EAGX4C,MAAM1C,OAASjD,gBAAgB+C,kBAInC,IAAI6B,SAAW5E,gBAAgB8E,iBAAiBa,MAAM1C,OAAQ0C,MAAM5B,MAyCpE,GAvCA0C,KAAO,CAAC9D,SAAUgD,MAAM5B,KACpB6D,KAAMlH,UAAUqF,YAAYJ,MAAM5B,MAClC8D,QAAQ,GAEZnD,UAAYjE,WAAWkE,eAAegB,MAAM5B,MAG5CoD,MAAQ3C,EAAE,oCAAoCqC,KAAKlG,UAAUmH,oBAAoB,CAACF,KAAMlH,UAAUqF,YAAYJ,MAAM5B,SAGpHlD,eAAekH,iBAAiBtB,KAAMU,OAEtCC,SAAW5C,EAAE,aAAawC,OAAOG,QAEf,IAAdvC,UACAwC,SAASE,SAAS,eAGtBF,SAASX,KAAK,OAAQd,MAAM5B,MAC5BqD,SAASX,KAAK,SAAUd,MAAM1C,QAC9BmE,SAASX,KAAK,SAAUd,MAAMnC,QAC9B4D,SAASX,KAAK,OAAQ/B,WACtB0C,SAASY,KAAK,QAASrC,MAAM5B,MAEzBsD,iBAAmB1B,MAAM1C,SACzBmE,SAASE,SAAS3B,MAAM1C,QACxBmE,SAASa,IAAI,MAAkD,GAA1CzD,EAAE,IAAMmB,MAAM1C,OAAQiE,WAAWhB,OAAe,OAIzErF,eAAeqH,kBAAkBzB,KAAMW,UAGnCpD,gBAAgBU,YAChBF,EAAE5C,kBAAkBuG,UAAUf,UAGlCF,UAAUF,OAAOI,UAEb9C,QAAUzC,gBAAkB,EAE5B,OAAO,IAGf+D,uCAQJ,SAASwC,kBAEL,IAAIC,SAAWrI,gBAAgBsI,gBAC3BC,SAAW,GACXC,SACAlE,MAEAT,KAAME,KAAM0E,UAAWC,UAAWC,UAEtC,IAAKD,UAAY,EAAGA,UAAYL,SAASnC,OAAQwC,YAI7C,IAHA7E,KAAOwE,SAASK,WAChBF,SAAWxI,gBAAgB4I,cAAc/E,MAEpC8E,UAAY,EAAGA,UAAYH,SAAStC,OAAQyC,YAE7CF,UAAY7E,oBADZG,KAAOyE,SAASG,YACoBhG,SAAUkB,KAAM,MAGpD0E,SADAjE,MAAQtE,gBAAgB6I,oBAAoBhF,KAAME,OAChC0E,UAI1B,OAAOF,SAGX,SAASO,iBAAiBC,OACtB,IAAIC,GAAK,GACLC,KAAO,GAEPC,SAAUC,cACVnH,gBAJK,KAIc+G,MAAMK,OAHlB,KAGkCL,MAAMK,SAC/CF,SAAWjH,iBAAmBuC,EAAE,8CACnB0B,OAAS,GAClBiD,aAPC,KAOcJ,MAAMK,MAAeF,SAASG,OAASH,SAASI,QAC9CpD,OAAS,IACtBjE,gBAAkBkH,aAElBA,aAAa9C,KAAK,aAAakD,QAAQ,UAI3C/E,EAAE,uDAAuDgF,OAAOD,QAAQ,SAI5ER,MAAMU,iBACNV,MAAMW,4BAId,SAASC,sBAAsBZ,OACvB/G,gBAAkB+G,MAAMa,UAAYhJ,SAASiJ,eAC7C1H,gBAQR,SAAS2H,uBAAuBC,SAC5B,IAAIC,KAAOxF,EAAEC,WAETyC,UAAWC,MAAOC,SAsDlBX,KAAM/B,UAhDV,SAASuF,4BACLlI,UAAYqG,kBACZlB,UAAUgD,QACVJ,wBAAuB,GACvB7H,gBAAkB,KAClBnB,mBAAmBqJ,aAAazI,sBAAuBK,UAAWK,oBAAoB,GAoB1F,SAASgI,SAASrB,OACd,IAAIsB,OAAS7F,EAAEuE,MAAMuB,QAAQC,SAC7B/F,EAAE,6CAA6CgG,YAAY,aAC3DhG,EAAEuE,MAAMuB,QAAQC,SAASjD,SAAS,aAClCtF,eAAeqE,KAAK,qBAAqBkB,KAAK8C,OAAO5D,KAAK,SAC1DzE,eAAeqE,KAAK,qBAAqB2B,KAAK,QAAUqC,OAAO5D,KAAK,SACpExE,gBAAkBoI,OAOtB,SAASI,SAAS1B,OACd,IAAIsB,OAAS7F,EAAEuE,MAAM2B,gBAAgBH,SACrC3H,sBAAsB,CAClBU,KAAM+G,OAAO5D,KAAK,QAClBxD,OAAQoH,OAAO5D,KAAK,UACpBjD,OAAQ6G,OAAO5D,KAAK,UACpBtD,gBAAgB,IAqBxB,OAzDK4G,UAED5H,gBACAH,eAAiBwC,EAAEvD,SAAS0J,OAAOhJ,aAAc,CAAC5B,QAASA,WAAW6K,SAAS,QAC/EpG,EAAE,oBAAoBqG,IAAI,QAAS1I,eAEnCqC,EAAE,iDAAiDsG,GAAG,QAASb,2BAC/DzF,EAAEuG,QAAQD,GAAG,UAAWhC,kBACxBtE,EAAEuG,QAAQD,GAAG,QAASnB,wBAG1BzC,UAAYlF,eAAeqE,KAAK,cA+BhCjB,sBAAsB4F,OAAO,WACzBjJ,UAAYA,UAAUsD,OAAO,SAAUC,GAAK,OAAOA,IACnD2B,mBAAmBC,WACnB,IAAI+D,WAAazG,EAAE,+CAEnByG,WAAWH,GAAG,QAASV,UACvBa,WAAWH,GAAG,QAASL,UACvBQ,WAAWH,GAAG,SAAUL,UAGxBQ,WAAWC,QAAQ3B,QAAQ,SAE3BS,KAAKhF,YAGFgF,KAAK7E,UAGhB,SAASgG,YACDlJ,iBACAW,sBAAsB,CAClBU,KAAMrB,gBAAgBwE,KAAK,QAC3BxD,OAAQhB,gBAAgBwE,KAAK,UAC7BjD,OAAQvB,gBAAgBwE,KAAK,YAKzC,SAAS2E,6BAA6BrC,OAC9B/G,gBAAkB+G,MAAMa,UAAYhJ,SAASyK,iBAC7CF,YACAhJ,iBASR,SAASmJ,YACL,IAAIpC,SAAUqC,OAEdrC,SAAWjH,iBAAmBuC,EAAE,8CACnB0B,OAAS,GAEG,KADrBqF,MAAQrC,SAASI,QACPpD,SACNqF,MAAQ/G,EAAE,mCAAmC0G,SAE7CK,MAAMrF,OAAS,IACfjE,gBAAkBsJ,MAClBA,MAAMlF,KAAK,aAAakD,QAAQ,WAIpC/E,EAAE,uDAAuDgF,OAAOD,QAAQ,SAIhF,SAASiC,eACL,IAAIC,gBACCzJ,iBACDyJ,gBAAkB3B,yBAClB9H,eAAesF,SAAS,qBACxB9C,EAAEuG,QAAQD,GAAG,QAASM,+BAGtBK,gBACAA,gBAAgBT,OAAO,WACnBM,cAGJA,YAQR,SAASI,YACL,IAAIxC,SAAUyC,OAEdzC,SAAWjH,iBAAmBuC,EAAE,8CACnB0B,OAAS,GAEG,KADrByF,MAAQzC,SAASG,QACPnD,SACNyF,MAAQnH,EAAE,mCAAmCgF,QAE7CmC,MAAMzF,OAAS,IACfjE,gBAAkB0J,MAClBA,MAAMtF,KAAK,aAAakD,QAAQ,WAIpC/E,EAAE,uDAAuDgF,OAAOD,QAAQ,SAIhF,SAASqC,eACL,IAAIH,gBACCzJ,iBACDyJ,gBAAkB3B,yBAClB9H,eAAesF,SAAS,qBACxB9C,EAAEuG,QAAQD,GAAG,QAASM,+BAGtBK,gBACAA,gBAAgBT,OAAO,WACnBU,cAGJA,YAIR,SAASG,sBAAsBC,SAAU7I,OAAQa,WAC7C,GAAKb,OAAL,CAKA,IAAIqB,MAAQ5E,EAAEgI,UAAU3F,UAAW,SAAU4F,QACzC,OAAQA,QAAUA,OAAO5D,OAAS+H,UAAYnE,OAAO1E,SAAWA,SAGhEoB,OAEW,IAAXC,QACAvC,UAAUuC,OAAOd,OAASM,WAG9BhD,mBAAmBqJ,aAAazI,sBAAuBK,UAAWK,oBAAoB,IAQ1F,SAAS2J,eAAehI,KAAMd,OAAQa,WAElC,IAAIgI,SAAW/H,KAAKpB,SAEpB,GAAKM,OAAL,CAMA,IAAIqB,MAAQ5E,EAAEgI,UAAU3F,UAAW,SAAU4F,QACzC,OAAQA,QAAUA,OAAO5D,OAAS+H,UAAYnE,OAAO1E,SAAWA,SAGhEoB,OACW,IAAXC,QACAD,MAAQtC,UAAUuC,QACRd,SAAWM,YACjBA,UAAYO,MAAMb,QAI1Ba,MAAQT,mBAAmBkI,SAAU7I,OAAQa,WAGf,iBAA1BC,KAAKiI,YAAYpE,OAEjBvD,MAAMQ,OAAQ,IAIH,IAAXP,OACAvC,UAAUkK,OAAO3H,MAAO,GAI5BvC,UAAUmK,QAAQ7H,OAElBvD,mBAAmBqJ,aAAazI,sBAAuBK,UAAWK,oBAAoB,IAI1F,SAAS+J,sBAAsBpD,MAAOhF,KAAMqI,aAAcC,mBAEtD,IAAI/H,MAAQ5E,EAAEgI,UAAU3F,UAAW,SAAU4F,QACrC,OAAQA,QAAUA,OAAO5D,OAASA,KAAKpB,UAAYgF,OAAO1E,SAAWmJ,eACrEE,OAEJhI,OAAS,KAKO,KAHhBgI,OAAS5M,EAAEgI,UAAU3F,UAAW,SAAU4F,QACtC,OAAQA,QAAUA,OAAO5D,OAASA,KAAKpB,UAAYgF,OAAO1E,SAAWoJ,qBAGrEtK,UAAUuC,OAAOrB,OAASoJ,kBAG1BtK,UAAUkK,OAAO3H,MAAO,IAMpC,SAASiI,kBACLzL,mBAAmBqJ,aAAazI,sBAAuBK,UAAWK,oBAAoB,GACtFL,UAAY,GAGhB,SAASyK,wBAGLzK,WAFAA,UAAYjB,mBAAmB2L,aAAa/K,sBAAuBU,qBAAuB,IAEpEiD,OAAO,SAAUhB,OACnC,OAAOA,SAGG6B,OAASlG,gBAAgB0M,kBAAkB1M,gBAAgB2M,aACrE5K,UAAYqG,mBAIpB,SAASwE,qBACL7K,UAAY,GAOhB,SAAS8K,sBACD/K,yBACAgI,yBAgCR,SAASgD,iBAAiBxH,EAAGrC,QACzB,IAAIqB,MACAtB,aAAehD,gBAAgB+M,WAEnCvI,EAAE8B,KAAKvE,UAAW,SAAUiL,SAAUrH,OAC9BA,OAASA,MAAM1C,SAAWA,UAKX,KAHfqB,MAAQ5E,EAAEgI,UAAU3F,UAAW,SAAU4F,QACrC,OAAQA,QAAUA,OAAO5D,OAAS4B,MAAM5B,MAAQ4D,OAAO1E,SAAWD,gBAGlEjB,UAAUuC,OAAS,KAEnBvC,UAAUiL,UAAU/J,OAASD,gBAMzCjB,UAAYA,UAAUsD,OAAO,SAAUC,GAAK,OAAOA,IAEnDxE,mBAAmBqJ,aAAazI,sBAAuBK,UAAWK,oBAAoB,GAG1F,SAAS6K,kCAoBL,IAAIC,KAjBC7M,eAAe8M,IAAI5L,qBACpBlB,eAAe+M,SAASrN,QAAQsN,sBAAuB9L,kBAAmBsL,qBAC1E9L,kBAAkBuM,WAAW/L,kBAAmBJ,cAAcI,qBAI7DlB,eAAe8M,IAAI3L,uBACpBnB,eAAe+M,SAASrN,QAAQwN,aAAc/L,qBAAsBgK,cAExEzK,kBAAkBuM,WAAW9L,qBAAsBL,cAAcK,uBAG5DnB,eAAe8M,IAAI1L,uBACpBpB,eAAe+M,SAASrN,QAAQyN,aAAc/L,qBAAsBmK,cAExE7K,kBAAkBuM,WAAW7L,qBAAsBN,cAAcM,uBAEtDjB,MAAMiN,QAAQjN,MAAMkN,WAAWC,WACrCC,YAAYrM,kBAAmB,GAAIf,MAAMqN,MAAOvN,SAASwN,kBAGlE,SAASC,iCACLhN,kBAAkBuM,WAAWhN,SAAS0N,kBAAmB7M,cAAcK,uBACvET,kBAAkBuM,WAAWhN,SAAS2N,kBAAmB9M,cAAcM,uBAG3E,SAASyM,YAAYC,MACjBzO,EAAEuG,QAAQkI,KAAM,SAAUC,QACtBrN,kBAAkBsN,cAAcD,OAAOE,OAI/C,SAASC,wBACLL,YAAY/M,cAAcK,uBAC1B0M,YAAY/M,cAAcM,uBAG9B,SAAS+M,8BACLD,wBACA/N,MAAMiN,QAAQjN,MAAMkN,WAAWC,WAAWc,eAAelN,mBAI7D,SAASmN,wBAAwBpJ,EAAGqJ,QAASC,UAAWC,SAChDF,UACyB,IAArB5M,UAAUmE,QACVsG,uBAGPT,eAAe4C,QAASC,YAK7B,SAASE,0BAA0B/F,MAAOgG,QAASC,UAM3C,IAAIjL,KACAd,OANJ8L,UACyB,IAArBhN,UAAUmE,QACVsG,uBAKJT,eAFWgD,QAAQE,SAASlL,KACfgL,QAAQG,QACQH,QAAQI,cAAa,EAAM,WAGxDH,UACAnD,sBAAsBmD,SAASC,SAASlL,KAAKpB,SAAUqM,SAASE,QAASF,SAASG,cAAa,EAAM,UAI7G,SAASC,kBACLpP,gBAAgB8K,GAAG,iCAAkCqB,uBACrDnM,gBAAgB8K,GAAG,oBAAqB4D,yBACxC1O,gBAAgB8K,GAAG,cAAegC,kBAClC3M,cAAc2K,GAAG,qBAAsBgE,2BACvC1O,eAAe0K,GAAG,oCAAqCyB,iBAG3D,SAAS8C,kBACLrP,gBAAgBsP,IAAI,iCAAkCnD,uBACtDnM,gBAAgBsP,IAAI,oBAAqBZ,yBACzC1O,gBAAgBsP,IAAI,cAAexC,kBACnC3M,cAAcmP,IAAI,qBAAsBR,2BACxC1O,eAAekP,IAAI,oCAAqC/C,iBA1tB5DzL,mBAAmByO,iBAAiBjO,mBAAoB,WAAW,EAAM,CACrEkO,YAAazP,QAAQ0P,+BAskBzBrP,eAAe0K,GAAG,cAAe8B,oBAajCzK,cAAgB,WAERH,iBACAA,eAAe+E,SACf/E,eAAiB,KACjBC,gBAAkB,MAClBC,aAAe/B,cAAcsD,oBAEzBvB,aAAawN,SAIrBlL,EAAEuG,QAAQuE,IAAI,UAAWxG,kBACzBtE,EAAEuG,QAAQuE,IAAI,QAASlE,8BACvB5G,EAAEuG,QAAQuE,IAAI,QAAS3F,wBAI3BnF,EAAEuG,QAAQD,GAAG,aAAc,WACvB3I,kBAsHJrB,mBAAmBgK,GAAG,SAAUxJ,mBAAoB,WAC5CR,mBAAmBqM,IAAI7L,qBACvBiN,wBACAtB,kCACAlL,UAAY,GACZyK,uBACA1L,mBAAmBqJ,aAAazI,sBAAuBK,UAAWK,oBAAoB,GACtFiN,kBACAD,kBACAtN,yBAA0B,IAG1BC,UAAY,GACZjB,mBAAmBqJ,aAAazI,sBAAuBK,UAAWK,oBAAoB,GACtFoM,8BACAT,iCACAsB,kBACAvN,yBAA0B,KAIlCjC,QAAQ8P,SAAS,WACb3O,eAAe4O,eAAenQ,OAAQ,2BACtCyB,mBAAmB2O","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2016 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var _                       = brackets.getModule(\"thirdparty/lodash\"),\n        AppInit                 = brackets.getModule(\"utils/AppInit\"),\n        Async                   = brackets.getModule(\"utils/Async\"),\n        Strings                 = brackets.getModule(\"strings\"),\n        MainViewManager         = brackets.getModule(\"view/MainViewManager\"),\n        DocumentManager         = brackets.getModule(\"document/DocumentManager\"),\n        DocumentCommandHandlers = brackets.getModule(\"document/DocumentCommandHandlers\"),\n        EditorManager           = brackets.getModule(\"editor/EditorManager\"),\n        ProjectManager          = brackets.getModule(\"project/ProjectManager\"),\n        CommandManager          = brackets.getModule(\"command/CommandManager\"),\n        Commands                = brackets.getModule(\"command/Commands\"),\n        Dialogs                 = brackets.getModule(\"widgets/Dialogs\"),\n        Menus                   = brackets.getModule(\"command/Menus\"),\n        FileSystem              = brackets.getModule(\"filesystem/FileSystem\"),\n        FileUtils               = brackets.getModule(\"file/FileUtils\"),\n        ViewUtils               = brackets.getModule(\"utils/ViewUtils\"),\n        KeyEvent                = brackets.getModule(\"utils/KeyEvent\"),\n        WorkingSetView          = brackets.getModule(\"project/WorkingSetView\"),\n        PreferencesManager      = brackets.getModule(\"preferences/PreferencesManager\"),\n        KeyBindingManager       = brackets.getModule(\"command/KeyBindingManager\"),\n        ExtensionUtils          = brackets.getModule(\"utils/ExtensionUtils\"),\n        Mustache                = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        NavigationProvider      = require(\"NavigationProvider\");\n\n    var KeyboardPrefs = JSON.parse(require(\"text!keyboard.json\"));\n\n    // Command constants for recent files\n    var PREFS_RECENT_FILES      = \"recent-files.navigation\",\n        SHOW_RECENT_FILES       = \"recent-files.show\",\n        NEXT_IN_RECENT_FILES    = \"recent-files.next\",\n        PREV_IN_RECENT_FILES    = \"recent-files.prev\",\n        OPEN_FILES_VIEW_STATE   = \"openFiles\";\n\n    var htmlTemplate = require(\"text!html/recentfiles-template.html\"),\n        dirtyDotTemplate = \"<div class='file-status-icon dirty' style='position: absolute;margin-left: -2px;'></div>\";\n\n    var MAX_ENTRY_COUNT    = 50;\n\n    var isRecentFilesNavEnabled = true;\n\n    /*\n    * Contains list of most recently opened files and their last known cursor position\n    * @private\n    * @type {Array.<Object>}\n    */\n    var _mrofList = [],\n        $mrofContainer = null;\n\n\n    var $currentContext,\n        activeEditor;\n\n    var _hideMROFList;\n\n    PreferencesManager.definePreference(PREFS_RECENT_FILES, \"boolean\", true, {\n        description: Strings.DESCRIPTION_RECENT_FILES_NAV\n    });\n\n    /**\n     * Returns a 'context' object for getting/setting project-specific preferences\n     */\n    function _getPrefsContext() {\n        var projectRoot = ProjectManager.getProjectRoot();\n        return { location: { scope: \"user\", layer: \"project\", layerID: projectRoot && projectRoot.fullPath } };\n    }\n\n    /**\n     * Opens a full editor for the given context\n     * @private\n     * @param {Object.<path, paneId, cursor>} contextData - wrapper to provide the information required to open a full editor\n     * @return {$.Promise} - from the commandmanager\n     */\n    function _openEditorForContext(contextData) {\n        // Open the file in the current active pane to prevent unwanted scenarios if we are not in split view, fallback\n        // to the persisted paneId when specified and we are in split view or unable to determine the paneid\n        var activePaneId = MainViewManager.getActivePaneId(),\n            targetPaneId = contextData.paneId; // Assume we are going to use the last associated paneID\n\n        // Detect if we are not in split mode\n        if (MainViewManager.getPaneCount() === 1) {\n            // Override the targetPaneId with activePaneId as we are not yet in split mode\n            targetPaneId = activePaneId;\n        }\n\n        // If hide of MROF list is a context parameter, hide the MROF list on successful file open\n        if (contextData.hideOnOpenFile) {\n            _hideMROFList();\n        }\n\n        return CommandManager\n            .execute(Commands.FILE_OPEN,\n            {   fullPath: contextData.path,\n                paneId: targetPaneId\n            }\n                )\n            .done(function () {\n                if (contextData.cursor) {\n                    activeEditor = EditorManager.getActiveEditor();\n                    activeEditor.setCursorPos(contextData.cursor);\n                    activeEditor.centerOnCursor();\n                }\n            });\n    }\n\n    /**\n     * Creates an entry for MROF list\n     * @private\n     * @param {String} path - full path of a doc\n     * @param {String} pane - the pane holding the editor for the doc\n     * @param {Object} cursorPos - current cursor position\n     * @return {Object} a frame containing file path, pane and last known cursor\n     */\n    function _makeMROFListEntry(path, pane, cursorPos) {\n        return {\n            file: path,\n            paneId: pane,\n            cursor: cursorPos\n        };\n    }\n\n    /**\n     * Determines if a file is dirty\n     * @private\n     * @param {!File} file - file to test\n     * @return {boolean} true if the file is dirty, false otherwise\n     */\n    function _isOpenAndDirty(file) {\n        // working set item might never have been opened; if so, then it's definitely not dirty\n        var docIfOpen = DocumentManager.getOpenDocumentForPath(file.fullPath);\n        return (docIfOpen && docIfOpen.isDirty);\n    }\n\n    function _checkExt(entry, index) {\n        var deferred = new $.Deferred(),\n            fileEntry = FileSystem.getFileForPath(entry.file);\n\n        if (entry.inMem) {\n            var indxInWS = MainViewManager.findInWorkingSet(entry.paneId, entry.file);\n            // Remove entry if InMemoryFile is not found in Working set\n            if (indxInWS === -1) {\n                _mrofList[index] = null;\n                deferred.reject();\n            } else {\n                deferred.resolve();\n            }\n        } else {\n            fileEntry.exists(function (err, exists) {\n                if (!err && exists) {\n                    deferred.resolve();\n                } else {\n                    _mrofList[index] = null;\n                    deferred.reject();\n                }\n\t\t    });\n\t    }\n\n        return deferred.promise();\n    }\n\n    /**\n     * Checks whether entries in MROF list actually exists in fileSystem to prevent access to deleted files\n     * @private\n     */\n    function _syncWithFileSystem() {\n        _mrofList = _mrofList.filter(function (e) { return e; });\n        return Async.doSequentially(_mrofList, _checkExt, false);\n    }\n\n    function _getFileListForEntries(entries) {\n        return $.map(entries, function (value, index) {\n            return FileSystem.getFileForPath(value.file);\n        });\n    }\n\n    function _addDirectoriesForDuplicateBaseNames() {\n        var checked = {}, baseName;\n        // Find duplicates first\n        $.map(_mrofList, function (value, index) {\n            baseName = FileUtils.getBaseName(value.file);\n            if (!checked[baseName]) {\n                checked[baseName] = [];\n            }\n            checked[baseName].push(value);\n        });\n\n        // Go through the map and solve the arrays with length over 1. Ignore the rest.\n        _.forEach(checked, function (value) {\n            if (value.length > 1) {\n                var dirs = ViewUtils.getDirNamesForDuplicateFiles(_getFileListForEntries(value));\n                $.map(value, function (value, index) {\n                    // Go through recent files and add directories to appropriate entries\n                    $mrofContainer.find(\"#mrof-list > li\").each(function () {\n                        var $li = $(this);\n                        if ($li.data(\"path\") === value.file) {\n                            var dirSplit = dirs[index].split(\"/\");\n                            if (dirSplit.length > 3) {\n                                dirs[index] = dirSplit[0] + \"/\\u2026/\" + dirSplit[dirSplit.length - 1];\n                            }\n                            var $dir = $(\"<span class='directory'/>\").html(\" &mdash; \" + dirs[index]);\n                            $li.children(\"a.mroitem\").find(\"span.directory\").remove();\n                            $li.children(\"a.mroitem\").append($dir);\n                        }\n                    });\n                });\n            }\n        });\n    }\n\n    function _createFileEntries($mrofList) {\n        var data, fileEntry, $link, $newItem;\n        // Iterate over the MROF list and create the pop over UI items\n\n        // If we are in split view we might want to show the panes corresponding to the entries\n        var isPaneLabelReqd = MainViewManager.getPaneCount() > 1;\n\n        if (isPaneLabelReqd) {\n            $mrofContainer.addClass(\"split-mode\");\n            $(\".first.pane-label\", $mrofContainer).text(MainViewManager.getPaneTitle(\"first-pane\"));\n            $(\".second.pane-label\", $mrofContainer).text(MainViewManager.getPaneTitle(\"second-pane\"));\n        }\n\n        $.each(_mrofList, function (index, value) {\n\n            if (!isPaneLabelReqd && value.paneId !== MainViewManager.getActivePaneId()) {\n                // Try to see if we have same doc split\n                // Check existing list for this doc path and active pane entry\n                var entryIndex = _.findIndex(_mrofList, function (record) {\n                    return (record && record.file === value.file && record.paneId === MainViewManager.getActivePaneId());\n                });\n\n                // If found don't process this entry, as the document is already present in active pane\n                if (entryIndex >= 0) {\n                    return true;\n                }\n                    // Process this for active pane id\n                value.paneId = MainViewManager.getActivePaneId();\n\n            }\n\n            var indxInWS = MainViewManager.findInWorkingSet(value.paneId, value.file);\n\n            data = {fullPath: value.file,\n                name: FileUtils.getBaseName(value.file),\n                isFile: true};\n\n            fileEntry = FileSystem.getFileForPath(value.file);\n\n            // Create new list item with a link\n            $link = $(\"<a href='#' class='mroitem'></a>\").html(ViewUtils.getFileEntryDisplay({name: FileUtils.getBaseName(value.file)}));\n\n            // Use the file icon providers\n            WorkingSetView.useIconProviders(data, $link);\n\n            $newItem = $(\"<li></li>\").append($link);\n\n            if (indxInWS !== -1) { // in working set show differently\n                $newItem.addClass(\"working-set\");\n            }\n\n            $newItem.data(\"path\", value.file);\n            $newItem.data(\"paneId\", value.paneId);\n            $newItem.data(\"cursor\", value.cursor);\n            $newItem.data(\"file\", fileEntry);\n            $newItem.attr(\"title\", value.file);\n\n            if (isPaneLabelReqd && value.paneId) {\n                $newItem.addClass(value.paneId);\n                $newItem.css('top', ($('.' + value.paneId, $mrofList).length * 22) + 'px');\n            }\n\n            // Use the class providers(git e.t.c)\n            WorkingSetView.useClassProviders(data, $newItem);\n\n            // If a file is dirty , mark it in the list\n            if (_isOpenAndDirty(fileEntry)) {\n                $(dirtyDotTemplate).prependTo($newItem);\n            }\n\n            $mrofList.append($newItem);\n\n            if (index === MAX_ENTRY_COUNT - 1) {\n                // We have reached the max number of entries we can display, break out\n                return false;\n            }\n        });\n        _addDirectoriesForDuplicateBaseNames();\n    }\n\n    /**\n     * This function is used to create mrof when a project is opened for the firt time with the recent files feature\n     * This routine acts as a logic to migrate existing viewlist to mrof structure\n     * @private\n     */\n    function _createMROFList() {\n\n        var paneList = MainViewManager.getPaneIdList(),\n            mrofList = [],\n            fileList,\n            index;\n\n        var pane, file, mrofEntry, paneCount, fileCount;\n        // Iterate over the pane ID list\n        for (paneCount = 0; paneCount < paneList.length; paneCount++) {\n            pane = paneList[paneCount];\n            fileList = MainViewManager.getWorkingSet(pane);\n            // Iterate over the file list for this pane\n            for (fileCount = 0; fileCount < fileList.length; fileCount++) {\n                file = fileList[fileCount];\n                mrofEntry = _makeMROFListEntry(file.fullPath, pane, null);\n                // Add it in the MRU list order\n                index = MainViewManager.findInGlobalMRUList(pane, file);\n                mrofList[index] = mrofEntry;\n            }\n        }\n\n        return mrofList;\n    }\n\n    function _handleArrowKeys(event) {\n        var UP = 38,\n            DOWN = 40;\n\n        var $context, $nextContext;\n        if ($mrofContainer && (event.which === UP || event.which === DOWN)) {\n            $context = $currentContext || $(\"#mrof-container #mrof-list > li.highlight\");\n            if ($context.length > 0) {\n                $nextContext = event.which === UP ? $context.prev() : $context.next();\n                if ($nextContext.length > 0) {\n                    $currentContext = $nextContext;\n                    //_resetOpenFileTimer();\n                    $nextContext.find(\"a.mroitem\").trigger(\"focus\");\n                }\n            } else {\n                //WTF! (Worse than failure). We should not get here.\n                $(\"#mrof-container #mrof-list > li > a.mroitem:visited\").last().trigger(\"focus\");\n            }\n            // If we don't prevent this then scrolling happens by the browser(user agent behaviour)\n            // as well as a result of moving focus in the ul\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n\n    function _hideMROFListOnEscape(event) {\n        if ($mrofContainer && event.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n            _hideMROFList();\n        }\n    }\n\n    /**\n     * Shows the current MROF list\n     * @private\n     */\n    function _createMROFDisplayList(refresh) {\n        var $def = $.Deferred();\n\n        var $mrofList, $link, $newItem;\n\n        /**\n         * Clears the MROF list in memory and pop over but retains the working set entries\n         * @private\n         */\n        function _purgeAllExceptWorkingSet() {\n            _mrofList = _createMROFList();\n            $mrofList.empty();\n            _createMROFDisplayList(true);\n            $currentContext = null;\n            PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, _getPrefsContext(), true);\n        }\n\n        if (!refresh) {\n            // Call hide first to make sure we are not creating duplicate lists\n            _hideMROFList();\n            $mrofContainer = $(Mustache.render(htmlTemplate, {Strings: Strings})).appendTo('body');\n            $(\"#mrof-list-close\").one(\"click\", _hideMROFList);\n            // Attach clear list handler to the 'Clear All' button\n            $(\"#mrof-container .footer > div#clear-mrof-list\").on(\"click\", _purgeAllExceptWorkingSet);\n            $(window).on(\"keydown\", _handleArrowKeys);\n            $(window).on(\"keyup\", _hideMROFListOnEscape);\n        }\n\n        $mrofList = $mrofContainer.find(\"#mrof-list\");\n\n        /**\n         * Focus handler for the link in list item\n         * @private\n         */\n        function _onFocus(event) {\n            var $scope = $(event.target).parent();\n            $(\"#mrof-container #mrof-list > li.highlight\").removeClass(\"highlight\");\n            $(event.target).parent().addClass(\"highlight\");\n            $mrofContainer.find(\"#recent-file-path\").text($scope.data(\"path\"));\n            $mrofContainer.find(\"#recent-file-path\").attr('title', ($scope.data(\"path\")));\n            $currentContext = $scope;\n        }\n\n        /**\n         * Click handler for the link in list item\n         * @private\n         */\n        function _onClick(event) {\n            var $scope = $(event.delegateTarget).parent();\n            _openEditorForContext({\n                path: $scope.data(\"path\"),\n                paneId: $scope.data(\"paneId\"),\n                cursor: $scope.data(\"cursor\"),\n                hideOnOpenFile: true\n            });\n        }\n\n        var data, fileEntry;\n\n        _syncWithFileSystem().always(function () {\n            _mrofList = _mrofList.filter(function (e) { return e; });\n            _createFileEntries($mrofList);\n            var $fileLinks = $(\"#mrof-container #mrof-list > li > a.mroitem\");\n            // Handlers for mouse events on the list items\n            $fileLinks.on(\"focus\", _onFocus);\n            $fileLinks.on(\"click\", _onClick);\n            $fileLinks.on(\"select\", _onClick);\n\n            // Put focus on the Most recent file link in the list\n            $fileLinks.first().trigger(\"focus\");\n\n            $def.resolve();\n        });\n\n        return $def.promise();\n    }\n\n    function _openFile() {\n        if ($currentContext) {\n            _openEditorForContext({\n                path: $currentContext.data(\"path\"),\n                paneId: $currentContext.data(\"paneId\"),\n                cursor: $currentContext.data(\"cursor\")\n            });\n        }\n    }\n\n    function _hideMROFListOnNavigationEnd(event) {\n        if ($mrofContainer && event.keyCode === KeyEvent.DOM_VK_CONTROL) {\n            _openFile();\n            _hideMROFList();\n        }\n    }\n\n\n    /**\n     * Opens the next item in MROF list if pop over is visible else displays the pop over\n     * @private\n     */\n    function _moveNext() {\n        var $context, $next;\n\n        $context = $currentContext || $(\"#mrof-container #mrof-list > li.highlight\");\n        if ($context.length > 0) {\n            $next = $context.next();\n            if ($next.length === 0) {\n                $next = $(\"#mrof-container #mrof-list > li\").first();\n            }\n            if ($next.length > 0) {\n                $currentContext = $next;\n                $next.find(\"a.mroitem\").trigger(\"focus\");\n            }\n        } else {\n            //WTF! (Worse than failure). We should not get here.\n            $(\"#mrof-container #mrof-list > li > a.mroitem:visited\").last().trigger(\"focus\");\n        }\n    }\n\n    function _cmdMoveNext() {\n        var $displayPromise;\n        if (!$mrofContainer) {\n            $displayPromise = _createMROFDisplayList();\n            $mrofContainer.addClass(\"confirmation-mode\");\n            $(window).on(\"keyup\", _hideMROFListOnNavigationEnd);\n        }\n\n        if ($displayPromise) {\n            $displayPromise.always(function () {\n                _moveNext();\n            });\n        } else {\n            _moveNext();\n        }\n    }\n\n    /**\n     * Opens the previous item in MROF list if pop over is visible else displays the pop over\n     * @private\n     */\n    function _movePrev() {\n        var $context, $prev;\n\n        $context = $currentContext || $(\"#mrof-container #mrof-list > li.highlight\");\n        if ($context.length > 0) {\n            $prev = $context.prev();\n            if ($prev.length === 0) {\n                $prev = $(\"#mrof-container #mrof-list > li\").last();\n            }\n            if ($prev.length > 0) {\n                $currentContext = $prev;\n                $prev.find(\"a.mroitem\").trigger(\"focus\");\n            }\n        } else {\n            //WTF! (Worse than failure). We should not get here.\n            $(\"#mrof-container #mrof-list > li > a.mroitem:visited\").last().trigger(\"focus\");\n        }\n    }\n\n    function _cmdMovePrev() {\n        var $displayPromise;\n        if (!$mrofContainer) {\n            $displayPromise = _createMROFDisplayList();\n            $mrofContainer.addClass(\"confirmation-mode\");\n            $(window).on(\"keyup\", _hideMROFListOnNavigationEnd);\n        }\n\n        if ($displayPromise) {\n            $displayPromise.always(function () {\n                _movePrev();\n            });\n        } else {\n            _movePrev();\n        }\n    }\n\n    function _updateCursorPosition(filePath, paneId, cursorPos) {\n        if (!paneId) { // Don't handle this if not a full view/editor\n            return;\n        }\n\n        // Check existing list for this doc path and pane entry\n        var index = _.findIndex(_mrofList, function (record) {\n            return (record && record.file === filePath && record.paneId === paneId);\n        });\n\n        var entry;\n\n        if (index !== -1) {\n            _mrofList[index].cursor = cursorPos;\n        }\n\n        PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, _getPrefsContext(), true);\n    }\n\n    /**\n     * Adds an entry to MROF list\n     * @private\n     * @param {Editor} editor - editor to extract file information\n     */\n    function _addToMROFList(file, paneId, cursorPos) {\n\n        var filePath = file.fullPath;\n\n        if (!paneId) { // Don't handle this if not a full view/editor\n            return;\n        }\n\n\n        // Check existing list for this doc path and pane entry\n        var index = _.findIndex(_mrofList, function (record) {\n            return (record && record.file === filePath && record.paneId === paneId);\n        });\n\n        var entry;\n        if (index !== -1) {\n            entry = _mrofList[index];\n            if (entry.cursor && !cursorPos) {\n                cursorPos = entry.cursor;\n            }\n        }\n\n        entry = _makeMROFListEntry(filePath, paneId, cursorPos);\n\n        // Check if the file is an InMemoryFile\n        if (file.constructor.name === \"InMemoryFile\") {\n            // Mark the entry as inMem, so that we can knock it off from the list when removed from working set\n            entry.inMem = true;\n        }\n\n\n        if (index !== -1) {\n            _mrofList.splice(index, 1);\n        }\n\n        // add it to the front of the list\n        _mrofList.unshift(entry);\n\n        PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, _getPrefsContext(), true);\n    }\n\n    // To update existing entry if a move has happened\n    function _handleWorkingSetMove(event, file, sourcePaneId, destinationPaneId) {\n        // Check existing list for this doc path and source pane entry\n        var index = _.findIndex(_mrofList, function (record) {\n                return (record && record.file === file.fullPath && record.paneId === sourcePaneId);\n            }), tIndex;\n        // If an entry is found update the pane info\n        if (index >= 0) {\n            // But an entry with the target pane Id should not exist\n            tIndex = _.findIndex(_mrofList, function (record) {\n                return (record && record.file === file.fullPath && record.paneId === destinationPaneId);\n            });\n            if (tIndex === -1) {\n                _mrofList[index].paneId = destinationPaneId;\n            } else {\n                // Remove this entry as it has been moved.\n                _mrofList.splice(index, 1);\n            }\n        }\n    }\n\n    // Handle project close or app close to set view state\n    function _handleAppClose() {\n        PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, _getPrefsContext(), true);\n        _mrofList = [];\n    }\n\n    function _initRecentFilesList() {\n        _mrofList = PreferencesManager.getViewState(OPEN_FILES_VIEW_STATE, _getPrefsContext()) || [];\n\n        _mrofList = _mrofList.filter(function (entry) {\n            return entry;\n        });\n        // Have a check on the number of entries to fallback to working set if we detect corruption\n        if (_mrofList.length < MainViewManager.getWorkingSetSize(MainViewManager.ALL_PANES)) {\n            _mrofList = _createMROFList();\n        }\n    }\n\n    function _handleProjectOpen() {\n        _mrofList = [];\n        // We will do a late initialization once we get the first editor change or file open notification\n    }\n\n    ProjectManager.on(\"projectOpen\", _handleProjectOpen);\n\n\n    function _showRecentFileList() {\n        if (isRecentFilesNavEnabled) {\n            _createMROFDisplayList();\n        }\n    }\n\n    /**\n     * Hides the current MROF list if visible\n     * @private\n     */\n    _hideMROFList = function () {\n\n        if ($mrofContainer) {\n            $mrofContainer.remove();\n            $mrofContainer = null;\n            $currentContext = null;\n            activeEditor = EditorManager.getActiveEditor();\n            if (activeEditor) {\n                activeEditor.focus();\n            }\n        }\n\n        $(window).off(\"keydown\", _handleArrowKeys);\n        $(window).off(\"keyup\", _hideMROFListOnNavigationEnd);\n        $(window).off(\"keyup\", _hideMROFListOnEscape);\n    };\n\n    // To take care of hiding the popover during app navigation in os using key board shortcuts\n    $(window).on(\"blur focus\", function () {\n        _hideMROFList();\n    });\n\n    // Merges the entries to a single pane if split view have been merged\n    // Then purges duplicate entries in mrof list\n    function _handlePaneMerge(e, paneId) {\n        var index;\n        var targetPaneId = MainViewManager.FIRST_PANE;\n\n        $.each(_mrofList, function (itrIndex, value) {\n            if (value && value.paneId === paneId) { // We have got an entry which needs merge\n                // Before modifying the actual pane info check if an entry exists with same target pane\n                index = _.findIndex(_mrofList, function (record) {\n                    return (record && record.file === value.file && record.paneId === targetPaneId);\n                });\n                if (index !== -1) { // A duplicate entry found, remove the current one instead of updating\n                    _mrofList[index] = null;\n                } else { // Update with merged pane info\n                    _mrofList[itrIndex].paneId = targetPaneId;\n                }\n            }\n        });\n\n        // Clean the null/undefined entries\n        _mrofList = _mrofList.filter(function (e) { return e; });\n\n        PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, _getPrefsContext(), true);\n    }\n\n    function _initRecentFileMenusAndCommands() {\n        // Command to show recent files list\n\n        if (!CommandManager.get(SHOW_RECENT_FILES)) {\n            CommandManager.register(Strings.CMD_RECENT_FILES_OPEN, SHOW_RECENT_FILES, _showRecentFileList);\n            KeyBindingManager.addBinding(SHOW_RECENT_FILES, KeyboardPrefs[SHOW_RECENT_FILES]);\n        }\n\n        // Keyboard only - Navigate to the next doc in MROF list\n        if (!CommandManager.get(NEXT_IN_RECENT_FILES)) {\n            CommandManager.register(Strings.CMD_NEXT_DOC, NEXT_IN_RECENT_FILES, _cmdMoveNext);\n        }\n        KeyBindingManager.addBinding(NEXT_IN_RECENT_FILES, KeyboardPrefs[NEXT_IN_RECENT_FILES]);\n\n        // Keyboard only - Navigate to the prev doc in MROF list\n        if (!CommandManager.get(PREV_IN_RECENT_FILES)) {\n            CommandManager.register(Strings.CMD_PREV_DOC, PREV_IN_RECENT_FILES, _cmdMovePrev);\n        }\n        KeyBindingManager.addBinding(PREV_IN_RECENT_FILES, KeyboardPrefs[PREV_IN_RECENT_FILES]);\n\n        var menu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        menu.addMenuItem(SHOW_RECENT_FILES, \"\", Menus.AFTER, Commands.FILE_OPEN_FOLDER);\n    }\n\n    function _initDefaultNavigationCommands() {\n        KeyBindingManager.addBinding(Commands.NAVIGATE_NEXT_DOC, KeyboardPrefs[NEXT_IN_RECENT_FILES]);\n        KeyBindingManager.addBinding(Commands.NAVIGATE_PREV_DOC, KeyboardPrefs[PREV_IN_RECENT_FILES]);\n    }\n\n    function _removeKeys(keys) {\n        _.forEach(keys, function (config) {\n            KeyBindingManager.removeBinding(config.key);\n        });\n    }\n\n    function _removeNavigationKeys() {\n        _removeKeys(KeyboardPrefs[NEXT_IN_RECENT_FILES]);\n        _removeKeys(KeyboardPrefs[PREV_IN_RECENT_FILES]);\n    }\n\n    function _deregisterSortcutsAndMenus() {\n        _removeNavigationKeys();\n        Menus.getMenu(Menus.AppMenuBar.FILE_MENU).removeMenuItem(SHOW_RECENT_FILES);\n    }\n\n    // Handle current file change\n    function handleCurrentFileChange(e, newFile, newPaneId, oldFile) {\n        if (newFile) {\n            if (_mrofList.length === 0) {\n                _initRecentFilesList();\n            }\n\n\t        _addToMROFList(newFile, newPaneId);\n        }\n    }\n\n    // Handle Active Editor change to update mrof information\n    function _handleActiveEditorChange(event, current, previous) {\n        if (current) { // Handle only full editors\n            if (_mrofList.length === 0) {\n                _initRecentFilesList();\n            }\n\n            var file = current.document.file;\n            var paneId = current._paneId;\n            _addToMROFList(file, paneId, current.getCursorPos(true, \"first\"));\n        }\n\n        if (previous) { // Capture the last know cursor position\n            _updateCursorPosition(previous.document.file.fullPath, previous._paneId, previous.getCursorPos(true, \"first\"));\n        }\n    }\n\n    function _attachListners() {\n        MainViewManager.on(\"workingSetMove.pane-first-pane\", _handleWorkingSetMove);\n        MainViewManager.on(\"currentFileChange\", handleCurrentFileChange);\n        MainViewManager.on(\"paneDestroy\", _handlePaneMerge);\n        EditorManager.on(\"activeEditorChange\", _handleActiveEditorChange);\n        ProjectManager.on(\"beforeProjectClose beforeAppClose\", _handleAppClose);\n    }\n\n    function _detachListners() {\n        MainViewManager.off(\"workingSetMove.pane-first-pane\", _handleWorkingSetMove);\n        MainViewManager.off(\"currentFileChange\", handleCurrentFileChange);\n        MainViewManager.off(\"paneDestroy\", _handlePaneMerge);\n        EditorManager.off(\"activeEditorChange\", _handleActiveEditorChange);\n        ProjectManager.off(\"beforeProjectClose beforeAppClose\", _handleAppClose);\n    }\n\n    PreferencesManager.on(\"change\", PREFS_RECENT_FILES, function () {\n        if (PreferencesManager.get(PREFS_RECENT_FILES)) {\n            _removeNavigationKeys();\n            _initRecentFileMenusAndCommands();\n            _mrofList = [];\n            _initRecentFilesList();\n            PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, _getPrefsContext(), true);\n            _detachListners();\n            _attachListners();\n            isRecentFilesNavEnabled = true;\n        } else {\n            // Reset the view state to empty\n            _mrofList = [];\n            PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, _getPrefsContext(), true);\n            _deregisterSortcutsAndMenus();\n            _initDefaultNavigationCommands();\n            _detachListners();\n            isRecentFilesNavEnabled = false;\n        }\n    });\n\n    AppInit.appReady(function () {\n        ExtensionUtils.loadStyleSheet(module, \"styles/recent-files.css\");\n        NavigationProvider.init();\n    });\n});\n"],"file":"main.js"}