define(function(require,exports,module){const SpecRunnerUtils=brackets.getModule("spec/SpecRunnerUtils");describe("integration:FileRecovery integration tests",function(){const testPathOriginal=SpecRunnerUtils.getTestPath("/spec/ProjectManager-test-files"),testPath=SpecRunnerUtils.getTestRoot()+"/navigationTests/",tempRestorePath=SpecRunnerUtils.getTestRoot()+"/navigationTestsRestore/";let FileViewController,ProjectManager,CommandManager,Commands,testWindow,EditorManager,MainViewManager,brackets,FileSystem,$;async function deletePath(pathToDel){pathToDel.startsWith("/")||(pathToDel=testPath+pathToDel);let promise=SpecRunnerUtils.deletePath(pathToDel,!0);await awaitsForDone(promise,"Remove "+pathToDel,5e3)}async function loadTestWindow(){testWindow=await SpecRunnerUtils.createTestWindowAndRun(),brackets=testWindow.brackets,$=testWindow.$,FileViewController=brackets.test.FileViewController,ProjectManager=brackets.test.ProjectManager,CommandManager=brackets.test.CommandManager,Commands=brackets.test.Commands,EditorManager=brackets.test.EditorManager,MainViewManager=brackets.test.MainViewManager,FileSystem=brackets.test.FileSystem,await awaitsForDone(SpecRunnerUtils.copyPath(testPathOriginal,testPath),"copy temp files"),await SpecRunnerUtils.loadProjectInTestWindow(testPath)}async function closeSession(){await awaitsForDone(CommandManager.execute(Commands.FILE_CLOSE_ALL,{_forceClose:!0}),"closing all file")}async function openFile(relativePath){await awaitsForDone(FileViewController.openAndSelectDocument(testPath+relativePath,FileViewController.PROJECT_MANAGER))}function isFileOpen(relativePath){const fullPath=testPath+relativePath;let allOpenFiles=MainViewManager.getAllOpenFiles();for(let file of allOpenFiles)if(file.fullPath===fullPath)return!0;return!1}async function initFileRestorer(fileToOpen,scanInterval=100){await deletePath(tempRestorePath),await SpecRunnerUtils.waitTillPathNotExists(tempRestorePath),await openFile(fileToOpen),expect(isFileOpen(fileToOpen)).toBeTrue(),expect(testWindow._FileRecoveryExtensionForTests).exists,expect(await SpecRunnerUtils.pathExists(tempRestorePath,!0)).toBeFalse(),testWindow._FileRecoveryExtensionForTests.initWith(scanInterval,FileSystem.getDirectoryForPath(tempRestorePath)),await SpecRunnerUtils.waitTillPathExists(tempRestorePath)}beforeAll(async function(){await loadTestWindow()},3e4),afterAll(async function(){FileViewController=null,ProjectManager=null,testWindow=null,brackets=null,await deletePath(testPath),await deletePath(tempRestorePath),await SpecRunnerUtils.closeTestWindow()}),beforeEach(async function(){await deletePath(testPath),await deletePath(tempRestorePath),await awaitsForDone(SpecRunnerUtils.copyPath(testPathOriginal,testPath),"copy temp files")}),it("Should create restore folders and backup files",async function(){await initFileRestorer("file.js");let projectRestorePath=testWindow._FileRecoveryExtensionForTests.getProjectRestoreRoot(testPath),editor;EditorManager.getActiveEditor().document.setText("hello"),await SpecRunnerUtils.waitTillPathExists(projectRestorePath.fullPath,!0),await SpecRunnerUtils.waitTillPathExists(projectRestorePath.fullPath+"file.js",!1),await closeSession()}),it("Should saving files remove file restore folder",async function(){await initFileRestorer("toDelete1/file.js");let projectRestorePath=testWindow._FileRecoveryExtensionForTests.getProjectRestoreRoot(testPath),editor;EditorManager.getActiveEditor().document.setText("hello"),await SpecRunnerUtils.waitTillPathExists(projectRestorePath.fullPath+"toDelete1/file.js",!1),await awaitsForDone(CommandManager.execute(Commands.FILE_SAVE_ALL),"saving all file"),await SpecRunnerUtils.waitTillPathNotExists(projectRestorePath.fullPath+"toDelete1/file.js",!1),await closeSession()}),it("Should show restore notification and restore if there is anything to restore",async function(){await initFileRestorer("toDelete1/file.js");let projectRestorePath=testWindow._FileRecoveryExtensionForTests.getProjectRestoreRoot(testPath);const unsavedText="hello"+Math.random();let editor=EditorManager.getActiveEditor();editor.document.setText(unsavedText),await SpecRunnerUtils.waitTillPathExists(projectRestorePath.fullPath+"toDelete1/file.js",!1),await SpecRunnerUtils.closeTestWindow(),await loadTestWindow(),testWindow._FileRecoveryExtensionForTests.initWith(100,FileSystem.getDirectoryForPath(tempRestorePath)),await awaitsFor(()=>1===$(".file-recovery-button").length,"waiting for restore notification",5e3),$(".file-recovery-button").click(),await awaitsFor(()=>(editor=EditorManager.getActiveEditor())&&editor.document.getText()===unsavedText,"waiting for restore notification",5e3),await closeSession()},1e4)})});
//# sourceMappingURL=integ-tests.js.map
