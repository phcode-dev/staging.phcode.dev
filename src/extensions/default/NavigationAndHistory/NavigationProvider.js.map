{"version":3,"sources":["extensions/default/NavigationAndHistory/NavigationProvider.js"],"names":["define","require","exports","module","Strings","brackets","getModule","MainViewManager","DocumentManager","EditorManager","ProjectManager","CommandManager","Commands","Menus","KeyBindingManager","FileSystem","Metrics","KeyboardPrefs","JSON","parse","NAVIGATION_JUMP_BACK","NAVIGATION_JUMP_FWD","MAX_NAV_FRAMES_COUNT","$navback","$navForward","$searchNav","$newProject","jumpBackwardStack","jumpForwardStack","activePosNotSynced","currentEditPos","jumpInProgress","commandJumpBack","commandJumpFwd","_hasNavBackFrames","length","_hasNavForwardFrames","_setEnableBackNavButton","enabled","removeClass","addClass","_setEnableForwardNavButton","_validateNavigationCmds","setEnabled","_validateFrame","entry","deferred","$","Deferred","fileEntry","getFileForPath","filePath","indexInWS","inMem","findInWorkingSet","paneId","reject","resolve","exists","err","_hash","_validateMarkers","promise","NavigationFrame","editor","selectionObj","this","cm","_codeMirror","document","file","_path","constructor","name","_paneId","uId","Date","getTime","selections","ranges","bookMarkIds","_createMarkers","_recordJumpDef","event","force","target","_refreshInProgress","origin","window","type","_recordCurrentPos","navFrame","shift","_clearMarkers","lastBack","pop","push","_isRangerOverlap","prevStart","prevEnd","curStart","curEnd","temp","_isSimilarSelection","prev","current","_","isEqual","startPrev","anchor","start","endPrev","head","end","startCur","endCur","psc","ch","psl","line","pec","pel","csc","csl","cec","cel","_isSimilarBookmarks","_navigateBack","skipCurrentFile","getCurrentFullEditor","listSelections","done","goTo","fail","execute","always","_navigateForward","_initNavigationMenuItems","menu","getMenu","AppMenuBar","NAVIGATE_MENU","addMenuItem","AFTER","NAVIGATE_PREV_DOC","_initNavigationCommands","register","CMD_NAVIGATE_BACKWARD","CMD_NAVIGATE_FORWARD","get","addBinding","_backupLiveMarkers","frames","index","frame","_handleEditorDestroy","_handleEditorCleanup","_removeBackwardFramesForFile","filter","_validateFileHash","_removeForwardFramesForFile","_removeFileFromStack","_clearStacks","_reinstateMarkers","_captureBackFrame","_handleActiveEditorChange","previous","off","on","_initHandlers","_navigateBackClicked","evt","countEvent","EVENT_TYPE","UI","shiftKey","focusActivePane","_navigateForwardClicked","_showInFileTreeClicked","NAVIGATE_SHOW_IN_FILE_TREE","_findInFiles","CMD_FIND_IN_FILES","_newProjectClicked","FILE_NEW_PROJECT","_setupNavigationButtons","$mainNavBarRight","$mainNavBarLeft","prepend","$showInTree","find","attr","CMD_SHOW_IN_TREE","CMD_PROJECT_NEW","contextmenu","init","prototype","_backupSelectionRanges","range","rangeStart","rangeEnd","bookMark","setBookmark","id","markText","className","marker","selection","self","markers","getAllMarks","indexOf","from","to","clear","thisDoc","getOpenDocumentForPath","_masterEditor","FILE_OPEN","fullPath","setSelections"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2017 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n/*global _ */\n/**\n * Manages Editor navigation history to aid back/fwd movement between the edit positions\n * in the active project context. The navigation history is purely in-memory and not\n * persisted to file system when a project is being closed.\n */\ndefine(function (require, exports, module) {\n\n\n    var Strings                 = brackets.getModule(\"strings\"),\n        MainViewManager         = brackets.getModule(\"view/MainViewManager\"),\n        DocumentManager         = brackets.getModule(\"document/DocumentManager\"),\n        EditorManager           = brackets.getModule(\"editor/EditorManager\"),\n        ProjectManager          = brackets.getModule(\"project/ProjectManager\"),\n        CommandManager          = brackets.getModule(\"command/CommandManager\"),\n        Commands                = brackets.getModule(\"command/Commands\"),\n        Menus                   = brackets.getModule(\"command/Menus\"),\n        KeyBindingManager       = brackets.getModule(\"command/KeyBindingManager\"),\n        FileSystem              = brackets.getModule(\"filesystem/FileSystem\"),\n        Metrics                 = brackets.getModule(\"utils/Metrics\");\n\n    var KeyboardPrefs = JSON.parse(require(\"text!keyboard.json\"));\n\n    // Command constants for navigation history\n    var NAVIGATION_JUMP_BACK      = \"navigation.jump.back\",\n        NAVIGATION_JUMP_FWD       = \"navigation.jump.fwd\";\n\n    // The latency time to capture an explicit cursor movement as a navigation frame\n    var MAX_NAV_FRAMES_COUNT = 50;\n\n    let $navback = null,\n        $navForward = null,\n        $searchNav = null,\n        $newProject = null;\n\n   /**\n    * Contains list of most recently known cursor positions.\n    * @private\n    * @type {Array.<Object>}\n    */\n    var jumpBackwardStack = [];\n\n   /**\n    * Contains list of most recently traversed cursor positions using NAVIGATION_JUMP_BACK command.\n    * @private\n    * @type {Array.<Object>}\n    */\n    var jumpForwardStack = [],\n        activePosNotSynced = false,\n        currentEditPos = null,\n        jumpInProgress = false,\n        commandJumpBack,\n        commandJumpFwd;\n\n   /**\n    * Function to check if there are any navigatable frame backward.\n    * @private\n    */\n    function _hasNavBackFrames() {\n        return (jumpBackwardStack.length > 0);\n    }\n\n    function _hasNavForwardFrames() {\n        return jumpForwardStack.length > 0;\n    }\n\n    function _setEnableBackNavButton(enabled) {\n        if(enabled){\n            $navback.removeClass('nav-back-btn-disabled').addClass('nav-back-btn');\n        } else {\n            $navback.removeClass('nav-back-btn').addClass('nav-back-btn-disabled');\n        }\n    }\n\n    function _setEnableForwardNavButton(enabled) {\n        if(enabled){\n            $navForward.removeClass('nav-forward-btn-disabled').addClass('nav-forward-btn');\n        } else {\n            $navForward.removeClass('nav-forward-btn').addClass('nav-forward-btn-disabled');\n        }\n    }\n\n   /**\n    * Function to enable/disable navigation command based on cursor positions availability.\n    * @private\n    */\n    function _validateNavigationCmds() {\n        commandJumpBack.setEnabled(_hasNavBackFrames());\n        commandJumpFwd.setEnabled(_hasNavForwardFrames());\n        _setEnableBackNavButton(_hasNavBackFrames());\n        _setEnableForwardNavButton(_hasNavForwardFrames());\n    }\n\n   /**\n    * Function to check existence of a file entry, validity of markers\n    * @private\n    */\n    function _validateFrame(entry) {\n        var deferred = new $.Deferred(),\n            fileEntry = FileSystem.getFileForPath(entry.filePath);\n\n        if (entry.inMem) {\n            var indexInWS = MainViewManager.findInWorkingSet(entry.paneId, entry.filePath);\n            // Remove entry if InMemoryFile is not found in Working set\n            if (indexInWS === -1) {\n                deferred.reject();\n            } else {\n                deferred.resolve();\n            }\n        } else {\n            fileEntry.exists(function (err, exists) {\n                if (!err && exists) {\n                    // Additional check to handle external modification and mutation of the doc text affecting markers\n                    if (fileEntry._hash !== entry._hash) {\n                        deferred.reject();\n                    } else if (!entry._validateMarkers()) {\n                        deferred.reject();\n                    } else {\n                        deferred.resolve();\n                    }\n                } else {\n                    deferred.reject();\n                }\n            });\n        }\n\n        return deferred.promise();\n    }\n\n   /**\n    * Prototype to capture a navigation frame and it's various data/functional attributues\n    */\n    function NavigationFrame(editor, selectionObj) {\n        this.cm = editor._codeMirror;\n        this.filePath = editor.document.file._path;\n        this.inMem = editor.document.file.constructor.name === \"InMemoryFile\";\n        this.paneId = editor._paneId;\n        this._hash = editor.document.file._hash;\n        this.uId = (new Date()).getTime();\n        this.selections = selectionObj.ranges || [];\n        this.bookMarkIds = [];\n        this._createMarkers(selectionObj.ranges);\n    }\n\n   /**\n    * Lifecycle event handler of the editor for which this frame is captured\n    */\n    NavigationFrame.prototype._handleEditorDestroy = function (editor) {\n        this._backupSelectionRanges();\n        this._clearMarkers();\n        this.cm = null;\n        this.bookMarkIds = null;\n    };\n\n    /**\n    * Function to re-create CM TextMarkers for previously backed up ranges\n    * This logic is required to ensure that the captured navigation positions\n    * stay valid and contextual even when the actual document text mutates.\n    * The mutations which are handled here :\n    * -> Addition/Deletion of lines before the captured position\n    * -> Addition/Updation of characters in the captured selection\n    */\n    NavigationFrame.prototype._reinstateMarkers = function (editor) {\n        this.cm = editor._codeMirror;\n        this.paneId = editor._paneId;\n        this._createMarkers(this.selections);\n    };\n\n\n    /**\n    * Function to validate an existing frame against a file '_hash' to detect\n    * external change so that the frame can be discarded\n    */\n    NavigationFrame.prototype._validateFileHash = function (file) {\n        return this.filePath === file._path ? this._hash === file._hash : true;\n    };\n\n   /**\n    * Function to create CM TextMarkers for the navigated positions/selections.\n    * This logic is required to ensure that the captured navigation positions\n    * stay valid and contextual even when the actual document text mutates.\n    * The mutations which are handled here :\n    * -> Addition/Deletion of lines before the captured position\n    * -> Addition/Updation of characters in the captured selection\n    */\n    NavigationFrame.prototype._createMarkers = function (ranges) {\n        var range,\n            rangeStart,\n            rangeEnd,\n            index,\n            bookMark;\n\n        this.bookMarkIds = [];\n        for (index in ranges) {\n            range = ranges[index];\n            rangeStart = range.anchor || range.start;\n            rangeEnd = range.head || range.end;\n            // 'markText' has to used for a non-zero length position, if current selection is\n            // of zero length use bookmark instead.\n            if (rangeStart.line === rangeEnd.line && rangeStart.ch === rangeEnd.ch) {\n                bookMark = this.cm.setBookmark(rangeStart, rangeEnd);\n                this.bookMarkIds.push(bookMark.id);\n            } else {\n                this.cm.markText(rangeStart, rangeEnd, {className: (this.uId)});\n            }\n        }\n    };\n\n   /**\n    * Function to actually convert the CM markers to CM positions which can be used to\n    * set selections or cursor positions in Editor.\n    */\n    NavigationFrame.prototype._backupSelectionRanges = function () {\n        if (!this.cm) {\n            return;\n        }\n\n        var marker,\n            selection,\n            index;\n\n        // Reset selections first.\n        this.selections = [];\n        var self = this;\n\n        // Collate only the markers we used to mark selections/cursors\n        var markers = this.cm.getAllMarks().filter(function (entry) {\n            if (entry.className === self.uId || self.bookMarkIds.indexOf(entry.id) !== -1) {\n                return entry;\n            }\n        });\n\n        // Iterate over CM textmarkers and collate the updated(if?) positions\n        for (index in markers) {\n            marker = markers[index];\n            selection = marker.find();\n            if (marker.type === \"bookmark\") {\n                this.selections.push({start: selection, end: selection});\n            } else {\n                this.selections.push({start: selection.from, end: selection.to});\n            }\n        }\n    };\n\n   /**\n    * Function to clean up the markers in cm\n    */\n    NavigationFrame.prototype._clearMarkers = function () {\n        if (!this.cm) {\n            return;\n        }\n        var self = this;\n\n        // clear only the markers we used to mark selections/cursors\n        this.cm.getAllMarks().filter(function (entry) {\n            if (entry.className === self.uId || self.bookMarkIds.indexOf(entry.id) !== -1) {\n                entry.clear();\n            }\n        });\n    };\n\n    /**\n    * Function to check if we have valid markers in cm for this frame\n    */\n    NavigationFrame.prototype._validateMarkers = function () {\n        this._backupSelectionRanges();\n        return this.selections.length;\n    };\n\n   /**\n    * Function to actually navigate to the position(file,selections) captured in this frame\n    */\n    NavigationFrame.prototype.goTo = function () {\n        var self = this;\n        this._backupSelectionRanges();\n        jumpInProgress = true;\n\n        // To ensure we don't reopen the same doc in the last known pane\n        // rather bring it to the same pane where user has opened it\n        var thisDoc = DocumentManager.getOpenDocumentForPath(this.filePath);\n        if (thisDoc && thisDoc._masterEditor) {\n            this.paneId = thisDoc._masterEditor._paneId;\n        }\n\n        CommandManager.execute(Commands.FILE_OPEN, {fullPath: this.filePath, paneId: this.paneId}).done(function () {\n            EditorManager.getCurrentFullEditor().setSelections(self.selections, true);\n            _validateNavigationCmds();\n        }).always(function () {\n            jumpInProgress = false;\n        });\n    };\n\n\n   /**\n    * Function to capture a non-zero set of selections as a navigation frame.\n    * The assumptions behind capturing a frame as a navigation frame are :\n    *\n    * -> If it's set by user explicitly (using mouse click or jump to definition)\n    * -> By clicking on search results\n    * -> Change of cursor by keyboard navigation keys or actual edits are not captured.\n    *\n    * @private\n    */\n    function _recordJumpDef(event, selectionObj, force) {\n        // Don't capture frames if we are navigating or document text is being refreshed(fileSync in progress)\n        if (jumpInProgress || (event.target && event.target.document._refreshInProgress)) {\n            return;\n        }\n        // Reset forward navigation stack if we are capturing a new event\n        jumpForwardStack = [];\n       _validateNavigationCmds();\n\n        // Ensure cursor activity has not happened because of arrow keys or edit\n        if (selectionObj.origin !== \"+move\" && (!window.event || window.event.type !== \"input\")) {\n            let _recordCurrentPos = function () {\n                // Check if we have reached MAX_NAV_FRAMES_COUNT\n                // If yes, control overflow\n                if (jumpBackwardStack.length === MAX_NAV_FRAMES_COUNT) {\n                    var navFrame = jumpBackwardStack.shift();\n                    navFrame._clearMarkers();\n                }\n\n                currentEditPos = new NavigationFrame(event.target, selectionObj);\n                let lastBack = jumpBackwardStack.pop();\n                if(lastBack && lastBack!== currentEditPos){\n                    // make sure that we don't push in duplicates\n                    jumpBackwardStack.push(lastBack);\n                }\n                jumpBackwardStack.push(currentEditPos);\n                _validateNavigationCmds();\n                activePosNotSynced = false;\n            };\n            if(force || (event && event.type === 'mousedown') || (event && event.type === \"beforeSelectionChange\")){\n                // We should record nav history immediately is the user changes currently active doc by clicking files\n                _recordCurrentPos();\n            }\n        } else {\n            activePosNotSynced = true;\n        }\n    }\n\n    function _isRangerOverlap(prevStart, prevEnd, curStart, curEnd) {\n        if(prevStart>prevEnd){\n            let temp = prevStart;\n            prevStart = prevEnd;\n            prevEnd = temp;\n        }\n        if(curStart>curEnd){\n            let temp = curStart;\n            curStart = curEnd;\n            curEnd = temp;\n        }\n        return prevStart <= curEnd && curStart <= prevEnd;\n    }\n\n    function _isSimilarSelection(prev, current) {\n        if(_.isEqual(prev, current)){\n            return true;\n        }\n        if(prev.length === current.length && current.length === 1){\n            let startPrev = prev[0].anchor || prev[0].start,\n                endPrev = prev[0].head || prev[0].end,\n                startCur = current[0].anchor || current[0].start,\n                endCur = current[0].head || current[0].end;\n            let psc= startPrev.ch, psl= startPrev.line,\n                pec= endPrev.ch, pel= endPrev.line,\n                csc= startCur.ch, csl= startCur.line,\n                cec= endCur.ch, cel= endCur.line;\n            if(_isRangerOverlap(psl, pel, csl, cel)\n                && _isRangerOverlap(psc, pec, csc, cec)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _isSimilarBookmarks(prev, current) {\n        if(current.length === 0 && prev.length >= 1){\n            // on the same file, if there is no present book mark, then its as good as no book mark\n            return true;\n        }\n        return prev.length === current.length;\n    }\n\n   /**\n    * Command handler to navigate backward\n    */\n    function _navigateBack(skipCurrentFile) {\n        let navFrame = jumpBackwardStack.pop();\n        currentEditPos = new NavigationFrame(EditorManager.getCurrentFullEditor(),\n            {ranges: EditorManager.getCurrentFullEditor()._codeMirror.listSelections()});\n\n        // Check if the poped frame is the current active frame or doesn't have any valid marker information\n        // if true, jump again\n        while (navFrame && navFrame === currentEditPos\n        ||(navFrame && navFrame.filePath === currentEditPos.filePath\n            && _isSimilarSelection(navFrame.selections, currentEditPos.selections)\n            && _isSimilarBookmarks(navFrame.bookMarkIds, currentEditPos.bookMarkIds))\n        ||(skipCurrentFile && navFrame && navFrame.filePath === currentEditPos.filePath)) {\n            navFrame = jumpBackwardStack.pop();\n        }\n\n        if (navFrame) {\n            // We will check for the file existence now, if it doesn't exist we will jump back again\n            // but discard the popped frame as invalid.\n            _validateFrame(navFrame).done(function () {\n                jumpForwardStack.push(currentEditPos);\n                navFrame.goTo();\n                currentEditPos = navFrame;\n            }).fail(function () {\n                CommandManager.execute(NAVIGATION_JUMP_BACK);\n            }).always(function () {\n                _validateNavigationCmds();\n            });\n        } else {\n            jumpBackwardStack.push(currentEditPos);\n        }\n    }\n\n   /**\n    * Command handler to navigate forward\n    */\n    function _navigateForward(skipCurrentFile) {\n        let navFrame = jumpForwardStack.pop();\n        currentEditPos = new NavigationFrame(EditorManager.getCurrentFullEditor(),\n           {ranges: EditorManager.getCurrentFullEditor()._codeMirror.listSelections()});\n\n        if (!navFrame) {\n            return;\n        }\n\n        // Check if the poped frame is the current active frame or doesn't have any valid marker information\n        // if true, jump again\n        while (navFrame === currentEditPos\n        ||(navFrame && navFrame.filePath === currentEditPos.filePath\n            && _isSimilarSelection(navFrame.selections ,currentEditPos.selections)\n            && _isSimilarBookmarks(navFrame.bookMarkIds, currentEditPos.bookMarkIds))\n        ||(skipCurrentFile && navFrame && navFrame.filePath === currentEditPos.filePath)) {\n            navFrame = jumpForwardStack.pop();\n        }\n\n        if(navFrame){\n            // We will check for the file existence now, if it doesn't exist we will jump back again\n            // but discard the popped frame as invalid.\n            _validateFrame(navFrame).done(function () {\n                jumpBackwardStack.push(currentEditPos);\n                navFrame.goTo();\n                currentEditPos = navFrame;\n            }).fail(function () {\n                _validateNavigationCmds();\n                CommandManager.execute(NAVIGATION_JUMP_FWD);\n            }).always(function () {\n                _validateNavigationCmds();\n            });\n        }\n    }\n\n   /**\n    * Function to initialize navigation menu items.\n    * @private\n    */\n    function _initNavigationMenuItems() {\n        var menu = Menus.getMenu(Menus.AppMenuBar.NAVIGATE_MENU);\n        menu.addMenuItem(NAVIGATION_JUMP_BACK, \"\", Menus.AFTER, Commands.NAVIGATE_PREV_DOC);\n        menu.addMenuItem(NAVIGATION_JUMP_FWD, \"\", Menus.AFTER, NAVIGATION_JUMP_BACK);\n    }\n\n   /**\n    * Function to initialize navigation commands and it's keyboard shortcuts.\n    * @private\n    */\n    function _initNavigationCommands() {\n        CommandManager.register(Strings.CMD_NAVIGATE_BACKWARD, NAVIGATION_JUMP_BACK, _navigateBack);\n        CommandManager.register(Strings.CMD_NAVIGATE_FORWARD, NAVIGATION_JUMP_FWD, _navigateForward);\n        commandJumpBack = CommandManager.get(NAVIGATION_JUMP_BACK);\n        commandJumpFwd = CommandManager.get(NAVIGATION_JUMP_FWD);\n        commandJumpBack.setEnabled(false);\n        commandJumpFwd.setEnabled(false);\n        KeyBindingManager.addBinding(NAVIGATION_JUMP_BACK, KeyboardPrefs[NAVIGATION_JUMP_BACK]);\n        KeyBindingManager.addBinding(NAVIGATION_JUMP_FWD, KeyboardPrefs[NAVIGATION_JUMP_FWD]);\n        _initNavigationMenuItems();\n    }\n\n    /**\n    * Create snapshot of last known live markers.\n    * @private\n    */\n    function _backupLiveMarkers(frames, editor) {\n        var index, frame;\n        for (index in frames) {\n            frame = frames[index];\n            if (frame.cm === editor._codeMirror) {\n                frame._handleEditorDestroy();\n            }\n        }\n    }\n\n    /**\n    * Handle Editor destruction to create backup of live marker positions\n    * @private\n    */\n    function _handleEditorCleanup(event, editor) {\n        _backupLiveMarkers(jumpBackwardStack, editor);\n        _backupLiveMarkers(jumpForwardStack, editor);\n    }\n\n    /**\n    * Removes all frames from backward navigation stack for the given file only if the file is changed on disk.\n    * @private\n    */\n    function _removeBackwardFramesForFile(file) {\n        jumpBackwardStack = jumpBackwardStack.filter(function (frame) {\n            return frame._validateFileHash(file);\n        });\n    }\n\n    /**\n    * Removes all frames from forward navigation stack for the given file only if the file is changed on disk.\n    * @private\n    */\n    function _removeForwardFramesForFile(file) {\n        jumpForwardStack = jumpForwardStack.filter(function (frame) {\n            return frame._validateFileHash(file);\n        });\n    }\n\n    /**\n    * Handles explicit content reset for a document caused by external changes\n    * @private\n    */\n    function _removeFileFromStack(file) {\n        if (file) {\n            _removeBackwardFramesForFile(file);\n            _removeForwardFramesForFile(file);\n            _validateNavigationCmds();\n        }\n    }\n\n    function _clearStacks() {\n        jumpBackwardStack = [];\n        jumpForwardStack = [];\n    }\n\n    /**\n     * Required to make offline markers alive again to track document mutation\n     * @private\n     */\n    function _reinstateMarkers(editor, frames) {\n        var index, frame;\n        for (index in frames) {\n            frame = frames[index];\n            if (!frame.cm && frame.filePath === editor.document.file._path) {\n                frame._reinstateMarkers(editor);\n            }\n        }\n    }\n\n    /**\n     * Function to request a navigation frame creation explicitly. Resets forward stack\n     * @private\n     */\n    function _captureBackFrame(editor) {\n        _recordJumpDef({target: editor},\n            {ranges: editor._codeMirror.listSelections()},\n            true);\n    }\n\n    /**\n     * Handle Active Editor change to update navigation information\n     * @private\n     */\n    function _handleActiveEditorChange(event, current, previous) {\n        if (previous && previous._paneId) { // Handle only full editors\n            previous.off(\"beforeSelectionChange\", _recordJumpDef);\n            _captureBackFrame(previous);\n            _validateNavigationCmds();\n        }\n\n        if (current && current._paneId) { // Handle only full editors\n            activePosNotSynced = true;\n            current.off(\"beforeSelectionChange\", _recordJumpDef);\n            current.on(\"beforeSelectionChange\", _recordJumpDef);\n            current.off(\"beforeDestroy\", _handleEditorCleanup);\n            current.on(\"beforeDestroy\", _handleEditorCleanup);\n        }\n    }\n\n    function _initHandlers() {\n        EditorManager.on(\"activeEditorChange\", _handleActiveEditorChange);\n        ProjectManager.on(\"projectOpen\", _clearStacks);\n        EditorManager.on(\"_fullEditorCreatedForDocument\", function (event, document, editor) {\n            _reinstateMarkers(editor, jumpBackwardStack);\n            _reinstateMarkers(editor, jumpForwardStack);\n        });\n        FileSystem.on(\"change\", function (event, entry) {\n            if (entry) {\n                _removeFileFromStack(entry);\n            }\n        });\n    }\n\n    function _navigateBackClicked(evt) {\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"fileNavBar\", \"back\");\n        if(_hasNavBackFrames()){\n            _navigateBack(evt.shiftKey || (evt.type === \"contextmenu\"));\n        }\n        _validateNavigationCmds();\n        MainViewManager.focusActivePane();\n    }\n\n    function _navigateForwardClicked(evt) {\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"fileNavBar\", \"forward\");\n        if(_hasNavForwardFrames()){\n            _navigateForward(evt.shiftKey || (evt.type === \"contextmenu\"));\n        }\n        _validateNavigationCmds();\n        MainViewManager.focusActivePane();\n    }\n\n    function _showInFileTreeClicked() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"fileNavBar\", \"showInFileTree\");\n        CommandManager.execute(Commands.NAVIGATE_SHOW_IN_FILE_TREE);\n    }\n\n    function _findInFiles() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"fileNavBar\", \"search\");\n        CommandManager.execute(Commands.CMD_FIND_IN_FILES);\n    }\n\n    function _newProjectClicked() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"fileNavBar\", \"newProject\");\n        CommandManager.execute(Commands.FILE_NEW_PROJECT);\n    }\n\n    function _setupNavigationButtons() {\n        let $mainNavBarRight = $(\"#mainNavBarRight\");\n        let $mainNavBarLeft = $(\"#mainNavBarLeft\");\n        $mainNavBarRight.prepend(\"<div id=\\\"navBackButton\\\" class=\\\"nav-back-btn btn-alt-quiet\\\"></div>\\n\" +\n            \"            <div id=\\\"navForwardButton\\\" class=\\\"nav-forward-btn btn-alt-quiet\\\"></div>\\n\" +\n            \"            <div id=\\\"showInfileTree\\\" class=\\\"show-in-file-tree-btn btn-alt-quiet\\\"></div>\"+\n            \"            <div id=\\\"searchNav\\\" class=\\\"search-nav-btn btn-alt-quiet\\\"></div>\");\n        let $showInTree = $mainNavBarRight.find(\"#showInfileTree\");\n        $navback = $mainNavBarRight.find(\"#navBackButton\");\n        $navForward = $mainNavBarRight.find(\"#navForwardButton\");\n        $searchNav = $mainNavBarRight.find(\"#searchNav\");\n\n        $mainNavBarLeft.prepend(\"<div id=\\\"newProject\\\" class=\\\"new-project-btn btn-alt-quiet\\\"></div>\");\n        $newProject = $mainNavBarLeft.find(\"#newProject\");\n\n        $navback.attr(\"title\", Strings.CMD_NAVIGATE_BACKWARD);\n        $navForward.attr(\"title\", Strings.CMD_NAVIGATE_FORWARD);\n        $showInTree.attr(\"title\", Strings.CMD_SHOW_IN_TREE);\n        $searchNav.attr(\"title\", Strings.CMD_FIND_IN_FILES);\n        $newProject.attr(\"title\", Strings.CMD_PROJECT_NEW);\n\n        $navback.on(\"click\", _navigateBackClicked);\n        $navForward.on(\"click\", _navigateForwardClicked);\n        $(\"#navBackButton\").contextmenu(_navigateBackClicked);\n        $(\"#navForwardButton\").contextmenu(_navigateForwardClicked);\n        $showInTree.on(\"click\", _showInFileTreeClicked);\n        $searchNav.on(\"click\", _findInFiles);\n        $newProject.on(\"click\", _newProjectClicked);\n    }\n\n\n    function init() {\n        _initNavigationCommands();\n        _initHandlers();\n        _setupNavigationButtons();\n    }\n\n    exports.init = init;\n});\n"],"file":"NavigationProvider.js"}