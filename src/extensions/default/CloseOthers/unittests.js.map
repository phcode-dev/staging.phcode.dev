{"version":3,"sources":["extensions/default/CloseOthers/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","CommandManager","Commands","Dialogs","EditorManager","DocumentManager","MainViewManager","FileSystem","describe","testPath","getTestPath","testWindow","$","docSelectIndex","cmdToRun","async","createUntitled","count","doCreateUntitled","content","promise","execute","FILE_NEW_UNTITLED","done","untitledDoc","replaceRange","line","ch","awaitsForDone","i","String","expectAndDelete","fullPath","resolveNativeFileSystemPath","deletePath","getFilename","runCloseOthers","ws","getWorkingSet","ACTIVE_PANE","length","getDocumentForPath","doc","_edit","expect","getCurrentlyViewedPath","toEqual","beforeEach","createTestWindowAndRun","test","loadProjectInTestWindow","fileI","spyOn","and","callFake","dialogTitle","initialPath","proposedNewName","callback","undefined","FILE_SAVE_ALL","afterEach","closeTestWindow","it"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,gBAAkBC,SAASC,UAAU,wBACrCC,eACAC,SACAC,QACAC,cACAC,gBACAC,gBACAC,WAEJC,SAAS,kCAAmC,WACxC,IAAIC,SAAWX,gBAAgBY,YAAY,uCACvCC,WACAC,EACAC,eACAC,SACAf,SAEJgB,eAAeC,eAAeC,OAC1BF,eAAeG,iBAAiBC,SAC5B,IAAIC,QAAUnB,eAAeoB,QAAQnB,SAASoB,mBAC9CF,QAAQG,KAAK,SAAUC,aACnBA,YAAYC,aAAaN,QAAS,CAACO,KAAM,EAAGC,GAAI,YAE9CC,cAAcR,QAAS,qBAGjC,IAAIS,EACJ,IAAKA,EAAI,EAAGA,EAAIZ,MAAOY,UACbX,iBAAiBY,OAAOD,IAKtCd,eAAegB,gBAAgBC,UAC3B,IAAIZ,QAAUtB,gBAAgBmC,4BAA4BD,gBACpDJ,cAAcR,QAAS,uBAAyBY,UACtD,IAAIZ,QAAUtB,gBAAgBoC,WAAWF,gBACnCJ,cAAcR,QAAS,mBAAqBY,SAAU,KAGhE,SAASG,YAAYN,GACjB,OAAOpB,SAAW,mBAAqBoB,EAAI,MA2C/Cd,eAAeqB,iBACX,IAAIC,GAAK/B,gBAAgBgC,cAAchC,gBAAgBiC,aACnDnB,QAEAiB,GAAGG,OAAS3B,iBACZR,gBAAgBoC,mBAAmBJ,GAAGxB,gBAAgBmB,UAAUT,KAAK,SAAUmB,KAC3EpC,gBAAgBqC,MAAMrC,gBAAgBiC,YAAaG,OAGvDtB,QAAUnB,eAAeoB,QAAQP,gBAC3Bc,cAAcR,QAASN,UAC7B8B,OAAOtC,gBAAgBuC,uBAAuBvC,gBAAgBiC,cACzDO,QAAQT,GAAGxB,gBAAgBmB,SACxB,mGArDhBe,WAAWhC,iBAEPJ,iBAAmBb,gBAAgBkD,yBACnCpC,EAAID,WAAWC,EACfb,SAAYY,WAAWZ,SACvBM,gBAAkBM,WAAWZ,SAASkD,KAAK5C,gBAC3CC,gBAAkBK,WAAWZ,SAASkD,KAAK3C,gBAC3CL,eAAkBU,WAAWZ,SAASkD,KAAKhD,eAC3CG,cAAkBO,WAAWZ,SAASkD,KAAK7C,cAC3CD,QAAYQ,WAAWZ,SAASkD,KAAK9C,QACrCD,SAAkBS,WAAWZ,SAASkD,KAAK/C,SAC3CK,WAAkBI,WAAWZ,SAASkD,KAAK1C,iBAErCT,gBAAgBoD,wBAAwBzC,gBAExCO,eAAe,GAErB,IAAImC,MAAQ,EACZC,MAAM7C,WAAY,kBAAkB8C,IAAIC,SAAS,SAAUC,YAAaC,YAAaC,gBAAiBC,UAClGA,cAASC,EAAWxB,YAAYgB,QAChCA,UAGJ,IAAI/B,QAAUnB,eAAeoB,QAAQnB,SAAS0D,qBACxChC,cAAcR,QAAS,gBAAiB,OAGlDyC,UAAU9C,iBAEN,IAAI,IAAIc,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,SAChBE,gBAAgBI,YAAYN,IAEtClB,WAAgB,KAChBC,EAAgB,KAChBb,SAAgB,KAChBK,cAAgB,WACVN,gBAAgBgE,oBAqB1BC,GAAG,eAAgBhD,iBACfF,eAAiB,EACjBC,SAAiB,0BAEXsB,iBAENQ,OAAOtC,gBAAgBgC,cAAchC,gBAAgBiC,aAAaC,QAAQM,QAAQ,KAGtFiB,GAAG,qBAAsBhD,iBACrBF,eAAiB,EACjBC,SAAiB,yBAEXsB,iBAENQ,OAAOtC,gBAAgBgC,cAAchC,gBAAgBiC,aAAaC,QAAQM,QAAQ,KAGtFiB,GAAG,qBAAsBhD,iBACrBF,eAAiB,EACjBC,SAAiB,yBAEXsB,iBAENQ,OAAOtC,gBAAgBgC,cAAchC,gBAAgBiC,aAAaC,QAAQM,QAAQ","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeEach, afterEach, awaitsForDone, spyOn */\n\ndefine(function (require, exports, module) {\n\n\n    var SpecRunnerUtils = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        CommandManager,\n        Commands,\n        Dialogs,\n        EditorManager,\n        DocumentManager,\n        MainViewManager,\n        FileSystem;\n\n    describe(\"extension:CloseOthers extension\", function () {\n        var testPath = SpecRunnerUtils.getTestPath(\"/spec/Extension-test-project-files/\"),\n            testWindow,\n            $,\n            docSelectIndex,\n            cmdToRun,\n            brackets;\n\n        async function createUntitled(count) {\n            async function doCreateUntitled(content) {\n                var promise = CommandManager.execute(Commands.FILE_NEW_UNTITLED);\n                promise.done(function (untitledDoc) {\n                    untitledDoc.replaceRange(content, {line: 0, ch: 0});\n                });\n                await awaitsForDone(promise, \"FILE_NEW_UNTITLED\");\n            }\n\n            var i;\n            for (i = 0; i < count; i++) {\n                await doCreateUntitled(String(i));\n            }\n        }\n\n        /** Expect a file to exist (failing test if not) and then delete it */\n        async function expectAndDelete(fullPath) {\n            var promise = SpecRunnerUtils.resolveNativeFileSystemPath(fullPath);\n            await awaitsForDone(promise, \"Verify file exists: \" + fullPath);\n            var promise = SpecRunnerUtils.deletePath(fullPath);\n            await awaitsForDone(promise, \"Remove testfile \" + fullPath, 5000);\n        }\n\n        function getFilename(i) {\n            return testPath + \"test_closeothers\" + i + \".js\";\n        }\n\n        beforeEach(async function () {\n\n            testWindow = await SpecRunnerUtils.createTestWindowAndRun();\n            $ = testWindow.$;\n            brackets\t\t= testWindow.brackets;\n            DocumentManager = testWindow.brackets.test.DocumentManager;\n            MainViewManager = testWindow.brackets.test.MainViewManager;\n            CommandManager  = testWindow.brackets.test.CommandManager;\n            EditorManager   = testWindow.brackets.test.EditorManager;\n            Dialogs\t\t\t= testWindow.brackets.test.Dialogs;\n            Commands        = testWindow.brackets.test.Commands;\n            FileSystem      = testWindow.brackets.test.FileSystem;\n\n            await SpecRunnerUtils.loadProjectInTestWindow(testPath);\n\n            await createUntitled(5);\n\n            var fileI = 0;\n            spyOn(FileSystem, 'showSaveDialog').and.callFake(function (dialogTitle, initialPath, proposedNewName, callback) {\n                callback(undefined, getFilename(fileI));\n                fileI++;\n            });\n\n            var promise = CommandManager.execute(Commands.FILE_SAVE_ALL);\n            await awaitsForDone(promise, \"FILE_SAVE_ALL\", 5000);\n        });\n\n        afterEach(async function () {\n            // Verify files exist & clean up\n            for(let i of [0, 1, 2, 3, 4]){\n                await expectAndDelete(getFilename(i));\n            }\n            testWindow    = null;\n            $             = null;\n            brackets      = null;\n            EditorManager = null;\n            await SpecRunnerUtils.closeTestWindow();\n        });\n\n\n        async function runCloseOthers() {\n            var ws = MainViewManager.getWorkingSet(MainViewManager.ACTIVE_PANE),\n                promise;\n\n            if (ws.length > docSelectIndex) {\n                DocumentManager.getDocumentForPath(ws[docSelectIndex].fullPath).done(function (doc) {\n                    MainViewManager._edit(MainViewManager.ACTIVE_PANE, doc);\n                });\n\n                promise = CommandManager.execute(cmdToRun);\n                await awaitsForDone(promise, cmdToRun);\n                expect(MainViewManager.getCurrentlyViewedPath(MainViewManager.ACTIVE_PANE))\n                    .toEqual(ws[docSelectIndex].fullPath,\n                        \"Path of document in editor after close others command should be the document that was selected\");\n            }\n        }\n\n        it(\"Close others\", async function () {\n            docSelectIndex = 2;\n            cmdToRun       = \"file.close_others\";\n\n            await runCloseOthers();\n\n            expect(MainViewManager.getWorkingSet(MainViewManager.ACTIVE_PANE).length).toEqual(1);\n        });\n\n        it(\"Close others above\", async function () {\n            docSelectIndex = 2;\n            cmdToRun       = \"file.close_above\";\n\n            await runCloseOthers();\n\n            expect(MainViewManager.getWorkingSet(MainViewManager.ACTIVE_PANE).length).toEqual(3);\n        });\n\n        it(\"Close others below\", async function () {\n            docSelectIndex = 1;\n            cmdToRun       = \"file.close_below\";\n\n            await runCloseOthers();\n\n            expect(MainViewManager.getWorkingSet(MainViewManager.ACTIVE_PANE).length).toEqual(2);\n        });\n    });\n});\n"],"file":"unittests.js"}