{"version":3,"sources":["extensions/default/DebugCommands/extensionDevelopment.js"],"names":["define","require","exports","module","ProjectManager","brackets","getModule","Commands","CommandManager","Strings","StringUtils","DocumentManager","DefaultDialogs","Dialogs","UrlParams","FileSystem","_showError","message","title","ERROR_LOADING_EXTENSION","showModalDialog","DIALOG_ID_ERROR","_validatePackageJson","docText","packageJson","JSON","parse","requiredFields","missingFields","requiredField","push","engines","length","format","ERROR_INVALID_EXTENSION_PACKAGE_FIELDS","e","console","log","ERROR_INVALID_EXTENSION_PACKAGE","loadCurrentExtension","projectRoot","getProjectRoot","fullPath","file","getFileForPath","getDocumentText","done","execute","APP_RELOAD","fail","err","ERROR_NO_EXTENSION_PACKAGE","unloadCurrentExtension","isProjectLoadedAsExtension","params","get"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,eAAyBC,SAASC,UAAU,0BAC9CC,SAA2BF,SAASC,UAAU,oBAC9CE,eAA2BH,SAASC,UAAU,0BAC9CG,QAA2BJ,SAASC,UAAU,WAC9CI,YAA2BL,SAASC,UAAU,qBAC9CK,gBAA2BN,SAASC,UAAU,4BAC9CM,eAA2BP,SAASC,UAAU,0BAC9CO,QAA2BR,SAASC,UAAU,mBAC9CQ,UAA2BT,SAASC,UAAU,mBAAmBQ,UACjEC,WAA2BV,SAASC,UAAU,yBAElD,SAASU,WAAWC,QAASC,MAAQT,QAAQU,yBACzCN,QAAQO,gBACJR,eAAeS,gBACfH,MAAOD,SAIf,SAASK,qBAAqBC,SAC1B,IACI,IAAIC,YAAcC,KAAKC,MAAMH,SACzBI,eAAiB,CAAC,OAAQ,QAAS,cAAe,WAAY,UAAW,SAAU,UACnF,WACAC,cAAgB,GACpB,IAAI,IAAIC,iBAAiBF,eACjBH,YAAYK,gBACZD,cAAcE,KAAKD,eAM3B,OAHGL,YAAYO,UAAYP,YAAYO,QAAQ1B,UAC3CuB,cAAcE,KAAK,oCAEpBF,cAAcI,SACbhB,WAAWN,YAAYuB,OAAOxB,QAAQyB,uCAAwCN,iBACvE,GAGb,MAAOO,GAGL,OAFAC,QAAQC,IAAI,wBAAyB5B,QAAQ6B,iCAC7CtB,WAAWP,QAAQ6B,kCACZ,GAIf,SAASC,uBACL,MAAMC,YAAcpC,eAAeqC,iBAAiBC,SAC9CC,KAAO5B,WAAW6B,eAAeJ,YAAc,gBACrD7B,gBAAgBkC,gBAAgBF,MAAMG,KAAK,SAAUvB,SACjDa,QAAQC,IAAId,SACRD,qBAAqBC,UAGzBf,eAAeuC,QAAQxC,SAASyC,YAAY,EAAOR,eACpDS,KAAMC,MACLd,QAAQC,IAAI,gCAAiCM,KAAKD,SAAUQ,KAC5DrC,QAAQO,gBACJR,eAAeS,gBACfZ,QAAQU,wBACRV,QAAQ0C,8BAKpB,SAASC,yBACL5C,eAAeuC,QAAQxC,SAASyC,YAAY,EAAO,IAGvD,SAASK,6BACL,MAAMC,OAAU,IAAIxC,UAIpB,OADAwC,OAAO5B,UACE4B,OAAOC,IAAI,wBAGxBrD,QAAQqC,qBAAuBA,qBAC/BrC,QAAQkD,uBAAyBA,uBACjClD,QAAQmD,2BAA6BA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals path, logger*/\n\ndefine(function (require, exports, module) {\n    const ProjectManager         = brackets.getModule(\"project/ProjectManager\"),\n        Commands                 = brackets.getModule(\"command/Commands\"),\n        CommandManager           = brackets.getModule(\"command/CommandManager\"),\n        Strings                  = brackets.getModule(\"strings\"),\n        StringUtils              = brackets.getModule(\"utils/StringUtils\"),\n        DocumentManager          = brackets.getModule(\"document/DocumentManager\"),\n        DefaultDialogs           = brackets.getModule(\"widgets/DefaultDialogs\"),\n        Dialogs                  = brackets.getModule(\"widgets/Dialogs\"),\n        UrlParams                = brackets.getModule(\"utils/UrlParams\").UrlParams,\n        FileSystem               = brackets.getModule(\"filesystem/FileSystem\");\n\n    function _showError(message, title = Strings.ERROR_LOADING_EXTENSION) {\n        Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_ERROR,\n            title, message\n        );\n    }\n\n    function _validatePackageJson(docText) {\n        try {\n            let packageJson = JSON.parse(docText);\n            let requiredFields = [\"name\", \"title\", \"description\", \"homepage\", \"version\", \"author\", \"license\",\n                \"engines\"];\n            let missingFields = [];\n            for(let requiredField of requiredFields){\n                if(!packageJson[requiredField]){\n                    missingFields.push(requiredField);\n                }\n            }\n            if(packageJson.engines && !packageJson.engines.brackets){\n                missingFields.push(`engines:{\"brackets\": \">=2.0.0\"}`);\n            }\n            if(missingFields.length){\n                _showError(StringUtils.format(Strings.ERROR_INVALID_EXTENSION_PACKAGE_FIELDS, missingFields));\n                return false;\n            }\n            return true;\n        } catch (e) {\n            console.log(\"Cannot load extension\", Strings.ERROR_INVALID_EXTENSION_PACKAGE);\n            _showError(Strings.ERROR_INVALID_EXTENSION_PACKAGE);\n            return false;\n        }\n    }\n\n    function loadCurrentExtension() {\n        const projectRoot = ProjectManager.getProjectRoot().fullPath;\n        const file = FileSystem.getFileForPath(projectRoot + \"package.json\");\n        DocumentManager.getDocumentText(file).done(function (docText) {\n            console.log(docText);\n            if(!_validatePackageJson(docText)){\n                return;\n            }\n            CommandManager.execute(Commands.APP_RELOAD, false, projectRoot);\n        }).fail((err)=>{\n            console.log(\"No extension package.json in \", file.fullPath, err);\n            Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_ERROR,\n                Strings.ERROR_LOADING_EXTENSION,\n                Strings.ERROR_NO_EXTENSION_PACKAGE\n            );\n        });\n    }\n\n    function unloadCurrentExtension() {\n        CommandManager.execute(Commands.APP_RELOAD, false, []);\n    }\n\n    function isProjectLoadedAsExtension() {\n        const params  = new UrlParams();\n\n        // Make sure the Reload Without User Extensions parameter is removed\n        params.parse();\n        return !!params.get(\"loadDevExtensionPath\");\n    }\n\n    exports.loadCurrentExtension = loadCurrentExtension;\n    exports.unloadCurrentExtension = unloadCurrentExtension;\n    exports.isProjectLoadedAsExtension = isProjectLoadedAsExtension;\n});\n"],"file":"extensionDevelopment.js"}