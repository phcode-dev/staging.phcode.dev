{"version":3,"sources":["extensions/default/DebugCommands/main.js"],"names":["define","require","exports","module","_","brackets","getModule","Commands","CommandManager","Menus","FileSystem","FileUtils","PerfUtils","StringUtils","Dialogs","DefaultDialogs","Strings","PreferencesManager","LocalizationUtils","MainViewManager","WorkingSetView","ExtensionManager","Mustache","Locales","ProjectManager","ExtensionLoader","NodeConnector","extensionDevelopment","PerfDialogTemplate","LanguageDialogTemplate","KeyboardPrefs","JSON","parse","DIAGNOSTICS_SUBMENU","DEFAULT_PREFERENCES_FILENAME","SUPPORTED_PREFERENCE_TYPES","recomputeDefaultPrefs","defaultPreferencesFullPath","path","normalize","app","getApplicationSupportDirectory","DEBUG_REFRESH_WINDOW","DEBUG_SHOW_DEVELOPER_TOOLS","DEBUG_LOAD_CURRENT_EXTENSION","DEBUG_UNLOAD_CURRENT_EXTENSION","DEBUG_RUN_UNIT_TESTS","DEBUG_SHOW_PERF_DATA","DEBUG_RELOAD_WITHOUT_USER_EXTS","DEBUG_SWITCH_LANGUAGE","DEBUG_ENABLE_LOGGING","DEBUG_ENABLE_PHNODE_INSPECTOR","DEBUG_GET_PHNODE_INSPECTOR_URL","DEBUG_LIVE_PREVIEW_LOGGING","DEBUG_OPEN_VFS","DEBUG_OPEN_EXTENSION_FOLDER","DEBUG_OPEN_VIRTUAL_SERVER","DEBUG_OPEN_PREFERENCES_IN_SPLIT_VIEW","LOG_TO_CONSOLE_KEY","logger","loggingOptions","LOCAL_STORAGE_KEYS","LOG_LIVE_PREVIEW_KEY","LOG_LIVE_PREVIEW","prefs","getExtensionPrefs","_runUnitTests","spec","queryString","testBaseURL","window","location","hostname","Phoenix","openURLInPhoenixWindow","windowTitle","preferTabs","width","height","handleReload","execute","APP_RELOAD","handleReloadWithoutUserExts","APP_RELOAD_WITHOUT_EXTS","handleShowPerfData","templateVars","delimitedPerfData","getDelimitedPerfData","perfData","getValue","entry","Array","isArray","i","e","avg","sum","min","Number","MAX_VALUE","max","length","Math","round","String","getData","forEach","value","testName","push","breakableUrl","template","render","showModalDialogUsingTemplate","$","click","this","focus","select","handleSwitchLanguage","supportedLocales","Object","keys","$dialog","$submit","$select","locale","curLocale","isLocaleDefault","getLocale","languages","setLanguage","event","val","prop","supportedLocale","match","language","label","toUpperCase","getLocalizedLabel","sort","lang1","lang2","localeCompare","unshift","LANGUAGE_SYSTEM_DEFAULT","done","id","DIALOG_BTN_OK","setLocale","find","on","_openPrefFilesInSplitView","prefsPath","defaultPrefsPath","deferredPromise","currScheme","getLayoutScheme","file","getFileForPath","defaultPrefsFile","DEFAULT_PREFS_PANE","USER_PREFS_PANE","_openFiles","rows","columns","setLayoutScheme","FILE_OPEN","fullPath","paneId","options","isReadOnly","findInWorkingSet","_moveView","refresh","resolve","fail","reject","get","resultObj","findInAllWorkingSets","FILE_CLOSE","_isSupportedPrefType","prefType","indexOf","_getPrefType","prefItem","finalPrefType","_prefType","type","undefined","toLowerCase","initial","_initialType","_prefVar","_isValidPref","pref","excludeFromHints","_getChildPrefs","finalObj","keysFound","_populateKeys","allKeys","hasOwnProperty","_formatBasicPref","prefName","tabIndentStr","prefDescription","description","prefDefault","prefFormatText","prefItemType","DEFAULT_PREFERENCES_JSON_DEFAULT","format","_formatPref","indentLevel","iLevel","prefItemKeys","entireText","prefItemDesc","hasKeys","tabIndents","numKeys","property","formattedText","slice","_getDefaultPreferencesString","allPrefs","getAllPreferences","headerComment","DEFAULT_PREFERENCES_JSON_HEADER_COMMENT","_loadDefaultPrefs","_executeDefaultOpenPrefsCommand","FILE_OPEN_PREFERENCES","exists","err","doesExist","prefsString","unlink","console","error","writeText","_prefsString","handleOpenPrefsInSplitView","getUserPrefFile","splitViewPrefOn","result","Deferred","promise","_updateLogToConsoleMenuItemChecked","isLogging","setupLogging","setChecked","setEnabled","logLivePreview","isLoggingEnabled","isInspectEnabled","_handleLogging","toggleLoggingKey","_handlePhNodeInspectEnable","setInspectEnabled","_handleGetPhNodeInspectURL","showInfoDialog","CMD_GET_PHNODE_INSPECTOR_URL","getInspectPort","_handleLivePreviewLogging","_openVFS","openProject","_openExtensionsFolder","openPathInFileBrowser","getUserExtensionPath","_openVirtualServer","virtualServingURL","VFS","getVirtualServingURLForPath","Error","_handleShowDeveloperTools","toggleDevtools","definePreference","DESCRIPTION_OPEN_PREFS_IN_SPLIT_VIEW","DESCRIPTION_OPEN_USER_PREFS_IN_SECOND_PANE","loadOrReloadString","isProjectLoadedAsExtension","CMD_RELOAD_CURRENT_EXTENSION","CMD_LOAD_CURRENT_EXTENSION","register","loadCurrentExtension","CMD_UNLOAD_CURRENT_EXTENSION","unloadCurrentExtension","CMD_REFRESH_WINDOW","CMD_RELOAD_WITHOUT_USER_EXTS","CMD_RUN_UNIT_TESTS","CMD_SHOW_PERF_DATA","switchLanguageStr","CMD_SWITCH_LANGUAGE","CMD_ENABLE_LOGGING","CMD_ENABLE_PHNODE_INSPECTOR","CMD_ENABLE_LIVE_PREVIEW_LOGS","CMD_OPEN_VFS","CMD_OPEN_EXTENSIONS_FOLDER","CMD_OPEN_VIRTUAL_SERVER","CMD_OPEN_PREFERENCES","debugMenu","getMenu","AppMenuBar","DEBUG_MENU","addMenuItem","debugMode","refreshWindow","reloadWithoutUserExts","hideWhenCommandDisabled","addMenuDivider","browser","isTauri","CMD_SHOW_DEV_TOOLS","showDeveloperTools","FILE_OPEN_KEYMAP","diagnosticsSubmenu","addSubMenu","CMD_DIAGNOSTIC_TOOLS","helpMenu","HELP_MENU","BEFORE","HELP_ABOUT","fileMenu","FILE_MENU","MenuSection","FILE_SETTINGS","sectionMarker"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals path, logger, Phoenix*/\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    const _ = brackets.getModule(\"thirdparty/lodash\");\n\n    const Commands               = brackets.getModule(\"command/Commands\"),\n        CommandManager         = brackets.getModule(\"command/CommandManager\"),\n        Menus                  = brackets.getModule(\"command/Menus\"),\n        FileSystem             = brackets.getModule(\"filesystem/FileSystem\"),\n        FileUtils              = brackets.getModule(\"file/FileUtils\"),\n        PerfUtils              = brackets.getModule(\"utils/PerfUtils\"),\n        StringUtils            = brackets.getModule(\"utils/StringUtils\"),\n        Dialogs                = brackets.getModule(\"widgets/Dialogs\"),\n        DefaultDialogs         = brackets.getModule(\"widgets/DefaultDialogs\"),\n        Strings                = brackets.getModule(\"strings\"),\n        PreferencesManager     = brackets.getModule(\"preferences/PreferencesManager\"),\n        LocalizationUtils      = brackets.getModule(\"utils/LocalizationUtils\"),\n        MainViewManager        = brackets.getModule(\"view/MainViewManager\"),\n        WorkingSetView         = brackets.getModule(\"project/WorkingSetView\"),\n        ExtensionManager       = brackets.getModule(\"extensibility/ExtensionManager\"),\n        Mustache               = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        Locales                = brackets.getModule(\"nls/strings\"),\n        ProjectManager         = brackets.getModule(\"project/ProjectManager\"),\n        ExtensionLoader        = brackets.getModule(\"utils/ExtensionLoader\"),\n        NodeConnector          = brackets.getModule(\"NodeConnector\"),\n        extensionDevelopment   = require(\"extensionDevelopment\"),\n        PerfDialogTemplate     = require(\"text!htmlContent/perf-dialog.html\"),\n        LanguageDialogTemplate = require(\"text!htmlContent/language-dialog.html\");\n\n    const KeyboardPrefs = JSON.parse(require(\"text!keyboard.json\"));\n\n    const DIAGNOSTICS_SUBMENU = \"debug-diagnostics-sub-menu\";\n\n    // default preferences file name\n    const DEFAULT_PREFERENCES_FILENAME = \"defaultPreferences.json\",\n        SUPPORTED_PREFERENCE_TYPES   = [\"number\", \"boolean\", \"string\", \"array\", \"object\"];\n\n    let recomputeDefaultPrefs        = true,\n        defaultPreferencesFullPath   = path.normalize(brackets.app.getApplicationSupportDirectory() + \"/\" + DEFAULT_PREFERENCES_FILENAME);\n\n     /**\n      * Debug commands IDs\n      * @enum {string}\n      */\n    const DEBUG_REFRESH_WINDOW                = \"debug.refreshWindow\", // string must MATCH string in native code (brackets_extensions)\n        DEBUG_SHOW_DEVELOPER_TOOLS            = \"debug.showDeveloperTools\",\n        DEBUG_LOAD_CURRENT_EXTENSION          = \"debug.loadCurrentExtension\",\n        DEBUG_UNLOAD_CURRENT_EXTENSION        = \"debug.unloadCurrentExtension\",\n        DEBUG_RUN_UNIT_TESTS                  = \"debug.runUnitTests\",\n        DEBUG_SHOW_PERF_DATA                  = \"debug.showPerfData\",\n        DEBUG_RELOAD_WITHOUT_USER_EXTS        = \"debug.reloadWithoutUserExts\",\n        DEBUG_SWITCH_LANGUAGE                 = \"debug.switchLanguage\",\n        DEBUG_ENABLE_LOGGING                  = \"debug.enableLogging\",\n        DEBUG_ENABLE_PHNODE_INSPECTOR         = \"debug.enablePhNodeInspector\",\n        DEBUG_GET_PHNODE_INSPECTOR_URL        = \"debug.getPhNodeInspectorURL\",\n        DEBUG_LIVE_PREVIEW_LOGGING            = \"debug.livePreviewLogging\",\n        DEBUG_OPEN_VFS                        = \"debug.openVFS\",\n        DEBUG_OPEN_EXTENSION_FOLDER           = \"debug.openExtensionFolders\",\n        DEBUG_OPEN_VIRTUAL_SERVER             = \"debug.openVirtualServer\",\n        DEBUG_OPEN_PREFERENCES_IN_SPLIT_VIEW  = \"debug.openPrefsInSplitView\";\n\n    const LOG_TO_CONSOLE_KEY = logger.loggingOptions.LOCAL_STORAGE_KEYS.LOG_TO_CONSOLE_KEY,\n        LOG_LIVE_PREVIEW_KEY = logger.loggingOptions.LOCAL_STORAGE_KEYS.LOG_LIVE_PREVIEW;\n\n    // define a preference to turn off opening preferences in split-view.\n    var prefs = PreferencesManager.getExtensionPrefs(\"preferencesView\");\n    prefs.definePreference(\"openPrefsInSplitView\",   \"boolean\", true, {\n        description: Strings.DESCRIPTION_OPEN_PREFS_IN_SPLIT_VIEW\n    });\n\n    prefs.definePreference(\"openUserPrefsInSecondPane\",   \"boolean\", true, {\n        description: Strings.DESCRIPTION_OPEN_USER_PREFS_IN_SECOND_PANE\n    });\n\n    // Implements the 'Run Tests' menu to bring up the Jasmine unit test window\n    function _runUnitTests(spec) {\n        let queryString = spec ? \"?spec=\" + spec : \"?suite=unit\";\n        let testBaseURL = \"../test/SpecRunner.html\";\n        if(window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1'){\n            // must be a deployed in phcode.dev/other sites. point to site test url\n            testBaseURL = \"test/SpecRunner.html\";\n        }\n        Phoenix.app.openURLInPhoenixWindow(testBaseURL + queryString, {\n            windowTitle: \"Test Runner\",\n            preferTabs: true,\n            width: 1670,\n            height: 900\n        });\n    }\n\n    function handleReload() {\n        CommandManager.execute(Commands.APP_RELOAD);\n    }\n\n    function handleReloadWithoutUserExts() {\n        CommandManager.execute(Commands.APP_RELOAD_WITHOUT_EXTS);\n    }\n\n    function handleShowPerfData() {\n        var templateVars = {\n            delimitedPerfData: PerfUtils.getDelimitedPerfData(),\n            perfData: []\n        };\n\n        var getValue = function (entry) {\n            // entry is either an Array or a number\n            if (Array.isArray(entry)) {\n                // For Array of values, return: minimum/average(count)/maximum/last\n                var i, e, avg, sum = 0, min = Number.MAX_VALUE, max = 0;\n\n                for (i = 0; i < entry.length; i++) {\n                    e = entry[i];\n                    min = Math.min(min, e);\n                    sum += e;\n                    max = Math.max(max, e);\n                }\n                avg = Math.round(sum * 10 / entry.length) / 10; // tenth of a millisecond\n                return String(min) + \"/\" + String(avg) + \"(\" + entry.length + \")/\" + String(max) + \"/\" + String(e);\n            }\n            return entry;\n\n        };\n\n        var perfData = PerfUtils.getData();\n        _.forEach(perfData, function (value, testName) {\n            templateVars.perfData.push({\n                testName: StringUtils.breakableUrl(testName),\n                value: getValue(value)\n            });\n        });\n\n        var template = Mustache.render(PerfDialogTemplate, templateVars);\n        Dialogs.showModalDialogUsingTemplate(template);\n\n        // Select the raw perf data field on click since select all doesn't\n        // work outside of the editor\n        $(\"#brackets-perf-raw-data\").click(function () {\n            $(this).focus().select();\n        });\n    }\n\n    function handleSwitchLanguage() {\n        const supportedLocales = Object.keys(Locales);\n\n        var $dialog,\n            $submit,\n            $select,\n            locale,\n            curLocale = (brackets.isLocaleDefault() ? null : brackets.getLocale()),\n            languages = [];\n\n        var setLanguage = function (event) {\n            locale = $select.val();\n            $submit.prop(\"disabled\", locale === (curLocale || \"\"));\n        };\n\n        for(let supportedLocale of supportedLocales){\n            var match = supportedLocale.match(/^([a-z]{2})(-[a-z]{2})?$/);\n\n            if (match) {\n                var language = supportedLocale,\n                    label = match[1];\n\n                if (match[2]) {\n                    label += match[2].toUpperCase();\n                }\n\n                languages.push({label: LocalizationUtils.getLocalizedLabel(label), language: language});\n            }\n        }\n        // add English (US), which is the root folder and should be sorted as well\n        languages.push({label: LocalizationUtils.getLocalizedLabel(\"en\"),  language: \"en\"});\n\n        // sort the languages via their display name\n        languages.sort(function (lang1, lang2) {\n            return lang1.label.localeCompare(lang2.label);\n        });\n\n        // add system default (which is placed on the very top)\n        languages.unshift({label: Strings.LANGUAGE_SYSTEM_DEFAULT, language: null});\n\n        var template = Mustache.render(LanguageDialogTemplate, {languages: languages, Strings: Strings});\n        Dialogs.showModalDialogUsingTemplate(template).done(function (id) {\n            if (id === Dialogs.DIALOG_BTN_OK && locale !== curLocale) {\n                brackets.setLocale(locale);\n                CommandManager.execute(Commands.APP_RELOAD);\n            }\n        });\n\n        $dialog = $(\".switch-language.instance\");\n        $submit = $dialog.find(\".dialog-button[data-button-id='\" + Dialogs.DIALOG_BTN_OK + \"']\");\n        $select = $dialog.find(\"select\");\n\n        $select.on(\"change\", setLanguage).val(curLocale);\n    }\n\n    function _openPrefFilesInSplitView(prefsPath, defaultPrefsPath, deferredPromise) {\n\n        var currScheme         = MainViewManager.getLayoutScheme(),\n            file               = FileSystem.getFileForPath(prefsPath),\n            defaultPrefsFile   = FileSystem.getFileForPath(defaultPrefsPath),\n            DEFAULT_PREFS_PANE = \"first-pane\",\n            USER_PREFS_PANE    = \"second-pane\";\n\n        // Exchange the panes, if default preferences need to be opened\n        // in the right pane.\n        if (!prefs.get(\"openUserPrefsInSecondPane\")) {\n            DEFAULT_PREFS_PANE = \"second-pane\";\n            USER_PREFS_PANE    = \"first-pane\";\n        }\n\n        function _openFiles() {\n\n            if (currScheme.rows === 1 && currScheme.columns === 1) {\n                // Split layout is not active yet. Initiate the\n                // split view.\n                MainViewManager.setLayoutScheme(1, 2);\n            }\n\n            // Open the default preferences in the left pane in the read only mode.\n            CommandManager.execute(Commands.FILE_OPEN, { fullPath: defaultPrefsPath, paneId: DEFAULT_PREFS_PANE, options: { isReadOnly: true } })\n                .done(function () {\n\n                    // Make sure the preference file is going to be opened in pane\n                    // specified in the preference.\n                    if (MainViewManager.findInWorkingSet(DEFAULT_PREFS_PANE, prefsPath) >= 0) {\n\n                        MainViewManager._moveView(DEFAULT_PREFS_PANE, USER_PREFS_PANE, file, 0, true);\n\n                        // Now refresh the project tree by asking\n                        // it to rebuild the UI.\n                        WorkingSetView.refresh(true);\n                    }\n\n                    CommandManager.execute(Commands.FILE_OPEN, { fullPath: prefsPath, paneId: USER_PREFS_PANE})\n                        .done(function () {\n                            deferredPromise.resolve();\n                        }).fail(function () {\n                            deferredPromise.reject();\n                        });\n                }).fail(function () {\n                    deferredPromise.reject();\n                });\n        }\n\n        var resultObj = MainViewManager.findInAllWorkingSets(defaultPrefsPath);\n        if (resultObj && resultObj.length > 0) {\n            CommandManager.execute(Commands.FILE_CLOSE, {file: defaultPrefsFile, paneId: resultObj[0].paneId})\n                .done(function () {\n                    _openFiles();\n                }).fail(function () {\n                    deferredPromise.reject();\n                });\n        } else {\n            _openFiles();\n        }\n\n    }\n\n    function _isSupportedPrefType(prefType) {\n\n        if (SUPPORTED_PREFERENCE_TYPES.indexOf(prefType) >= 0) {\n            return true;\n        }\n        return false;\n\n    }\n\n   /*\n    * This method tries to deduce the preference type\n    * based on various parameters like objects initial\n    * value, object type, object's type property.\n    */\n    function _getPrefType(prefItem) {\n\n        var finalPrefType = \"undefined\";\n\n        if (prefItem) {\n            // check the type parameter.\n            var _prefType = prefItem.type;\n            if (_prefType !== undefined) {\n                finalPrefType = prefItem.type.toLowerCase();\n                // make sure the initial property's\n                // object type matches to that of 'type' property.\n                if (prefItem.initial !== undefined) {\n\n                    if (Array.isArray(prefItem.initial)) {\n                        _prefType = \"array\";\n                    } else {\n                        var _initialType = typeof (prefItem.initial);\n                        _initialType = _initialType.toLowerCase();\n                        if (_prefType !== _initialType) {\n                            _prefType = _initialType;\n                        }\n                    }\n                }\n            }\n\n            if (_prefType) {\n                // preference object's type\n                // is defined. Check if that is valid or not.\n                finalPrefType = _prefType;\n                if (!_isSupportedPrefType(finalPrefType)) {\n                    finalPrefType = \"undefined\";\n                }\n            } else if (Array.isArray(prefItem)) {\n                // Check if the object itself\n                // is an array, in which case\n                // we log the default.\n                finalPrefType = \"array\";\n            } else if (prefItem.initial !== undefined  ||\n                       prefItem.keys !== undefined) {\n\n                // OK looks like this preference has\n                // no explicit type defined. instead\n                // it needs to be deduced from initial/keys\n                // variable.\n                var _prefVar;\n                if (prefItem.initial !== undefined) {\n                    _prefVar = prefItem.initial;\n                } else {\n                    _prefVar = prefItem.keys;\n                }\n\n                if (Array.isArray(_prefVar)) {\n                    // In cases of array the\n                    // typeof is returning a function.\n                    finalPrefType = \"array\";\n                }\n\n            } else {\n                finalPrefType = typeof (prefItem);\n            }\n        }\n\n        // Now make sure we recognize this format.\n        if (!_isSupportedPrefType(finalPrefType)) {\n            finalPrefType = \"undefined\";\n        }\n\n        return finalPrefType;\n    }\n\n    function _isValidPref(pref) {\n\n        // Make sure to generate pref description only for\n        // user overrides and don't generate for properties\n        // meant to be used for internal purposes. Also check\n        // if the preference type is valid or not.\n        if (pref && !pref.excludeFromHints && _getPrefType(pref) !== \"undefined\") {\n            return true;\n        }\n\n        return false;\n    }\n\n   /*\n    * This method tries to match between initial objects\n    * and key objects and then aggregates objects from both\n    * the properties.\n    */\n    function _getChildPrefs(prefItem) {\n\n        var finalObj = {},\n            keysFound = false;\n\n        if (!prefItem) {\n            return {};\n        }\n\n        function _populateKeys(allKeys) {\n\n            var prop;\n            if (typeof (allKeys) === \"object\") {\n                // iterate through the list.\n                keysFound = true;\n                for (prop in allKeys) {\n                    if (allKeys.hasOwnProperty(prop)) {\n                        finalObj[prop] = allKeys[prop];\n                    }\n                }\n            }\n        }\n\n        _populateKeys(prefItem.initial);\n        _populateKeys(prefItem.keys);\n\n        // Last resort: Maybe plain objects, in which case\n        // we blindly extract all the properties.\n        if (!keysFound) {\n            _populateKeys(prefItem);\n        }\n\n        return finalObj;\n    }\n\n    function _formatBasicPref(prefItem, prefName, tabIndentStr) {\n\n        if (!prefItem || typeof (prefName) !== \"string\" || _getPrefType(prefItem) === \"object\") {\n            // return empty string in case of\n            // object or pref is not defined.\n            return \"\";\n        }\n\n        var prefDescription = prefItem.description || \"\",\n            prefDefault     = prefItem.initial,\n            prefFormatText  = tabIndentStr + \"\\t// {0}\\n\" + tabIndentStr + \"\\t\\\"{1}\\\": {2}\",\n            prefItemType    = _getPrefType(prefItem);\n\n        if (prefDefault === undefined && !prefItem.description) {\n            // This could be the case when prefItem is a basic JS variable.\n            if (prefItemType === \"number\" || prefItemType === \"boolean\" || prefItemType === \"string\") {\n                prefDefault = prefItem;\n            }\n        }\n\n        if (prefDefault === undefined) {\n            if (prefItemType === \"number\") {\n                prefDefault = 0;\n            } else if (prefItemType === \"boolean\") {\n                // Defaulting the preference to false,\n                // in case this is missing.\n                prefDefault = false;\n            } else {\n                // for all other types\n                prefDefault = \"\";\n            }\n        }\n\n        if ((prefDescription === undefined || prefDescription.length === 0)) {\n            if (!Array.isArray(prefDefault)) {\n                prefDescription = Strings.DEFAULT_PREFERENCES_JSON_DEFAULT + \": \" + prefDefault;\n            } else {\n                prefDescription = \"\";\n            }\n        }\n\n        if (prefItemType === \"array\") {\n            prefDefault = \"[]\";\n        } else if (prefDefault.length === 0 || (prefItemType !== \"boolean\" && prefItemType !== \"number\")) {\n            prefDefault = \"\\\"\" + prefDefault + \"\\\"\";\n        }\n\n        return StringUtils.format(prefFormatText, prefDescription, prefName, prefDefault);\n    }\n\n    function _formatPref(prefName,  prefItem, indentLevel) {\n\n        // check for validity of the parameters being passed\n        if (!prefItem || indentLevel < 0 || !prefName || !prefName.length) {\n            return \"\";\n        }\n\n        var iLevel,\n            prefItemKeys,\n            entireText     = \"\",\n            prefItemDesc   = prefItem.description || \"\",\n            prefItemType   = _getPrefType(prefItem),\n            hasKeys        = false,\n            tabIndents     = \"\",\n            numKeys        = 0;\n\n        // Generate the indentLevel string\n        for (iLevel = 0; iLevel < indentLevel; iLevel++) {\n            tabIndents += \"\\t\";\n        }\n\n        // Check if the preference is an object.\n        if (_getPrefType(prefItem) === \"object\") {\n            prefItemKeys = _getChildPrefs(prefItem);\n            if (Object.keys(prefItemKeys).length > 0) {\n                hasKeys = true;\n            }\n        }\n\n        // There are some properties like \"highlightMatches\" that\n        // are declared as boolean type but still can take object keys.\n        // The below condition check can take care of cases like this.\n        if (prefItemType !== \"object\" && hasKeys === false) {\n            return _formatBasicPref(prefItem, prefName, tabIndents);\n        }\n\n        // Indent the beginning of the object.\n        tabIndents += \"\\t\";\n\n        if (prefItemDesc && prefItemDesc.length > 0) {\n            entireText = tabIndents + \"// \" + prefItemDesc + \"\\n\";\n        }\n\n        entireText += tabIndents + \"\\\"\" + prefName + \"\\\": \" + \"{\";\n\n        if (prefItemKeys) {\n            numKeys = Object.keys(prefItemKeys).length;\n        }\n\n        // In case the object array is empty\n        if (numKeys <= 0) {\n            entireText += \"}\";\n            return entireText;\n        }\n        entireText += \"\\n\";\n\n\n        // Now iterate through all the keys\n        // and generate nested formatted objects.\n\n        Object.keys(prefItemKeys).sort().forEach(function (property) {\n\n            if (prefItemKeys.hasOwnProperty(property)) {\n\n                var pref = prefItemKeys[property];\n\n                if (_isValidPref(pref)) {\n\n                    var formattedText = \"\";\n\n                    if (_getPrefType(pref) === \"object\") {\n                        formattedText = _formatPref(property, pref, indentLevel + 1);\n                    } else {\n                        formattedText = _formatBasicPref(pref, property, tabIndents);\n                    }\n\n                    if (formattedText.length > 0) {\n                        entireText += formattedText + \",\\n\\n\";\n                    }\n                }\n            }\n        });\n\n        // Strip \",\\n\\n\" that got added above, for the last property\n        if (entireText.length > 0) {\n            entireText = entireText.slice(0, -3) + \"\\n\" + tabIndents + \"}\";\n        } else {\n            entireText = \"{}\";\n        }\n\n        return entireText;\n    }\n\n    function _getDefaultPreferencesString() {\n\n        var allPrefs       = PreferencesManager.getAllPreferences(),\n            headerComment  = Strings.DEFAULT_PREFERENCES_JSON_HEADER_COMMENT + \"\\n\\n{\\n\",\n            entireText     = \"\";\n\n        Object.keys(allPrefs).sort().forEach(function (property) {\n            if (allPrefs.hasOwnProperty(property)) {\n\n                var pref = allPrefs[property];\n\n                if (_isValidPref(pref)) {\n                    entireText += _formatPref(property, pref, 0) + \",\\n\\n\";\n                }\n            }\n        });\n\n        // Strip \",\\n\\n\" that got added above, for the last property\n        if (entireText.length > 0) {\n            entireText = headerComment + entireText.slice(0, -3) + \"\\n}\\n\";\n        } else {\n            entireText = headerComment + \"}\\n\";\n        }\n\n        return entireText;\n    }\n\n    function _loadDefaultPrefs(prefsPath, deferredPromise) {\n\n        var defaultPrefsPath = defaultPreferencesFullPath,\n            file             = FileSystem.getFileForPath(defaultPrefsPath);\n\n        function _executeDefaultOpenPrefsCommand() {\n\n            CommandManager.execute(Commands.FILE_OPEN_PREFERENCES)\n                .done(function () {\n                    deferredPromise.resolve();\n                }).fail(function () {\n                    deferredPromise.reject();\n                });\n        }\n\n        file.exists(function (err, doesExist) {\n\n            if (doesExist) {\n\n                // Go about recreating the default preferences file.\n                if (recomputeDefaultPrefs) {\n\n                    var prefsString       = _getDefaultPreferencesString();\n                    recomputeDefaultPrefs = false;\n\n                    // We need to delete this first\n                    file.unlink(function (err) {\n                        if (!err) {\n                            // Go about recreating this\n                            // file and write the default\n                            // preferences string to this file.\n                            FileUtils.writeText(file, prefsString, true)\n                                .done(function () {\n                                    recomputeDefaultPrefs = false;\n                                    _openPrefFilesInSplitView(prefsPath, defaultPrefsPath, deferredPromise);\n                                }).fail(function (error) {\n                                    // Give a chance for default preferences command.\n                                    console.error(\"Unable to write to default preferences file! error code:\" + error);\n                                    _executeDefaultOpenPrefsCommand();\n                                });\n                        } else {\n                            // Some error occured while trying to delete\n                            // the file. In this case open the user\n                            // preferences alone.\n                            console.error(\"Unable to delete the existing default preferences file! error code:\" + err);\n                            _executeDefaultOpenPrefsCommand();\n                        }\n                    });\n\n                } else {\n                    // Default preferences already generated.\n                    // Just go about opening both the files.\n                    _openPrefFilesInSplitView(prefsPath, defaultPrefsPath, deferredPromise);\n                }\n            } else {\n\n                // The default prefs file does not exist at all.\n                // So go about recreating the default preferences\n                // file.\n                var _prefsString = _getDefaultPreferencesString();\n                FileUtils.writeText(file, _prefsString, true)\n                    .done(function () {\n                        recomputeDefaultPrefs = false;\n                        _openPrefFilesInSplitView(prefsPath, defaultPrefsPath, deferredPromise);\n                    }).fail(function (error) {\n                        // Give a chance for default preferences command.\n                        console.error(\"Unable to write to default preferences file! error code:\" + error);\n                        _executeDefaultOpenPrefsCommand();\n                    });\n            }\n        });\n    }\n\n    function handleOpenPrefsInSplitView() {\n\n        var fullPath        = PreferencesManager.getUserPrefFile(),\n            file            = FileSystem.getFileForPath(fullPath),\n            splitViewPrefOn = prefs.get(\"openPrefsInSplitView\"),\n            result          = new $.Deferred();\n\n        if (!splitViewPrefOn) {\n            return CommandManager.execute(Commands.FILE_OPEN_PREFERENCES);\n        }\n        file.exists(function (err, doesExist) {\n            if (doesExist) {\n                _loadDefaultPrefs(fullPath, result);\n            } else {\n                FileUtils.writeText(file, \"\", true)\n                        .done(function () {\n                            _loadDefaultPrefs(fullPath, result);\n                        }).fail(function () {\n                            result.reject();\n                        });\n            }\n        });\n\n\n        return result.promise();\n    }\n\n    function _updateLogToConsoleMenuItemChecked() {\n        const isLogging = window.setupLogging();\n        CommandManager.get(DEBUG_ENABLE_LOGGING).setChecked(isLogging);\n        CommandManager.get(DEBUG_LIVE_PREVIEW_LOGGING).setEnabled(isLogging);\n        logger.loggingOptions.logLivePreview = window.isLoggingEnabled(LOG_LIVE_PREVIEW_KEY);\n        CommandManager.get(DEBUG_LIVE_PREVIEW_LOGGING).setChecked(logger.loggingOptions.logLivePreview);\n        CommandManager.get(DEBUG_ENABLE_PHNODE_INSPECTOR).setChecked(NodeConnector.isInspectEnabled());\n    }\n\n    function _handleLogging() {\n        window.toggleLoggingKey(LOG_TO_CONSOLE_KEY);\n        _updateLogToConsoleMenuItemChecked();\n    }\n\n    function _handlePhNodeInspectEnable() {\n        NodeConnector.setInspectEnabled(!NodeConnector.isInspectEnabled());\n        _updateLogToConsoleMenuItemChecked();\n    }\n\n    function _handleGetPhNodeInspectURL() {\n        Dialogs.showInfoDialog(Strings.CMD_GET_PHNODE_INSPECTOR_URL,\n            `<div id=\"instructions\">\n  <p>\n    1. Go to <a href=\"chrome://inspect/\" target=\"_blank\">chrome://inspect/#devices</a>\n    <button onclick=\"Phoenix.app.copyToClipboard('chrome://inspect/')\">\n      <i class=\"fas fa-copy\"></i> Copy\n    </button>\n  </p>\n  <p>2. Select Option 'Open dedicated DevTools for Node'</p>\n  <p>\n    3. Use the URL in connection tab'<code>localhost:${NodeConnector.getInspectPort()}</code>'\n    <button onclick=\"Phoenix.app.copyToClipboard('localhost:${NodeConnector.getInspectPort()}')\">\n      <i class=\"fas fa-copy\"></i> Copy\n    </button>\n  </p>\n</div>`);\n    }\n\n    function _handleLivePreviewLogging() {\n        window.toggleLoggingKey(LOG_LIVE_PREVIEW_KEY);\n        _updateLogToConsoleMenuItemChecked();\n    }\n\n    ExtensionManager.on(\"statusChange\", function (id) {\n        // Seems like an extension(s) got installed.\n        // Need to recompute the default prefs.\n        recomputeDefaultPrefs = true;\n    });\n\n    function _openVFS() {\n        ProjectManager.openProject(\"/\");\n    }\n\n    function _openExtensionsFolder() {\n        Phoenix.app.openPathInFileBrowser(ExtensionLoader.getUserExtensionPath());\n    }\n\n    function _openVirtualServer() {\n        const virtualServingURL = Phoenix.VFS.getVirtualServingURLForPath(\"/\");\n        if(!virtualServingURL) {\n            throw new Error(\"Unable to find virtual server!\");\n        }\n        Phoenix.app.openURLInPhoenixWindow(virtualServingURL, {\n            preferTabs: true\n        });\n    }\n\n    function _handleShowDeveloperTools() {\n        brackets.app.toggleDevtools();\n    }\n\n    /* Register all the command handlers */\n    let loadOrReloadString = extensionDevelopment.isProjectLoadedAsExtension() ?\n        Strings.CMD_RELOAD_CURRENT_EXTENSION : Strings.CMD_LOAD_CURRENT_EXTENSION;\n    CommandManager.register(loadOrReloadString,     DEBUG_LOAD_CURRENT_EXTENSION,\n        extensionDevelopment.loadCurrentExtension);\n    CommandManager.register(Strings.CMD_UNLOAD_CURRENT_EXTENSION,     DEBUG_UNLOAD_CURRENT_EXTENSION,\n        extensionDevelopment.unloadCurrentExtension);\n    CommandManager.register(Strings.CMD_REFRESH_WINDOW,             DEBUG_REFRESH_WINDOW,           handleReload);\n    CommandManager.register(Strings.CMD_RELOAD_WITHOUT_USER_EXTS,   DEBUG_RELOAD_WITHOUT_USER_EXTS, handleReloadWithoutUserExts);\n\n    // Start with the \"Run Tests\" item disabled. It will be enabled later if the test file can be found.\n    CommandManager.register(Strings.CMD_RUN_UNIT_TESTS,       DEBUG_RUN_UNIT_TESTS,         _runUnitTests);\n\n    CommandManager.register(Strings.CMD_SHOW_PERF_DATA,            DEBUG_SHOW_PERF_DATA,            handleShowPerfData);\n\n    let switchLanguageStr = Strings.CMD_SWITCH_LANGUAGE === \"Switch Language\\u2026\" ?\n        Strings.CMD_SWITCH_LANGUAGE :\n        `${Strings.CMD_SWITCH_LANGUAGE} (Switch Language)`;\n    CommandManager.register(switchLanguageStr,           DEBUG_SWITCH_LANGUAGE,           handleSwitchLanguage);\n\n    CommandManager.register(Strings.CMD_ENABLE_LOGGING, DEBUG_ENABLE_LOGGING,   _handleLogging);\n    CommandManager.register(Strings.CMD_ENABLE_PHNODE_INSPECTOR, DEBUG_ENABLE_PHNODE_INSPECTOR, _handlePhNodeInspectEnable);\n    CommandManager.register(Strings.CMD_GET_PHNODE_INSPECTOR_URL, DEBUG_GET_PHNODE_INSPECTOR_URL, _handleGetPhNodeInspectURL);\n    CommandManager.register(Strings.CMD_ENABLE_LIVE_PREVIEW_LOGS, DEBUG_LIVE_PREVIEW_LOGGING, _handleLivePreviewLogging);\n    CommandManager.register(Strings.CMD_OPEN_VFS, DEBUG_OPEN_VFS,   _openVFS);\n    CommandManager.register(Strings.CMD_OPEN_EXTENSIONS_FOLDER, DEBUG_OPEN_EXTENSION_FOLDER,   _openExtensionsFolder);\n    CommandManager.register(Strings.CMD_OPEN_VIRTUAL_SERVER, DEBUG_OPEN_VIRTUAL_SERVER,   _openVirtualServer);\n\n    CommandManager.register(Strings.CMD_OPEN_PREFERENCES, DEBUG_OPEN_PREFERENCES_IN_SPLIT_VIEW, handleOpenPrefsInSplitView);\n    const debugMenu = Menus.getMenu(Menus.AppMenuBar.DEBUG_MENU);\n    debugMenu.addMenuItem(DEBUG_REFRESH_WINDOW, window.debugMode ? KeyboardPrefs.refreshWindow : undefined);\n    debugMenu.addMenuItem(DEBUG_RELOAD_WITHOUT_USER_EXTS, window.debugMode ? KeyboardPrefs.reloadWithoutUserExts : undefined);\n    debugMenu.addMenuItem(DEBUG_LOAD_CURRENT_EXTENSION);\n    debugMenu.addMenuItem(DEBUG_UNLOAD_CURRENT_EXTENSION, undefined, undefined, undefined, {\n        hideWhenCommandDisabled: true\n    });\n    debugMenu.addMenuItem(DEBUG_OPEN_EXTENSION_FOLDER, undefined, undefined, undefined, {\n        hideWhenCommandDisabled: true\n    });\n    debugMenu.addMenuDivider();\n    // Show Developer Tools (optionally enabled)\n    if(Phoenix.browser.isTauri){\n        CommandManager.register(Strings.CMD_SHOW_DEV_TOOLS, DEBUG_SHOW_DEVELOPER_TOOLS, _handleShowDeveloperTools);\n        debugMenu.addMenuItem(DEBUG_SHOW_DEVELOPER_TOOLS, KeyboardPrefs.showDeveloperTools);\n    }\n    // this command is defined in core, but exposed only in Debug menu for now\n    debugMenu.addMenuItem(Commands.FILE_OPEN_KEYMAP, null);\n    const diagnosticsSubmenu = debugMenu.addSubMenu(Strings.CMD_DIAGNOSTIC_TOOLS, DIAGNOSTICS_SUBMENU);\n    diagnosticsSubmenu.addMenuItem(DEBUG_RUN_UNIT_TESTS);\n    diagnosticsSubmenu.addMenuDivider();\n    diagnosticsSubmenu.addMenuItem(DEBUG_ENABLE_LOGGING);\n    diagnosticsSubmenu.addMenuItem(DEBUG_ENABLE_PHNODE_INSPECTOR, undefined, undefined, undefined, {\n        hideWhenCommandDisabled: true\n    });\n    diagnosticsSubmenu.addMenuItem(DEBUG_GET_PHNODE_INSPECTOR_URL, undefined, undefined, undefined, {\n        hideWhenCommandDisabled: true\n    });\n    diagnosticsSubmenu.addMenuItem(DEBUG_LIVE_PREVIEW_LOGGING);\n    diagnosticsSubmenu.addMenuDivider();\n    diagnosticsSubmenu.addMenuItem(DEBUG_SHOW_PERF_DATA);\n    diagnosticsSubmenu.addMenuItem(DEBUG_OPEN_VFS);\n    diagnosticsSubmenu.addMenuItem(DEBUG_OPEN_VIRTUAL_SERVER, undefined, undefined, undefined, {\n        hideWhenCommandDisabled: true\n    });\n\n    CommandManager.get(DEBUG_UNLOAD_CURRENT_EXTENSION)\n        .setEnabled(extensionDevelopment.isProjectLoadedAsExtension());\n    CommandManager.get(DEBUG_OPEN_EXTENSION_FOLDER)\n        .setEnabled(Phoenix.browser.isTauri); // only show in tauri\n    CommandManager.get(DEBUG_ENABLE_PHNODE_INSPECTOR)\n        .setEnabled(Phoenix.browser.isTauri); // only show in tauri\n    CommandManager.get(DEBUG_GET_PHNODE_INSPECTOR_URL)\n        .setEnabled(Phoenix.browser.isTauri); // only show in tauri\n    CommandManager.get(DEBUG_OPEN_VIRTUAL_SERVER)\n        .setEnabled(!Phoenix.browser.isTauri); // don't show in tauri as there is no virtual server in tauri\n\n    _updateLogToConsoleMenuItemChecked();\n\n    const helpMenu = Menus.getMenu(Menus.AppMenuBar.HELP_MENU);\n    helpMenu.addMenuItem(DEBUG_SWITCH_LANGUAGE, \"\", Menus.BEFORE, Commands.HELP_ABOUT);\n\n    const fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n    // this command will enable defaultPreferences and brackets preferences to be open side by side in split view.\n    fileMenu.addMenuItem(DEBUG_OPEN_PREFERENCES_IN_SPLIT_VIEW, null, Menus.BEFORE, Menus.MenuSection.FILE_SETTINGS.sectionMarker);\n\n    // exposed for convenience, but not official API\n    exports._runUnitTests = _runUnitTests;\n});\n"],"file":"main.js"}