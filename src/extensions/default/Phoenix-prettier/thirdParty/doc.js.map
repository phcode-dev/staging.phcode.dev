{"version":3,"sources":["extensions/default/Phoenix-prettier/thirdParty/doc.js"],"names":["factory","exports","module","define","amd","root","globalThis","global","self","this","doc","__getOwnPropNames","Object","getOwnPropertyNames","__commonJS","require_doc_js_umd","cb","mod","__require","[object Object]","__create","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames2","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__esm","fn","res","__init","__commonJS2","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toESM","isNodeMode","__esModule","value","__toCommonJS","init_define_process","require_doc_builders","exports2","module2","concat","parts","type","indent","contents","align","widthOrString","n","group","opts","arguments","length","id","break","Boolean","shouldBreak","expandedStates","dedentToRoot","Number","NEGATIVE_INFINITY","markAsRoot","dedent","conditionalGroup","states","assign","fill","ifBreak","breakContents","flatContents","groupId","indentIfBreak","negate","lineSuffix","lineSuffixBoundary","breakParent","trim","hardlineWithoutBreakParent","hard","literallineWithoutBreakParent","literal","line","softline","soft","hardline","literalline","cursor","placeholder","Symbol","join","sep","arr","i","push","addAlignmentToDoc","size","tabWidth","aligned","Math","floor","label","label2","require_end_of_line","guessEndOfLine","text","index","indexOf","charAt","convertEndOfLineToChars","countEndOfLineChars","eol","regex","Error","JSON","stringify","endOfLines","match","normalizeEndOfLine","replace","require_get_last","getLast","ansiRegex","onlyFirst","pattern","RegExp","init_ansi_regex","stripAnsi","string","TypeError","init_strip_ansi","isFullwidthCodePoint","codePoint","isInteger","init_is_fullwidth_code_point","require_emoji_regex","string_width_exports","import_emoji_regex","stringWidth","default","width","codePointAt","init_string_width","require_get_string_width","stringWidth2","notAsciiRegex","getStringWidth","test","require_doc_utils","isConcat","Array","isArray","getDocParts","traverseDocOnExitStackMarker","traverseDoc","onEnter","onExit","shouldTraverseConditionalGroups","docsStack","doc2","pop","ic","mapDoc","mapped","Map","rec","has","result","process2","set","map","findInDoc","defaultValue","hasStopped","findInDocOnEnterFn","maybeResult","willBreakFn","willBreak","breakParentGroup","groupStack","parentGroup","propagateBreaks","alreadyVisitedSet","Set","propagateBreaksOnEnterFn","add","propagateBreaksOnExitFn","removeLinesFn","removeLines","isHardline","nextDoc","stripDocTrailingHardlineFromDoc","slice","lastPart","stripTrailingHardline","cleanDoc","cleanDocFn","every","part","currentPart","restParts","currentDoc","normalizeParts","newParts","filter","shift","unshift","normalizeDoc","replaceEndOfLine","includes","replaceTextEndOfLine","replacement","split","canBreakFn","canBreak","require_doc_printer","groupModeMap","MODE_BREAK","MODE_FLAT","rootIndent","queue","makeIndent","ind","options","generateInd","makeAlign","indent2","widthOrDoc","alignType","newPart","lastTabs","lastSpaces","flush","useTabs","addTabs","addSpaces","flushSpaces","count","repeat","flushTabs","resetLast","out","trimCount","trimmed","fits","next","restCommands","hasLineSuffix","mustBeFlat","restIdx","cmds","mode","groupMode","printDocToString","printWidth","newLine","endOfLine","pos","shouldRemeasure","formatted","rem","mostExpanded","state","cmd","content","whitespace","contentFlatCmd","contentBreakCmd","contentFits","whitespaceFlatCmd","whitespaceBreakCmd","splice","remainingCmd","secondContent","firstAndSecondContentFlatCmd","firstAndSecondContentFits","reverse","cursorPlaceholderIndex","otherCursorPlaceholderIndex","beforeCursor","aroundCursor","afterCursor","cursorNodeStart","cursorNodeText","require_doc_debug","flattenDoc","flattened","printDocToDebug","printedSymbols","usedKeysForSymbols","printDoc","parentParts","printed","withBreakParent","afterHardline","printGroupId","optionsParts","String","prefix","counter","builders","printer","utils","debug"],"mappings":"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","sourcesContent":["(function (factory) {\n  if (typeof exports === \"object\" && typeof module === \"object\") {\n    module.exports = factory();\n  } else if (typeof define === \"function\" && define.amd) {\n    define(factory);\n  } else {\n    var root =\n      typeof globalThis !== \"undefined\"\n        ? globalThis\n        : typeof global !== \"undefined\"\n        ? global\n        : typeof self !== \"undefined\"\n        ? self\n        : this || {};\n    root.doc = factory();\n  }\n})(function() {\n  \"use strict\";\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n\n  // dist/_doc.js.umd.js\n  var require_doc_js_umd = __commonJS({\n    \"dist/_doc.js.umd.js\"(exports, module) {\n      var __create = Object.create;\n      var __defProp = Object.defineProperty;\n      var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n      var __getOwnPropNames2 = Object.getOwnPropertyNames;\n      var __getProtoOf = Object.getPrototypeOf;\n      var __hasOwnProp = Object.prototype.hasOwnProperty;\n      var __esm = (fn, res) => function __init() {\n        return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;\n      };\n      var __commonJS2 = (cb, mod) => function __require() {\n        return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = {\n          exports: {}\n        }).exports, mod), mod.exports;\n      };\n      var __export = (target, all) => {\n        for (var name in all)\n          __defProp(target, name, {\n            get: all[name],\n            enumerable: true\n          });\n      };\n      var __copyProps = (to, from, except, desc) => {\n        if (from && typeof from === \"object\" || typeof from === \"function\") {\n          for (let key of __getOwnPropNames2(from))\n            if (!__hasOwnProp.call(to, key) && key !== except)\n              __defProp(to, key, {\n                get: () => from[key],\n                enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n              });\n        }\n        return to;\n      };\n      var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n      }) : target, mod));\n      var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", {\n        value: true\n      }), mod);\n      var init_define_process = __esm({\n        \"<define:process>\"() {\n        }\n      });\n      var require_doc_builders = __commonJS2({\n        \"src/document/doc-builders.js\"(exports2, module2) {\n          \"use strict\";\n          init_define_process();\n          function concat(parts) {\n            if (false) {\n              for (const part of parts) {\n                assertDoc(part);\n              }\n            }\n            return {\n              type: \"concat\",\n              parts\n            };\n          }\n          function indent(contents) {\n            if (false) {\n              assertDoc(contents);\n            }\n            return {\n              type: \"indent\",\n              contents\n            };\n          }\n          function align(widthOrString, contents) {\n            if (false) {\n              assertDoc(contents);\n            }\n            return {\n              type: \"align\",\n              contents,\n              n: widthOrString\n            };\n          }\n          function group(contents) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            if (false) {\n              assertDoc(contents);\n            }\n            return {\n              type: \"group\",\n              id: opts.id,\n              contents,\n              break: Boolean(opts.shouldBreak),\n              expandedStates: opts.expandedStates\n            };\n          }\n          function dedentToRoot(contents) {\n            return align(Number.NEGATIVE_INFINITY, contents);\n          }\n          function markAsRoot(contents) {\n            return align({\n              type: \"root\"\n            }, contents);\n          }\n          function dedent(contents) {\n            return align(-1, contents);\n          }\n          function conditionalGroup(states, opts) {\n            return group(states[0], Object.assign(Object.assign({}, opts), {}, {\n              expandedStates: states\n            }));\n          }\n          function fill(parts) {\n            if (false) {\n              for (const part of parts) {\n                assertDoc(part);\n              }\n            }\n            return {\n              type: \"fill\",\n              parts\n            };\n          }\n          function ifBreak(breakContents, flatContents) {\n            let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            if (false) {\n              if (breakContents) {\n                assertDoc(breakContents);\n              }\n              if (flatContents) {\n                assertDoc(flatContents);\n              }\n            }\n            return {\n              type: \"if-break\",\n              breakContents,\n              flatContents,\n              groupId: opts.groupId\n            };\n          }\n          function indentIfBreak(contents, opts) {\n            return {\n              type: \"indent-if-break\",\n              contents,\n              groupId: opts.groupId,\n              negate: opts.negate\n            };\n          }\n          function lineSuffix(contents) {\n            if (false) {\n              assertDoc(contents);\n            }\n            return {\n              type: \"line-suffix\",\n              contents\n            };\n          }\n          var lineSuffixBoundary = {\n            type: \"line-suffix-boundary\"\n          };\n          var breakParent = {\n            type: \"break-parent\"\n          };\n          var trim = {\n            type: \"trim\"\n          };\n          var hardlineWithoutBreakParent = {\n            type: \"line\",\n            hard: true\n          };\n          var literallineWithoutBreakParent = {\n            type: \"line\",\n            hard: true,\n            literal: true\n          };\n          var line = {\n            type: \"line\"\n          };\n          var softline = {\n            type: \"line\",\n            soft: true\n          };\n          var hardline = concat([hardlineWithoutBreakParent, breakParent]);\n          var literalline = concat([literallineWithoutBreakParent, breakParent]);\n          var cursor = {\n            type: \"cursor\",\n            placeholder: Symbol(\"cursor\")\n          };\n          function join(sep, arr) {\n            const res = [];\n            for (let i = 0; i < arr.length; i++) {\n              if (i !== 0) {\n                res.push(sep);\n              }\n              res.push(arr[i]);\n            }\n            return concat(res);\n          }\n          function addAlignmentToDoc(doc, size, tabWidth) {\n            let aligned = doc;\n            if (size > 0) {\n              for (let i = 0; i < Math.floor(size / tabWidth); ++i) {\n                aligned = indent(aligned);\n              }\n              aligned = align(size % tabWidth, aligned);\n              aligned = align(Number.NEGATIVE_INFINITY, aligned);\n            }\n            return aligned;\n          }\n          function label(label2, contents) {\n            return {\n              type: \"label\",\n              label: label2,\n              contents\n            };\n          }\n          module2.exports = {\n            concat,\n            join,\n            line,\n            softline,\n            hardline,\n            literalline,\n            group,\n            conditionalGroup,\n            fill,\n            lineSuffix,\n            lineSuffixBoundary,\n            cursor,\n            breakParent,\n            ifBreak,\n            trim,\n            indent,\n            indentIfBreak,\n            align,\n            addAlignmentToDoc,\n            markAsRoot,\n            dedentToRoot,\n            dedent,\n            hardlineWithoutBreakParent,\n            literallineWithoutBreakParent,\n            label\n          };\n        }\n      });\n      var require_end_of_line = __commonJS2({\n        \"src/common/end-of-line.js\"(exports2, module2) {\n          \"use strict\";\n          init_define_process();\n          function guessEndOfLine(text) {\n            const index = text.indexOf(\"\\r\");\n            if (index >= 0) {\n              return text.charAt(index + 1) === \"\\n\" ? \"crlf\" : \"cr\";\n            }\n            return \"lf\";\n          }\n          function convertEndOfLineToChars(value) {\n            switch (value) {\n              case \"cr\":\n                return \"\\r\";\n              case \"crlf\":\n                return \"\\r\\n\";\n              default:\n                return \"\\n\";\n            }\n          }\n          function countEndOfLineChars(text, eol) {\n            let regex;\n            switch (eol) {\n              case \"\\n\":\n                regex = /\\n/g;\n                break;\n              case \"\\r\":\n                regex = /\\r/g;\n                break;\n              case \"\\r\\n\":\n                regex = /\\r\\n/g;\n                break;\n              default:\n                throw new Error('Unexpected \"eol\" '.concat(JSON.stringify(eol), \".\"));\n            }\n            const endOfLines = text.match(regex);\n            return endOfLines ? endOfLines.length : 0;\n          }\n          function normalizeEndOfLine(text) {\n            return text.replace(/\\r\\n?/g, \"\\n\");\n          }\n          module2.exports = {\n            guessEndOfLine,\n            convertEndOfLineToChars,\n            countEndOfLineChars,\n            normalizeEndOfLine\n          };\n        }\n      });\n      var require_get_last = __commonJS2({\n        \"src/utils/get-last.js\"(exports2, module2) {\n          \"use strict\";\n          init_define_process();\n          var getLast = (arr) => arr[arr.length - 1];\n          module2.exports = getLast;\n        }\n      });\n      function ansiRegex() {\n        let {\n          onlyFirst = false\n        } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const pattern = [\"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\", \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"].join(\"|\");\n        return new RegExp(pattern, onlyFirst ? void 0 : \"g\");\n      }\n      var init_ansi_regex = __esm({\n        \"node_modules/strip-ansi/node_modules/ansi-regex/index.js\"() {\n          init_define_process();\n        }\n      });\n      function stripAnsi(string) {\n        if (typeof string !== \"string\") {\n          throw new TypeError(\"Expected a `string`, got `\".concat(typeof string, \"`\"));\n        }\n        return string.replace(ansiRegex(), \"\");\n      }\n      var init_strip_ansi = __esm({\n        \"node_modules/strip-ansi/index.js\"() {\n          init_define_process();\n          init_ansi_regex();\n        }\n      });\n      function isFullwidthCodePoint(codePoint) {\n        if (!Number.isInteger(codePoint)) {\n          return false;\n        }\n        return codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141);\n      }\n      var init_is_fullwidth_code_point = __esm({\n        \"node_modules/is-fullwidth-code-point/index.js\"() {\n          init_define_process();\n        }\n      });\n      var require_emoji_regex = __commonJS2({\n        \"node_modules/emoji-regex/index.js\"(exports2, module2) {\n          \"use strict\";\n          init_define_process();\n          module2.exports = function() {\n            return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67)\\uDB40\\uDC7F|(?:\\uD83E\\uDDD1\\uD83C\\uDFFF\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83D\\uDC68(?:\\uD83C\\uDFFB(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFF]))|\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))?|(?:\\uD83C[\\uDFFC-\\uDFFF])\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFF]))|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\u200D(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFFF|\\uD83C\\uDFFE|\\uD83C\\uDFFD|\\uD83C\\uDFFC)?|(?:\\uD83D\\uDC69(?:\\uD83C\\uDFFB\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|(?:\\uD83C[\\uDFFC-\\uDFFF])\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69]))|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC69(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83E\\uDDD1(?:\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B|\\uD83C\\uDFF3\\uFE0F\\u200D\\u26A7|\\uD83D\\uDC3B\\u200D\\u2744|(?:(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\uD83C\\uDFF4\\u200D\\u2620|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD])\\u200D[\\u2640\\u2642]|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u2600-\\u2604\\u260E\\u2611\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26B0\\u26B1\\u26C8\\u26CF\\u26D1\\u26D3\\u26E9\\u26F0\\u26F1\\u26F4\\u26F7\\u26F8\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDE02\\uDE37\\uDF21\\uDF24-\\uDF2C\\uDF36\\uDF7D\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E\\uDF9F\\uDFCD\\uDFCE\\uDFD4-\\uDFDF\\uDFF5\\uDFF7]|\\uD83D[\\uDC3F\\uDCFD\\uDD49\\uDD4A\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA\\uDECB\\uDECD-\\uDECF\\uDEE0-\\uDEE5\\uDEE9\\uDEF0\\uDEF3])\\uFE0F|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDE35\\u200D\\uD83D\\uDCAB|\\uD83D\\uDE2E\\u200D\\uD83D\\uDCA8|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF|\\uD83C\\uDFFE|\\uD83C\\uDFFD|\\uD83C\\uDFFC|\\uD83C\\uDFFB)?|\\uD83D\\uDC69(?:\\uD83C\\uDFFF|\\uD83C\\uDFFE|\\uD83C\\uDFFD|\\uD83C\\uDFFC|\\uD83C\\uDFFB)?|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83D\\uDC08\\u200D\\u2B1B|\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79)|\\uD83D\\uDC41\\uFE0F|\\uD83C\\uDFF3\\uFE0F|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|[#\\*0-9]\\uFE0F\\u20E3|\\u2764\\uFE0F|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDFF4|(?:[\\u270A\\u270B]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0C\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270C\\u270D]|\\uD83D[\\uDD74\\uDD90])(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])|[\\u270A\\u270B]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC08\\uDC15\\uDC3B\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE2E\\uDE35\\uDE36\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0C\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5]|\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD]|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF]|[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF84\\uDF86-\\uDF93\\uDFA0-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC3A\\uDC3C-\\uDC3E\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC6A\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDDA4\\uDDFB-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD1D\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78\\uDD7A-\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCB\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6]|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26A7\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5-\\uDED7\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0C\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDD77\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n          };\n        }\n      });\n      var string_width_exports = {};\n      __export(string_width_exports, {\n        default: () => stringWidth\n      });\n      function stringWidth(string) {\n        if (typeof string !== \"string\" || string.length === 0) {\n          return 0;\n        }\n        string = stripAnsi(string);\n        if (string.length === 0) {\n          return 0;\n        }\n        string = string.replace((0, import_emoji_regex.default)(), \"  \");\n        let width = 0;\n        for (let index = 0; index < string.length; index++) {\n          const codePoint = string.codePointAt(index);\n          if (codePoint <= 31 || codePoint >= 127 && codePoint <= 159) {\n            continue;\n          }\n          if (codePoint >= 768 && codePoint <= 879) {\n            continue;\n          }\n          if (codePoint > 65535) {\n            index++;\n          }\n          width += isFullwidthCodePoint(codePoint) ? 2 : 1;\n        }\n        return width;\n      }\n      var import_emoji_regex;\n      var init_string_width = __esm({\n        \"node_modules/string-width/index.js\"() {\n          init_define_process();\n          init_strip_ansi();\n          init_is_fullwidth_code_point();\n          import_emoji_regex = __toESM(require_emoji_regex());\n        }\n      });\n      var require_get_string_width = __commonJS2({\n        \"src/utils/get-string-width.js\"(exports2, module2) {\n          \"use strict\";\n          init_define_process();\n          var stringWidth2 = (init_string_width(), __toCommonJS(string_width_exports)).default;\n          var notAsciiRegex = /[^\\x20-\\x7F]/;\n          function getStringWidth(text) {\n            if (!text) {\n              return 0;\n            }\n            if (!notAsciiRegex.test(text)) {\n              return text.length;\n            }\n            return stringWidth2(text);\n          }\n          module2.exports = getStringWidth;\n        }\n      });\n      var require_doc_utils = __commonJS2({\n        \"src/document/doc-utils.js\"(exports2, module2) {\n          \"use strict\";\n          init_define_process();\n          var getLast = require_get_last();\n          var {\n            literalline,\n            join\n          } = require_doc_builders();\n          var isConcat = (doc) => Array.isArray(doc) || doc && doc.type === \"concat\";\n          var getDocParts = (doc) => {\n            if (Array.isArray(doc)) {\n              return doc;\n            }\n            if (doc.type !== \"concat\" && doc.type !== \"fill\") {\n              throw new Error(\"Expect doc type to be `concat` or `fill`.\");\n            }\n            return doc.parts;\n          };\n          var traverseDocOnExitStackMarker = {};\n          function traverseDoc(doc, onEnter, onExit, shouldTraverseConditionalGroups) {\n            const docsStack = [doc];\n            while (docsStack.length > 0) {\n              const doc2 = docsStack.pop();\n              if (doc2 === traverseDocOnExitStackMarker) {\n                onExit(docsStack.pop());\n                continue;\n              }\n              if (onExit) {\n                docsStack.push(doc2, traverseDocOnExitStackMarker);\n              }\n              if (!onEnter || onEnter(doc2) !== false) {\n                if (isConcat(doc2) || doc2.type === \"fill\") {\n                  const parts = getDocParts(doc2);\n                  for (let ic = parts.length, i = ic - 1; i >= 0; --i) {\n                    docsStack.push(parts[i]);\n                  }\n                } else if (doc2.type === \"if-break\") {\n                  if (doc2.flatContents) {\n                    docsStack.push(doc2.flatContents);\n                  }\n                  if (doc2.breakContents) {\n                    docsStack.push(doc2.breakContents);\n                  }\n                } else if (doc2.type === \"group\" && doc2.expandedStates) {\n                  if (shouldTraverseConditionalGroups) {\n                    for (let ic = doc2.expandedStates.length, i = ic - 1; i >= 0; --i) {\n                      docsStack.push(doc2.expandedStates[i]);\n                    }\n                  } else {\n                    docsStack.push(doc2.contents);\n                  }\n                } else if (doc2.contents) {\n                  docsStack.push(doc2.contents);\n                }\n              }\n            }\n          }\n          function mapDoc(doc, cb) {\n            const mapped = /* @__PURE__ */ new Map();\n            return rec(doc);\n            function rec(doc2) {\n              if (mapped.has(doc2)) {\n                return mapped.get(doc2);\n              }\n              const result = process2(doc2);\n              mapped.set(doc2, result);\n              return result;\n            }\n            function process2(doc2) {\n              if (Array.isArray(doc2)) {\n                return cb(doc2.map(rec));\n              }\n              if (doc2.type === \"concat\" || doc2.type === \"fill\") {\n                const parts = doc2.parts.map(rec);\n                return cb(Object.assign(Object.assign({}, doc2), {}, {\n                  parts\n                }));\n              }\n              if (doc2.type === \"if-break\") {\n                const breakContents = doc2.breakContents && rec(doc2.breakContents);\n                const flatContents = doc2.flatContents && rec(doc2.flatContents);\n                return cb(Object.assign(Object.assign({}, doc2), {}, {\n                  breakContents,\n                  flatContents\n                }));\n              }\n              if (doc2.type === \"group\" && doc2.expandedStates) {\n                const expandedStates = doc2.expandedStates.map(rec);\n                const contents = expandedStates[0];\n                return cb(Object.assign(Object.assign({}, doc2), {}, {\n                  contents,\n                  expandedStates\n                }));\n              }\n              if (doc2.contents) {\n                const contents = rec(doc2.contents);\n                return cb(Object.assign(Object.assign({}, doc2), {}, {\n                  contents\n                }));\n              }\n              return cb(doc2);\n            }\n          }\n          function findInDoc(doc, fn, defaultValue) {\n            let result = defaultValue;\n            let hasStopped = false;\n            function findInDocOnEnterFn(doc2) {\n              const maybeResult = fn(doc2);\n              if (maybeResult !== void 0) {\n                hasStopped = true;\n                result = maybeResult;\n              }\n              if (hasStopped) {\n                return false;\n              }\n            }\n            traverseDoc(doc, findInDocOnEnterFn);\n            return result;\n          }\n          function willBreakFn(doc) {\n            if (doc.type === \"group\" && doc.break) {\n              return true;\n            }\n            if (doc.type === \"line\" && doc.hard) {\n              return true;\n            }\n            if (doc.type === \"break-parent\") {\n              return true;\n            }\n          }\n          function willBreak(doc) {\n            return findInDoc(doc, willBreakFn, false);\n          }\n          function breakParentGroup(groupStack) {\n            if (groupStack.length > 0) {\n              const parentGroup = getLast(groupStack);\n              if (!parentGroup.expandedStates && !parentGroup.break) {\n                parentGroup.break = \"propagated\";\n              }\n            }\n            return null;\n          }\n          function propagateBreaks(doc) {\n            const alreadyVisitedSet = /* @__PURE__ */ new Set();\n            const groupStack = [];\n            function propagateBreaksOnEnterFn(doc2) {\n              if (doc2.type === \"break-parent\") {\n                breakParentGroup(groupStack);\n              }\n              if (doc2.type === \"group\") {\n                groupStack.push(doc2);\n                if (alreadyVisitedSet.has(doc2)) {\n                  return false;\n                }\n                alreadyVisitedSet.add(doc2);\n              }\n            }\n            function propagateBreaksOnExitFn(doc2) {\n              if (doc2.type === \"group\") {\n                const group = groupStack.pop();\n                if (group.break) {\n                  breakParentGroup(groupStack);\n                }\n              }\n            }\n            traverseDoc(doc, propagateBreaksOnEnterFn, propagateBreaksOnExitFn, true);\n          }\n          function removeLinesFn(doc) {\n            if (doc.type === \"line\" && !doc.hard) {\n              return doc.soft ? \"\" : \" \";\n            }\n            if (doc.type === \"if-break\") {\n              return doc.flatContents || \"\";\n            }\n            return doc;\n          }\n          function removeLines(doc) {\n            return mapDoc(doc, removeLinesFn);\n          }\n          var isHardline = (doc, nextDoc) => doc && doc.type === \"line\" && doc.hard && nextDoc && nextDoc.type === \"break-parent\";\n          function stripDocTrailingHardlineFromDoc(doc) {\n            if (!doc) {\n              return doc;\n            }\n            if (isConcat(doc) || doc.type === \"fill\") {\n              const parts = getDocParts(doc);\n              while (parts.length > 1 && isHardline(...parts.slice(-2))) {\n                parts.length -= 2;\n              }\n              if (parts.length > 0) {\n                const lastPart = stripDocTrailingHardlineFromDoc(getLast(parts));\n                parts[parts.length - 1] = lastPart;\n              }\n              return Array.isArray(doc) ? parts : Object.assign(Object.assign({}, doc), {}, {\n                parts\n              });\n            }\n            switch (doc.type) {\n              case \"align\":\n              case \"indent\":\n              case \"indent-if-break\":\n              case \"group\":\n              case \"line-suffix\":\n              case \"label\": {\n                const contents = stripDocTrailingHardlineFromDoc(doc.contents);\n                return Object.assign(Object.assign({}, doc), {}, {\n                  contents\n                });\n              }\n              case \"if-break\": {\n                const breakContents = stripDocTrailingHardlineFromDoc(doc.breakContents);\n                const flatContents = stripDocTrailingHardlineFromDoc(doc.flatContents);\n                return Object.assign(Object.assign({}, doc), {}, {\n                  breakContents,\n                  flatContents\n                });\n              }\n            }\n            return doc;\n          }\n          function stripTrailingHardline(doc) {\n            return stripDocTrailingHardlineFromDoc(cleanDoc(doc));\n          }\n          function cleanDocFn(doc) {\n            switch (doc.type) {\n              case \"fill\":\n                if (doc.parts.every((part) => part === \"\")) {\n                  return \"\";\n                }\n                break;\n              case \"group\":\n                if (!doc.contents && !doc.id && !doc.break && !doc.expandedStates) {\n                  return \"\";\n                }\n                if (doc.contents.type === \"group\" && doc.contents.id === doc.id && doc.contents.break === doc.break && doc.contents.expandedStates === doc.expandedStates) {\n                  return doc.contents;\n                }\n                break;\n              case \"align\":\n              case \"indent\":\n              case \"indent-if-break\":\n              case \"line-suffix\":\n                if (!doc.contents) {\n                  return \"\";\n                }\n                break;\n              case \"if-break\":\n                if (!doc.flatContents && !doc.breakContents) {\n                  return \"\";\n                }\n                break;\n            }\n            if (!isConcat(doc)) {\n              return doc;\n            }\n            const parts = [];\n            for (const part of getDocParts(doc)) {\n              if (!part) {\n                continue;\n              }\n              const [currentPart, ...restParts] = isConcat(part) ? getDocParts(part) : [part];\n              if (typeof currentPart === \"string\" && typeof getLast(parts) === \"string\") {\n                parts[parts.length - 1] += currentPart;\n              } else {\n                parts.push(currentPart);\n              }\n              parts.push(...restParts);\n            }\n            if (parts.length === 0) {\n              return \"\";\n            }\n            if (parts.length === 1) {\n              return parts[0];\n            }\n            return Array.isArray(doc) ? parts : Object.assign(Object.assign({}, doc), {}, {\n              parts\n            });\n          }\n          function cleanDoc(doc) {\n            return mapDoc(doc, (currentDoc) => cleanDocFn(currentDoc));\n          }\n          function normalizeParts(parts) {\n            const newParts = [];\n            const restParts = parts.filter(Boolean);\n            while (restParts.length > 0) {\n              const part = restParts.shift();\n              if (!part) {\n                continue;\n              }\n              if (isConcat(part)) {\n                restParts.unshift(...getDocParts(part));\n                continue;\n              }\n              if (newParts.length > 0 && typeof getLast(newParts) === \"string\" && typeof part === \"string\") {\n                newParts[newParts.length - 1] += part;\n                continue;\n              }\n              newParts.push(part);\n            }\n            return newParts;\n          }\n          function normalizeDoc(doc) {\n            return mapDoc(doc, (currentDoc) => {\n              if (Array.isArray(currentDoc)) {\n                return normalizeParts(currentDoc);\n              }\n              if (!currentDoc.parts) {\n                return currentDoc;\n              }\n              return Object.assign(Object.assign({}, currentDoc), {}, {\n                parts: normalizeParts(currentDoc.parts)\n              });\n            });\n          }\n          function replaceEndOfLine(doc) {\n            return mapDoc(doc, (currentDoc) => typeof currentDoc === \"string\" && currentDoc.includes(\"\\n\") ? replaceTextEndOfLine(currentDoc) : currentDoc);\n          }\n          function replaceTextEndOfLine(text) {\n            let replacement = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : literalline;\n            return join(replacement, text.split(\"\\n\")).parts;\n          }\n          function canBreakFn(doc) {\n            if (doc.type === \"line\") {\n              return true;\n            }\n          }\n          function canBreak(doc) {\n            return findInDoc(doc, canBreakFn, false);\n          }\n          module2.exports = {\n            isConcat,\n            getDocParts,\n            willBreak,\n            traverseDoc,\n            findInDoc,\n            mapDoc,\n            propagateBreaks,\n            removeLines,\n            stripTrailingHardline,\n            normalizeParts,\n            normalizeDoc,\n            cleanDoc,\n            replaceTextEndOfLine,\n            replaceEndOfLine,\n            canBreak\n          };\n        }\n      });\n      var require_doc_printer = __commonJS2({\n        \"src/document/doc-printer.js\"(exports2, module2) {\n          \"use strict\";\n          init_define_process();\n          var {\n            convertEndOfLineToChars\n          } = require_end_of_line();\n          var getLast = require_get_last();\n          var getStringWidth = require_get_string_width();\n          var {\n            fill,\n            cursor,\n            indent\n          } = require_doc_builders();\n          var {\n            isConcat,\n            getDocParts\n          } = require_doc_utils();\n          var groupModeMap;\n          var MODE_BREAK = 1;\n          var MODE_FLAT = 2;\n          function rootIndent() {\n            return {\n              value: \"\",\n              length: 0,\n              queue: []\n            };\n          }\n          function makeIndent(ind, options) {\n            return generateInd(ind, {\n              type: \"indent\"\n            }, options);\n          }\n          function makeAlign(indent2, widthOrDoc, options) {\n            if (widthOrDoc === Number.NEGATIVE_INFINITY) {\n              return indent2.root || rootIndent();\n            }\n            if (widthOrDoc < 0) {\n              return generateInd(indent2, {\n                type: \"dedent\"\n              }, options);\n            }\n            if (!widthOrDoc) {\n              return indent2;\n            }\n            if (widthOrDoc.type === \"root\") {\n              return Object.assign(Object.assign({}, indent2), {}, {\n                root: indent2\n              });\n            }\n            const alignType = typeof widthOrDoc === \"string\" ? \"stringAlign\" : \"numberAlign\";\n            return generateInd(indent2, {\n              type: alignType,\n              n: widthOrDoc\n            }, options);\n          }\n          function generateInd(ind, newPart, options) {\n            const queue = newPart.type === \"dedent\" ? ind.queue.slice(0, -1) : [...ind.queue, newPart];\n            let value = \"\";\n            let length = 0;\n            let lastTabs = 0;\n            let lastSpaces = 0;\n            for (const part of queue) {\n              switch (part.type) {\n                case \"indent\":\n                  flush();\n                  if (options.useTabs) {\n                    addTabs(1);\n                  } else {\n                    addSpaces(options.tabWidth);\n                  }\n                  break;\n                case \"stringAlign\":\n                  flush();\n                  value += part.n;\n                  length += part.n.length;\n                  break;\n                case \"numberAlign\":\n                  lastTabs += 1;\n                  lastSpaces += part.n;\n                  break;\n                default:\n                  throw new Error(\"Unexpected type '\".concat(part.type, \"'\"));\n              }\n            }\n            flushSpaces();\n            return Object.assign(Object.assign({}, ind), {}, {\n              value,\n              length,\n              queue\n            });\n            function addTabs(count) {\n              value += \"\t\".repeat(count);\n              length += options.tabWidth * count;\n            }\n            function addSpaces(count) {\n              value += \" \".repeat(count);\n              length += count;\n            }\n            function flush() {\n              if (options.useTabs) {\n                flushTabs();\n              } else {\n                flushSpaces();\n              }\n            }\n            function flushTabs() {\n              if (lastTabs > 0) {\n                addTabs(lastTabs);\n              }\n              resetLast();\n            }\n            function flushSpaces() {\n              if (lastSpaces > 0) {\n                addSpaces(lastSpaces);\n              }\n              resetLast();\n            }\n            function resetLast() {\n              lastTabs = 0;\n              lastSpaces = 0;\n            }\n          }\n          function trim(out) {\n            if (out.length === 0) {\n              return 0;\n            }\n            let trimCount = 0;\n            while (out.length > 0 && typeof getLast(out) === \"string\" && /^[\\t ]*$/.test(getLast(out))) {\n              trimCount += out.pop().length;\n            }\n            if (out.length > 0 && typeof getLast(out) === \"string\") {\n              const trimmed = getLast(out).replace(/[\\t ]*$/, \"\");\n              trimCount += getLast(out).length - trimmed.length;\n              out[out.length - 1] = trimmed;\n            }\n            return trimCount;\n          }\n          function fits(next, restCommands, width, options, hasLineSuffix, mustBeFlat) {\n            let restIdx = restCommands.length;\n            const cmds = [next];\n            const out = [];\n            while (width >= 0) {\n              if (cmds.length === 0) {\n                if (restIdx === 0) {\n                  return true;\n                }\n                cmds.push(restCommands[restIdx - 1]);\n                restIdx--;\n                continue;\n              }\n              const [ind, mode, doc] = cmds.pop();\n              if (typeof doc === \"string\") {\n                out.push(doc);\n                width -= getStringWidth(doc);\n              } else if (isConcat(doc)) {\n                const parts = getDocParts(doc);\n                for (let i = parts.length - 1; i >= 0; i--) {\n                  cmds.push([ind, mode, parts[i]]);\n                }\n              } else {\n                switch (doc.type) {\n                  case \"indent\":\n                    cmds.push([makeIndent(ind, options), mode, doc.contents]);\n                    break;\n                  case \"align\":\n                    cmds.push([makeAlign(ind, doc.n, options), mode, doc.contents]);\n                    break;\n                  case \"trim\":\n                    width += trim(out);\n                    break;\n                  case \"group\": {\n                    if (mustBeFlat && doc.break) {\n                      return false;\n                    }\n                    const groupMode = doc.break ? MODE_BREAK : mode;\n                    cmds.push([ind, groupMode, doc.expandedStates && groupMode === MODE_BREAK ? getLast(doc.expandedStates) : doc.contents]);\n                    if (doc.id) {\n                      groupModeMap[doc.id] = groupMode;\n                    }\n                    break;\n                  }\n                  case \"fill\":\n                    for (let i = doc.parts.length - 1; i >= 0; i--) {\n                      cmds.push([ind, mode, doc.parts[i]]);\n                    }\n                    break;\n                  case \"if-break\":\n                  case \"indent-if-break\": {\n                    const groupMode = doc.groupId ? groupModeMap[doc.groupId] : mode;\n                    if (groupMode === MODE_BREAK) {\n                      const breakContents = doc.type === \"if-break\" ? doc.breakContents : doc.negate ? doc.contents : indent(doc.contents);\n                      if (breakContents) {\n                        cmds.push([ind, mode, breakContents]);\n                      }\n                    }\n                    if (groupMode === MODE_FLAT) {\n                      const flatContents = doc.type === \"if-break\" ? doc.flatContents : doc.negate ? indent(doc.contents) : doc.contents;\n                      if (flatContents) {\n                        cmds.push([ind, mode, flatContents]);\n                      }\n                    }\n                    break;\n                  }\n                  case \"line\":\n                    switch (mode) {\n                      case MODE_FLAT:\n                        if (!doc.hard) {\n                          if (!doc.soft) {\n                            out.push(\" \");\n                            width -= 1;\n                          }\n                          break;\n                        }\n                        return true;\n                      case MODE_BREAK:\n                        return true;\n                    }\n                    break;\n                  case \"line-suffix\":\n                    hasLineSuffix = true;\n                    break;\n                  case \"line-suffix-boundary\":\n                    if (hasLineSuffix) {\n                      return false;\n                    }\n                    break;\n                  case \"label\":\n                    cmds.push([ind, mode, doc.contents]);\n                    break;\n                }\n              }\n            }\n            return false;\n          }\n          function printDocToString(doc, options) {\n            groupModeMap = {};\n            const width = options.printWidth;\n            const newLine = convertEndOfLineToChars(options.endOfLine);\n            let pos = 0;\n            const cmds = [[rootIndent(), MODE_BREAK, doc]];\n            const out = [];\n            let shouldRemeasure = false;\n            let lineSuffix = [];\n            while (cmds.length > 0) {\n              const [ind, mode, doc2] = cmds.pop();\n              if (typeof doc2 === \"string\") {\n                const formatted = newLine !== \"\\n\" ? doc2.replace(/\\n/g, newLine) : doc2;\n                out.push(formatted);\n                pos += getStringWidth(formatted);\n              } else if (isConcat(doc2)) {\n                const parts = getDocParts(doc2);\n                for (let i = parts.length - 1; i >= 0; i--) {\n                  cmds.push([ind, mode, parts[i]]);\n                }\n              } else {\n                switch (doc2.type) {\n                  case \"cursor\":\n                    out.push(cursor.placeholder);\n                    break;\n                  case \"indent\":\n                    cmds.push([makeIndent(ind, options), mode, doc2.contents]);\n                    break;\n                  case \"align\":\n                    cmds.push([makeAlign(ind, doc2.n, options), mode, doc2.contents]);\n                    break;\n                  case \"trim\":\n                    pos -= trim(out);\n                    break;\n                  case \"group\":\n                    switch (mode) {\n                      case MODE_FLAT:\n                        if (!shouldRemeasure) {\n                          cmds.push([ind, doc2.break ? MODE_BREAK : MODE_FLAT, doc2.contents]);\n                          break;\n                        }\n                      case MODE_BREAK: {\n                        shouldRemeasure = false;\n                        const next = [ind, MODE_FLAT, doc2.contents];\n                        const rem = width - pos;\n                        const hasLineSuffix = lineSuffix.length > 0;\n                        if (!doc2.break && fits(next, cmds, rem, options, hasLineSuffix)) {\n                          cmds.push(next);\n                        } else {\n                          if (doc2.expandedStates) {\n                            const mostExpanded = getLast(doc2.expandedStates);\n                            if (doc2.break) {\n                              cmds.push([ind, MODE_BREAK, mostExpanded]);\n                              break;\n                            } else {\n                              for (let i = 1; i < doc2.expandedStates.length + 1; i++) {\n                                if (i >= doc2.expandedStates.length) {\n                                  cmds.push([ind, MODE_BREAK, mostExpanded]);\n                                  break;\n                                } else {\n                                  const state = doc2.expandedStates[i];\n                                  const cmd = [ind, MODE_FLAT, state];\n                                  if (fits(cmd, cmds, rem, options, hasLineSuffix)) {\n                                    cmds.push(cmd);\n                                    break;\n                                  }\n                                }\n                              }\n                            }\n                          } else {\n                            cmds.push([ind, MODE_BREAK, doc2.contents]);\n                          }\n                        }\n                        break;\n                      }\n                    }\n                    if (doc2.id) {\n                      groupModeMap[doc2.id] = getLast(cmds)[1];\n                    }\n                    break;\n                  case \"fill\": {\n                    const rem = width - pos;\n                    const {\n                      parts\n                    } = doc2;\n                    if (parts.length === 0) {\n                      break;\n                    }\n                    const [content, whitespace] = parts;\n                    const contentFlatCmd = [ind, MODE_FLAT, content];\n                    const contentBreakCmd = [ind, MODE_BREAK, content];\n                    const contentFits = fits(contentFlatCmd, [], rem, options, lineSuffix.length > 0, true);\n                    if (parts.length === 1) {\n                      if (contentFits) {\n                        cmds.push(contentFlatCmd);\n                      } else {\n                        cmds.push(contentBreakCmd);\n                      }\n                      break;\n                    }\n                    const whitespaceFlatCmd = [ind, MODE_FLAT, whitespace];\n                    const whitespaceBreakCmd = [ind, MODE_BREAK, whitespace];\n                    if (parts.length === 2) {\n                      if (contentFits) {\n                        cmds.push(whitespaceFlatCmd, contentFlatCmd);\n                      } else {\n                        cmds.push(whitespaceBreakCmd, contentBreakCmd);\n                      }\n                      break;\n                    }\n                    parts.splice(0, 2);\n                    const remainingCmd = [ind, mode, fill(parts)];\n                    const secondContent = parts[0];\n                    const firstAndSecondContentFlatCmd = [ind, MODE_FLAT, [content, whitespace, secondContent]];\n                    const firstAndSecondContentFits = fits(firstAndSecondContentFlatCmd, [], rem, options, lineSuffix.length > 0, true);\n                    if (firstAndSecondContentFits) {\n                      cmds.push(remainingCmd, whitespaceFlatCmd, contentFlatCmd);\n                    } else if (contentFits) {\n                      cmds.push(remainingCmd, whitespaceBreakCmd, contentFlatCmd);\n                    } else {\n                      cmds.push(remainingCmd, whitespaceBreakCmd, contentBreakCmd);\n                    }\n                    break;\n                  }\n                  case \"if-break\":\n                  case \"indent-if-break\": {\n                    const groupMode = doc2.groupId ? groupModeMap[doc2.groupId] : mode;\n                    if (groupMode === MODE_BREAK) {\n                      const breakContents = doc2.type === \"if-break\" ? doc2.breakContents : doc2.negate ? doc2.contents : indent(doc2.contents);\n                      if (breakContents) {\n                        cmds.push([ind, mode, breakContents]);\n                      }\n                    }\n                    if (groupMode === MODE_FLAT) {\n                      const flatContents = doc2.type === \"if-break\" ? doc2.flatContents : doc2.negate ? indent(doc2.contents) : doc2.contents;\n                      if (flatContents) {\n                        cmds.push([ind, mode, flatContents]);\n                      }\n                    }\n                    break;\n                  }\n                  case \"line-suffix\":\n                    lineSuffix.push([ind, mode, doc2.contents]);\n                    break;\n                  case \"line-suffix-boundary\":\n                    if (lineSuffix.length > 0) {\n                      cmds.push([ind, mode, {\n                        type: \"line\",\n                        hard: true\n                      }]);\n                    }\n                    break;\n                  case \"line\":\n                    switch (mode) {\n                      case MODE_FLAT:\n                        if (!doc2.hard) {\n                          if (!doc2.soft) {\n                            out.push(\" \");\n                            pos += 1;\n                          }\n                          break;\n                        } else {\n                          shouldRemeasure = true;\n                        }\n                      case MODE_BREAK:\n                        if (lineSuffix.length > 0) {\n                          cmds.push([ind, mode, doc2], ...lineSuffix.reverse());\n                          lineSuffix = [];\n                          break;\n                        }\n                        if (doc2.literal) {\n                          if (ind.root) {\n                            out.push(newLine, ind.root.value);\n                            pos = ind.root.length;\n                          } else {\n                            out.push(newLine);\n                            pos = 0;\n                          }\n                        } else {\n                          pos -= trim(out);\n                          out.push(newLine + ind.value);\n                          pos = ind.length;\n                        }\n                        break;\n                    }\n                    break;\n                  case \"label\":\n                    cmds.push([ind, mode, doc2.contents]);\n                    break;\n                  default:\n                }\n              }\n              if (cmds.length === 0 && lineSuffix.length > 0) {\n                cmds.push(...lineSuffix.reverse());\n                lineSuffix = [];\n              }\n            }\n            const cursorPlaceholderIndex = out.indexOf(cursor.placeholder);\n            if (cursorPlaceholderIndex !== -1) {\n              const otherCursorPlaceholderIndex = out.indexOf(cursor.placeholder, cursorPlaceholderIndex + 1);\n              const beforeCursor = out.slice(0, cursorPlaceholderIndex).join(\"\");\n              const aroundCursor = out.slice(cursorPlaceholderIndex + 1, otherCursorPlaceholderIndex).join(\"\");\n              const afterCursor = out.slice(otherCursorPlaceholderIndex + 1).join(\"\");\n              return {\n                formatted: beforeCursor + aroundCursor + afterCursor,\n                cursorNodeStart: beforeCursor.length,\n                cursorNodeText: aroundCursor\n              };\n            }\n            return {\n              formatted: out.join(\"\")\n            };\n          }\n          module2.exports = {\n            printDocToString\n          };\n        }\n      });\n      var require_doc_debug = __commonJS2({\n        \"src/document/doc-debug.js\"(exports2, module2) {\n          \"use strict\";\n          init_define_process();\n          var {\n            isConcat,\n            getDocParts\n          } = require_doc_utils();\n          function flattenDoc(doc) {\n            if (!doc) {\n              return \"\";\n            }\n            if (isConcat(doc)) {\n              const res = [];\n              for (const part of getDocParts(doc)) {\n                if (isConcat(part)) {\n                  res.push(...flattenDoc(part).parts);\n                } else {\n                  const flattened = flattenDoc(part);\n                  if (flattened !== \"\") {\n                    res.push(flattened);\n                  }\n                }\n              }\n              return {\n                type: \"concat\",\n                parts: res\n              };\n            }\n            if (doc.type === \"if-break\") {\n              return Object.assign(Object.assign({}, doc), {}, {\n                breakContents: flattenDoc(doc.breakContents),\n                flatContents: flattenDoc(doc.flatContents)\n              });\n            }\n            if (doc.type === \"group\") {\n              return Object.assign(Object.assign({}, doc), {}, {\n                contents: flattenDoc(doc.contents),\n                expandedStates: doc.expandedStates && doc.expandedStates.map(flattenDoc)\n              });\n            }\n            if (doc.type === \"fill\") {\n              return {\n                type: \"fill\",\n                parts: doc.parts.map(flattenDoc)\n              };\n            }\n            if (doc.contents) {\n              return Object.assign(Object.assign({}, doc), {}, {\n                contents: flattenDoc(doc.contents)\n              });\n            }\n            return doc;\n          }\n          function printDocToDebug(doc) {\n            const printedSymbols = /* @__PURE__ */ Object.create(null);\n            const usedKeysForSymbols = /* @__PURE__ */ new Set();\n            return printDoc(flattenDoc(doc));\n            function printDoc(doc2, index, parentParts) {\n              if (typeof doc2 === \"string\") {\n                return JSON.stringify(doc2);\n              }\n              if (isConcat(doc2)) {\n                const printed = getDocParts(doc2).map(printDoc).filter(Boolean);\n                return printed.length === 1 ? printed[0] : \"[\".concat(printed.join(\", \"), \"]\");\n              }\n              if (doc2.type === \"line\") {\n                const withBreakParent = Array.isArray(parentParts) && parentParts[index + 1] && parentParts[index + 1].type === \"break-parent\";\n                if (doc2.literal) {\n                  return withBreakParent ? \"literalline\" : \"literallineWithoutBreakParent\";\n                }\n                if (doc2.hard) {\n                  return withBreakParent ? \"hardline\" : \"hardlineWithoutBreakParent\";\n                }\n                if (doc2.soft) {\n                  return \"softline\";\n                }\n                return \"line\";\n              }\n              if (doc2.type === \"break-parent\") {\n                const afterHardline = Array.isArray(parentParts) && parentParts[index - 1] && parentParts[index - 1].type === \"line\" && parentParts[index - 1].hard;\n                return afterHardline ? void 0 : \"breakParent\";\n              }\n              if (doc2.type === \"trim\") {\n                return \"trim\";\n              }\n              if (doc2.type === \"indent\") {\n                return \"indent(\" + printDoc(doc2.contents) + \")\";\n              }\n              if (doc2.type === \"align\") {\n                return doc2.n === Number.NEGATIVE_INFINITY ? \"dedentToRoot(\" + printDoc(doc2.contents) + \")\" : doc2.n < 0 ? \"dedent(\" + printDoc(doc2.contents) + \")\" : doc2.n.type === \"root\" ? \"markAsRoot(\" + printDoc(doc2.contents) + \")\" : \"align(\" + JSON.stringify(doc2.n) + \", \" + printDoc(doc2.contents) + \")\";\n              }\n              if (doc2.type === \"if-break\") {\n                return \"ifBreak(\" + printDoc(doc2.breakContents) + (doc2.flatContents ? \", \" + printDoc(doc2.flatContents) : \"\") + (doc2.groupId ? (!doc2.flatContents ? ', \"\"' : \"\") + \", { groupId: \".concat(printGroupId(doc2.groupId), \" }\") : \"\") + \")\";\n              }\n              if (doc2.type === \"indent-if-break\") {\n                const optionsParts = [];\n                if (doc2.negate) {\n                  optionsParts.push(\"negate: true\");\n                }\n                if (doc2.groupId) {\n                  optionsParts.push(\"groupId: \".concat(printGroupId(doc2.groupId)));\n                }\n                const options = optionsParts.length > 0 ? \", { \".concat(optionsParts.join(\", \"), \" }\") : \"\";\n                return \"indentIfBreak(\".concat(printDoc(doc2.contents)).concat(options, \")\");\n              }\n              if (doc2.type === \"group\") {\n                const optionsParts = [];\n                if (doc2.break && doc2.break !== \"propagated\") {\n                  optionsParts.push(\"shouldBreak: true\");\n                }\n                if (doc2.id) {\n                  optionsParts.push(\"id: \".concat(printGroupId(doc2.id)));\n                }\n                const options = optionsParts.length > 0 ? \", { \".concat(optionsParts.join(\", \"), \" }\") : \"\";\n                if (doc2.expandedStates) {\n                  return \"conditionalGroup([\".concat(doc2.expandedStates.map((part) => printDoc(part)).join(\",\"), \"]\").concat(options, \")\");\n                }\n                return \"group(\".concat(printDoc(doc2.contents)).concat(options, \")\");\n              }\n              if (doc2.type === \"fill\") {\n                return \"fill([\".concat(doc2.parts.map((part) => printDoc(part)).join(\", \"), \"])\");\n              }\n              if (doc2.type === \"line-suffix\") {\n                return \"lineSuffix(\" + printDoc(doc2.contents) + \")\";\n              }\n              if (doc2.type === \"line-suffix-boundary\") {\n                return \"lineSuffixBoundary\";\n              }\n              if (doc2.type === \"label\") {\n                return \"label(\".concat(JSON.stringify(doc2.label), \", \").concat(printDoc(doc2.contents), \")\");\n              }\n              throw new Error(\"Unknown doc type \" + doc2.type);\n            }\n            function printGroupId(id) {\n              if (typeof id !== \"symbol\") {\n                return JSON.stringify(String(id));\n              }\n              if (id in printedSymbols) {\n                return printedSymbols[id];\n              }\n              const prefix = String(id).slice(7, -1) || \"symbol\";\n              for (let counter = 0; ; counter++) {\n                const key = prefix + (counter > 0 ? \" #\".concat(counter) : \"\");\n                if (!usedKeysForSymbols.has(key)) {\n                  usedKeysForSymbols.add(key);\n                  return printedSymbols[id] = \"Symbol.for(\".concat(JSON.stringify(key), \")\");\n                }\n              }\n            }\n          }\n          module2.exports = {\n            printDocToDebug\n          };\n        }\n      });\n      init_define_process();\n      module.exports = {\n        builders: require_doc_builders(),\n        printer: require_doc_printer(),\n        utils: require_doc_utils(),\n        debug: require_doc_debug()\n      };\n    }\n  });\n  return require_doc_js_umd();\n});"],"file":"doc.js"}