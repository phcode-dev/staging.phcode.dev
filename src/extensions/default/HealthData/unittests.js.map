{"version":3,"sources":["extensions/default/HealthData/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","testWindow","PreferencesManager","describe","beforeEach","async","createTestWindowAndRun","afterEach","closeTestWindow","prefs","HealthDataManager","test","getExtensionPrefs","it","setViewState","Date","now","set","HealthDataPopup","showFirstLaunchTooltip","expect","$","document","find","length","toBe","HealthDataPreview","previewHealthData"],"mappings":"AA2BAA,OAAO,SAAUC,QAASC,QAASC,QAE/B,IAAIC,gBAAkBC,SAASC,UAAU,wBAErCC,WACAC,mBAEJC,SAAS,2BAA4B,WAEjCC,WAAWC,iBACPJ,iBAAmBH,gBAAgBQ,2BAGvCC,UAAUF,uBACAP,gBAAgBU,kBACtBP,WAAa,OAIjBE,SAAS,sBAAuB,WAC5B,IAAIM,MACAC,kBAEJN,WAAWC,iBACPH,mBAAqBD,WAAWF,SAASY,KAAKT,mBAC9CO,MAAQP,mBAAmBU,kBAAkB,cAC7CF,kBAAoBT,WAAWF,SAASY,KAAKD,oBAGjDH,UAAU,WACNG,kBAAoB,KACpBD,MAAQ,KACRP,mBAAqB,OAGzBW,GAAG,gDAAiD,WAChDX,mBAAmBY,aAAa,yBAA0BC,KAAKC,OAC/DP,MAAMQ,IAAI,sBAAsB,OAOxCd,SAAS,qBAAsB,WAC3B,IAAIe,gBAEJd,WAAW,WACPc,gBAAkBjB,WAAWF,SAASY,KAAKO,kBAG/CX,UAAU,WACNW,gBAAkB,OAGtBL,GAAG,iCAAkC,WAEjCK,gBAAgBC,yBAChBC,OAAOC,EAAEpB,WAAWqB,UAAUC,KAAK,iCAAiCC,QAAQC,KAAK,OAIzFtB,SAAS,sCAAuC,WAC5C,IAAIuB,kBAEJtB,WAAW,WACPsB,kBAAoBzB,WAAWF,SAASY,KAAKe,oBAGjDnB,UAAU,WACNmB,kBAAoB,OAGxBb,GAAG,kCAAmCR,iBAClCqB,kBAAkBC,oBAElBP,OAAOC,EAAEpB,WAAWqB,UAAUC,KAAK,iCAAiCC,QAAQC,KAAK","sourcesContent":["/*\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2015 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global describe, beforeEach, it, afterEach, expect */\n/*unittests: HealthData*/\n\ndefine(function (require, exports, module) {\n\n    var SpecRunnerUtils = brackets.getModule(\"spec/SpecRunnerUtils\");\n\n    var testWindow,\n        PreferencesManager;\n\n    describe(\"individualrun:HealthData\", function () {\n\n        beforeEach(async function () {\n            testWindow = await SpecRunnerUtils.createTestWindowAndRun();\n        });\n\n        afterEach(async function () {\n            await SpecRunnerUtils.closeTestWindow();\n            testWindow = null;\n        });\n\n\n        describe(\"Data Send to Server\", function () {\n            var prefs,\n                HealthDataManager;\n\n            beforeEach(async function () {\n                PreferencesManager = testWindow.brackets.test.PreferencesManager;\n                prefs = PreferencesManager.getExtensionPrefs(\"healthData\");\n                HealthDataManager = testWindow.brackets.test.HealthDataManager;\n            });\n\n            afterEach(function () {\n                HealthDataManager = null;\n                prefs = null;\n                PreferencesManager = null;\n            });\n\n            it(\"should not send data to server when opted out\", function () {\n                PreferencesManager.setViewState(\"nextHealthDataSendTime\", Date.now());\n                prefs.set(\"healthDataTracking\", false);\n                // TODO fix this test\n                // waitsForFail(promise, \"Send Data to Server\", 4000);\n            });\n\n        });\n\n        describe(\"Notification popup\", function () {\n            var HealthDataPopup;\n\n            beforeEach(function () {\n                HealthDataPopup = testWindow.brackets.test.HealthDataPopup;\n            });\n\n            afterEach(function () {\n                HealthDataPopup = null;\n            });\n\n            it(\"should show notification popup\", function () {\n                // TODO: write a test that verifies this actually shows *on a clean launch*, not just when API called...\n                HealthDataPopup.showFirstLaunchTooltip();\n                expect($(testWindow.document).find(\"#healthdata-firstlaunch-popup\").length).toBe(1);\n            });\n        });\n\n        describe(\"Health Data Statistics is displayed\", function () {\n            var HealthDataPreview;\n\n            beforeEach(function () {\n                HealthDataPreview = testWindow.brackets.test.HealthDataPreview;\n            });\n\n            afterEach(function () {\n                HealthDataPreview = null;\n            });\n\n            it(\"should show file preview dialog\", async function () {\n                HealthDataPreview.previewHealthData();\n\n                expect($(testWindow.document).find(\".health-data-preview.instance\").length).toBe(1);\n            });\n        });\n    });\n\n});\n"],"file":"unittests.js"}