{"version":3,"sources":["extensions/default/MDNDocs/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","main","InlineDocsViewer","testCSS","testHTML","describe","testCSSInfo","parseOffsetsFromText","testHTMLInfo","editor","doc","pos","async","queryInlineAtPos","info","offset","expectInline","expectedProperty","widget","promise","offsets","setSelection","_inlineProvider","expect","toBeTruthy","done","result","awaitsForDone","awaitsForFail","$htmlContent","find","text","toBe","toBeNull","it","json","_getDocs","awaitsFor","undefined","Object","keys","length","toBeGreaterThan","beforeEach","mock","createMockEditor","afterEach","destroyMockEditor","createCssPropDetails","summary","url","valuesArr","values","details","SUMMARY","URL","VALUES","forEach","value","push","title","description","prop","viewer","$a","$links","each","i","anchor","$","attr"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeEach, afterEach, awaitsFor, awaitsForDone, awaitsForFail */\n\ndefine(function (require, exports, module) {\n\n\n    var SpecRunnerUtils = brackets.getModule(\"spec/SpecRunnerUtils\");\n\n    var main                = require(\"main\"),\n        InlineDocsViewer    = require(\"InlineDocsViewer\"),\n        testCSS             = require(\"text!unittest-files/test1.css\"),\n        testHTML            = require(\"text!unittest-files/test1.html\");\n\n    describe(\"unit:MDNDocs\", function () {\n\n        var testCSSInfo     = SpecRunnerUtils.parseOffsetsFromText(testCSS),\n            testHTMLInfo    = SpecRunnerUtils.parseOffsetsFromText(testHTML),\n            editor,\n            doc,\n            pos;\n\n        async function queryInlineAtPos(info, offset, expectInline, expectedProperty) {\n            var widget = null,\n                promise;\n\n            // set cursor position in editor\n            pos = info.offsets[offset];\n            editor.setSelection(pos);\n\n            // fetch inline editor\n            promise = main._inlineProvider(editor, pos);\n\n            if (expectInline) {\n                expect(promise).toBeTruthy();\n            }\n\n            if (promise) {\n                promise.done(function (result) {\n                    widget = result;\n                });\n\n                if (expectInline) {\n                    // expecting a valid CSS property\n                    await awaitsForDone(promise, \"MDNDocs _inlineProvider\", 1000);\n                } else {\n                    // expecting an invalid css property\n                    await awaitsForFail(promise, \"MDNDocs _inlineProvider\", 1000);\n                }\n            }\n\n            if (promise) {\n                if (expectInline) {\n                    expect(widget).toBeTruthy();\n                    expect(widget.$htmlContent.find(\".css-prop-summary h1\").text()).toBe(expectedProperty);\n                } else {\n                    expect(widget).toBeNull();\n                }\n            }\n        }\n\n        describe(\"InlineDocsProvider database\", function () {\n\n            it(\"should retrieve the CSS docs database\", async function () {\n                var json;\n\n                main._getDocs(\"css.json\").done(function (result) {\n                    json = result;\n                });\n\n                await awaitsFor(function () { return json !== undefined; }, \"read css.json database\", 5000);\n\n                expect(Object.keys(json).length).toBeGreaterThan(0);\n            });\n\n            it(\"should retrieve the HTML docs database\", async function () {\n                var json;\n\n                main._getDocs(\"html.json\").done(function (result) {\n                    json = result;\n                });\n\n                await awaitsFor(function () { return json !== undefined; }, \"read html.json database\", 5000);\n\n                expect(Object.keys(json).length).toBeGreaterThan(0);\n            });\n\n        });\n\n        describe(\"InlineDocsProvider parsing in CSS\", function () {\n\n            beforeEach(function () {\n                var mock = SpecRunnerUtils.createMockEditor(testCSSInfo.text, \"css\");\n                editor = mock.editor;\n                doc = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(doc);\n            });\n\n            it(\"should open docs when the selection is on a CSS property\", async function () {\n                /* css property */\n                await queryInlineAtPos(testCSSInfo, 1, true, \"border\");\n\n                /* css value */\n                await queryInlineAtPos(testCSSInfo, 2, true, \"border\");\n            });\n\n            it(\"should not open docs when the selection is not on a CSS property\", async function () {\n                /* css selector */\n                await queryInlineAtPos(testCSSInfo, 0, false);\n\n                /* css comment */\n                await queryInlineAtPos(testCSSInfo, 5, false);\n            });\n\n            it(\"should not open docs for an invalid CSS property\", async function () {\n                /* css invalid property */\n                await queryInlineAtPos(testCSSInfo, 3, false);\n            });\n\n            it(\"should open docs for a vendor-prefixed CSS property\", async function () {\n                /* css -webkit- prefixed property */\n                await queryInlineAtPos(testCSSInfo, 6, true, \"animation\");\n            });\n\n            it(\"should not open docs for an invalid CSS property (looking like a vendor-prefixed one)\", async function () {\n                /* css property invalidly prefixed */\n                await queryInlineAtPos(testCSSInfo, 7, false);\n            });\n\n        });\n\n        describe(\"InlineDocsProvider parsing in HTML\", function () {\n\n            beforeEach(function () {\n                var mock = SpecRunnerUtils.createMockEditor(testHTMLInfo.text, \"html\");\n                editor = mock.editor;\n                doc = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(doc);\n            });\n\n            it(\"should open docs for CSS in a <style> block\", async function () {\n                await queryInlineAtPos(testHTMLInfo, 0, true, \"border\");\n            });\n\n            it(\"should open docs when the selection is on an HTML tag\", async function () {\n                await queryInlineAtPos(testHTMLInfo, 1, true, \"background-color\");\n            });\n\n            it(\"should not open docs when the selection is on an invalid HTML tag\", async function () {\n                await queryInlineAtPos(testHTMLInfo, 2, false);\n            });\n\n            it(\"should not open docs when the selection is not an HTML tag\", async function () {\n                /* Text */\n                await queryInlineAtPos(testHTMLInfo, 3, false);\n\n                /* Commented tag */\n                await queryInlineAtPos(testHTMLInfo, 4, false);\n            });\n\n            it(\"should open docs when the selection is on an HTML attribute\", async function () {\n                await queryInlineAtPos(testHTMLInfo, 5, true, \"<div>\");\n            });\n\n            it(\"should open docs for tag (fallback) when the selection is on an HTML attribute's value\", async function () {\n                await queryInlineAtPos(testHTMLInfo, 6, true, \"<div>\");\n            });\n\n            it(\"should open docs for tag (fallback) when the selection is on an invalid HTML attribute\", async function () {\n                await queryInlineAtPos(testHTMLInfo, 7, true, \"<div>\");\n            });\n\n            it(\"should not open docs when the selection is on an invalid HTML attribute on an invalid HTML tag\", async function () {\n                await queryInlineAtPos(testHTMLInfo, 8, false);\n            });\n\n        });\n\n        describe(\"InlineDocsViewer\", function () {\n\n            function createCssPropDetails(summary, url, valuesArr) {\n                var values = [],\n                    details = {\n                        SUMMARY: summary,\n                        URL: url,\n                        VALUES: values\n                    };\n\n                valuesArr.forEach(function (value) {\n                    values.push({\n                        title: value[0] || undefined,\n                        description: value[1] || undefined\n                    });\n                });\n\n                return details;\n            }\n\n            it(\"should add titles to all links\", function () {\n                var prop    = \"my-css-prop\",\n                    url     = \"http://dev.brackets.io/wiki/css/properties/my-css-prop\",\n                    details = createCssPropDetails(\n                        prop,\n                        url,\n                        [[\"normal\", \"See <a href='http://dev.brackets.io/wiki/css/properties/foo-css-prop'>foo-css-prop</a>\"]]\n                    ),\n                    viewer = new InlineDocsViewer(prop, details),\n                    $a,\n                    $links = viewer.$htmlContent.find(\"a:not(.close)\");\n\n                // 1 link in the description, 1 \"more info\" link in template\n                expect($links.length).toBe(2);\n\n                $links.each(function (i, anchor) {\n                    $a = $(anchor);\n\n                    // all links should have a title\n                    expect($a.attr(\"title\")).toBe($a.attr(\"href\"));\n                });\n            });\n\n        });\n\n    });\n});\n"],"file":"unittests.js"}