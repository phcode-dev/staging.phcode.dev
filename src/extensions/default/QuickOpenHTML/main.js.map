{"version":3,"sources":["extensions/default/QuickOpenHTML/main.js"],"names":["define","require","exports","module","EditorManager","brackets","getModule","QuickOpen","QuickOpenHelper","DocumentManager","StringMatch","FileLocation","fullPath","line","chFrom","chTo","id","this","createIDList","doc","getCurrentDocument","idList","docText","lines","getText","split","regex","RegExp","i","length","info","exec","indexOf","push","search","query","matcher","slice","filteredList","$","map","fileLocation","searchResult","match","basicMatchSort","addQuickOpenPlugin","name","languageIds","itemFocus","itemSelect"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,cAAsBC,SAASC,UAAU,wBACzCC,UAAsBF,SAASC,UAAU,oBACzCE,gBAAsBH,SAASC,UAAU,0BACzCG,gBAAsBJ,SAASC,UAAU,4BACzCI,YAAsBL,SAASC,UAAU,qBAY7C,SAASK,aAAaC,SAAUC,KAAMC,OAAQC,KAAMC,IAChDC,KAAKL,SAAWA,SAChBK,KAAKJ,KAAOA,KACZI,KAAKH,OAASA,OACdG,KAAKF,KAAOA,KACZE,KAAKD,GAAKA,GAQd,SAASE,eACL,IAAIC,IAAMV,gBAAgBW,qBAC1B,GAAKD,IAAL,CAIA,IAAIE,OAAS,GACTC,QACAC,MADUJ,IAAIK,UACEC,MAAM,MAEtBC,MAAQ,IAAIC,OAAO,iCACnBX,GAAIF,OAAQC,KAAMa,EAAGf,KACzB,IAAKe,EAAI,EAAGA,EAAIL,MAAMM,OAAQD,IAAK,CAE/B,IAAIE,KACJ,IAFAjB,KAAOU,MAAMK,GAEwB,QAA7BE,KAAOJ,MAAMK,KAAKlB,QACtBG,GAAKc,KAAK,GAKVf,MADAD,OAASD,KAAKmB,QAAQhB,KACNA,GAAGa,OACnBR,OAAOY,KAAK,IAAItB,aAAa,KAAMiB,EAAGd,OAAQC,KAAMC,KAG5D,OAAOK,QAQX,SAASa,OAAOC,MAAOC,SACnB,IAAIf,OAASe,QAAQf,OAChBA,SACDA,OAASH,eACTkB,QAAQf,OAASA,QAErBc,MAAQA,MAAME,MAAMF,MAAMH,QAAQ,KAAO,EAAGG,MAAMN,QAGlD,IAAIS,aAAeC,EAAEC,IAAInB,OAAQ,SAAUoB,cACvC,IAAIC,aAAeN,QAAQO,MAAMF,aAAazB,GAAImB,OAIlD,OAHIO,eACAA,aAAaD,aAAeA,cAEzBC,eAMX,OAFAhC,YAAYkC,eAAeN,cAEpBA,aAGX/B,UAAUsC,mBACN,CACIC,KAAM,WACNC,YAAa,CAAC,QACdb,OAAQA,OACRS,MAAOnC,gBAAgBmC,MACvBK,UAAWxC,gBAAgBwC,UAC3BC,WAAYzC,gBAAgByC","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    var EditorManager       = brackets.getModule(\"editor/EditorManager\"),\n        QuickOpen           = brackets.getModule(\"search/QuickOpen\"),\n        QuickOpenHelper     = brackets.getModule(\"search/QuickOpenHelper\"),\n        DocumentManager     = brackets.getModule(\"document/DocumentManager\"),\n        StringMatch         = brackets.getModule(\"utils/StringMatch\");\n\n\n   /**\n    * FileLocation class\n    * @constructor\n    * @param {string} fullPath\n    * @param {number} line\n    * @param {number} chFrom column start position\n    * @param {number} chTo column end position\n    * @param {string} id\n    */\n    function FileLocation(fullPath, line, chFrom, chTo, id) {\n        this.fullPath = fullPath;\n        this.line = line;\n        this.chFrom = chFrom;\n        this.chTo = chTo;\n        this.id = id;\n    }\n\n    /**\n     * Returns a list of information about ID's for a single document. This array is populated\n     * by createIDList()\n     * @type {?Array.<FileLocation>}\n     */\n    function createIDList() {\n        var doc = DocumentManager.getCurrentDocument();\n        if (!doc) {\n            return;\n        }\n\n        var idList = [];\n        var docText = doc.getText();\n        var lines = docText.split(\"\\n\");\n\n        var regex = new RegExp(/\\s+id\\s*?=\\s*?[\"'](.*?)[\"']/gi);\n        var id, chFrom, chTo, i, line;\n        for (i = 0; i < lines.length; i++) {\n            line = lines[i];\n            var info;\n            while ((info = regex.exec(line)) !== null) {\n                id = info[1];\n                // TODO: this doesn't handle id's that share the\n                // same portion of a name on the same line or when\n                // the id and value are on different lines\n                chFrom = line.indexOf(id);\n                chTo = chFrom + id.length;\n                idList.push(new FileLocation(null, i, chFrom, chTo, id));\n            }\n        }\n        return idList;\n    }\n\n\n    /**\n     * @param {string} query what the user is searching for\n     * @return {Array.<SearchResult>} sorted and filtered results that match the query\n     */\n    function search(query, matcher) {\n        var idList = matcher.idList;\n        if (!idList) {\n            idList = createIDList();\n            matcher.idList = idList;\n        }\n        query = query.slice(query.indexOf(\"@\") + 1, query.length);\n\n        // Filter and rank how good each match is\n        var filteredList = $.map(idList, function (fileLocation) {\n            var searchResult = matcher.match(fileLocation.id, query);\n            if (searchResult) {\n                searchResult.fileLocation = fileLocation;\n            }\n            return searchResult;\n        });\n\n        // Sort based on ranking & basic alphabetical order\n        StringMatch.basicMatchSort(filteredList);\n\n        return filteredList;\n    }\n\n    QuickOpen.addQuickOpenPlugin(\n        {\n            name: \"html ids\",\n            languageIds: [\"html\"],\n            search: search,\n            match: QuickOpenHelper.match,\n            itemFocus: QuickOpenHelper.itemFocus,\n            itemSelect: QuickOpenHelper.itemSelect\n        }\n    );\n\n});\n"],"file":"main.js"}