{"version":3,"sources":["extensions/default/Phoenix/serverSync.js"],"names":["define","require","exports","module","ProjectManager","brackets","getModule","DocumentManager","EditorManager","ExtensionUtils","Dialogs","Strings","StringUtils","DefaultDialogs","Metrics","syncRoot","$icon","userContext","publishURL","USER_CONTEXT","ongoingSyncCount","syncEnabled","projectSyncStarted","projectSyncCompleted","tab","previewURL","previewInProgress","_setupUserContext","localStorage","getItem","crypto","randomUUID","split","setItem","_getProjectPreviewURL","projectName","getProjectRoot","name","_uploadFile","filePath","blob","resolve","reject","console","log","uploadFormData","FormData","projectRoot","path","dirname","relativePath","relative","fileName","basename","append","$","ajax","url","type","data","cache","contentType","processData","success","r","error","_readAndUploadFile","file","Promise","fullPath","read","encoding","window","fs","BYTE_ARRAY_ENCODING","err","content","stat","Blob","_uploadFiles","fileList","doneCB","allPromises","push","all","then","_startSync","doneCb","_setSyncInProgress","newSyncRoot","newSyncPath","getAllFiles","files","length","showModalDialog","DIALOG_ID_ERROR","CANNOT_PUBLISH_LARGE_PROJECT","CANNOT_PUBLISH_LARGE_PROJECT_MESSAGE","_setSyncComplete","_projectOpened","allChangedFiles","async","_collectFiles","dirEntry","getContents","fsEntries","fsEntry","isDirectory","contentFiles","_projectFileChanged","target","entry","added","removed","attr","class","title","PUBLISH_SYNC_IN_PROGRESS","PUBLISH_VIEW_PAGE","_showPublishConsentDialogue","publishMessage","format","PUBLISH_CONSENT_MESSAGE","DIALOG_ID_INFO","SHARE_WEBSITE","className","DIALOG_BTN_CLASS_NORMAL","id","DIALOG_BTN_CANCEL","text","CANCEL","DIALOG_BTN_CLASS_PRIMARY","DIALOG_BTN_OK","PUBLISH","done","_loadPreview","_isPreviewableFile","pathSplit","extension","includes","toLowerCase","projectRootUrl","currentDocument","getCurrentDocument","currentFile","getSelectedItem","closed","open","location","_addToolbarIcon","syncButtonID","href","PUBLISH_PAGE","appendTo","on","countEvent","EVENT_TYPE","SHARING","uniqueFilesToUpload","Set","setInterval","init","EVENT_PROJECT_OPEN","EVENT_PROJECT_FILE_CHANGED","loadStyleSheet"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global fs, Phoenix, path*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/* jshint ignore:start */\n\ndefine(function (require, exports, module) {\n\n    const ProjectManager          = brackets.getModule(\"project/ProjectManager\"),\n        DocumentManager     = brackets.getModule(\"document/DocumentManager\"),\n        EditorManager       = brackets.getModule(\"editor/EditorManager\"),\n        ExtensionUtils      = brackets.getModule(\"utils/ExtensionUtils\"),\n        Dialogs             = brackets.getModule(\"widgets/Dialogs\"),\n        Strings             = brackets.getModule(\"strings\"),\n        StringUtils         = brackets.getModule(\"utils/StringUtils\"),\n        DefaultDialogs      = brackets.getModule(\"widgets/DefaultDialogs\"),\n        Metrics             = brackets.getModule(\"utils/Metrics\");\n\n    let syncRoot = \"\";\n    let $icon;\n    let userContext = \"\";\n    let publishURL = \"https://phcode.site\";\n    const USER_CONTEXT = \"publish.userContext\";\n    let ongoingSyncCount = 0;\n    let syncEnabled = false;\n    let projectSyncStarted = false;\n    let projectSyncCompleted = false;\n    let tab = null;\n    let previewURL;\n    let previewInProgress = false;\n\n    function _setupUserContext() {\n        userContext = localStorage.getItem(USER_CONTEXT);\n        if(!userContext){\n            userContext = crypto.randomUUID().split(\"-\")[0];\n            localStorage.setItem(USER_CONTEXT, userContext);\n        }\n    }\n\n    function _getProjectPreviewURL() {\n        let projectName = ProjectManager.getProjectRoot().name;\n        return `${publishURL}/p/${userContext}/${projectName}`;\n    }\n\n    function _uploadFile(filePath, blob, resolve, reject) {\n        console.log('Uploading file for preview: ', filePath);\n        let uploadFormData = new FormData();\n        let projectRoot = path.dirname(syncRoot);\n        let relativePath = path.relative(projectRoot, filePath);\n        let fileName = path.basename(filePath);\n        uploadFormData.append(\"path\", `${userContext}/${path.dirname(relativePath)}`);\n        uploadFormData.append(\"files\", blob, fileName);\n        $.ajax({\n            url: publishURL + '/upload',\n            type: \"POST\",\n            data: uploadFormData,\n            cache: false,\n            contentType: false,\n            processData: false,\n            success: function(r) {\n                resolve();\n            },\n            error: function(r) {\n                reject();\n            }\n        });\n    }\n\n    function _readAndUploadFile(file) {\n        return new Promise((resolve, reject)=>{\n            if(file.fullPath === '/fs/app/state.json'){\n                // somehow we get these changes as project file changes too. don't sync state file\n                resolve();\n                return;\n            }\n            file.read({encoding: window.fs.BYTE_ARRAY_ENCODING}, function (err, content, encoding, stat) {\n                if (err){\n                    reject(err);\n                    return;\n                }\n                let blob = new Blob([content], {type:\"application/octet-stream\"});\n                _uploadFile(file.fullPath, blob, resolve, reject);\n            });\n        });\n    }\n\n    function _uploadFiles(fileList, doneCB) {\n        let allPromises = [];\n        for(let file of fileList){\n            allPromises.push(_readAndUploadFile(file));\n        }\n        Promise.all(allPromises).then(()=>{\n            doneCB();\n        });\n    }\n\n    function _startSync(doneCb) {\n        if(!syncEnabled){\n            return;\n        }\n        projectSyncStarted = true;\n        projectSyncCompleted = false;\n        _setSyncInProgress();\n        let newSyncRoot = ProjectManager.getProjectRoot();\n        let newSyncPath = newSyncRoot.fullPath;\n        if(newSyncPath !== syncRoot){\n            syncRoot = newSyncPath;\n            ProjectManager.getAllFiles().then((files)=>{\n                if(files.length > 500){\n                    Dialogs.showModalDialog(\n                        DefaultDialogs.DIALOG_ID_ERROR,\n                        Strings.CANNOT_PUBLISH_LARGE_PROJECT,\n                        Strings.CANNOT_PUBLISH_LARGE_PROJECT_MESSAGE\n                    );\n                    _setSyncComplete();\n                    if(doneCb){\n                        doneCb();\n                    }\n                    return;\n                }\n                _uploadFiles(files, ()=>{\n                    projectSyncCompleted = true;\n                    if(doneCb){\n                        doneCb();\n                    }\n                    _setSyncComplete();\n                });\n            });\n        }\n    }\n\n    function _projectOpened() {\n        syncEnabled = false;\n        projectSyncStarted = false;\n        projectSyncCompleted = false;\n        previewURL = null;\n    }\n\n    let allChangedFiles = [];\n    async function _collectFiles(dirEntry) {\n        return new Promise((resolve, reject)=>{\n            dirEntry.getContents(async (err,fsEntries)=>{\n                if(err){\n                    reject(err);\n                }\n                for(let fsEntry of fsEntries){\n                    if(fsEntry.isDirectory){\n                        let contentFiles = await _collectFiles(fsEntry);\n                        allChangedFiles.push(...contentFiles);\n                    } else {\n                        allChangedFiles.push(fsEntry);\n                    }\n                }\n            });\n            resolve(allChangedFiles);\n        });\n    }\n\n    async function _projectFileChanged(target, entry, added, removed) {\n        if(!syncEnabled){\n            return;\n        }\n        if(entry){\n            if(entry.isDirectory){\n                await _collectFiles(entry);\n            } else {\n                allChangedFiles.push(entry);\n            }\n        }\n    }\n\n    function _setSyncInProgress() {\n        ongoingSyncCount = ongoingSyncCount+1;\n        $icon.attr({\n            class: \"syncing\",\n            title: Strings.PUBLISH_SYNC_IN_PROGRESS\n        });\n    }\n\n    function _setSyncComplete() {\n        ongoingSyncCount = ongoingSyncCount-1;\n        if(ongoingSyncCount ===0){\n            $icon.attr({\n                class: \"preview\",\n                title: Strings.PUBLISH_VIEW_PAGE\n            });\n        }\n    }\n\n    function _showPublishConsentDialogue() {\n        if(projectSyncStarted){\n            return;\n        }\n        let publishMessage = StringUtils.format(Strings.PUBLISH_CONSENT_MESSAGE,\n            `<a href=\"${_getProjectPreviewURL()}\">${_getProjectPreviewURL()}</a>`);\n        Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_INFO,\n            Strings.SHARE_WEBSITE,\n            publishMessage,\n            [\n                {\n                    className: Dialogs.DIALOG_BTN_CLASS_NORMAL,\n                    id: Dialogs.DIALOG_BTN_CANCEL,\n                    text: Strings.CANCEL\n                },\n                {\n                    className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                    id: Dialogs.DIALOG_BTN_OK,\n                    text: Strings.PUBLISH\n                }\n            ]\n        )\n            .done(function (id) {\n                if (id === Dialogs.DIALOG_BTN_OK) {\n                    syncEnabled = true;\n                    _startSync(()=>{\n                        previewInProgress = true;\n                        _loadPreview();\n                    });\n                }\n            });\n    }\n\n    function _isPreviewableFile(filePath) {\n        let pathSplit = filePath.split('.');\n        let extension = pathSplit && pathSplit.length>1 ? pathSplit[pathSplit.length-1] : null;\n        if(['html', 'htm', 'jpg', 'jpeg', 'png', 'svg', 'pdf', 'xml'].includes(extension.toLowerCase())){\n            return true;\n        }\n        return false;\n    }\n\n    function _loadPreview() {\n        if(!previewInProgress){\n            return;\n        }\n        let projectRootUrl = _getProjectPreviewURL();\n        let currentDocument = DocumentManager.getCurrentDocument();\n        let currentFile = currentDocument? currentDocument.file : ProjectManager.getSelectedItem();\n        if(currentFile){\n            let fullPath = currentFile.fullPath;\n            let projectRoot = ProjectManager.getProjectRoot().fullPath;\n            let relativePath = path.relative(projectRoot, fullPath);\n            if(_isPreviewableFile(relativePath)){\n                previewURL = `${projectRootUrl}/${relativePath}`;\n            }\n        }\n\n        if(!previewURL){\n            previewURL = projectRootUrl;\n        }\n        if(!tab || tab.closed){\n            tab = open(previewURL);\n        }\n        else {\n            tab.location = previewURL;\n        }\n    }\n\n    function _addToolbarIcon() {\n        const syncButtonID = \"sync-button\";\n        $icon = $(\"<a>\")\n            .attr({\n                id: syncButtonID,\n                href: \"#\",\n                class: \"preview\",\n                title: Strings.PUBLISH_PAGE\n            })\n            .appendTo($(\"#main-toolbar .buttons\"));\n        $icon.on('click', ()=>{\n            Metrics.countEvent(Metrics.EVENT_TYPE.SHARING, \"shareIcon\", \"clicked\");\n            if(projectSyncCompleted){\n                previewInProgress = true;\n                _setSyncInProgress();\n                let uniqueFilesToUpload = [...new Set(allChangedFiles)];\n                allChangedFiles = [];\n                _uploadFiles(uniqueFilesToUpload, ()=>{\n                    _setSyncComplete();\n                    _loadPreview();\n                });\n            }\n            _showPublishConsentDialogue();\n        });\n    }\n\n    setInterval(()=>{\n        // periodically check if the preview tab is manually closed by user. We do this by light polling as\n        // we cannot attach an onTabClosed event to the tab.\n        if(previewInProgress && (!tab || tab.closed)){\n            previewInProgress = false;\n        }\n    }, 500);\n\n    exports.init = function () {\n        _addToolbarIcon();\n        _setupUserContext();\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _projectOpened);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED, _projectFileChanged);\n        EditorManager.on(\"activeEditorChange\", _loadPreview);\n    };\n\n    ExtensionUtils.loadStyleSheet(module, \"styles.css\");\n});\n"],"file":"serverSync.js"}