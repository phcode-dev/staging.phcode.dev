{"version":3,"sources":["extensions/default/Phoenix/guided-tour.js"],"names":["define","require","exports","module","NotificationUI","brackets","getModule","LiveDevelopment","ExtensionInterface","WorkspaceManager","MainViewManager","CommandManager","Commands","Strings","Menus","StringUtils","KeyBindingManager","Metrics","NOTIFICATION_BACKOFF","GUIDED_TOUR_LOCAL_STORAGE_KEY","userAlreadyDidAction","localStorage","getItem","JSON","parse","version","clickedNewProjectIcon","beautifyCodeShown","currentlyShowingNotification","_shouldContinueCommandTracking","_startCommandTracking","commandTracker","_event","commandID","write","FILE_NEW_PROJECT","setItem","stringify","off","EVENT_BEFORE_EXECUTE_COMMAND","on","_showBeautifyNotification","editorContextMenu","getContextMenu","ContextMenuIds","EDITOR_MENU","_showNotification","setTimeout","keyboardShortcut","getKeyBindings","EDIT_BEAUTIFY_CODE","displayKey","countEvent","EVENT_TYPE","UI","createFromTemplate","format","BEAUTIFY_CODE_NOTIFICATION","allowedPlacements","autoCloseTimeS","dismissOnClick","done","EVENT_BEFORE_CONTEXT_MENU_OPEN","_showNewProjectNotification","NEW_PROJECT_NOTIFICATION","EVENT_CURRENT_FILE_CHANGE","_showPopoutLivePreviewNotification","waitAndGetExtensionInterface","_DEFAULT_EXTENSIONS_INTERFACE_NAMES","PHOENIX_LIVE_PREVIEW","then","livePreviewExtension","notificationKey","popoutMessageShown","isPanelVisible","LIVE_PREVIEW_PANEL_ID","GUIDED_LIVE_PREVIEW_POPOUT","EVENT_LIVE_PREVIEW_CLICKED","_showLivePreviewNotification","livePreviewNotificationKey","livePreviewNotificationShown","GUIDED_LIVE_PREVIEW","startTourIfNeeded"],"mappings":"AAoBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,eAAiBC,SAASC,UAAU,0BACtCC,gBAAmBF,SAASC,UAAU,wBACtCE,mBAAqBH,SAASC,UAAU,4BACxCG,iBAAmBJ,SAASC,UAAU,yBACtCI,gBAAmBL,SAASC,UAAU,wBACtCK,eAAiBN,SAASC,UAAU,0BACpCM,SAAWP,SAASC,UAAU,oBAC9BO,QAAUR,SAASC,UAAU,WAC7BQ,MAAQT,SAASC,UAAU,iBAC3BS,YAAcV,SAASC,UAAU,qBACjCU,kBAAoBX,SAASC,UAAU,6BACvCW,QAAUZ,SAASC,UAAU,iBAC7BY,qBAAuB,IACvBC,8BAAgC,oBAE9BC,qBAAuBC,aAAaC,QAAQH,+BAC5CI,KAAKC,MAAMH,aAAaC,QAAQH,gCAAkC,CAChEM,QAAS,EACTC,uBAAuB,EACvBC,mBAAmB,GAI3B,IAAIC,6BAEJ,SAASC,iCACL,OAAST,qBAAqBM,sBAGlC,SAASI,wBAIL,SAASC,eAAeC,OAAQC,WAC5B,IAAIC,OAAQ,EACZ,OAAOD,WACP,KAAKrB,SAASuB,iBAAkBf,qBAAqBM,uBAAwB,EAAMQ,OAAQ,EAExFA,OACCb,aAAae,QAAQjB,8BAA+BI,KAAKc,UAAUjB,uBAEnES,kCACAlB,eAAe2B,IAAI3B,eAAe4B,6BAA8BR,gBAZpEF,kCAeJlB,eAAe6B,GAAG7B,eAAe4B,6BAA8BR,gBAcnE,SAASU,4BACL,GAAGrB,qBAAqBO,kBACpB,OAEJ,IAAIe,kBAAoB5B,MAAM6B,eAAe7B,MAAM8B,eAAeC,aAClE,SAASC,oBACFlB,8BAGHmB,WAAW,KACP,IAAIC,iBAAmBhC,kBAAkBiC,eAAerC,SAASsC,oBACjEF,iBAAoBA,kBAAoBA,iBAAiB,GAAMA,iBAAiB,GAAGG,WAAa,IAChG/B,qBAAqBO,mBAAqB,EAC1CN,aAAae,QAAQjB,8BAA+BI,KAAKc,UAAUjB,uBACnEH,QAAQmC,WAAWnC,QAAQoC,WAAWC,GAAI,QAAS,aACnD1B,6BAA+BxB,eAAemD,mBAC1CxC,YAAYyC,OAAO3C,QAAQ4C,2BAA4BT,kBACvD,wCAAyC,CACrCU,kBAAmB,CAAC,OAAQ,SAC5BC,eAAgB,GAChBC,gBAAgB,KAEKC,KAAK,KAC9BjC,6BAA+B,OAEnCc,kBAAkBJ,IAAIxB,MAAMgD,+BAAgChB,oBAC7D,KAEPJ,kBAAkBF,GAAG1B,MAAMgD,+BAAgChB,mBAK/D,SAASiB,8BAIL,SAASjB,oBACFlB,+BAGHX,QAAQmC,WAAWnC,QAAQoC,WAAWC,GAAI,QAAS,YACnD1B,6BAA+BxB,eAAemD,mBAAmB1C,QAAQmD,yBACrE,aAAc,CACVN,kBAAmB,CAAC,MAAO,UAC3BC,eAAgB,GAChBC,gBAAgB,KAEKC,KAAK,KAC9BjC,6BAA+B,OAEnClB,gBAAgB4B,IAAI5B,gBAAgBuD,0BAA2BnB,oBAjBhE1B,qBAAqBM,uBAmBxBhB,gBAAgB8B,GAAG9B,gBAAgBuD,0BAA2BnB,mBAIlE,SAASoB,qCACL1D,mBAAmB2D,6BACf3D,mBAAmB4D,oCAAoCC,sBAAsBC,KAAMC,uBACnF,SAASzB,oBAEL,IAAI0B,gBAAkB,yBAA0B/C,QAAU,KACtDgD,mBADsD,OACjCpD,aAAaC,QAAQkD,iBAM3C5C,+BAGAnB,iBAAiBiE,eAAeH,qBAAqBI,yBACpD1D,QAAQmC,WAAWnC,QAAQoC,WAAWC,GAAI,QAAS,cACnD1B,6BAA+BxB,eAAemD,mBAAmB1C,QAAQ+D,2BACrE,0BAA2B,CACvBlB,kBAAmB,CAAC,UACpBC,eAAgB,GAChBC,gBAAgB,KAEKC,KAAK,KAC9BjC,6BAA+B,OAEnCP,aAAae,QAAQoC,gBArBiC,OAuB1DjE,gBAAgB+B,IAAI/B,gBAAgBsE,2BAA4B/B,oBAnB5DvC,gBAAgB+B,IAAI/B,gBAAgBsE,2BAA4B/B,mBAqBxEvC,gBAAgBiC,GAAGjC,gBAAgBsE,2BAA4B/B,qBAMvE,SAASgC,+BAEL,MAAMC,2BAA6B,8BAC7BC,6BAA+B3D,aAAaC,QAAQyD,4BACvDC,+BAGApD,6BACCmB,WAAW+B,6BAA8B5D,uBAG7CU,6BAA+BxB,eAAemD,mBAAmB1C,QAAQoE,oBACrE,eAAgB,CACZvB,kBAAmB,CAAC,QACpBC,eAAgB,GAChBC,gBAAgB,IAExBvC,aAAae,QAAQ2C,2BAA4B,QACjDnD,6BAA6BiC,KAAK,KAC9BjC,6BAA+B,SAIvC1B,QAAQgF,kBAAoB,WACxBJ,+BACAZ,qCACAH,8BACAjC,wBACAW","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n    const NotificationUI = brackets.getModule(\"widgets/NotificationUI\"),\n        LiveDevelopment  = brackets.getModule(\"LiveDevelopment/main\"),\n        ExtensionInterface = brackets.getModule(\"utils/ExtensionInterface\"),\n        WorkspaceManager = brackets.getModule(\"view/WorkspaceManager\"),\n        MainViewManager  = brackets.getModule(\"view/MainViewManager\"),\n        CommandManager = brackets.getModule(\"command/CommandManager\"),\n        Commands = brackets.getModule(\"command/Commands\"),\n        Strings = brackets.getModule(\"strings\"),\n        Menus = brackets.getModule(\"command/Menus\"),\n        StringUtils = brackets.getModule(\"utils/StringUtils\"),\n        KeyBindingManager = brackets.getModule(\"command/KeyBindingManager\"),\n        Metrics = brackets.getModule(\"utils/Metrics\"),\n        NOTIFICATION_BACKOFF = 10000,\n        GUIDED_TOUR_LOCAL_STORAGE_KEY = \"guidedTourActions\";\n\n    const userAlreadyDidAction = localStorage.getItem(GUIDED_TOUR_LOCAL_STORAGE_KEY)\n        ? JSON.parse(localStorage.getItem(GUIDED_TOUR_LOCAL_STORAGE_KEY)) : {\n            version: 1,\n            clickedNewProjectIcon: false,\n            beautifyCodeShown: false\n        };\n\n    // we should only show one notification at a time\n    let currentlyShowingNotification;\n\n    function _shouldContinueCommandTracking() {\n        return (!userAlreadyDidAction.clickedNewProjectIcon); // use or ||\n    }\n\n    function _startCommandTracking() {\n        if(!_shouldContinueCommandTracking()){\n            return;\n        }\n        function commandTracker(_event, commandID) {\n            let write = false;\n            switch(commandID) {\n            case Commands.FILE_NEW_PROJECT: userAlreadyDidAction.clickedNewProjectIcon = true; write = true; break;\n            }\n            if(write){\n                localStorage.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            }\n            if(!_shouldContinueCommandTracking()){\n                CommandManager.off(CommandManager.EVENT_BEFORE_EXECUTE_COMMAND, commandTracker);\n            }\n        }\n        CommandManager.on(CommandManager.EVENT_BEFORE_EXECUTE_COMMAND, commandTracker);\n    }\n\n    /* Order of things in first boot now:\n    *  1. First we show the popup in new project window to select default project - see the html in assets folder\n    *  2. Then after user opens default project, we show \"edit code for live preview popup\"\n    *  3. When user changes file by clicking on files panel, we show \"click here to open new project window\"\n    *     this will continue showing every session until user clicks on the new project icon\n    *  4. After about 3 minutes, the health popup will show up.\n    *  5. When user clicks on live preview, we show \"click here to popout live preview\"\n    *  6. Beautification notification when user opened the editor context menu and have not done any beautification yet.\n    * */\n\n    // 3. Beautification notification when user opened the editor context menu for the first time\n    function _showBeautifyNotification() {\n        if(userAlreadyDidAction.beautifyCodeShown){\n            return;\n        }\n        let editorContextMenu = Menus.getContextMenu(Menus.ContextMenuIds.EDITOR_MENU);\n        function _showNotification() {\n            if(currentlyShowingNotification){\n                return;\n            }\n            setTimeout(()=>{\n                let keyboardShortcut = KeyBindingManager.getKeyBindings(Commands.EDIT_BEAUTIFY_CODE);\n                keyboardShortcut = (keyboardShortcut && keyboardShortcut[0]) ? keyboardShortcut[0].displayKey : \"-\";\n                userAlreadyDidAction.beautifyCodeShown =  true;\n                localStorage.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n                Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"beautify\");\n                currentlyShowingNotification = NotificationUI.createFromTemplate(\n                    StringUtils.format(Strings.BEAUTIFY_CODE_NOTIFICATION, keyboardShortcut),\n                    \"editor-context-menu-edit.beautifyCode\", {\n                        allowedPlacements: ['left', 'right'],\n                        autoCloseTimeS: 15,\n                        dismissOnClick: true}\n                );\n                currentlyShowingNotification.done(()=>{\n                    currentlyShowingNotification = null;\n                });\n                editorContextMenu.off(Menus.EVENT_BEFORE_CONTEXT_MENU_OPEN, _showNotification);\n            }, 500);\n        }\n        editorContextMenu.on(Menus.EVENT_BEFORE_CONTEXT_MENU_OPEN, _showNotification);\n    }\n\n    // 3. When user changes file by clicking on files panel, we show \"click here to open new project window\"\n    // this will continue showing every session until user clicks on the new project icon\n    function _showNewProjectNotification() {\n        if(userAlreadyDidAction.clickedNewProjectIcon){\n            return;\n        }\n        function _showNotification() {\n            if(currentlyShowingNotification){\n                return;\n            }\n            Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"newProj\");\n            currentlyShowingNotification = NotificationUI.createFromTemplate(Strings.NEW_PROJECT_NOTIFICATION,\n                \"newProject\", {\n                    allowedPlacements: ['top', 'bottom'],\n                    autoCloseTimeS: 15,\n                    dismissOnClick: true}\n            );\n            currentlyShowingNotification.done(()=>{\n                currentlyShowingNotification = null;\n            });\n            MainViewManager.off(MainViewManager.EVENT_CURRENT_FILE_CHANGE, _showNotification);\n        }\n        MainViewManager.on(MainViewManager.EVENT_CURRENT_FILE_CHANGE, _showNotification);\n    }\n\n    // 1. When user clicks on live preview, we show \"click here to popout live preview\". only shown once.\n    function _showPopoutLivePreviewNotification() {\n        ExtensionInterface.waitAndGetExtensionInterface(\n            ExtensionInterface._DEFAULT_EXTENSIONS_INTERFACE_NAMES.PHOENIX_LIVE_PREVIEW).then((livePreviewExtension)=>{\n            function _showNotification() {\n                // legacy key. cant change without triggering the user base\n                let notificationKey = 'livePreviewPopoutShown', version = \"v1\";\n                let popoutMessageShown = localStorage.getItem(notificationKey);\n                if(popoutMessageShown === version){\n                    // already shown\n                    LiveDevelopment.off(LiveDevelopment.EVENT_LIVE_PREVIEW_CLICKED, _showNotification);\n                    return;\n                }\n                if(currentlyShowingNotification){\n                    return;\n                }\n                if(WorkspaceManager.isPanelVisible(livePreviewExtension.LIVE_PREVIEW_PANEL_ID)){\n                    Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"lp_popout\");\n                    currentlyShowingNotification = NotificationUI.createFromTemplate(Strings.GUIDED_LIVE_PREVIEW_POPOUT,\n                        \"livePreviewPopoutButton\", {\n                            allowedPlacements: ['bottom'],\n                            autoCloseTimeS: 15,\n                            dismissOnClick: true}\n                    );\n                    currentlyShowingNotification.done(()=>{\n                        currentlyShowingNotification = null;\n                    });\n                    localStorage.setItem(notificationKey, version);\n                }\n                LiveDevelopment.off(LiveDevelopment.EVENT_LIVE_PREVIEW_CLICKED, _showNotification);\n            }\n            LiveDevelopment.on(LiveDevelopment.EVENT_LIVE_PREVIEW_CLICKED, _showNotification);\n        });\n    }\n\n    // only shown once on first boot\n    // order: 2. Then after user opens default project, we show \"edit code for live preview popup\"\n    function _showLivePreviewNotification() {\n        // legacy reasons live preview notification is called new project notification.\n        const livePreviewNotificationKey = \"newProjectNotificationShown\";\n        const livePreviewNotificationShown = localStorage.getItem(livePreviewNotificationKey);\n        if(livePreviewNotificationShown){\n            return;\n        }\n        if(currentlyShowingNotification){\n            setTimeout(_showLivePreviewNotification, NOTIFICATION_BACKOFF);\n            return;\n        }\n        currentlyShowingNotification = NotificationUI.createFromTemplate(Strings.GUIDED_LIVE_PREVIEW,\n            \"main-toolbar\", {\n                allowedPlacements: ['left'],\n                autoCloseTimeS: 15,\n                dismissOnClick: true}\n        );\n        localStorage.setItem(livePreviewNotificationKey, \"true\");\n        currentlyShowingNotification.done(()=>{\n            currentlyShowingNotification = null;\n        });\n    }\n\n    exports.startTourIfNeeded = function () {\n        _showLivePreviewNotification();\n        _showPopoutLivePreviewNotification();\n        _showNewProjectNotification();\n        _startCommandTracking();\n        _showBeautifyNotification();\n    };\n});\n"],"file":"guided-tour.js"}