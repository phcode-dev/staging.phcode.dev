{"version":3,"sources":["extensions/default/Phoenix/newly-added-features.js"],"names":["define","require","exports","module","FileViewController","brackets","getModule","DocumentManager","FileSystem","FileUtils","Dialogs","DefaultDialogs","Strings","Metrics","_getUpdateMarkdownURL","Phoenix","baseURL","_getUpdateMarkdownLocalPath","VFS","getDefaultProjectDir","async","_getUpdateMarkdownText","Promise","resolve","reject","fetch","then","response","text","catch","_showNewFeatureMarkdownDoc","setTimeout","openFileAndAddToWorkingSet","countEvent","EVENT_TYPE","PLATFORM","_showReloadForUpdateDialog","window","updatePendingReload","showModalDialog","DIALOG_ID_INFO","UPDATE_AVAILABLE_TITLE","UPDATE_RELOAD_APP","updatePendingReloadReason","_readMarkdownTextFile","markdownFile","getFileForPath","jsPromise","getDocumentText","e","_showNewUpdatesIfPresent","newMarkdownText","replace","currentMarkdownText","writeText","done","fail","console","error","init","firstBoot","testEnvironment"],"mappings":"AAsBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,mBAAwBC,SAASC,UAAU,8BAC7CC,gBAAkBF,SAASC,UAAU,4BACrCE,WAAaH,SAASC,UAAU,yBAChCG,UAAYJ,SAASC,UAAU,kBAC/BI,QAAUL,SAASC,UAAU,mBAC7BK,eAAiBN,SAASC,UAAU,0BACpCM,QAAUP,SAASC,UAAU,WAC7BO,QAAUR,SAASC,UAAU,iBAEjC,SAASQ,wBACL,OAAOC,QAAQC,QAAU,oDAG7B,SAASC,8BACL,OAAOF,QAAQG,IAAIC,uBAAyB,0BAGhDC,eAAeC,yBACX,OAAO,IAAIC,QAAQ,CAACC,QAASC,UACzBC,MAAMX,yBACDY,KAAKC,UAAYA,SAASC,QAC1BF,KAAKN,eAAgBQ,MAClBL,QAAQK,QAEXC,MAAML,UAInB,SAASM,6BAELC,WAAW,KACP3B,mBAAmB4B,2BAA2Bf,+BAC9CJ,QAAQoB,WAAWpB,QAAQqB,WAAWC,SAAU,YAAa,UAC9D,KAGP,SAASC,6BACLL,WAAW,KACJM,OAAOtB,QAAQuB,sBACd5B,QAAQ6B,gBACJ5B,eAAe6B,eACf5B,QAAQ6B,uBACR7B,QAAQ8B,mBAEZ7B,QAAQoB,WAAWpB,QAAQqB,WAAWC,SAAU,YAC5CE,OAAOtB,QAAQ4B,2BAA6B,WAErD,KAGPvB,eAAewB,wBACX,IACI,IAAIC,aAAerC,WAAWsC,eAAe7B,+BAC7C,aAAaoB,OAAOU,UAAUxC,gBAAgByC,gBAAgBH,eAChE,MAAMI,GACJ,MAAO,IAIf7B,eAAe8B,2BAEX,IAAIC,uBAAyB9B,0BAA0B+B,QAAQ,MAAO,IAClEC,oBACJ,GAAGF,yBAD8BP,yBAAyBQ,QAAQ,MAAO,IAC9B,CACvC,IAAIP,aAAerC,WAAWsC,eAAe7B,+BAE7CR,UAAU6C,UAAUT,aAAcM,iBAAiB,GAC9CI,KAAKzB,4BACL0B,KAAMP,IACHQ,QAAQC,MAAM,qDAAsDT,KAGhFb,6BAGJlC,QAAQyD,KAAO,WACP5C,QAAQ6C,WAAcvB,OAAOwB,iBAC7BX","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals Phoenix*/\n\ndefine(function (require, exports, module) {\n    const FileViewController    = brackets.getModule(\"project/FileViewController\"),\n        DocumentManager = brackets.getModule(\"document/DocumentManager\"),\n        FileSystem = brackets.getModule(\"filesystem/FileSystem\"),\n        FileUtils = brackets.getModule(\"file/FileUtils\"),\n        Dialogs = brackets.getModule(\"widgets/Dialogs\"),\n        DefaultDialogs = brackets.getModule(\"widgets/DefaultDialogs\"),\n        Strings = brackets.getModule(\"strings\"),\n        Metrics = brackets.getModule(\"utils/Metrics\");\n\n    function _getUpdateMarkdownURL() {\n        return Phoenix.baseURL + \"assets/default-project/en/Newly_added_features.md\";\n    }\n\n    function _getUpdateMarkdownLocalPath() {\n        return Phoenix.VFS.getDefaultProjectDir() + \"Newly_added_features.md\";\n    }\n\n    async function _getUpdateMarkdownText() {\n        return new Promise((resolve, reject)=>{\n            fetch(_getUpdateMarkdownURL())\n                .then(response => response.text())\n                .then(async function (text) {\n                    resolve(text);\n                })\n                .catch(reject);\n        });\n    }\n\n    function _showNewFeatureMarkdownDoc() {\n        // We wait for few seconds after boot to grab user attention\n        setTimeout(()=>{\n            FileViewController.openFileAndAddToWorkingSet(_getUpdateMarkdownLocalPath());\n            Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"newFeatMD\", \"shown\");\n        }, 3000);\n    }\n\n    function _showReloadForUpdateDialog() {\n        setTimeout(()=>{\n            if(window.Phoenix.updatePendingReload){\n                Dialogs.showModalDialog(\n                    DefaultDialogs.DIALOG_ID_INFO,\n                    Strings.UPDATE_AVAILABLE_TITLE,\n                    Strings.UPDATE_RELOAD_APP\n                );\n                Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"updateDlg\",\n                    window.Phoenix.updatePendingReloadReason || \"shown\");\n            }\n        }, 5000);\n    }\n\n    async function _readMarkdownTextFile() {\n        try{\n            let markdownFile = FileSystem.getFileForPath(_getUpdateMarkdownLocalPath());\n            return await window.jsPromise(DocumentManager.getDocumentText(markdownFile));\n        } catch(e){\n            return \"\";\n        }\n    }\n\n    async function _showNewUpdatesIfPresent() {\n        // codemirror documents are always \\n instead of \\r\\n line endings. so we strip here too\n        let newMarkdownText = (await _getUpdateMarkdownText()).replace(/\\r/g, '');\n        let currentMarkdownText = (await _readMarkdownTextFile()).replace(/\\r/g, '');\n        if(newMarkdownText !== currentMarkdownText){\n            let markdownFile = FileSystem.getFileForPath(_getUpdateMarkdownLocalPath());\n            // if the user overwrites the markdown file, then the user edited content will be nuked here.\n            FileUtils.writeText(markdownFile, newMarkdownText, true)\n                .done(_showNewFeatureMarkdownDoc)\n                .fail((e)=>{\n                    console.error(\"Error while showing new feature markdown on update\", e);\n                });\n        }\n        _showReloadForUpdateDialog();\n    }\n\n    exports.init = function () {\n        if(!Phoenix.firstBoot && !window.testEnvironment){\n            _showNewUpdatesIfPresent();\n        }\n    };\n});\n"],"file":"newly-added-features.js"}