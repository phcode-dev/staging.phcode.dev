{"version":3,"sources":["thirdparty/CodeMirror/addon/fold/comment-fold.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","registerGlobalHelper","mode","blockCommentStart","blockCommentEnd","cm","start","getModeAt","startToken","endToken","line","lineText","getLine","startCh","at","ch","pass","found","lastIndexOf","test","getTokenTypeAt","Pos","slice","length","depth","lastLine","end","endCh","outer","i","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,qBAAqB,OAAQ,UAAW,SAASC,MAC1D,OAAOA,KAAKC,mBAAqBD,KAAKE,iBACrC,SAASC,GAAIC,OACd,IAAIJ,KAAOG,GAAGE,UAAUD,OAAQE,WAAaN,KAAKC,kBAAmBM,SAAWP,KAAKE,gBACrF,GAAKI,YAAeC,SAApB,CAIA,IAHA,IAAIC,KAAOJ,MAAMI,KAAMC,SAAWN,GAAGO,QAAQF,MAEzCG,QACKC,GAAKR,MAAMS,GAAIC,KAAO,IAAK,CAClC,IAAIC,MAAQH,IAAM,GAAK,EAAIH,SAASO,YAAYV,WAAYM,GAAK,GACjE,IAAc,GAAVG,MAAJ,CAMA,GAAY,GAARD,MAAaC,MAAQX,MAAMS,GAAI,OACnC,GAAI,UAAUI,KAAKd,GAAGe,eAAepB,WAAWqB,IAAIX,KAAMO,MAAQ,OACpD,GAATA,OAAcN,SAASW,MAAML,MAAQR,SAASc,OAAQN,QAAUR,WAC/D,UAAUU,KAAKd,GAAGe,eAAepB,WAAWqB,IAAIX,KAAMO,UAAW,CACrEJ,QAAUI,MAAQT,WAAWe,OAC7B,MAEFT,GAAKG,MAAQ,MAbb,CACE,GAAY,GAARD,KAAW,OACfA,KAAO,EACPF,GAAKH,SAASY,QAalB,IAAIC,MAAQ,EAAGC,SAAWpB,GAAGoB,WAAYC,IAAKC,MAC9CC,MAAO,IAAK,IAAIC,EAAInB,KAAMmB,GAAKJ,WAAYI,EAEzC,IADA,IAAIC,KAAOzB,GAAGO,QAAQiB,GAAIE,IAAMF,GAAKnB,KAAOG,QAAU,IAC7C,CACP,IAAImB,SAAWF,KAAKG,QAAQzB,WAAYuB,KAAMG,UAAYJ,KAAKG,QAAQxB,SAAUsB,KAIjF,GAHIC,SAAW,IAAGA,SAAWF,KAAKP,QAC9BW,UAAY,IAAGA,UAAYJ,KAAKP,SACpCQ,IAAMI,KAAKC,IAAIJ,SAAUE,aACdJ,KAAKP,OAAQ,MACxB,GAAIQ,KAAOC,WAAYR,WAClB,MAAOA,MAAO,CAAEE,IAAMG,EAAGF,MAAQI,IAAK,MAAMH,QAC/CG,IAGN,GAAW,MAAPL,MAAehB,MAAQgB,KAAOC,OAASd,SAC3C,MAAO,CAACwB,KAAMrC,WAAWqB,IAAIX,KAAMG,SAC3ByB,GAAItC,WAAWqB,IAAIK,IAAKC","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerGlobalHelper(\"fold\", \"comment\", function(mode) {\n  return mode.blockCommentStart && mode.blockCommentEnd;\n}, function(cm, start) {\n  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n  if (!startToken || !endToken) return;\n  var line = start.line, lineText = cm.getLine(line);\n\n  var startCh;\n  for (var at = start.ch, pass = 0;;) {\n    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n    if (found == -1) {\n      if (pass == 1) return;\n      pass = 1;\n      at = lineText.length;\n      continue;\n    }\n    if (pass == 1 && found < start.ch) return;\n    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) &&\n        (found == 0 || lineText.slice(found - endToken.length, found) == endToken ||\n         !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n      startCh = found + startToken.length;\n      break;\n    }\n    at = found - 1;\n  }\n\n  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (pos == nextOpen) ++depth;\n      else if (!--depth) { end = i; endCh = pos; break outer; }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\n});\n"],"file":"comment-fold.js"}