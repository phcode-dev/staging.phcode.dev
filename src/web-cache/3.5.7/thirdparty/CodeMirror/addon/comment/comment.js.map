{"version":3,"sources":["thirdparty/CodeMirror/addon/comment/comment.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","noOptions","nonWS","Pos","cmp","cmpPos","firstNonWS","str","found","search","probablyInsideString","cm","pos","line","test","getTokenTypeAt","getMode","mode","useInnerComments","innerMode","getModeAt","commands","toggleComment","defineExtension","options","this","minLine","Infinity","ranges","listSelections","i","length","from","to","uncomment","lineComment","self","firstLine","getLine","commentString","end","Math","min","ch","lastLine","pad","padding","blankLines","commentBlankLines","operation","indent","baseString","whitespace","slice","cut","replaceRange","blockCommentStart","fullLines","blockComment","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","atCursor","getCursor","empty","somethingSelected","setSelection","start","lineString","lines","didSomething","indexOf","push","endPos","startLine","open","endLine","close","insideStart","insideEnd","getRange","lastStart","lastIndexOf","firstEnd","almostLastStart","openEnd","foundEnd"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACV,aAEA,IAAIC,UAAY,GACZC,MAAQ,cACRC,IAAMH,WAAWG,IAAKC,IAAMJ,WAAWK,OAE3C,SAASC,WAAWC,KAClB,IAAIC,MAAQD,IAAIE,OAAOP,OACvB,OAAiB,GAAVM,MAAc,EAAIA,MA4B3B,SAASE,qBAAqBC,GAAIC,IAAKC,MACrC,MAAO,aAAaC,KAAKH,GAAGI,eAAeZ,IAAIS,IAAIC,KAAM,OAAS,YAAYC,KAAKD,MAGrF,SAASG,QAAQL,GAAIC,KACnB,IAAIK,KAAON,GAAGK,UACd,OAAiC,IAA1BC,KAAKC,kBAA+BD,KAAKE,UAAmBR,GAAGS,UAAUR,KAApBK,KA/B9DjB,WAAWqB,SAASC,cAAgB,SAASX,IAC3CA,GAAGW,iBAGLtB,WAAWuB,gBAAgB,gBAAiB,SAASC,SAC9CA,UAASA,QAAUvB,WAGxB,IAFA,IAAIU,GAAKc,KACLC,QAAUC,EAAAA,EAAUC,OAASH,KAAKI,iBAAkBZ,KAAO,KACtDa,EAAIF,OAAOG,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC3C,IAAIE,KAAOJ,OAAOE,GAAGE,OAAQC,GAAKL,OAAOE,GAAGG,KACxCD,KAAKnB,MAAQa,UACbO,GAAGpB,MAAQa,UAASO,GAAK9B,IAAIuB,QAAS,IAC1CA,QAAUM,KAAKnB,KACH,MAARI,KACEN,GAAGuB,UAAUF,KAAMC,GAAIT,SAAUP,KAAO,MACrCN,GAAGwB,YAAYH,KAAMC,GAAIT,SAAUP,KAAO,QAChC,MAARA,KACTN,GAAGuB,UAAUF,KAAMC,GAAIT,SAEvBb,GAAGwB,YAAYH,KAAMC,GAAIT,aAe/BxB,WAAWuB,gBAAgB,cAAe,SAASS,KAAMC,GAAIT,SACtDA,UAASA,QAAUvB,WACxB,IAAImC,KAAOX,KAAMR,KAAOD,QAAQoB,KAAMJ,MAClCK,UAAYD,KAAKE,QAAQN,KAAKnB,MAClC,GAAiB,MAAbwB,YAAqB3B,qBAAqB0B,KAAMJ,KAAMK,WAA1D,CAEA,IAAIE,cAAgBf,QAAQW,aAAelB,KAAKkB,YAChD,GAAKI,cAAL,CAQA,IAAIC,IAAMC,KAAKC,IAAa,GAATT,GAAGU,IAAWV,GAAGpB,MAAQmB,KAAKnB,KAAOoB,GAAGpB,KAAO,EAAIoB,GAAGpB,KAAMuB,KAAKQ,WAAa,GAC7FC,IAAyB,MAAnBrB,QAAQsB,QAAkB,IAAMtB,QAAQsB,QAC9CC,WAAavB,QAAQwB,mBAAqBhB,KAAKnB,MAAQoB,GAAGpB,KAE9DuB,KAAKa,UAAU,WACb,GAAIzB,QAAQ0B,OAAQ,CAElB,IADA,IAAIC,WAAa,KACRrB,EAAIE,KAAKnB,KAAMiB,EAAIU,MAAOV,EAAG,CACpC,IAAIjB,KACAuC,YAAqC,KADrCvC,KAAOuB,KAAKE,QAAQR,IACFrB,OAAOP,OAAgBW,KAAOA,KAAKwC,MAAM,EAAG/C,WAAWO,QAC3D,MAAdsC,YAAsBA,WAAWpB,OAASqB,WAAWrB,UACvDoB,WAAaC,YAGjB,IAAK,IAAItB,EAAIE,KAAKnB,KAAMiB,EAAIU,MAAOV,EAAG,CACpC,IAAIjB,KAAOuB,KAAKE,QAAQR,GAAIwB,IAAMH,WAAWpB,QACxCgB,YAAe7C,MAAMY,KAAKD,SAC3BA,KAAKwC,MAAM,EAAGC,MAAQH,aAAYG,IAAMhD,WAAWO,OACvDuB,KAAKmB,aAAaJ,WAAaZ,cAAgBM,IAAK1C,IAAI2B,EAAG,GAAI3B,IAAI2B,EAAGwB,aAGxE,IAAK,IAAIxB,EAAIE,KAAKnB,KAAMiB,EAAIU,MAAOV,GAC7BiB,YAAc7C,MAAMY,KAAKsB,KAAKE,QAAQR,MACxCM,KAAKmB,aAAahB,cAAgBM,IAAK1C,IAAI2B,EAAG,WA9BhDN,QAAQgC,mBAAqBvC,KAAKuC,qBACpChC,QAAQiC,WAAY,EACpBrB,KAAKsB,aAAa1B,KAAMC,GAAIT,aAkClCxB,WAAWuB,gBAAgB,eAAgB,SAASS,KAAMC,GAAIT,SACvDA,UAASA,QAAUvB,WACxB,IAAImC,KAAOX,KAAMR,KAAOD,QAAQoB,KAAMJ,MAClC2B,YAAcnC,QAAQgC,mBAAqBvC,KAAKuC,kBAChDI,UAAYpC,QAAQqC,iBAAmB5C,KAAK4C,gBAChD,GAAKF,aAAgBC,WAKrB,IAAI,cAAc9C,KAAKsB,KAAKrB,eAAeZ,IAAI6B,KAAKnB,KAAM,KAA1D,CAEA,IAAI2B,IAAMC,KAAKC,IAAIT,GAAGpB,KAAMuB,KAAKQ,YAC7BJ,KAAOR,KAAKnB,MAAiB,GAAToB,GAAGU,IAAWzC,MAAMY,KAAKsB,KAAKE,QAAQE,SAASA,IAEvE,IAAIK,IAAyB,MAAnBrB,QAAQsB,QAAkB,IAAMtB,QAAQsB,QAC9Cd,KAAKnB,KAAO2B,KAEhBJ,KAAKa,UAAU,WACb,GAAyB,GAArBzB,QAAQiC,UAAoB,CAC9B,IAAIK,gBAAkB5D,MAAMY,KAAKsB,KAAKE,QAAQE,MAC9CJ,KAAKmB,aAAaV,IAAMe,UAAWzD,IAAIqC,MACvCJ,KAAKmB,aAAaI,YAAcd,IAAK1C,IAAI6B,KAAKnB,KAAM,IACpD,IAAIkD,KAAOvC,QAAQwC,kBAAoB/C,KAAK+C,iBAC5C,GAAY,MAARD,KAAc,IAAK,IAAIjC,EAAIE,KAAKnB,KAAO,EAAGiB,GAAKU,MAAOV,GACpDA,GAAKU,KAAOsB,kBACd1B,KAAKmB,aAAaQ,KAAOlB,IAAK1C,IAAI2B,EAAG,QACpC,CACL,IAAImC,SAA4C,GAAjC7D,IAAIgC,KAAK8B,UAAU,MAAOjC,IAAUkC,OAAS/B,KAAKgC,oBACjEhC,KAAKmB,aAAaK,UAAW3B,IACzBgC,UAAU7B,KAAKiC,aAAaF,MAAQlC,GAAKG,KAAK8B,UAAU,QAASjC,IACrEG,KAAKmB,aAAaI,YAAa3B,eAzB5BR,QAAQW,aAAelB,KAAKkB,cAAqC,GAArBX,QAAQiC,WACvDrB,KAAKD,YAAYH,KAAMC,GAAIT,WA6BjCxB,WAAWuB,gBAAgB,YAAa,SAASS,KAAMC,GAAIT,SACpDA,UAASA,QAAUvB,WACxB,IAAImC,KAAOX,KAAMR,KAAOD,QAAQoB,KAAMJ,MAClCQ,IAAMC,KAAKC,IAAa,GAATT,GAAGU,IAAWV,GAAGpB,MAAQmB,KAAKnB,KAAOoB,GAAGpB,KAAOoB,GAAGpB,KAAO,EAAGuB,KAAKQ,YAAa0B,MAAQ7B,KAAKC,IAAIV,KAAKnB,KAAM2B,KAGzH+B,WAAa/C,QAAQW,aAAelB,KAAKkB,YAAaqC,MAAQ,GAC9D3B,IAAyB,MAAnBrB,QAAQsB,QAAkB,IAAMtB,QAAQsB,QAAS2B,aAC3DtC,YACE,GAAKoC,WAAL,CACA,IAAK,IAAIzC,EAAIwC,MAAOxC,GAAKU,MAAOV,EAAG,CACjC,IAAIjB,KAAOuB,KAAKE,QAAQR,GACpBtB,MAAQK,KAAK6D,QAAQH,YAEzB,GADI/D,OAAS,IAAM,UAAUM,KAAKsB,KAAKrB,eAAeZ,IAAI2B,EAAGtB,MAAQ,OAAMA,OAAS,IACtE,GAAVA,OAAeN,MAAMY,KAAKD,MAAO,MAAMsB,YAC3C,GAAI3B,OAAS,GAAKN,MAAMY,KAAKD,KAAKwC,MAAM,EAAG7C,QAAS,MAAM2B,YAC1DqC,MAAMG,KAAK9D,MAYb,GAVAuB,KAAKa,UAAU,WACb,IAAK,IAAInB,EAAIwC,MAAOxC,GAAKU,MAAOV,EAAG,CACjC,IAAIjB,KAAO2D,MAAM1C,EAAIwC,OACjB1D,IAAMC,KAAK6D,QAAQH,YAAaK,OAAShE,IAAM2D,WAAWxC,OAC1DnB,IAAM,IACNC,KAAKwC,MAAMuB,OAAQA,OAAS/B,IAAId,SAAWc,MAAK+B,QAAU/B,IAAId,QAClE0C,cAAe,EACfrC,KAAKmB,aAAa,GAAIpD,IAAI2B,EAAGlB,KAAMT,IAAI2B,EAAG8C,aAG1CH,aAAc,OAAO,EAI3B,IAAId,YAAcnC,QAAQgC,mBAAqBvC,KAAKuC,kBAChDI,UAAYpC,QAAQqC,iBAAmB5C,KAAK4C,gBAChD,IAAKF,cAAgBC,UAAW,OAAO,EACvC,IAAIG,KAAOvC,QAAQwC,kBAAoB/C,KAAK+C,iBACxCa,UAAYzC,KAAKE,QAAQgC,OAAQQ,KAAOD,UAAUH,QAAQf,aAC9D,IAAa,GAATmB,KAAY,OAAO,EACvB,IAAIC,QAAUvC,KAAO8B,MAAQO,UAAYzC,KAAKE,QAAQE,KAClDwC,MAAQD,QAAQL,QAAQd,UAAWpB,KAAO8B,MAAQQ,KAAOnB,YAAY5B,OAAS,GAC9EkD,YAAc9E,IAAImE,MAAOQ,KAAO,GAAII,UAAY/E,IAAIqC,IAAKwC,MAAQ,GACrE,IAAc,GAAVA,QACC,UAAUlE,KAAKsB,KAAKrB,eAAekE,gBACnC,UAAUnE,KAAKsB,KAAKrB,eAAemE,aACpC9C,KAAK+C,SAASF,YAAaC,UAAW,MAAMR,QAAQd,YAAc,EACpE,OAAO,EAIT,IAAIwB,UAAYP,UAAUQ,YAAY1B,YAAa3B,KAAKW,IACpD2C,UAAyB,GAAdF,WAAmB,EAAIP,UAAUxB,MAAM,EAAGrB,KAAKW,IAAI+B,QAAQd,UAAWwB,UAAYzB,YAAY5B,QAC7G,IAAkB,GAAdqD,YAAgC,GAAbE,UAAkBA,SAAW1B,UAAU7B,QAAUC,KAAKW,GAAI,OAAO,EAExF2C,SAAWP,QAAQL,QAAQd,UAAW3B,GAAGU,IACzC,IAAI4C,gBAAkBR,QAAQ1B,MAAMpB,GAAGU,IAAI0C,YAAY1B,YAAa2B,SAAWrD,GAAGU,IAElF,OADAyC,WAA0B,GAAbE,WAAsC,GAApBC,iBAA0B,EAAItD,GAAGU,GAAK4C,kBACpD,GAAbD,WAAgC,GAAdF,WAAmBA,WAAanD,GAAGU,MAEzDP,KAAKa,UAAU,WACbb,KAAKmB,aAAa,GAAIpD,IAAIqC,IAAKwC,OAASnC,KAAOkC,QAAQ1B,MAAM2B,MAAQnC,IAAId,OAAQiD,QAAUnC,IAAMA,IAAId,OAAS,IAC5F5B,IAAIqC,IAAKwC,MAAQpB,UAAU7B,SAC7C,IAAIyD,QAAUV,KAAOnB,YAAY5B,OAGjC,GAFIc,KAAOgC,UAAUxB,MAAMmC,QAASA,QAAU3C,IAAId,SAAWc,MAAK2C,SAAW3C,IAAId,QACjFK,KAAKmB,aAAa,GAAIpD,IAAImE,MAAOQ,MAAO3E,IAAImE,MAAOkB,UAC/CzB,KAAM,IAAK,IAAIjC,EAAIwC,MAAQ,EAAGxC,GAAKU,MAAOV,EAAG,CAC/C,IAAIjB,KAAOuB,KAAKE,QAAQR,GAAItB,MAAQK,KAAK6D,QAAQX,MACjD,IAAc,GAAVvD,QAAeN,MAAMY,KAAKD,KAAKwC,MAAM,EAAG7C,QAA5C,CACA,IAAIiF,SAAWjF,MAAQuD,KAAKhC,OACxBc,KAAOhC,KAAKwC,MAAMoC,SAAUA,SAAW5C,IAAId,SAAWc,MAAK4C,UAAY5C,IAAId,QAC/EK,KAAKmB,aAAa,GAAIpD,IAAI2B,EAAGtB,OAAQL,IAAI2B,EAAG2D,gBAGzC","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos, cmp = CodeMirror.cmpPos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.search(nonWS) === -1 ? line : line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        var atCursor = cmp(self.getCursor(\"to\"), to) == 0, empty = !self.somethingSelected()\n        self.replaceRange(endString, to);\n        if (atCursor) self.setSelection(empty ? to : self.getCursor(\"from\"), to)\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n"],"file":"comment.js"}