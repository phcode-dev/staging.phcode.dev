{"version":3,"sources":["thirdparty/CodeMirror/mode/haskell-literate/haskell-literate.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","baseMode","getMode","base","startState","inCode","baseState","token","stream","state","sol","eat","skipToEnd","innerMode","mode","defineMIME"],"mappings":"CAGA,SAAWA,KACa,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,wBAAyBA,QAAQ,uBACrB,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,uBAAwB,sBAAuBJ,KAEvDA,IAAIM,YANR,CAOG,SAAUA,YACX,aAEAA,WAAWC,WAAW,mBAAoB,SAAUC,OAAQC,cAC1D,IAAIC,SAAWJ,WAAWK,QAAQH,OAASC,cAAgBA,aAAaG,MAAS,WAEjF,MAAO,CACLC,WAAY,WACV,MAAO,CACLC,QAAQ,EACRC,UAAWT,WAAWO,WAAWH,YAGrCM,MAAO,SAAUC,OAAQC,OACvB,OAAID,OAAOE,QACLD,MAAMJ,OAASG,OAAOG,IAAI,MACrB,OAEPF,MAAMJ,OACDJ,SAASM,MAAMC,OAAQC,MAAMH,YAEpCE,OAAOI,YACA,YAGXC,UAAW,SAAUJ,OACnB,OAAOA,MAAMJ,OAAS,CAACI,MAAOA,MAAMH,UAAWQ,KAAMb,UAAY,QAGpE,WAEHJ,WAAWkB,WAAW,0BAA2B","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../haskell/haskell\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../haskell/haskell\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n  \"use strict\"\n\n  CodeMirror.defineMode(\"haskell-literate\", function (config, parserConfig) {\n    var baseMode = CodeMirror.getMode(config, (parserConfig && parserConfig.base) || \"haskell\")\n\n    return {\n      startState: function () {\n        return {\n          inCode: false,\n          baseState: CodeMirror.startState(baseMode)\n        }\n      },\n      token: function (stream, state) {\n        if (stream.sol()) {\n          if (state.inCode = stream.eat(\">\"))\n            return \"meta\"\n        }\n        if (state.inCode) {\n          return baseMode.token(stream, state.baseState)\n        } else {\n          stream.skipToEnd()\n          return \"comment\"\n        }\n      },\n      innerMode: function (state) {\n        return state.inCode ? {state: state.baseState, mode: baseMode} : null\n      }\n    }\n  }, \"haskell\")\n\n  CodeMirror.defineMIME(\"text/x-literate-haskell\", \"haskell-literate\")\n});\n"],"file":"haskell-literate.js"}