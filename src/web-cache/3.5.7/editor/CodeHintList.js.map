{"version":3,"sources":["editor/CodeHintList.js"],"names":["define","require","exports","module","KeyBindingManager","Menus","KeyEvent","StringUtils","ValidationUtils","ViewUtils","PopUpManager","Mustache","CodeHintListHTML","CodeHintList","editor","insertHintOnTab","maxResults","this","hints","selectedIndex","isIntegerInRange","opened","pendingText","handleSelect","handleClose","$hintMenu","$","append","hide","_keydownHook","bind","prototype","_setSelectedIndex","index","items","find","Math","max","min","length","removeClass","$item","$view","addClass","scrollElementIntoView","handleHighlight","addPendingText","text","removePendingText","indexOf","slice","_buildListView","hintObj","self","match","selectInitial","view","_addHint","handleWideResults","enableDescription","name","displayName","replace","RegExp","regexEscape","push","formattedHint","hint","remove","some","item","$ul","$parent","parent","render","children","each","element","$element","data","jquery","on","e","stopPropagation","_calcHintListLocation","cursor","_codeMirror","cursorCoords","posTop","bottom","posLeft","left","textHeight","getTextHeight","$window","window","$menuWindow","$descElement","descOverhang","height","menuHeight","outerHeight","bottomOverhang","menuWidth","width","availableWidth","rightOverhang","abs","descOffset","getBoundingClientRect","css","top","isHandlingKeyCode","keyCodeOrEvent","keyCode","ctrlKey","DOM_VK_UP","DOM_VK_DOWN","DOM_VK_PAGE_UP","DOM_VK_PAGE_DOWN","DOM_VK_RETURN","DOM_VK_CONTROL","DOM_VK_ESCAPE","DOM_VK_SPACE","DOM_VK_TAB","event","isFakeKeydown","_rotateSelection","distance","len","pos","_itemsPerPage","itemsPerPage","$items","itemHeight","floor","isOpen","type","stopImmediatePropagation","shiftKey","call","trigger","preventDefault","hasClass","open","closeAll","hintPos","addGlobalKeydownHook","update","callMoveUp","close","removePopUp","removeGlobalKeydownHook","onSelect","callback","onHighlight","onClose"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var KeyBindingManager = require(\"command/KeyBindingManager\"),\n        Menus             = require(\"command/Menus\"),\n        KeyEvent          = require(\"utils/KeyEvent\"),\n        StringUtils       = require(\"utils/StringUtils\"),\n        ValidationUtils   = require(\"utils/ValidationUtils\"),\n        ViewUtils         = require(\"utils/ViewUtils\"),\n        PopUpManager      = require(\"widgets/PopUpManager\"),\n        Mustache          = require(\"thirdparty/mustache/mustache\");\n\n    var CodeHintListHTML  = require(\"text!htmlContent/code-hint-list.html\");\n\n    /**\n     * Displays a popup list of hints for a given editor context.\n     *\n     * @constructor\n     * @param {Editor} editor\n     * @param {boolean} insertHintOnTab Whether pressing tab inserts the selected hint\n     * @param {number} maxResults Maximum hints displayed at once. Defaults to 50\n     */\n    function CodeHintList(editor, insertHintOnTab, maxResults) {\n\n        /**\n         * The list of hints to display\n         *\n         * @type {Array.<string|jQueryObject>}\n         */\n        this.hints = [];\n\n        /**\n         * The selected position in the list; otherwise -1.\n         *\n         * @type {number}\n         */\n        this.selectedIndex = -1;\n\n        /**\n         * The maximum number of hints to display. Can be overriden via maxCodeHints pref\n         *\n         * @type {number}\n         */\n        this.maxResults = ValidationUtils.isIntegerInRange(maxResults, 1, 1000) ? maxResults : 50;\n\n        /**\n         * Is the list currently open?\n         *\n         * @type {boolean}\n         */\n        this.opened = false;\n\n        /**\n         * The editor context\n         *\n         * @type {Editor}\n         */\n        this.editor = editor;\n\n        /**\n         * Whether the currently selected hint should be inserted on a tab key event\n         *\n         * @type {boolean}\n         */\n        this.insertHintOnTab = insertHintOnTab;\n\n        /**\n         * Pending text insertion\n         *\n         * @type {string}\n         */\n        this.pendingText = \"\";\n\n        /**\n         * The hint selection callback function\n         *\n         * @type {Function}\n         */\n        this.handleSelect = null;\n\n        /**\n         * The hint list closure callback function\n         *\n         * @type {Function}\n         */\n        this.handleClose = null;\n\n        /**\n         * The hint list menu object\n         *\n         * @type {jQuery.Object}\n         */\n        this.$hintMenu =\n            $(\"<li class='dropdown codehint-menu'></li>\")\n                .append($(\"<a href='#' class='dropdown-toggle' data-toggle='dropdown'></a>\")\n                        .hide())\n                .append(\"<ul class='dropdown-menu'></ul>\");\n\n        this._keydownHook = this._keydownHook.bind(this);\n    }\n\n    /**\n     * Select the item in the hint list at the specified index, or remove the\n     * selection if index < 0.\n     *\n     * @private\n     * @param {number} index\n     */\n    CodeHintList.prototype._setSelectedIndex = function (index) {\n        var items = this.$hintMenu.find(\"li\");\n\n        // Range check\n        index = Math.max(-1, Math.min(index, items.length - 1));\n\n        // Clear old highlight\n        if (this.selectedIndex !== -1) {\n            $(items[this.selectedIndex]).find(\"a\").removeClass(\"highlight\");\n        }\n\n        this.selectedIndex = index;\n\n        // Highlight the new selected item, if necessary\n        if (this.selectedIndex !== -1) {\n            var $item = $(items[this.selectedIndex]);\n            var $view = this.$hintMenu.find(\"ul.dropdown-menu\");\n\n            $item.find(\"a\").addClass(\"highlight\");\n            ViewUtils.scrollElementIntoView($view, $item, false);\n\n            if (this.handleHighlight) {\n                this.handleHighlight($item.find(\"a\"), this.$hintMenu.find(\"#codehint-desc\"));\n            }\n        }\n    };\n\n    /**\n     * Appends text to end of pending text.\n     *\n     * @param {string} text\n     */\n    CodeHintList.prototype.addPendingText = function (text) {\n        this.pendingText += text;\n    };\n\n    /**\n     * Removes text from beginning of pending text.\n     *\n     * @param {string} text\n     */\n    CodeHintList.prototype.removePendingText = function (text) {\n        if (this.pendingText.indexOf(text) === 0) {\n            this.pendingText = this.pendingText.slice(text.length);\n        }\n    };\n\n    /**\n     * Rebuilds the list items for the hint list.\n     *\n     * @private\n     */\n    CodeHintList.prototype._buildListView = function (hintObj) {\n        var self            = this,\n            match           = hintObj.match,\n            selectInitial   = hintObj.selectInitial,\n            view            = { hints: [] },\n            _addHint;\n\n        this.hints = hintObj.hints;\n        this.hints.handleWideResults = hintObj.handleWideResults;\n        this.enableDescription = hintObj.enableDescription;\n\n        // if there is no match, assume name is already a formatted jQuery\n        // object; otherwise, use match to format name for display.\n        if (match) {\n            _addHint = function (name) {\n                var displayName = name.replace(\n                    new RegExp(StringUtils.regexEscape(match), \"i\"),\n                    \"<strong>$&</strong>\"\n                );\n\n                view.hints.push({ formattedHint: \"<span>\" + displayName + \"</span>\" });\n            };\n        } else {\n            _addHint = function (hint) {\n                view.hints.push({ formattedHint: (hint.jquery) ? \"\" : hint });\n            };\n        }\n\n        // clear the list\n        this.$hintMenu.find(\"li\").remove();\n\n        // if there are no hints then close the list; otherwise add them and\n        // set the selection\n        if (this.hints.length === 0) {\n            if (this.handleClose) {\n                this.handleClose();\n            }\n        } else {\n            this.hints.some(function (item, index) {\n                if (index >= self.maxResults) {\n                    return true;\n                }\n\n                _addHint(item);\n            });\n\n            // render code hint list\n            var $ul = this.$hintMenu.find(\"ul.dropdown-menu\"),\n                $parent = $ul.parent();\n\n            // remove list temporarily to save rendering time\n            $ul.remove().append(Mustache.render(CodeHintListHTML, view));\n\n            $ul.children(\"li\").each(function (index, element) {\n                var hint        = self.hints[index],\n                    $element    = $(element);\n\n                // store hint on each list item\n                $element.data(\"hint\", hint);\n\n                // insert jQuery hint objects after the template is rendered\n                if (hint.jquery) {\n                    $element.find(\".codehint-item\").append(hint);\n                }\n            });\n\n            // delegate list item events to the top-level ul list element\n            $ul.on(\"click\", \"li\", function (e) {\n                // Don't let the click propagate upward (otherwise it will\n                // hit the close handler in bootstrap-dropdown).\n                e.stopPropagation();\n                if (self.handleSelect) {\n                    self.handleSelect($(this).data(\"hint\"));\n                }\n            });\n\n            // Lists with wide results require different formatting\n            if (this.hints.handleWideResults) {\n                $ul.find(\"li a\").addClass(\"wide-result\");\n            }\n\n            // attach to DOM\n            $parent.append($ul);\n\n            // If a a description field requested attach one\n            if (this.enableDescription) {\n                // Remove the desc element first to ensure DOM order\n                $parent.find(\"#codehint-desc\").remove();\n                $parent.append(\"<div id='codehint-desc' class='dropdown-menu quiet-scrollbars'></div>\");\n                $ul.addClass(\"withDesc\");\n            }\n            this._setSelectedIndex(selectInitial ? 0 : -1);\n        }\n    };\n\n    /**\n     * Computes top left location for hint list so that the list is not clipped by the window.\n     * Also computes the largest available width.\n     *\n     * @private\n     * @return {{left: number, top: number, width: number}}\n     */\n    CodeHintList.prototype._calcHintListLocation = function () {\n        var cursor      = this.editor._codeMirror.cursorCoords(),\n            posTop      = cursor.bottom,\n            posLeft     = cursor.left,\n            textHeight  = this.editor.getTextHeight(),\n            $window     = $(window),\n            $menuWindow = this.$hintMenu.children(\"ul\"),\n            $descElement = this.$hintMenu.find(\"#codehint-desc\"),\n            descOverhang = $descElement.length === 1 ? $descElement.height() : 0,\n            menuHeight  = $menuWindow.outerHeight() + descOverhang;\n\n        // TODO Ty: factor out menu repositioning logic so code hints and Context menus share code\n        // adjust positioning so menu is not clipped off bottom or right\n        var bottomOverhang = posTop + menuHeight - $window.height();\n        if (bottomOverhang > 0) {\n            posTop -= (textHeight + 2 + menuHeight);\n        }\n\n        posTop -= 30;   // shift top for hidden parent element\n\n        var menuWidth = $menuWindow.width();\n        var availableWidth = menuWidth;\n        var rightOverhang = posLeft + menuWidth - $window.width();\n        if (rightOverhang > 0) {\n            posLeft = Math.max(0, posLeft - rightOverhang);\n        } else if (this.hints.handleWideResults) {\n            // Right overhang is negative\n            availableWidth = menuWidth + Math.abs(rightOverhang);\n        }\n\n        //Creating the offset element for hint description element\n        var descOffset = this.$hintMenu.find(\"ul.dropdown-menu\")[0].getBoundingClientRect().height;\n        if (descOffset === 0) {\n            descOffset = menuHeight - descOverhang;\n        }\n        this.$hintMenu.find(\"#codehint-desc\").css(\"margin-top\", descOffset - 1);\n\n        return {left: posLeft, top: posTop, width: availableWidth};\n    };\n\n    /**\n     * Check whether Event is one of the keys that we handle or not.\n     *\n     * @param {KeyBoardEvent|keyBoardEvent.keyCode} keyEvent\n     */\n    CodeHintList.prototype.isHandlingKeyCode = function (keyCodeOrEvent) {\n        var keyCode = typeof keyCodeOrEvent === \"object\" ? keyCodeOrEvent.keyCode : keyCodeOrEvent;\n        var ctrlKey = typeof keyCodeOrEvent === \"object\" ? keyCodeOrEvent.ctrlKey : false;\n\n\n        return (keyCode === KeyEvent.DOM_VK_UP || keyCode === KeyEvent.DOM_VK_DOWN ||\n                keyCode === KeyEvent.DOM_VK_PAGE_UP || keyCode === KeyEvent.DOM_VK_PAGE_DOWN ||\n                keyCode === KeyEvent.DOM_VK_RETURN ||\n                keyCode === KeyEvent.DOM_VK_CONTROL ||\n                keyCode === KeyEvent.DOM_VK_ESCAPE ||\n                (ctrlKey && keyCode === KeyEvent.DOM_VK_SPACE) ||\n                (keyCode === KeyEvent.DOM_VK_TAB && this.insertHintOnTab));\n    };\n\n    /**\n     * Convert keydown events into hint list navigation actions.\n     *\n     * @param {KeyBoardEvent} keyEvent\n     * @param {bool} isFakeKeydown - True if faked key down call (for example calling CTRL+Space while hints are open)\n     */\n    CodeHintList.prototype._keydownHook = function (event, isFakeKeydown) {\n        var keyCode,\n            self = this;\n\n        // positive distance rotates down; negative distance rotates up\n        function _rotateSelection(distance) {\n            var len = Math.min(self.hints.length, self.maxResults),\n                pos;\n\n            if (self.selectedIndex < 0) {\n                // set the initial selection\n                pos = (distance > 0) ? distance - 1 : len - 1;\n\n            } else {\n                // adjust current selection\n                pos = self.selectedIndex;\n\n                // Don't \"rotate\" until all items have been shown\n                if (distance > 0) {\n                    if (pos === (len - 1)) {\n                        pos = 0;  // wrap\n                    } else {\n                        pos = Math.min(pos + distance, len - 1);\n                    }\n                } else {\n                    if (pos === 0) {\n                        pos = (len - 1);  // wrap\n                    } else {\n                        pos = Math.max(pos + distance, 0);\n                    }\n                }\n            }\n\n            self._setSelectedIndex(pos);\n        }\n\n        // Calculate the number of items per scroll page.\n        function _itemsPerPage() {\n            var itemsPerPage = 1,\n                $items = self.$hintMenu.find(\"li\"),\n                $view = self.$hintMenu.find(\"ul.dropdown-menu\"),\n                itemHeight;\n\n            if ($items.length !== 0) {\n                itemHeight = $($items[0]).height();\n                if (itemHeight) {\n                    // round down to integer value\n                    itemsPerPage = Math.floor($view.height() / itemHeight);\n                    itemsPerPage = Math.max(1, Math.min(itemsPerPage, $items.length));\n                }\n            }\n\n            return itemsPerPage;\n        }\n\n        // If we're no longer visible, skip handling the key and end the session.\n        if (!this.isOpen()) {\n            this.handleClose();\n            return false;\n        }\n\n        // (page) up, (page) down, enter and tab key are handled by the list\n        if ((event.type === \"keydown\" || isFakeKeydown) && this.isHandlingKeyCode(event)) {\n            keyCode = event.keyCode;\n\n            if (event.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n                event.stopImmediatePropagation();\n                this.handleClose();\n\n                return false;\n            } else if (event.shiftKey &&\n                    (event.keyCode === KeyEvent.DOM_VK_UP ||\n                     event.keyCode === KeyEvent.DOM_VK_DOWN ||\n                     event.keyCode === KeyEvent.DOM_VK_PAGE_UP ||\n                     event.keyCode === KeyEvent.DOM_VK_PAGE_DOWN)) {\n                this.handleClose();\n                // Let the event bubble.\n                return false;\n            } else if (keyCode === KeyEvent.DOM_VK_UP) {\n                _rotateSelection.call(this, -1);\n            } else if (keyCode === KeyEvent.DOM_VK_DOWN ||\n                    (event.ctrlKey && keyCode === KeyEvent.DOM_VK_SPACE)) {\n                _rotateSelection.call(this, 1);\n            } else if (keyCode === KeyEvent.DOM_VK_PAGE_UP) {\n                _rotateSelection.call(this, -_itemsPerPage());\n            } else if (keyCode === KeyEvent.DOM_VK_PAGE_DOWN) {\n                _rotateSelection.call(this, _itemsPerPage());\n            } else if (this.selectedIndex !== -1 &&\n                    (keyCode === KeyEvent.DOM_VK_RETURN ||\n                    (keyCode === KeyEvent.DOM_VK_TAB && this.insertHintOnTab))) {\n\n                if (this.pendingText) {\n                    // Issues #5003: We received a \"selection\" key while there is \"pending\n                    // text\". This is rare but can happen because CM uses polling, so we\n                    // can receive key events while CM is waiting for timeout to expire.\n                    // Pending text may dismiss the list, or it may cause a valid selection\n                    // which keeps open hint list. We can compare pending text against\n                    // list to determine whether list is dismissed or not, but to handle\n                    // inserting selection in the page we'd need to either:\n                    // 1. Synchronously force CodeMirror to poll (but there is not\n                    //    yet a public API for that).\n                    // 2. Pass pending text back to where text gets inserted, which\n                    //    means it would need to be implemented for every HintProvider!\n                    // You have to be typing so fast to hit this case, that's it's\n                    // highly unlikely that inserting something from list was the intent,\n                    // which makes this pretty rare, so case #2 is not worth implementing.\n                    // If case #1 gets implemented, then we may want to use it here.\n                    // So, assume that pending text dismisses hints and let event bubble.\n                    return false;\n                }\n\n                // Trigger a click handler to commmit the selected item\n                $(this.$hintMenu.find(\"li\")[this.selectedIndex]).trigger(\"click\");\n            } else {\n                // Let the event bubble.\n                return false;\n            }\n\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            return true;\n        }\n\n        // If we didn't handle it, let other global keydown hooks handle it.\n        return false;\n    };\n\n    /**\n     * Is the CodeHintList open?\n     *\n     * @return {boolean}\n     */\n    CodeHintList.prototype.isOpen = function () {\n        // We don't get a notification when the dropdown closes. The best\n        // we can do is keep an \"opened\" flag and check to see if we\n        // still have the \"open\" class applied.\n        if (this.opened && !this.$hintMenu.hasClass(\"open\")) {\n            this.opened = false;\n        }\n\n        return this.opened;\n    };\n\n    /**\n     * Displays the hint list at the current cursor position\n     *\n     * @param {{hints: Array.<string|jQueryObject>, match: string,\n     *          selectInitial: boolean}} hintObj\n     */\n    CodeHintList.prototype.open = function (hintObj) {\n        Menus.closeAll();\n        this._buildListView(hintObj);\n\n        if (this.hints.length) {\n            // Need to add the menu to the DOM before trying to calculate its ideal location.\n            $(\"#codehint-menu-bar > ul\").append(this.$hintMenu);\n\n            var hintPos = this._calcHintListLocation();\n\n            this.$hintMenu.addClass(\"open\")\n                .css({\"left\": hintPos.left, \"top\": hintPos.top, \"width\": hintPos.width + \"px\"});\n            this.opened = true;\n\n            KeyBindingManager.addGlobalKeydownHook(this._keydownHook);\n        }\n    };\n\n    /**\n     * Updates the (already open) hint list window with new hints\n     *\n     * @param {{hints: Array.<string|jQueryObject>, match: string,\n     *          selectInitial: boolean}} hintObj\n     */\n    CodeHintList.prototype.update = function (hintObj) {\n        this.$hintMenu.addClass(\"apply-transition\");\n        this._buildListView(hintObj);\n\n        // Update the CodeHintList location\n        if (this.hints.length) {\n            var hintPos = this._calcHintListLocation();\n            this.$hintMenu.css({\"left\": hintPos.left, \"top\": hintPos.top,\n                \"width\": hintPos.width + \"px\"});\n        }\n    };\n    /**\n     * Calls the move up keybind to move hint suggestion selector\n     *\n     * @param {KeyBoardEvent} keyEvent\n     */\n    CodeHintList.prototype.callMoveUp = function (event) {\n        this._keydownHook(event, true);\n    };\n    /**\n     * Closes the hint list\n     */\n    CodeHintList.prototype.close = function () {\n        this.opened = false;\n\n        if (this.$hintMenu) {\n            this.$hintMenu.removeClass(\"open\");\n            PopUpManager.removePopUp(this.$hintMenu);\n            this.$hintMenu.remove();\n        }\n\n        KeyBindingManager.removeGlobalKeydownHook(this._keydownHook);\n    };\n\n    /**\n     * Set the hint list selection callback function\n     *\n     * @param {Function} callback\n     */\n    CodeHintList.prototype.onSelect = function (callback) {\n        this.handleSelect = callback;\n    };\n\n    /**\n      * Set the hint list highlight callback function\n      *\n      * @param {Function} callback\n      */\n    CodeHintList.prototype.onHighlight = function (callback) {\n        this.handleHighlight = callback;\n    };\n\n    /**\n     * Set the hint list closure callback function\n     *\n     * @param {Function} callback\n     */\n    CodeHintList.prototype.onClose = function (callback) {\n        // TODO: Due to #1381, this won't get called if the user clicks out of\n        // the code hint menu. That's (sort of) okay right now since it doesn't\n        // really matter if a single old invisible code hint list is lying\n        // around (it will ignore keydown events, and it'll get closed the next\n        // time the user pops up a code hint). Once #1381 is fixed this issue\n        // should go away.\n        this.handleClose = callback;\n    };\n\n\n    // Define public API\n    exports.CodeHintList = CodeHintList;\n});\n"],"file":"CodeHintList.js"}