{"version":3,"sources":["command/KeyboardOverlayMode.js"],"names":["define","require","exports","module","EditorManager","AppInit","MainViewManager","Commands","CommandManager","Menus","Strings","Metrics","Keys","CONTROL_NAV_OVERLAY_ID","overlay","paneToFocusOnExit","overlayMode","overlayOrderCentralElement","currentOverlayElement","showOverlay","targetId","countEvent","EVENT_TYPE","KEYBOARD","console","error","targetElement","document","getElementById","getActivePaneId","rect","getBoundingClientRect","style","left","top","width","height","classList","remove","add","focus","closeAll","addEventListener","exitOverlayMode","startOverlayMode","calculateUINavOrder","htmlID","ELEM_TYPE_PANE","ELEM_TYPE_TOP_MENU","addElementUp","element","upElement","up","down","addElementRight","rightElement","right","firstPane","type","FIRST_PANE","secondPane","SECOND_PANE","paneLayout","getLayoutScheme","rows","columns","startingPane","setActivePaneId","removeEventListener","processOverlayKeyboardEvent","event","downElement","leftElement","key","KEY","ARROW_UP","openMenu","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","RETURN","ENTER","ESCAPE","stopPropagation","preventDefault","isInOverlayMode","htmlReady","overlayTextElement","textContent","KEYBOARD_OVERLAY_TEXT","appReady","register","CMD_KEYBOARD_NAV_OVERLAY","CMD_KEYBOARD_NAV_UI_OVERLAY"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n\n/**\n * This handles the overlay mode\n */\ndefine(function (require, exports, module) {\n    const EditorManager       = require(\"editor/EditorManager\"),\n        AppInit             = require(\"utils/AppInit\"),\n        MainViewManager      = require(\"view/MainViewManager\"),\n        Commands            = require(\"command/Commands\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        Menus = require(\"command/Menus\"),\n        Strings     = require(\"strings\"),\n        Metrics              = require(\"utils/Metrics\"),\n        Keys                = require(\"command/Keys\");\n\n    const CONTROL_NAV_OVERLAY_ID = \"ctrl-nav-overlay\";\n    let overlay;\n\n    let paneToFocusOnExit, overlayMode = false,\n        overlayOrderCentralElement, currentOverlayElement;\n\n    function showOverlay(targetId) {\n        // Find the target div and the overlay div\n        Metrics.countEvent(Metrics.EVENT_TYPE.KEYBOARD, \"ctrlx2\", \"showOverlay\");\n        if(!targetId){\n            console.error(\"No target ID for selecting overlay. Ignoring\");\n            return;\n        }\n        const targetElement = document.getElementById(targetId);\n\n        paneToFocusOnExit = MainViewManager.getActivePaneId();\n        if (targetElement && overlay) {\n            // Get the position and dimensions of the target div\n            const rect = targetElement.getBoundingClientRect();\n            // Set the overlay div's styles to match the target's dimensions and position\n            overlay.style.left = rect.left + 'px';\n            overlay.style.top = rect.top + 'px';\n            overlay.style.width = rect.width + 'px';\n            overlay.style.height = rect.height + 'px';\n            overlay.classList.remove('forced-hidden'); // Remove the class that hides the overlay\n            overlay.classList.add('hide-cursor'); // Remove the class that hides the overlay\n            overlay.focus();\n            overlayMode = true;\n            Menus.closeAll();\n            document.addEventListener('click', exitOverlayMode, true);\n        }\n    }\n\n    function startOverlayMode() {\n        overlayOrderCentralElement = calculateUINavOrder();\n        currentOverlayElement = overlayOrderCentralElement;\n        showOverlay(overlayOrderCentralElement.htmlID);\n    }\n\n    const ELEM_TYPE_PANE = \"pane\",\n        ELEM_TYPE_TOP_MENU = \"topMenu\";\n    function addElementUp(element, upElement) {\n        element.up = upElement;\n        upElement.down = element;\n    }\n\n    function addElementRight(element, rightElement) {\n        element.right = rightElement;\n        rightElement.left = element;\n    }\n\n    function calculateUINavOrder() {\n        const firstPane = {\n            type: ELEM_TYPE_PANE,\n            htmlID: MainViewManager.FIRST_PANE\n        };\n        const secondPane = {\n            type: ELEM_TYPE_PANE,\n            htmlID: MainViewManager.SECOND_PANE\n        };\n        addElementUp(firstPane, {type: ELEM_TYPE_TOP_MENU});\n        const paneLayout = MainViewManager.getLayoutScheme();\n        if(paneLayout.rows === 2){\n            addElementUp(secondPane, firstPane);\n        } else if(paneLayout.columns === 2){\n            addElementRight(firstPane, secondPane);\n            addElementUp(secondPane, {type: ELEM_TYPE_TOP_MENU});\n        }\n        const startingPane = MainViewManager.getActivePaneId() || \"first-pane\";\n        if(startingPane === MainViewManager.FIRST_PANE){\n            return firstPane;\n        }\n        return secondPane;\n    }\n\n    function exitOverlayMode() {\n        const overlay = document.getElementById(CONTROL_NAV_OVERLAY_ID);\n        overlay.classList.add('forced-hidden'); // Remove the class that hides the overlay\n        overlayMode = false;\n        if(paneToFocusOnExit){\n            MainViewManager.setActivePaneId(paneToFocusOnExit);\n        }\n        document.removeEventListener('click', exitOverlayMode, true);\n    }\n\n    function processOverlayKeyboardEvent(event) {\n        const upElement = currentOverlayElement.up;\n        const downElement = currentOverlayElement.down;\n        const leftElement = currentOverlayElement.left;\n        const rightElement = currentOverlayElement.right;\n        switch (event.key) {\n        case Keys.KEY.ARROW_UP:\n            if(upElement && upElement.type === ELEM_TYPE_TOP_MENU){\n                exitOverlayMode();\n                Menus.openMenu();\n            } else if(upElement && upElement.type === ELEM_TYPE_PANE){\n                currentOverlayElement = upElement;\n                showOverlay(upElement.htmlID);\n            }\n            break;\n        case Keys.KEY.ARROW_DOWN:\n            if(downElement && downElement.type === ELEM_TYPE_PANE){\n                currentOverlayElement = downElement;\n                showOverlay(downElement.htmlID);\n            }\n            break;\n        case Keys.KEY.ARROW_LEFT:\n            if(leftElement && leftElement.type === ELEM_TYPE_PANE){\n                currentOverlayElement = leftElement;\n                showOverlay(leftElement.htmlID);\n            }\n            break;\n        case Keys.KEY.ARROW_RIGHT:\n            if(rightElement && rightElement.type === ELEM_TYPE_PANE){\n                currentOverlayElement = rightElement;\n                showOverlay(rightElement.htmlID);\n            }\n            break;\n        case Keys.KEY.RETURN:\n        case Keys.KEY.ENTER:\n            if(currentOverlayElement && currentOverlayElement.type === ELEM_TYPE_PANE){\n                MainViewManager.setActivePaneId(currentOverlayElement.htmlID);\n                paneToFocusOnExit = MainViewManager.getActivePaneId();\n                exitOverlayMode();\n            }\n            break;\n        case Keys.KEY.ESCAPE:\n        default:\n            exitOverlayMode();\n            break;\n        }\n        event.stopPropagation();\n        event.preventDefault();\n        return true;\n    }\n\n    function isInOverlayMode() {\n        return overlayMode;\n    }\n\n    AppInit.htmlReady(function () {\n        overlay = document.getElementById(CONTROL_NAV_OVERLAY_ID);\n        const overlayTextElement = document.getElementById(\"overlay-instruction-text\");\n        overlayTextElement.textContent = Strings.KEYBOARD_OVERLAY_TEXT;\n    });\n\n    AppInit.appReady(function () {\n        CommandManager.register(Strings.CMD_KEYBOARD_NAV_OVERLAY,    Commands.CMD_KEYBOARD_NAV_UI_OVERLAY, startOverlayMode);\n    });\n\n    exports.processOverlayKeyboardEvent = processOverlayKeyboardEvent;\n    exports.startOverlayMode = startOverlayMode;\n    exports.exitOverlayMode = exitOverlayMode;\n    exports.isInOverlayMode = isInOverlayMode;\n});\n"],"file":"KeyboardOverlayMode.js"}