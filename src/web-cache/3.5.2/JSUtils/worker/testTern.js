!function(){function ternSimpleTest(){function getFile(name,contentCb){switch(name){case"index.js":return contentCb(null,indexjs);case"list.js":return contentCb(null,listjs);case"simple.js":return contentCb(null,simplejs);default:return""}}let ternOptions={defs:[],async:!0,getFile:getFile,plugins:{requirejs:{},complete_strings:!0,doc_comment:!0,doc_comments:!0,es_modules:!0}},ternServer=new Tern.Server(ternOptions);ternServer.addFile("index.js"),ternServer.addFile("list.js");let query,req={query:{type:"definition",variable:null,lineCharPositions:!0,end:{line:6,ch:9},file:"index.js"},files:[]};setTimeout(()=>{ternServer.request(req,function(error,data){console.log(error,data)})},1e3)}let indexjs='// Tern can do ECMAScript 6 (2015) too!\n\n// Imports and exports work. You can complete module names, and\n// jump to the definition of things defined in modules.\n\n// (Press alt-. on `List` to jump to the class definition)\nimport {List} from "./list"\n\nconst l = List.of(3, 4, 5)\nfor (let elt of l.map(x => x * 2)) {\n  // Tern knows that `elt` is a number!\n  let output = myMath.halve(elt)\n  console.log(output)\n}\n\n// Raw template string\nlet raw = String.raw`\\n`\n\n// Default arguments\nArray.of(1, 2, 3, 4).find(x => x % 3 == 0)',listjs="export class List {\n  constructor(head, tail) {\n    this.head = head\n    this.tail = tail\n  }\n\n  static of(...elements) {\n    let result = null\n    for (let i = elements.length - 1; i >= 0; i--)\n      result = new List(elements[i], result)\n    return result\n  }\n\n  map(f) {\n    return new List(f(this.head), this.tail && this.tail.map(f))\n  }\n\n  *[Symbol.iterator]() {\n    for (let pos = this; pos; pos = pos.tail)\n      yield pos.head\n  }\n}",simplejs="function x(){\n}\n\nx();\n";ternSimpleTest()}();
//# sourceMappingURL=testTern.js.map
