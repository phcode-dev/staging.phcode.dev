{"version":3,"sources":["utils/DragAndDrop.js"],"names":["define","require","exports","module","Async","CommandManager","Commands","Dialogs","DefaultDialogs","MainViewManager","FileSystem","FileUtils","ProjectManager","Strings","StringUtils","isValidDrop","items","i","len","length","kind","entry","webkitGetAsEntry","isFile","stopURIListPropagation","files","event","types","dataTransfer","forEach","value","stopPropagation","preventDefault","openDroppedFiles","paths","errorFiles","ERR_MULTIPLE_ITEMS_WITH_DIR","doInParallel","path","idx","result","$","Deferred","resolve","err","item","findInWorkingSet","ALL_PANES","execute","CMD_ADD_TO_WORKINGSET_AND_OPEN","fullPath","silent","done","fail","openErr","push","error","reject","isDirectory","openProject","promise","errorToString","ERROR_MIXED_DRAGDROP","getFileErrorString","message","ERROR_OPENING_FILES","info","breakableUrl","makeProjectRelativeIfPossible","showModalDialog","DIALOG_ID_ERROR","ERROR_OPENING_FILE_TITLE","attachHandlers","handleDragOver","originalEvent","dropEffect","handleDrop","brackets","app","getDroppedFiles","window","document","body","on","addEventListener","target","closest","register","CMD_OPEN_DROPPED_FILES","FILE_OPEN_DROPPED_FILES"],"mappings":"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","sourcesContent":[" /*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var Async           = require(\"utils/Async\"),\n        CommandManager  = require(\"command/CommandManager\"),\n        Commands        = require(\"command/Commands\"),\n        Dialogs         = require(\"widgets/Dialogs\"),\n        DefaultDialogs  = require(\"widgets/DefaultDialogs\"),\n        MainViewManager = require(\"view/MainViewManager\"),\n        FileSystem      = require(\"filesystem/FileSystem\"),\n        FileUtils       = require(\"file/FileUtils\"),\n        ProjectManager  = require(\"project/ProjectManager\"),\n        Strings         = require(\"strings\"),\n        StringUtils     = require(\"utils/StringUtils\");\n\n    /**\n     * Returns true if the drag and drop items contains valid drop objects.\n     * @param {Array.<DataTransferItem>} items Array of items being dragged\n     * @return {boolean} True if one or more items can be dropped.\n     */\n    function isValidDrop(items) {\n        var i, len = items.length;\n\n        for (i = 0; i < len; i++) {\n            if (items[i].kind === \"file\") {\n                var entry = items[i].webkitGetAsEntry();\n\n                if (entry.isFile) {\n                    // If any files are being dropped, this is a valid drop\n                    return true;\n                } else if (len === 1) {\n                    // If exactly one folder is being dropped, this is a valid drop\n                    return true;\n                }\n            }\n        }\n\n        // No valid entries found\n        return false;\n    }\n\n    /**\n     * Determines if the event contains a type list that has a URI-list.\n     * If it does and contains an empty file list, then what is being dropped is a URL.\n     * If that is true then we stop the event propagation and default behavior to save Brackets editor from the browser taking over.\n     * @param {Array.<File>} files Array of File objects from the event datastructure. URLs are the only drop item that would contain a URI-list.\n     * @param {event} event The event datastucture containing datatransfer information about the drag/drop event. Contains a type list which may or may not hold a URI-list depending on what was dragged/dropped. Interested if it does.\n     */\n    function stopURIListPropagation(files, event) {\n        var types = event.dataTransfer.types;\n\n        if ((!files || !files.length) && types) { // We only want to check if a string of text was dragged into the editor\n            types.forEach(function (value) {\n                //Dragging text externally (dragging text from another file): types has \"text/plain\" and \"text/html\"\n                //Dragging text internally (dragging text to another line): types has just \"text/plain\"\n                //Dragging a file: types has \"Files\"\n                //Dragging a url: types has \"text/plain\" and \"text/uri-list\" <-what we are interested in\n                if (value === \"text/uri-list\") {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    return;\n                }\n            });\n        }\n    }\n\n    /**\n     * Open dropped files\n     * @param {Array.<string>} files Array of files dropped on the application.\n     * @return {Promise} Promise that is resolved if all files are opened, or rejected\n     *     if there was an error.\n     */\n    function openDroppedFiles(paths) {\n        var errorFiles = [],\n            ERR_MULTIPLE_ITEMS_WITH_DIR = {};\n\n        return Async.doInParallel(paths, function (path, idx) {\n            var result = new $.Deferred();\n\n            // Only open files.\n            FileSystem.resolve(path, function (err, item) {\n                if (!err && item.isFile) {\n                    // If the file is already open, and this isn't the last\n                    // file in the list, return. If this *is* the last file,\n                    // always open it so it gets selected.\n                    if (idx < paths.length - 1) {\n                        if (MainViewManager.findInWorkingSet(MainViewManager.ALL_PANES, path) !== -1) {\n                            result.resolve();\n                            return;\n                        }\n                    }\n\n                    CommandManager.execute(Commands.CMD_ADD_TO_WORKINGSET_AND_OPEN,\n                                           {fullPath: path, silent: true})\n                        .done(function () {\n                            result.resolve();\n                        })\n                        .fail(function (openErr) {\n                            errorFiles.push({path: path, error: openErr});\n                            result.reject();\n                        });\n                } else if (!err && item.isDirectory && paths.length === 1) {\n                    // One folder was dropped, open it.\n                    ProjectManager.openProject(path)\n                        .done(function () {\n                            result.resolve();\n                        })\n                        .fail(function () {\n                            // User was already notified of the error.\n                            result.reject();\n                        });\n                } else {\n                    errorFiles.push({path: path, error: err || ERR_MULTIPLE_ITEMS_WITH_DIR});\n                    result.reject();\n                }\n            });\n\n            return result.promise();\n        }, false)\n            .fail(function () {\n                function errorToString(err) {\n                    if (err === ERR_MULTIPLE_ITEMS_WITH_DIR) {\n                        return Strings.ERROR_MIXED_DRAGDROP;\n                    }\n                    return FileUtils.getFileErrorString(err);\n\n                }\n\n                if (errorFiles.length > 0) {\n                    var message = Strings.ERROR_OPENING_FILES;\n\n                    message += \"<ul class='dialog-list'>\";\n                    errorFiles.forEach(function (info) {\n                        message += \"<li><span class='dialog-filename'>\" +\n                            StringUtils.breakableUrl(ProjectManager.makeProjectRelativeIfPossible(info.path)) +\n                            \"</span> - \" + errorToString(info.error) +\n                            \"</li>\";\n                    });\n                    message += \"</ul>\";\n\n                    Dialogs.showModalDialog(\n                        DefaultDialogs.DIALOG_ID_ERROR,\n                        Strings.ERROR_OPENING_FILE_TITLE,\n                        message\n                    );\n                }\n            });\n    }\n\n\n    /**\n     * Attaches global drag & drop handlers to this window. This enables dropping files/folders to open them, and also\n     * protects the Brackets app from being replaced by the browser trying to load the dropped file in its place.\n     */\n    function attachHandlers() {\n\n        function handleDragOver(event) {\n            event = event.originalEvent || event;\n\n            var files = event.dataTransfer.files;\n\n            stopURIListPropagation(files, event);\n\n            if (files && files.length) {\n                event.stopPropagation();\n                event.preventDefault();\n\n                var dropEffect = \"none\";\n\n                // Don't allow drag-and-drop of files/folders when a modal dialog is showing.\n                if ($(\".modal.instance\").length === 0 && isValidDrop(event.dataTransfer.items)) {\n                    dropEffect = \"copy\";\n                }\n                event.dataTransfer.dropEffect = dropEffect;\n            }\n        }\n\n        function handleDrop(event) {\n            event = event.originalEvent || event;\n\n            var files = event.dataTransfer.files;\n\n            stopURIListPropagation(files, event);\n\n            if (files && files.length) {\n                event.stopPropagation();\n                event.preventDefault();\n\n                brackets.app.getDroppedFiles(function (err, paths) {\n                    if (!err) {\n                        openDroppedFiles(paths);\n                    }\n                });\n            }\n        }\n\n        // For most of the window, only respond if nothing more specific in the UI has already grabbed the event (e.g.\n        // the Extension Manager drop-to-install zone, or an extension with a drop-to-upload zone in its panel)\n        $(window.document.body)\n            .on(\"dragover\", handleDragOver)\n            .on(\"drop\", handleDrop);\n\n        // Over CodeMirror specifically, always pre-empt CodeMirror's drag event handling if files are being dragged - CM stops\n        // propagation on any drag event it sees, even when it's not a text drag/drop. But allow CM to handle all non-file drag\n        // events. See bug #10617.\n        window.document.body.addEventListener(\"dragover\", function (event) {\n            if ($(event.target).closest(\".CodeMirror\").length) {\n                handleDragOver(event);\n            }\n        }, true);\n        window.document.body.addEventListener(\"drop\", function (event) {\n            if ($(event.target).closest(\".CodeMirror\").length) {\n                handleDrop(event);\n            }\n        }, true);\n    }\n\n\n    CommandManager.register(Strings.CMD_OPEN_DROPPED_FILES, Commands.FILE_OPEN_DROPPED_FILES, openDroppedFiles);\n\n    // Export public API\n    exports.attachHandlers      = attachHandlers;\n    exports.isValidDrop         = isValidDrop;\n    exports.openDroppedFiles    = openDroppedFiles;\n});\n"],"file":"DragAndDrop.js"}