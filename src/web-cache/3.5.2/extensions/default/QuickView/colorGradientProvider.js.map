{"version":3,"sources":["extensions/default/QuickView/colorGradientProvider.js"],"names":["define","require","exports","module","ColorUtils","brackets","getModule","CSSUtils","TokenUtils","AppInit","QuickView","Strings","Metrics","CommandManager","Commands","styleLanguages","getQuickView","editor","pos","token","line","Promise","resolve","reject","gradientRegEx","colorRegEx","RegExp","COLOR_REGEX","mode","getModeAt","_codeMirror","isStyleSheet","indexOf","areParensBalanced","str","i","nestLevel","len","reduceStyleSheetForRegExParsing","length","execGradientMatch","parensBalanced","gradientMatch","exec","prefix","colorValue","match","execColorMatch","colorMatch","ignoreNamedColors","hyphenOnMatchBoundary","beforeIndex","afterIndex","index","isNamedColor","test","undefined","name","splitStyleProperty","property","recurse","array","result","trim","join","push","isGradientColorStop","args","hasLengthInPixels","ensureHexFormat","replace","normalizeGradientExpressionForQuickview","expression","paramStart","paramEnd","lastIndexOf","parameters","params","substring","lowerBound","upperBound","$","width","thisSize","split","parseFloat","Math","max","min","abs","previewCSS","startPos","endPos","found","ch","tooltip","TOOLTIP_CLICK_TO_EDIT_COLOR","preview","click","setCursorPos","execute","TOGGLE_QUICK_EDIT","countEvent","EVENT_TYPE","QUICK_VIEW","start","end","content","appReady","registerQuickViewProvider","QUICK_VIEW_NAME"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    // Brackets modules\n    const ColorUtils        = brackets.getModule(\"utils/ColorUtils\"),\n        CSSUtils            = brackets.getModule(\"language/CSSUtils\"),\n        TokenUtils          = brackets.getModule(\"utils/TokenUtils\"),\n        AppInit             = brackets.getModule(\"utils/AppInit\"),\n        QuickView           = brackets.getModule(\"features/QuickViewManager\"),\n        Strings             = brackets.getModule(\"strings\"),\n        Metrics             = brackets.getModule(\"utils/Metrics\"),\n        CommandManager      = brackets.getModule(\"command/CommandManager\"),\n        Commands            = brackets.getModule(\"command/Commands\");\n\n    let styleLanguages = [\"css\", \"text/x-less\", \"sass\", \"text/x-scss\", \"stylus\"];\n\n    function getQuickView(editor, pos, token, line) {\n        return new Promise((resolve, reject)=>{\n            // Check for gradient. -webkit-gradient() can have parens in parameters\n            // nested 2 levels. Other gradients can only nest 1 level.\n            let gradientRegEx = /-webkit-gradient\\((?:[^\\(]*?(?:\\((?:[^\\(]*?(?:\\([^\\)]*?\\))*?)*?\\))*?)*?\\)|(?:(?:-moz-|-ms-|-o-|-webkit-|:|\\s)((repeating-)?linear-gradient)|(?:-moz-|-ms-|-o-|-webkit-|:|\\s)((repeating-)?radial-gradient))(\\((?:[^\\)]*?(?:\\([^\\)]*?\\))*?)*?\\))/gi,\n                colorRegEx    = new RegExp(ColorUtils.COLOR_REGEX),\n                mode          = TokenUtils.getModeAt(editor._codeMirror, pos, false),\n                isStyleSheet  = (styleLanguages.indexOf(mode) !== -1);\n\n            function areParensBalanced(str) {\n                let i,\n                    nestLevel = 0,\n                    len;\n\n                if (isStyleSheet) {\n                    // Remove comments & strings from style sheets\n                    str = CSSUtils.reduceStyleSheetForRegExParsing(str);\n                }\n                len = str.length;\n\n                for (i = 0; i < len; i++) {\n                    switch (str[i]) {\n                    case \"(\":\n                        nestLevel++;\n                        break;\n                    case \")\":\n                        nestLevel--;\n                        break;\n                    case \"\\\\\":\n                        i++;    // next char is escaped, so skip it\n                        break;\n                    }\n                }\n\n                // if parens are balanced, nest level will be 0\n                return (nestLevel === 0);\n            }\n\n            function execGradientMatch(line, parensBalanced) {\n                // Unbalanced parens cause infinite loop (see issue #4650)\n                let gradientMatch = (parensBalanced ? gradientRegEx.exec(line) : null),\n                    prefix = \"\",\n                    colorValue;\n\n                if (gradientMatch) {\n                    if (gradientMatch[0].indexOf(\"@\") !== -1) {\n                        // If the gradient match has \"@\" in it, it is most likely a less or\n                        // sass letiable. Ignore it since it won't be displayed correctly.\n                        gradientMatch = null;\n\n                    } else {\n                        // If it was a linear-gradient or radial-gradient letiant with a vendor prefix\n                        // add \"-webkit-\" so it shows up correctly in Brackets.\n                        if (gradientMatch[0].match(/-o-|-moz-|-ms-|-webkit-/i)) {\n                            prefix = \"-webkit-\";\n                        }\n\n                        // For prefixed gradients, use the non-prefixed value as the color value.\n                        // \"-webkit-\" will be added before this value later\n                        if (gradientMatch[1]) {\n                            colorValue = gradientMatch[1] + gradientMatch[5];    // linear gradiant\n                        } else if (gradientMatch[3]) {\n                            colorValue = gradientMatch[3] + gradientMatch[5];    // radial gradiant\n                        } else if (gradientMatch[0]) {\n                            colorValue = gradientMatch[0];                       // -webkit-gradient\n                            prefix = \"\";                                         // do not prefix\n                        }\n                    }\n                }\n\n                return {\n                    match: gradientMatch,\n                    prefix: prefix,\n                    colorValue: colorValue\n                };\n            }\n\n            function execColorMatch(editor, line, pos) {\n                let colorMatch,\n                    ignoreNamedColors;\n\n                function hyphenOnMatchBoundary(match, line) {\n                    let beforeIndex, afterIndex;\n                    if (match) {\n                        beforeIndex = match.index - 1;\n                        if (beforeIndex >= 0 && line[beforeIndex] === \"-\") {\n                            return true;\n                        }\n                        afterIndex = match.index + match[0].length;\n                        if (afterIndex < line.length && line[afterIndex] === \"-\") {\n                            return true;\n                        }\n\n                    }\n\n                    return false;\n                }\n                function isNamedColor(match) {\n                    if (match && match[0] && /^[a-z]+$/i.test(match[0])) { // only for color names, not for hex-/rgb-values\n                        return true;\n                    }\n                }\n\n                // Hyphens do not count as a regex word boundary (\\b), so check for those here\n                do {\n                    colorMatch = colorRegEx.exec(line);\n                    if (!colorMatch) {\n                        break;\n                    }\n                    if (ignoreNamedColors === undefined) {\n                        let mode = TokenUtils.getModeAt(editor._codeMirror, pos, false).name;\n                        ignoreNamedColors = styleLanguages.indexOf(mode) === -1;\n                    }\n                } while (hyphenOnMatchBoundary(colorMatch, line) ||\n                (ignoreNamedColors && isNamedColor(colorMatch)));\n\n                return colorMatch;\n            }\n\n            // simple css property splitter (used to find color stop arguments in gradients)\n            function splitStyleProperty(property) {\n                let token = /((?:[^\"']|\".*?\"|'.*?')*?)([(,)]|$)/g;\n                let recurse = function () {\n                    let array = [];\n                    for (;;) {\n                        let result = token.exec(property);\n                        if (result[2] === \"(\") {\n                            let str = result[1].trim() + \"(\" + recurse().join(\",\") + \")\";\n                            result = token.exec(property);\n                            str += result[1];\n                            array.push(str);\n                        } else {\n                            array.push(result[1].trim());\n                        }\n                        if (result[2] !== \",\") {\n                            return array;\n                        }\n                    }\n                };\n                return (recurse());\n            }\n\n            // color stop helpers\n            function isGradientColorStop(args) {\n                return (args.length > 0 && args[0].match(colorRegEx) !== null);\n            }\n\n            function hasLengthInPixels(args) {\n                return (args.length > 1 && args[1].indexOf(\"px\") > 0);\n            }\n\n            // Ensures that input is in usable hex format\n            function ensureHexFormat(str) {\n                return (/^0x/).test(str) ? str.replace(\"0x\", \"#\") : str;\n            }\n\n            // Normalizes px color stops to %\n            function normalizeGradientExpressionForQuickview(expression) {\n                if (expression.indexOf(\"px\") > 0) {\n                    let paramStart = expression.indexOf(\"(\") + 1,\n                        paramEnd = expression.lastIndexOf(\")\"),\n                        parameters = expression.substring(paramStart, paramEnd),\n                        params = splitStyleProperty(parameters),\n                        lowerBound = 0,\n                        upperBound = $(\"#quick-view-color-swatch\").width(),\n                        args,\n                        thisSize,\n                        i;\n\n                    // find lower bound\n                    for (i = 0; i < params.length; i++) {\n                        args = params[i].split(\" \");\n\n                        if (hasLengthInPixels(args)) {\n                            thisSize = parseFloat(args[1]);\n\n                            upperBound = Math.max(upperBound, thisSize);\n                            // we really only care about converting negative\n                            //  pixel values -- so take the smallest negative pixel\n                            //  value and use that as baseline for display purposes\n                            if (thisSize < 0) {\n                                lowerBound = Math.min(lowerBound, thisSize);\n                            }\n                        }\n                    }\n\n                    // convert negative lower bound to positive and adjust all pixel values\n                    //  so that -20px is now 0px and 100px is now 120px\n                    lowerBound = Math.abs(lowerBound);\n\n                    // Offset the upperbound by the lowerBound to give us a corrected context\n                    upperBound += lowerBound;\n\n                    // convert to %\n                    for (i = 0; i < params.length; i++) {\n                        args = params[i].split(\" \");\n                        if (isGradientColorStop(args) && hasLengthInPixels(args)) {\n                            if (upperBound === 0) {\n                                thisSize = 0;\n                            } else {\n                                thisSize = ((parseFloat(args[1]) + lowerBound) / upperBound) * 100;\n                            }\n                            args[1] = thisSize + \"%\";\n                        }\n                        params[i] = args.join(\" \");\n                    }\n\n                    // put it back together.\n                    expression = expression.substring(0, paramStart) + params.join(\", \") + expression.substring(paramEnd);\n                }\n                return expression;\n            }\n\n            let parensBalanced = areParensBalanced(line),\n                gradientMatch = execGradientMatch(line, parensBalanced),\n                match = gradientMatch.match || execColorMatch(editor, line, pos);\n\n            let previewCSS, startPos, endPos, found = false;\n\n            while (match) {\n                if (pos.ch < match.index) {\n                    // Gradients are matched first, then colors, so...\n                    if (gradientMatch.match) {\n                        // ... gradient match is past cursor -- stop looking for gradients, start searching for colors\n                        gradientMatch = { match: null, prefix: \"\", colorValue: null };\n                    } else {\n                        // ... color match is past cursor -- stop looping\n                        break;\n                    }\n                } else if (pos.ch <= match.index + match[0].length) {\n                    // build the css for previewing the gradient from the regex result\n                    previewCSS = gradientMatch.prefix + (gradientMatch.colorValue || match[0]);\n                    startPos = {line: pos.line, ch: match.index};\n                    endPos = {line: pos.line, ch: match.index + match[0].length};\n                    found = true;\n                    break;\n                }\n\n                // Get next match\n                if (gradientMatch.match) {\n                    gradientMatch = execGradientMatch(line, parensBalanced);\n                }\n                match = gradientMatch.match || execColorMatch(editor, line, pos);\n            }\n\n            if(found){\n                // normalize the arguments to something that we can display to the user\n                // NOTE: we need both the div and the popover's _previewCSS member\n                //          (used by unit tests) to match so normalize the css for both\n                let tooltip = gradientMatch.match ? \"\" : Strings.TOOLTIP_CLICK_TO_EDIT_COLOR;\n                previewCSS = normalizeGradientExpressionForQuickview(ensureHexFormat(previewCSS));\n                let preview = $(`<div id='quick-view-color-swatch' data-for-test='${previewCSS}' class='color-swatch'\n                        style='background: ${previewCSS}' title=\"${tooltip}\">\n                        </div>`);\n                preview.click(function () {\n                    if(gradientMatch.match) {\n                        return;\n                    }\n                    editor.setCursorPos(startPos);\n                    CommandManager.execute(Commands.TOGGLE_QUICK_EDIT);\n                    Metrics.countEvent(Metrics.EVENT_TYPE.QUICK_VIEW, \"color\", \"click\");\n                });\n\n                Metrics.countEvent(Metrics.EVENT_TYPE.QUICK_VIEW, \"color\", \"show\");\n                resolve({\n                    start: startPos,\n                    end: endPos,\n                    content: preview\n                });\n                return;\n            }\n\n            reject();\n        });\n    }\n\n    AppInit.appReady(function () {\n        QuickView.registerQuickViewProvider(exports, [\"all\"]);\n    });\n\n    exports.getQuickView = getQuickView;\n    exports.QUICK_VIEW_NAME = \"colorGradientProvider\";\n});\n"],"file":"colorGradientProvider.js"}