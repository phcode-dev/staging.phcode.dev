{"version":3,"sources":["extensions/default/CSSCodeHints/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","testContentCSS","testContentHTML","CSSCodeHints","describe","defaultContent","defaultHTMLContent","testDocument","testEditor","setupTest","content","languageId","mock","createMockEditor","doc","editor","tearDownTest","destroyMockEditor","extractHintList","hints","$","map","$node","text","expectHints","provider","implicitChar","returnWholeObj","expect","hasHints","toBe","hintsObj","getHints","toBeTruthy","expectNoHints","verifyAttrHints","hintList","expectedFirstHint","indexOf","verifyListsAreIdentical","values","i","length","selectHint","expectedHint","not","insertHint","fixPos","pos","sticky","expectCursorAt","selection","getSelection","start","toEql","end","verifyAllValues","sort","toString","beforeEach","afterEach","it","setCursorPos","line","ch","cssPropHintProvider","replaceRange","getLine","expectedString","undefined","find","css","toMatch","hasClass","toBeFalsy"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeEach, afterEach */\n\ndefine(function (require, exports, module) {\n\n\n    var SpecRunnerUtils = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        testContentCSS  = require(\"text!unittest-files/regions.css\"),\n        testContentHTML = require(\"text!unittest-files/region-template.html\"),\n        CSSCodeHints    = require(\"main\");\n\n    describe(\"unit:CSS Code Hinting\", function () {\n\n        var defaultContent = \"@media screen { \\n\" +\n                             \" body { \\n\" +\n                             \" }\\n\" +\n                             \"} \\n\" +\n                             \".selector { \\n\" +\n                             \" \\n\" +\n                             \" b\\n\" +\n                             \" bord\\n\" +\n                             \" border-\\n\" +\n                             \" border-colo\\n\" +\n                             \" border-color: red;\\n\" +      // line: 10\n                             \" d\\n\" +\n                             \" disp\\n\" +\n                             \" display: \\n\" +\n                             \" display: in\\n\" +\n                             \" bordborder: \\n\" +\n                             \" color\\n\" +\n                             \"} \\n\";\n\n        var defaultHTMLContent = \"<html> \\n\" +\n                                 \"<head> \\n\" +\n                                 \"</head> \\n\" +\n                                 \"<body> \\n\" +\n                                 \"<div style=' \\n\" + // line 4\n                                 \" \\n\" +\n                                 \" b\\n\" +\n                                 \" bord\\n\" +\n                                 \" border-\\n\" +\n                                 \" border-colo\\n\" +\n                                 \" border-color: red;'>\\n\" + // line 10\n                                 \"</div> \\n\" +\n                                 \"</body> \\n\" +\n                                 \"</html> \\n\";\n\n        var testDocument, testEditor;\n\n        /*\n         * Create a mockup editor with the given content and language id.\n         *\n         * @param {string} content - content for test window\n         * @param {string} languageId\n         */\n        function setupTest(content, languageId) {\n            var mock = SpecRunnerUtils.createMockEditor(content, languageId);\n            testDocument = mock.doc;\n            testEditor = mock.editor;\n        }\n\n        function tearDownTest() {\n            SpecRunnerUtils.destroyMockEditor(testDocument);\n            testEditor = null;\n            testDocument = null;\n        }\n\n        function extractHintList(hints) {\n            return $.map(hints, function ($node) {\n                return $node.text();\n            });\n        }\n\n        // Ask provider for hints at current cursor position; expect it to return some\n        function expectHints(provider, implicitChar, returnWholeObj) {\n            expect(provider.hasHints(testEditor, implicitChar)).toBe(true);\n            var hintsObj = provider.getHints();\n            expect(hintsObj).toBeTruthy();\n            // return just the array of hints if returnWholeObj is falsy\n            return returnWholeObj ? hintsObj : extractHintList(hintsObj.hints);\n        }\n\n        // Ask provider for hints at current cursor position; expect it NOT to return any\n        function expectNoHints(provider, implicitChar) {\n            expect(provider.hasHints(testEditor, implicitChar)).toBe(false);\n        }\n\n        function verifyAttrHints(hintList, expectedFirstHint) {\n            expect(hintList.indexOf(\"div\")).toBe(-1);\n            expect(hintList[0]).toBe(expectedFirstHint);\n        }\n\n        // compares lists to ensure they are the same\n        function verifyListsAreIdentical(hintList, values) {\n            var i;\n            expect(hintList.length).toBe(values.length);\n            for (i = 0; i < values.length; i++) {\n                expect(hintList[i]).toBe(values[i]);\n            }\n        }\n\n\n        function selectHint(provider, expectedHint, implicitChar) {\n            var hintList = expectHints(provider, implicitChar);\n            expect(hintList.indexOf(expectedHint)).not.toBe(-1);\n            return provider.insertHint(expectedHint);\n        }\n\n        // Helper function for testing cursor position\n        function fixPos(pos) {\n            if (!(\"sticky\" in pos)) {\n                pos.sticky = null;\n            }\n            return pos;\n        }\n        function expectCursorAt(pos) {\n            var selection = testEditor.getSelection();\n            expect(fixPos(selection.start)).toEql(fixPos(selection.end));\n            expect(fixPos(selection.start)).toEql(fixPos(pos));\n        }\n\n        // Helper function to\n        // a) ensure the hintList and the list with the available values have the same size\n        // b) ensure that all possible values are mentioned in the hintList\n        function verifyAllValues(hintList, values) {\n            expect(hintList.length).toBe(values.length);\n            expect(hintList.sort().toString()).toBe(values.sort().toString());\n        }\n\n        describe(\"CSS properties in general (selection of correct property based on input)\", function () {\n\n            beforeEach(function () {\n                // create Editor instance (containing a CodeMirror instance)\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"css\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should list all prop-name hints right after curly bracket\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 11 });    // after {\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"align-content\");  // filtered on \"empty string\"\n            });\n\n            it(\"should list all prop-name hints in new line\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 1 });\n\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"align-content\");  // filtered on \"empty string\"\n            });\n\n            it(\"should list all prop-name hints starting with 'b' in new line\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 2 });\n\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"backface-visibility\");  // filtered on \"b\"\n            });\n\n            it(\"should list all prop-name hints starting with 'bord' \", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 6, ch: 2 });\n\n                testEditor.setCursorPos({ line: 7, ch: 5 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border\");  // filtered on \"bord\"\n            });\n\n            it(\"should list all prop-name hints starting with 'border-' \", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 7, ch: 5 });\n\n                testEditor.setCursorPos({ line: 8, ch: 8 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border-bottom\");  // filtered on \"border-\"\n            });\n\n            it(\"should list only prop-name hint border-color\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 8, ch: 8 });\n\n                testEditor.setCursorPos({ line: 9, ch: 12 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border-color\");  // filtered on \"border-color\"\n                verifyListsAreIdentical(hintList, [\"border-color\",\n                    \"border-left-color\",\n                    \"border-top-color\",\n                    \"border-bottom-color\",\n                    \"border-right-color\"]);\n            });\n\n            it(\"should list prop-name hints at end of property-value finished by ;\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 19 });    // after ;\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"align-content\");  // filtered on \"empty string\"\n            });\n\n            it(\"should NOT list prop-name hints right before curly bracket\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 10 });    // inside .selector, before {\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should NOT list prop-name hints after declaration of mediatype\", function () {\n                testEditor.setCursorPos({ line: 0, ch: 15 });    // after {\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should NOT list prop-name hints if previous property is not closed properly\", function () {\n                testEditor.setCursorPos({ line: 16, ch: 6 });   // cursor directly after color\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n            it(\"should NOT list prop-name hints in media type declaration\", function () {\n                testEditor.setCursorPos({ line: 0, ch: 1 });\n                expect(CSSCodeHints.cssPropHintProvider.hasHints(testEditor, 'm')).toBe(false);\n            });\n        });\n\n        describe(\"CSS property hint insertion\", function () {\n            beforeEach(function () {\n                // create Editor instance (containing a CodeMirror instance)\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"css\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should insert colon prop-name selected\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 6, ch: 2 });\n\n                testEditor.setCursorPos({ line: 7, ch: 5 });   // cursor after 'bord'\n                selectHint(CSSCodeHints.cssPropHintProvider, \"border\");\n                expect(testDocument.getLine(7)).toBe(\" border: \");\n                expectCursorAt({ line: 7, ch: 9 });\n            });\n\n            it(\"should not insert semicolon after prop-value selected\", function () {\n                testDocument.replaceRange(\";\", { line: 12, ch: 5 });\n                testEditor.setCursorPos({ line: 13, ch: 10 });   // cursor after 'display: '\n                selectHint(CSSCodeHints.cssPropHintProvider, \"block\");\n                expect(testDocument.getLine(13)).toBe(\" display: block\");\n            });\n\n            it(\"should insert prop-name directly after semicolon\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 19 });   // cursor after red;\n                selectHint(CSSCodeHints.cssPropHintProvider, \"align-content\");\n                expect(testDocument.getLine(10)).toBe(\" border-color: red;align-content: \");\n            });\n\n            it(\"should insert nothing but the closure(semicolon) if prop-value is fully written\", function () {\n                testDocument.replaceRange(\";\", { line: 15, ch: 13 }); // insert text ;\n                testEditor.setCursorPos({ line: 16, ch: 6 });   // cursor directly after color\n                selectHint(CSSCodeHints.cssPropHintProvider, \"color\");\n                expect(testDocument.getLine(16)).toBe(\" color: \");\n                expectCursorAt({ line: 16, ch: 8 });\n            });\n\n            it(\"should insert prop-name before an existing one\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 1 });   // cursor before border-color:\n                selectHint(CSSCodeHints.cssPropHintProvider, \"float\");\n                expect(testDocument.getLine(10)).toBe(\" float:  border-color: red;\");\n                expectCursorAt({ line: 10, ch: 8 });\n            });\n\n            it(\"should insert prop-name before an existing one when invoked with an implicit character\", function () {\n                testDocument.replaceRange(\"f\", { line: 10, ch: 1 }); // insert \"f\" before border-color:\n                testEditor.setCursorPos({ line: 10, ch: 2 });        // set cursor before border-color:\n                selectHint(CSSCodeHints.cssPropHintProvider, \"float\", \"f\");\n                expect(testDocument.getLine(10)).toBe(\" float:  border-color: red;\");\n                expectCursorAt({ line: 10, ch: 8 });\n            });\n\n            it(\"should replace the existing prop-value with the new selection\", function () {\n                testDocument.replaceRange(\";\", { line: 12, ch: 5 });\n                testDocument.replaceRange(\"block\", { line: 13, ch: 10 });\n                testEditor.setCursorPos({ line: 13, ch: 10 });   // cursor before block\n                selectHint(CSSCodeHints.cssPropHintProvider, \"none\");\n                expect(testDocument.getLine(13)).toBe(\" display: none\");\n                expectCursorAt({ line: 13, ch: 14 });\n            });\n        });\n\n        describe(\"CSS prop-value hints\", function () {\n            beforeEach(function () {\n                // create Editor instance (containing a CodeMirror instance)\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"css\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should list all prop-values for 'display' after colon\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 12, ch: 5 });\n\n                testEditor.setCursorPos({ line: 13, ch: 9 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"block\");  // filtered after \"display:\"\n            });\n\n            it(\"should list all prop-values for 'display' after colon and whitespace\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 12, ch: 5 });\n\n                testEditor.setCursorPos({ line: 13, ch: 10 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"block\");  // filtered after \"display: \"\n            });\n\n            it(\"should list all prop-values starting with 'in' for 'display' after colon and whitespace\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 13, ch: 10 });\n\n                testEditor.setCursorPos({ line: 14, ch: 12 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"inherit\");  // filtered after \"display: in\"\n            });\n\n            it(\"should NOT list prop-value hints for unknown prop-name\", function () {\n                testEditor.setCursorPos({ line: 15, ch: 12 });  // at bordborder:\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n        });\n\n        describe(\"CSS hint provider inside mixed htmlfiles\", function () {\n            var defaultContent = \"<html> \\n\" +\n                                 \"<head><style>.selector{display: none;}</style></head> \\n\" +\n                                 \"<body> <style> \\n\" +\n                                 \" body { \\n\" +\n                                 \"    background-color: red; \\n\" +\n                                 \" \\n\" +\n                                 \"} \\n\" +\n                                 \"</style>\\n\" +\n                                 \"<div class='selector'></div>\\n\" +\n                                 \"<style> .foobar { \\n\" +\n                                 \" colo </style>\\n\" +\n                                 \"</body></html>\";\n\n            beforeEach(function () {\n                // create dummy Document for the Editor\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"html\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should list prop-name hints right after curly bracket\", function () {\n                testEditor.setCursorPos({ line: 3, ch: 7 });  // inside body-selector, after {\n                expectHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should list prop-name hints inside single-line styletags at start\", function () {\n                testEditor.setCursorPos({ line: 1, ch: 23 });  // inside style, after {\n                expectHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should list prop-name hints inside single-line styletags after semicolon\", function () {\n                testEditor.setCursorPos({ line: 1, ch: 37 });  // inside style, after ;\n                expectHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should list prop-name hints inside multi-line styletags with cursor in first line\", function () {\n                testEditor.setCursorPos({ line: 9, ch: 18 });   // inside style, after {\n                expectHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should list prop-name hints inside multi-line styletags with cursor in last line\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 5 });    // inside style, after colo\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyListsAreIdentical(hintList, [\n                    \"color\",\n                    \"border-color\",\n                    \"background-color\",\n                    \"border-left-color\",\n                    \"border-top-color\",\n                    \"outline-color\",\n                    \"border-bottom-color\",\n                    \"border-right-color\",\n                    \"text-decoration-color\",\n                    \"text-emphasis-color\",\n                    \"column-count\",\n                    \"column-rule-color\",\n                    \"caret-color\",\n                    \"scroll-behavior\",\n                    \"background-blend-mode\"\n                ]);\n            });\n\n            it(\"should NOT list prop-name hints between closed styletag and new opening styletag\", function () {\n                testEditor.setCursorPos({ line: 8, ch: 0 });    // right before <div\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should NOT list hints right before curly bracket\", function () {\n                testEditor.setCursorPos({ line: 3, ch: 6 });    // inside body-selector, before {\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should NOT list hints inside head-tag\", function () {\n                testEditor.setCursorPos({ line: 1, ch: 6 });    // between <head> and </head> {\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n        });\n\n        describe(\"CSS Hint provider in style attribute value context for html mode\", function () {\n\n            beforeEach(function () {\n                // create Editor instance (containing a CodeMirror instance)\n                var mock = SpecRunnerUtils.createMockEditor(defaultHTMLContent, \"html\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should list all prop-name hints right after the open quote for style value context\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 12 });    // after \"='\"\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"align-content\");  // filtered on \"empty string\"\n            });\n\n            it(\"should list all prop-name hints in new line for style value context\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 0 });\n\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"align-content\");  // filtered on \"empty string\"\n            });\n\n            it(\"should list all prop-name hints starting with 'b' in new line for style value context\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 2 });\n\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"backface-visibility\");  // filtered on \"b\"\n            });\n\n            it(\"should list all prop-name hints starting with 'bord' for style value context\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 6, ch: 2 });\n\n                testEditor.setCursorPos({ line: 7, ch: 5 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border\");  // filtered on \"bord\"\n            });\n\n            it(\"should list all prop-name hints starting with 'border-' for style value context\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 7, ch: 5 });\n\n                testEditor.setCursorPos({ line: 8, ch: 8 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border-bottom\");  // filtered on \"border-\"\n            });\n\n            it(\"should list only prop-name hint border-color for style value context\", function () {\n                // insert semicolon after previous rule to avoid incorrect tokenizing\n                testDocument.replaceRange(\";\", { line: 8, ch: 8 });\n\n                testEditor.setCursorPos({ line: 9, ch: 12 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border-color\");  // filtered on \"border-color\"\n                verifyListsAreIdentical(hintList, [\"border-color\",\n                    \"border-left-color\",\n                    \"border-top-color\",\n                    \"border-bottom-color\",\n                    \"border-right-color\"]);\n            });\n\n            it(\"should list prop-name hints at end of property-value finished by ; for style value context\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 19 });    // after ;\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"align-content\");  // filtered on \"empty string\"\n            });\n\n            it(\"should NOT list prop-name hints right before style value context\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 11 });    // after =\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n            it(\"should NOT list prop-name hints after style value context\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 20 });    // after \"'\"\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n\n        });\n\n\n        describe(\"CSS hint provider in other filecontext (e.g. javascript)\", function () {\n            var defaultContent = \"function foobar (args) { \\n \" +\n                                 \"    /* do sth */ \\n\" +\n                                 \"    return 1; \\n\" +\n                                 \"} \\n\";\n            beforeEach(function () {\n                // create dummy Document for the Editor\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"javascript\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should NOT list hints after function declaration\", function () {\n                testEditor.setCursorPos({ line: 0, ch: 24 });    // after {  after function declaration\n                expectNoHints(CSSCodeHints.cssPropHintProvider);\n            });\n        });\n\n        describe(\"CSS hint provider cursor placement inside value functions\", function () {\n            var defaultContent = \".selector { \\n\" + // line 0\n                                 \"shape-inside:\\n\" + // line 1\n                                 \"}\\n\"; // line 2\n\n            beforeEach(function () {\n                // create dummy Document for the Editor\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"css\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should should place the cursor between the parens of the value function\", function () {\n                var expectedString = \"shape-inside:polygon()\";\n\n                testEditor.setCursorPos({ line: 1, ch: 15 });    // after shape-inside\n                expectHints(CSSCodeHints.cssPropHintProvider);\n                selectHint(CSSCodeHints.cssPropHintProvider, \"polygon()\");\n                expect(testDocument.getLine(1).length).toBe(expectedString.length);\n                expect(testDocument.getLine(1)).toBe(expectedString);\n                expectCursorAt({ line: 1, ch: expectedString.length - 1 });\n            });\n        });\n\n        describe(\"CSS hint provider for regions and exclusions\", function () {\n            var defaultContent = \".selector { \\n\" + // line 0\n                                 \" shape-inside: \\n;\" + // line 1\n                                 \" shape-outside: \\n;\" + // line 2\n                                 \" region-fragment: \\n;\" + // line 3\n                                 \" region-break-after: \\n;\" + // line 4\n                                 \" region-break-inside: \\n;\" + // line 5\n                                 \" region-break-before: \\n;\" + // line 6\n                                 \" -ms-region\\n;\" + // line 7\n                                 \" -webkit-region\\n;\" + // line 8\n                                 \" flow-from: \\n;\" + // line 9\n                                 \" flow-into: \\n;\" + // line 10\n                                 \"}\\n\"; // line 11\n\n            beforeEach(function () {\n                // create dummy Document for the Editor\n                var mock = SpecRunnerUtils.createMockEditor(defaultContent, \"css\");\n                testEditor = mock.editor;\n                testDocument = mock.doc;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should list 7 value-name hints for shape-inside\", function () {\n                testEditor.setCursorPos({ line: 1, ch: 15 });    // after shape-inside\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"auto\");  // first hint should be auto\n                verifyAllValues(hintList, [\"auto\", \"circle()\", \"ellipse()\", \"inherit\", \"outside-shape\", \"polygon()\", \"rectangle()\"]);\n            });\n\n            it(\"should list 16 value-name hints for shape-outside\", function () {\n                testEditor.setCursorPos({ line: 2, ch: 16 });    // after shape-outside\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"border-box\");  // first hint should be border-box\n                verifyAllValues(hintList, [\"none\", \"inherit\", \"circle()\", \"ellipse()\", \"polygon()\", \"inset()\", \"margin-box\", \"border-box\", \"padding-box\", \"content-box\", \"url()\", \"image()\", \"linear-gradient()\", \"radial-gradient()\", \"repeating-linear-gradient()\", \"repeating-radial-gradient()\"]);\n            });\n\n            it(\"should list 2 value-name hints for region-fragment\", function () {\n                testEditor.setCursorPos({ line: 3, ch: 18 });    // after region-fragment\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"auto\");  // first hint should be auto\n                verifyAllValues(hintList, [\"auto\", \"break\"]);\n            });\n\n            it(\"should list 11 value-name hints for region-break-after\", function () {\n                testEditor.setCursorPos({ line: 4, ch: 21 });    // after region-break-after\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"always\");  // first hint should be always\n                verifyAllValues(hintList, [\"always\", \"auto\", \"avoid\", \"avoid-column\", \"avoid-page\", \"avoid-region\", \"column\", \"left\", \"page\", \"region\", \"right\"]);\n            });\n\n            it(\"should list 5 value-name hints for region-break-inside\", function () {\n                testEditor.setCursorPos({ line: 5, ch: 22 });    // after region-break-inside\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"auto\");  // first hint should be auto\n                verifyAllValues(hintList, [\"auto\", \"avoid\", \"avoid-column\", \"avoid-page\", \"avoid-region\"]);\n            });\n\n            it(\"should list 11 value-name hints for region-break-before\", function () {\n                testEditor.setCursorPos({ line: 6, ch: 23 });    // after region-break-before\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"always\");  // first hint should be always\n                verifyAllValues(hintList, [\"always\", \"auto\", \"avoid\", \"avoid-column\", \"avoid-page\", \"avoid-region\", \"column\", \"left\", \"page\", \"region\", \"right\"]);\n            });\n\n            it(\"should list 2 value-name hints for flow-from\", function () {\n                testEditor.setCursorPos({ line: 9, ch: 12 });    // after flow-from\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"inherit\");  // first hint should be inherit\n                verifyAllValues(hintList, [\"inherit\", \"none\"]);\n            });\n\n            it(\"should list 1 value-name hint for flow-into\", function () {\n                testEditor.setCursorPos({ line: 10, ch: 12 });    // after flow-into\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"none\");  // first hint should be none\n                verifyAllValues(hintList, [\"none\"]);\n            });\n        });\n\n        describe(\"Named flow hints for flow-into and flow-from properties in a CSS file\", function () {\n            beforeEach(function () {\n                setupTest(testContentCSS, \"css\");\n            });\n\n            afterEach(function () {\n                tearDownTest();\n            });\n\n            it(\"should list more than 2 value hints for flow-from\", function () {\n                testEditor.setCursorPos({ line: 66, ch: 15 });    // after flow-from\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"edge-code_now_shipping\");  // first hint should be edge-code_now_shipping\n                verifyAllValues(hintList, [\"edge-code_now_shipping\", \"inherit\", \"jeff\", \"lim\", \"main\", \"none\", \"randy\"]);\n            });\n\n            it(\"should list more than 1 value hint for flow-into\", function () {\n                testEditor.setCursorPos({ line: 77, ch: 4 });\n                selectHint(CSSCodeHints.cssPropHintProvider, \"flow-into\");\n                expect(testDocument.getLine(77)).toBe(\"    flow-into: \");\n                expectCursorAt({ line: 77, ch: 15 });\n\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"edge-code_now_shipping\");  // first hint should be edge-code_now_shipping\n                verifyAllValues(hintList, [\"edge-code_now_shipping\", \"jeff\", \"lim\", \"main\", \"none\", \"randy\"]);\n            });\n\n            it(\"should NOT include partially entered named flow value in hint list\", function () {\n                // Insert a letter for a new named flow after flow-from: on line 66\n                testDocument.replaceRange(\"m\", { line: 66, ch: 15 });\n\n                testEditor.setCursorPos({ line: 66, ch: 16 });    // after flow-from: m\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyListsAreIdentical(hintList, [\"main\", \"lim\"]);\n            });\n\n        });\n\n        describe(\"Named flow hints inside a style block of an HTML\", function () {\n            beforeEach(function () {\n                setupTest(testContentHTML, \"html\");\n            });\n\n            afterEach(function () {\n                tearDownTest();\n            });\n\n            it(\"should include only 2 named flows available in the style block for flow-from\", function () {\n                testEditor.setCursorPos({ line: 28, ch: 21 });    // after flow-from\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"article\");  // first hint should be article\n                verifyAllValues(hintList, [\"article\", \"inherit\", \"none\", \"regionC\"]);\n            });\n\n            it(\"should include only 2 named flows available in the style block for flow-into\", function () {\n                testEditor.setCursorPos({ line: 34, ch: 21 });\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"article\");  // first hint should be article\n                verifyAllValues(hintList, [\"article\", \"none\", \"regionC\"]);\n            });\n\n            it(\"should NOT include partially entered named flow value in hint list\", function () {\n                // Insert a letter for a new named flow after flow-from: on line 28\n                testDocument.replaceRange(\"m\", { line: 28, ch: 21 });\n\n                testEditor.setCursorPos({ line: 28, ch: 22 });    // after flow-from: m\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAllValues(hintList, []);\n            });\n\n            it(\"should NOT show named flow available inisde HTML text\", function () {\n                // Insert a letter for a new named flow after flow-from: on line 28\n                testDocument.replaceRange(\"some\", { line: 28, ch: 21 });\n\n                testEditor.setCursorPos({ line: 28, ch: 25 });    // after flow-from: some\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                // some-named-flow should not be in the hint list since it is inside HTML text\n                verifyAllValues(hintList, []);\n            });\n        });\n\n        describe(\"Color names and swatches in a CSS file\", function () {\n            beforeEach(function () {\n                setupTest(testContentCSS, \"css\");\n            });\n\n            afterEach(function () {\n                tearDownTest();\n            });\n\n            it(\"should list color names for color\", function () {\n                testEditor.setCursorPos({ line: 98, ch: 11 }); // after color\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"aliceblue\"); // first hint should be aliceblue\n            });\n\n            it(\"should show color swatches for background-color\", function () {\n                testEditor.setCursorPos({ line: 99, ch: 22 }); // after background-color\n                var hints = expectHints(CSSCodeHints.cssPropHintProvider, undefined, true).hints;\n                expect(hints[0].text()).toBe(\"aliceblue\"); // first hint should be aliceblue\n                expect(hints[0].find(\".color-swatch\").length).toBe(1);\n                // CEF 2623 will output \"aliceblue\" whereas earlier versions give \"rgb(240, 248, 255)\",\n                // so we need this ugly hack to make sure this test passes on both\n                expect(hints[0].find(\".color-swatch\").css(\"backgroundColor\")).toMatch(/^rgb\\(240, 248, 255\\)$|aliceblue/);\n            });\n\n            it(\"should filter out color names appropriately\", function () {\n                testEditor.setCursorPos({ line: 100, ch: 27 }); // after border-left-color\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                verifyAttrHints(hintList, \"deeppink\"); // first hint should be deeppink\n                verifyAllValues(hintList, [\"deeppink\", \"deepskyblue\"]);\n            });\n\n            it(\"should always include transparent and currentColor and they should not have a swatch, but class no-swatch-margin\", function () {\n                testEditor.setCursorPos({ line: 101, ch: 22 }); // after border-color\n                var hints = expectHints(CSSCodeHints.cssPropHintProvider, undefined, true).hints,\n                    hintList = extractHintList(hints);\n                verifyAttrHints(hintList, \"currentColor\"); // first hint should be currentColor\n                verifyAllValues(hintList, [\"currentColor\", \"darkmagenta\", \"transparent\"]);\n                expect(hints[0].find(\".color-swatch\").length).toBe(0); // no swatch for currentColor\n                expect(hints[2].find(\".color-swatch\").length).toBe(0); // no swatch for transparent\n                expect(hints[0].hasClass(\"no-swatch-margin\")).toBeTruthy(); // no-swatch-margin applied to currentColor\n                expect(hints[2].hasClass(\"no-swatch-margin\")).toBeTruthy(); // no-swatch-margin applied to transparent\n            });\n\n            it(\"should remove class no-swatch-margin from transparent if it's the only one in the list\", function () {\n                testEditor.setCursorPos({ line: 103, ch: 22 }); // after color\n                var hints = expectHints(CSSCodeHints.cssPropHintProvider, undefined, true).hints,\n                    hintList = extractHintList(hints);\n                verifyAllValues(hintList, [\"transparent\"]);\n                expect(hints[0].find(\".color-swatch\").length).toBe(0); // no swatch for transparent\n                expect(hints[0].hasClass(\"no-swatch-margin\")).toBeFalsy(); // no-swatch-margin not applied to transparent\n            });\n\n            it(\"should insert color names correctly\", function () {\n                var expectedString  = \"    border-left-color: deeppink;\",\n                    line            = 100;\n\n                testEditor.setCursorPos({ line: line, ch: 27 }); // after border-left-color\n                expectHints(CSSCodeHints.cssPropHintProvider);\n                selectHint(CSSCodeHints.cssPropHintProvider, \"deeppink\");\n                expect(testDocument.getLine(line).length).toBe(expectedString.length);\n                expect(testDocument.getLine(line)).toBe(expectedString);\n                expectCursorAt({ line: line, ch: expectedString.length - 1 });\n            });\n\n\n            it(\"should not display color names for unrelated properties\", function () {\n                testEditor.setCursorPos({ line: 102, ch: 12 }); // after height\n                var hintList = expectHints(CSSCodeHints.cssPropHintProvider);\n                expect(hintList.indexOf(\"aliceblue\")).toBe(-1);\n            });\n        });\n\n        describe(\"Should not invoke CSS hints on space key\", function () {\n            beforeEach(function () {\n                setupTest(testContentHTML, \"html\");\n            });\n\n            afterEach(function () {\n                tearDownTest();\n            });\n\n            it(\"should not trigger CSS property name hints with space key\", function () {\n                testEditor.setCursorPos({ line: 25, ch: 11 });    // after {\n                expectNoHints(CSSCodeHints.cssPropHintProvider, \" \");\n            });\n\n            it(\"should not trigger CSS property value hints with space key\", function () {\n                testEditor.setCursorPos({ line: 28, ch: 21 });    // after flow-from\n                expectNoHints(CSSCodeHints.cssPropHintProvider, \" \");\n            });\n        });\n    });\n});\n\n"],"file":"unittests.js"}