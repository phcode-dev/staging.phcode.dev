{"version":3,"sources":["widgets/PopUpManager.js"],"names":["define","require","exports","module","AppInit","EventDispatcher","WorkspaceManager","CommandManager","MainViewManager","KeyEvent","_popUps","addPopUp","$popUp","removeHandler","autoRemove","options","popupManagesFocus","push","data","removePopUp","find","length","index","indexOf","remove","splice","removeCurrentPopUp","keyEvent","i","event","$","Event","trigger","isDefaultPrevented","stopImmediatePropagation","focusActivePane","_keydownCaptureListener","keyCode","DOM_VK_ESCAPE","DOM_VK_ALT","brackets","platform","ctrlKey","_beforeMenuPopup","_dontToggleWorkspacePanel","popUp","listenToContextMenu","contextMenu","on","htmlReady","window","document","body","addEventListener","commandId","addEscapeKeyEventHandler","makeEventDispatcher"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,QAAkBH,QAAQ,iBAC1BI,gBAAkBJ,QAAQ,yBAC1BK,iBAAmBL,QAAQ,yBAC3BM,eAAkBN,QAAQ,0BAC1BO,gBAAsBP,QAAQ,wBAC9BQ,SAAkBR,QAAQ,kBAE1BS,QAAU,GAcd,SAASC,SAASC,OAAQC,cAAeC,WAAYC,SACjDD,WAAaA,aAAc,EAE3B,MAAME,mBADND,QAAUA,SAAW,IACaC,oBAAqB,EAEvDN,QAAQO,KAAKL,OAAO,IACpBA,OAAOM,KAAK,0BAA2BJ,YACvCF,OAAOM,KAAK,iCAAkCF,mBAC9CJ,OAAOM,KAAK,6BAA8BL,eAS9C,SAASM,YAAYP,QAGjB,GAAIA,OAAOQ,KAAK,YAAYC,OAAS,EAAG,CACpC,IAAIR,cAAgBD,OAAOM,KAAK,8BAC5BL,eACAA,gBAMR,IAAIS,MAAQZ,QAAQa,QAAQX,OAAO,IACnC,GAAIU,OAAS,EAAG,CACZ,IAAIR,WAAaF,OAAOM,KAAK,6BAEzBN,OAAOY,SACPd,QAAQe,OAAOH,MAAO,KAWlC,SAASI,mBAAmBC,UAExB,IAAIf,OACAgB,EACAC,MAAQ,IAAIC,EAAEC,MAAM,cAExB,IAAKH,EAAIlB,QAAQW,OAAS,EAAGO,GAAK,EAAGA,IAGjC,IAFAhB,OAASkB,EAAEpB,QAAQkB,KAERR,KAAK,YAAYC,OAAS,EAAG,CAGpC,GAFAT,OAAOoB,QAAQH,QAEVA,MAAMI,qBAAsB,CAEzBN,UACAA,SAASO,2BAGb,IAAIlB,kBAAoBJ,OAAOM,KAAK,kCACpCC,YAAYP,QAERI,mBAIAR,gBAAgB2B,kBAIxB,OAKZ,SAASC,wBAAwBT,WAEzBA,SAASU,UAAY5B,SAAS6B,eACxBX,SAASU,UAAY5B,SAAS8B,YAAoC,QAAtBC,SAASC,YAK3Dd,SAASU,UAAY5B,SAAS8B,YAAcZ,SAASe,SAIzDhB,mBAAmBC,WAMvB,SAASgB,mBACLjB,qBAGJ,SAASkB,4BACL,IAAI,IAAIC,SAASnC,QAAQ,CACrB,IAAIE,OACJ,GADakB,EAAEe,OACJzB,KAAK,YAAYC,OAAS,EACjC,OAAO,EAGf,OAAO,EAUX,SAASyB,oBAAoBC,aACzBA,YAAYC,GAAG,wBAAyBL,kBAG5CvC,QAAQ6C,UAAU,WAEdC,OAAOC,SAASC,KAAKC,iBAAiB,UAAWjB,yBAAyB,GAC1ElC,QAAQ8C,GAAG,kBAAmBL,kBAG9BpC,eAAeyC,GAAG,uBAAwB,SAAUnB,MAAOyB,WACvD5B,uBAGJpB,iBAAiBiD,yBAAyB,eAAgBX,6BAI9DvC,gBAAgBmD,oBAAoBtD,SAEpCA,QAAQS,SAAsBA,SAC9BT,QAAQiB,YAAsBA,YAC9BjB,QAAQ4C,oBAAsBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Utilities for managing pop-ups.\n */\ndefine(function (require, exports, module) {\n\n\n    let AppInit         = require(\"utils/AppInit\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        WorkspaceManager = require(\"view/WorkspaceManager\"),\n        CommandManager  = require(\"command/CommandManager\"),\n        MainViewManager     = require(\"view/MainViewManager\"),\n        KeyEvent        = require(\"utils/KeyEvent\");\n\n    let _popUps = [];\n\n    /**\n     * Add Esc key handling for a popup DOM element.\n     *\n     * @param {!jQuery} $popUp jQuery object for the DOM element pop-up\n     * @param {function} removeHandler Pop-up specific remove (e.g. display:none or DOM removal)\n     * @param {?Boolean} autoRemove - Specify true to indicate the PopUpManager should\n     *      remove the popup from the _popUps array when the popup is closed. Specify false\n     *      when the popup is always persistant in the _popUps array.\n     * @param {object} options\n     * @param {boolean} options.popupManagesFocus - set to true if the popup manages focus restore on close\n     *\n     */\n    function addPopUp($popUp, removeHandler, autoRemove, options) {\n        autoRemove = autoRemove || false;\n        options = options || {};\n        const popupManagesFocus = options.popupManagesFocus || false;\n\n        _popUps.push($popUp[0]);\n        $popUp.data(\"PopUpManager-autoRemove\", autoRemove);\n        $popUp.data(\"PopUpManager-popupManagesFocus\", popupManagesFocus);\n        $popUp.data(\"PopUpManager-removeHandler\", removeHandler);\n    }\n\n    /**\n     * Remove Esc key handling for a pop-up. Removes the pop-up from the DOM\n     * if the pop-up is currently visible and was not originally attached.\n     *\n     * @param {!jQuery} $popUp\n     */\n    function removePopUp($popUp) {\n        // check visible first to help protect against recursive calls\n        // via removeHandler\n        if ($popUp.find(\":visible\").length > 0) {\n            let removeHandler = $popUp.data(\"PopUpManager-removeHandler\");\n            if (removeHandler) {\n                removeHandler();\n            }\n        }\n\n        // check index after removeHandler is done processing to protect\n        // against recursive calls\n        let index = _popUps.indexOf($popUp[0]);\n        if (index >= 0) {\n            let autoRemove = $popUp.data(\"PopUpManager-autoRemove\");\n            if (autoRemove) {\n                $popUp.remove();\n                _popUps.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Remove Esc key handling for a pop-up. Removes the pop-up from the DOM\n     * if the pop-up is currently visible and was not originally attached.\n     *\n     * @param {KeyboardEvent=} keyEvent (optional)\n     */\n    function removeCurrentPopUp(keyEvent) {\n        // allow the popUp to prevent closing\n        let $popUp,\n            i,\n            event = new $.Event(\"popUpClose\");\n\n        for (i = _popUps.length - 1; i >= 0; i--) {\n            $popUp = $(_popUps[i]);\n\n            if ($popUp.find(\":visible\").length > 0) {\n                $popUp.trigger(event);\n\n                if (!event.isDefaultPrevented()) {\n                    // Stop the DOM event from propagating\n                    if (keyEvent) {\n                        keyEvent.stopImmediatePropagation();\n                    }\n\n                    let popupManagesFocus = $popUp.data(\"PopUpManager-popupManagesFocus\");\n                    removePopUp($popUp);\n\n                    if(!popupManagesFocus){\n                        // We need to have a focus manager to correctly manage focus\n                        // between editors and other UI elements.\n                        // For now we set focus here if the popup doesnt manage the focus itself\n                        MainViewManager.focusActivePane();\n                    }\n                }\n\n                break;\n            }\n        }\n    }\n\n    function _keydownCaptureListener(keyEvent) {\n        // Escape key or Alt key (Windows-only)\n        if (keyEvent.keyCode !== KeyEvent.DOM_VK_ESCAPE &&\n                !(keyEvent.keyCode === KeyEvent.DOM_VK_ALT && brackets.platform === \"win\")) {\n            return;\n        }\n\n        // Don't dismiss the popup if both Ctrl and Alt keys are pressed.\n        if (keyEvent.keyCode === KeyEvent.DOM_VK_ALT && keyEvent.ctrlKey) {\n            return;\n        }\n\n        removeCurrentPopUp(keyEvent);\n    }\n\n    /**\n     * A menu is being popped up, so remove any menu that is currently popped up\n     */\n    function _beforeMenuPopup() {\n        removeCurrentPopUp();\n    }\n\n    function _dontToggleWorkspacePanel() {\n        for(let popUp of _popUps){\n            let $popUp = $(popUp);\n            if ($popUp.find(\":visible\").length > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Context menus are also created in AppInit.htmlReady(), so they may not\n     * yet have been created when we get our AppInit.htmlReady() callback, so\n     * we provide this method to tell us when to start listening for their events\n     *\n     * @param {ContextMenu} contextMenu\n     */\n    function listenToContextMenu(contextMenu) {\n        contextMenu.on(\"beforeContextMenuOpen\", _beforeMenuPopup);\n    }\n\n    AppInit.htmlReady(function () {\n        // Register for events\n        window.document.body.addEventListener(\"keydown\", _keydownCaptureListener, true);\n        exports.on(\"beforeMenuPopup\", _beforeMenuPopup);\n\n        // Close all popups when a command is executed\n        CommandManager.on(\"beforeExecuteCommand\", function (event, commandId) {\n            removeCurrentPopUp();\n        });\n\n        WorkspaceManager.addEscapeKeyEventHandler(\"PopUpManager\", _dontToggleWorkspacePanel);\n    });\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    exports.addPopUp            = addPopUp;\n    exports.removePopUp         = removePopUp;\n    exports.listenToContextMenu = listenToContextMenu;\n});\n"],"file":"PopUpManager.js"}