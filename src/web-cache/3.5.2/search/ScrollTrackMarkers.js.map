{"version":3,"sources":["search/ScrollTrackMarkers.js"],"names":["define","require","exports","module","_","WorkspaceManager","editor","trackOffset","trackHt","marks","$markedTickmark","scrollbarTrackOffset","brackets","platform","getScrollbarTrackOffset","setScrollbarTrackOffset","offset","_getScrollbar","$","getRootElement","children","_calcScaling","$sb","offsetHeight","codeContainer","find","offsetTop","_renderMarks","posArray","html","cm","_codeMirror","editorHt","getScrollerElement","scrollHeight","wrapping","getOption","singleLineH","defaultTextHeight","curLine","curLineObj","getY","pos","line","getLineHandle","height","charCoords","top","heightAtLine","forEach","cursorTop","Math","round","append","clear","empty","setVisible","curEditor","visible","console","assert","isTextSubset","$overlay","parent","on","debounce","length","remove","off","addTickmarks","concat","markCurrent","index","removeClass","eq","addClass","_getTickmarks"],"mappings":"AA0BAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,EAAIH,QAAQ,qBAEZI,iBAAmBJ,QAAQ,yBAO3BK,OAMAC,YAMAC,QAMAC,MAAQ,GAMRC,gBAMAC,qBAEJ,OAAQC,SAASC,UACjB,IAAK,MACDF,qBAAuB,EACvB,MACJ,IAAK,MACDA,qBAAuB,EACvB,MACJ,IAAK,QACDA,qBAAuB,EAQ3B,SAASG,0BACL,OAAOH,qBAQX,SAASI,wBAAwBC,QAC7BL,qBAAuBK,OAI3B,SAASC,cAAcX,QAEnB,OAAOY,EAAEZ,OAAOa,kBAAkBC,SAAS,0BAI/C,SAASC,eACL,IAAIC,IAAML,cAAcX,QAIxB,IAFAE,QAAUc,IAAI,GAAGC,cAEH,EACVhB,YAAcO,0BACdN,SAAyB,EAAdD,gBACR,CAEH,IAAIiB,cAAgBN,EAAEZ,OAAOa,kBAAkBM,KAAK,4EAA4E,GAChIjB,QAAUgB,cAAcD,aACxBhB,YAAciB,cAAcE,WAKpC,SAASC,aAAaC,UAClB,IAAIC,KAAO,GACPC,GAAKxB,OAAOyB,YACZC,SAAWF,GAAGG,qBAAqBC,aAInCC,SAAWL,GAAGM,UAAU,gBACxBC,YAAcF,UAAqC,IAAzBL,GAAGQ,oBAC7BC,QAAU,KACVC,WAAa,KAEjB,SAASC,KAAKX,GAAIY,KAKd,OAJIH,UAAYG,IAAIC,OAChBJ,QAAUG,IAAIC,KACdH,WAAaV,GAAGc,cAAcL,UAE9BJ,UAAYK,WAAWK,OAASR,YACzBP,GAAGgB,WAAWJ,IAAK,SAASK,IAEhCjB,GAAGkB,aAAaR,WAAY,SAGvCZ,SAASqB,QAAQ,SAAUP,KACvB,IAAIQ,UAAYT,KAAKX,GAAIY,KACrBK,IAAMI,KAAKC,MAAMF,UAAYlB,SAAWxB,SAAWD,YAGvDsB,MAAQ,sCAFRkB,IAEoD,eAExD7B,EAAE,kBAAmBZ,OAAOa,kBAAkBkC,OAAOnC,EAAEW,OAQ3D,SAASyB,QACDhD,SACAY,EAAE,kBAAmBZ,OAAOa,kBAAkBoC,QAC9C9C,MAAQ,GACRC,gBAAkB,MAK1B,SAAS8C,WAAWC,UAAWC,SAE3B,KAAKA,SAAWD,YAAcnD,SAAaoD,UAAYpD,QAIvD,GAAIoD,QAAS,CAKT,GAJAC,QAAQC,QAAQtD,SAChBA,OAASmD,WAGEI,eACP,OAGJ,IAAIvC,IAAML,cAAcX,QACpBwD,SAAW5C,EAAE,sCACjBI,IAAIyC,SAASV,OAAOS,UAEpBzC,eAGAhB,iBAAiB2D,GAAG,2CAA4C5D,EAAE6D,SAAS,WACnExD,MAAMyD,SACN7C,eACAH,EAAE,kBAAmBZ,OAAOa,kBAAkBoC,QAC9C5B,aAAalB,SAElB,WAGHkD,QAAQC,OAAOtD,SAAWmD,WAC1BvC,EAAE,kBAAmBuC,UAAUtC,kBAAkBgD,SACjD7D,OAAS,KACTG,MAAQ,GACRJ,iBAAiB+D,IAAI,4CAS7B,SAASC,aAAaZ,UAAW7B,UAC7B+B,QAAQC,OAAOtD,SAAWmD,WAE1BhD,MAAQA,MAAM6D,OAAO1C,UACrBD,aAAaC,UAIjB,SAAS2C,YAAYC,OAEb9D,kBACAA,gBAAgB+D,YAAY,oBAC5B/D,gBAAkB,OAEP,IAAX8D,QACA9D,gBAAkBQ,EAAE,8BAA+BZ,OAAOa,kBAAkBuD,GAAGF,OAAOG,SAAS,qBAKvG,SAASC,gBACL,OAAOnE,MAKXP,QAAQ0E,cAAkBA,cAE1B1E,QAAQoD,MAAkBA,MAC1BpD,QAAQsD,WAAkBA,WAC1BtD,QAAQmE,aAAkBA,aAC1BnE,QAAQqE,YAAkBA,YAE1BrE,QAAQY,wBAA0BA,wBAClCZ,QAAQa,wBAA0BA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Manages tickmarks shown along the scrollbar track.\n * NOT yet intended for use by anyone other than the FindReplace module.\n * It is assumed that markers are always clear()ed when switching editors.\n */\ndefine(function (require, exports, module) {\n\n\n    var _ = require(\"thirdparty/lodash\");\n\n    var WorkspaceManager = require(\"view/WorkspaceManager\");\n\n\n    /**\n     * Editor the markers are currently shown for, or null if not shown\n     * @type {?Editor}\n     */\n    var editor;\n\n    /**\n     * Top of scrollbar track area, relative to top of scrollbar\n     * @type {number}\n     */\n    var trackOffset;\n\n    /**\n     * Height of scrollbar track area\n     * @type {number}\n     */\n    var trackHt;\n\n    /**\n     * Text positions of markers\n     * @type {!Array.<{line: number, ch: number}>}\n     */\n    var marks = [];\n\n    /**\n     * Tickmark markCurrent() last called on, or null if never called / called with -1.\n     * @type {?jQueryObject}\n     */\n    var $markedTickmark;\n\n    /**\n     * Vertical space above and below the scrollbar\n     * @type {number}\n     */\n    var scrollbarTrackOffset;\n\n    switch (brackets.platform) {\n    case \"win\": // Custom scrollbar CSS has no gap around the track\n        scrollbarTrackOffset = 0;\n        break;\n    case \"mac\": // Native scrollbar has padding around the track\n        scrollbarTrackOffset = 4;\n        break;\n    case \"linux\": // Custom scrollbar CSS has assymmetrical gap; this approximates it\n        scrollbarTrackOffset = 2;\n        break;\n    }\n\n    /**\n     * Vertical space above and below the scrollbar.\n     * @return {number} amount Value in pixels\n     */\n    function getScrollbarTrackOffset() {\n        return scrollbarTrackOffset;\n    }\n\n    /**\n     * Sets how much vertical space there's above and below the scrollbar, which depends\n     * on the OS and may also be affected by extensions\n     * @param {number} offset Value in pixels\n     */\n    function setScrollbarTrackOffset(offset) {\n        scrollbarTrackOffset = offset;\n    }\n\n\n    function _getScrollbar(editor) {\n        // Be sure to select only the direct descendant, not also elements within nested inline editors\n        return $(editor.getRootElement()).children(\".CodeMirror-vscrollbar\");\n    }\n\n    /** Measure scrollbar track */\n    function _calcScaling() {\n        var $sb = _getScrollbar(editor);\n\n        trackHt = $sb[0].offsetHeight;\n\n        if (trackHt > 0) {\n            trackOffset = getScrollbarTrackOffset();\n            trackHt -= trackOffset * 2;\n        } else {\n            // No scrollbar: use the height of the entire code content\n            var codeContainer = $(editor.getRootElement()).find(\"> .CodeMirror-scroll > .CodeMirror-sizer > div > .CodeMirror-lines > div\")[0];\n            trackHt = codeContainer.offsetHeight;\n            trackOffset = codeContainer.offsetTop;\n        }\n    }\n\n    /** Add all the given tickmarks to the DOM in a batch */\n    function _renderMarks(posArray) {\n        var html = \"\",\n            cm = editor._codeMirror,\n            editorHt = cm.getScrollerElement().scrollHeight;\n\n        // We've pretty much taken these vars and the getY function from CodeMirror's annotatescrollbar addon\n        // https://github.com/codemirror/CodeMirror/blob/master/addon/scroll/annotatescrollbar.js\n        var wrapping = cm.getOption(\"lineWrapping\"),\n            singleLineH = wrapping && cm.defaultTextHeight() * 1.5,\n            curLine = null,\n            curLineObj = null;\n\n        function getY(cm, pos) {\n            if (curLine !== pos.line) {\n                curLine = pos.line;\n                curLineObj = cm.getLineHandle(curLine);\n            }\n            if (wrapping && curLineObj.height > singleLineH) {\n                return cm.charCoords(pos, \"local\").top;\n            }\n            return cm.heightAtLine(curLineObj, \"local\");\n        }\n\n        posArray.forEach(function (pos) {\n            var cursorTop = getY(cm, pos),\n                top = Math.round(cursorTop / editorHt * trackHt) + trackOffset;\n            top--;  // subtract ~1/2 the ht of a tickmark to center it on ideal pos\n\n            html += \"<div class='tickmark' style='top:\" + top + \"px'></div>\";\n        });\n        $(\".tickmark-track\", editor.getRootElement()).append($(html));\n    }\n\n\n    /**\n     * Clear any markers in the editor's tickmark track, but leave it visible. Safe to call when\n     * tickmark track is not visible also.\n     */\n    function clear() {\n        if (editor) {\n            $(\".tickmark-track\", editor.getRootElement()).empty();\n            marks = [];\n            $markedTickmark = null;\n        }\n    }\n\n    /** Add or remove the tickmark track from the editor's UI */\n    function setVisible(curEditor, visible) {\n        // short-circuit no-ops\n        if ((visible && curEditor === editor) || (!visible && !editor)) {\n            return;\n        }\n\n        if (visible) {\n            console.assert(!editor);\n            editor = curEditor;\n\n            // Don't support inline editors yet - search inside them is pretty screwy anyway (#2110)\n            if (editor.isTextSubset()) {\n                return;\n            }\n\n            var $sb = _getScrollbar(editor),\n                $overlay = $(\"<div class='tickmark-track'></div>\");\n            $sb.parent().append($overlay);\n\n            _calcScaling();\n\n            // Update tickmarks during editor resize (whenever resizing has paused/stopped for > 1/3 sec)\n            WorkspaceManager.on(\"workspaceUpdateLayout.ScrollTrackMarkers\", _.debounce(function () {\n                if (marks.length) {\n                    _calcScaling();\n                    $(\".tickmark-track\", editor.getRootElement()).empty();\n                    _renderMarks(marks);\n                }\n            }, 300));\n\n        } else {\n            console.assert(editor === curEditor);\n            $(\".tickmark-track\", curEditor.getRootElement()).remove();\n            editor = null;\n            marks = [];\n            WorkspaceManager.off(\"workspaceUpdateLayout.ScrollTrackMarkers\");\n        }\n    }\n\n    /**\n     * Add tickmarks to the editor's tickmark track, if it's visible\n     * @param curEditor {!Editor}\n     * @param posArray {!Array.<{line:Number, ch:Number}>}\n     */\n    function addTickmarks(curEditor, posArray) {\n        console.assert(editor === curEditor);\n\n        marks = marks.concat(posArray);\n        _renderMarks(posArray);\n    }\n\n    /** @param {number} index Either -1, or an index into the array passed to addTickmarks() */\n    function markCurrent(index) {\n        // Remove previous highlight first\n        if ($markedTickmark) {\n            $markedTickmark.removeClass(\"tickmark-current\");\n            $markedTickmark = null;\n        }\n        if (index !== -1) {\n            $markedTickmark = $(\".tickmark-track > .tickmark\", editor.getRootElement()).eq(index).addClass(\"tickmark-current\");\n        }\n    }\n\n    // Private helper for unit tests\n    function _getTickmarks() {\n        return marks;\n    }\n\n\n    // For unit tests\n    exports._getTickmarks   = _getTickmarks;\n\n    exports.clear           = clear;\n    exports.setVisible      = setVisible;\n    exports.addTickmarks    = addTickmarks;\n    exports.markCurrent     = markCurrent;\n\n    exports.getScrollbarTrackOffset = getScrollbarTrackOffset;\n    exports.setScrollbarTrackOffset = setScrollbarTrackOffset;\n});\n"],"file":"ScrollTrackMarkers.js"}