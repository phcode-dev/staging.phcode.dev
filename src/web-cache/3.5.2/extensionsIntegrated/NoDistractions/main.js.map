{"version":3,"sources":["extensionsIntegrated/NoDistractions/main.js"],"names":["define","require","exports","module","AppInit","Menus","CommandManager","Commands","Strings","PreferencesManager","ViewUtils","KeyBindingManager","Metrics","WorkspaceManager","PREFS_PURE_CODE","CMD_TOGGLE_PURE_CODE","CMD_TOGGLE_FULLSCREEN","CMD_TOGGLE_PANELS","togglePureCodeKey","toggleFullScreenKey","toggleFullScreenKeyMac","togglePanelsKey","togglePanelsKeyMac","togglePanelsKey_EN","togglePanelsKeyMac_EN","_previouslyOpenPanelIDs","panelsToggled","layoutUpdated","_updateCheckedState","get","setChecked","Phoenix","app","isFullscreen","then","isFullScreen","_togglePureCode","set","countEvent","EVENT_TYPE","UI","async","_toggleFullScreen","setFullscreen","_hidePanelsIfRequired","panelIDs","getAllPanelIDs","forEach","panelID","panel","getPanelForID","isVisible","hide","push","_showPanelsIfRequired","show","_updateLayout","_togglePanels","definePreference","description","DESCRIPTION_PURE_CODING_SURFACE","on","EVENT_WORKSPACE_PANEL_SHOWN","appReady","register","getMenu","AppMenuBar","VIEW_MENU","addMenuItem","AFTER","VIEW_HIDE_SIDEBAR","key","platform","addBinding","hideMainToolBar","execute","HIDE_SIDEBAR","showMainToolBar","SHOW_SIDEBAR"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2015 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n\ndefine(function (require, exports, module) {\n\n\n    const AppInit                 = require(\"utils/AppInit\"),\n        Menus               = require(\"command/Menus\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        Commands            = require(\"command/Commands\"),\n        Strings             = require(\"strings\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        ViewUtils           = require(\"utils/ViewUtils\"),\n        KeyBindingManager   = require(\"command/KeyBindingManager\"),\n        Metrics             = require(\"utils/Metrics\"),\n        WorkspaceManager    = require(\"view/WorkspaceManager\");\n\n    // Constants\n    const PREFS_PURE_CODE           = \"noDistractions\",\n        CMD_TOGGLE_PURE_CODE      = \"view.togglePureCode\",\n        CMD_TOGGLE_FULLSCREEN     = \"view.toggleFullscreen\",\n        CMD_TOGGLE_PANELS         = \"view.togglePanels\";\n\n    //key binding keys\n    const togglePureCodeKey         = \"Shift-F11\",\n        toggleFullScreenKey = \"F11\",\n        toggleFullScreenKeyMac = \"Cmd-F11\",\n        togglePanelsKey           = \"Ctrl-Shift-1\",\n        togglePanelsKeyMac        = \"Cmd-Shift-1\",\n        togglePanelsKey_EN        = \"Ctrl-Shift-~\",\n        togglePanelsKeyMac_EN     = \"Cmd-Shift-~\";\n\n    //locals\n    let _previouslyOpenPanelIDs = [],\n        panelsToggled = false,\n        layoutUpdated = false;\n\n    /**\n     * @private\n     * Updates the command checked status based on the preference for noDestraction mode\n     */\n    function _updateCheckedState() {\n        CommandManager.get(CMD_TOGGLE_PURE_CODE).setChecked(PreferencesManager.get(PREFS_PURE_CODE));\n        Phoenix.app.isFullscreen().then(isFullScreen =>{\n            CommandManager.get(CMD_TOGGLE_FULLSCREEN).setChecked(isFullScreen);\n        });\n    }\n\n    /**\n     * @private\n     * toggles noDisraction preference\n     */\n    function _togglePureCode() {\n        PreferencesManager.set(PREFS_PURE_CODE, !PreferencesManager.get(PREFS_PURE_CODE));\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, 'noDistractions', 'toggle');\n    }\n\n    async function _toggleFullScreen() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, 'fullscreen', 'toggle');\n        Phoenix.app.isFullscreen().then(isFullScreen =>{\n            Phoenix.app.setFullscreen(!isFullScreen)\n                .then(_updateCheckedState);\n        });\n    }\n\n    /**\n     * hide all open panels\n     */\n    function _hidePanelsIfRequired() {\n        var panelIDs = WorkspaceManager.getAllPanelIDs();\n        _previouslyOpenPanelIDs = [];\n        panelIDs.forEach(function (panelID) {\n            var panel = WorkspaceManager.getPanelForID(panelID);\n            if (panel && panel.isVisible()) {\n                panel.hide();\n                _previouslyOpenPanelIDs.push(panelID);\n            }\n        });\n    }\n\n    /**\n     * show all open panels that was previously hidden by _hidePanelsIfRequired()\n     */\n    function _showPanelsIfRequired() {\n        var panelIDs = _previouslyOpenPanelIDs;\n        panelIDs.forEach(function (panelID) {\n            var panel = WorkspaceManager.getPanelForID(panelID);\n            if (panel) {\n                panel.show();\n            }\n        });\n        _previouslyOpenPanelIDs = [];\n    }\n\n    function _updateLayout() {\n        layoutUpdated = true;\n        panelsToggled = false;\n    }\n\n    /**\n     * We toggle panels in certain cases only :\n     * 1. if a panel is shown, toggle can hide it, and successive toggle can show the panel and repeat.\n     * 2. if a panel is hidden by toggle, and say the workspace changed making another panel visible by some operation;\n     * we reset toggle states so that toggle would hide the panel already present in the workspace.\n     * The already hidden panel should not be shown in the specific case for better UX.\n     */\n    function _togglePanels() {\n        panelsToggled = !panelsToggled;\n        if (panelsToggled) {\n            _hidePanelsIfRequired();\n            layoutUpdated = false;\n            panelsToggled = true;\n        } else if (!layoutUpdated) {\n            _showPanelsIfRequired();\n        }\n\n        Metrics.countEvent(Metrics.EVENT_TYPE.UI, 'noDistractions', 'togglePanels');\n    }\n\n    PreferencesManager.definePreference(PREFS_PURE_CODE, \"boolean\", false, {\n        description: Strings.DESCRIPTION_PURE_CODING_SURFACE\n    });\n\n    WorkspaceManager.on(WorkspaceManager.EVENT_WORKSPACE_PANEL_SHOWN, _updateLayout);\n\n    /**\n     * Register the Commands , add the Menu Items and key bindings\n     */\n    AppInit.appReady(function () {\n        CommandManager.register(Strings.CMD_TOGGLE_PURE_CODE, CMD_TOGGLE_PURE_CODE, _togglePureCode);\n        CommandManager.register(Strings.CMD_TOGGLE_FULLSCREEN, CMD_TOGGLE_FULLSCREEN, _toggleFullScreen);\n        CommandManager.register(Strings.CMD_TOGGLE_PANELS, CMD_TOGGLE_PANELS, _togglePanels);\n\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).addMenuItem(CMD_TOGGLE_PANELS, \"\", Menus.AFTER, Commands.VIEW_HIDE_SIDEBAR);\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).addMenuItem(CMD_TOGGLE_PURE_CODE, togglePureCodeKey, Menus.AFTER, CMD_TOGGLE_PANELS);\n        Menus.getMenu(Menus.AppMenuBar.VIEW_MENU).addMenuItem(CMD_TOGGLE_FULLSCREEN, [ {key: toggleFullScreenKey}, {key: toggleFullScreenKeyMac, platform: \"mac\"} ], Menus.AFTER, CMD_TOGGLE_PURE_CODE);\n\n        //default toggle panel shortcut was ctrl+shift+` as it is present in one vertical line in the keyboard. However, we later learnt\n        //from IQE team than non-English keyboards does not have the ` char. So added one more shortcut ctrl+shift+1 which will be preferred\n        KeyBindingManager.addBinding(CMD_TOGGLE_PANELS, [ {key: togglePanelsKey}, {key: togglePanelsKeyMac, platform: \"mac\"} ]);\n        KeyBindingManager.addBinding(CMD_TOGGLE_PANELS, [ {key: togglePanelsKey_EN}, {key: togglePanelsKeyMac_EN, platform: \"mac\"} ]);\n\n        PreferencesManager.on(\"change\", PREFS_PURE_CODE, function () {\n            if (PreferencesManager.get(PREFS_PURE_CODE)) {\n                ViewUtils.hideMainToolBar();\n                CommandManager.execute(Commands.HIDE_SIDEBAR);\n                _hidePanelsIfRequired();\n            } else {\n                ViewUtils.showMainToolBar();\n                CommandManager.execute(Commands.SHOW_SIDEBAR);\n                _showPanelsIfRequired();\n            }\n            _updateCheckedState();\n        });\n    });\n\n});\n"],"file":"main.js"}