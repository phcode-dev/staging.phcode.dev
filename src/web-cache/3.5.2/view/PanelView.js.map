{"version":3,"sources":["view/PanelView.js"],"names":["define","require","exports","module","EventDispatcher","Resizer","EVENT_PANEL_HIDDEN","EVENT_PANEL_SHOWN","PANEL_TYPE_BOTTOM_PANEL","Panel","$panel","id","this","panelID","prototype","isVisible","is","registerCanBeShownHandler","canShowHandlerFn","canBeShownHandler","console","warn","canBeShown","self","show","trigger","hide","setVisible","visible","getPanelType","makeEventDispatcher"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAE/B,MAAMC,gBAAkBH,QAAQ,yBAC5BI,QAAUJ,QAAQ,iBAClBK,mBAAqB,cACrBC,kBAAoB,aACpBC,wBAA0B,cAO9B,SAASC,MAAMC,OAAQC,IACnBC,KAAKF,OAASA,OACdE,KAAKC,QAAUF,GAOnBF,MAAMK,UAAUJ,OAAS,KAMzBD,MAAMK,UAAUC,UAAY,WACxB,OAAOH,KAAKF,OAAOM,GAAG,aAU1BP,MAAMK,UAAUG,0BAA4B,SAAUC,kBAC/CN,KAAKO,mBAAqBD,kBACzBE,QAAQC,wDAAwDT,KAAKC,gCAEzED,KAAKO,kBAAoBD,kBAO7BT,MAAMK,UAAUQ,WAAa,WACzB,IAAIC,KAAOX,KACX,OAAGW,KAAKJ,mBACGI,KAAKJ,qBAQpBV,MAAMK,UAAUU,KAAO,YACfZ,KAAKG,aAAeH,KAAKU,eACzBjB,QAAQmB,KAAKZ,KAAKF,OAAO,IACzBR,QAAQuB,QA3DQ,aA2DmBb,KAAKC,WAOhDJ,MAAMK,UAAUY,KAAO,WAChBd,KAAKG,cACJV,QAAQqB,KAAKd,KAAKF,OAAO,IACzBR,QAAQuB,QAtES,cAsEmBb,KAAKC,WAQjDJ,MAAMK,UAAUa,WAAa,SAAUC,SAC/BA,QACAhB,KAAKY,OAELZ,KAAKc,QAQbjB,MAAMK,UAAUe,aAAe,WAC3B,MAzF0B,eA4F9BzB,gBAAgB0B,oBAAoB5B,SAGpCA,QAAQO,MAAQA,MAEhBP,QAAQI,mBAnGiB,cAoGzBJ,QAAQK,kBAnGgB,aAoGxBL,QAAQM,wBAnGsB","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n\n/*global fs, Phoenix, process*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/* jshint ignore:start */\n\ndefine(function (require, exports, module) {\n\n    const EventDispatcher = require(\"utils/EventDispatcher\"),\n        Resizer = require(\"utils/Resizer\"),\n        EVENT_PANEL_HIDDEN = 'panelHidden',\n        EVENT_PANEL_SHOWN = 'panelShown',\n        PANEL_TYPE_BOTTOM_PANEL = \"bottomPanel\";\n\n    /**\n     * Represents a panel below the editor area (a child of \".content\").\n     * @constructor\n     * @param {!jQueryObject} $panel  The entire panel, including any chrome, already in the DOM.\n     */\n    function Panel($panel, id) {\n        this.$panel = $panel;\n        this.panelID = id;\n    }\n\n    /**\n     * Dom node holding the rendered panel\n     * @type {jQueryObject}\n     */\n    Panel.prototype.$panel = null;\n\n    /**\n     * Determines if the panel is visible\n     * @return {boolean} true if visible, false if not\n     */\n    Panel.prototype.isVisible = function () {\n        return this.$panel.is(\":visible\");\n    };\n\n    /**\n     * Registers a call back function that will be called just before panel is shown. The handler should return true\n     * if the panel can be shown, else return false and the panel will not be shown.\n     * @param {function|null} canShowHandlerFn function that should return true of false if the panel can be shown/not.\n     * or null to clear the handler.\n     * @return {boolean} true if visible, false if not\n     */\n    Panel.prototype.registerCanBeShownHandler = function (canShowHandlerFn) {\n        if(this.canBeShownHandler && canShowHandlerFn){\n            console.warn(`canBeShownHandler already registered for panel: ${this.panelID}. will be overwritten`);\n        }\n        this.canBeShownHandler = canShowHandlerFn;\n    };\n\n    /**\n     * Returns true if th panel can be shown, else false.\n     * @return {boolean}\n     */\n    Panel.prototype.canBeShown = function () {\n        let self = this;\n        if(self.canBeShownHandler){\n            return self.canBeShownHandler();\n        }\n        return true;\n    };\n\n    /**\n     * Shows the panel\n     */\n    Panel.prototype.show = function () {\n        if(!this.isVisible() && this.canBeShown()){\n            Resizer.show(this.$panel[0]);\n            exports.trigger(EVENT_PANEL_SHOWN, this.panelID);\n        }\n    };\n\n    /**\n     * Hides the panel\n     */\n    Panel.prototype.hide = function () {\n        if(this.isVisible()){\n            Resizer.hide(this.$panel[0]);\n            exports.trigger(EVENT_PANEL_HIDDEN, this.panelID);\n        }\n    };\n\n    /**\n     * Sets the panel's visibility state\n     * @param {boolean} visible true to show, false to hide\n     */\n    Panel.prototype.setVisible = function (visible) {\n        if (visible) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    };\n\n    /**\n     * gets the Panle's type\n     * @return {string}\n     */\n    Panel.prototype.getPanelType = function () {\n        return PANEL_TYPE_BOTTOM_PANEL;\n    };\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // Public API\n    exports.Panel = Panel;\n    //events\n    exports.EVENT_PANEL_HIDDEN = EVENT_PANEL_HIDDEN;\n    exports.EVENT_PANEL_SHOWN = EVENT_PANEL_SHOWN;\n    exports.PANEL_TYPE_BOTTOM_PANEL = PANEL_TYPE_BOTTOM_PANEL;\n});\n"],"file":"PanelView.js"}