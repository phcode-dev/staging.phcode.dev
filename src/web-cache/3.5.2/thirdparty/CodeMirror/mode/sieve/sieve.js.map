{"version":3,"sources":["thirdparty/CodeMirror/mode/sieve/sieve.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","words","str","obj","split","i","length","keywords","atoms","indentUnit","tokenBase","stream","state","ch","next","eat","tokenize","tokenCComment","skipToEnd","tokenString","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eol","eatSpace","peek","maybeEnd","quote","escaped","startState","base","baseIndent","token","indent","_textAfter","electricChars","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sieve\", function(config) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var keywords = words(\"if elsif else stop require\");\n  var atoms = words(\"true false not\");\n  var indentUnit = config.indentUnit;\n\n  function tokenBase(stream, state) {\n\n    var ch = stream.next();\n    if (ch == \"/\" && stream.eat(\"*\")) {\n      state.tokenize = tokenCComment;\n      return tokenCComment(stream, state);\n    }\n\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch == \"\\\"\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    if (ch == \"(\") {\n      state._indent.push(\"(\");\n      // add virtual angel wings so that editor behaves...\n      // ...more sane in case of broken brackets\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch === \"{\") {\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch == \")\")  {\n      state._indent.pop();\n      state._indent.pop();\n    }\n\n    if (ch === \"}\") {\n      state._indent.pop();\n      return null;\n    }\n\n    if (ch == \",\")\n      return null;\n\n    if (ch == \";\")\n      return null;\n\n\n    if (/[{}\\(\\),;]/.test(ch))\n      return null;\n\n    // 1*DIGIT \"K\" / \"M\" / \"G\"\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\d]/);\n      stream.eat(/[KkMmGg]/);\n      return \"number\";\n    }\n\n    // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n    if (ch == \":\") {\n      stream.eatWhile(/[a-zA-Z_]/);\n      stream.eatWhile(/[a-zA-Z0-9_]/);\n\n      return \"operator\";\n    }\n\n    stream.eatWhile(/\\w/);\n    var cur = stream.current();\n\n    // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n    // *(multiline-literal / multiline-dotstart)\n    // \".\" CRLF\n    if ((cur == \"text\") && stream.eat(\":\"))\n    {\n      state.tokenize = tokenMultiLineString;\n      return \"string\";\n    }\n\n    if (keywords.propertyIsEnumerable(cur))\n      return \"keyword\";\n\n    if (atoms.propertyIsEnumerable(cur))\n      return \"atom\";\n\n    return null;\n  }\n\n  function tokenMultiLineString(stream, state)\n  {\n    state._multiLineString = true;\n    // the first line is special it may contain a comment\n    if (!stream.sol()) {\n      stream.eatSpace();\n\n      if (stream.peek() == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      stream.skipToEnd();\n      return \"string\";\n    }\n\n    if ((stream.next() == \".\")  && (stream.eol()))\n    {\n      state._multiLineString = false;\n      state.tokenize = tokenBase;\n    }\n\n    return \"string\";\n  }\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped)\n          break;\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  return {\n    startState: function(base) {\n      return {tokenize: tokenBase,\n              baseIndent: base || 0,\n              _indent: []};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n\n      return (state.tokenize || tokenBase)(stream, state);\n    },\n\n    indent: function(state, _textAfter) {\n      var length = state._indent.length;\n      if (_textAfter && (_textAfter[0] == \"}\"))\n        length--;\n\n      if (length <0)\n        length = 0;\n\n      return length * indentUnit;\n    },\n\n    electricChars: \"}\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sieve\", \"sieve\");\n\n});\n"],"file":"sieve.js"}