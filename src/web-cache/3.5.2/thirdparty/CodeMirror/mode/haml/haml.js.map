{"version":3,"sources":["thirdparty/CodeMirror/mode/haml/haml.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","htmlMode","getMode","name","rubyMode","rubyInQuote","endQuote","stream","state","ch","peek","rubyState","tokenize","length","next","html","ruby","match","skipToEnd","token","previousToken","style","indented","startOfLine","htmlState","startState","copyState","sol","indentation","eatSpace","eol","backUp","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,wBAAyBA,QAAQ,0BAA2BA,QAAQ,iBACxD,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,uBAAwB,yBAA0B,gBAAiBJ,KAE3EA,IAAIM,YANR,CAOG,SAASA,YACZ,aAGEA,WAAWC,WAAW,OAAQ,SAASC,QACrC,IAAIC,SAAWH,WAAWI,QAAQF,OAAQ,CAACG,KAAM,cAC7CC,SAAWN,WAAWI,QAAQF,OAAQ,QAE1C,SAASK,YAAYC,UACnB,OAAO,SAASC,OAAQC,OACtB,IAAIC,GACJ,OADSF,OAAOG,QACNJ,UAA+C,GAAnCE,MAAMG,UAAUC,SAASC,QAE7CN,OAAOO,OACPN,MAAMI,SAAWG,KACV,qBAEAC,KAAKT,OAAQC,QAK1B,SAASQ,KAAKT,OAAQC,OACpB,OAAID,OAAOU,MAAM,OACfV,OAAOW,YACA,WAEFd,SAASe,MAAMZ,OAAQC,MAAMG,WAGtC,SAASI,KAAKR,OAAQC,OACpB,IAAIC,GAAKF,OAAOG,OAIhB,GAAiC,WAA7BF,MAAMY,cAAcC,OAClBb,MAAMc,SAAWd,MAAMY,cAAcE,SAEvC,OADAf,OAAOW,YACA,cAIX,GAAIV,MAAMe,YAAa,CACrB,GAAU,KAANd,IAAaF,OAAOU,MAAM,MAE5B,OADAV,OAAOW,YACA,MACF,GAAIX,OAAOU,MAAM,gBAEtB,OADAT,MAAMI,SAAWI,KACV,UACF,GAAIT,OAAOU,MAAM,YACtB,MAAO,UACF,GAAU,KAANR,GAET,OADAF,OAAOW,YACA,UAIX,IAAIV,MAAMe,aAA4C,WAA7Bf,MAAMY,cAAcC,SAChC,KAANZ,IAAmB,KAANA,IAEhB,OADAF,OAAOU,MAAM,aACN,gBAKX,GAAIT,MAAMe,cAAgBhB,OAAOU,MAAM,UAAO,KAAiB,KAANR,IAAmB,KAANA,IAEpE,OADAD,MAAMI,SAAWI,KACVR,MAAMI,SAASL,OAAQC,OAGhC,GAAiC,WAA7BA,MAAMY,cAAcC,OACS,qBAA7Bb,MAAMY,cAAcC,OACS,iBAA7Bb,MAAMY,cAAcC,MAA0B,CAChD,GAAU,KAANZ,GAEF,OADAD,MAAMI,SAAWP,YAAY,KACtBG,MAAMI,SAASL,OAAQC,OACzB,GAAU,KAANC,KACJF,OAAOU,MAAM,UAEhB,OADAT,MAAMI,SAAWP,YAAY,KACtBG,MAAMI,SAASL,OAAQC,OAKpC,OAAOP,SAASkB,MAAMZ,OAAQC,MAAMgB,WAGtC,MAAO,CAELC,WAAY,WACV,IAAID,UACAb,UACJ,MAAO,CACLa,UAHc1B,WAAW2B,WAAWxB,UAIpCU,UAHcb,WAAW2B,WAAWrB,UAIpCkB,SAAU,EACVF,cAAe,CAAEC,MAAO,KAAMC,SAAU,GACxCV,SAAUG,OAIdW,UAAW,SAASlB,OAClB,MAAO,CACLgB,UAAY1B,WAAW4B,UAAUzB,SAAUO,MAAMgB,WACjDb,UAAWb,WAAW4B,UAAUtB,SAAUI,MAAMG,WAChDW,SAAUd,MAAMc,SAChBF,cAAeZ,MAAMY,cACrBR,SAAUJ,MAAMI,WAIpBO,MAAO,SAASZ,OAAQC,OAKtB,GAJID,OAAOoB,QACTnB,MAAMc,SAAWf,OAAOqB,cACxBpB,MAAMe,aAAc,GAElBhB,OAAOsB,WAAY,OAAO,KAC9B,IAAIR,MAAQb,MAAMI,SAASL,OAAQC,OASnC,GARAA,MAAMe,aAAc,EAGhBF,OAAkB,eAATA,QACXb,MAAMY,cAAgB,CAAEC,MAAOA,MAAOC,SAAUd,MAAMc,WAIpDf,OAAOuB,OAAStB,MAAMI,UAAYI,KAAM,CAC1CT,OAAOwB,OAAO,GACd,IAAItB,GAAKF,OAAOG,OAChBH,OAAOO,OACHL,IAAY,KAANA,KACRD,MAAMI,SAAWG,MAarB,MATa,WAATM,MACFA,MAAQ,MACU,eAATA,MACTA,MAAQ,UACU,iBAATA,MACTA,MAAQ,YACU,qBAATA,QACTA,MAAQ,MAEHA,SAGV,YAAa,QAEhBvB,WAAWkC,WAAW,cAAe","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\n  // full haml mode. This handled embedded ruby and html fragments too\n  CodeMirror.defineMode(\"haml\", function(config) {\n    var htmlMode = CodeMirror.getMode(config, {name: \"htmlmixed\"});\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n\n    function rubyInQuote(endQuote) {\n      return function(stream, state) {\n        var ch = stream.peek();\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function html(stream, state) {\n      var ch = stream.peek();\n\n      // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n      if (state.previousToken.style == \"comment\" ) {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\" ) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if ( ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      }\n\n      // do not handle --> as valid ruby, make it HTML close comment instead\n      if (state.startOfLine && !stream.match(\"-->\", false) && (ch == \"=\" || ch == \"-\" )) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n\n      if (state.previousToken.style == \"hamlTag\" ||\n          state.previousToken.style == \"closeAttributeTag\" ||\n          state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          if (!stream.match(/^\\{%.*/)) {\n            state.tokenize = rubyInQuote(\"}\");\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n\n      return htmlMode.token(stream, state.htmlState);\n    }\n\n    return {\n      // default to html mode\n      startState: function() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: { style: null, indented: 0},\n          tokenize: html\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          htmlState : CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n\n      token: function(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false;\n        // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n        if (style && style != \"commentLine\") {\n          state.previousToken = { style: style, indented: state.indented };\n        }\n        // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        }\n        // reprocess some of the specific style tag when finish setting previousToken\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});\n"],"file":"haml.js"}