{"version":3,"sources":["thirdparty/CodeMirror/mode/turtle/turtle.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","curPunc","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","tokenLiteral","test","skipToEnd","eatWhile","peek","word","current","quote","escaped","pushContext","type","col","context","prev","indent","popContext","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"turtle\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([]);\n  var keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\n  var operatorChars = /[*+\\-<>=&|]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      stream.eatWhile(operatorChars);\n      return null;\n    }\n    else if (ch == \":\") {\n          return \"operator\";\n        } else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if(stream.peek() == \":\") {\n        return \"variable-3\";\n      } else {\n             var word = stream.current();\n\n             if(keywords.test(word)) {\n                        return \"meta\";\n             }\n\n             if(ch >= \"A\" && ch <= \"Z\") {\n                    return \"comment\";\n                 } else {\n                        return \"keyword\";\n                 }\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return null;\n      else if (keywords.test(word))\n        return \"meta\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) popContext(state);\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/turtle\", \"turtle\");\n\n});\n"],"file":"turtle.js"}