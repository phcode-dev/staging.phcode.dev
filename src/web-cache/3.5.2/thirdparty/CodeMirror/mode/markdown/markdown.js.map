{"version":3,"sources":["thirdparty/CodeMirror/mode/markdown/markdown.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","cmCfg","modeCfg","htmlMode","getMode","htmlModeMissing","name","findModeByName","found","mime","mimes","mode","undefined","highlightFormatting","maxBlockquoteDepth","taskLists","strikethrough","emoji","fencedCodeBlockHighlighting","fencedCodeBlockDefaultMode","xml","tokenTypeOverrides","tokenTypes","header","code","quote","list1","list2","list3","hr","image","imageAltText","imageMarker","formatting","linkInline","linkEmail","linkText","linkHref","em","strong","tokenType","hasOwnProperty","hrRE","listRE","taskListRE","atxHeaderRE","allowAtxHeaderWithoutSpace","setextHeaderRE","textRE","fencedCodeRE","linkDefRE","punctuation","expandedTab","switchInline","stream","state","f","inline","switchBlock","block","lineIsEmpty","line","test","string","blankLine","linkTitle","indentedCode","htmlBlock","exit","inner","innerMode","htmlState","tagStart","context","tokenize","isInText","inlineNormal","blockNormal","trailingSpace","trailingSpaceNewLine","prevLine","thisLine","firstTokenOnLine","column","indentation","prevLineLineIsEmpty","prevLineIsIndentedCode","prevLineIsHr","prevLineIsList","list","maxNonCodeIndentation","listStack","length","lineIndentation","indentationDiff","pop","allowsInlineContinuation","fencedCodeEnd","isHr","match","skipToEnd","eatSpace","getType","eat","setext","listType","current","push","taskList","fencedEndRE","RegExp","localMode","localState","startState","local","lookAhead","charAt","peek","footnoteLink","style","token","md_inside","indexOf","currListInd","hasExitedList","maxFencedEndInd","returnType","styles","i","taskOpen","join","taskClosed","listMod","handleText","text","ch","next","type","matchCh","regex","replace","previousFormatting","eatWhile","count","t","formattingEscape","end","pos","atts","substring","start","backUp","len","before","after","leftFlanking","rightFlanking","setEm","setStrong","retType","getLinkHrefInside","linkRE",")","]","endChar","returnState","footnoteLinkInside","footnoteUrl","copyState","s","slice","indent","textAfter","Pass","blockCommentStart","blockCommentEnd","closeBrackets","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../meta\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"markdown\", function(cmCfg, modeCfg) {\n\n  var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n  var htmlModeMissing = htmlMode.name == \"null\"\n\n  function getMode(name) {\n    if (CodeMirror.findModeByName) {\n      var found = CodeMirror.findModeByName(name);\n      if (found) name = found.mime || found.mimes[0];\n    }\n    var mode = CodeMirror.getMode(cmCfg, name);\n    return mode.name == \"null\" ? null : mode;\n  }\n\n  // Should characters that affect highlighting be highlighted separate?\n  // Does not include characters that will be output (such as `1.` and `-` for lists)\n  if (modeCfg.highlightFormatting === undefined)\n    modeCfg.highlightFormatting = false;\n\n  // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n  // Excess `>` will emit `error` token.\n  if (modeCfg.maxBlockquoteDepth === undefined)\n    modeCfg.maxBlockquoteDepth = 0;\n\n  // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n  if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\n\n  // Turn on strikethrough syntax\n  if (modeCfg.strikethrough === undefined)\n    modeCfg.strikethrough = false;\n\n  if (modeCfg.emoji === undefined)\n    modeCfg.emoji = false;\n\n  if (modeCfg.fencedCodeBlockHighlighting === undefined)\n    modeCfg.fencedCodeBlockHighlighting = true;\n\n  if (modeCfg.fencedCodeBlockDefaultMode === undefined)\n    modeCfg.fencedCodeBlockDefaultMode = 'text/plain';\n\n  if (modeCfg.xml === undefined)\n    modeCfg.xml = true;\n\n  // Allow token types to be overridden by user-provided token types.\n  if (modeCfg.tokenTypeOverrides === undefined)\n    modeCfg.tokenTypeOverrides = {};\n\n  var tokenTypes = {\n    header: \"header\",\n    code: \"comment\",\n    quote: \"quote\",\n    list1: \"variable-2\",\n    list2: \"variable-3\",\n    list3: \"keyword\",\n    hr: \"hr\",\n    image: \"image\",\n    imageAltText: \"image-alt-text\",\n    imageMarker: \"image-marker\",\n    formatting: \"formatting\",\n    linkInline: \"link\",\n    linkEmail: \"link\",\n    linkText: \"link\",\n    linkHref: \"string\",\n    em: \"em\",\n    strong: \"strong\",\n    strikethrough: \"strikethrough\",\n    emoji: \"builtin\"\n  };\n\n  for (var tokenType in tokenTypes) {\n    if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n      tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n    }\n  }\n\n  var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/\n  ,   listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/\n  ,   taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n  ,   atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/\n  ,   setextHeaderRE = /^ {0,3}(?:\\={1,}|-{2,})\\s*$/\n  ,   textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/\n  ,   fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w\\/+#-]*)[^\\n`]*$/\n  ,   linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n  ,   punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/\n  ,   expandedTab = \"    \" // CommonMark specifies tab as 4 spaces\n\n  function switchInline(stream, state, f) {\n    state.f = state.inline = f;\n    return f(stream, state);\n  }\n\n  function switchBlock(stream, state, f) {\n    state.f = state.block = f;\n    return f(stream, state);\n  }\n\n  function lineIsEmpty(line) {\n    return !line || !/\\S/.test(line.string)\n  }\n\n  // Blocks\n\n  function blankLine(state) {\n    // Reset linkTitle state\n    state.linkTitle = false;\n    state.linkHref = false;\n    state.linkText = false;\n    // Reset EM state\n    state.em = false;\n    // Reset STRONG state\n    state.strong = false;\n    // Reset strikethrough state\n    state.strikethrough = false;\n    // Reset state.quote\n    state.quote = 0;\n    // Reset state.indentedCode\n    state.indentedCode = false;\n    if (state.f == htmlBlock) {\n      var exit = htmlModeMissing\n      if (!exit) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n        exit = inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n          (!inner.state.context && inner.state.tokenize.isInText)\n      }\n      if (exit) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    // Reset state.trailingSpace\n    state.trailingSpace = 0;\n    state.trailingSpaceNewLine = false;\n    // Mark this line as blank\n    state.prevLine = state.thisLine\n    state.thisLine = {stream: null}\n    return null;\n  }\n\n  function blockNormal(stream, state) {\n    var firstTokenOnLine = stream.column() === state.indentation;\n    var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n    var prevLineIsIndentedCode = state.indentedCode;\n    var prevLineIsHr = state.prevLine.hr;\n    var prevLineIsList = state.list !== false;\n    var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n\n    state.indentedCode = false;\n\n    var lineIndentation = state.indentation;\n    // compute once per line (on first token)\n    if (state.indentationDiff === null) {\n      state.indentationDiff = state.indentation;\n      if (prevLineIsList) {\n        state.list = null;\n        // While this list item's marker's indentation is less than the deepest\n        //  list item's content's indentation,pop the deepest list item\n        //  indentation off the stack, and update block indentation state\n        while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n          state.listStack.pop();\n          if (state.listStack.length) {\n            state.indentation = state.listStack[state.listStack.length - 1];\n          // less than the first list's indent -> the line is no longer a list\n          } else {\n            state.list = false;\n          }\n        }\n        if (state.list !== false) {\n          state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1]\n        }\n      }\n    }\n\n    // not comprehensive (currently only for setext detection purposes)\n    var allowsInlineContinuation = (\n        !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header &&\n        (!prevLineIsList || !prevLineIsIndentedCode) &&\n        !state.prevLine.fencedCodeEnd\n    );\n\n    var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) &&\n      state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n\n    var match = null;\n    if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd ||\n         state.prevLine.header || prevLineLineIsEmpty)) {\n      stream.skipToEnd();\n      state.indentedCode = true;\n      return tokenTypes.code;\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n      state.quote = 0;\n      state.header = match[1].length;\n      state.thisLine.header = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      state.f = state.inline;\n      return getType(state);\n    } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n      state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n      if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n      stream.eatSpace();\n      return getType(state);\n    } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n      var listType = match[1] ? \"ol\" : \"ul\";\n\n      state.indentation = lineIndentation + stream.current().length;\n      state.list = true;\n      state.quote = 0;\n\n      // Add this list item's content's indentation to the stack\n      state.listStack.push(state.indentation);\n      // Reset inline styles which shouldn't propagate across list items\n      state.em = false;\n      state.strong = false;\n      state.code = false;\n      state.strikethrough = false;\n\n      if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n        state.taskList = true;\n      }\n      state.f = state.inline;\n      if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n      return getType(state);\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n      state.quote = 0;\n      state.fencedEndRE = new RegExp(match[1] + \"+ *$\");\n      // try switching mode\n      state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2] || modeCfg.fencedCodeBlockDefaultMode );\n      if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n      state.f = state.block = local;\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      state.code = -1\n      return getType(state);\n    // SETEXT has lowest block-scope precedence after HR, so check it after\n    //  the others (code, blockquote, list...)\n    } else if (\n      // if setext set, indicates line after ---/===\n      state.setext || (\n        // line before ---/===\n        (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false &&\n        !state.code && !isHr && !linkDefRE.test(stream.string) &&\n        (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))\n      )\n    ) {\n      if ( !state.setext ) {\n        state.header = match[0].charAt(0) == '=' ? 1 : 2;\n        state.setext = state.header;\n      } else {\n        state.header = state.setext;\n        // has no effect on type so we can reset it now\n        state.setext = 0;\n        stream.skipToEnd();\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      }\n      state.thisLine.header = true;\n      state.f = state.inline;\n      return getType(state);\n    } else if (isHr) {\n      stream.skipToEnd();\n      state.hr = true;\n      state.thisLine.hr = true;\n      return tokenTypes.hr;\n    } else if (stream.peek() === '[') {\n      return switchInline(stream, state, footnoteLink);\n    }\n\n    return switchInline(stream, state, state.inline);\n  }\n\n  function htmlBlock(stream, state) {\n    var style = htmlMode.token(stream, state.htmlState);\n    if (!htmlModeMissing) {\n      var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n      if ((inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n           (!inner.state.context && inner.state.tokenize.isInText)) ||\n          (state.md_inside && stream.current().indexOf(\">\") > -1)) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    return style;\n  }\n\n  function local(stream, state) {\n    var currListInd = state.listStack[state.listStack.length - 1] || 0;\n    var hasExitedList = state.indentation < currListInd;\n    var maxFencedEndInd = currListInd + 3;\n    if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      var returnType;\n      if (!hasExitedList) returnType = getType(state)\n      state.localMode = state.localState = null;\n      state.block = blockNormal;\n      state.f = inlineNormal;\n      state.fencedEndRE = null;\n      state.code = 0\n      state.thisLine.fencedCodeEnd = true;\n      if (hasExitedList) return switchBlock(stream, state, state.block);\n      return returnType;\n    } else if (state.localMode) {\n      return state.localMode.token(stream, state.localState);\n    } else {\n      stream.skipToEnd();\n      return tokenTypes.code;\n    }\n  }\n\n  // Inline\n  function getType(state) {\n    var styles = [];\n\n    if (state.formatting) {\n      styles.push(tokenTypes.formatting);\n\n      if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n      for (var i = 0; i < state.formatting.length; i++) {\n        styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n        if (state.formatting[i] === \"header\") {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n        }\n\n        // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n        // Add `error` instead if the maximum blockquote nesting depth is passed\n        if (state.formatting[i] === \"quote\") {\n          if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n          } else {\n            styles.push(\"error\");\n          }\n        }\n      }\n    }\n\n    if (state.taskOpen) {\n      styles.push(\"meta\");\n      return styles.length ? styles.join(' ') : null;\n    }\n    if (state.taskClosed) {\n      styles.push(\"property\");\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    if (state.linkHref) {\n      styles.push(tokenTypes.linkHref, \"url\");\n    } else { // Only apply inline styles to non-url text\n      if (state.strong) { styles.push(tokenTypes.strong); }\n      if (state.em) { styles.push(tokenTypes.em); }\n      if (state.strikethrough) { styles.push(tokenTypes.strikethrough); }\n      if (state.emoji) { styles.push(tokenTypes.emoji); }\n      if (state.linkText) { styles.push(tokenTypes.linkText); }\n      if (state.code) { styles.push(tokenTypes.code); }\n      if (state.image) { styles.push(tokenTypes.image); }\n      if (state.imageAltText) { styles.push(tokenTypes.imageAltText, \"link\"); }\n      if (state.imageMarker) { styles.push(tokenTypes.imageMarker); }\n    }\n\n    if (state.header) { styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header); }\n\n    if (state.quote) {\n      styles.push(tokenTypes.quote);\n\n      // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n      if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n        styles.push(tokenTypes.quote + \"-\" + state.quote);\n      } else {\n        styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n      }\n    }\n\n    if (state.list !== false) {\n      var listMod = (state.listStack.length - 1) % 3;\n      if (!listMod) {\n        styles.push(tokenTypes.list1);\n      } else if (listMod === 1) {\n        styles.push(tokenTypes.list2);\n      } else {\n        styles.push(tokenTypes.list3);\n      }\n    }\n\n    if (state.trailingSpaceNewLine) {\n      styles.push(\"trailing-space-new-line\");\n    } else if (state.trailingSpace) {\n      styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n    }\n\n    return styles.length ? styles.join(' ') : null;\n  }\n\n  function handleText(stream, state) {\n    if (stream.match(textRE, true)) {\n      return getType(state);\n    }\n    return undefined;\n  }\n\n  function inlineNormal(stream, state) {\n    var style = state.text(stream, state);\n    if (typeof style !== 'undefined')\n      return style;\n\n    if (state.list) { // List marker (*, +, -, 1., etc)\n      state.list = null;\n      return getType(state);\n    }\n\n    if (state.taskList) {\n      var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n      if (taskOpen) state.taskOpen = true;\n      else state.taskClosed = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"task\";\n      state.taskList = false;\n      return getType(state);\n    }\n\n    state.taskOpen = false;\n    state.taskClosed = false;\n\n    if (state.header && stream.match(/^#+$/, true)) {\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      return getType(state);\n    }\n\n    var ch = stream.next();\n\n    // Matches link titles present on next line\n    if (state.linkTitle) {\n      state.linkTitle = false;\n      var matchCh = ch;\n      if (ch === '(') {\n        matchCh = ')';\n      }\n      matchCh = (matchCh+'').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n      var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n      if (stream.match(new RegExp(regex), true)) {\n        return tokenTypes.linkHref;\n      }\n    }\n\n    // If this block is changed, it may need to be updated in GFM mode\n    if (ch === '`') {\n      var previousFormatting = state.formatting;\n      if (modeCfg.highlightFormatting) state.formatting = \"code\";\n      stream.eatWhile('`');\n      var count = stream.current().length\n      if (state.code == 0 && (!state.quote || count == 1)) {\n        state.code = count\n        return getType(state)\n      } else if (count == state.code) { // Must be exact\n        var t = getType(state)\n        state.code = 0\n        return t\n      } else {\n        state.formatting = previousFormatting\n        return getType(state)\n      }\n    } else if (state.code) {\n      return getType(state);\n    }\n\n    if (ch === '\\\\') {\n      stream.next();\n      if (modeCfg.highlightFormatting) {\n        var type = getType(state);\n        var formattingEscape = tokenTypes.formatting + \"-escape\";\n        return type ? type + \" \" + formattingEscape : formattingEscape;\n      }\n    }\n\n    if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n      state.imageMarker = true;\n      state.image = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n      state.imageMarker = false;\n      state.imageAltText = true\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.imageAltText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      var type = getType(state);\n      state.imageAltText = false;\n      state.image = false;\n      state.inline = state.f = linkHref;\n      return type;\n    }\n\n    if (ch === '[' && !state.image) {\n      if (state.linkText && stream.match(/^.*?\\]/)) return getType(state)\n      state.linkText = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.linkText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      state.linkText = false;\n      state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal\n      return type;\n    }\n\n    if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkEmail;\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n      var end = stream.string.indexOf(\">\", stream.pos);\n      if (end != -1) {\n        var atts = stream.string.substring(stream.start, end);\n        if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n      }\n      stream.backUp(1);\n      state.htmlState = CodeMirror.startState(htmlMode);\n      return switchBlock(stream, state, htmlBlock);\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n      state.md_inside = false;\n      return \"tag\";\n    } else if (ch === \"*\" || ch === \"_\") {\n      var len = 1, before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2)\n      while (len < 3 && stream.eat(ch)) len++\n      var after = stream.peek() || \" \"\n      // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n      var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before))\n      var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after))\n      var setEm = null, setStrong = null\n      if (len % 2) { // Em\n        if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setEm = true\n        else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setEm = false\n      }\n      if (len > 1) { // Strong\n        if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setStrong = true\n        else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setStrong = false\n      }\n      if (setStrong != null || setEm != null) {\n        if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\"\n        if (setEm === true) state.em = ch\n        if (setStrong === true) state.strong = ch\n        var t = getType(state)\n        if (setEm === false) state.em = false\n        if (setStrong === false) state.strong = false\n        return t\n      }\n    } else if (ch === ' ') {\n      if (stream.eat('*') || stream.eat('_')) { // Probably surrounded by spaces\n        if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n          return getType(state);\n        } else { // Not surrounded by spaces, back up pointer\n          stream.backUp(1);\n        }\n      }\n    }\n\n    if (modeCfg.strikethrough) {\n      if (ch === '~' && stream.eatWhile(ch)) {\n        if (state.strikethrough) {// Remove strikethrough\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          var t = getType(state);\n          state.strikethrough = false;\n          return t;\n        } else if (stream.match(/^[^\\s]/, false)) {// Add strikethrough\n          state.strikethrough = true;\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          return getType(state);\n        }\n      } else if (ch === ' ') {\n        if (stream.match('~~', true)) { // Probably surrounded by space\n          if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n            return getType(state);\n          } else { // Not surrounded by spaces, back up pointer\n            stream.backUp(2);\n          }\n        }\n      }\n    }\n\n    if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n      state.emoji = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n      var retType = getType(state);\n      state.emoji = false;\n      return retType;\n    }\n\n    if (ch === ' ') {\n      if (stream.match(/^ +$/, false)) {\n        state.trailingSpace++;\n      } else if (state.trailingSpace) {\n        state.trailingSpaceNewLine = true;\n      }\n    }\n\n    return getType(state);\n  }\n\n  function linkInline(stream, state) {\n    var ch = stream.next();\n\n    if (ch === \">\") {\n      state.f = state.inline = inlineNormal;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    stream.match(/^[^>]+/, true);\n\n    return tokenTypes.linkInline;\n  }\n\n  function linkHref(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    var ch = stream.next();\n    if (ch === '(' || ch === '[') {\n      state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n      if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n      state.linkHref = true;\n      return getType(state);\n    }\n    return 'error';\n  }\n\n  var linkRE = {\n    \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n    \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n  }\n\n  function getLinkHrefInside(endChar) {\n    return function(stream, state) {\n      var ch = stream.next();\n\n      if (ch === endChar) {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        var returnState = getType(state);\n        state.linkHref = false;\n        return returnState;\n      }\n\n      stream.match(linkRE[endChar])\n      state.linkHref = true;\n      return getType(state);\n    };\n  }\n\n  function footnoteLink(stream, state) {\n    if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n      state.f = footnoteLinkInside;\n      stream.next(); // Consume [\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      state.linkText = true;\n      return getType(state);\n    }\n    return switchInline(stream, state, inlineNormal);\n  }\n\n  function footnoteLinkInside(stream, state) {\n    if (stream.match(']:', true)) {\n      state.f = state.inline = footnoteUrl;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var returnType = getType(state);\n      state.linkText = false;\n      return returnType;\n    }\n\n    stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n\n    return tokenTypes.linkText;\n  }\n\n  function footnoteUrl(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    // Match URL\n    stream.match(/^[^\\s]+/, true);\n    // Check for link title\n    if (stream.peek() === undefined) { // End of line, set flag to check next line\n      state.linkTitle = true;\n    } else { // More content on line, check if link title\n      stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\.)+\"|'(?:[^'\\\\]|\\\\.)+'|\\((?:[^)\\\\]|\\\\.)+\\)))?/, true);\n    }\n    state.f = state.inline = inlineNormal;\n    return tokenTypes.linkHref + \" url\";\n  }\n\n  var mode = {\n    startState: function() {\n      return {\n        f: blockNormal,\n\n        prevLine: {stream: null},\n        thisLine: {stream: null},\n\n        block: blockNormal,\n        htmlState: null,\n        indentation: 0,\n\n        inline: inlineNormal,\n        text: handleText,\n\n        formatting: false,\n        linkText: false,\n        linkHref: false,\n        linkTitle: false,\n        code: 0,\n        em: false,\n        strong: false,\n        header: 0,\n        setext: 0,\n        hr: false,\n        taskList: false,\n        list: false,\n        listStack: [],\n        quote: 0,\n        trailingSpace: 0,\n        trailingSpaceNewLine: false,\n        strikethrough: false,\n        emoji: false,\n        fencedEndRE: null\n      };\n    },\n\n    copyState: function(s) {\n      return {\n        f: s.f,\n\n        prevLine: s.prevLine,\n        thisLine: s.thisLine,\n\n        block: s.block,\n        htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n        indentation: s.indentation,\n\n        localMode: s.localMode,\n        localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n\n        inline: s.inline,\n        text: s.text,\n        formatting: false,\n        linkText: s.linkText,\n        linkTitle: s.linkTitle,\n        linkHref: s.linkHref,\n        code: s.code,\n        em: s.em,\n        strong: s.strong,\n        strikethrough: s.strikethrough,\n        emoji: s.emoji,\n        header: s.header,\n        setext: s.setext,\n        hr: s.hr,\n        taskList: s.taskList,\n        list: s.list,\n        listStack: s.listStack.slice(0),\n        quote: s.quote,\n        indentedCode: s.indentedCode,\n        trailingSpace: s.trailingSpace,\n        trailingSpaceNewLine: s.trailingSpaceNewLine,\n        md_inside: s.md_inside,\n        fencedEndRE: s.fencedEndRE\n      };\n    },\n\n    token: function(stream, state) {\n\n      // Reset state.formatting\n      state.formatting = false;\n\n      if (stream != state.thisLine.stream) {\n        state.header = 0;\n        state.hr = false;\n\n        if (stream.match(/^\\s*$/, true)) {\n          blankLine(state);\n          return null;\n        }\n\n        state.prevLine = state.thisLine\n        state.thisLine = {stream: stream}\n\n        // Reset state.taskList\n        state.taskList = false;\n\n        // Reset state.trailingSpace\n        state.trailingSpace = 0;\n        state.trailingSpaceNewLine = false;\n\n        if (!state.localState) {\n          state.f = state.block;\n          if (state.f != htmlBlock) {\n            var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n            state.indentation = indentation;\n            state.indentationDiff = null;\n            if (indentation > 0) return null;\n          }\n        }\n      }\n      return state.f(stream, state);\n    },\n\n    innerMode: function(state) {\n      if (state.block == htmlBlock) return {state: state.htmlState, mode: htmlMode};\n      if (state.localState) return {state: state.localState, mode: state.localMode};\n      return {state: state, mode: mode};\n    },\n\n    indent: function(state, textAfter, line) {\n      if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line)\n      if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line)\n      return CodeMirror.Pass\n    },\n\n    blankLine: blankLine,\n\n    getType: getType,\n\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"markdown\"\n  };\n  return mode;\n}, \"xml\");\n\nCodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n\nCodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n\n});\n"],"file":"markdown.js"}