{"version":3,"sources":["utils/DropdownEventHandler.js"],"names":["define","require","exports","module","KeyBindingManager","KeyEvent","PopUpManager","ViewUtils","DropdownEventHandler","$list","selectionCallback","closeCallback","keyDownCallback","this","$items","find","scrolling","_selectedIndex","prototype","open","self","_keydownHook","event","keyCode","type","DOM_VK_TAB","close","DOM_VK_UP","_tryToSelect","DOM_VK_DOWN","DOM_VK_PAGE_UP","_itemsPerPage","DOM_VK_PAGE_DOWN","DOM_VK_HOME","DOM_VK_END","length","DOM_VK_RETURN","_selectionHandler","stopImmediatePropagation","preventDefault","removeGlobalKeydownHook","_cleanup","addGlobalKeydownHook","_registerMouseEvents","addPopUp","removePopUp","off","index","direction","noWrap","len","$item","eq","hasClass","is","_setSelectedIndex","itemsPerPage","itemHeight","$","height","Math","floor","max","min","$link","_clickHandler","scrollIntoView","removeClass","addClass","scrollElementIntoView","on","e","currentTarget","closest","viewOffset","offset","elementOffset","top","reRegisterMouseHandlers"],"mappings":"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","sourcesContent":[" /*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var KeyBindingManager = require(\"command/KeyBindingManager\"),\n        KeyEvent          = require(\"utils/KeyEvent\"),\n        PopUpManager      = require(\"widgets/PopUpManager\"),\n        ViewUtils         = require(\"utils/ViewUtils\");\n\n    /**\n     * Object to handle events for a dropdown list.\n     *\n     * DropdownEventHandler handles these events:\n     *\n     * Mouse:\n     * - click       - execute selection callback and dismiss list\n     * - mouseover   - highlight item\n     * - mouseleave  - remove mouse highlighting\n     *\n     * Keyboard:\n     * - Enter       - execute selection callback and dismiss list\n     * - Esc         - dismiss list\n     * - Up/Down     - change selection\n     * - PageUp/Down - change selection\n     *\n     * Items whose <a> has the .disabled class do not respond to selection.\n     *\n     * @constructor\n     * @param {jQueryObject} $list  associated list object\n     * @param {Function} selectionCallback  function called when list item is selected.\n     * @param {Function} closeCallback  function called when list item is selected.\n     * @param {Function} keyDownCallback  function called when list item is selected.\n     */\n    function DropdownEventHandler($list, selectionCallback, closeCallback, keyDownCallback) {\n\n        this.$list = $list;\n        this.$items = $list.find(\"li\");\n        this.selectionCallback = selectionCallback;\n        this.closeCallback = closeCallback;\n        this.keyDownCallback = keyDownCallback;\n        this.scrolling = false;\n\n        /**\n         * @private\n         * The selected position in the list; otherwise -1.\n         * @type {number}\n         */\n        this._selectedIndex = -1;\n    }\n\n    /**\n     * Public open method\n     */\n    DropdownEventHandler.prototype.open = function () {\n        var self = this;\n\n        /**\n         * Convert keydown events into hint list navigation actions.\n         *\n         * @param {KeyboardEvent} event\n         * @return {boolean} true if key was handled, otherwise false.\n         */\n        function _keydownHook(event) {\n            var keyCode;\n\n            // (page) up, (page) down, enter and tab key are handled by the list\n            if (event.type === \"keydown\") {\n                keyCode = event.keyCode;\n\n                if (keyCode === KeyEvent.DOM_VK_TAB) {\n                    self.close();\n                } else if (keyCode === KeyEvent.DOM_VK_UP) {\n                    // Move up one, wrapping at edges (if nothing selected, select the last item)\n                    self._tryToSelect(self._selectedIndex === -1 ? -1 : self._selectedIndex - 1, -1);\n                } else if (keyCode === KeyEvent.DOM_VK_DOWN) {\n                    // Move down one, wrapping at edges (if nothing selected, select the first item)\n                    self._tryToSelect(self._selectedIndex === -1 ? 0 : self._selectedIndex + 1, +1);\n                } else if (keyCode === KeyEvent.DOM_VK_PAGE_UP) {\n                    // Move up roughly one 'page', stopping at edges (not wrapping) (if nothing selected, selects the first item)\n                    self._tryToSelect((self._selectedIndex || 0) - self._itemsPerPage(), -1, true);\n                } else if (keyCode === KeyEvent.DOM_VK_PAGE_DOWN) {\n                    // Move down roughly one 'page', stopping at edges (not wrapping) (if nothing selected, selects the item one page down from the top)\n                    self._tryToSelect((self._selectedIndex || 0) + self._itemsPerPage(), +1, true);\n\n                } else if (keyCode === KeyEvent.DOM_VK_HOME) {\n                    self._tryToSelect(0, +1);\n                } else if (keyCode === KeyEvent.DOM_VK_END) {\n                    self._tryToSelect(self.$items.length - 1, -1);\n\n                } else if (self._selectedIndex !== -1 &&\n                        (keyCode === KeyEvent.DOM_VK_RETURN)) {\n\n                    // Trigger a click handler to commmit the selected item\n                    self._selectionHandler();\n                } else {\n                    if(self.keyDownCallback){\n                        return self.keyDownCallback(event);\n                    }\n                    // Let the event bubble.\n                    return false;\n                }\n\n                event.stopImmediatePropagation();\n                event.preventDefault();\n                return true;\n            }\n\n            // If we didn't handle it, let other global keydown hooks handle it.\n            return false;\n        }\n\n        /**\n         * PopUpManager callback\n         */\n        function closeCallback() {\n            KeyBindingManager.removeGlobalKeydownHook(_keydownHook);\n            self._cleanup();\n        }\n\n        KeyBindingManager.addGlobalKeydownHook(_keydownHook);\n\n        if (this.$list) {\n            this._registerMouseEvents();\n            PopUpManager.addPopUp(this.$list, closeCallback, true);\n        }\n    };\n\n    /**\n     * Public close method\n     */\n    DropdownEventHandler.prototype.close = function () {\n        if (this.$list) {\n            PopUpManager.removePopUp(this.$list);\n        }\n    };\n\n    /**\n     * Cleanup\n     */\n    DropdownEventHandler.prototype._cleanup = function () {\n        if (this.$list) {\n            this.$list.off(\".dropdownEventHandler\");\n        }\n        if (this.closeCallback) {\n            this.closeCallback();\n        }\n    };\n\n    /**\n     * Try to select item at the given index. If it's disabled or a divider, keep trying by incrementing\n     * index by 'direction' each time (wrapping around if needed).\n     * @param {number} index  If out of bounds, index either wraps around to remain in range (e.g. -1 yields\n     *                      last item, length+1 yields 2nd item) or if noWrap set, clips instead (e.g. -1 yields\n     *                      first item, length+1 yields last item).\n     * @param {number} direction  Either +1 or -1\n     * @param {boolean=} noWrap  Clip out of range index values instead of wrapping. Default false (wrap).\n     */\n    DropdownEventHandler.prototype._tryToSelect = function (index, direction, noWrap) {\n        // Fix up 'index' if out of bounds (>= len or < 0)\n        var len = this.$items.length;\n        if (noWrap) {\n            // Clip to stay in range (and set direction so we don't wrap in the recursion case either)\n            if (index < 0) {\n                index = 0;\n                direction = +1;\n            } else if (index >= len) {\n                index = len - 1;\n                direction = -1;\n            }\n        } else {\n            // Wrap around to keep index in bounds\n            index %= len;\n            if (index < 0) {\n                index += len;\n            }\n        }\n\n        var $item = this.$items.eq(index);\n        if ($item.hasClass(\"divider\") || $item.hasClass(\"sticky-li-top\") || $item.find(\"a.disabled\").length || !$item.is(':visible')) {\n            // Desired item is ineligible for selection: try next one\n            this._tryToSelect(index + direction, direction, noWrap);\n        } else {\n            this._setSelectedIndex(index, true);\n        }\n    };\n\n    /**\n     * @return {number} The number of items per scroll page.\n     */\n    DropdownEventHandler.prototype._itemsPerPage = function () {\n        var itemsPerPage = 1,\n            itemHeight;\n\n        if (this.$items.length !== 0) {\n            itemHeight = $(this.$items[0]).height();\n            if (itemHeight) {\n                // round down to integer value\n                itemsPerPage = Math.floor(this.$list.height() / itemHeight);\n                itemsPerPage = Math.max(1, Math.min(itemsPerPage, this.$items.length));\n            }\n        }\n\n        return itemsPerPage;\n    };\n\n    /**\n     * Call selectionCallback with selected index\n     */\n    DropdownEventHandler.prototype._selectionHandler = function () {\n\n        if (this._selectedIndex === -1) {\n            return;\n        }\n\n        var $link = this.$items.eq(this._selectedIndex).find(\"a\");\n        this._clickHandler($link);\n    };\n\n    /**\n     * Call selectionCallback with selected item\n     *\n     * @param {jQueryObject} $item\n     */\n    DropdownEventHandler.prototype._clickHandler = function ($link) {\n\n        if (!this.selectionCallback || !this.$list || !$link) {\n            return;\n        }\n        if ($link.hasClass(\"disabled\")) {\n            return;\n        }\n\n        this.selectionCallback($link);\n        PopUpManager.removePopUp(this.$list);\n    };\n\n    /**\n     * Select the item in the hint list at the specified index, or remove the\n     * selection if index < 0.\n     *\n     * @private\n     * @param {number} index\n     */\n    DropdownEventHandler.prototype._setSelectedIndex = function (index, scrollIntoView) {\n\n        // Range check\n        index = Math.max(-1, Math.min(index, this.$items.length - 1));\n\n        // Clear old highlight\n        if (this._selectedIndex !== -1) {\n            this.$items.eq(this._selectedIndex).find(\"a\").removeClass(\"selected\");\n        }\n\n        this._selectedIndex = index;\n\n        // Highlight the new selected item, if necessary\n        if (this._selectedIndex !== -1) {\n            var $item = this.$items.eq(this._selectedIndex);\n\n            $item.find(\"a\").addClass(\"selected\");\n            if (scrollIntoView) {\n                this.scrolling = true;\n                ViewUtils.scrollElementIntoView(this.$list, $item, false);\n            }\n        }\n    };\n\n    /**\n     * Register mouse event handlers\n     */\n    DropdownEventHandler.prototype._registerMouseEvents = function () {\n        var self = this;\n\n        this.$list\n            .on(\"click.dropdownEventHandler\", \"a\", function () {\n                self._clickHandler($(this));\n            })\n            .on(\"mouseover.dropdownEventHandler\", \"a\", function (e) {\n                // Don't select item under mouse cursor when scrolling.\n                if (self.scrolling) {\n                    self.scrolling = false;\n                    return;\n                }\n\n                var $link = $(e.currentTarget),\n                    $item = $link.closest(\"li\"),\n                    viewOffset = self.$list.offset(),\n                    elementOffset = $item.offset();\n\n                // Only set selected if enabled & in view\n                // (dividers are already screened out since they don't have an \"a\" tag in them)\n                if (!$link.hasClass(\"disabled\")) {\n                    if (elementOffset.top < viewOffset.top + self.$list.height() && viewOffset.top <= elementOffset.top) {\n                        self._setSelectedIndex(self.$items.index($item), false);\n                    }\n                }\n            });\n    };\n\n    /**\n     * Re-register mouse event handlers\n     * @param {!jQueryObject} $list  newly updated list object\n     */\n    DropdownEventHandler.prototype.reRegisterMouseHandlers = function ($list) {\n        if (this.$list) {\n            this.$list.off(\".dropdownEventHandler\");\n\n            this.$list = $list;\n            this.$items = $list.find(\"li\");\n\n            this._registerMouseEvents();\n        }\n    };\n\n    // Export public API\n    exports.DropdownEventHandler    = DropdownEventHandler;\n});\n"],"file":"DropdownEventHandler.js"}