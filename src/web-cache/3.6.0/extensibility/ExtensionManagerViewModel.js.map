{"version":3,"sources":["extensibility/ExtensionManagerViewModel.js"],"names":["define","require","exports","module","_","ExtensionManager","registry_utils","EventDispatcher","Strings","PreferencesManager","_searchFields","ExtensionManagerViewModel","this","_handleStatusChange","bind","on","source","RegistryViewModel","call","infoMessage","REGISTRY_SANITY_CHECK_WARNING","EXTENSION_MANAGER_CREATE_EXTENSION","InstalledViewModel","self","_sortFullSet","_setInitialFilter","EXTENSION_MANAGER_THEMES_INFO","EXTENSION_MANAGER_THEMES_UNDO","DefaultViewModel","ThemesViewModel","EXTENSION_MANAGER_CREATE_THEME","makeEventDispatcher","prototype","SOURCE_REGISTRY","SOURCE_THEMES","SOURCE_INSTALLED","SOURCE_DEFAULT","extensions","filterSet","sortedFullSet","_lastQuery","message","notifyCount","_initializeFromSourcePromise","dispose","trigger","off","clone","initialize","_initializeFromSource","always","_updateMessage","e","id","filter","query","force","initialList","indexOf","keywords","toLowerCase","split","filterForKeyword","extensionList","word","filteredList","forEach","entry","_getEntry","_entryMatchesQuery","push","i","currentList","length","state","EXTENSION_MANAGER_ERROR_LOAD","NO_EXTENSION_MATCHES","NO_EXTENSIONS","some","fieldSpec","cur","components","Array","isArray","keyword","_setSortedExtensionList","isTheme","sortRegistry","get","registryInfo","metadata","theme","map","name","Object","create","constructor","downloadRegistry","done","fail","keys","key","installInfo","locationType","LOCATION_DEFAULT","_countUpdates","$","Deferred","resolve","promise","sort","key1","key2","ua1","updateAvailable","ua2","metadata1","metadata2","id1","title","toLocaleLowerCase","id2","localeCompare","updateCompatible","isMarkedForUpdate","index","refilter","splice"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*unittests: ExtensionManager*/\n\ndefine(function (require, exports, module) {\n\n\n    var _ = require(\"thirdparty/lodash\");\n\n    var ExtensionManager    = require(\"extensibility/ExtensionManager\"),\n        registry_utils      = require(\"extensibility/registry_utils\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        Strings             = require(\"strings\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\");\n\n    /**\n     * @private\n     * @type {Array}\n     * A list of fields to search when trying to search for a query string in an object. Each field is\n     * represented as an array of keys to recurse downward through the object. We store this here to avoid\n     * doing it for each search call.\n     */\n    var _searchFields = [[\"metadata\", \"name\"], [\"metadata\", \"title\"], [\"metadata\", \"description\"],\n                         [\"metadata\", \"author\", \"name\"], [\"metadata\", \"keywords\"], [\"owner\"]];\n    /**\n     * The base model for the ExtensionManagerView. Keeps track of the extensions that are currently visible\n     * and manages sorting/filtering them. Must be disposed with dispose() when done.\n     * Events:\n     * - change - triggered when the data for a given extension changes. Second parameter is the extension id.\n     * - filter - triggered whenever the filtered set changes (including on initialize).\n     *\n     * @constructor\n     */\n    function ExtensionManagerViewModel() {\n        this._handleStatusChange = this._handleStatusChange.bind(this);\n\n        // Listen for extension status changes.\n        ExtensionManager\n            .on(\"statusChange.\" + this.source, this._handleStatusChange)\n            .on(\"registryUpdate.\" + this.source, this._handleStatusChange);\n    }\n    EventDispatcher.makeEventDispatcher(ExtensionManagerViewModel.prototype);\n\n    /**\n     * @type {string}\n     * Constant indicating that this model/view should initialize from the main extension registry.\n     */\n    ExtensionManagerViewModel.prototype.SOURCE_REGISTRY = \"registry\";\n\n    /**\n     * @type {string}\n     * Constant indicating that this model/view should initialize from the main extension registry with only themes.\n     */\n    ExtensionManagerViewModel.prototype.SOURCE_THEMES = \"themes\";\n\n    /**\n     * @type {string}\n     * Constant indicating that this model/view should initialize from the list of locally installed extensions.\n     */\n    ExtensionManagerViewModel.prototype.SOURCE_INSTALLED = \"installed\";\n\n    /**\n     * @type {string}\n     * Constant indicating that this model/view should initialize from the list of default bundled extensions.\n     */\n    ExtensionManagerViewModel.prototype.SOURCE_DEFAULT = \"default\";\n\n    /**\n     * @type {Object}\n     * The current set of extensions managed by this model. Same as ExtensionManager.extensions.\n     */\n    ExtensionManagerViewModel.prototype.extensions = null;\n\n    /**\n     * @type {string}\n     * The current source for the model; one of the SOURCE_* keys above.\n     */\n    ExtensionManagerViewModel.prototype.source = null;\n\n    /**\n     * @type {Array.<Object>}\n     * The list of IDs of items matching the current query and sorted with the current sort.\n     */\n    ExtensionManagerViewModel.prototype.filterSet = null;\n\n    /**\n     * @type {Object}\n     * The list of all ids from the extension list, sorted with the current sort.\n     */\n    ExtensionManagerViewModel.prototype.sortedFullSet = null;\n\n    /**\n     * @private\n     * @type {string}\n     * The last query we filtered by. Used to optimize future searches.\n     */\n    ExtensionManagerViewModel.prototype._lastQuery = null;\n\n    /**\n     * @type {string}\n     * Info message to display to the user when listing extensions\n     */\n    ExtensionManagerViewModel.prototype.infoMessage = null;\n\n    /**\n     * @type {string}\n     * An optional message to display to the user\n     */\n    ExtensionManagerViewModel.prototype.message = null;\n\n    /**\n     * @type {number}\n     * Number to show in tab's notification icon. No icon shown if 0.\n     */\n    ExtensionManagerViewModel.prototype.notifyCount = 0;\n\n    /**\n     * @private {$.Promise}\n     * Internal use only to track when initialization fails, see usage in _updateMessage.\n     */\n    ExtensionManagerViewModel.prototype._initializeFromSourcePromise = null;\n\n    /**\n     * Unregisters listeners when we're done.\n     */\n    ExtensionManagerViewModel.prototype.dispose = function () {\n        this.trigger(\"dispose\");\n        ExtensionManager.off(\".\" + this.source);\n    };\n\n    /**\n     * @private\n     * Sets up the initial filtered set based on the sorted full set.\n     */\n    ExtensionManagerViewModel.prototype._setInitialFilter = function () {\n        // Initial filtered list is the same as the sorted list.\n        this.filterSet = _.clone(this.sortedFullSet);\n        this.trigger(\"filter\");\n    };\n\n    /**\n     * @private\n     * Re-sorts the current full set based on the source we're viewing.\n     * The base implementation does nothing.\n     */\n    ExtensionManagerViewModel.prototype._sortFullSet = function () { };\n\n    /**\n     * Initializes the model from the source.\n     */\n    ExtensionManagerViewModel.prototype.initialize = function () {\n        var self = this;\n\n        this._initializeFromSourcePromise = this._initializeFromSource().always(function () {\n            self._updateMessage();\n        });\n\n        return this._initializeFromSourcePromise;\n    };\n\n    /**\n     * @private\n     * Updates the initial set and filter as necessary when the status of an extension changes,\n     * and notifies listeners of the change.\n     * @param {$.Event} e The jQuery event object.\n     * @param {string} id The id of the extension whose status changed.\n     */\n    ExtensionManagerViewModel.prototype._handleStatusChange = function (e, id) {\n        this.trigger(\"change\", id);\n    };\n\n    /**\n     * @private\n     * Searches for the given query in the current extension list and updates the filter set,\n     * dispatching a filter event.\n     * @param {string} query The string to search for.\n     * @param {boolean} force If true, always filter starting with the full set, not the last\n     *     query's filter.\n     */\n    ExtensionManagerViewModel.prototype.filter = function (query, force) {\n        var self = this, initialList;\n        if (!force && this._lastQuery && query.indexOf(this._lastQuery) === 0) {\n            // This is the old query with some new letters added, so we know we can just\n            // search in the current filter set. (This is true even if query has spaces).\n            initialList = this.filterSet;\n        } else {\n            // This is a new query, so start with the full list.\n            initialList = this.sortedFullSet;\n        }\n\n        var keywords = query.toLowerCase().split(/\\s+/);\n\n        // Takes 'extensionList' and returns a version filtered to only those that match 'keyword'\n        function filterForKeyword(extensionList, word) {\n            var filteredList = [];\n            extensionList.forEach(function (id) {\n                var entry = self._getEntry(id);\n                if (entry && self._entryMatchesQuery(entry, word)) {\n                    filteredList.push(id);\n                }\n            });\n            return filteredList;\n        }\n\n        // \"AND\" the keywords together: successively filter down the result set by each keyword in turn\n        var i, currentList = initialList;\n        for (i = 0; i < keywords.length; i++) {\n            currentList = filterForKeyword(currentList, keywords[i]);\n        }\n\n        this._lastQuery = query;\n        this.filterSet = currentList;\n\n        this._updateMessage();\n\n        this.trigger(\"filter\");\n    };\n\n    /**\n     * @private\n     * Updates an optional message displayed to the user along with the extension list.\n     */\n    ExtensionManagerViewModel.prototype._updateMessage = function () {\n        if (this._initializeFromSourcePromise && this._initializeFromSourcePromise.state() === \"rejected\") {\n            this.message = Strings.EXTENSION_MANAGER_ERROR_LOAD;\n        } else if (this.filterSet && this.filterSet.length === 0) {\n            this.message = this.sortedFullSet && this.sortedFullSet.length ? Strings.NO_EXTENSION_MATCHES : Strings.NO_EXTENSIONS;\n        } else {\n            this.message = null;\n        }\n    };\n\n    /**\n     * @private\n     * This is to be overridden by subclasses to provide the metadata for the extension\n     * with the provided `id`.\n     *\n     * @param {string} id of the extension\n     * @return {Object?} extension metadata or null if there's no matching extension\n     */\n    ExtensionManagerViewModel.prototype._getEntry = function (id) {\n        return null;\n    };\n\n    /**\n     * @private\n     * Tests if the given entry matches the query.\n     * @param {Object} entry The extension entry to test.\n     * @param {string} query The query to match against.\n     * @return {boolean} Whether the query matches.\n     */\n    ExtensionManagerViewModel.prototype._entryMatchesQuery = function (entry, query) {\n        return query === \"\" ||\n            _searchFields.some(function (fieldSpec) {\n                var i, cur = entry;\n                for (i = 0; i < fieldSpec.length; i++) {\n                    // Recurse downward through the specified fields to the leaf value.\n                    cur = cur[fieldSpec[i]];\n                    if (!cur) {\n                        return false;\n                    }\n                }\n                // If the leaf value is an array (like keywords), search each item, otherwise\n                // just search in the string.\n                if (Array.isArray(cur)) {\n                    return cur.some(function (keyword) {\n                        return keyword.toLowerCase().indexOf(query) !== -1;\n                    });\n                } else if (fieldSpec[fieldSpec.length - 1] === \"owner\") {\n                    // Special handling: ignore the authentication source when querying,\n                    // since it's not useful to search on\n                    var components = cur.split(\":\");\n                    if (components[1].toLowerCase().indexOf(query) !== -1) {\n                        return true;\n                    }\n                } else if (cur.toLowerCase().indexOf(query) !== -1) {\n                    return true;\n                }\n            });\n    };\n\n    ExtensionManagerViewModel.prototype._setSortedExtensionList = function (extensions, isTheme) {\n        this.filterSet = this.sortedFullSet = registry_utils.sortRegistry(extensions, \"registryInfo\", PreferencesManager.get(\"extensions.sort\"))\n            .filter(function (entry) {\n                if (!isTheme) {\n                    return entry.registryInfo && !entry.registryInfo.metadata.theme;\n                }\n                return entry.registryInfo && entry.registryInfo.metadata.theme;\n\n            })\n            .map(function (entry) {\n                return entry.registryInfo.metadata.name;\n            });\n    };\n\n    /**\n     * The model for the ExtensionManagerView that is responsible for handling registry-based extensions.\n     * This extends ExtensionManagerViewModel.\n     * Must be disposed with dispose() when done.\n     *\n     * Events:\n     * - change - triggered when the data for a given extension changes. Second parameter is the extension id.\n     * - filter - triggered whenever the filtered set changes (including on initialize).\n     *\n     * @constructor\n     */\n    function RegistryViewModel() {\n        ExtensionManagerViewModel.call(this);\n        this.infoMessage = `<div style=\"display: flex; justify-content: space-between;\">\n            <div style=\"margin-top: 3px; width: 80%;\">${Strings.REGISTRY_SANITY_CHECK_WARNING}</div>\n            <div>\n                <button class=\"dialog-button btn primary btn-mini createExtesnion\"\n                style=\"white-space: nowrap;\">\n                ${Strings.EXTENSION_MANAGER_CREATE_EXTENSION}</button>\n            </div>\n            </div>`;\n    }\n\n    RegistryViewModel.prototype = Object.create(ExtensionManagerViewModel.prototype);\n    RegistryViewModel.prototype.constructor = RegistryViewModel;\n\n    /**\n     * @type {string}\n     * RegistryViewModels always have a source of SOURCE_REGISTRY.\n     */\n    RegistryViewModel.prototype.source = ExtensionManagerViewModel.prototype.SOURCE_REGISTRY;\n\n    /**\n     * Initializes the model from the remote extension registry.\n     * @return {$.Promise} a promise that's resolved with the registry JSON data\n     * or rejected if the server can't be reached.\n     */\n    RegistryViewModel.prototype._initializeFromSource = function () {\n        var self = this;\n        return ExtensionManager.downloadRegistry()\n            .done(function () {\n                self.extensions = ExtensionManager.extensions;\n\n                // Sort the registry by last published date and store the sorted list of IDs.\n                self._setSortedExtensionList(ExtensionManager.extensions, false);\n                self._setInitialFilter();\n            })\n            .fail(function () {\n                self.extensions = [];\n                self.sortedFullSet = [];\n                self.filterSet = [];\n            });\n    };\n\n    /**\n     * @private\n     * Finds the extension metadata by id. If there is no extension matching the given id,\n     * this returns `null`.\n     * @param {string} id of the extension\n     * @return {Object?} extension metadata or null if there's no matching extension\n     */\n    RegistryViewModel.prototype._getEntry = function (id) {\n        var entry = this.extensions[id];\n        if (entry) {\n            return entry.registryInfo;\n        }\n        return entry;\n    };\n\n    /**\n     * The model for the ExtensionManagerView that is responsible for handling previously-installed extensions.\n     * This extends ExtensionManagerViewModel.\n     * Must be disposed with dispose() when done.\n     *\n     * Events:\n     * - change - triggered when the data for a given extension changes. Second parameter is the extension id.\n     * - filter - triggered whenever the filtered set changes (including on initialize).\n     *\n     * @constructor\n     */\n    function InstalledViewModel() {\n        ExtensionManagerViewModel.call(this);\n\n        // when registry is downloaded, sort extensions again - those with updates will be before others\n        var self = this;\n        ExtensionManager.on(\"registryDownload.\" + this.source, function () {\n            self._sortFullSet();\n            self._setInitialFilter();\n        });\n        this.infoMessage = `<div style=\"display: flex; justify-content: space-between;\">\n            <div style=\"margin-top: 3px;\">${Strings.EXTENSION_MANAGER_THEMES_INFO}</div>\n            <div>\n                <button id=\"InstalledViewThemeRevert\" class=\"dialog-button btn btn-mini undoTheme forced-hidden\">\n                ${Strings.EXTENSION_MANAGER_THEMES_UNDO}</button>\n            </div>\n            </div>`;\n    }\n\n    InstalledViewModel.prototype = Object.create(ExtensionManagerViewModel.prototype);\n    InstalledViewModel.prototype.constructor = InstalledViewModel;\n\n    /**\n     * @type {string}\n     * InstalledViewModels always have a source of SOURCE_INSTALLED.\n     */\n    InstalledViewModel.prototype.source = ExtensionManagerViewModel.prototype.SOURCE_INSTALLED;\n\n    /**\n     * Initializes the model from the set of locally installed extensions, sorted\n     * alphabetically by id (or name of the extension folder for legacy extensions).\n     * @return {$.Promise} a promise that's resolved when we're done initializing.\n     */\n    InstalledViewModel.prototype._initializeFromSource = function () {\n        var self = this;\n        this.extensions = ExtensionManager.extensions;\n        this.sortedFullSet = Object.keys(this.extensions)\n            .filter(function (key) {\n                return self.extensions[key].installInfo &&\n                    self.extensions[key].installInfo.locationType !== ExtensionManager.LOCATION_DEFAULT;\n            });\n        this._sortFullSet();\n        this._setInitialFilter();\n        this._countUpdates();\n\n        return new $.Deferred().resolve().promise();\n    };\n\n    /**\n     * @private\n     * Re-sorts the current full set\n     */\n    InstalledViewModel.prototype._sortFullSet = function () {\n        var self = this;\n\n        this.sortedFullSet = this.sortedFullSet.sort(function (key1, key2) {\n            // before sorting by name, put first extensions that have updates\n            var ua1 = self.extensions[key1].installInfo.updateAvailable,\n                ua2 = self.extensions[key2].installInfo.updateAvailable;\n\n            if (ua1 && !ua2) {\n                return -1;\n            } else if (!ua1 && ua2) {\n                return 1;\n            }\n\n            var metadata1 = self.extensions[key1].installInfo.metadata,\n                metadata2 = self.extensions[key2].installInfo.metadata,\n                id1 = (metadata1.title || metadata1.name).toLocaleLowerCase(),\n                id2 = (metadata2.title || metadata2.name).toLocaleLowerCase();\n\n            return id1.localeCompare(id2);\n        });\n    };\n\n    /**\n     * @private\n     * Updates notifyCount based on number of extensions with an update available\n     */\n    InstalledViewModel.prototype._countUpdates = function () {\n        var self = this;\n        this.notifyCount = 0;\n        this.sortedFullSet.forEach(function (key) {\n            if (self.extensions[key].installInfo.updateCompatible && !ExtensionManager.isMarkedForUpdate(key)) {\n                self.notifyCount++;\n            }\n        });\n    };\n\n    /**\n     * @private\n     * Updates the initial set and filter as necessary when the status of an extension changes,\n     * and notifies listeners of the change.\n     * @param {$.Event} e The jQuery event object.\n     * @param {string} id The id of the extension whose status changed.\n     */\n    InstalledViewModel.prototype._handleStatusChange = function (e, id) {\n        var index = this.sortedFullSet.indexOf(id),\n            refilter = false;\n        if (index !== -1 && !this.extensions[id].installInfo) {\n            // This was in our set, but was uninstalled. Remove it.\n            this.sortedFullSet.splice(index, 1);\n            this._countUpdates();  // may also affect update count\n            refilter = true;\n        } else if (index === -1 && this.extensions[id].installInfo) {\n            // This was not in our set, but is now installed. Add it and resort.\n            this.sortedFullSet.push(id);\n            this._sortFullSet();\n            refilter = true;\n        }\n        if (refilter) {\n            this.filter(this._lastQuery || \"\", true);\n        }\n\n        if (this.extensions[id].installInfo) {\n            // If our count of available updates may have been affected, re-count\n            this._countUpdates();\n        }\n\n        ExtensionManagerViewModel.prototype._handleStatusChange.call(this, e, id);\n    };\n\n    /**\n     * @private\n     * Finds the extension metadata by id. If there is no extension matching the given id,\n     * this returns `null`.\n     * @param {string} id of the extension\n     * @return {Object?} extension metadata or null if there's no matching extension\n     */\n    InstalledViewModel.prototype._getEntry = function (id) {\n        var entry = this.extensions[id];\n        if (entry) {\n            return entry.installInfo;\n        }\n        return entry;\n    };\n\n    /**\n     * Model for displaying default extensions that come bundled with Brackets\n     */\n    function DefaultViewModel() {\n        ExtensionManagerViewModel.call(this);\n    }\n\n    // Inheritance setup\n    DefaultViewModel.prototype = Object.create(ExtensionManagerViewModel.prototype);\n    DefaultViewModel.prototype.constructor = DefaultViewModel;\n\n    /**\n     * Add SOURCE_DEFAULT to DefaultViewModel\n     */\n    DefaultViewModel.prototype.source = ExtensionManagerViewModel.prototype.SOURCE_DEFAULT;\n\n    /**\n     * Initializes the model from the set of default extensions, sorted alphabetically by id\n     * @return {$.Promise} a promise that's resolved when we're done initializing.\n     */\n    DefaultViewModel.prototype._initializeFromSource = function () {\n        var self = this;\n        this.extensions = ExtensionManager.extensions;\n        this.sortedFullSet = Object.keys(this.extensions)\n            .filter(function (key) {\n                return self.extensions[key].installInfo &&\n                    self.extensions[key].installInfo.locationType === ExtensionManager.LOCATION_DEFAULT;\n            });\n        this._sortFullSet();\n        this._setInitialFilter();\n        return new $.Deferred().resolve().promise();\n    };\n\n    /**\n     * @private\n     * Re-sorts the current full set\n     */\n    DefaultViewModel.prototype._sortFullSet = function () {\n        var self = this;\n        this.sortedFullSet = this.sortedFullSet.sort(function (key1, key2) {\n            var metadata1 = self.extensions[key1].installInfo.metadata,\n                metadata2 = self.extensions[key2].installInfo.metadata,\n                id1 = (metadata1.title || metadata1.name).toLocaleLowerCase(),\n                id2 = (metadata2.title || metadata2.name).toLocaleLowerCase();\n            return id1.localeCompare(id2);\n        });\n    };\n\n    /**\n     * @private\n     * Finds the default extension metadata by id. If there is no default extension matching the given id,\n     * this returns `null`.\n     * @param {string} id of the theme extension\n     * @return {Object?} extension metadata or null if there's no matching extension\n     */\n    DefaultViewModel.prototype._getEntry = function (id) {\n        return this.extensions[id] ? this.extensions[id].installInfo : null;\n    };\n\n    /**\n     * The model for the ExtensionManagerView that is responsible for handling registry-based theme extensions.\n     * This extends ExtensionManagerViewModel.\n     * Must be disposed with dispose() when done.\n     *\n     * Events:\n     * - change - triggered when the data for a given extension changes. Second parameter is the extension id.\n     * - filter - triggered whenever the filtered set changes (including on initialize).\n     *\n     * @constructor\n     */\n    function ThemesViewModel() {\n        ExtensionManagerViewModel.call(this);\n        this.infoMessage = `<div style=\"display: flex; justify-content: space-between;\">\n            <div style=\"margin-top: 3px;\">${Strings.EXTENSION_MANAGER_THEMES_INFO}</div>\n            <div>\n                <button id=\"ThemeViewThemeRevert\" class=\"dialog-button btn btn-mini undoTheme forced-hidden\">\n                ${Strings.EXTENSION_MANAGER_THEMES_UNDO}</button>\n                <button class=\"dialog-button btn btn-mini createTheme primary\"\n                style=\"white-space: nowrap;\">\n                ${Strings.EXTENSION_MANAGER_CREATE_THEME}</button>\n            </div>\n            </div>`;\n    }\n\n    // Inheritance setup\n    ThemesViewModel.prototype = Object.create(ExtensionManagerViewModel.prototype);\n    ThemesViewModel.prototype.constructor = ThemesViewModel;\n\n    /**\n     * @type {string}\n     * ThemeViewModels always have a source of SOURCE_THEMES.\n     */\n    ThemesViewModel.prototype.source = ExtensionManagerViewModel.prototype.SOURCE_THEMES;\n\n    /**\n     * Initializes the model from the remote extension registry.\n     * @return {$.Promise} a promise that's resolved with the registry JSON data.\n     */\n    ThemesViewModel.prototype._initializeFromSource = function () {\n        var self = this;\n        return ExtensionManager.downloadRegistry()\n            .done(function () {\n                self.extensions = ExtensionManager.extensions;\n\n                // Sort the registry by last published date and store the sorted list of IDs.\n                self._setSortedExtensionList(ExtensionManager.extensions, true);\n                self._setInitialFilter();\n            })\n            .fail(function () {\n                self.extensions = [];\n                self.sortedFullSet = [];\n                self.filterSet = [];\n            });\n    };\n\n    /**\n     * @private\n     * Finds the theme extension metadata by id. If there is no theme extension matching the given id,\n     * this returns `null`.\n     * @param {string} id of the theme extension\n     * @return {Object?} extension metadata or null if there's no matching extension\n     */\n    ThemesViewModel.prototype._getEntry = function (id) {\n        var entry = this.extensions[id];\n        if (entry) {\n            return entry.registryInfo;\n        }\n        return entry;\n    };\n\n    exports.RegistryViewModel = RegistryViewModel;\n    exports.ThemesViewModel = ThemesViewModel;\n    exports.InstalledViewModel = InstalledViewModel;\n    exports.DefaultViewModel = DefaultViewModel;\n});\n"],"file":"ExtensionManagerViewModel.js"}