{"version":3,"sources":["extensions/default/JavaScriptQuickEdit/main.js"],"names":["define","require","exports","module","MultiRangeInlineEditor","brackets","getModule","EditorManager","JSUtils","LanguageManager","PerfUtils","ProjectManager","Strings","Metrics","_getFunctionName","hostEditor","pos","token","_codeMirror","getTokenAt","test","string","line","ch","type","functionName","reason","ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND","_findInProject","result","$","Deferred","_nonBinaryFileFilter","file","getLanguageForPath","fullPath","isBinary","markStart","JAVASCRIPT_FIND_FUNCTION","getAllFiles","done","files","findMatchingFunctions","functions","addMeasurement","resolve","fail","finalizeMeasurement","reject","promise","_createInlineEditor","helper","_jsCodeHintsHelper","JAVASCRIPT_INLINE_CREATE","response","hasOwnProperty","jumpResp","resolvedPath","fileInfos","push","name","resultFile","length","jsInlineEditor","load","javaScriptFunctionProvider","getModeForSelection","countEvent","EVENT_TYPE","EDITOR","sel","getSelection","start","end","functionResult","registerInlineEditProvider","createPerfMeasurement"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    // Brackets modules\n    var MultiRangeInlineEditor  = brackets.getModule(\"editor/MultiRangeInlineEditor\").MultiRangeInlineEditor,\n        EditorManager           = brackets.getModule(\"editor/EditorManager\"),\n        JSUtils                 = brackets.getModule(\"language/JSUtils\"),\n        LanguageManager         = brackets.getModule(\"language/LanguageManager\"),\n        PerfUtils               = brackets.getModule(\"utils/PerfUtils\"),\n        ProjectManager          = brackets.getModule(\"project/ProjectManager\"),\n        Strings                 = brackets.getModule(\"strings\"),\n        Metrics                 = brackets.getModule(\"utils/Metrics\");\n\n    /**\n     * Return the token string that is at the specified position.\n     *\n     * @param hostEditor {!Editor} editor\n     * @param {!{line:number, ch:number}} pos\n     * @return {functionName: string, reason: string}\n     */\n    function _getFunctionName(hostEditor, pos) {\n        var token = hostEditor._codeMirror.getTokenAt(pos, true);\n\n        // If the pos is at the beginning of a name, token will be the\n        // preceding whitespace or dot. In that case, try the next pos.\n        if (!/\\S/.test(token.string) || token.string === \".\") {\n            token = hostEditor._codeMirror.getTokenAt({line: pos.line, ch: pos.ch + 1}, true);\n        }\n\n        // Return valid function expressions only (function call or reference)\n        if (!((token.type === \"variable\") ||\n              (token.type === \"variable-2\") ||\n              (token.type === \"property\"))) {\n            return {\n                functionName: null,\n                reason: Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND\n            };\n        }\n\n        return {\n            functionName: token.string,\n            reason: null\n        };\n    }\n\n    /**\n     * @private\n     * For unit and performance tests. Allows lookup by function name instead of editor offset\n     * without constructing an inline editor.\n     *\n     * @param {!string} functionName\n     * @return {$.Promise} a promise that will be resolved with an array of function offset information\n     */\n    function _findInProject(functionName) {\n        var result = new $.Deferred();\n\n        PerfUtils.markStart(PerfUtils.JAVASCRIPT_FIND_FUNCTION);\n\n        function _nonBinaryFileFilter(file) {\n            return !LanguageManager.getLanguageForPath(file.fullPath).isBinary();\n        }\n\n        ProjectManager.getAllFiles(_nonBinaryFileFilter)\n            .done(function (files) {\n                JSUtils.findMatchingFunctions(functionName, files)\n                    .done(function (functions) {\n                        PerfUtils.addMeasurement(PerfUtils.JAVASCRIPT_FIND_FUNCTION);\n                        result.resolve(functions);\n                    })\n                    .fail(function () {\n                        PerfUtils.finalizeMeasurement(PerfUtils.JAVASCRIPT_FIND_FUNCTION);\n                        result.reject();\n                    });\n            })\n            .fail(function () {\n                result.reject();\n            });\n\n        return result.promise();\n    }\n\n    /**\n     * @private\n     * For unit and performance tests. Allows lookup by function name instead of editor offset .\n     *\n     * @param {!Editor} hostEditor\n     * @param {!string} functionName\n     * @return {?$.Promise} synchronously resolved with an InlineWidget, or\n     *         {string} if js other than function is detected at pos, or\n     *         null if we're not ready to provide anything.\n     */\n    function _createInlineEditor(hostEditor, functionName) {\n        // Use Tern jump-to-definition helper, if it's available, to find InlineEditor target.\n        var helper = brackets._jsCodeHintsHelper;\n        if (helper === null) {\n            return null;\n        }\n\n        var result = new $.Deferred();\n        PerfUtils.markStart(PerfUtils.JAVASCRIPT_INLINE_CREATE);\n\n        var response = helper();\n        if (response.hasOwnProperty(\"promise\")) {\n            response.promise.done(function (jumpResp) {\n                var resolvedPath = jumpResp.fullPath;\n                if (resolvedPath) {\n\n                    // Tern doesn't always return entire function extent.\n                    // Use QuickEdit search now that we know which file to look at.\n                    var fileInfos = [];\n                    fileInfos.push({name: jumpResp.resultFile, fullPath: resolvedPath});\n                    JSUtils.findMatchingFunctions(functionName, fileInfos, true)\n                        .done(function (functions) {\n                            if (functions && functions.length > 0) {\n                                var jsInlineEditor = new MultiRangeInlineEditor(functions);\n                                jsInlineEditor.load(hostEditor);\n\n                                PerfUtils.addMeasurement(PerfUtils.JAVASCRIPT_INLINE_CREATE);\n                                result.resolve(jsInlineEditor);\n                            } else {\n                                // No matching functions were found\n                                PerfUtils.addMeasurement(PerfUtils.JAVASCRIPT_INLINE_CREATE);\n                                result.reject();\n                            }\n                        })\n                        .fail(function () {\n                            PerfUtils.addMeasurement(PerfUtils.JAVASCRIPT_INLINE_CREATE);\n                            result.reject();\n                        });\n\n                } else {        // no result from Tern.  Fall back to _findInProject().\n\n                    _findInProject(functionName).done(function (functions) {\n                        if (functions && functions.length > 0) {\n                            var jsInlineEditor = new MultiRangeInlineEditor(functions);\n                            jsInlineEditor.load(hostEditor);\n\n                            PerfUtils.addMeasurement(PerfUtils.JAVASCRIPT_INLINE_CREATE);\n                            result.resolve(jsInlineEditor);\n                        } else {\n                            // No matching functions were found\n                            PerfUtils.addMeasurement(PerfUtils.JAVASCRIPT_INLINE_CREATE);\n                            result.reject();\n                        }\n                    }).fail(function () {\n                        PerfUtils.finalizeMeasurement(PerfUtils.JAVASCRIPT_INLINE_CREATE);\n                        result.reject();\n                    });\n                }\n\n            }).fail(function () {\n                PerfUtils.finalizeMeasurement(PerfUtils.JAVASCRIPT_INLINE_CREATE);\n                result.reject();\n            });\n\n        }\n\n        return result.promise();\n    }\n\n    /**\n     * This function is registered with EditorManager as an inline editor provider. It creates an inline editor\n     * when the cursor is on a JavaScript function name, finds all functions that match the name\n     * and shows (one/all of them) in an inline editor.\n     *\n     * @param {!Editor} editor\n     * @param {!{line:number, ch:number}} pos\n     * @return {$.Promise} a promise that will be resolved with an InlineWidget\n     *      or null if we're not ready to provide anything.\n     */\n    function javaScriptFunctionProvider(hostEditor, pos) {\n        // Only provide a JavaScript editor when cursor is in JavaScript content\n        if (hostEditor.getModeForSelection() !== \"javascript\") {\n            return null;\n        }\n\n        //Send analytics data for Quick Edit open\n        Metrics.countEvent(\n            Metrics.EVENT_TYPE.EDITOR,\n            \"JsQuickEdit\",\n            \"open\"\n        );\n        // Only provide JavaScript editor if the selection is within a single line\n        var sel = hostEditor.getSelection();\n        if (sel.start.line !== sel.end.line) {\n            return null;\n        }\n\n        // Always use the selection start for determining the function name. The pos\n        // parameter is usually the selection end.\n        var functionResult = _getFunctionName(hostEditor, sel.start);\n        if (!functionResult.functionName) {\n            return functionResult.reason || null;\n        }\n\n        return _createInlineEditor(hostEditor, functionResult.functionName);\n    }\n\n    // init\n    EditorManager.registerInlineEditProvider(javaScriptFunctionProvider);\n    PerfUtils.createPerfMeasurement(\"JAVASCRIPT_INLINE_CREATE\", \"JavaScript Inline Editor Creation\");\n    PerfUtils.createPerfMeasurement(\"JAVASCRIPT_FIND_FUNCTION\", \"JavaScript Find Function\");\n\n    // for unit tests only\n    exports.javaScriptFunctionProvider  = javaScriptFunctionProvider;\n    exports._createInlineEditor         = _createInlineEditor;\n    exports._findInProject              = _findInProject;\n});\n"],"file":"main.js"}