{"version":3,"sources":["thirdparty/CodeMirror/mode/puppet/puppet.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","variable_regex","style","string","split","i","length","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","tokenize","word","match","attribute","resource","special_resource","ch","inDefinition","inInclude","hasOwnProperty","test","skipToEnd","eatWhile","peek","startState","token","eatSpace","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,SAAU,WAE9B,IAAIC,MAAQ,GAERC,eAAiB,mEAIrB,SAASL,OAAOM,MAAOC,QAErB,IADA,IAAIC,MAAQD,OAAOC,MAAM,KAChBC,EAAI,EAAGA,EAAID,MAAME,OAAQD,IAChCL,MAAMI,MAAMC,IAAMH,MAsBtB,SAASK,YAAYC,OAAQC,OAE3B,IADA,IAAIC,QAASC,KAAMC,WAAY,GACvBJ,OAAOK,QAAUH,QAAUF,OAAOM,SAAWL,MAAMM,SAAS,CAClE,GAAgB,MAAZL,SAA2B,MAARC,MAAiC,KAAjBF,MAAMM,QAAgB,CAC3DH,WAAY,EACZ,MAEFD,KAAOD,QAUT,OARIE,WACFJ,OAAOQ,OAAO,GAEZN,SAAWD,MAAMM,QACnBN,MAAMQ,gBAAiB,EAEvBR,MAAMQ,gBAAiB,EAElB,SAIT,SAASC,SAASV,OAAQC,OAExB,IAAIU,KAAOX,OAAOY,MAAM,SAAS,GAE7BC,UAAYb,OAAOY,MAAM,oBAAoB,GAG7CE,SAAWd,OAAOY,MAAM,wBAAwB,GAEhDG,iBAAmBf,OAAOY,MAAM,gCAAgC,GAGhEI,GAAKhB,OAAOM,OAGhB,GAAW,MAAPU,GACF,OAAIhB,OAAOY,MAAMnB,gBAERQ,MAAMQ,eAAiB,aAAe,WAGxC,QAGT,GAAIR,MAAMQ,eAGR,OADAT,OAAOQ,OAAO,GACPT,YAAYC,OAAQC,OAG7B,GAAIA,MAAMgB,aAAc,CAEtB,GAAIjB,OAAOY,MAAM,uBACf,MAAO,MAGTZ,OAAOY,MAAM,QACbX,MAAMgB,cAAe,EAGvB,OAAIhB,MAAMiB,WAERlB,OAAOY,MAAM,mBACbX,MAAMiB,WAAY,EACX,OAILlB,OAAOY,MAAM,gBACfZ,OAAOQ,OAAO,GACP,OAGLK,WACFb,OAAOY,MAAM,aACN,OAGLD,MAAQnB,MAAM2B,eAAeR,OAE/BX,OAAOQ,OAAO,GAEdR,OAAOY,MAAM,SAGTZ,OAAOY,MAAM,cAAc,KAC7BX,MAAMgB,cAAe,GAEX,WAARN,OACFV,MAAMiB,WAAY,GAGb1B,MAAMmB,OAGX,sBAAsBS,KAAKT,OAE7BX,OAAOQ,OAAO,GAEdR,OAAOY,MAAM,uBACN,OAGLE,UACFd,OAAOY,MAAM,iBACN,OAGLG,kBACFf,OAAOY,MAAM,kBACN,WAGC,KAANI,IACFhB,OAAOqB,YACA,WAGC,KAANL,IAAmB,KAANA,IAEff,MAAMM,QAAUS,GAETjB,YAAYC,OAAQC,QAGnB,KAANe,IAAmB,KAANA,GACR,UAIC,KAANA,IACFhB,OAAOY,MAAM,aACN,cAGLI,GAAGJ,MAAM,UACXZ,OAAOsB,SAAS,UACT,UAGC,KAANN,IACmB,KAAjBhB,OAAOuB,QACPvB,OAAOM,OAEJ,aAGTN,OAAOsB,SAAS,SAET,MAGT,OA1KAlC,OAAO,UAAW,kDAClBA,OAAO,UAAW,wCAClBA,OAAO,OAAQ,0DACfA,OAAO,UAAW,4rBAuKX,CACLoC,WAAY,WACV,IAAIvB,MAAQ,CACZgB,cAAqB,EACrBC,WAAkB,EAClBT,gBAAuB,EACvBF,SAAgB,GAChB,OAAON,OAETwB,MAAO,SAAUzB,OAAQC,OAEvB,OAAID,OAAO0B,WAAmB,KAEvBhB,SAASV,OAAQC,WAK9BX,WAAWqC,WAAW,gBAAiB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"puppet\", function () {\n  // Stores the words from the define method\n  var words = {};\n  // Taken, mostly, from the Puppet official variable standards regex\n  var variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;\n\n  // Takes a string of words separated by spaces and adds them as\n  // keys with the value of the first argument 'style'\n  function define(style, string) {\n    var split = string.split(' ');\n    for (var i = 0; i < split.length; i++) {\n      words[split[i]] = style;\n    }\n  }\n\n  // Takes commonly known puppet types/words and classifies them to a style\n  define('keyword', 'class define site node include import inherits');\n  define('keyword', 'case if else in and elsif default or');\n  define('atom', 'false true running present absent file directory undef');\n  define('builtin', 'action augeas burst chain computer cron destination dport exec ' +\n    'file filebucket group host icmp iniface interface jump k5login limit log_level ' +\n    'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' +\n    'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' +\n    'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' +\n    'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' +\n    'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' +\n    'resources router schedule scheduled_task selboolean selmodule service source ' +\n    'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' +\n    'user vlan yumrepo zfs zone zpool');\n\n  // After finding a start of a string ('|\") this function attempts to find the end;\n  // If a variable is encountered along the way, we display it differently when it\n  // is encapsulated in a double-quoted string.\n  function tokenString(stream, state) {\n    var current, prev, found_var = false;\n    while (!stream.eol() && (current = stream.next()) != state.pending) {\n      if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n        found_var = true;\n        break;\n      }\n      prev = current;\n    }\n    if (found_var) {\n      stream.backUp(1);\n    }\n    if (current == state.pending) {\n      state.continueString = false;\n    } else {\n      state.continueString = true;\n    }\n    return \"string\";\n  }\n\n  // Main function\n  function tokenize(stream, state) {\n    // Matches one whole word\n    var word = stream.match(/[\\w]+/, false);\n    // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)\n    var attribute = stream.match(/(\\s+)?\\w+\\s+=>.*/, false);\n    // Matches non-builtin resource declarations\n    // (i.e. \"apache::vhost {\" or \"mycustomclasss {\" would be matched)\n    var resource = stream.match(/(\\s+)?[\\w:_]+(\\s+)?{/, false);\n    // Matches virtual and exported resources (i.e. @@user { ; and the like)\n    var special_resource = stream.match(/(\\s+)?[@]{1,2}[\\w:_]+(\\s+)?{/, false);\n\n    // Finally advance the stream\n    var ch = stream.next();\n\n    // Have we found a variable?\n    if (ch === '$') {\n      if (stream.match(variable_regex)) {\n        // If so, and its in a string, assign it a different color\n        return state.continueString ? 'variable-2' : 'variable';\n      }\n      // Otherwise return an invalid variable\n      return \"error\";\n    }\n    // Should we still be looking for the end of a string?\n    if (state.continueString) {\n      // If so, go through the loop again\n      stream.backUp(1);\n      return tokenString(stream, state);\n    }\n    // Are we in a definition (class, node, define)?\n    if (state.inDefinition) {\n      // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)\n      if (stream.match(/(\\s+)?[\\w:_]+(\\s+)?/)) {\n        return 'def';\n      }\n      // Match the rest it the next time around\n      stream.match(/\\s+{/);\n      state.inDefinition = false;\n    }\n    // Are we in an 'include' statement?\n    if (state.inInclude) {\n      // Match and return the included class\n      stream.match(/(\\s+)?\\S+(\\s+)?/);\n      state.inInclude = false;\n      return 'def';\n    }\n    // Do we just have a function on our hands?\n    // In 'ensure_resource(\"myclass\")', 'ensure_resource' is matched\n    if (stream.match(/(\\s+)?\\w+\\(/)) {\n      stream.backUp(1);\n      return 'def';\n    }\n    // Have we matched the prior attribute regex?\n    if (attribute) {\n      stream.match(/(\\s+)?\\w+/);\n      return 'tag';\n    }\n    // Do we have Puppet specific words?\n    if (word && words.hasOwnProperty(word)) {\n      // Negates the initial next()\n      stream.backUp(1);\n      // rs move the stream\n      stream.match(/[\\w]+/);\n      // We want to process these words differently\n      // do to the importance they have in Puppet\n      if (stream.match(/\\s+\\S+\\s+{/, false)) {\n        state.inDefinition = true;\n      }\n      if (word == 'include') {\n        state.inInclude = true;\n      }\n      // Returns their value as state in the prior define methods\n      return words[word];\n    }\n    // Is there a match on a reference?\n    if (/(^|\\s+)[A-Z][\\w:_]+/.test(word)) {\n      // Negate the next()\n      stream.backUp(1);\n      // Match the full reference\n      stream.match(/(^|\\s+)[A-Z][\\w:_]+/);\n      return 'def';\n    }\n    // Have we matched the prior resource regex?\n    if (resource) {\n      stream.match(/(\\s+)?[\\w:_]+/);\n      return 'def';\n    }\n    // Have we matched the prior special_resource regex?\n    if (special_resource) {\n      stream.match(/(\\s+)?[@]{1,2}/);\n      return 'special';\n    }\n    // Match all the comments. All of them.\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    // Have we found a string?\n    if (ch == \"'\" || ch == '\"') {\n      // Store the type (single or double)\n      state.pending = ch;\n      // Perform the looping function to find the end\n      return tokenString(stream, state);\n    }\n    // Match all the brackets\n    if (ch == '{' || ch == '}') {\n      return 'bracket';\n    }\n    // Match characters that we are going to assume\n    // are trying to be regex\n    if (ch == '/') {\n      stream.match(/^[^\\/]*\\//);\n      return 'variable-3';\n    }\n    // Match all the numbers\n    if (ch.match(/[0-9]/)) {\n      stream.eatWhile(/[0-9]+/);\n      return 'number';\n    }\n    // Match the '=' and '=>' operators\n    if (ch == '=') {\n      if (stream.peek() == '>') {\n          stream.next();\n      }\n      return \"operator\";\n    }\n    // Keep advancing through all the rest\n    stream.eatWhile(/[\\w-]/);\n    // Return a blank line for everything else\n    return null;\n  }\n  // Start it all\n  return {\n    startState: function () {\n      var state = {};\n      state.inDefinition = false;\n      state.inInclude = false;\n      state.continueString = false;\n      state.pending = false;\n      return state;\n    },\n    token: function (stream, state) {\n      // Strip the spaces, but regex will account for them eitherway\n      if (stream.eatSpace()) return null;\n      // Go through the main process\n      return tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-puppet\", \"puppet\");\n\n});\n"],"file":"puppet.js"}