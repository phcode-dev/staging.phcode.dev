{"version":3,"sources":["thirdparty/CodeMirror/mode/smalltalk/smalltalk.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","specialChars","keywords","Context","tokenizer","parent","this","next","Token","name","context","eos","State","expectVariable","indentation","userIndentationDelta","prototype","userIndent","indentUnit","stream","state","token","aChar","nextComment","nextString","peek","nextSymbol","eatWhile","nextTemporaries","test","Math","max","current","eat","startState","eatSpace","blankLine","indent","textAfter","i","charAt","electricChars","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('smalltalk', function(config) {\n\n  var specialChars = /[+\\-\\/\\\\*~<>=@%|&?!.,:;^]/;\n  var keywords = /true|false|nil|self|super|thisContext/;\n\n  var Context = function(tokenizer, parent) {\n    this.next = tokenizer;\n    this.parent = parent;\n  };\n\n  var Token = function(name, context, eos) {\n    this.name = name;\n    this.context = context;\n    this.eos = eos;\n  };\n\n  var State = function() {\n    this.context = new Context(next, null);\n    this.expectVariable = true;\n    this.indentation = 0;\n    this.userIndentationDelta = 0;\n  };\n\n  State.prototype.userIndent = function(indentation) {\n    this.userIndentationDelta = indentation > 0 ? (indentation / config.indentUnit - this.indentation) : 0;\n  };\n\n  var next = function(stream, context, state) {\n    var token = new Token(null, context, false);\n    var aChar = stream.next();\n\n    if (aChar === '\"') {\n      token = nextComment(stream, new Context(nextComment, context));\n\n    } else if (aChar === '\\'') {\n      token = nextString(stream, new Context(nextString, context));\n\n    } else if (aChar === '#') {\n      if (stream.peek() === '\\'') {\n        stream.next();\n        token = nextSymbol(stream, new Context(nextSymbol, context));\n      } else {\n        if (stream.eatWhile(/[^\\s.{}\\[\\]()]/))\n          token.name = 'string-2';\n        else\n          token.name = 'meta';\n      }\n\n    } else if (aChar === '$') {\n      if (stream.next() === '<') {\n        stream.eatWhile(/[^\\s>]/);\n        stream.next();\n      }\n      token.name = 'string-2';\n\n    } else if (aChar === '|' && state.expectVariable) {\n      token.context = new Context(nextTemporaries, context);\n\n    } else if (/[\\[\\]{}()]/.test(aChar)) {\n      token.name = 'bracket';\n      token.eos = /[\\[{(]/.test(aChar);\n\n      if (aChar === '[') {\n        state.indentation++;\n      } else if (aChar === ']') {\n        state.indentation = Math.max(0, state.indentation - 1);\n      }\n\n    } else if (specialChars.test(aChar)) {\n      stream.eatWhile(specialChars);\n      token.name = 'operator';\n      token.eos = aChar !== ';'; // ; cascaded message expression\n\n    } else if (/\\d/.test(aChar)) {\n      stream.eatWhile(/[\\w\\d]/);\n      token.name = 'number';\n\n    } else if (/[\\w_]/.test(aChar)) {\n      stream.eatWhile(/[\\w\\d_]/);\n      token.name = state.expectVariable ? (keywords.test(stream.current()) ? 'keyword' : 'variable') : null;\n\n    } else {\n      token.eos = state.expectVariable;\n    }\n\n    return token;\n  };\n\n  var nextComment = function(stream, context) {\n    stream.eatWhile(/[^\"]/);\n    return new Token('comment', stream.eat('\"') ? context.parent : context, true);\n  };\n\n  var nextString = function(stream, context) {\n    stream.eatWhile(/[^']/);\n    return new Token('string', stream.eat('\\'') ? context.parent : context, false);\n  };\n\n  var nextSymbol = function(stream, context) {\n    stream.eatWhile(/[^']/);\n    return new Token('string-2', stream.eat('\\'') ? context.parent : context, false);\n  };\n\n  var nextTemporaries = function(stream, context) {\n    var token = new Token(null, context, false);\n    var aChar = stream.next();\n\n    if (aChar === '|') {\n      token.context = context.parent;\n      token.eos = true;\n\n    } else {\n      stream.eatWhile(/[^|]/);\n      token.name = 'variable';\n    }\n\n    return token;\n  };\n\n  return {\n    startState: function() {\n      return new State;\n    },\n\n    token: function(stream, state) {\n      state.userIndent(stream.indentation());\n\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var token = state.context.next(stream, state.context, state);\n      state.context = token.context;\n      state.expectVariable = token.eos;\n\n      return token.name;\n    },\n\n    blankLine: function(state) {\n      state.userIndent(0);\n    },\n\n    indent: function(state, textAfter) {\n      var i = state.context.next === next && textAfter && textAfter.charAt(0) === ']' ? -1 : state.userIndentationDelta;\n      return (state.indentation + i) * config.indentUnit;\n    },\n\n    electricChars: ']'\n  };\n\n});\n\nCodeMirror.defineMIME('text/x-stsrc', {name: 'smalltalk'});\n\n});\n"],"file":"smalltalk.js"}