{"version":3,"sources":["editor/EditorStatusBar.js"],"names":["define","require","exports","module","_","AnimationUtils","AppInit","DropdownButton","EditorManager","MainViewManager","Editor","KeyEvent","LanguageManager","PreferencesManager","StatusBar","Strings","InMemoryFile","ProjectManager","Async","TaskManager","FileSystem","CommandManager","Commands","DocumentManager","StringUtils","Metrics","SupportedEncodings","fs","SUPPORTED_ENCODINGS","sort","languageSelect","encodingSelect","tasksSelect","$cursorInfo","$fileInfo","$indentType","$indentWidthLabel","$indentWidthInput","$statusOverwrite","LANGUAGE_SET_AS_DEFAULT","_formatCountable","number","singularStr","pluralStr","format","_updateLanguageInfo","editor","doc","lang","document","getLanguage","$button","text","getName","_updateEncodingInfo","file","_encoding","_updateFileInfo","lines","lineCount","STATUSBAR_LINE_COUNT_SINGULAR","STATUSBAR_LINE_COUNT_PLURAL","_updateIndentType","fullPath","indentWithTabs","getUseTabChar","STATUSBAR_TAB_SIZE","STATUSBAR_SPACES","attr","STATUSBAR_INDENT_TOOLTIP_SPACES","STATUSBAR_INDENT_TOOLTIP_TABS","STATUSBAR_INDENT_SIZE_TOOLTIP_TABS","STATUSBAR_INDENT_SIZE_TOOLTIP_SPACES","_getIndentSize","getTabSize","getSpaceUnits","_updateIndentSize","size","val","_toggleIndentType","current","getActiveEditor","setUseTabChar","_updateCursorInfo","event","cursor","getCursorPos","cursorStr","STATUSBAR_CURSOR_POSITION","line","ch","sels","getSelections","selStr","length","countEvent","EVENT_TYPE","EDITOR","STATUSBAR_SELECTION_MULTIPLE","hasSelection","sel","start","end","STATUSBAR_SELECTION_LINE_SINGULAR","STATUSBAR_SELECTION_LINE_PLURAL","cols","getColOffset","STATUSBAR_SELECTION_CH_SINGULAR","STATUSBAR_SELECTION_CH_PLURAL","_changeIndentWidth","value","removeClass","addClass","off","focusActivePane","valInt","parseInt","setTabSize","setSpaceUnits","_updateOverwriteLabel","newstate","doNotAnimate","STATUSBAR_OVERWRITE","STATUSBAR_INSERT","animateUsingClass","_updateEditorOverwriteMode","_codeMirror","state","overwrite","toggleOverwrite","_initOverwriteMode","currentEditor","STATUSBAR_INSOVR_TOOLTIP","_onActiveEditorChange","previous","releaseRef","showAllPanes","on","window","setTimeout","addRef","hideAllPanes","_populateLanguageDropdown","languages","values","getLanguages","filter","language","isBinary","a","b","toLowerCase","localeCompare","items","unshift","_changeEncodingAndReloadDoc","promise","reload","done","readTimestamp","encoding","getViewState","STATE_PROJECT_CONTEXT","setViewState","fail","error","console","log","_populateEncodingDropdown","_init","$","item","index","defaultLang","getLanguageForPath","label","html","escape","STATUSBAR_SET_DEFAULT_LANG","getCompoundFileExtension","enabled","STATUSBAR_DEFAULT_LANG","dropdownExtraClasses","append","STATUSBAR_LANG_TOOLTIP","STATUSBAR_ENCODING_TOOLTIP","hideSpinner","STATUSBAR_TASKS","STATUSBAR_TASKS_HIDE_SPINNER","_renderItem","_setTaskSelect","STATUSBAR_TASKS_TOOLTIP","e","selection","_onSelect","EVENT_DROPDOWN_SHOWN","evt","_onDropdownShown","focus","keyCode","DOM_VK_RETURN","blur","DOM_VK_ESCAPE","select","fileType","filelanguageName","_name","fileExtensionMap","get","getId","set","setLanguageOverrideForPath","originalPath","originalEncoding","isDirty","execute","FILE_SAVE_AS","getCurrentDocument","_checkFileExistance","filePath","deferred","Deferred","fileEntry","getFileForPath","exists","err","resolve","reject","doSequentially","Object","keys","always","htmlReady","appReady","show"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global fs*/\n\n/**\n * Manages parts of the status bar related to the current editor's state.\n */\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    const _                    = require(\"thirdparty/lodash\"),\n        AnimationUtils       = require(\"utils/AnimationUtils\"),\n        AppInit              = require(\"utils/AppInit\"),\n        DropdownButton       = require(\"widgets/DropdownButton\"),\n        EditorManager        = require(\"editor/EditorManager\"),\n        MainViewManager      = require(\"view/MainViewManager\"),\n        Editor               = require(\"editor/Editor\").Editor,\n        KeyEvent             = require(\"utils/KeyEvent\"),\n        LanguageManager      = require(\"language/LanguageManager\"),\n        PreferencesManager   = require(\"preferences/PreferencesManager\"),\n        StatusBar            = require(\"widgets/StatusBar\"),\n        Strings              = require(\"strings\"),\n        InMemoryFile         = require(\"document/InMemoryFile\"),\n        ProjectManager       = require(\"project/ProjectManager\"),\n        Async                = require(\"utils/Async\"),\n        TaskManager    = require(\"features/TaskManager\"),\n        FileSystem           = require(\"filesystem/FileSystem\"),\n        CommandManager       = require(\"command/CommandManager\"),\n        Commands             = require(\"command/Commands\"),\n        DocumentManager      = require(\"document/DocumentManager\"),\n        StringUtils          = require(\"utils/StringUtils\"),\n        Metrics              = require(\"utils/Metrics\");\n\n    const SupportedEncodings = fs.SUPPORTED_ENCODINGS.sort();\n\n    /* StatusBar indicators */\n    var languageSelect, // this is a DropdownButton instance\n        encodingSelect, // this is a DropdownButton instance\n        tasksSelect, // this is a DropdownButton instance\n        $cursorInfo,\n        $fileInfo,\n        $indentType,\n        $indentWidthLabel,\n        $indentWidthInput,\n        $statusOverwrite;\n\n    /** Special list item for the 'set as default' gesture in language switcher dropdown */\n    var LANGUAGE_SET_AS_DEFAULT = {};\n\n\n    /**\n     * Determine string based on count\n     * @param {number} number Count\n     * @param {string} singularStr Singular string\n     * @param {string} pluralStr Plural string\n     * @return {string} Proper string to use for count\n     */\n    function _formatCountable(number, singularStr, pluralStr) {\n        return StringUtils.format(number > 1 ? pluralStr : singularStr, number);\n    }\n\n    /**\n     * Update file mode\n     * @param {Editor} editor Current editor\n     */\n    function _updateLanguageInfo(editor) {\n        var doc = editor.document,\n            lang = doc.getLanguage();\n\n        // Show the current language as button title\n        languageSelect.$button.text(lang.getName());\n    }\n\n    /**\n     * Update encoding\n     * @param {Editor} editor Current editor\n     */\n    function _updateEncodingInfo(editor) {\n        var doc = editor.document;\n\n        // Show the current encoding as button title\n        if (!doc.file._encoding) {\n            doc.file._encoding = \"utf8\";\n        }\n        encodingSelect.$button.text(doc.file._encoding);\n    }\n\n    /**\n     * Update file information\n     * @param {Editor} editor Current editor\n     */\n    function _updateFileInfo(editor) {\n        var lines = editor.lineCount();\n        $fileInfo.text(_formatCountable(lines, Strings.STATUSBAR_LINE_COUNT_SINGULAR, Strings.STATUSBAR_LINE_COUNT_PLURAL));\n    }\n\n    /**\n     * Update indent type and size\n     * @param {string} fullPath Path to file in current editor\n     */\n    function _updateIndentType(fullPath) {\n        var indentWithTabs = Editor.getUseTabChar(fullPath);\n        $indentType.text(indentWithTabs ? Strings.STATUSBAR_TAB_SIZE : Strings.STATUSBAR_SPACES);\n        $indentType.attr(\"title\", indentWithTabs ? Strings.STATUSBAR_INDENT_TOOLTIP_SPACES : Strings.STATUSBAR_INDENT_TOOLTIP_TABS);\n        $indentWidthLabel.attr(\"title\", indentWithTabs ? Strings.STATUSBAR_INDENT_SIZE_TOOLTIP_TABS : Strings.STATUSBAR_INDENT_SIZE_TOOLTIP_SPACES);\n    }\n\n    /**\n     * Get indent size based on type\n     * @param {string} fullPath Path to file in current editor\n     * @return {number} Indent size\n     */\n    function _getIndentSize(fullPath) {\n        return Editor.getUseTabChar(fullPath) ? Editor.getTabSize(fullPath) : Editor.getSpaceUnits(fullPath);\n    }\n\n    /**\n     * Update indent size\n     * @param {string} fullPath Path to file in current editor\n     */\n    function _updateIndentSize(fullPath) {\n        var size = _getIndentSize(fullPath);\n        $indentWidthLabel.text(size);\n        $indentWidthInput.val(size);\n    }\n\n    /**\n     * Toggle indent type\n     */\n    function _toggleIndentType() {\n        var current = EditorManager.getActiveEditor(),\n            fullPath = current && current.document.file.fullPath;\n\n        Editor.setUseTabChar(!Editor.getUseTabChar(fullPath), fullPath);\n        _updateIndentType(fullPath);\n        _updateIndentSize(fullPath);\n    }\n\n    /**\n     * Update cursor(s)/selection(s) information\n     * @param {Event} event (unused)\n     * @param {Editor} editor Current editor\n     */\n    function _updateCursorInfo(event, editor) {\n        editor = editor || EditorManager.getActiveEditor();\n\n        // compute columns, account for tab size\n        var cursor = editor.getCursorPos(true);\n\n        var cursorStr = StringUtils.format(Strings.STATUSBAR_CURSOR_POSITION, cursor.line + 1, cursor.ch + 1);\n\n        var sels = editor.getSelections(),\n            selStr = \"\";\n\n        if (sels.length > 1) {\n            //Send analytics data for multicursor use\n            Metrics.countEvent(\n                Metrics.EVENT_TYPE.EDITOR,\n                \"multiCursor\",\n                \"usage\"\n            );\n            selStr = StringUtils.format(Strings.STATUSBAR_SELECTION_MULTIPLE, sels.length);\n        } else if (editor.hasSelection()) {\n            var sel = sels[0];\n            if (sel.start.line !== sel.end.line) {\n                var lines = sel.end.line - sel.start.line + 1;\n                if (sel.end.ch === 0) {\n                    lines--;  // end line is exclusive if ch is 0, inclusive otherwise\n                }\n                selStr = _formatCountable(lines, Strings.STATUSBAR_SELECTION_LINE_SINGULAR, Strings.STATUSBAR_SELECTION_LINE_PLURAL);\n            } else {\n                var cols = editor.getColOffset(sel.end) - editor.getColOffset(sel.start);  // end ch is exclusive always\n                selStr = _formatCountable(cols, Strings.STATUSBAR_SELECTION_CH_SINGULAR, Strings.STATUSBAR_SELECTION_CH_PLURAL);\n            }\n        }\n        $cursorInfo.text(cursorStr + selStr);\n    }\n\n    /**\n     * Change indent size\n     * @param {string} fullPath Path to file in current editor\n     * @param {string} value Size entered into status bar\n     */\n    function _changeIndentWidth(fullPath, value) {\n        $indentWidthLabel.removeClass(\"hidden\");\n        $indentWidthInput.addClass(\"hidden\");\n\n        // remove all event handlers from the input field\n        $indentWidthInput.off(\"blur keyup\");\n\n        // restore focus to the editor\n        MainViewManager.focusActivePane();\n\n        var valInt = parseInt(value, 10);\n        if (Editor.getUseTabChar(fullPath)) {\n            if (!Editor.setTabSize(valInt, fullPath)) {\n                return;     // validation failed\n            }\n        } else {\n            if (!Editor.setSpaceUnits(valInt, fullPath)) {\n                return;     // validation failed\n            }\n        }\n\n        // update indicator\n        _updateIndentSize(fullPath);\n\n        // column position may change when tab size changes\n        _updateCursorInfo();\n    }\n\n    /**\n     * Update insert/overwrite label\n     * @param {Event} event (unused)\n     * @param {Editor} editor Current editor\n     * @param {string} newstate New overwrite state\n     * @param {boolean=} doNotAnimate True if state should not be animated\n     */\n    function _updateOverwriteLabel(event, editor, newstate, doNotAnimate) {\n        if ($statusOverwrite.text() === (newstate ? Strings.STATUSBAR_OVERWRITE : Strings.STATUSBAR_INSERT)) {\n            // label already up-to-date\n            return;\n        }\n\n        $statusOverwrite.text(newstate ? Strings.STATUSBAR_OVERWRITE : Strings.STATUSBAR_INSERT);\n\n        if (!doNotAnimate) {\n            AnimationUtils.animateUsingClass($statusOverwrite[0], \"flash\", 1500);\n        }\n    }\n\n    /**\n     * Update insert/overwrite indicator\n     * @param {Event} event (unused)\n     */\n    function _updateEditorOverwriteMode(event) {\n        var editor = EditorManager.getActiveEditor(),\n            newstate = !editor._codeMirror.state.overwrite;\n\n        // update label with no transition\n        _updateOverwriteLabel(event, editor, newstate, true);\n        editor.toggleOverwrite(newstate);\n    }\n\n    /**\n     * Initialize insert/overwrite indicator\n     * @param {Editor} currentEditor Current editor\n     */\n    function _initOverwriteMode(currentEditor) {\n        currentEditor.toggleOverwrite($statusOverwrite.text() === Strings.STATUSBAR_OVERWRITE);\n        $statusOverwrite.attr(\"title\", Strings.STATUSBAR_INSOVR_TOOLTIP);\n    }\n\n    /**\n     * Handle active editor change event\n     * @param {Event} event (unused)\n     * @param {Editor} current Current editor\n     * @param {Editor} previous Previous editor\n     */\n    function _onActiveEditorChange(event, current, previous) {\n        if (previous) {\n            previous.off(\".statusbar\");\n            previous.document.off(\".statusbar\");\n            previous.document.releaseRef();\n        }\n\n        if (!current) {\n            StatusBar.hideAllPanes();\n        } else {\n            var fullPath = current.document.file.fullPath;\n            StatusBar.showAllPanes();\n\n            current.on(\"cursorActivity.statusbar\", _updateCursorInfo);\n            current.on(\"optionChange.statusbar\", function () {\n                _updateIndentType(fullPath);\n                _updateIndentSize(fullPath);\n            });\n            current.on(\"change.statusbar\", function () {\n                // async update to keep typing speed smooth\n                window.setTimeout(function () { _updateFileInfo(current); }, 0);\n            });\n            current.on(\"overwriteToggle.statusbar\", _updateOverwriteLabel);\n\n            current.document.addRef();\n            current.document.on(\"languageChanged.statusbar\", function () {\n                _updateLanguageInfo(current);\n            });\n\n            _updateCursorInfo(null, current);\n            _updateLanguageInfo(current);\n            _updateEncodingInfo(current);\n            _updateFileInfo(current);\n            _initOverwriteMode(current);\n            _updateIndentType(fullPath);\n            _updateIndentSize(fullPath);\n        }\n    }\n\n    /**\n     * Populate the languageSelect DropdownButton's menu with all registered Languages\n     */\n    function _populateLanguageDropdown() {\n        // Get all non-binary languages\n        var languages = _.values(LanguageManager.getLanguages()).filter(function (language) {\n            return !language.isBinary();\n        });\n\n        // sort dropdown alphabetically\n        languages.sort(function (a, b) {\n            return a.getName().toLowerCase().localeCompare(b.getName().toLowerCase());\n        });\n\n        languageSelect.items = languages;\n\n        // Add option to top of menu for persisting the override\n        languageSelect.items.unshift(\"---\");\n        languageSelect.items.unshift(LANGUAGE_SET_AS_DEFAULT);\n    }\n\n    /**\n     * Change the encoding and reload the current document.\n     * If passed then save the preferred encoding in state.\n     */\n    function _changeEncodingAndReloadDoc(document) {\n        var promise = document.reload();\n        promise.done(function (text, readTimestamp) {\n            encodingSelect.$button.text(document.file._encoding);\n            // Store the preferred encoding in the state\n            const encoding = PreferencesManager.getViewState(\"encoding\", PreferencesManager.STATE_PROJECT_CONTEXT);\n            encoding[document.file.fullPath] = document.file._encoding;\n            PreferencesManager.setViewState(\"encoding\", encoding, PreferencesManager.STATE_PROJECT_CONTEXT);\n        });\n        promise.fail(function (error) {\n            console.log(\"Error reloading contents of \" + document.file.fullPath, error);\n        });\n    }\n\n\n    /**\n     * Populate the encodingSelect DropdownButton's menu with all registered encodings\n     */\n    function _populateEncodingDropdown() {\n        encodingSelect.items = SupportedEncodings;\n    }\n\n    /**\n     * Initialize\n     */\n    function _init() {\n\n        $cursorInfo         = $(\"#status-cursor\");\n        $fileInfo           = $(\"#status-file\");\n        $indentType         = $(\"#indent-type\");\n        $indentWidthLabel   = $(\"#indent-width-label\");\n        $indentWidthInput   = $(\"#indent-width-input\");\n        $statusOverwrite    = $(\"#status-overwrite\");\n\n        languageSelect      = new DropdownButton.DropdownButton(\"\", [], function (item, index) {\n            var document = EditorManager.getActiveEditor().document,\n                defaultLang = LanguageManager.getLanguageForPath(document.file.fullPath, true);\n\n            if (item === LANGUAGE_SET_AS_DEFAULT) {\n                var label = _.escape(StringUtils.format(Strings.STATUSBAR_SET_DEFAULT_LANG, LanguageManager.getCompoundFileExtension(document.file.fullPath)));\n                return { html: label, enabled: document.getLanguage() !== defaultLang };\n            }\n\n            var html = _.escape(item.getName());\n\n            // Show indicators for currently selected & default languages for the current file\n            if (item === defaultLang) {\n                html += \" <span class='default-language'>\" + Strings.STATUSBAR_DEFAULT_LANG + \"</span>\";\n            }\n            if (item === document.getLanguage()) {\n                html = \"<span class='checked-language'></span>\" + html;\n            }\n            return html;\n        });\n\n        languageSelect.dropdownExtraClasses = \"dropdown-status-bar\";\n        languageSelect.$button.addClass(\"btn-status-bar\");\n        $(\"#status-language\").append(languageSelect.$button);\n        languageSelect.$button.attr(\"title\", Strings.STATUSBAR_LANG_TOOLTIP);\n\n\n        encodingSelect = new DropdownButton.DropdownButton(\"\", [], function (item, index) {\n            var document = EditorManager.getActiveEditor().document;\n            var html = _.escape(item);\n\n            // Show indicators for currently selected & default languages for the current file\n            if (item === \"utf8\") {\n                html += \" <span class='default-language'>\" + Strings.STATUSBAR_DEFAULT_LANG + \"</span>\";\n            }\n            if (item === document.file._encoding) {\n                html = \"<span class='checked-language'></span>\" + html;\n            }\n            return html;\n        });\n\n        encodingSelect.dropdownExtraClasses = \"dropdown-status-bar\";\n        encodingSelect.$button.addClass(\"btn-status-bar\");\n        $(\"#status-encoding\").append(encodingSelect.$button);\n        encodingSelect.$button.attr(\"title\", Strings.STATUSBAR_ENCODING_TOOLTIP);\n        let hideSpinner = PreferencesManager.getViewState(\"StatusBar.HideSpinner\");\n        if(hideSpinner){\n            $(\"#status-tasks .spinner\").addClass(\"hide-spinner\");\n        }\n\n        tasksSelect = new DropdownButton.DropdownButton(Strings.STATUSBAR_TASKS, [Strings.STATUSBAR_TASKS_HIDE_SPINNER], function (item, index) {\n            if (item === Strings.STATUSBAR_TASKS_HIDE_SPINNER) {\n                hideSpinner = PreferencesManager.getViewState(\"StatusBar.HideSpinner\");\n                if(hideSpinner){\n                    return  \"<span class='checked-spinner'></span>\" + item;\n                }\n                return item;\n            }\n            return TaskManager._renderItem(item, index);\n        });\n        TaskManager._setTaskSelect(tasksSelect);\n\n        tasksSelect.dropdownExtraClasses = \"dropdown-status-bar\";\n        tasksSelect.$button.addClass(\"btn-status-bar\");\n        $(\"#status-tasks\").append(tasksSelect.$button);\n        tasksSelect.$button.attr(\"title\", Strings.STATUSBAR_TASKS_TOOLTIP);\n        tasksSelect.on(\"select\", function (e, selection) {\n            if(selection === Strings.STATUSBAR_TASKS_HIDE_SPINNER){\n                hideSpinner = !PreferencesManager.getViewState(\"StatusBar.HideSpinner\");\n                PreferencesManager.setViewState(\"StatusBar.HideSpinner\", hideSpinner);\n                if(hideSpinner){\n                    $(\"#status-tasks .spinner\").addClass(\"hide-spinner\");\n                } else {\n                    $(\"#status-tasks .spinner\").removeClass(\"hide-spinner\");\n                }\n                return;\n            }\n            return TaskManager._onSelect(e, selection);\n        });\n        tasksSelect.on(DropdownButton.EVENT_DROPDOWN_SHOWN, (evt)=>{\n            return TaskManager._onDropdownShown(evt);\n        });\n\n        // indentation event handlers\n        $indentType.on(\"click\", _toggleIndentType);\n        $indentWidthLabel\n            .on(\"click\", function () {\n                // update the input value before displaying\n                var fullPath = EditorManager.getActiveEditor().document.file.fullPath;\n                $indentWidthInput.val(_getIndentSize(fullPath));\n\n                $indentWidthLabel.addClass(\"hidden\");\n                $indentWidthInput.removeClass(\"hidden\");\n                $indentWidthInput.focus();\n\n                $indentWidthInput\n                    .on(\"blur\", function () {\n                        _changeIndentWidth(fullPath, $indentWidthInput.val());\n                    })\n                    .on(\"keyup\", function (event) {\n                        if (event.keyCode === KeyEvent.DOM_VK_RETURN) {\n                            $indentWidthInput.blur();\n                        } else if (event.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n                            _changeIndentWidth(fullPath, false);\n                        }\n                    });\n            });\n\n        $indentWidthInput.focus(function () { $indentWidthInput.select(); });\n\n        // Language select change handler\n        languageSelect.on(\"select\", function (e, lang) {\n            var document = EditorManager.getActiveEditor().document,\n                fullPath = document.file.fullPath;\n\n            var fileType = (document.file instanceof InMemoryFile) ? \"newFile\" : \"existingFile\",\n                filelanguageName = lang ? lang._name : \"\";\n\n            Metrics.countEvent(\n                Metrics.EVENT_TYPE.EDITOR,\n                \"languageChange\",\n                `${filelanguageName.toLowerCase()}-${fileType}`\n            );\n\n            if (lang === LANGUAGE_SET_AS_DEFAULT) {\n                // Set file's current language in preferences as a file extension override (only enabled if not default already)\n                var fileExtensionMap = PreferencesManager.get(\"language.fileExtensions\");\n                fileExtensionMap[LanguageManager.getCompoundFileExtension(fullPath)] = document.getLanguage().getId();\n                PreferencesManager.set(\"language.fileExtensions\", fileExtensionMap);\n\n            } else {\n                // Set selected language as a path override for just this one file (not persisted)\n                var defaultLang = LanguageManager.getLanguageForPath(fullPath, true);\n                // if default language selected, pass null to clear the override\n                LanguageManager.setLanguageOverrideForPath(fullPath, lang === defaultLang ? null : lang);\n            }\n        });\n\n        // Encoding select change handler\n        encodingSelect.on(\"select\", function (e, encoding) {\n            var document = EditorManager.getActiveEditor().document,\n                originalPath = document.file.fullPath,\n                originalEncoding = document.file._encoding;\n\n            document.file._encoding = encoding;\n            if (!(document.file instanceof InMemoryFile) && document.isDirty) {\n                CommandManager.execute(Commands.FILE_SAVE_AS, {doc: document}).done(function () {\n                    var doc = DocumentManager.getCurrentDocument();\n                    if (originalPath === doc.file.fullPath) {\n                        _changeEncodingAndReloadDoc(doc);\n                    } else {\n                        document.file._encoding = originalEncoding;\n                    }\n                }).fail(function () {\n                    document.file._encoding = originalEncoding;\n                });\n            } else if (document.file instanceof InMemoryFile) {\n                encodingSelect.$button.text(encoding);\n            } else if (!document.isDirty) {\n                _changeEncodingAndReloadDoc(document);\n            }\n        });\n\n        $statusOverwrite.on(\"click\", _updateEditorOverwriteMode);\n    }\n\n    // Initialize: status bar focused listener\n    EditorManager.on(\"activeEditorChange\", _onActiveEditorChange);\n\n    function _checkFileExistance(filePath, index, encoding) {\n        var deferred = new $.Deferred(),\n            fileEntry = FileSystem.getFileForPath(filePath);\n\n        fileEntry.exists(function (err, exists) {\n            if (!err && exists) {\n                deferred.resolve();\n            } else {\n                delete encoding[filePath];\n                deferred.reject();\n            }\n        });\n\n        return deferred.promise();\n    }\n\n    ProjectManager.on(\"projectOpen\", function () {\n        let encoding = PreferencesManager.getViewState(\"encoding\", PreferencesManager.STATE_PROJECT_CONTEXT);\n        if (!encoding) {\n            encoding = {};\n            PreferencesManager.setViewState(\"encoding\", encoding, PreferencesManager.STATE_PROJECT_CONTEXT);\n        }\n        Async.doSequentially(Object.keys(encoding), function (filePath, index) {\n            return _checkFileExistance(filePath, index, encoding);\n        }, false)\n            .always(function () {\n                PreferencesManager.setViewState(\"encoding\", encoding, PreferencesManager.STATE_PROJECT_CONTEXT);\n            });\n    });\n\n    AppInit.htmlReady(_init);\n    AppInit.appReady(function () {\n        // Populate language switcher with all languages after startup; update it later if this set changes\n        _populateLanguageDropdown();\n        _populateEncodingDropdown();\n        LanguageManager.on(\"languageAdded languageModified\", _populateLanguageDropdown);\n        _onActiveEditorChange(null, EditorManager.getActiveEditor(), null);\n        StatusBar.show();\n    });\n});\n"],"file":"EditorStatusBar.js"}