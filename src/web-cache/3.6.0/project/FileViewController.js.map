{"version":3,"sources":["project/FileViewController.js"],"names":["define","require","exports","module","DocumentManager","EventDispatcher","MainViewManager","CommandManager","PerfUtils","Commands","DeprecationWarning","_curDocChangedDueToMe","WORKING_SET_VIEW","PROJECT_MANAGER","_fileSelectionFocus","_activatePane","paneId","setActivePaneId","focusActivePane","trigger","setFileViewFocus","fileSelectionFocus","console","error","openAndSelectDocument","fullPath","result","curDocChangedDueToMe","currentPath","_getDerivedPaneContext","_secondPaneContext","window","event","ctrlKey","metaKey","altKey","SECOND_PANE","_firstPaneContext","FIRST_PANE","ACTIVE_PANE","getCurrentlyViewedPath","$","Deferred","resolve","promise","execute","FILE_OPEN","always","openFileAndAddToWorkingSet","CMD_ADD_TO_WORKINGSET_AND_OPEN","done","file","fail","err","reject","openWithExternalApplication","addToWorkingSetAndSelect","deprecationWarning","doc","getOpenDocumentForPath","getFileSelectionFocus","on_duringInit","addedFile","perfTimerName","markStart","findInWorkingSet","addMeasurement","makeEventDispatcher"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Responsible for coordinating file selection between views by permitting only one view\n * to show the current file selection at a time. Currently, only WorkingSetView and\n * ProjectManager can show file selection. In general the WorkingSetView takes higher\n * priority until the user selects a file in the ProjectManager.\n *\n * Events dispatched:\n * - documentSelectionFocusChange - indicates a document change has caused the focus to\n *   change between the working set and file tree.\n *\n * - fileViewFocusChange - indicates the selection focus has changed between the working\n *   set and the project tree, but the document selection has NOT changed\n *\n * Current file selection rules in views:\n * - select a file in WorkingSetView > select in WorkingSetView\n * - add a file to the WorkingSetView > select in WorkingSetView\n * - select a file in ProjectManager > select in ProjectManager\n * - open a file from places other than the WorkingSetView or ProjectManager >\n *       select file in WorkignSetView if its in the working set, otherwise select in ProjectManager\n */\n\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var DocumentManager     = require(\"document/DocumentManager\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        MainViewManager     = require(\"view/MainViewManager\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        PerfUtils           = require(\"utils/PerfUtils\"),\n        Commands            = require(\"command/Commands\"),\n        DeprecationWarning  = require(\"utils/DeprecationWarning\");\n\n    /**\n     * Tracks whether a \"currentFileChange\" notification occured due to a call to\n     * openAndSelectDocument.\n     * @see #openAndSelectDocument\n     * @private\n     */\n    var _curDocChangedDueToMe = false;\n    var WORKING_SET_VIEW = \"WorkingSetView\";\n    var PROJECT_MANAGER = \"ProjectManager\";\n\n    /**\n     * @private\n     * @see #getFileSelectionFocus\n     */\n    var _fileSelectionFocus = PROJECT_MANAGER;\n\n    // Due to circular dependencies, not safe to call on() directly\n    /**\n     * Change the doc selection to the working set when ever a new file is added to the working set\n     */\n    EventDispatcher.on_duringInit(MainViewManager, \"workingSetAdd\", function (event, addedFile) {\n        _fileSelectionFocus = WORKING_SET_VIEW;\n        exports.trigger(\"documentSelectionFocusChange\");\n    });\n\n    /**\n     * Update the file selection focus whenever the contents of the editor area change\n     */\n    EventDispatcher.on_duringInit(MainViewManager, \"currentFileChange\", function (event, file, paneId) {\n        var perfTimerName;\n        if (!_curDocChangedDueToMe) {\n            // The the cause of the doc change was not openAndSelectDocument, so pick the best fileSelectionFocus\n            perfTimerName = PerfUtils.markStart(\"FileViewController._oncurrentFileChange():\\t\" + (file ? (file.fullPath) : \"(no open file)\"));\n            if (file && MainViewManager.findInWorkingSet(paneId,  file.fullPath) !== -1) {\n                _fileSelectionFocus = WORKING_SET_VIEW;\n            } else {\n                _fileSelectionFocus = PROJECT_MANAGER;\n            }\n        }\n\n        exports.trigger(\"documentSelectionFocusChange\");\n\n        if (!_curDocChangedDueToMe) {\n            PerfUtils.addMeasurement(perfTimerName);\n        }\n    });\n\n    /**\n     * @private\n     * @param {string=} paneId - the Pane to activate\n     */\n    function _activatePane(paneId) {\n        if (paneId) {\n            MainViewManager.setActivePaneId(paneId);\n        } else {\n            MainViewManager.focusActivePane();\n        }\n        // If fullPath corresonds to the current doc being viewed then opening the file won't\n        // trigger a currentFileChange event, so we need to trigger a documentSelectionFocusChange\n        // in this case to signify the selection focus has changed even though the current document has not.\n        exports.trigger(\"documentSelectionFocusChange\");\n    }\n\n    /**\n     * Modifies the selection focus in the project side bar. A file can either be selected\n     * in the working set (the open files) or in the file tree, but not both.\n     * @param {String} fileSelectionFocus - either PROJECT_MANAGER or WORKING_SET_VIEW\n     */\n    function setFileViewFocus(fileSelectionFocus) {\n        if (fileSelectionFocus !== PROJECT_MANAGER && fileSelectionFocus !== WORKING_SET_VIEW) {\n            console.error(\"Bad parameter passed to FileViewController.setFileViewFocus\");\n            return;\n        }\n\n        if (_fileSelectionFocus !== fileSelectionFocus) {\n            _fileSelectionFocus = fileSelectionFocus;\n            exports.trigger(\"fileViewFocusChange\");\n        }\n    }\n\n    /**\n     * Opens a document if it's not open and selects the file in the UI corresponding to\n     * fileSelectionFocus\n     * @param {!fullPath} fullPath - full path of the document to open\n     * @param {string} fileSelectionFocus - (WORKING_SET_VIEW || PROJECT_MANAGER)\n     * @param {string} paneId - pane in which to open the document\n     * @return {$.Promise}\n     */\n    function openAndSelectDocument(fullPath, fileSelectionFocus, paneId) {\n        var result,\n            curDocChangedDueToMe = _curDocChangedDueToMe;\n\n        function _getDerivedPaneContext() {\n\n            function _secondPaneContext() {\n                return (window.event.ctrlKey || window.event.metaKey) && window.event.altKey ? MainViewManager.SECOND_PANE : null;\n            }\n\n            function _firstPaneContext() {\n                return (window.event.ctrlKey || window.event.metaKey) ? MainViewManager.FIRST_PANE : null;\n            }\n\n            return window.event && (_secondPaneContext() || _firstPaneContext());\n        }\n\n        if (fileSelectionFocus !== PROJECT_MANAGER && fileSelectionFocus !== WORKING_SET_VIEW) {\n            console.error(\"Bad parameter passed to FileViewController.openAndSelectDocument\");\n            return;\n        }\n\n        // Opening files are asynchronous and we want to know when this function caused a file\n        // to open so that _fileSelectionFocus is set appropriatly. _curDocChangedDueToMe is set here\n        // and checked in the currentFileChange handler\n        _curDocChangedDueToMe = true;\n\n        _fileSelectionFocus = fileSelectionFocus;\n\n\n        paneId = (paneId || _getDerivedPaneContext() || MainViewManager.ACTIVE_PANE);\n\n        // If fullPath corresonds to the current doc being viewed then opening the file won't\n        // trigger a currentFileChange event, so we need to trigger a documentSelectionFocusChange\n        // in this case to signify the selection focus has changed even though the current document has not.\n        var currentPath = MainViewManager.getCurrentlyViewedPath(paneId);\n        if (currentPath === fullPath) {\n            _activatePane(paneId);\n            result = (new $.Deferred()).resolve().promise();\n        } else {\n            result = CommandManager.execute(Commands.FILE_OPEN, {fullPath: fullPath,\n                paneId: paneId});\n        }\n\n        // clear after notification is done\n        result.always(function () {\n            _curDocChangedDueToMe = curDocChangedDueToMe;\n        });\n\n        return result;\n    }\n\n    /**\n     * Opens the specified document if it's not already open, adds it to the working set,\n     * and selects it in the WorkingSetView\n     * @param {!fullPath}\n     * @param {string=} paneId - Pane in which to add the view.  If omitted, the command default is to use the ACTIVE_PANE\n     * @return {!$.Promise}\n     */\n    function openFileAndAddToWorkingSet(fullPath, paneId) {\n        var result = new $.Deferred(),\n            promise = CommandManager.execute(Commands.CMD_ADD_TO_WORKINGSET_AND_OPEN, {fullPath: fullPath,\n                paneId: paneId});\n\n        // This properly handles sending the right nofications in cases where the document\n        // is already the current one. In that case we will want to notify with\n        // documentSelectionFocusChange so the views change their selection\n        promise.done(function (file) {\n            // CMD_ADD_TO_WORKINGSET_AND_OPEN command sets the current document. Update the\n            // selection focus only if doc is not null. When double-clicking on an\n            // image file, we get a null doc here but we still want to keep _fileSelectionFocus\n            // as PROJECT_MANAGER. Regardless of doc is null or not, call _activatePane\n            // to trigger documentSelectionFocusChange event.\n            _fileSelectionFocus = WORKING_SET_VIEW;\n            _activatePane(paneId);\n\n            result.resolve(file);\n        }).fail(function (err) {\n            result.reject(err);\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Opens the specified document with its associated external editor,\n     */\n    function openWithExternalApplication(fullPath) {\n        exports.trigger(\"openWithExternalApplication\", fullPath);\n    }\n\n    /**\n     * Opens the specified document if it's not already open, adds it to the working set,\n     * and selects it in the WorkingSetView\n     * @deprecated use FileViewController.openFileAndAddToWorkingSet() instead\n     * @param {!fullPath}\n     * @return {!$.Promise}\n     */\n    function addToWorkingSetAndSelect(fullPath) {\n        DeprecationWarning.deprecationWarning(\"Use FileViewController.openFileAndAddToWorkingSet() instead of FileViewController.addToWorkingSetAndSelect().\", true);\n        var result = new $.Deferred();\n        openFileAndAddToWorkingSet(fullPath)\n            .done(function (file) {\n                var doc;\n\n                if (file) {\n                    doc = DocumentManager.getOpenDocumentForPath(file.fullPath);\n                }\n\n                result.resolve(doc);\n            })\n            .fail(function (err) {\n                result.reject(err);\n            });\n        return result.promise();\n    }\n\n\n\n    /**\n     * returns either WORKING_SET_VIEW or PROJECT_MANAGER\n     * @return {!String}\n     */\n    function getFileSelectionFocus() {\n        return _fileSelectionFocus;\n    }\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // Deprecated\n    exports.addToWorkingSetAndSelect = addToWorkingSetAndSelect;\n\n    // Define public API\n    exports.getFileSelectionFocus = getFileSelectionFocus;\n    exports.openAndSelectDocument = openAndSelectDocument;\n    exports.openFileAndAddToWorkingSet = openFileAndAddToWorkingSet;\n    exports.setFileViewFocus = setFileViewFocus;\n    exports.WORKING_SET_VIEW = WORKING_SET_VIEW;\n    exports.PROJECT_MANAGER = PROJECT_MANAGER;\n    exports.openWithExternalApplication = openWithExternalApplication;\n});\n"],"file":"FileViewController.js"}