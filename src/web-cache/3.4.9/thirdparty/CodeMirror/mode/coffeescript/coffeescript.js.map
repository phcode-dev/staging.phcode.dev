{"version":3,"sources":["thirdparty/CodeMirror/mode/coffeescript/coffeescript.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","conf","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","operators","delimiters","identifiers","atProp","wordOperators","indentKeywords","commonKeywords","keywords","concat","stringPrefixes","regexPrefixes","commonConstants","constants","external","tokenBase","stream","state","sol","scope","align","scopeOffset","offset","eatSpace","lineOffset","indentation","type","dedent","ch","peek","match","skipToEnd","tokenize","longComment","floatLiteral","backUp","intLiteral","tokenFactory","current","prop","next","delimiter","singleline","outclass","eol","eatWhile","eat","singleLineStringErrors","indent","alignOffset","prev","indentUnit","column","length","_indent","matched","tokenLexer","style","delimiter_index","indexOf","slice","exec","startState","basecolumn","token","fillAlign","text","closer","charAt","closes","lineComment","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Link to the project's GitHub page:\n * https://github.com/pickhardt/coffeescript-codemirror-mode\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"coffeescript\", function(conf, parserConf) {\n  var ERRORCLASS = \"error\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\n  var delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\n  var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\n  var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\",\n                                  \"is\", \"isnt\", \"in\",\n                                  \"instanceof\", \"typeof\"]);\n  var indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\",\n                        \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\n  var commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\",\n                        \"do\", \"in\", \"of\", \"new\", \"return\", \"then\",\n                        \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\n\n  var keywords = wordRegexp(indentKeywords.concat(commonKeywords));\n\n  indentKeywords = wordRegexp(indentKeywords);\n\n\n  var stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\n  var regexPrefixes = /^(\\/{3}|\\/)/;\n  var commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\n  var constants = wordRegexp(commonConstants);\n\n  // Tokenizers\n  function tokenBase(stream, state) {\n    // Handle scope changes\n    if (stream.sol()) {\n      if (state.scope.align === null) state.scope.align = false;\n      var scopeOffset = state.scope.offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\n          return \"indent\";\n        } else if (lineOffset < scopeOffset) {\n          return \"dedent\";\n        }\n        return null;\n      } else {\n        if (scopeOffset > 0) {\n          dedent(stream, state);\n        }\n      }\n    }\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var ch = stream.peek();\n\n    // Handle docco title comment (single line)\n    if (stream.match(\"####\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle multi line comments\n    if (stream.match(\"###\")) {\n      state.tokenize = longComment;\n      return state.tokenize(stream, state);\n    }\n\n    // Single line comment\n    if (ch === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle number literals\n    if (stream.match(/^-?[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^-?\\d+\\.\\d*/)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^-?\\.\\d+/)) {\n        floatLiteral = true;\n      }\n\n      if (floatLiteral) {\n        // prevent from getting extra . on 1..\n        if (stream.peek() == \".\"){\n          stream.backUp(1);\n        }\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^-?0x[0-9a-f]+/i)) {\n        intLiteral = true;\n      }\n      // Decimal\n      if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^-?0(?![\\dx])/i)) {\n        intLiteral = true;\n      }\n      if (intLiteral) {\n        return \"number\";\n      }\n    }\n\n    // Handle strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenFactory(stream.current(), false, \"string\");\n      return state.tokenize(stream, state);\n    }\n    // Handle regex literals\n    if (stream.match(regexPrefixes)) {\n      if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) { // prevent highlight of division\n        state.tokenize = tokenFactory(stream.current(), true, \"string-2\");\n        return state.tokenize(stream, state);\n      } else {\n        stream.backUp(1);\n      }\n    }\n\n\n\n    // Handle operators and delimiters\n    if (stream.match(operators) || stream.match(wordOperators)) {\n      return \"operator\";\n    }\n    if (stream.match(delimiters)) {\n      return \"punctuation\";\n    }\n\n    if (stream.match(constants)) {\n      return \"atom\";\n    }\n\n    if (stream.match(atProp) || state.prop && stream.match(identifiers)) {\n      return \"property\";\n    }\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(identifiers)) {\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return ERRORCLASS;\n  }\n\n  function tokenFactory(delimiter, singleline, outclass) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\/\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) {\n            return outclass;\n          }\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          return outclass;\n        } else {\n          stream.eat(/['\"\\/]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) {\n          outclass = ERRORCLASS;\n        } else {\n          state.tokenize = tokenBase;\n        }\n      }\n      return outclass;\n    };\n  }\n\n  function longComment(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^#]/);\n      if (stream.match(\"###\")) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      stream.eatWhile(\"#\");\n    }\n    return \"comment\";\n  }\n\n  function indent(stream, state, type) {\n    type = type || \"coffee\";\n    var offset = 0, align = false, alignOffset = null;\n    for (var scope = state.scope; scope; scope = scope.prev) {\n      if (scope.type === \"coffee\" || scope.type == \"}\") {\n        offset = scope.offset + conf.indentUnit;\n        break;\n      }\n    }\n    if (type !== \"coffee\") {\n      align = null;\n      alignOffset = stream.column() + stream.current().length;\n    } else if (state.scope.align) {\n      state.scope.align = false;\n    }\n    state.scope = {\n      offset: offset,\n      type: type,\n      prev: state.scope,\n      align: align,\n      alignOffset: alignOffset\n    };\n  }\n\n  function dedent(stream, state) {\n    if (!state.scope.prev) return;\n    if (state.scope.type === \"coffee\") {\n      var _indent = stream.indentation();\n      var matched = false;\n      for (var scope = state.scope; scope; scope = scope.prev) {\n        if (_indent === scope.offset) {\n          matched = true;\n          break;\n        }\n      }\n      if (!matched) {\n        return true;\n      }\n      while (state.scope.prev && state.scope.offset !== _indent) {\n        state.scope = state.scope.prev;\n      }\n      return false;\n    } else {\n      state.scope = state.scope.prev;\n      return false;\n    }\n  }\n\n  function tokenLexer(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle scope changes.\n    if (current === \"return\") {\n      state.dedent = true;\n    }\n    if (((current === \"->\" || current === \"=>\") && stream.eol())\n        || style === \"indent\") {\n      indent(stream, state);\n    }\n    var delimiter_index = \"[({\".indexOf(current);\n    if (delimiter_index !== -1) {\n      indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n    }\n    if (indentKeywords.exec(current)){\n      indent(stream, state);\n    }\n    if (current == \"then\"){\n      dedent(stream, state);\n    }\n\n\n    if (style === \"dedent\") {\n      if (dedent(stream, state)) {\n        return ERRORCLASS;\n      }\n    }\n    delimiter_index = \"])}\".indexOf(current);\n    if (delimiter_index !== -1) {\n      while (state.scope.type == \"coffee\" && state.scope.prev)\n        state.scope = state.scope.prev;\n      if (state.scope.type == current)\n        state.scope = state.scope.prev;\n    }\n    if (state.dedent && stream.eol()) {\n      if (state.scope.type == \"coffee\" && state.scope.prev)\n        state.scope = state.scope.prev;\n      state.dedent = false;\n    }\n\n    return style;\n  }\n\n  var external = {\n    startState: function(basecolumn) {\n      return {\n        tokenize: tokenBase,\n        scope: {offset:basecolumn || 0, type:\"coffee\", prev: null, align: false},\n        prop: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var fillAlign = state.scope.align === null && state.scope;\n      if (fillAlign && stream.sol()) fillAlign.align = false;\n\n      var style = tokenLexer(stream, state);\n      if (style && style != \"comment\") {\n        if (fillAlign) fillAlign.align = true;\n        state.prop = style == \"punctuation\" && stream.current() == \".\"\n      }\n\n      return style;\n    },\n\n    indent: function(state, text) {\n      if (state.tokenize != tokenBase) return 0;\n      var scope = state.scope;\n      var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\n      if (closer) while (scope.type == \"coffee\" && scope.prev) scope = scope.prev;\n      var closes = closer && scope.type === text.charAt(0);\n      if (scope.align)\n        return scope.alignOffset - (closes ? 1 : 0);\n      else\n        return (closes ? scope.prev : scope).offset;\n    },\n\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n  return external;\n});\n\n// IANA registered media type\n// https://www.iana.org/assignments/media-types/\nCodeMirror.defineMIME(\"application/vnd.coffeescript\", \"coffeescript\");\n\nCodeMirror.defineMIME(\"text/x-coffeescript\", \"coffeescript\");\nCodeMirror.defineMIME(\"text/coffeescript\", \"coffeescript\");\n\n});\n"],"file":"coffeescript.js"}