{"version":3,"sources":["thirdparty/CodeMirror/mode/tcl/tcl.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inParams","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","tokenString","quote","escaped","end","maybeEnd","startState","token","eatSpace","lineComment","defineMIME"],"mappings":"CAKA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,MAAO,WAC3B,SAASC,WAAWC,KAElB,IADA,IAAIC,IAAM,GAAIC,MAAQF,IAAIG,MAAM,KACvBC,EAAI,EAAGA,EAAIF,MAAMG,SAAUD,EAAGH,IAAIC,MAAME,KAAM,EACvD,OAAOH,IAET,IAAIK,SAAWP,WAAW,+zBAapBQ,UAAYR,WAAW,kEACvBS,eAAiB,qBACrB,SAASC,MAAMC,OAAQC,MAAOC,GAE5B,OADAD,MAAME,SAAWD,EACVA,EAAEF,OAAQC,OAEnB,SAASG,UAAUJ,OAAQC,OACzB,IAAII,aAAeJ,MAAMI,aACzBJ,MAAMI,cAAe,EACrB,IAAIC,GAAKN,OAAOO,OAChB,GAAW,KAAND,IAAmB,KAANA,KAAcL,MAAMO,SAE/B,CAAA,GAAI,mBAAmBC,KAAKH,IAG/B,MAFQ,KAANA,IAAaD,aAAcJ,MAAMO,UAAW,EACjC,KAANF,KAAWL,MAAMO,UAAW,GAC5B,KACJ,GAAI,KAAKC,KAAKH,IAEnB,OADAN,OAAOU,SAAS,UACT,SACF,GAAU,KAANJ,GACT,OAAIN,OAAOW,IAAI,KACNZ,MAAMC,OAAQC,MAAOW,cACpB,KAANN,IAAaN,OAAOa,MAAM,YACrBd,MAAMC,OAAQC,MAAOa,gBAC9Bd,OAAOe,YACA,WACF,GAAU,KAANT,GAET,OADAN,OAAOgB,OAAO,KACP,UACF,GAAU,KAANV,GAIT,OAHAN,OAAOU,SAAS,qBAChBV,OAAOU,SAAS,KAChBT,MAAMI,cAAe,EACd,UACF,GAAIP,eAAeW,KAAKH,IAE7B,OADAN,OAAOU,SAASZ,gBACT,UAEPE,OAAOU,SAAS,wBAChB,IAAIO,KAAOjB,OAAOkB,UAAUC,cAC5B,OAAIvB,UAAYA,SAASwB,qBAAqBH,MACrC,UACLpB,WAAaA,UAAUuB,qBAAqBH,OAC9ChB,MAAMI,cAAe,EACd,WAEF,KAnCP,OAAON,MAAMC,OAAQC,MAAOoB,YAAYf,KAsC5C,SAASe,YAAYC,OACnB,OAAO,SAAStB,OAAQC,OAExB,IADA,IAAIsB,SAAU,EAAOhB,KAAMiB,KAAM,EACA,OAAzBjB,KAAOP,OAAOO,SAAiB,CACrC,GAAIA,MAAQe,QAAUC,QAAS,CAC7BC,KAAM,EACN,MAEFD,SAAWA,SAAmB,MAARhB,KAGtB,OADEiB,MAAKvB,MAAME,SAAWC,WACjB,UAGX,SAASQ,aAAaZ,OAAQC,OAE5B,IADA,IAAIwB,UAAW,EAAOnB,GACfA,GAAKN,OAAOO,QAAQ,CACzB,GAAU,KAAND,IAAamB,SAAU,CACzBxB,MAAME,SAAWC,UACjB,MAEFqB,SAAkB,KAANnB,GAEd,MAAO,UAET,SAASQ,cAAcd,OAAQC,OAE7B,IADA,IAAIwB,SAAW,EAAGnB,GACXA,GAAKN,OAAOO,QAAQ,CACzB,GAAU,KAAND,IAAyB,GAAZmB,SAAe,CAC9BxB,MAAME,SAAWC,UACjB,MAEQ,KAANE,GACFmB,WACa,KAANnB,KACPmB,SAAW,GAEf,MAAO,OAET,MAAO,CACLC,WAAY,WACV,MAAO,CACLvB,SAAUC,UACVC,cAAc,EACdG,UAAU,IAGdmB,MAAO,SAAS3B,OAAQC,OACtB,OAAID,OAAO4B,WAAmB,KACvB3B,MAAME,SAASH,OAAQC,QAEhC4B,YAAa,OAGnB1C,WAAW2C,WAAW,aAAc","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"tcl\", function() {\n  function parseWords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n        \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n        \"binary break catch cd close concat continue dde eof encoding error \" +\n        \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n        \"filename flush for foreach format gets glob global history http if \" +\n        \"incr info interp join lappend lindex linsert list llength load lrange \" +\n        \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n        \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n        \"registry regsub rename resource return scan seek set socket source split \" +\n        \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n        \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n        \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n    \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n      if ((ch == '\"' || ch == \"'\") && state.inParams) {\n        return chain(stream, state, tokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;\n        else if (ch == \")\") state.inParams = false;\n          return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"#\") {\n        if (stream.eat(\"*\"))\n          return chain(stream, state, tokenComment);\n        if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n          return chain(stream, state, tokenUnparsed);\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word))\n          return \"keyword\";\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n        return null;\n      }\n    }\n    function tokenString(quote) {\n      return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        if (ch == \"]\")\n          maybeEnd++;\n        else if (ch != \" \")\n          maybeEnd = 0;\n      }\n      return \"meta\";\n    }\n    return {\n      startState: function() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      lineComment: \"#\"\n    };\n});\nCodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n\n});\n"],"file":"tcl.js"}