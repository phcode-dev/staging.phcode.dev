{"version":3,"sources":["thirdparty/CodeMirror/mode/groovy/groovy.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","words","str","obj","split","i","length","keywords","blockKeywords","standaloneKeywords","atoms","curPunc","tokenBase","stream","state","ch","next","startString","test","eatWhile","eat","tokenize","push","tokenComment","skipToEnd","expectExpression","lastToken","cur","current","propertyIsEnumerable","quote","tripleQuoted","t","escaped","end","match","tokenBaseUntilBrace","tokenVariableDeref","pop","depth","peek","isBase","maybeEnd","last","newline","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","startState","basecolumn","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","Pass","firstChar","charAt","closing","electricChars","closeBrackets","triples","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,SAAU,SAASC,QACvC,SAASC,MAAMC,KAEb,IADA,IAAIC,IAAM,GAAIF,MAAQC,IAAIE,MAAM,KACvBC,EAAI,EAAGA,EAAIJ,MAAMK,SAAUD,EAAGF,IAAIF,MAAMI,KAAM,EACvD,OAAOF,IAET,IAAII,SAAWN,MACb,4WAKEO,cAAgBP,MAAM,gFACtBQ,mBAAqBR,MAAM,yBAC3BS,MAAQT,MAAM,wBAEdU,QACJ,SAASC,UAAUC,OAAQC,OACzB,IAAIC,GAAKF,OAAOG,OAChB,GAAU,KAAND,IAAmB,KAANA,GACf,OAAOE,YAAYF,GAAIF,OAAQC,OAEjC,GAAI,qBAAqBI,KAAKH,IAE5B,OADAJ,QAAUI,GACH,KAET,GAAI,KAAKG,KAAKH,IAGZ,OAFAF,OAAOM,SAAS,UACZN,OAAOO,IAAI,QAASP,OAAOO,IAAI,QAASP,OAAOM,SAAS,OACrD,SAET,GAAU,KAANJ,GAAW,CACb,GAAIF,OAAOO,IAAI,KAEb,OADAN,MAAMO,SAASC,KAAKC,cACbA,aAAaV,OAAQC,OAE9B,GAAID,OAAOO,IAAI,KAEb,OADAP,OAAOW,YACA,UAET,GAAIC,iBAAiBX,MAAMY,WAAW,GACpC,OAAOT,YAAYF,GAAIF,OAAQC,OAGnC,GAAU,KAANC,IAAaF,OAAOO,IAAI,KAE1B,OADAT,QAAU,KACH,KAET,GAAI,oBAAoBO,KAAKH,IAE3B,OADAF,OAAOM,SAAS,iBACT,WAGT,GADAN,OAAOM,SAAS,WACN,KAANJ,GAA2C,OAA9BF,OAAOM,SAAS,aAAqB,OACtD,GAAuB,KAAnBL,MAAMY,UAAkB,MAAO,WACnC,GAAIb,OAAOO,IAAI,KAA+B,OAAvBT,QAAU,YAAoB,WACrD,IAAIgB,IAAMd,OAAOe,UACjB,OAAIlB,MAAMmB,qBAAqBF,KAAe,OAC1CpB,SAASsB,qBAAqBF,MAC5BnB,cAAcqB,qBAAqBF,KAAMhB,QAAU,eAC9CF,mBAAmBoB,qBAAqBF,OAAMhB,QAAU,cAC1D,WAEF,WAIT,SAASM,YAAYa,MAAOjB,OAAQC,OAClC,IAAIiB,cAAe,EACnB,GAAa,KAATD,OAAgBjB,OAAOO,IAAIU,OAAQ,CACrC,IAAIjB,OAAOO,IAAIU,OACV,MAAO,SADWC,cAAe,EAGxC,SAASC,EAAEnB,OAAQC,OAEjB,IADA,IAAImB,SAAU,EAAOjB,KAAMkB,KAAOH,aACD,OAAzBf,KAAOH,OAAOG,SAAiB,CACrC,GAAIA,MAAQc,QAAUG,QAAS,CAC7B,IAAKF,aAAgB,MACrB,GAAIlB,OAAOsB,MAAML,MAAQA,OAAQ,CAAEI,KAAM,EAAM,OAEjD,GAAa,KAATJ,OAAwB,KAARd,OAAgBiB,QAAS,CAC3C,GAAIpB,OAAOO,IAAI,KAEb,OADAN,MAAMO,SAASC,KAAKc,uBACb,SACF,GAAIvB,OAAOsB,MAAM,OAAO,GAE7B,OADArB,MAAMO,SAASC,KAAKe,oBACb,SAGXJ,SAAWA,SAAmB,MAARjB,KAGxB,OADIkB,KAAKpB,MAAMO,SAASiB,MACjB,SAGT,OADAxB,MAAMO,SAASC,KAAKU,GACbA,EAAEnB,OAAQC,OAGnB,SAASsB,sBACP,IAAIG,MAAQ,EACZ,SAASP,EAAEnB,OAAQC,OACjB,GAAqB,KAAjBD,OAAO2B,QAET,GAAa,KADbD,MAGE,OADAzB,MAAMO,SAASiB,MACRxB,MAAMO,SAASP,MAAMO,SAASf,OAAO,GAAGO,OAAQC,WAE/B,KAAjBD,OAAO2B,QAChBD,QAEF,OAAO3B,UAAUC,OAAQC,OAG3B,OADAkB,EAAES,QAAS,EACJT,EAGT,SAASK,mBAAmBxB,OAAQC,OAClC,IAAIE,KAAOH,OAAOsB,MAAM,kBACxB,OAAKnB,KAIa,KAAXA,KAAK,GAAY,KAAO,YAH7BF,MAAMO,SAASiB,MACRxB,MAAMO,SAASP,MAAMO,SAASf,OAAO,GAAGO,OAAQC,QAK3D,SAASS,aAAaV,OAAQC,OAE5B,IADA,IAAI4B,UAAW,EAAO3B,GACfA,GAAKF,OAAOG,QAAQ,CACzB,GAAU,KAAND,IAAa2B,SAAU,CACzB5B,MAAMO,SAASiB,MACf,MAEFI,SAAkB,KAAN3B,GAEd,MAAO,UAGT,SAASU,iBAAiBkB,KAAMC,SAC9B,OAAQD,MAAgB,YAARA,MAA8B,MAARA,MAAgB,gBAAgBzB,KAAKyB,OACjE,gBAARA,MAAkC,WAARA,MAA6B,aAARA,MACtC,cAARA,OAAyBC,QAG9B,SAASC,QAAQC,SAAUC,OAAQC,KAAMC,MAAOC,MAC9CC,KAAKL,SAAWA,SAChBK,KAAKJ,OAASA,OACdI,KAAKH,KAAOA,KACZG,KAAKF,MAAQA,MACbE,KAAKD,KAAOA,KAEd,SAASE,YAAYtC,MAAOuC,IAAKL,MAC/B,OAAOlC,MAAMwC,QAAU,IAAIT,QAAQ/B,MAAMgC,SAAUO,IAAKL,KAAM,KAAMlC,MAAMwC,SAE5E,SAASC,WAAWzC,OAClB,IAAIkB,EAAIlB,MAAMwC,QAAQN,KAGtB,MAFS,KAALhB,GAAiB,KAALA,GAAiB,KAALA,IAC1BlB,MAAMgC,SAAWhC,MAAMwC,QAAQR,UAC1BhC,MAAMwC,QAAUxC,MAAMwC,QAAQJ,KAKvC,OAjGAtC,UAAU6B,QAAS,EAiGZ,CACLe,WAAY,SAASC,YACnB,MAAO,CACLpC,SAAU,CAACT,WACX0C,QAAS,IAAIT,SAASY,YAAc,GAAKzD,OAAO0D,WAAY,EAAG,OAAO,GACtEZ,SAAU,EACVa,aAAa,EACbjC,UAAW,OAIfkC,MAAO,SAAS/C,OAAQC,OACtB,IAAI+C,IAAM/C,MAAMwC,QAUhB,GATIzC,OAAOiD,QACQ,MAAbD,IAAIZ,QAAeY,IAAIZ,OAAQ,GACnCnC,MAAMgC,SAAWjC,OAAOkD,cACxBjD,MAAM6C,aAAc,EAEJ,aAAZE,IAAIb,MAAwBvB,iBAAiBX,MAAMY,WAAW,KAChE6B,WAAWzC,OAAQ+C,IAAM/C,MAAMwC,UAG/BzC,OAAOmD,WAAY,OAAO,KAC9BrD,QAAU,KACV,IAAIsD,MAAQnD,MAAMO,SAASP,MAAMO,SAASf,OAAO,GAAGO,OAAQC,OAC5D,GAAa,WAATmD,MAAoB,OAAOA,MAG/B,GAFiB,MAAbJ,IAAIZ,QAAeY,IAAIZ,OAAQ,GAEnB,KAAXtC,SAA6B,KAAXA,SAA+B,aAAZkD,IAAIb,KAEzC,GAAe,MAAXrC,SAA+B,aAAZkD,IAAIb,MAAwC,KAAjBa,IAAIX,KAAKF,KAC9DO,WAAWzC,OACXA,MAAMwC,QAAQL,OAAQ,OAEnB,GAAe,KAAXtC,QAAgByC,YAAYtC,MAAOD,OAAOkC,SAAU,UACxD,GAAe,KAAXpC,QAAgByC,YAAYtC,MAAOD,OAAOkC,SAAU,UACxD,GAAe,KAAXpC,QAAgByC,YAAYtC,MAAOD,OAAOkC,SAAU,UACxD,GAAe,KAAXpC,QAAgB,CACvB,KAAmB,aAAZkD,IAAIb,MAAqBa,IAAMN,WAAWzC,OAEjD,IADgB,KAAZ+C,IAAIb,OAAaa,IAAMN,WAAWzC,QACnB,aAAZ+C,IAAIb,MAAqBa,IAAMN,WAAWzC,YAE1CH,SAAWkD,IAAIb,KAAMO,WAAWzC,QACpB,KAAZ+C,IAAIb,MAA2B,OAAZa,IAAIb,MAA8B,aAAZa,IAAIb,MAAkC,gBAAXrC,UAC3EyC,YAAYtC,MAAOD,OAAOkC,SAAU,kBAhB6BQ,WAAWzC,OAmB9E,OAFAA,MAAM6C,aAAc,EACpB7C,MAAMY,UAAYf,SAAWsD,MACtBA,OAGTC,OAAQ,SAASpD,MAAOqD,WACtB,IAAKrD,MAAMO,SAASP,MAAMO,SAASf,OAAO,GAAGmC,OAAQ,OAAO3C,WAAWsE,KACvE,IAAIC,UAAYF,WAAaA,UAAUG,OAAO,GAAIT,IAAM/C,MAAMwC,QAC9C,aAAZO,IAAIb,MAAwBvB,iBAAiBX,MAAMY,WAAW,KAAOmC,IAAMA,IAAIX,MACnF,IAAIqB,QAAUF,WAAaR,IAAIb,KAC/B,MAAgB,aAAZa,IAAIb,KAA4Ba,IAAIf,UAAyB,KAAbuB,UAAmB,EAAIrE,OAAO0D,YACzEG,IAAIZ,MAAcY,IAAId,QAAUwB,QAAU,EAAI,GAC3CV,IAAIf,UAAYyB,QAAU,EAAIvE,OAAO0D,aAGnDc,cAAe,KACfC,cAAe,CAACC,QAAS,OACzBC,KAAM,QACNC,kBAAmB,KACnBC,gBAAiB,KACjBC,YAAa,QAIjBhF,WAAWiF,WAAW,gBAAiB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"groovy\", function(config) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\n    \"abstract as assert boolean break byte case catch char class const continue def default \" +\n    \"do double else enum extends final finally float for goto if implements import in \" +\n    \"instanceof int interface long native new package private protected public return \" +\n    \"short static strictfp super switch synchronized threadsafe throw throws trait transient \" +\n    \"try void volatile while\");\n  var blockKeywords = words(\"catch class def do else enum finally for if interface switch trait try while\");\n  var standaloneKeywords = words(\"return break continue\");\n  var atoms = words(\"null true false this\");\n\n  var curPunc;\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      return startString(ch, stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      if (stream.eat(/eE/)) { stream.eat(/\\+\\-/); stream.eatWhile(/\\d/); }\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize.push(tokenComment);\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (expectExpression(state.lastToken, false)) {\n        return startString(ch, stream, state);\n      }\n    }\n    if (ch == \"-\" && stream.eat(\">\")) {\n      curPunc = \"->\";\n      return null;\n    }\n    if (/[+\\-*&%=<>!?|\\/~]/.test(ch)) {\n      stream.eatWhile(/[+\\-*&%=<>|~]/);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    if (ch == \"@\") { stream.eatWhile(/[\\w\\$_\\.]/); return \"meta\"; }\n    if (state.lastToken == \".\") return \"property\";\n    if (stream.eat(\":\")) { curPunc = \"proplabel\"; return \"property\"; }\n    var cur = stream.current();\n    if (atoms.propertyIsEnumerable(cur)) { return \"atom\"; }\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = \"standalone\";\n      return \"keyword\";\n    }\n    return \"variable\";\n  }\n  tokenBase.isBase = true;\n\n  function startString(quote, stream, state) {\n    var tripleQuoted = false;\n    if (quote != \"/\" && stream.eat(quote)) {\n      if (stream.eat(quote)) tripleQuoted = true;\n      else return \"string\";\n    }\n    function t(stream, state) {\n      var escaped = false, next, end = !tripleQuoted;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          if (!tripleQuoted) { break; }\n          if (stream.match(quote + quote)) { end = true; break; }\n        }\n        if (quote == '\"' && next == \"$\" && !escaped) {\n          if (stream.eat(\"{\")) {\n            state.tokenize.push(tokenBaseUntilBrace());\n            return \"string\";\n          } else if (stream.match(/^\\w/, false)) {\n            state.tokenize.push(tokenVariableDeref);\n            return \"string\";\n          }\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end) state.tokenize.pop();\n      return \"string\";\n    }\n    state.tokenize.push(t);\n    return t(stream, state);\n  }\n\n  function tokenBaseUntilBrace() {\n    var depth = 1;\n    function t(stream, state) {\n      if (stream.peek() == \"}\") {\n        depth--;\n        if (depth == 0) {\n          state.tokenize.pop();\n          return state.tokenize[state.tokenize.length-1](stream, state);\n        }\n      } else if (stream.peek() == \"{\") {\n        depth++;\n      }\n      return tokenBase(stream, state);\n    }\n    t.isBase = true;\n    return t;\n  }\n\n  function tokenVariableDeref(stream, state) {\n    var next = stream.match(/^(\\.|[\\w\\$_]+)/)\n    if (!next) {\n      state.tokenize.pop()\n      return state.tokenize[state.tokenize.length-1](stream, state)\n    }\n    return next[0] == \".\" ? null : \"variable\"\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize.pop();\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function expectExpression(last, newline) {\n    return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) ||\n      last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\" ||\n      (last == \"standalone\" && !newline);\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: [tokenBase],\n        context: new Context((basecolumn || 0) - config.indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true,\n        lastToken: null\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n        // Automatic semicolon insertion\n        if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) {\n          popContext(state); ctx = state.context;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = state.tokenize[state.tokenize.length-1](stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n      // Handle indentation for {x -> \\n ... }\n      else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\n        popContext(state);\n        state.context.align = false;\n      }\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      state.lastToken = curPunc || style;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (!state.tokenize[state.tokenize.length-1].isBase) return CodeMirror.Pass;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;\n      if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : config.indentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : config.indentUnit);\n    },\n\n    electricChars: \"{}\",\n    closeBrackets: {triples: \"'\\\"\"},\n    fold: \"brace\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-groovy\", \"groovy\");\n\n});\n"],"file":"groovy.js"}