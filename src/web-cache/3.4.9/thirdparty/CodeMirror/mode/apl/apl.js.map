{"version":3,"sources":["thirdparty/CodeMirror/mode/apl/apl.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","builtInOps",".","\\","/","⌿","⍀","¨","⍣","builtInFuncs","+","−","×","÷","⌈","⌊","∣","⍳","?","⋆","⍟","○","!","⌹","<","≤","=",">","≥","≠","≡","≢","∈","⍷","∪","∩","∼","∨","∧","⍱","⍲","⍴",",","⍪","⌽","⊖","⍉","↑","↓","⊂","⊃","⌷","⍋","⍒","⊤","⊥","⍕","⍎","⊣","⊢","isOperator","isNiladic","isFunction","isArrow","isComment","stringEater","type","prev","c","startState","func","op","string","escape","token","stream","state","ch","funcName","eatSpace","next","eatWhile","test","skipToEnd","peek","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"apl\", function() {\n  var builtInOps = {\n    \".\": \"innerProduct\",\n    \"\\\\\": \"scan\",\n    \"/\": \"reduce\",\n    \"⌿\": \"reduce1Axis\",\n    \"⍀\": \"scan1Axis\",\n    \"¨\": \"each\",\n    \"⍣\": \"power\"\n  };\n  var builtInFuncs = {\n    \"+\": [\"conjugate\", \"add\"],\n    \"−\": [\"negate\", \"subtract\"],\n    \"×\": [\"signOf\", \"multiply\"],\n    \"÷\": [\"reciprocal\", \"divide\"],\n    \"⌈\": [\"ceiling\", \"greaterOf\"],\n    \"⌊\": [\"floor\", \"lesserOf\"],\n    \"∣\": [\"absolute\", \"residue\"],\n    \"⍳\": [\"indexGenerate\", \"indexOf\"],\n    \"?\": [\"roll\", \"deal\"],\n    \"⋆\": [\"exponentiate\", \"toThePowerOf\"],\n    \"⍟\": [\"naturalLog\", \"logToTheBase\"],\n    \"○\": [\"piTimes\", \"circularFuncs\"],\n    \"!\": [\"factorial\", \"binomial\"],\n    \"⌹\": [\"matrixInverse\", \"matrixDivide\"],\n    \"<\": [null, \"lessThan\"],\n    \"≤\": [null, \"lessThanOrEqual\"],\n    \"=\": [null, \"equals\"],\n    \">\": [null, \"greaterThan\"],\n    \"≥\": [null, \"greaterThanOrEqual\"],\n    \"≠\": [null, \"notEqual\"],\n    \"≡\": [\"depth\", \"match\"],\n    \"≢\": [null, \"notMatch\"],\n    \"∈\": [\"enlist\", \"membership\"],\n    \"⍷\": [null, \"find\"],\n    \"∪\": [\"unique\", \"union\"],\n    \"∩\": [null, \"intersection\"],\n    \"∼\": [\"not\", \"without\"],\n    \"∨\": [null, \"or\"],\n    \"∧\": [null, \"and\"],\n    \"⍱\": [null, \"nor\"],\n    \"⍲\": [null, \"nand\"],\n    \"⍴\": [\"shapeOf\", \"reshape\"],\n    \",\": [\"ravel\", \"catenate\"],\n    \"⍪\": [null, \"firstAxisCatenate\"],\n    \"⌽\": [\"reverse\", \"rotate\"],\n    \"⊖\": [\"axis1Reverse\", \"axis1Rotate\"],\n    \"⍉\": [\"transpose\", null],\n    \"↑\": [\"first\", \"take\"],\n    \"↓\": [null, \"drop\"],\n    \"⊂\": [\"enclose\", \"partitionWithAxis\"],\n    \"⊃\": [\"diclose\", \"pick\"],\n    \"⌷\": [null, \"index\"],\n    \"⍋\": [\"gradeUp\", null],\n    \"⍒\": [\"gradeDown\", null],\n    \"⊤\": [\"encode\", null],\n    \"⊥\": [\"decode\", null],\n    \"⍕\": [\"format\", \"formatByExample\"],\n    \"⍎\": [\"execute\", null],\n    \"⊣\": [\"stop\", \"left\"],\n    \"⊢\": [\"pass\", \"right\"]\n  };\n\n  var isOperator = /[\\.\\/⌿⍀¨⍣]/;\n  var isNiladic = /⍬/;\n  var isFunction = /[\\+−×÷⌈⌊∣⍳\\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;\n  var isArrow = /←/;\n  var isComment = /[⍝#].*$/;\n\n  var stringEater = function(type) {\n    var prev;\n    prev = false;\n    return function(c) {\n      prev = c;\n      if (c === type) {\n        return prev === \"\\\\\";\n      }\n      return true;\n    };\n  };\n  return {\n    startState: function() {\n      return {\n        prev: false,\n        func: false,\n        op: false,\n        string: false,\n        escape: false\n      };\n    },\n    token: function(stream, state) {\n      var ch, funcName;\n      if (stream.eatSpace()) {\n        return null;\n      }\n      ch = stream.next();\n      if (ch === '\"' || ch === \"'\") {\n        stream.eatWhile(stringEater(ch));\n        stream.next();\n        state.prev = true;\n        return \"string\";\n      }\n      if (/[\\[{\\(]/.test(ch)) {\n        state.prev = false;\n        return null;\n      }\n      if (/[\\]}\\)]/.test(ch)) {\n        state.prev = true;\n        return null;\n      }\n      if (isNiladic.test(ch)) {\n        state.prev = false;\n        return \"niladic\";\n      }\n      if (/[¯\\d]/.test(ch)) {\n        if (state.func) {\n          state.func = false;\n          state.prev = false;\n        } else {\n          state.prev = true;\n        }\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperator.test(ch)) {\n        return \"operator apl-\" + builtInOps[ch];\n      }\n      if (isArrow.test(ch)) {\n        return \"apl-arrow\";\n      }\n      if (isFunction.test(ch)) {\n        funcName = \"apl-\";\n        if (builtInFuncs[ch] != null) {\n          if (state.prev) {\n            funcName += builtInFuncs[ch][1];\n          } else {\n            funcName += builtInFuncs[ch][0];\n          }\n        }\n        state.func = true;\n        state.prev = false;\n        return \"function \" + funcName;\n      }\n      if (isComment.test(ch)) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (ch === \"∘\" && stream.peek() === \".\") {\n        stream.next();\n        return \"function jot-dot\";\n      }\n      stream.eatWhile(/[\\w\\$_]/);\n      state.prev = true;\n      return \"keyword\";\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/apl\", \"apl\");\n\n});\n"],"file":"apl.js"}