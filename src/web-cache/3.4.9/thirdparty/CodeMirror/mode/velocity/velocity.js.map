{"version":3,"sources":["thirdparty/CodeMirror/mode/velocity/velocity.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","specials","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","propertyIsEnumerable","current","word","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"velocity\", function() {\n    function parseWords(str) {\n        var obj = {}, words = str.split(\" \");\n        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n        return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                              \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                               \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n        state.tokenize = f;\n        return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n        var beforeParams = state.beforeParams;\n        state.beforeParams = false;\n        var ch = stream.next();\n        // start of unparsed string?\n        if ((ch == \"'\") && !state.inString && state.inParams) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenString(ch));\n        }\n        // start of parsed string?\n        else if ((ch == '\"')) {\n            state.lastTokenWasBuiltin = false;\n            if (state.inString) {\n                state.inString = false;\n                return \"string\";\n            }\n            else if (state.inParams)\n                return chain(stream, state, tokenString(ch));\n        }\n        // is it one of the special signs []{}().,;? Separator?\n        else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n            if (ch == \"(\" && beforeParams)\n                state.inParams = true;\n            else if (ch == \")\") {\n                state.inParams = false;\n                state.lastTokenWasBuiltin = true;\n            }\n            return null;\n        }\n        // start of a number value?\n        else if (/\\d/.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(/[\\w\\.]/);\n            return \"number\";\n        }\n        // multi line comment?\n        else if (ch == \"#\" && stream.eat(\"*\")) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenComment);\n        }\n        // unparsed content?\n        else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenUnparsed);\n        }\n        // single line comment?\n        else if (ch == \"#\" && stream.eat(\"#\")) {\n            state.lastTokenWasBuiltin = false;\n            stream.skipToEnd();\n            return \"comment\";\n        }\n        // variable?\n        else if (ch == \"$\") {\n            stream.eat(\"!\");\n            stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n            // is it one of the specials?\n            if (specials && specials.propertyIsEnumerable(stream.current())) {\n                return \"keyword\";\n            }\n            else {\n                state.lastTokenWasBuiltin = true;\n                state.beforeParams = true;\n                return \"builtin\";\n            }\n        }\n        // is it a operator?\n        else if (isOperatorChar.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(isOperatorChar);\n            return \"operator\";\n        }\n        else {\n            // get the whole word\n            stream.eatWhile(/[\\w\\$_{}@]/);\n            var word = stream.current();\n            // is it one of the listed keywords?\n            if (keywords && keywords.propertyIsEnumerable(word))\n                return \"keyword\";\n            // is it one of the listed functions?\n            if (functions && functions.propertyIsEnumerable(word) ||\n                    (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n                     !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n                state.beforeParams = true;\n                state.lastTokenWasBuiltin = false;\n                return \"keyword\";\n            }\n            if (state.inString) {\n                state.lastTokenWasBuiltin = false;\n                return \"string\";\n            }\n            if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n                return \"builtin\";\n            // default: just a \"word\"\n            state.lastTokenWasBuiltin = false;\n            return null;\n        }\n    }\n\n    function tokenString(quote) {\n        return function(stream, state) {\n            var escaped = false, next, end = false;\n            while ((next = stream.next()) != null) {\n                if ((next == quote) && !escaped) {\n                    end = true;\n                    break;\n                }\n                if (quote=='\"' && stream.peek() == '$' && !escaped) {\n                    state.inString = true;\n                    end = true;\n                    break;\n                }\n                escaped = !escaped && next == \"\\\\\";\n            }\n            if (end) state.tokenize = tokenBase;\n            return \"string\";\n        };\n    }\n\n    function tokenComment(stream, state) {\n        var maybeEnd = false, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            maybeEnd = (ch == \"*\");\n        }\n        return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n        var maybeEnd = 0, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd == 2) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            if (ch == \"]\")\n                maybeEnd++;\n            else if (ch != \" \")\n                maybeEnd = 0;\n        }\n        return \"meta\";\n    }\n    // Interface\n\n    return {\n        startState: function() {\n            return {\n                tokenize: tokenBase,\n                beforeParams: false,\n                inParams: false,\n                inString: false,\n                lastTokenWasBuiltin: false\n            };\n        },\n\n        token: function(stream, state) {\n            if (stream.eatSpace()) return null;\n            return state.tokenize(stream, state);\n        },\n        blockCommentStart: \"#*\",\n        blockCommentEnd: \"*#\",\n        lineComment: \"##\",\n        fold: \"velocity\"\n    };\n});\n\nCodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n\n});\n"],"file":"velocity.js"}