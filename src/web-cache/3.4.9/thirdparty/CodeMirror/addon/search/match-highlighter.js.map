{"version":3,"sources":["thirdparty/CodeMirror/addon/search/match-highlighter.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defaults","style","minChars","delay","wordsOnly","annotateScrollbar","showToken","trim","State","options","name","this","hasOwnProperty","overlay","timeout","matchesonscroll","active","cursorActivity","cm","state","matchHighlighter","hasFocus","scheduleHighlight","onFocus","clearTimeout","setTimeout","highlightMatches","addOverlay","query","hasBoundary","makeOverlay","showMatchesOnScrollbar","searchFor","RegExp","test","charAt","replace","length","className","removeOverlay","clear","operation","somethingSelected","from","getCursor","to","line","isWord","selection","getRange","re","cur","getLine","start","ch","end","slice","str","match","pos","chr","boundariesAround","stream","string","token","next","skipTo","skipToEnd","defineOption","val","old","Init","off","on"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Highlighting text that matches the selection\n//\n// Defines an option highlightSelectionMatches, which, when enabled,\n// will style strings that match the selection throughout the\n// document.\n//\n// The option can be set to true to simply enable it, or to a\n// {minChars, style, wordsOnly, showToken, delay} object to explicitly\n// configure it. minChars is the minimum amount of characters that should be\n// selected for the behavior to occur, and style is the token style to\n// apply to the matches. This will be prefixed by \"cm-\" to create an\n// actual CSS class name. If wordsOnly is enabled, the matches will be\n// highlighted only if the selected text is a word. showToken, when enabled,\n// will cause the current token to be highlighted when nothing is selected.\n// delay is used to specify how much time to wait, in milliseconds, before\n// highlighting the matches. If annotateScrollbar is enabled, the occurrences\n// will be highlighted on the scrollbar via the matchesonscrollbar addon.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./matchesonscrollbar\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./matchesonscrollbar\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var defaults = {\n    style: \"matchhighlight\",\n    minChars: 2,\n    delay: 100,\n    wordsOnly: false,\n    annotateScrollbar: false,\n    showToken: false,\n    trim: true\n  }\n\n  function State(options) {\n    this.options = {}\n    for (var name in defaults)\n      this.options[name] = (options && options.hasOwnProperty(name) ? options : defaults)[name]\n    this.overlay = this.timeout = null;\n    this.matchesonscroll = null;\n    this.active = false;\n  }\n\n  CodeMirror.defineOption(\"highlightSelectionMatches\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      removeOverlay(cm);\n      clearTimeout(cm.state.matchHighlighter.timeout);\n      cm.state.matchHighlighter = null;\n      cm.off(\"cursorActivity\", cursorActivity);\n      cm.off(\"focus\", onFocus)\n    }\n    if (val) {\n      var state = cm.state.matchHighlighter = new State(val);\n      if (cm.hasFocus()) {\n        state.active = true\n        highlightMatches(cm)\n      } else {\n        cm.on(\"focus\", onFocus)\n      }\n      cm.on(\"cursorActivity\", cursorActivity);\n    }\n  });\n\n  function cursorActivity(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.active || cm.hasFocus()) scheduleHighlight(cm, state)\n  }\n\n  function onFocus(cm) {\n    var state = cm.state.matchHighlighter\n    if (!state.active) {\n      state.active = true\n      scheduleHighlight(cm, state)\n    }\n  }\n\n  function scheduleHighlight(cm, state) {\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function() {highlightMatches(cm);}, state.options.delay);\n  }\n\n  function addOverlay(cm, query, hasBoundary, style) {\n    var state = cm.state.matchHighlighter;\n    cm.addOverlay(state.overlay = makeOverlay(query, hasBoundary, style));\n    if (state.options.annotateScrollbar && cm.showMatchesOnScrollbar) {\n      var searchFor = hasBoundary ? new RegExp((/\\w/.test(query.charAt(0)) ? \"\\\\b\" : \"\") +\n                                               query.replace(/[\\\\\\[.+*?(){|^$]/g, \"\\\\$&\") +\n                                               (/\\w/.test(query.charAt(query.length - 1)) ? \"\\\\b\" : \"\")) : query;\n      state.matchesonscroll = cm.showMatchesOnScrollbar(searchFor, false,\n        {className: \"CodeMirror-selection-highlight-scrollbar\"});\n    }\n  }\n\n  function removeOverlay(cm) {\n    var state = cm.state.matchHighlighter;\n    if (state.overlay) {\n      cm.removeOverlay(state.overlay);\n      state.overlay = null;\n      if (state.matchesonscroll) {\n        state.matchesonscroll.clear();\n        state.matchesonscroll = null;\n      }\n    }\n  }\n\n  function highlightMatches(cm) {\n    cm.operation(function() {\n      var state = cm.state.matchHighlighter;\n      removeOverlay(cm);\n      if (!cm.somethingSelected() && state.options.showToken) {\n        var re = state.options.showToken === true ? /[\\w$]/ : state.options.showToken;\n        var cur = cm.getCursor(), line = cm.getLine(cur.line), start = cur.ch, end = start;\n        while (start && re.test(line.charAt(start - 1))) --start;\n        while (end < line.length && re.test(line.charAt(end))) ++end;\n        if (start < end)\n          addOverlay(cm, line.slice(start, end), re, state.options.style);\n        return;\n      }\n      var from = cm.getCursor(\"from\"), to = cm.getCursor(\"to\");\n      if (from.line != to.line) return;\n      if (state.options.wordsOnly && !isWord(cm, from, to)) return;\n      var selection = cm.getRange(from, to)\n      if (state.options.trim) selection = selection.replace(/^\\s+|\\s+$/g, \"\")\n      if (selection.length >= state.options.minChars)\n        addOverlay(cm, selection, false, state.options.style);\n    });\n  }\n\n  function isWord(cm, from, to) {\n    var str = cm.getRange(from, to);\n    if (str.match(/^\\w+$/) !== null) {\n        if (from.ch > 0) {\n            var pos = {line: from.line, ch: from.ch - 1};\n            var chr = cm.getRange(pos, from);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        if (to.ch < cm.getLine(from.line).length) {\n            var pos = {line: to.line, ch: to.ch + 1};\n            var chr = cm.getRange(to, pos);\n            if (chr.match(/\\W/) === null) return false;\n        }\n        return true;\n    } else return false;\n  }\n\n  function boundariesAround(stream, re) {\n    return (!stream.start || !re.test(stream.string.charAt(stream.start - 1))) &&\n      (stream.pos == stream.string.length || !re.test(stream.string.charAt(stream.pos)));\n  }\n\n  function makeOverlay(query, hasBoundary, style) {\n    return {token: function(stream) {\n      if (stream.match(query) &&\n          (!hasBoundary || boundariesAround(stream, hasBoundary)))\n        return style;\n      stream.next();\n      stream.skipTo(query.charAt(0)) || stream.skipToEnd();\n    }};\n  }\n});\n"],"file":"match-highlighter.js"}