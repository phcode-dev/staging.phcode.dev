{"version":3,"sources":["view/ViewStateManager.js"],"names":["define","require","exports","module","_","_viewStateCache","reset","_setViewState","file","viewState","fullPath","updateViewState","view","getViewState","getFile","addViewStates","viewStates","extend"],"mappings":"AAgCAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,EAAIH,QAAQ,qBAOZI,gBAAkB,GAKtB,SAASC,QACLD,gBAAkB,GAQtB,SAASE,cAAcC,KAAMC,WACzBJ,gBAAgBG,KAAKE,UAAYD,UASrC,SAASE,gBAAgBC,MACjBA,KAAKC,cACLN,cAAcK,KAAKE,UAAWF,KAAKC,gBAS3C,SAASA,aAAaL,MAClB,OAAOH,gBAAgBG,KAAKE,UAOhC,SAASK,cAAcC,YACnBX,gBAAkBD,EAAEa,OAAOZ,gBAAiBW,YAMhDd,QAAQI,MAAkBA,MAC1BJ,QAAQS,gBAAkBA,gBAC1BT,QAAQW,aAAkBA,aAC1BX,QAAQa,cAAkBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * ViewStateManager is a singleton for views to park their global viwe state. The state is saved\n * with project data but the View or View Factory is responsible for restoring the view state\n * when the view is created.\n *\n * Views should implement `getViewState()` so that the view state can be saved and that data is cached\n * for later use.\n *\n * Views or View Factories are responsible for restoring the view state when the view of that file is created\n * by recalling the cached state.  Views determine what data is store in the view state and how to restore it.\n */\ndefine(function (require, exports, module) {\n\n\n    var _ = require(\"thirdparty/lodash\");\n\n    /**\n     * The view state cache.\n     * @type {Object.<string,*>}\n     * @private\n     */\n    var _viewStateCache = {};\n\n    /**\n     * resets the view state cache\n     */\n    function reset() {\n        _viewStateCache = {};\n    }\n\n    /**\n     * Sets the view state for the specfied file\n     * @param {!File} file - the file to record the view state for\n     * @param {?*} viewState - any data that the view needs to restore the view state.\n     */\n    function _setViewState(file, viewState) {\n        _viewStateCache[file.fullPath] = viewState;\n    }\n\n\n    /**\n     * Updates the view state for the specified view\n     * @param {!{!getFile:function():File, getViewState:function():*}} view - the to save state\n     * @param {?*} viewState - any data that the view needs to restore the view state.\n     */\n    function updateViewState(view) {\n        if (view.getViewState) {\n            _setViewState(view.getFile(), view.getViewState());\n        }\n    }\n\n    /**\n     * gets the view state for the specified file\n     * @param {!File} file - the file to record the view state for\n     * @return {?*} whatever data that was saved earlier with a call setViewState\n     */\n    function getViewState(file) {\n        return _viewStateCache[file.fullPath];\n    }\n\n    /**\n     * adds an array of view states\n     * @param {!object.<string, *>} viewStates - View State object to append to the current set of view states\n     */\n    function addViewStates(viewStates) {\n        _viewStateCache = _.extend(_viewStateCache, viewStates);\n    }\n\n    /*\n     * Public API\n     */\n    exports.reset           = reset;\n    exports.updateViewState = updateViewState;\n    exports.getViewState    = getViewState;\n    exports.addViewStates   = addViewStates;\n});\n"],"file":"ViewStateManager.js"}