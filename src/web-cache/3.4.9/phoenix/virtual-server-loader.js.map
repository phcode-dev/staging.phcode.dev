{"version":3,"sources":["phoenix/virtual-server-loader.js"],"names":["Workbox","_getBaseURL","baseURL","window","location","href","indexOf","substring","lastIndexOf","endsWith","getRoute","_isServiceWorkerLoaderPage","indexUrl","origin","baseUrl","devURL","distTestURL","playwrightDevURL","playwrightDistTestURL","currentURL","console","log","Phoenix","browser","desktop","isChromeBased","async","shouldUpdate","__TAURI__","fsServerUrl","navigator","logger","leaveTrail","wb","updateViaCache","serverReady","messageSW","type","debugMode","logToConsolePref","logLivePreview","loggingOptions","then","config","catch","err","error","serverInstall","cache","params","showSkipWaitingPrompt","event","updateAccepted","messageSkipWaiting","addEventListener","updatePendingReloadReason","controlling","isUpdate","register"],"mappings":"OAmCQA,YAAc,oFAEtB,SAASC,cACL,IAAIC,QAAUC,OAAOC,SAASC,KAa9B,OAZGD,SAASC,KAAKC,QAAS,MAAM,IAC5BJ,QAAUE,SAASC,KAAKE,UAAW,EAAGH,SAASC,KAAKC,QAAS,OAE9DF,SAASC,KAAKC,QAAS,MAAM,IAC5BJ,QAAUA,QAAQK,UAAW,EAAGL,QAAQI,QAAS,OAElDF,SAASC,KAAKC,QAAS,MAAM,IAC5BJ,QAAUA,QAAQK,UAAW,EAAGL,QAAQM,YAAa,OAErDN,QAAQO,SAAS,OACjBP,SAAoB,KAEjBA,QAGX,SAASQ,WACL,MAAO,cAOX,SAASC,6BAEL,MAAMC,YAAcR,SAASS,oBACzBC,WAAaV,SAASS,UACtBE,OAAS,6BACTC,YAAc,uCACdC,iBAAmB,6BACnBC,sBAAwB,uCACxBC,WAAalB,cAEjB,OADAmB,QAAQC,IAAI,aAAcF,WAAYP,SAAUE,QAASC,QACjDI,aAAeL,SAAWK,aAAeP,UAAYO,aAAeJ,QAAUI,aAAeH,aAChGG,aAAeF,kBAAoBd,OAAOmB,QAAQC,QAAQC,QAAQC,eAClEN,aAAeD,uBAAyBf,OAAOmB,QAAQC,QAAQC,QAAQC,cAMhFC,eAAeC,eAEX,OAAO,EAMX,GA9BIxB,OAAOyB,YACPzB,OAAO0B,YAAc5B,cAAgBS,WAAa,MA6BjDP,OAAOyB,WAAajB,8BAAgC,kBAAmBmB,UAAW,CACnFC,OAAOC,WAAW,+CAAiD7B,OAAOC,SAASC,MAMnF,MAAM4B,GAAK,IAAIjC,oDAAoDU,aAAc,CAE7EwB,eAAgB,SAUpB,SAASC,cACLf,QAAQC,IAAI,wCACZY,GAAGG,UAAU,CACTC,KAAM,sBACNC,UAA8C,SAAnCnC,OAAO4B,OAAOQ,iBACzBC,eAAgBrC,OAAO4B,OAAOU,eAAeD,iBAC9CE,KAAMC,SACLZ,OAAOC,sFACwEW,OAAOzC,aACvF0C,MAAMC,MACLzB,QAAQ0B,MAAM,4DAA6DD,OAInF,SAASE,gBACLhB,OAAOC,WAAW,uDAtBtB7B,OAAOmB,QAAQ0B,MAAQ,GAGvB7C,OAAOiC,UAAY,SAAUa,QACzB,OAAOhB,GAAGG,UAAUa,SAqBxB,MAAMC,sBAAwBxB,MAAOyB,QAcjC,MAAMC,qBAAuBzB,eAEzByB,gBACAnB,GAAGoB,sBAMXpB,GAAGqB,iBAAiB,UAAYH,QAC5BpB,OAAOC,WAAW,6FAClB7B,OAAOmB,QAAQ0B,MAAMO,0BAA4B,WACjDL,sBAAsBC,SAG1BlB,GAAGuB,YAAYd,KAAKP,aAGpBF,GAAGqB,iBAAiB,YAAcH,QAC1BA,MAAMM,UACNV,kBAIRd,GAAGyB","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*eslint no-console: 0*/\n/*global logger*/\n/*eslint strict: [\"error\", \"global\"]*/\n\n\n/** Sets up a web server for the local phoenix virtual file system root.\n * Based on https://github.com/humphd/nohost\n *\n * This module should be functionally as light weight as possible with minimal deps as it is a shell component.\n *\n * This file is always loaded fresh from network if available bypassing cache to help better resilience\n * against stale caches in service worker. So you can assume that this file will get loaded in its most recent\n * form despite the cache state in the browser.\n * **/\n\n\nimport {Workbox} from 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-window.prod.mjs';\n\nfunction _getBaseURL() {\n    let baseURL = window.location.href;\n    if(location.href.indexOf( \"?\")>-1){\n        baseURL = location.href.substring( 0, location.href.indexOf( \"?\")); // remove query string params\n    }\n    if(location.href.indexOf( \"#\")>-1){\n        baseURL = baseURL.substring( 0, baseURL.indexOf( \"#\")); // remove hrefs in page\n    }\n    if(location.href.indexOf( \"/\")>-1){\n        baseURL = baseURL.substring( 0, baseURL.lastIndexOf( \"/\"));\n    }\n    if(!baseURL.endsWith('/')){\n        baseURL = baseURL + '/';\n    }\n    return baseURL;\n}\n\nfunction getRoute(){\n    return `phoenix/vfs`;\n}\n\nif(!window.__TAURI__) {\n    window.fsServerUrl = _getBaseURL() + getRoute() + \"/\";\n}\n\nfunction _isServiceWorkerLoaderPage() {\n    // only http(s)://x.y.z/ or http(s)://x.y.z/index.html can load service worker, or localhost/src for dev builds\n    const indexUrl = `${location.origin}/index.html`,\n        baseUrl = `${location.origin}/`,\n        devURL = 'http://localhost:8000/src/',\n        distTestURL = 'http://localhost:8000/dist-test/src/',\n        playwrightDevURL = 'http://localhost:5000/src/',\n        playwrightDistTestURL = 'http://localhost:5000/dist-test/src/',\n        currentURL = _getBaseURL();\n    console.log(\"currentURL\", currentURL, indexUrl, baseUrl, devURL);\n    return (currentURL === baseUrl || currentURL === indexUrl || currentURL === devURL || currentURL === distTestURL ||\n        (currentURL === playwrightDevURL && window.Phoenix.browser.desktop.isChromeBased) ||\n        (currentURL === playwrightDistTestURL && window.Phoenix.browser.desktop.isChromeBased));\n        // we dont spawn virtual server in iframe playwright linux/safari as playwright linux/safari fails badly\n        // we dont need virtual server for tests except for live preview and custom extension load tests,\n        // which are disabled in playwright. We test in chrome atleast as chromium support is a baseline.\n}\n\nasync function shouldUpdate() {\n    // service workers are always updated in phoenix instantly.\n    return true;\n}\n\n/**\n * Register Phoenix PWA and nohost web server service worker, passing `route` or other options.\n */\nif (!window.__TAURI__ && _isServiceWorkerLoaderPage() && 'serviceWorker' in navigator) {\n    logger.leaveTrail(\"Service worker loader: Loading  from page...\" + window.location.href);\n    // We cannot realistically change the url of the service worker without causing major problems in service worker\n    // load. We will have to unregister and load a new service worker and there is no way to stop the already running\n    // service worker. As such, the below debug=false is unused, but kept there for legacy purposes to not change\n    // sw url without bombing the installation base.\n    // debug=false below is unused and kept for the above reason!!!!!\n    const wb = new Workbox(`virtual-server-main.js?debug=false&route=${getRoute()}`, {\n        // https://developer.chrome.com/blog/fresher-sw/#updateviacache\n        updateViaCache: 'none'\n    });\n\n    window.Phoenix.cache = {};\n\n    // Hoist service worker comm to window for everyone be able to communicate with the sw.\n    window.messageSW = function (params) {\n        return wb.messageSW(params);\n    };\n\n    function serverReady() {\n        console.log('Service worker loader: Server ready.');\n        wb.messageSW({\n            type: 'INIT_PHOENIX_CONFIG',\n            debugMode: window.logger.logToConsolePref === 'true',\n            logLivePreview: window.logger.loggingOptions.logLivePreview\n        }).then((config)=>{\n            logger.leaveTrail(\n                `Service worker loader: Server ready! Service worker inited at base url: ${config.baseURL}`);\n        }).catch(err=>{\n            console.error(\"Service worker loader: Error while init of service worker\", err);\n        });\n    }\n\n    function serverInstall() {\n        logger.leaveTrail('Service worker loader: Web server Worker installed.');\n    }\n\n    const showSkipWaitingPrompt = async (event) => {\n        // Assuming the user accepted the update, set up a listener\n        // that will reload the page as soon as the previously waiting\n        // service worker has taken control.\n\n        // When `event.wasWaitingBeforeRegister` is true, a previously\n        // updated service worker is still waiting.\n        // You may want to customize the UI prompt accordingly.\n\n        // This code assumes your app has a promptForUpdate() method,\n        // which returns true if the user wants to update.\n        // Implementing this is app-specific; some examples are:\n        // https://open-ui.org/components/alert.research or\n        // https://open-ui.org/components/toast.research\n        const updateAccepted = await shouldUpdate();\n\n        if (updateAccepted) {\n            wb.messageSkipWaiting();\n        }\n    };\n\n    // Add an event listener to detect when the registered\n    // service worker has installed but is waiting to activate.\n    wb.addEventListener('waiting', (event) => {\n        logger.leaveTrail(\"Service worker loader: A new service worker is pending load. Trying to update worker now.\");\n        window.Phoenix.cache.updatePendingReloadReason = \"skipWait\";\n        showSkipWaitingPrompt(event);\n    });\n\n    wb.controlling.then(serverReady);\n\n    // Deal with first-run install, if necessary\n    wb.addEventListener('installed', (event) => {\n        if(!event.isUpdate) {\n            serverInstall();\n        }\n    });\n\n    wb.register();\n}\n"],"file":"virtual-server-loader.js"}