{"version":3,"sources":["preferences/StateManager.js"],"names":["define","require","exports","module","_","EventDispatcher","Metrics","ProjectManager","LEGACY_STATE_MANAGER_MIGRATED","LEGACY_STATE_FILE_PATH","PROJECT_CONTEXT","GLOBAL_CONTEXT","PROJECT_THEN_GLOBAL_CONTEXT","PHSTORE_STATEMANAGER_PREFIX","transformDotsInID","definedPreferences","_getKey","id","useProjectContext","projectRootPath","getProjectRoot","fullPath","_GET_CONTEXT_FROM_LEGACY_CONTEXT","context","get","_getItemOrDefault","item","initial","getVal","Phoenix","config","environment","console","warn","replace","PhStore","getItem","val","setVal","value","Error","setItem","definePreferenceInternal","type","options","includes","error","key","preference","watchExternalChanges","unwatchExternalChanges","makeEventDispatcher","on","_event","changeType","trigger","getPreferenceInternal","knownExtensions","createExtensionStateManager","extensionID","i","originalExtensionID","newID","extPrefix","set","definePreference","getPreference","save","getPrefixedSystem","prefix","_migrateLegacyStateFile","isTestWindow","$","Deferred","resolve","promise","_migrated","log","fs","readFile","err","data","keysToMigrate","oldState","JSON","parse","unlink","unlinkErr","e","countEvent","EVENT_TYPE","PLATFORM","CHANGE_TYPE_INTERNAL","CHANGE_TYPE_EXTERNAL"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*unittests: Preferences Manager */\n/*global fs*/\n\n/**\n * StateManager\n *\n */\ndefine(function (require, exports, module) {\n    const _ = require(\"thirdparty/lodash\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        Metrics = require(\"utils/Metrics\"),\n        ProjectManager = require(\"project/ProjectManager\");\n\n    const LEGACY_STATE_MANAGER_MIGRATED = \"ph_state_manager_migrated\";\n    const LEGACY_STATE_FILE_PATH = \"/fs/app/state.json\";\n\n    const PROJECT_CONTEXT = \"project\";\n    const GLOBAL_CONTEXT = \"global\";\n    const PROJECT_THEN_GLOBAL_CONTEXT = \"any\";\n    const PHSTORE_STATEMANAGER_PREFIX = \"STATE_\";\n    const transformDotsInID = {};\n\n    const definedPreferences = {};\n\n    function _getKey(id, useProjectContext) {\n        if(useProjectContext){\n            const projectRootPath = ProjectManager.getProjectRoot().fullPath;\n            return `${PHSTORE_STATEMANAGER_PREFIX}${projectRootPath}${id}`; // STATE_/path/to/prj/root_ID\n        }\n        return `${PHSTORE_STATEMANAGER_PREFIX}${id}`; // STATE_ID\n    }\n\n    function _GET_CONTEXT_FROM_LEGACY_CONTEXT(context = null) {\n        if(_.get(context, \"location.layer\") === 'project'){\n            return PROJECT_CONTEXT;\n        }\n        return GLOBAL_CONTEXT;\n    }\n\n    function _getItemOrDefault(item, id) {\n        if((item === null || item === undefined) && definedPreferences[id]){\n            return definedPreferences[id].initial;\n        }\n        return item;\n    }\n\n    /**\n     * Convenience function that gets a view state\n     *\n     * @param {string} id preference to get\n     * @param {(Object|string)?} [context] Optional additional information about the request, can be:\n     *  - ScopeManager.PROJECT_CONTEXT  if you want to get project specific value  or\n     *  - ScopeManager.GLOBAL_CONTEXT if you want to get it from global context and not the project context.\n     *  - null/undefined if you want to get from project context first, and then global context if not found in project context.\n     * @param {string?} [context.scope] Eg. user - deprecated, do not use\n     * @param {string?} [context.layer] Eg. project - deprecated, do not use\n     * @param {string?} [context.layerID] Eg. /tauri/path/to/project - deprecated, do not use\n     */\n    function getVal(id, context= GLOBAL_CONTEXT) {\n        if(Phoenix.config.environment !== 'production' && typeof  context === 'object'){\n            console.warn(\"Use of context object in state is deprecated. Please migrate to StateManager\");\n        }\n        if(transformDotsInID[id]){\n            // this is true if\n            id=id.replace(\".\", \":\");\n        }\n        let item;\n        switch (context) {\n        case GLOBAL_CONTEXT:\n            item = PhStore.getItem(_getKey(id, false));\n            return _getItemOrDefault(item, id);\n        case PROJECT_CONTEXT:\n            item = PhStore.getItem(_getKey(id, true));\n            return _getItemOrDefault(item, id);\n        case PROJECT_THEN_GLOBAL_CONTEXT:\n            const val = PhStore.getItem(_getKey(id, true));\n            if(val){\n                return val;\n            }\n            item = PhStore.getItem(_getKey(id, false));\n            return _getItemOrDefault(item, id);\n        default:\n            if(Phoenix.config.environment !== 'production'){\n                console.warn(\"Use of context object in StateManager.get() is deprecated. Please migrate to StateManager\");\n            }\n            return getVal(id, _GET_CONTEXT_FROM_LEGACY_CONTEXT(context));\n        }\n    }\n\n    /**\n     * Convenience function that sets a view state and then saves the file\n     *\n     * @param {string} id preference to set\n     * @param {*} value new value for the preference\n     * @param {(Object|string)?} [context] Optional additional information about the request, can be:\n     *  ScopeManager.PROJECT_CONTEXT  if you want to get project specific value  or\n     *  ScopeManager.GLOBAL_CONTEXT or null if you want to set globally.\n     * @param {string?} [context.scope] Eg. user - deprecated, do not use\n     * @param {string?} [context.layer] Eg. project - deprecated, do not use\n     * @param {string?} [context.layerID] Eg. /tauri/path/to/project - deprecated, do not use\n     */\n    function setVal(id, value, context= GLOBAL_CONTEXT) {\n        if(transformDotsInID[id]){\n            // this is true if\n            id=id.replace(\".\", \":\");\n        }\n        switch (context) {\n        case PROJECT_THEN_GLOBAL_CONTEXT:\n            throw new Error(\"Cannot use PROJECT_THEN_GLOBAL_CONTEXT with set\");\n        case GLOBAL_CONTEXT:\n            PhStore.setItem(_getKey(id, false), value);\n            return;\n        case PROJECT_CONTEXT:\n            PhStore.setItem(_getKey(id, true), value);\n            return;\n        default:\n            if(Phoenix.config.environment !== 'production'){\n                console.warn(\"Use of context object in StateManager.set() is deprecated. Please migrate to StateManager\");\n            }\n            setVal(id, value, _GET_CONTEXT_FROM_LEGACY_CONTEXT(context));\n        }\n    }\n\n    /**\n     * returns a preference instance that can be listened `.on(\"change\", cbfn(changeType))` . The callback fucntion will be called\n     * whenever there is a change in the supplied id with a changeType argument. The change type can be one of the two:\n     * CHANGE_TYPE_INTERNAL - if change is made within the current editor\n     * CHANGE_TYPE_EXTERNAL - if change is made within the current editor\n     *\n     * @param id\n     * @param type\n     * @param initial\n     * @param options\n     * @return {{}}\n     */\n    function definePreferenceInternal(id, type, initial, options) {\n        if (definedPreferences[id]) {\n            throw new Error(\"Preference \" + id + \" was redefined\");\n        }\n\n        if(id.includes(\".\")){\n            // this is a problem as our event Dispatcher treats . as event class names. so listening on is's that have\n            // a dot will fail as instead of listening to events on for Eg. `eventName.hello`, eventDispatcher will only\n            // listen to `eventName`. To mitigate this, we will try to change the id name by replacing `.` with `:`\n            transformDotsInID[id] = true;\n            id=id.replace(\".\", \":\");\n            console.error(`StateManager.definePreference should not be called with an id ${id} that has a` +\n                \" `.`- trying to continue...\");\n        }\n\n        // change event processing on key\n        const key = _getKey(id, false);\n        const preference = {\n            watchExternalChanges: function () {\n                PhStore.watchExternalChanges(key);\n            },\n            unwatchExternalChanges: function () {\n                PhStore.unwatchExternalChanges(key);\n            }\n        };\n        EventDispatcher.makeEventDispatcher(preference);\n        PhStore.on(key, (_event, changeType)=>{\n            preference.trigger(\"change\", changeType);\n        });\n        definedPreferences[id]={ type, initial, options, preference};\n        return preference;\n    }\n\n    function getPreferenceInternal(id) {\n        if(!definedPreferences[id]){\n            throw new Error(\"getPreference \" + id + \" no such preference defined.\");\n        }\n        return definedPreferences[id].preference;\n    }\n\n    const knownExtensions = {};\n    function createExtensionStateManager(extensionID) {\n        let i=0;\n        if(extensionID.includes(\".\")){\n            // this is a problem as our event Dispatcher treats . as event class names. so listening on id's that have\n            // a dot will fail as instead of listening to events on for Eg. `eventName.hello`, eventDispatcher will only\n            // listen to `eventName`. To mitigate this, we will try to change the id name by replacing `.` with `:`\n            extensionID=extensionID.replace(\".\", \":\");\n        }\n        let originalExtensionID = extensionID;\n        while(knownExtensions[extensionID]){\n            let newID = `${originalExtensionID}_${i++}`;\n            console.warn(`Another extension of the same id ${extensionID} exists in createExtensionStateManager.` +\n                ` Mitigating-Identifying a new free id to use... ${newID}`);\n            extensionID = newID;\n        }\n        knownExtensions[extensionID] = true;\n        const extPrefix = `EXT_${extensionID}`;\n        return {\n            get: function (id, context) {\n                return getVal(`${extPrefix}_${id}`, context);\n            },\n            set: function (id, value, context) {\n                return setVal(`${extPrefix}_${id}`, value, context);\n            },\n            definePreference: function (id, type, initial, options) {\n                return definePreferenceInternal(`${extPrefix}_${id}`, type, initial, options);\n            },\n            getPreference: function (id) {\n                return getPreferenceInternal(`${extPrefix}_${id}`);\n            },\n            PROJECT_CONTEXT,\n            GLOBAL_CONTEXT,\n            PROJECT_THEN_GLOBAL_CONTEXT\n        };\n    }\n\n    function save() {\n        console.warn(\"StateManager.save() is deprecated. Settings are auto saved to a high throughput Database\");\n    }\n\n    function getPrefixedSystem(prefix) {\n        console.warn(\"StateManager.getPrefixedSystem() is deprecated. Use StateManager.createExtensionStateManager()\");\n        return createExtensionStateManager(prefix);\n    }\n\n    /**\n     * We used file based state.json in the earlier state manager impl. no  we moved to phstore. So we have to move\n     * earlier users to phstore to prevent losing their files. This code can be deleted anytime after 4 months\n     * from this commit.\n     * @private\n     */\n    function _migrateLegacyStateFile() {\n        if(Phoenix.isTestWindow || getVal(LEGACY_STATE_MANAGER_MIGRATED)){\n            return new $.Deferred().resolve().promise();\n        }\n        const _migrated = new $.Deferred();\n        console.log(\"Migrating legacy state file\", LEGACY_STATE_FILE_PATH);\n        fs.readFile(LEGACY_STATE_FILE_PATH, \"utf8\", function (err, data) {\n            setVal(LEGACY_STATE_MANAGER_MIGRATED, true);\n            if (err) {\n                // if error, ignore and continue. state file not found(unlikely to be here)\n                _migrated.resolve();\n                return;\n            }\n            try{\n                const keysToMigrate = [\n                    \"afterFirstLaunch\",\n                    \"sidebar\",\n                    \"workingSetSortMethod\",\n                    \"healthDataUsage\",\n                    \"main-toolbar\",\n                    \"recentProjects\",\n                    \"healthDataNotificationShown\",\n                    \"searchHistory\",\n                    \"problems-panel\"\n                ];\n                const oldState = JSON.parse(data);\n                for(let key of keysToMigrate) {\n                    if(oldState[key]){\n                        console.log(\"Migrated Legacy state: \", key, oldState[key]);\n                        setVal(key, oldState[key]);\n                    }\n                }\n                fs.unlink(LEGACY_STATE_FILE_PATH, (unlinkErr)=>{\n                    if(unlinkErr){\n                        console.error(`Error deleting legacy state file ${LEGACY_STATE_FILE_PATH}`, unlinkErr);\n                    }\n                });\n            } catch (e) {\n                console.error(\"Error migrating legacy state file\", LEGACY_STATE_FILE_PATH);\n            }\n            Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"legacyState\", \"migrated\");\n            _migrated.resolve();\n            console.log(\"Legacy state migration completed\");\n        });\n        return _migrated.promise();\n    }\n\n    // private API\n    exports._migrateLegacyStateFile = _migrateLegacyStateFile;\n\n    // public api\n    exports.get     = getVal;\n    exports.set     = setVal;\n    exports.definePreference = definePreferenceInternal;\n    exports.getPreference = getPreferenceInternal;\n    exports.createExtensionStateManager = createExtensionStateManager;\n    //deprecated APIs\n    exports.save = save;\n    exports.getPrefixedSystem = getPrefixedSystem;\n    // global exports\n    exports.PROJECT_CONTEXT = PROJECT_CONTEXT;\n    exports.GLOBAL_CONTEXT = GLOBAL_CONTEXT;\n    exports.PROJECT_THEN_GLOBAL_CONTEXT = PROJECT_THEN_GLOBAL_CONTEXT;\n    exports.CHANGE_TYPE_INTERNAL = PhStore.CHANGE_TYPE_INTERNAL;\n    exports.CHANGE_TYPE_EXTERNAL = PhStore.CHANGE_TYPE_EXTERNAL;\n});\n"],"file":"StateManager.js"}