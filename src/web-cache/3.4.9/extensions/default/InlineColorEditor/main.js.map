{"version":3,"sources":["extensions/default/InlineColorEditor/main.js"],"names":["define","require","exports","module","EditorManager","brackets","getModule","ExtensionUtils","InlineColorEditor","ColorUtils","prepareEditorForProvider","hostEditor","pos","colorRegEx","cursorLine","match","sel","start","end","endPos","marker","getSelection","line","RegExp","COLOR_REGEX","document","getLine","exec","index","length","ch","_codeMirror","markText","setSelection","color","inlineColorEditorProvider","context","inlineColorEditor","result","load","$","Deferred","resolve","promise","loadStyleSheet","registerInlineEditProvider"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,cAAsBC,SAASC,UAAU,wBACzCC,eAAsBF,SAASC,UAAU,wBACzCE,kBAAsBP,QAAQ,qBAAqBO,kBACnDC,WAAsBJ,SAASC,UAAU,oBAW7C,SAASI,yBAAyBC,WAAYC,KAC1C,IAAIC,WAAYC,WAAYC,MAAOC,IAAKC,MAAOC,IAAKC,OAAQC,OAG5D,IADAJ,IAAML,WAAWU,gBACTJ,MAAMK,OAASN,IAAIE,IAAII,KAC3B,OAAO,KAGXT,WAAa,IAAIU,OAAOd,WAAWe,aACnCV,WAAaH,WAAWc,SAASC,QAAQd,IAAIU,MAG7C,IACIP,MAAQF,WAAWc,KAAKb,eAGpBI,KADAD,MAAQF,MAAMa,OACAb,MAAM,GAAGc,cAEtBd,QAAUH,IAAIkB,GAAKb,OAASL,IAAIkB,GAAKZ,MAE9C,OAAKH,OAMLH,IAAIkB,GAAKb,MACTE,OAAS,CAACG,KAAMV,IAAIU,KAAMQ,GAAIZ,KAE9BE,OAAST,WAAWoB,YAAYC,SAASpB,IAAKO,QAC9CR,WAAWsB,aAAarB,IAAKO,QAEtB,CACHe,MAAOnB,MAAM,GACbK,OAAQA,SAbD,KA0Bf,SAASe,0BAA0BxB,WAAYC,KAC3C,IAAIwB,QAAU1B,yBAAyBC,WAAYC,KAC/CyB,kBACAC,OAEJ,OAAKF,UAGLC,kBAAoB,IAAI7B,kBAAkB4B,QAAQF,MAAOE,QAAQhB,SAC/CmB,KAAK5B,aAEvB2B,OAAS,IAAIE,EAAEC,UACRC,QAAQL,mBACRC,OAAOK,WAPH,KAafpC,eAAeqC,eAAezC,OAAQ,iBAEtCC,cAAcyC,2BAA2BV,2BAGzCjC,QAAQQ,yBAA2BA,yBAGnCR,QAAQiC,0BAA4BA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var EditorManager       = brackets.getModule(\"editor/EditorManager\"),\n        ExtensionUtils      = brackets.getModule(\"utils/ExtensionUtils\"),\n        InlineColorEditor   = require(\"InlineColorEditor\").InlineColorEditor,\n        ColorUtils          = brackets.getModule(\"utils/ColorUtils\");\n\n\n    /**\n     * Prepare hostEditor for an InlineColorEditor at pos if possible. Return\n     * editor context if so; otherwise null.\n     *\n     * @param {Editor} hostEditor\n     * @param {{line:Number, ch:Number}} pos\n     * @return {?{color:String, marker:TextMarker}}\n     */\n    function prepareEditorForProvider(hostEditor, pos) {\n        var colorRegEx, cursorLine, match, sel, start, end, endPos, marker;\n\n        sel = hostEditor.getSelection();\n        if (sel.start.line !== sel.end.line) {\n            return null;\n        }\n\n        colorRegEx = new RegExp(ColorUtils.COLOR_REGEX);\n        cursorLine = hostEditor.document.getLine(pos.line);\n\n        // Loop through each match of colorRegEx and stop when the one that contains pos is found.\n        do {\n            match = colorRegEx.exec(cursorLine);\n            if (match) {\n                start = match.index;\n                end = start + match[0].length;\n            }\n        } while (match && (pos.ch < start || pos.ch > end));\n\n        if (!match) {\n            return null;\n        }\n\n        // Adjust pos to the beginning of the match so that the inline editor won't get\n        // dismissed while we're updating the color with the new values from user's inline editing.\n        pos.ch = start;\n        endPos = {line: pos.line, ch: end};\n\n        marker = hostEditor._codeMirror.markText(pos, endPos);\n        hostEditor.setSelection(pos, endPos);\n\n        return {\n            color: match[0],\n            marker: marker\n        };\n    }\n\n    /**\n     * Registered as an inline editor provider: creates an InlineEditorColor when the cursor\n     * is on a color value (in any flavor of code).\n     *\n     * @param {!Editor} hostEditor\n     * @param {!{line:Number, ch:Number}} pos\n     * @return {?$.Promise} synchronously resolved with an InlineWidget, or null if there's\n     *      no color at pos.\n     */\n    function inlineColorEditorProvider(hostEditor, pos) {\n        var context = prepareEditorForProvider(hostEditor, pos),\n            inlineColorEditor,\n            result;\n\n        if (!context) {\n            return null;\n        }\n        inlineColorEditor = new InlineColorEditor(context.color, context.marker);\n        inlineColorEditor.load(hostEditor);\n\n        result = new $.Deferred();\n        result.resolve(inlineColorEditor);\n        return result.promise();\n\n    }\n\n\n    // Initialize extension\n    ExtensionUtils.loadStyleSheet(module, \"css/main.less\");\n\n    EditorManager.registerInlineEditProvider(inlineColorEditorProvider);\n\n    // for use by other InlineColorEditors\n    exports.prepareEditorForProvider = prepareEditorForProvider;\n\n    // for unit tests only\n    exports.inlineColorEditorProvider = inlineColorEditorProvider;\n});\n"],"file":"main.js"}