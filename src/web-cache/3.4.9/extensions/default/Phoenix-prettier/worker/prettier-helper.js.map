{"version":3,"sources":["extensions/default/Phoenix-prettier/worker/prettier-helper.js"],"names":["prettierInit","async","initPrettier","prettierURL","Phoenix","baseURL","import","pluginURLS","pluginURL","php","yaml","markdown","typescript","builtinPlugins","_loadPlugin","pluginName","includes","console","error","_identifyChangedRange","oldText","newText","start","end","charsToEndIndex","length","newRangeStart","newRangeEnd","rangeEndInOldText","text","changedText","substring","rangeStart","rangeEnd","prettify","params","options","plugins","prettierPlugins","isFullFileBeautify","_usePlugin","formatted","cursorOffset","prettier","formatWithCursor","WorkerComm","setExecHandler","catch","err"],"mappings":"AAsBA,IAAIA,cAAe,EAEnBC,eAAeC,eACX,GAAGF,aACC,OAEJA,cAAe,EACf,MAAMG,eAAiBC,QAAQC,iDACzBC,OAAOH,aACb,MAAMI,WAAa,IACZH,QAAQC,iDACRD,QAAQC,kDACRD,QAAQC,gDACRD,QAAQC,iDAEf,IAAI,IAAIG,aAAaD,iBACXD,OAAOE,WAIrB,IAAID,WAAa,CACbE,OAAQL,QAAQC,+CAChBK,QAASN,QAAQC,6CACjBM,YAAaP,QAAQC,iDACrBO,cAAeR,QAAQC,oDAEvBQ,eAAiB,CAAC,QAAS,iBAAkB,OAAQ,MAAO,OAAQ,QACxEZ,eAAea,YAAYC,YACpBR,WAAWQ,kBACJT,OAAOC,WAAWQ,aAGxBF,eAAeG,SAASD,aACxBE,QAAQC,MAAM,gCAAiCH,YAKvD,SAASI,sBAAsBC,QAASC,QAASC,MAAOC,KACpD,IAAIC,gBAAkBJ,QAAQK,OAASF,IACnCG,cAAgBJ,MAChBK,YAAcN,QAAQI,OAASD,gBAC/BI,kBAAoBR,QAAQK,OAASD,gBACzC,MAAO,CACHK,KAAMR,QACNS,YAAaT,QAAQU,UAAUL,cAAeC,aAC9CK,WAAYN,cACZO,SAAUN,YACVC,kBAAmBA,mBAI3B3B,eAAeiC,SAASC,QAChBnC,oBACME,eAEV,IAAIkC,QAAUD,OAAOC,SAAW,GAChCA,QAAQC,QAASC,gBAIjB,IAAIC,oBAAsBH,QAAQJ,aAAeI,QAAQH,SACzDG,QAAQJ,WAAaI,QAAQJ,YAAc,EAC3CI,QAAQH,SAAWG,QAAQH,UAAYE,OAAON,KAAKJ,aAC7CX,YAAYsB,QAAQI,YAC1B,IAAIC,UAAEA,UAASC,aAAEA,oBAAsBC,SAASC,iBAAiBT,OAAON,KAAMO,SAC9E,OAAGG,mBACQ,CACHV,KAAMY,UACNC,aAAcA,cAGfvB,sBAAsBgB,OAAON,KAAMY,UAAWL,QAAQJ,WAAYI,QAAQH,UAGrFY,WAAWC,eAAe,WAAYZ,UAEtChC,eACK6C,MAAMC,MACJ/B,QAAQC,MAAM,sCAAuC8B","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global WorkerComm, prettierPlugins, prettier*/\n\nlet prettierInit = false;\n\nasync function initPrettier() {\n    if(prettierInit){\n        return;\n    }\n    prettierInit = true;\n    const prettierURL = `${Phoenix.baseURL}thirdparty/prettier/standalone.js`;\n    await import(prettierURL);\n    const pluginURLS = [\n        `${Phoenix.baseURL}thirdparty/prettier/plugins/babel.js`,\n        `${Phoenix.baseURL}thirdparty/prettier/plugins/estree.js`,\n        `${Phoenix.baseURL}thirdparty/prettier/plugins/html.js`,\n        `${Phoenix.baseURL}thirdparty/prettier/plugins/postcss.js`\n    ];\n    for(let pluginURL of pluginURLS){\n        await import(pluginURL);\n    }\n}\n\nlet pluginURLS = {\n    php: `${Phoenix.baseURL}thirdparty/prettier/php/standalone.js`,\n    yaml: `${Phoenix.baseURL}thirdparty/prettier/plugins/yaml.js`,\n    markdown: `${Phoenix.baseURL}thirdparty/prettier/plugins/markdown.js`,\n    typescript: `${Phoenix.baseURL}thirdparty/prettier/plugins/typescript.js`\n};\nlet builtinPlugins = [\"babel\", \"json-stringify\", \"html\", \"css\", \"less\", \"scss\"];\nasync function _loadPlugin(pluginName) {\n    if(pluginURLS[pluginName]){\n        await import(pluginURLS[pluginName]);\n        return;\n    }\n    if(!builtinPlugins.includes(pluginName)){\n        console.error(\"no prettier plugin loaded for\", pluginName);\n    }\n}\n\n// see https://prettier.io/docs/en/options.html#parser for more parsers available\nfunction _identifyChangedRange(oldText, newText, start, end) {\n    let charsToEndIndex = oldText.length - end;\n    let newRangeStart = start,\n        newRangeEnd = newText.length - charsToEndIndex,\n        rangeEndInOldText = oldText.length - charsToEndIndex;\n    return {\n        text: newText,\n        changedText: newText.substring(newRangeStart, newRangeEnd),\n        rangeStart: newRangeStart,\n        rangeEnd: newRangeEnd,\n        rangeEndInOldText: rangeEndInOldText\n    };\n}\n\nasync function prettify(params) {\n    if(!prettierInit){\n        await initPrettier();\n    }\n    let options = params.options || {};\n    options.plugins= prettierPlugins;\n    // options.cursorOffset this option doesnt work well and prettier.formatWithCursor is buggy causing hangs\n    // unpredictably in worker thread. Hangs noted in large html, js and json files. test thoroughly before\n    // trying to implement again. https://github.com/prettier/prettier/issues/13387\n    let isFullFileBeautify = !options.rangeStart || !options.rangeEnd;\n    options.rangeStart = options.rangeStart || 0;\n    options.rangeEnd = options.rangeEnd || params.text.length;\n    await _loadPlugin(options._usePlugin);\n    let { formatted, cursorOffset} = await prettier.formatWithCursor(params.text, options);\n    if(isFullFileBeautify){\n        return {\n            text: formatted,\n            cursorOffset: cursorOffset\n        };\n    }\n    return _identifyChangedRange(params.text, formatted, options.rangeStart, options.rangeEnd);\n}\n\nWorkerComm.setExecHandler(\"prettify\", prettify);\n\ninitPrettier()\n    .catch(err=>{\n       console.error(\"Failed to load prettier in worker: \", err);\n    });"],"file":"prettier-helper.js"}