{"version":3,"sources":["thirdparty/text/text.js"],"names":["define","module","text","fs","Cc","Ci","xpcIsWindows","progIds","xmlRegExp","bodyRegExp","hasLocation","location","href","defaultProtocol","protocol","replace","defaultHostName","hostname","defaultPort","port","undefined","buildMap","masterConfig","config","version","strip","content","matches","match","jsEscape","createXhr","xhr","i","progId","XMLHttpRequest","ActiveXObject","e","parseName","name","modName","ext","temp","index","indexOf","isRelative","substring","length","moduleName","xdRegExp","useXhr","url","uProtocol","uHostName","uPort","exec","split","toLowerCase","finishLoad","onLoad","isBuild","load","req","inlineText","parsed","nonStripName","toUrl","get","err","error","write","pluginName","hasOwnProperty","asModule","writeFile","extPart","fileName","value","textWrite","contents","env","process","versions","node","require","nodeRequire","callback","errback","file","readFileSync","headers","header","open","setRequestHeader","onXhr","onreadystatechange","evt","status","readyState","Error","responseText","onXhrComplete","send","Packages","java","stringBuffer","line","encoding","io","File","lineSeparator","lang","System","getProperty","input","BufferedReader","InputStreamReader","FileInputStream","StringBuffer","readLine","charAt","append","String","toString","close","Components","classes","interfaces","utils","inStream","convertStream","fileObj","readData","FileUtils","createInstance","nsIFileInputStream","init","nsIConverterInputStream","available","DEFAULT_REPLACEMENT_CHARACTER","readString","path"],"mappings":"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","sourcesContent":["/**\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/text for details\n */\n/*jslint regexp: true */\n/*global require, XMLHttpRequest, ActiveXObject,\n  define, window, process, Packages,\n  java, location, Components, FileUtils */\n\ndefine(['module'], function (module) {\n    'use strict';\n\n    var text, fs, Cc, Ci, xpcIsWindows,\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\n        hasLocation = typeof location !== 'undefined' && location.href,\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\n        defaultHostName = hasLocation && location.hostname,\n        defaultPort = hasLocation && (location.port || undefined),\n        buildMap = {},\n        masterConfig = (module.config && module.config()) || {};\n\n    text = {\n        version: '2.0.10',\n\n        strip: function (content) {\n            //Strips <?xml ...?> declarations so that external SVG and XML\n            //documents can be added to a document without worry. Also, if the string\n            //is an HTML document, only the part inside the body tag is returned.\n            if (content) {\n                content = content.replace(xmlRegExp, \"\");\n                var matches = content.match(bodyRegExp);\n                if (matches) {\n                    content = matches[1];\n                }\n            } else {\n                content = \"\";\n            }\n            return content;\n        },\n\n        jsEscape: function (content) {\n            return content.replace(/(['\\\\])/g, '\\\\$1')\n                .replace(/[\\f]/g, \"\\\\f\")\n                .replace(/[\\b]/g, \"\\\\b\")\n                .replace(/[\\n]/g, \"\\\\n\")\n                .replace(/[\\t]/g, \"\\\\t\")\n                .replace(/[\\r]/g, \"\\\\r\")\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\n        },\n\n        createXhr: masterConfig.createXhr || function () {\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            return xhr;\n        },\n\n        /**\n         * Parses a resource name into its component parts. Resource names\n         * look like: module/name.ext!strip, where the !strip part is\n         * optional.\n         * @param {String} name the resource name\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\n         * where strip is a boolean.\n         */\n        parseName: function (name) {\n            var modName, ext, temp,\n                strip = false,\n                index = name.indexOf(\".\"),\n                isRelative = name.indexOf('./') === 0 ||\n                             name.indexOf('../') === 0;\n\n            if (index !== -1 && (!isRelative || index > 1)) {\n                modName = name.substring(0, index);\n                ext = name.substring(index + 1, name.length);\n            } else {\n                modName = name;\n            }\n\n            temp = ext || modName;\n            index = temp.indexOf(\"!\");\n            if (index !== -1) {\n                //Pull off the strip arg.\n                strip = temp.substring(index + 1) === \"strip\";\n                temp = temp.substring(0, index);\n                if (ext) {\n                    ext = temp;\n                } else {\n                    modName = temp;\n                }\n            }\n\n            return {\n                moduleName: modName,\n                ext: ext,\n                strip: strip\n            };\n        },\n\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\n\n        /**\n         * Is an URL on another domain. Only works for browser use, returns\n         * false in non-browser environments. Only used to know if an\n         * optimized .js version of a text resource should be loaded\n         * instead.\n         * @param {String} url\n         * @returns Boolean\n         */\n        useXhr: function (url, protocol, hostname, port) {\n            var uProtocol, uHostName, uPort,\n                match = text.xdRegExp.exec(url);\n            if (!match) {\n                return true;\n            }\n            uProtocol = match[2];\n            uHostName = match[3];\n\n            uHostName = uHostName.split(':');\n            uPort = uHostName[1];\n            uHostName = uHostName[0];\n\n            return (!uProtocol || uProtocol === protocol) &&\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\n                   ((!uPort && !uHostName) || uPort === port);\n        },\n\n        finishLoad: function (name, strip, content, onLoad) {\n            content = strip ? text.strip(content) : content;\n            if (masterConfig.isBuild) {\n                buildMap[name] = content;\n            }\n            onLoad(content);\n        },\n\n        load: function (name, req, onLoad, config) {\n            //Name has format: some.module.filext!strip\n            //The strip part is optional.\n            //if strip is present, then that means only get the string contents\n            //inside a body tag in an HTML string. For XML/SVG content it means\n            //removing the <?xml ...?> declarations so the content can be inserted\n            //into the current doc without problems.\n\n            // Do not bother with the work if a build and text will\n            // not be inlined.\n            if (config.isBuild && !config.inlineText) {\n                onLoad();\n                return;\n            }\n\n            masterConfig.isBuild = config.isBuild;\n\n            var parsed = text.parseName(name),\n                nonStripName = parsed.moduleName +\n                    (parsed.ext ? '.' + parsed.ext : ''),\n                url = req.toUrl(nonStripName),\n                useXhr = (masterConfig.useXhr) ||\n                         text.useXhr;\n\n            // Do not load if it is an empty: url\n            if (url.indexOf('empty:') === 0) {\n                onLoad();\n                return;\n            }\n\n            //Load the text. Use XHR if possible and in a browser.\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\n                text.get(url, function (content) {\n                    text.finishLoad(name, parsed.strip, content, onLoad);\n                }, function (err) {\n                    if (onLoad.error) {\n                        onLoad.error(err);\n                    }\n                });\n            } else {\n                //Need to fetch the resource across domains. Assume\n                //the resource has been optimized into a JS module. Fetch\n                //by the module name + extension, but do not include the\n                //!strip part to avoid file system issues.\n                req([nonStripName], function (content) {\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\n                                    parsed.strip, content, onLoad);\n                });\n            }\n        },\n\n        write: function (pluginName, moduleName, write, config) {\n            if (buildMap.hasOwnProperty(moduleName)) {\n                var content = text.jsEscape(buildMap[moduleName]);\n                write.asModule(pluginName + \"!\" + moduleName,\n                               \"define(function () { return '\" +\n                                   content +\n                               \"';});\\n\");\n            }\n        },\n\n        writeFile: function (pluginName, moduleName, req, write, config) {\n            var parsed = text.parseName(moduleName),\n                extPart = parsed.ext ? '.' + parsed.ext : '',\n                nonStripName = parsed.moduleName + extPart,\n                //Use a '.js' file name so that it indicates it is a\n                //script that can be loaded across domains.\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\n\n            //Leverage own load() method to load plugin value, but only\n            //write out values that do not have the strip argument,\n            //to avoid any potential issues with ! in file names.\n            text.load(nonStripName, req, function (value) {\n                //Use own write() method to construct full module value.\n                //But need to create shell that translates writeFile's\n                //write() to the right interface.\n                var textWrite = function (contents) {\n                    return write(fileName, contents);\n                };\n                textWrite.asModule = function (moduleName, contents) {\n                    return write.asModule(moduleName, fileName, contents);\n                };\n\n                text.write(pluginName, nonStripName, textWrite, config);\n            }, config);\n        }\n    };\n\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\n            typeof process !== \"undefined\" &&\n            process.versions &&\n            !!process.versions.node &&\n            !process.versions['node-webkit'])) {\n        //Using special require.nodeRequire, something added by r.js.\n        fs = require.nodeRequire('fs');\n\n        text.get = function (url, callback, errback) {\n            try {\n                var file = fs.readFileSync(url, 'utf8');\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\n                if (file.indexOf('\\uFEFF') === 0) {\n                    file = file.substring(1);\n                }\n                callback(file);\n            } catch (e) {\n                errback(e);\n            }\n        };\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\n            text.createXhr())) {\n        text.get = function (url, callback, errback, headers) {\n            var xhr = text.createXhr(), header;\n            xhr.open('GET', url, true);\n\n            //Allow plugins direct access to xhr headers\n            if (headers) {\n                for (header in headers) {\n                    if (headers.hasOwnProperty(header)) {\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\n                    }\n                }\n            }\n\n            //Allow overrides specified in config\n            if (masterConfig.onXhr) {\n                masterConfig.onXhr(xhr, url);\n            }\n\n            xhr.onreadystatechange = function (evt) {\n                var status, err;\n                //Do not explicitly handle errors, those should be\n                //visible via console output in the browser.\n                if (xhr.readyState === 4) {\n                    status = xhr.status;\n                    if (status > 399 && status < 600) {\n                        //An http 4xx or 5xx error. Signal an error.\n                        err = new Error(url + ' HTTP status: ' + status);\n                        err.xhr = xhr;\n                        errback(err);\n                    } else {\n                        callback(xhr.responseText);\n                    }\n\n                    if (masterConfig.onXhrComplete) {\n                        masterConfig.onXhrComplete(xhr, url);\n                    }\n                }\n            };\n            xhr.send(null);\n        };\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\n        //Why Java, why is this so awkward?\n        text.get = function (url, callback) {\n            var stringBuffer, line,\n                encoding = \"utf-8\",\n                file = new java.io.File(url),\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\n                content = '';\n            try {\n                stringBuffer = new java.lang.StringBuffer();\n                line = input.readLine();\n\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\n                // http://www.unicode.org/faq/utf_bom.html\n\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\n                    // Eat the BOM, since we've already found the encoding on this file,\n                    // and we plan to concatenating this buffer with others; the BOM should\n                    // only appear at the top of a file.\n                    line = line.substring(1);\n                }\n\n                if (line !== null) {\n                    stringBuffer.append(line);\n                }\n\n                while ((line = input.readLine()) !== null) {\n                    stringBuffer.append(lineSeparator);\n                    stringBuffer.append(line);\n                }\n                //Make sure we return a JavaScript string and not a Java string.\n                content = String(stringBuffer.toString()); //String\n            } finally {\n                input.close();\n            }\n            callback(content);\n        };\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\n            typeof Components !== 'undefined' && Components.classes &&\n            Components.interfaces)) {\n        //Avert your gaze!\n        Cc = Components.classes,\n        Ci = Components.interfaces;\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\n\n        text.get = function (url, callback) {\n            var inStream, convertStream, fileObj,\n                readData = {};\n\n            if (xpcIsWindows) {\n                url = url.replace(/\\//g, '\\\\');\n            }\n\n            fileObj = new FileUtils.File(url);\n\n            //XPCOM, you so crazy\n            try {\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\n                           .createInstance(Ci.nsIFileInputStream);\n                inStream.init(fileObj, 1, 0, false);\n\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\n                                .createInstance(Ci.nsIConverterInputStream);\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\n\n                convertStream.readString(inStream.available(), readData);\n                convertStream.close();\n                inStream.close();\n                callback(readData.value);\n            } catch (e) {\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\n            }\n        };\n    }\n    return text;\n});\n"],"file":"text.js"}