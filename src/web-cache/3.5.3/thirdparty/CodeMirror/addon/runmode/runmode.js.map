{"version":3,"sources":["thirdparty/CodeMirror/addon/runmode/runmode.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","runMode","string","modespec","callback","options","mode","getMode","defaults","tabSize","appendChild","ie","ie_lt9","test","navigator","userAgent","document","documentMode","node","col","textContent","text","style","createTextNode","content","pos","idx","indexOf","slice","length","size","i","sp","createElement","className","replace","lines","splitLines","state","startState","e","stream","StringStream","lookAhead","n","baseToken","blankLine","eol","token","current","start"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,QAAU,SAASC,OAAQC,SAAUC,SAAUC,SACxD,IAAIC,KAAON,WAAWO,QAAQP,WAAWQ,SAAUL,UAC/CM,QAAWJ,SAAWA,QAAQI,SAAYT,WAAWQ,SAASC,QAGlE,GAAIL,SAASM,YAAa,CACxB,IAAIC,GACAC,OADK,UAAUC,KAAKC,UAAUC,aACW,MAAzBC,SAASC,cAAwBD,SAASC,aAAe,GACzEC,KAAOd,SAAUe,IAAM,EAC3BD,KAAKE,YAAc,GACnBhB,SAAW,SAASiB,KAAMC,OACxB,GAAY,MAARD,KAKF,OAFAH,KAAKR,YAAYM,SAASO,eAAeX,OAAS,KAAOS,YACzDF,IAAM,GAKR,IAFA,IAAIK,QAAU,GAELC,IAAM,IAAK,CAClB,IAAIC,IAAML,KAAKM,QAAQ,KAAMF,KAC7B,IAAY,GAARC,IAAW,CACbF,SAAWH,KAAKO,MAAMH,KACtBN,KAAOE,KAAKQ,OAASJ,IACrB,MAEAN,KAAOO,IAAMD,IACbD,SAAWH,KAAKO,MAAMH,IAAKC,KAC3B,IAAII,KAAOrB,QAAUU,IAAMV,QAC3BU,KAAOW,KACP,IAAK,IAAIC,EAAI,EAAGA,EAAID,OAAQC,EAAGP,SAAW,IAC1CC,IAAMC,IAAM,EAIhB,GAAIJ,MAAO,CACT,IAAIU,GAAKd,KAAKR,YAAYM,SAASiB,cAAc,SACjDD,GAAGE,UAAY,MAAQZ,MAAMa,QAAQ,MAAO,QAC5CH,GAAGtB,YAAYM,SAASO,eAAeC,eAEvCN,KAAKR,YAAYM,SAASO,eAAeC,WAM/C,IADA,IAAIY,MAAQpC,WAAWqC,WAAWnC,QAASoC,MAASjC,SAAWA,QAAQiC,OAAUtC,WAAWuC,WAAWjC,MAC9FyB,EAAI,EAAGS,EAAIJ,MAAMP,OAAQE,EAAIS,IAAKT,EAAG,CACxCA,GAAG3B,SAAS,MAChB,IAAIqC,OAAS,IAAIzC,WAAW0C,aAAaN,MAAML,GAAI,KAAM,CACvDY,UAAW,SAASC,GAAK,OAAOR,MAAML,EAAIa,IAC1CC,UAAW,eAGb,KADKJ,OAAOvC,QAAUI,KAAKwC,WAAWxC,KAAKwC,UAAUR,QAC7CG,OAAOM,OAAO,CACpB,IAAIzB,MAAQhB,KAAK0C,MAAMP,OAAQH,OAC/BlC,SAASqC,OAAOQ,UAAW3B,MAAOS,EAAGU,OAAOS,MAAOZ,MAAOhC,MAC1DmC,OAAOS,MAAQT,OAAOhB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n\n  // Create a tokenizing callback function if passed-in callback is a DOM element.\n  if (callback.appendChild) {\n    var ie = /MSIE \\d/.test(navigator.userAgent);\n    var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n    var node = callback, col = 0;\n    node.textContent = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n      // Create a node with token style and append it to the callback DOM element.\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i], null, {\n      lookAhead: function(n) { return lines[i + n] },\n      baseToken: function() {}\n    });\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state, mode);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n"],"file":"runmode.js"}