{"version":3,"sources":["thirdparty/CodeMirror/mode/vhdl/vhdl.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","words","str","obj","split","i","length","allCaps","toUpperCase","firstCap","charAt","slice","metaHook","stream","eatWhile","defineMode","config","parserConfig","indentUnit","atoms","hooks","`","$","multiLineStrings","keywords","blockKeywords","isOperatorChar","curPunc","tokenBase","state","ch","next","result","tokenize","tokenString2","tokenString","test","eat","skipToEnd","cur","current","propertyIsEnumerable","toLowerCase","quote","escaped","end","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","firstChar","closing","electricChars","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Originally written by Alf Nielsen, re-written by Michael Zhou\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction words(str) {\n  var obj = {}, words = str.split(\",\");\n  for (var i = 0; i < words.length; ++i) {\n    var allCaps = words[i].toUpperCase();\n    var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n    obj[words[i]] = true;\n    obj[allCaps] = true;\n    obj[firstCap] = true;\n  }\n  return obj;\n}\n\nfunction metaHook(stream) {\n  stream.eatWhile(/[\\w\\$_]/);\n  return \"meta\";\n}\n\nCodeMirror.defineMode(\"vhdl\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      atoms = parserConfig.atoms || words(\"null\"),\n      hooks = parserConfig.hooks || {\"`\": metaHook, \"$\": metaHook},\n      multiLineStrings = parserConfig.multiLineStrings;\n\n  var keywords = words(\"abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,\" +\n      \"body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,\" +\n      \"end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,\" +\n      \"function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,\" +\n      \"literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,\" +\n      \"postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,\" +\n      \"sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor\");\n\n  var blockKeywords = words(\"architecture,entity,begin,case,port,else,elsif,end,for,function,if\");\n\n  var isOperatorChar = /[&|~><!\\)\\(*#%@+\\/=?\\:;}{,\\.\\^\\-\\[\\]]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"') {\n      state.tokenize = tokenString2(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/[\\d']/.test(ch)) {\n      stream.eatWhile(/[\\w\\.']/);\n      return \"number\";\n    }\n    if (ch == \"-\") {\n      if (stream.eat(\"-\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur.toLowerCase())) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"--\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n  function tokenString2(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"--\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string-2\";\n    };\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : indentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-vhdl\", \"vhdl\");\n\n});\n"],"file":"vhdl.js"}