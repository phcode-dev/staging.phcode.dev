{"version":3,"sources":["thirdparty/CodeMirror/mode/crystal/crystal.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","wordRegExp","words","end","RegExp","join","chain","tokenize","stream","state","push","operators","conditionalOperators","indexingOperators","anotherOperators","idents","types","keywords","atomWords","indentKeywordsArray","indentKeywords","indentExpressionKeywordsArray","indentExpressionKeywords","dedentKeywordsArray","dedentKeywords","dedentPunctualsArray","dedentPunctuals","nextTokenizer","def","tokenFollowIdent","fun","macro","tokenMacroDef","class","tokenFollowType","struct","lib","enum","union","matching","[","{","(","<","tokenBase","eatSpace","lastToken","match","tokenMacro","peek","skipToEnd","matched","eat","current","test","blocks","indexOf","currentIndent","lastStyle","pop","hasOwnProperty","tokenNest","tokenQuote","style","embed","delim","next","tokenHereDoc","begin","started","length","nextStyle","escaped","ch","phrase","sol","startState","token","indent","textAfter","replace","indentUnit","fold","electricInput","concat","lineComment","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACV,aAEAA,WAAWC,WAAW,UAAW,SAASC,QACxC,SAASC,WAAWC,MAAOC,KACzB,OAAO,IAAIC,QAAQD,IAAM,GAAK,KAAO,MAAQD,MAAMG,KAAK,KAAO,KAAOF,IAAM,IAAM,QAGpF,SAASG,MAAMC,SAAUC,OAAQC,OAE/B,OADAA,MAAMF,SAASG,KAAKH,UACbA,SAASC,OAAQC,OAG1B,IAAIE,UAAY,+BACZC,qBAAuB,wCACvBC,kBAAoB,iBACpBC,iBAAmB,4BACnBC,OAAS,iDACTC,MAAQ,iDACRC,SAAWhB,WAAW,CACxB,WAAY,QAAS,KAAM,MAAO,QAAS,QAAS,OAAQ,QAAS,MAAO,KAC5E,OAAQ,QAAS,MAAO,SAAU,OAAQ,SAAU,MAAO,MAAO,KAClE,UAAW,kBAAmB,MAAO,QAAS,SAAU,OAAQ,KAAM,MAAO,YAC7E,UAAW,YAAa,SAAU,SAAU,UAAW,SAAU,SAAU,SAC3E,QAAS,OAAQ,OAAQ,SAAU,gBAAiB,QAAS,SAAU,QAAS,OAAQ,QAAS,OACjG,QAAS,UAAW,eAAgB,WAAY,aAE9CiB,UAAYjB,WAAW,CAAC,OAAQ,QAAS,MAAO,SAChDkB,oBAKAC,eAAiBnB,WALK,CACxB,MAAO,MAAO,QACd,QAAS,SAAU,SAAU,MAAO,OAAQ,QAC5C,KAAM,QAGJoB,8BACAC,yBAA2BrB,WADK,CAAC,KAAM,SAAU,OAAQ,QAAS,QAAS,QAAS,SAEpFsB,oBAAsB,CAAC,MAAO,OAAQ,QAAS,SAAU,UACzDC,eAAiBvB,WAAWsB,qBAC5BE,qBAAuB,CAAC,MAAO,MAAO,OACtCC,gBAAkB,IAAItB,OAAO,OAASqB,qBAAqBpB,KAAK,KAAO,MACvEsB,cAAgB,CAClBC,IAAOC,iBAAkBC,IAAOD,iBAAkBE,MAASC,cAC3DC,MAASC,gBAAiBxC,OAAUwC,gBAAiBC,OAAUD,gBAC/DE,IAAOF,gBAAiBG,KAAQH,gBAAiBI,MAASJ,iBAExDK,SAAW,CAACC,IAAK,IAAKC,IAAK,IAAKC,IAAK,IAAKC,IAAK,KAEnD,SAASC,UAAUpC,OAAQC,OACzB,GAAID,OAAOqC,WACT,OAAO,KAIT,GAAuB,MAAnBpC,MAAMqC,WAAqBtC,OAAOuC,MAAM,MAAM,GAChD,OAAOzC,MAAM0C,WAAW,IAAK,KAAMxC,OAAQC,OAG7C,GAAuB,MAAnBA,MAAMqC,WAAqBtC,OAAOuC,MAAM,MAAM,GAChD,OAAOzC,MAAM0C,WAAW,IAAK,KAAMxC,OAAQC,OAI7C,GAAqB,KAAjBD,OAAOyC,OAET,OADAzC,OAAO0C,YACA,UAIT,IAAIC,QACJ,GAAI3C,OAAOuC,MAAMhC,QAIf,OAHAP,OAAO4C,IAAI,QAEXD,QAAU3C,OAAO6C,UACb7C,OAAO4C,IAAI,KACN,OACqB,KAAnB3C,MAAMqC,UACR,WACE7B,SAASqC,KAAKH,UACnB/B,eAAekC,KAAKH,SACL,OAAXA,SAAoB1C,MAAM8C,OAAOC,QAAQ,QAAU,GAAmB,OAAXL,SAAuC,YAAnB1C,MAAMqC,YACzFrC,MAAM8C,OAAO7C,KAAKyC,SAClB1C,MAAMgD,eAAiB,GAEI,YAAnBhD,MAAMiD,WAA4BjD,MAAMiD,YAAcpC,yBAAyBgC,KAAKH,SAG1E,OAAXA,UACT1C,MAAM8C,OAAOI,MACblD,MAAMgD,eAAiB,IAJvBhD,MAAM8C,OAAO7C,KAAKyC,SAClB1C,MAAMgD,eAAiB,GAMrB9B,cAAciC,eAAeT,UAC/B1C,MAAMF,SAASG,KAAKiB,cAAcwB,UAG7B,WACEjC,UAAUoC,KAAKH,SACjB,OAGF,WAKT,GAAI3C,OAAO4C,IAAI,KACb,MAAqB,KAAjB5C,OAAOyC,OACF3C,MAAMuD,UAAU,IAAK,IAAK,QAASrD,OAAQC,QAGpDD,OAAO4C,IAAI,KACX5C,OAAOuC,MAAMhC,SAAWP,OAAOuC,MAAM/B,OAC9B,cAIT,GAAIR,OAAOuC,MAAM/B,OACf,MAAO,MAIT,GAAIR,OAAO4C,IAAI,KACb,OAAI5C,OAAO4C,IAAI,KACN9C,MAAMwD,WAAW,IAAM,QAAQ,GAAQtD,OAAQC,OAC7CD,OAAOuC,MAAMhC,SAAWP,OAAOuC,MAAM/B,QACrCR,OAAOuC,MAAMpC,YAAcH,OAAOuC,MAAMnC,uBAAyBJ,OAAOuC,MAAMlC,mBAChF,QAETL,OAAO4C,IAAI,KACJ,YAIT,GAAI5C,OAAO4C,IAAI,KACb,OAAO9C,MAAMwD,WAAW,IAAM,UAAU,GAAOtD,OAAQC,OAIzD,GAAqB,KAAjBD,OAAOyC,OAAe,CACxB,IAAIc,MAAQ,SACRC,OAAQ,EACRC,MAEJ,GAAIzD,OAAOuC,MAAM,MAEfgB,MAAQ,WACRE,MAAQzD,OAAO0D,YACV,GAAI1D,OAAOuC,MAAM,MACtBiB,OAAQ,EACRC,MAAQzD,OAAO0D,YACV,GAAI1D,OAAOuC,MAAM,MACtBiB,OAAQ,EACRC,MAAQzD,OAAO0D,YAEf,GAAGD,MAAQzD,OAAOuC,MAAM,gBACtBkB,MAAQA,MAAM,OACT,CAAA,GAAIzD,OAAOuC,MAAM,8CAEtB,MAAO,OACF,GAAIvC,OAAO4C,IAAI,KAEpB,MAAO,WAOX,OAHIb,SAASqB,eAAeK,SAC1BA,MAAQ1B,SAAS0B,QAEZ3D,MAAMwD,WAAWG,MAAOF,MAAOC,OAAQxD,OAAQC,OAIxD,OAAI0C,QAAU3C,OAAOuC,MAAM,yBAClBzC,MAAM6D,aAAahB,QAAQ,IAAKA,QAAQ,IAAK3C,OAAQC,OAI1DD,OAAO4C,IAAI,MACb5C,OAAOuC,MAAM,kFACbvC,OAAO4C,IAAI,KACJ,QAIL5C,OAAO4C,IAAI,MACT5C,OAAO4C,IAAI,KACb5C,OAAOuC,MAAM,kBACJvC,OAAO4C,IAAI,KACpB5C,OAAOuC,MAAM,YACJvC,OAAO4C,IAAI,MACpB5C,OAAOuC,MAAM,WAER,UAGLvC,OAAO4C,IAAI,QACb5C,OAAOuC,MAAM,yCACN,UAILvC,OAAOuC,MAAMpC,YACfH,OAAO4C,IAAI,KACJ,YAGL5C,OAAOuC,MAAMnC,uBAAyBJ,OAAOuC,MAAMjC,kBAC9C,YAILqC,QAAU3C,OAAOuC,MAAM,SAAS,IAE3BzC,MAAMuD,UADbV,QAAUA,QAAQ,GACcZ,SAASY,SAAU,MAAO3C,OAAQC,OAIhED,OAAO4C,IAAI,OACb5C,OAAO0D,OACA,SAGT1D,OAAO0D,OACA,MAGT,SAASL,UAAUO,MAAOjE,IAAK4D,MAAOM,SACpC,OAAO,SAAU7D,OAAQC,OACvB,IAAK4D,SAAW7D,OAAOuC,MAAMqB,OAG3B,OAFA3D,MAAMF,SAASE,MAAMF,SAAS+D,OAAS,GAAKT,UAAUO,MAAOjE,IAAK4D,OAAO,GACzEtD,MAAMgD,eAAiB,EAChBM,MAGT,IAAIQ,UAAY3B,UAAUpC,OAAQC,OAOlC,OANID,OAAO6C,YAAclD,MACvBM,MAAMF,SAASoD,MACflD,MAAMgD,eAAiB,EACvBc,UAAYR,OAGPQ,WAIX,SAASvB,WAAWoB,MAAOjE,IAAKkE,SAC9B,OAAO,SAAU7D,OAAQC,OACvB,OAAK4D,SAAW7D,OAAOuC,MAAM,IAAMqB,QACjC3D,MAAMgD,eAAiB,EACvBhD,MAAMF,SAASE,MAAMF,SAAS+D,OAAS,GAAKtB,WAAWoB,MAAOjE,KAAK,GAC5D,QAGLK,OAAOuC,MAAM5C,IAAM,MACrBM,MAAMgD,eAAiB,EACvBhD,MAAMF,SAASoD,MACR,QAGFf,UAAUpC,OAAQC,QAI7B,SAASuB,cAAcxB,OAAQC,OAC7B,GAAID,OAAOqC,WACT,OAAO,KAGT,IAAIM,QACJ,GAAIA,QAAU3C,OAAOuC,MAAMhC,QAAS,CAClC,GAAe,OAAXoC,QACF,MAAO,UAET3C,OAAO4C,IAAI,QAIb,OADA3C,MAAMF,SAASoD,MACR,MAGT,SAAS9B,iBAAiBrB,OAAQC,OAChC,OAAID,OAAOqC,WACF,MAGLrC,OAAOuC,MAAMhC,QACfP,OAAO4C,IAAI,QAEX5C,OAAOuC,MAAMpC,YAAcH,OAAOuC,MAAMnC,uBAAyBJ,OAAOuC,MAAMlC,mBAEhFJ,MAAMF,SAASoD,MACR,OAGT,SAASzB,gBAAgB1B,OAAQC,OAC/B,OAAID,OAAOqC,WACF,MAGTrC,OAAOuC,MAAM/B,OACbP,MAAMF,SAASoD,MACR,OAGT,SAASG,WAAW3D,IAAK4D,MAAOC,OAC9B,OAAO,SAAUxD,OAAQC,OAGvB,IAFA,IAAI+D,SAAU,EAEPhE,OAAOyC,QACZ,GAAKuB,QAyBHhE,OAAO0D,OACPM,SAAU,MA1BE,CACZ,GAAIhE,OAAOuC,MAAM,MAAM,GAErB,OADAtC,MAAMF,SAASG,KAAKsC,WAAW,IAAK,MAC7Be,MAGT,GAAIvD,OAAOuC,MAAM,MAAM,GAErB,OADAtC,MAAMF,SAASG,KAAKsC,WAAW,IAAK,MAC7Be,MAGT,GAAIC,OAASxD,OAAOuC,MAAM,MAAM,GAE9B,OADAtC,MAAMF,SAASG,KAAKmD,UAAU,KAAM,IAAK,SAClCE,MAGT,IAAIU,GAAKjE,OAAO0D,OAEhB,GAAIO,IAAMtE,IAER,OADAM,MAAMF,SAASoD,MACRI,MAGTS,QAAUR,OAAe,MAANS,GAOvB,OAAOV,OAIX,SAASI,aAAaO,OAAQV,OAC5B,OAAO,SAAUxD,OAAQC,OACvB,GAAID,OAAOmE,QACTnE,OAAOqC,WACHrC,OAAOuC,MAAM2B,SAEf,OADAjE,MAAMF,SAASoD,MACR,SAKX,IADA,IAAIa,SAAU,EACPhE,OAAOyC,QACZ,GAAKuB,QAkBHhE,OAAO0D,OACPM,SAAU,MAnBE,CACZ,GAAIhE,OAAOuC,MAAM,MAAM,GAErB,OADAtC,MAAMF,SAASG,KAAKsC,WAAW,IAAK,MAC7B,SAGT,GAAIxC,OAAOuC,MAAM,MAAM,GAErB,OADAtC,MAAMF,SAASG,KAAKsC,WAAW,IAAK,MAC7B,SAGT,GAAIgB,OAASxD,OAAOuC,MAAM,MAAM,GAE9B,OADAtC,MAAMF,SAASG,KAAKmD,UAAU,KAAM,IAAK,SAClC,SAGTW,QAAUR,OAA0B,MAAjBxD,OAAO0D,OAO9B,MAAO,UAIX,MAAO,CACLU,WAAY,WACV,MAAO,CACLrE,SAAU,CAACqC,WACXa,cAAe,EACfX,UAAW,KACXY,UAAW,KACXH,OAAQ,KAIZsB,MAAO,SAAUrE,OAAQC,OACvB,IAAIsD,MAAQtD,MAAMF,SAASE,MAAMF,SAAS+D,OAAS,GAAG9D,OAAQC,OAC1DoE,MAAQrE,OAAO6C,UAOnB,OALIU,OAAkB,WAATA,QACXtD,MAAMqC,UAAY+B,MAClBpE,MAAMiD,UAAYK,OAGbA,OAGTe,OAAQ,SAAUrE,MAAOsE,WAGvB,OAFAA,UAAYA,UAAUC,QAAQ,mCAAoC,IAE9DxD,eAAe8B,KAAKyB,YAAcrD,gBAAgB4B,KAAKyB,WAClD/E,OAAOiF,YAAcxE,MAAMgD,cAAgB,GAG7CzD,OAAOiF,WAAaxE,MAAMgD,eAGnCyB,KAAM,SACNC,cAAelF,WAAWwB,qBAAqB2D,OAAO7D,sBAAsB,GAC5E8D,YAAa,OAIjBvF,WAAWwF,WAAW,iBAAkB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"crystal\", function(config) {\n    function wordRegExp(words, end) {\n      return new RegExp((end ? \"\" : \"^\") + \"(?:\" + words.join(\"|\") + \")\" + (end ? \"$\" : \"\\\\b\"));\n    }\n\n    function chain(tokenize, stream, state) {\n      state.tokenize.push(tokenize);\n      return tokenize(stream, state);\n    }\n\n    var operators = /^(?:[-+/%|&^]|\\*\\*?|[<>]{2})/;\n    var conditionalOperators = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/;\n    var indexingOperators = /^(?:\\[\\][?=]?)/;\n    var anotherOperators = /^(?:\\.(?:\\.{2})?|->|[?:])/;\n    var idents = /^[a-z_\\u009F-\\uFFFF][a-zA-Z0-9_\\u009F-\\uFFFF]*/;\n    var types = /^[A-Z_\\u009F-\\uFFFF][a-zA-Z0-9_\\u009F-\\uFFFF]*/;\n    var keywords = wordRegExp([\n      \"abstract\", \"alias\", \"as\", \"asm\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"do\",\n      \"else\", \"elsif\", \"end\", \"ensure\", \"enum\", \"extend\", \"for\", \"fun\", \"if\",\n      \"include\", \"instance_sizeof\", \"lib\", \"macro\", \"module\", \"next\", \"of\", \"out\", \"pointerof\",\n      \"private\", \"protected\", \"rescue\", \"return\", \"require\", \"select\", \"sizeof\", \"struct\",\n      \"super\", \"then\", \"type\", \"typeof\", \"uninitialized\", \"union\", \"unless\", \"until\", \"when\", \"while\", \"with\",\n      \"yield\", \"__DIR__\", \"__END_LINE__\", \"__FILE__\", \"__LINE__\"\n    ]);\n    var atomWords = wordRegExp([\"true\", \"false\", \"nil\", \"self\"]);\n    var indentKeywordsArray = [\n      \"def\", \"fun\", \"macro\",\n      \"class\", \"module\", \"struct\", \"lib\", \"enum\", \"union\",\n      \"do\", \"for\"\n    ];\n    var indentKeywords = wordRegExp(indentKeywordsArray);\n    var indentExpressionKeywordsArray = [\"if\", \"unless\", \"case\", \"while\", \"until\", \"begin\", \"then\"];\n    var indentExpressionKeywords = wordRegExp(indentExpressionKeywordsArray);\n    var dedentKeywordsArray = [\"end\", \"else\", \"elsif\", \"rescue\", \"ensure\"];\n    var dedentKeywords = wordRegExp(dedentKeywordsArray);\n    var dedentPunctualsArray = [\"\\\\)\", \"\\\\}\", \"\\\\]\"];\n    var dedentPunctuals = new RegExp(\"^(?:\" + dedentPunctualsArray.join(\"|\") + \")$\");\n    var nextTokenizer = {\n      \"def\": tokenFollowIdent, \"fun\": tokenFollowIdent, \"macro\": tokenMacroDef,\n      \"class\": tokenFollowType, \"module\": tokenFollowType, \"struct\": tokenFollowType,\n      \"lib\": tokenFollowType, \"enum\": tokenFollowType, \"union\": tokenFollowType\n    };\n    var matching = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\", \"<\": \">\"};\n\n    function tokenBase(stream, state) {\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      // Macros\n      if (state.lastToken != \"\\\\\" && stream.match(\"{%\", false)) {\n        return chain(tokenMacro(\"%\", \"%\"), stream, state);\n      }\n\n      if (state.lastToken != \"\\\\\" && stream.match(\"{{\", false)) {\n        return chain(tokenMacro(\"{\", \"}\"), stream, state);\n      }\n\n      // Comments\n      if (stream.peek() == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      // Variables and keywords\n      var matched;\n      if (stream.match(idents)) {\n        stream.eat(/[?!]/);\n\n        matched = stream.current();\n        if (stream.eat(\":\")) {\n          return \"atom\";\n        } else if (state.lastToken == \".\") {\n          return \"property\";\n        } else if (keywords.test(matched)) {\n          if (indentKeywords.test(matched)) {\n            if (!(matched == \"fun\" && state.blocks.indexOf(\"lib\") >= 0) && !(matched == \"def\" && state.lastToken == \"abstract\")) {\n              state.blocks.push(matched);\n              state.currentIndent += 1;\n            }\n          } else if ((state.lastStyle == \"operator\" || !state.lastStyle) && indentExpressionKeywords.test(matched)) {\n            state.blocks.push(matched);\n            state.currentIndent += 1;\n          } else if (matched == \"end\") {\n            state.blocks.pop();\n            state.currentIndent -= 1;\n          }\n\n          if (nextTokenizer.hasOwnProperty(matched)) {\n            state.tokenize.push(nextTokenizer[matched]);\n          }\n\n          return \"keyword\";\n        } else if (atomWords.test(matched)) {\n          return \"atom\";\n        }\n\n        return \"variable\";\n      }\n\n      // Class variables and instance variables\n      // or attributes\n      if (stream.eat(\"@\")) {\n        if (stream.peek() == \"[\") {\n          return chain(tokenNest(\"[\", \"]\", \"meta\"), stream, state);\n        }\n\n        stream.eat(\"@\");\n        stream.match(idents) || stream.match(types);\n        return \"variable-2\";\n      }\n\n      // Constants and types\n      if (stream.match(types)) {\n        return \"tag\";\n      }\n\n      // Symbols or ':' operator\n      if (stream.eat(\":\")) {\n        if (stream.eat(\"\\\"\")) {\n          return chain(tokenQuote(\"\\\"\", \"atom\", false), stream, state);\n        } else if (stream.match(idents) || stream.match(types) ||\n                   stream.match(operators) || stream.match(conditionalOperators) || stream.match(indexingOperators)) {\n          return \"atom\";\n        }\n        stream.eat(\":\");\n        return \"operator\";\n      }\n\n      // Strings\n      if (stream.eat(\"\\\"\")) {\n        return chain(tokenQuote(\"\\\"\", \"string\", true), stream, state);\n      }\n\n      // Strings or regexps or macro variables or '%' operator\n      if (stream.peek() == \"%\") {\n        var style = \"string\";\n        var embed = true;\n        var delim;\n\n        if (stream.match(\"%r\")) {\n          // Regexps\n          style = \"string-2\";\n          delim = stream.next();\n        } else if (stream.match(\"%w\")) {\n          embed = false;\n          delim = stream.next();\n        } else if (stream.match(\"%q\")) {\n          embed = false;\n          delim = stream.next();\n        } else {\n          if(delim = stream.match(/^%([^\\w\\s=])/)) {\n            delim = delim[1];\n          } else if (stream.match(/^%[a-zA-Z_\\u009F-\\uFFFF][\\w\\u009F-\\uFFFF]*/)) {\n            // Macro variables\n            return \"meta\";\n          } else if (stream.eat('%')) {\n            // '%' operator\n            return \"operator\";\n          }\n        }\n\n        if (matching.hasOwnProperty(delim)) {\n          delim = matching[delim];\n        }\n        return chain(tokenQuote(delim, style, embed), stream, state);\n      }\n\n      // Here Docs\n      if (matched = stream.match(/^<<-('?)([A-Z]\\w*)\\1/)) {\n        return chain(tokenHereDoc(matched[2], !matched[1]), stream, state)\n      }\n\n      // Characters\n      if (stream.eat(\"'\")) {\n        stream.match(/^(?:[^']|\\\\(?:[befnrtv0'\"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\\{[0-9a-fA-F]{1,6}\\})))/);\n        stream.eat(\"'\");\n        return \"atom\";\n      }\n\n      // Numbers\n      if (stream.eat(\"0\")) {\n        if (stream.eat(\"x\")) {\n          stream.match(/^[0-9a-fA-F_]+/);\n        } else if (stream.eat(\"o\")) {\n          stream.match(/^[0-7_]+/);\n        } else if (stream.eat(\"b\")) {\n          stream.match(/^[01_]+/);\n        }\n        return \"number\";\n      }\n\n      if (stream.eat(/^\\d/)) {\n        stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+-]?\\d+)?/);\n        return \"number\";\n      }\n\n      // Operators\n      if (stream.match(operators)) {\n        stream.eat(\"=\"); // Operators can follow assign symbol.\n        return \"operator\";\n      }\n\n      if (stream.match(conditionalOperators) || stream.match(anotherOperators)) {\n        return \"operator\";\n      }\n\n      // Parens and braces\n      if (matched = stream.match(/[({[]/, false)) {\n        matched = matched[0];\n        return chain(tokenNest(matched, matching[matched], null), stream, state);\n      }\n\n      // Escapes\n      if (stream.eat(\"\\\\\")) {\n        stream.next();\n        return \"meta\";\n      }\n\n      stream.next();\n      return null;\n    }\n\n    function tokenNest(begin, end, style, started) {\n      return function (stream, state) {\n        if (!started && stream.match(begin)) {\n          state.tokenize[state.tokenize.length - 1] = tokenNest(begin, end, style, true);\n          state.currentIndent += 1;\n          return style;\n        }\n\n        var nextStyle = tokenBase(stream, state);\n        if (stream.current() === end) {\n          state.tokenize.pop();\n          state.currentIndent -= 1;\n          nextStyle = style;\n        }\n\n        return nextStyle;\n      };\n    }\n\n    function tokenMacro(begin, end, started) {\n      return function (stream, state) {\n        if (!started && stream.match(\"{\" + begin)) {\n          state.currentIndent += 1;\n          state.tokenize[state.tokenize.length - 1] = tokenMacro(begin, end, true);\n          return \"meta\";\n        }\n\n        if (stream.match(end + \"}\")) {\n          state.currentIndent -= 1;\n          state.tokenize.pop();\n          return \"meta\";\n        }\n\n        return tokenBase(stream, state);\n      };\n    }\n\n    function tokenMacroDef(stream, state) {\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var matched;\n      if (matched = stream.match(idents)) {\n        if (matched == \"def\") {\n          return \"keyword\";\n        }\n        stream.eat(/[?!]/);\n      }\n\n      state.tokenize.pop();\n      return \"def\";\n    }\n\n    function tokenFollowIdent(stream, state) {\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      if (stream.match(idents)) {\n        stream.eat(/[!?]/);\n      } else {\n        stream.match(operators) || stream.match(conditionalOperators) || stream.match(indexingOperators);\n      }\n      state.tokenize.pop();\n      return \"def\";\n    }\n\n    function tokenFollowType(stream, state) {\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      stream.match(types);\n      state.tokenize.pop();\n      return \"def\";\n    }\n\n    function tokenQuote(end, style, embed) {\n      return function (stream, state) {\n        var escaped = false;\n\n        while (stream.peek()) {\n          if (!escaped) {\n            if (stream.match(\"{%\", false)) {\n              state.tokenize.push(tokenMacro(\"%\", \"%\"));\n              return style;\n            }\n\n            if (stream.match(\"{{\", false)) {\n              state.tokenize.push(tokenMacro(\"{\", \"}\"));\n              return style;\n            }\n\n            if (embed && stream.match(\"#{\", false)) {\n              state.tokenize.push(tokenNest(\"#{\", \"}\", \"meta\"));\n              return style;\n            }\n\n            var ch = stream.next();\n\n            if (ch == end) {\n              state.tokenize.pop();\n              return style;\n            }\n\n            escaped = embed && ch == \"\\\\\";\n          } else {\n            stream.next();\n            escaped = false;\n          }\n        }\n\n        return style;\n      };\n    }\n\n    function tokenHereDoc(phrase, embed) {\n      return function (stream, state) {\n        if (stream.sol()) {\n          stream.eatSpace()\n          if (stream.match(phrase)) {\n            state.tokenize.pop();\n            return \"string\";\n          }\n        }\n\n        var escaped = false;\n        while (stream.peek()) {\n          if (!escaped) {\n            if (stream.match(\"{%\", false)) {\n              state.tokenize.push(tokenMacro(\"%\", \"%\"));\n              return \"string\";\n            }\n\n            if (stream.match(\"{{\", false)) {\n              state.tokenize.push(tokenMacro(\"{\", \"}\"));\n              return \"string\";\n            }\n\n            if (embed && stream.match(\"#{\", false)) {\n              state.tokenize.push(tokenNest(\"#{\", \"}\", \"meta\"));\n              return \"string\";\n            }\n\n            escaped = embed && stream.next() == \"\\\\\";\n          } else {\n            stream.next();\n            escaped = false;\n          }\n        }\n\n        return \"string\";\n      }\n    }\n\n    return {\n      startState: function () {\n        return {\n          tokenize: [tokenBase],\n          currentIndent: 0,\n          lastToken: null,\n          lastStyle: null,\n          blocks: []\n        };\n      },\n\n      token: function (stream, state) {\n        var style = state.tokenize[state.tokenize.length - 1](stream, state);\n        var token = stream.current();\n\n        if (style && style != \"comment\") {\n          state.lastToken = token;\n          state.lastStyle = style;\n        }\n\n        return style;\n      },\n\n      indent: function (state, textAfter) {\n        textAfter = textAfter.replace(/^\\s*(?:\\{%)?\\s*|\\s*(?:%\\})?\\s*$/g, \"\");\n\n        if (dedentKeywords.test(textAfter) || dedentPunctuals.test(textAfter)) {\n          return config.indentUnit * (state.currentIndent - 1);\n        }\n\n        return config.indentUnit * state.currentIndent;\n      },\n\n      fold: \"indent\",\n      electricInput: wordRegExp(dedentPunctualsArray.concat(dedentKeywordsArray), true),\n      lineComment: '#'\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-crystal\", \"crystal\");\n});\n"],"file":"crystal.js"}