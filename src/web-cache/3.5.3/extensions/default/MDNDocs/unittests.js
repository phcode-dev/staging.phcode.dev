define(function(require,exports,module){var SpecRunnerUtils=brackets.getModule("spec/SpecRunnerUtils"),main=require("main"),InlineDocsViewer=require("InlineDocsViewer"),testCSS=require("text!unittest-files/test1.css"),testHTML=require("text!unittest-files/test1.html");describe("unit:MDNDocs",function(){var testCSSInfo=SpecRunnerUtils.parseOffsetsFromText(testCSS),testHTMLInfo=SpecRunnerUtils.parseOffsetsFromText(testHTML),editor,doc,pos;async function queryInlineAtPos(info,offset,expectInline,expectedProperty){var widget=null,promise;pos=info.offsets[offset],editor.setSelection(pos),promise=main._inlineProvider(editor,pos),expectInline&&expect(promise).toBeTruthy(),promise&&(promise.done(function(result){widget=result}),expectInline?await awaitsForDone(promise,"MDNDocs _inlineProvider",1e3):await awaitsForFail(promise,"MDNDocs _inlineProvider",1e3)),promise&&(expectInline?(expect(widget).toBeTruthy(),expect(widget.$htmlContent.find(".css-prop-summary h1").text()).toBe(expectedProperty)):expect(widget).toBeNull())}describe("InlineDocsProvider database",function(){it("should retrieve the CSS docs database",async function(){var json;main._getDocs("css.json").done(function(result){json=result}),await awaitsFor(function(){return void 0!==json},"read css.json database",5e3),expect(Object.keys(json).length).toBeGreaterThan(0)}),it("should retrieve the HTML docs database",async function(){var json;main._getDocs("html.json").done(function(result){json=result}),await awaitsFor(function(){return void 0!==json},"read html.json database",5e3),expect(Object.keys(json).length).toBeGreaterThan(0)})}),describe("InlineDocsProvider parsing in CSS",function(){beforeEach(function(){var mock=SpecRunnerUtils.createMockEditor(testCSSInfo.text,"css");editor=mock.editor,doc=mock.doc}),afterEach(function(){SpecRunnerUtils.destroyMockEditor(doc)}),it("should open docs when the selection is on a CSS property",async function(){await queryInlineAtPos(testCSSInfo,1,!0,"border"),await queryInlineAtPos(testCSSInfo,2,!0,"border")}),it("should not open docs when the selection is not on a CSS property",async function(){await queryInlineAtPos(testCSSInfo,0,!1),await queryInlineAtPos(testCSSInfo,5,!1)}),it("should not open docs for an invalid CSS property",async function(){await queryInlineAtPos(testCSSInfo,3,!1)}),it("should open docs for a vendor-prefixed CSS property",async function(){await queryInlineAtPos(testCSSInfo,6,!0,"animation")}),it("should not open docs for an invalid CSS property (looking like a vendor-prefixed one)",async function(){await queryInlineAtPos(testCSSInfo,7,!1)})}),describe("InlineDocsProvider parsing in HTML",function(){beforeEach(function(){var mock=SpecRunnerUtils.createMockEditor(testHTMLInfo.text,"html");editor=mock.editor,doc=mock.doc}),afterEach(function(){SpecRunnerUtils.destroyMockEditor(doc)}),it("should open docs for CSS in a <style> block",async function(){await queryInlineAtPos(testHTMLInfo,0,!0,"border")}),it("should open docs when the selection is on an HTML tag",async function(){await queryInlineAtPos(testHTMLInfo,1,!0,"background-color")}),it("should not open docs when the selection is on an invalid HTML tag",async function(){await queryInlineAtPos(testHTMLInfo,2,!1)}),it("should not open docs when the selection is not an HTML tag",async function(){await queryInlineAtPos(testHTMLInfo,3,!1),await queryInlineAtPos(testHTMLInfo,4,!1)}),it("should open docs when the selection is on an HTML attribute",async function(){await queryInlineAtPos(testHTMLInfo,5,!0,"<div>")}),it("should open docs for tag (fallback) when the selection is on an HTML attribute's value",async function(){await queryInlineAtPos(testHTMLInfo,6,!0,"<div>")}),it("should open docs for tag (fallback) when the selection is on an invalid HTML attribute",async function(){await queryInlineAtPos(testHTMLInfo,7,!0,"<div>")}),it("should not open docs when the selection is on an invalid HTML attribute on an invalid HTML tag",async function(){await queryInlineAtPos(testHTMLInfo,8,!1)})}),describe("InlineDocsViewer",function(){function createCssPropDetails(summary,url,valuesArr){var values=[],details={SUMMARY:summary,URL:url,VALUES:values};return valuesArr.forEach(function(value){values.push({title:value[0]||void 0,description:value[1]||void 0})}),details}it("should add titles to all links",function(){var prop="my-css-prop",url,details=createCssPropDetails(prop,"http://dev.brackets.io/wiki/css/properties/my-css-prop",[["normal","See <a href='http://dev.brackets.io/wiki/css/properties/foo-css-prop'>foo-css-prop</a>"]]),viewer,$a,$links=new InlineDocsViewer(prop,details).$htmlContent.find("a:not(.close)");expect($links.length).toBe(2),$links.each(function(i,anchor){$a=$(anchor),expect($a.attr("title")).toBe($a.attr("href"))})})})})});
//# sourceMappingURL=unittests.js.map
