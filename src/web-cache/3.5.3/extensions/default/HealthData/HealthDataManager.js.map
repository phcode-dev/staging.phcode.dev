{"version":3,"sources":["extensions/default/HealthData/HealthDataManager.js"],"names":["define","require","exports","module","AppInit","brackets","getModule","PreferencesManager","Strings","Metrics","SendToAnalytics","prefs","getExtensionPrefs","ONE_SECOND","TEN_SECOND","ONE_MINUTE","MAX_DAYS_TO_KEEP_COUNTS","USAGE_COUNTS_KEY","healthDataDisabled","_pruneUsageData","usageData","getViewState","dateKeys","Object","keys","dateBefore60Days","Date","setDate","getDate","length","dateKey","date","setViewState","_trackUsageInfo","setInterval","dateNow","today","toISOString","split","definePreference","description","DESCRIPTION_HEALTH_DATA_TRACKING","on","get","setDisabled","logger","loggingOptions","appReady","init","sendPlatformMetrics","sendThemesMetrics","setTimeout","sendStartupPerformanceMetrics"],"mappings":"AA2BAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,IAAIC,QAAsBC,SAASC,UAAU,iBACzCC,mBAAsBF,SAASC,UAAU,kCACzCE,QAAsBH,SAASC,UAAU,WACzCG,QAAsBJ,SAASC,UAAU,iBACzCI,gBAAsBT,QAAQ,mBAC9BU,MAAsBJ,mBAAmBK,kBAAkB,cAC3DC,WAAsB,IACtBC,WAAsB,IACtBC,WAAsB,IACtBC,wBAA0B,GAE1BC,iBAAsB,kBAE1B,IAAIC,mBAaJ,SAASC,kBACL,IAAIC,UAAYb,mBAAmBc,aAAaJ,mBAAqB,GACjEK,SAAWC,OAAOC,KAAKJ,WACvBK,iBAAmB,IAAIC,KAE3B,GADAD,iBAAiBE,QAAQF,iBAAiBG,UAAYZ,yBACnDM,SAASO,OAASb,wBACjB,IAAI,IAAIc,WAAWR,SAAS,CACxB,IAAIS,KAAO,IAAIL,KAAKI,SACVL,yBACCL,UAAUU,SAK7BvB,mBAAmByB,aAAaf,iBAAkBG,WAGtD,SAASa,kBACLd,kBACAe,YAAY,KACR,GAAGhB,mBACC,OAEJ,IAAIE,UAAYb,mBAAmBc,aAAaJ,mBAAqB,GACjEkB,QACAC,OADU,IAAIV,MACEW,cAAcC,MAAM,KAAK,GAC7ClB,UAAUgB,QAAUhB,UAAUgB,QAAU,GAAK,EAE7C7B,mBAAmByB,aAAaf,iBAAkBG,YACnDL,YAxCPJ,MAAM4B,iBAAiB,qBAAsB,WAAW,EAAM,CAC1DC,YAAahC,QAAQiC,mCAGzB9B,MAAM+B,GAAG,SAAU,qBAAsB,WACrCxB,oBAAsBP,MAAMgC,IAAI,sBAChClC,QAAQmC,YAAY1B,oBACpB2B,OAAOC,eAAe5B,mBAAqBA,qBAoC/Cd,QAAQ2C,SAAS,WACbtC,QAAQuC,OACR9B,oBAAsBP,MAAMgC,IAAI,sBAChClC,QAAQmC,YAAY1B,oBACpBR,gBAAgBuC,sBAChBvC,gBAAgBwC,oBAChBjB,kBACAkB,WAAWzC,gBAAgB0C,8BA1DL","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2015 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global logger*/\ndefine(function (require, exports, module) {\n    var AppInit             = brackets.getModule(\"utils/AppInit\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        Strings             = brackets.getModule(\"strings\"),\n        Metrics             = brackets.getModule(\"utils/Metrics\"),\n        SendToAnalytics     = require(\"SendToAnalytics\"),\n        prefs               = PreferencesManager.getExtensionPrefs(\"healthData\"),\n        ONE_SECOND          = 1000,\n        TEN_SECOND          = 10 * ONE_SECOND,\n        ONE_MINUTE          = 60000,\n        MAX_DAYS_TO_KEEP_COUNTS = 60,\n        // 'healthDataUsage' key is used in other places tho private to phoenix. search for other usage before rename\n        USAGE_COUNTS_KEY    = \"healthDataUsage\";\n\n    let healthDataDisabled;\n\n    prefs.definePreference(\"healthDataTracking\", \"boolean\", true, {\n        description: Strings.DESCRIPTION_HEALTH_DATA_TRACKING\n    });\n\n    prefs.on(\"change\", \"healthDataTracking\", function () {\n        healthDataDisabled = !prefs.get(\"healthDataTracking\");\n        Metrics.setDisabled(healthDataDisabled);\n        logger.loggingOptions.healthDataDisabled = healthDataDisabled;\n    });\n\n    // we delete all usage counts greater than MAX_DAYS_TO_KEEP_COUNTS days\n    function _pruneUsageData() {\n        let usageData = PreferencesManager.getViewState(USAGE_COUNTS_KEY) || {},\n            dateKeys = Object.keys(usageData),\n            dateBefore60Days = new Date();\n        dateBefore60Days.setDate(dateBefore60Days.getDate() - MAX_DAYS_TO_KEEP_COUNTS);\n        if(dateKeys.length > MAX_DAYS_TO_KEEP_COUNTS) {\n            for(let dateKey of dateKeys){\n                let date = new Date(dateKey);\n                if(date < dateBefore60Days) {\n                    delete usageData[dateKey];\n                }\n            }\n        }\n        // low priority, we do not want to save this right now\n        PreferencesManager.setViewState(USAGE_COUNTS_KEY, usageData);\n    }\n\n    function _trackUsageInfo() {\n        _pruneUsageData();\n        setInterval(()=>{\n            if(healthDataDisabled){\n                return;\n            }\n            let usageData = PreferencesManager.getViewState(USAGE_COUNTS_KEY) || {};\n            let dateNow = new Date();\n            let today = dateNow.toISOString().split('T')[0]; // yyyy-mm-dd format\n            usageData[today] = (usageData[today] || 0) + 1;\n            // low priority, we do not want to save this right now\n            PreferencesManager.setViewState(USAGE_COUNTS_KEY, usageData);\n        }, ONE_MINUTE);\n    }\n\n    AppInit.appReady(function () {\n        Metrics.init();\n        healthDataDisabled = !prefs.get(\"healthDataTracking\");\n        Metrics.setDisabled(healthDataDisabled);\n        SendToAnalytics.sendPlatformMetrics();\n        SendToAnalytics.sendThemesMetrics();\n        _trackUsageInfo();\n        setTimeout(SendToAnalytics.sendStartupPerformanceMetrics, TEN_SECOND);\n    });\n});\n"],"file":"HealthDataManager.js"}