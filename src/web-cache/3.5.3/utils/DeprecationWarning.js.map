{"version":3,"sources":["utils/DeprecationWarning.js"],"names":["define","require","exports","module","EventDispatcher","displayedWarnings","_trimStack","stack","indexOfFirstRequireJSline","substr","indexOf","lastIndexOf","deprecationWarning","message","oncePerCaller","callerStackPos","Error","callerLocation","split","console","warn","deprecateEvent","outbound","inbound","oldEventName","newEventName","canonicalOutboundName","canonicalInboundName","markDeprecated","on","triggerWithArray","Array","prototype","slice","call","arguments","deprecateConstant","obj","oldId","newId","warning","newValue","Object","defineProperty","get"],"mappings":"AAyBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,gBAAkBH,QAAQ,yBAG1BI,kBAAoB,GAOxB,SAASC,WAAWC,OAChB,IAAIC,0BAaJ,OALmC,KADnCA,2BAJAD,MAAQA,MAAME,OAAOF,MAAMG,QAAQ,OAAS,IAIVA,QAAQ,2BAEtCF,0BAA4BD,MAAMI,YAAY,IAAKH,2BAA6B,EAChFD,MAAQA,MAAME,OAAO,EAAGD,4BAGrBD,MAeX,SAASK,mBAAmBC,QAASC,cAAeC,gBAEhD,GAAKF,UAAaC,gBAAiBT,kBAAkBQ,UAArD,CAUA,IAAIN,OAAQ,IAAIS,OAAQT,MACpBU,eAAiBV,MAAMW,MAAM,MAAMH,gBAAkB,GACrDD,eAAiBT,kBAAkBQ,UAAYR,kBAAkBQ,SAASI,kBAI9EE,QAAQC,KAAKP,QAAU,KAAOP,WAAWC,QACpCF,kBAAkBQ,WACnBR,kBAAkBQ,SAAW,IAEjCR,kBAAkBQ,SAASI,iBAAkB,IAuBjD,SAASI,eAAeC,SAAUC,QAASC,aAAcC,aAAcC,sBAAuBC,sBAE1FvB,gBAAgBwB,eAAeN,SAAUE,aAAcG,sBAGvDJ,QAAQM,GAAGJ,aAAc,WAErBrB,gBAAgB0B,iBAAiBR,SAAUE,aAAcO,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,MAUvG,SAASC,kBAAkBC,IAAKC,MAAOC,OACnC,IAAIC,QAAc,aAAeD,MAAQ,qBAAuBD,MAC5DG,SAAcJ,IAAIE,OAEtBG,OAAOC,eAAeN,IAAKC,MAAO,CAC9BM,IAAK,WAED,OADAhC,mBAAmB4B,SAAS,GACrBC,YAMnBvC,QAAQU,mBAAuBA,mBAC/BV,QAAQmB,eAAuBA,eAC/BnB,QAAQkC,kBAAyBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n *  Utilities functions to display deprecation warning in the console.\n *\n */\ndefine(function (require, exports, module) {\n\n\n    var EventDispatcher = require(\"utils/EventDispatcher\");\n\n\n    var displayedWarnings = {};\n\n    /**\n     * Trim the stack so that it does not have the call to this module,\n     * and all the calls to require.js to load the extension that shows\n     * this deprecation warning.\n     */\n    function _trimStack(stack) {\n        var indexOfFirstRequireJSline;\n\n        // Remove everything in the stack up to the end of the line that shows this module file path\n        stack = stack.substr(stack.indexOf(\")\\n\") + 2);\n\n        // Find the very first line of require.js in the stack if the call is from an extension.\n        // Remove all those lines from the call stack.\n        indexOfFirstRequireJSline = stack.indexOf(\"requirejs/require.js\");\n        if (indexOfFirstRequireJSline !== -1) {\n            indexOfFirstRequireJSline = stack.lastIndexOf(\")\", indexOfFirstRequireJSline) + 1;\n            stack = stack.substr(0, indexOfFirstRequireJSline);\n        }\n\n        return stack;\n    }\n\n    /**\n     * Show deprecation warning with the call stack if it\n     * has never been displayed before.\n     * @param {!string} message The deprecation message to be displayed.\n     * @param {boolean=} oncePerCaller If true, displays the message once for each unique call location.\n     *     If false (the default), only displays the message once no matter where it's called from.\n     *     Note that setting this to true can cause a slight performance hit (because it has to generate\n     *     a stack trace), so don't set this for functions that you expect to be called from performance-\n     *     sensitive code (e.g. tight loops).\n     * @param {number=} callerStackPos Only used if oncePerCaller=true. Overrides the `Error().stack` depth\n     *     where the client-code caller can be found. Only needed if extra shim layers are involved.\n     */\n    function deprecationWarning(message, oncePerCaller, callerStackPos) {\n        // If oncePerCaller isn't set, then only show the message once no matter who calls it.\n        if (!message || (!oncePerCaller && displayedWarnings[message])) {\n            return;\n        }\n\n        // Don't show the warning again if we've already gotten it from the current caller.\n        // The true caller location is the fourth line in the stack trace:\n        // * 0 is the word \"Error\"\n        // * 1 is this function\n        // * 2 is the caller of this function (the one throwing the deprecation warning)\n        // * 3 is the actual caller of the deprecated function.\n        var stack = new Error().stack,\n            callerLocation = stack.split(\"\\n\")[callerStackPos || 3];\n        if (oncePerCaller && displayedWarnings[message] && displayedWarnings[message][callerLocation]) {\n            return;\n        }\n\n        console.warn(message + \"\\n\" + _trimStack(stack));\n        if (!displayedWarnings[message]) {\n            displayedWarnings[message] = {};\n        }\n        displayedWarnings[message][callerLocation] = true;\n    }\n\n\n    /**\n     * Show a deprecation warning if there are listeners for the event\n     *\n     * ```\n     *    DeprecationWarning.deprecateEvent(exports,\n     *                                      MainViewManager,\n     *                                      \"workingSetAdd\",\n     *                                      \"workingSetAdd\",\n     *                                      \"DocumentManager.workingSetAdd\",\n     *                                      \"MainViewManager.workingSetAdd\");\n     * ```\n     *\n     * @param {Object} outbound - the object with the old event to dispatch\n     * @param {Object} inbound - the object with the new event to map to the old event\n     * @param {string} oldEventName - the name of the old event\n     * @param {string} newEventName - the name of the new event\n     * @param {string=} canonicalOutboundName - the canonical name of the old event\n     * @param {string=} canonicalInboundName - the canonical name of the new event\n     */\n    function deprecateEvent(outbound, inbound, oldEventName, newEventName, canonicalOutboundName, canonicalInboundName) {\n        // Mark deprecated so EventDispatcher.on() will emit warnings\n        EventDispatcher.markDeprecated(outbound, oldEventName, canonicalInboundName);\n\n        // create an event handler for the new event to listen for\n        inbound.on(newEventName, function () {\n            // Dispatch the event in case anyone is still listening\n            EventDispatcher.triggerWithArray(outbound, oldEventName, Array.prototype.slice.call(arguments, 1));\n        });\n    }\n\n\n    /**\n     * Create a deprecation warning and action for updated constants\n     * @param {!string} old Menu Id\n     * @param {!string} new Menu Id\n     */\n    function deprecateConstant(obj, oldId, newId) {\n        var warning     = \"Use Menus.\" + newId + \" instead of Menus.\" + oldId,\n            newValue    = obj[newId];\n\n        Object.defineProperty(obj, oldId, {\n            get: function () {\n                deprecationWarning(warning, true);\n                return newValue;\n            }\n        });\n    }\n\n    // Define public API\n    exports.deprecationWarning   = deprecationWarning;\n    exports.deprecateEvent       = deprecateEvent;\n    exports.deprecateConstant      = deprecateConstant;\n});\n"],"file":"DeprecationWarning.js"}