{"version":3,"sources":["extensibility/ExtensionManagerDialog.js"],"names":["define","require","exports","module","_","Mustache","Dialogs","DefaultDialogs","Package","Strings","StringUtils","Commands","CommandManager","InstallExtensionDialog","ThemeManager","AppInit","Async","KeyEvent","ExtensionManager","ExtensionManagerView","ExtensionManagerViewModel","PreferencesManager","Metrics","dialogTemplate","_activeTabIndex","_performChanges","hasRemovedExtensions","hasExtensionsToRemove","hasUpdatedExtensions","hasExtensionsToUpdate","hasDisabledExtensions","hasExtensionsToDisable","buttonLabel","CHANGE_AND_RELOAD","DISABLE_AND_RELOAD","UPDATE_AND_RELOAD","REMOVE_AND_RELOAD","dlg","showModalDialog","DIALOG_ID_CHANGE_EXTENSIONS","CHANGE_AND_RELOAD_TITLE","CHANGE_AND_RELOAD_MESSAGE","className","DIALOG_BTN_CLASS_NORMAL","id","DIALOG_BTN_CANCEL","text","CANCEL","DIALOG_BTN_CLASS_PRIMARY","DIALOG_BTN_OK","$dlg","getElement","one","e","buttonId","removeExtensionsPromise","updateExtensionsPromise","disableExtensionsPromise","removeErrors","updateErrors","disableErrors","find","prop","hide","PROCESSING_EXTENSIONS","append","removeMarkedExtensions","fail","errorArray","updateExtensions","disableMarkedExtensions","waitForAll","always","close","done","execute","APP_RELOAD","ids","dialogs","nextDialog","dialog","shift","title","message","forEach","errorObj","push","item","DIALOG_ID_ERROR","EXTENSION_MANAGER_REMOVE","format","EXTENSION_MANAGER_REMOVE_ERROR","join","length","error","console","formatError","EXTENSION_MANAGER_UPDATE","EXTENSION_MANAGER_UPDATE_ERROR","EXTENSION_MANAGER_DISABLE","EXTENSION_MANAGER_DISABLE_ERROR","cleanupUpdates","unmarkAllForRemoval","unmarkAllForDisabling","_showDialog","countEvent","EVENT_TYPE","EXTENSIONS","views","$search","$searchClear","$modalDlg","context","showRegistry","brackets","config","extension_registry","models","originalTheme","getCurrentTheme","updateSearchDisabled","model","searchDisabled","val","filterSet","clearSearch","view","index","filter","scrollTop","focus","setActiveTab","$tab","scrollPos","tab","$","show","updateNotificationIcon","$notificationIcon","eq","notifyCount","modelInitPromise","RegistryViewModel","ThemesViewModel","InstalledViewModel","DefaultViewModel","showModalDialogUsingTemplate","render","window","document","off","dispose","on","event","this","keyCode","DOM_VK_TAB","ctrlKey","$tabs","tabIndex","shiftKey","doInParallel","promise","initialize","lastNotifyCount","searchTimeoutID","remove","$el","appendTo","each","tabElement","clearTimeout","query","setTimeout","sortBy","set","_setSortedExtensionList","extensions","$activeTab","parent","removeClass","hasClass","click","showDialog","updateFromDownload","Deferred","resolve","register","CMD_EXTENSION_MANAGER","FILE_EXTENSION_MANAGER","appReady"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var _                           = require(\"thirdparty/lodash\"),\n        Mustache                    = require(\"thirdparty/mustache/mustache\"),\n        Dialogs                     = require(\"widgets/Dialogs\"),\n        DefaultDialogs              = require(\"widgets/DefaultDialogs\"),\n        Package                     = require(\"extensibility/Package\"),\n        Strings                     = require(\"strings\"),\n        StringUtils                 = require(\"utils/StringUtils\"),\n        Commands                    = require(\"command/Commands\"),\n        CommandManager              = require(\"command/CommandManager\"),\n        InstallExtensionDialog      = require(\"extensibility/InstallExtensionDialog\"),\n        ThemeManager                = require(\"view/ThemeManager\"),\n        AppInit                     = require(\"utils/AppInit\"),\n        Async                       = require(\"utils/Async\"),\n        KeyEvent                    = require(\"utils/KeyEvent\"),\n        ExtensionManager            = require(\"extensibility/ExtensionManager\"),\n        ExtensionManagerView        = require(\"extensibility/ExtensionManagerView\").ExtensionManagerView,\n        ExtensionManagerViewModel   = require(\"extensibility/ExtensionManagerViewModel\"),\n        PreferencesManager          = require(\"preferences/PreferencesManager\"),\n        Metrics                     = require(\"utils/Metrics\");\n\n    var dialogTemplate    = require(\"text!htmlContent/extension-manager-dialog.html\");\n\n    // bootstrap tabs component\n    require(\"widgets/bootstrap-tab\");\n\n    var _activeTabIndex;\n\n    /**\n     * @private\n     * Triggers changes requested by the dialog UI.\n     */\n    function _performChanges() {\n        // If an extension was removed or updated, prompt the user to quit Brackets.\n        var hasRemovedExtensions    = ExtensionManager.hasExtensionsToRemove(),\n            hasUpdatedExtensions    = ExtensionManager.hasExtensionsToUpdate(),\n            hasDisabledExtensions   = ExtensionManager.hasExtensionsToDisable();\n        if (!hasRemovedExtensions && !hasUpdatedExtensions && !hasDisabledExtensions) {\n            return;\n        }\n\n        var buttonLabel = Strings.CHANGE_AND_RELOAD;\n        if (hasRemovedExtensions && !hasUpdatedExtensions && !hasDisabledExtensions) {\n            buttonLabel = Strings.REMOVE_AND_RELOAD;\n        } else if (hasUpdatedExtensions && !hasRemovedExtensions && !hasDisabledExtensions) {\n            buttonLabel = Strings.UPDATE_AND_RELOAD;\n        } else if (hasDisabledExtensions && !hasRemovedExtensions && !hasUpdatedExtensions) {\n            buttonLabel = Strings.DISABLE_AND_RELOAD;\n        }\n\n        var dlg = Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_CHANGE_EXTENSIONS,\n            Strings.CHANGE_AND_RELOAD_TITLE,\n            Strings.CHANGE_AND_RELOAD_MESSAGE,\n            [\n                {\n                    className: Dialogs.DIALOG_BTN_CLASS_NORMAL,\n                    id: Dialogs.DIALOG_BTN_CANCEL,\n                    text: Strings.CANCEL\n                },\n                {\n                    className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                    id: Dialogs.DIALOG_BTN_OK,\n                    text: buttonLabel\n                }\n            ],\n            false\n        ),\n            $dlg = dlg.getElement();\n\n        $dlg.one(\"buttonClick\", function (e, buttonId) {\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\n                // Disable the dialog buttons so the user can't dismiss it,\n                // and show a message indicating that we're doing the updates,\n                // in case it takes a long time.\n                $dlg.find(\".dialog-button\").prop(\"disabled\", true);\n                $dlg.find(\".close\").hide();\n                $dlg.find(\".dialog-message\")\n                    .text(Strings.PROCESSING_EXTENSIONS)\n                    .append(\"<span class='spinner inline spin'/>\");\n\n                var removeExtensionsPromise,\n                    updateExtensionsPromise,\n                    disableExtensionsPromise,\n                    removeErrors,\n                    updateErrors,\n                    disableErrors;\n\n                removeExtensionsPromise = ExtensionManager.removeMarkedExtensions()\n                    .fail(function (errorArray) {\n                        removeErrors = errorArray;\n                    });\n                updateExtensionsPromise = ExtensionManager.updateExtensions()\n                    .fail(function (errorArray) {\n                        updateErrors = errorArray;\n                    });\n                disableExtensionsPromise = ExtensionManager.disableMarkedExtensions()\n                    .fail(function (errorArray) {\n                        disableErrors = errorArray;\n                    });\n\n                Async.waitForAll([removeExtensionsPromise, updateExtensionsPromise, disableExtensionsPromise], true)\n                    .always(function () {\n                        dlg.close();\n                    })\n                    .done(function () {\n                        CommandManager.execute(Commands.APP_RELOAD);\n                    })\n                    .fail(function () {\n                        var ids = [],\n                            dialogs = [];\n\n                        function nextDialog() {\n                            var dialog = dialogs.shift();\n                            if (dialog) {\n                                Dialogs.showModalDialog(dialog.dialog, dialog.title, dialog.message)\n                                    .done(nextDialog);\n                            } else {\n                                // Even in case of error condition, we still have to reload\n                                CommandManager.execute(Commands.APP_RELOAD);\n                            }\n                        }\n\n                        if (removeErrors) {\n                            removeErrors.forEach(function (errorObj) {\n                                ids.push(errorObj.item);\n                            });\n                            dialogs.push({\n                                dialog: DefaultDialogs.DIALOG_ID_ERROR,\n                                title: Strings.EXTENSION_MANAGER_REMOVE,\n                                message: StringUtils.format(Strings.EXTENSION_MANAGER_REMOVE_ERROR, ids.join(\", \"))\n                            });\n                        }\n\n                        if (updateErrors) {\n                            // This error case should be very uncommon.\n                            // Just let the user know that we couldn't update\n                            // this extension and log the errors to the console.\n                            ids.length = 0;\n                            updateErrors.forEach(function (errorObj) {\n                                ids.push(errorObj.item);\n                                if (errorObj.error && errorObj.error.forEach) {\n                                    console.error(\"Errors for\", errorObj.item);\n                                    errorObj.error.forEach(function (error) {\n                                        console.error(Package.formatError(error));\n                                    });\n                                } else {\n                                    console.error(\"Error for\", errorObj.item, errorObj);\n                                }\n                            });\n                            dialogs.push({\n                                dialog: DefaultDialogs.DIALOG_ID_ERROR,\n                                title: Strings.EXTENSION_MANAGER_UPDATE,\n                                message: StringUtils.format(Strings.EXTENSION_MANAGER_UPDATE_ERROR, ids.join(\", \"))\n                            });\n                        }\n\n                        if (disableErrors) {\n                            ids.length = 0;\n                            disableErrors.forEach(function (errorObj) {\n                                ids.push(errorObj.item);\n                            });\n                            dialogs.push({\n                                dialog: DefaultDialogs.DIALOG_ID_ERROR,\n                                title: Strings.EXTENSION_MANAGER_DISABLE,\n                                message: StringUtils.format(Strings.EXTENSION_MANAGER_DISABLE_ERROR, ids.join(\", \"))\n                            });\n                        }\n\n                        nextDialog();\n                    });\n            } else {\n                dlg.close();\n                ExtensionManager.cleanupUpdates();\n                ExtensionManager.unmarkAllForRemoval();\n                ExtensionManager.unmarkAllForDisabling();\n            }\n        });\n    }\n\n    /**\n     * @private\n     * Show a dialog that allows the user to browse and manage extensions.\n     */\n    function _showDialog() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"dialogue\", \"shown\");\n\n        let dialog,\n            $dlg,\n            views   = [],\n            $search,\n            $searchClear,\n            $modalDlg,\n            context = { Strings: Strings, showRegistry: !!brackets.config.extension_registry },\n            models  = [],\n            originalTheme = ThemeManager.getCurrentTheme();\n\n        // Load registry only if the registry URL exists\n        if (context.showRegistry) {\n            models.push(new ExtensionManagerViewModel.RegistryViewModel());\n            models.push(new ExtensionManagerViewModel.ThemesViewModel());\n        }\n\n        models.push(new ExtensionManagerViewModel.InstalledViewModel());\n        models.push(new ExtensionManagerViewModel.DefaultViewModel());\n\n        function updateSearchDisabled() {\n            var model           = models[_activeTabIndex],\n                searchDisabled  = ($search.val() === \"\") &&\n                                  (!model.filterSet || model.filterSet.length === 0);\n\n            $search.prop(\"disabled\", searchDisabled);\n            $searchClear.prop(\"disabled\", searchDisabled);\n\n            return searchDisabled;\n        }\n\n        function clearSearch() {\n            $search.val(\"\");\n            views.forEach(function (view, index) {\n                view.filter(\"\");\n                $modalDlg.scrollTop(0);\n            });\n\n            if (!updateSearchDisabled()) {\n                $search.focus();\n            }\n        }\n\n        // Open the dialog\n        dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(dialogTemplate, context));\n\n        // On dialog close: clean up listeners & models, and commit changes\n        dialog.done(function () {\n            $(window.document).off(\".extensionManager\");\n\n            models.forEach(function (model) {\n                model.dispose();\n            });\n            _performChanges();\n        });\n\n        // Create the view.\n        $dlg = dialog.getElement();\n        $search = $(\".search\", $dlg);\n        $searchClear = $(\".search-clear\", $dlg);\n        $modalDlg = $(\".modal-body\", $dlg);\n\n        function setActiveTab($tab) {\n            if (models[_activeTabIndex]) {\n                models[_activeTabIndex].scrollPos = $modalDlg.scrollTop();\n            }\n            $tab.tab(\"show\");\n            if (models[_activeTabIndex]) {\n                $modalDlg.scrollTop(models[_activeTabIndex].scrollPos || 0);\n                clearSearch();\n                if (_activeTabIndex === 2) {\n                    $(\".ext-sort-group\").hide();\n                } else {\n                    $(\".ext-sort-group\").show();\n                }\n            }\n        }\n\n        // Dialog tabs\n        $dlg.find(\".nav-tabs a\")\n            .on(\"click\", function (event) {\n                setActiveTab($(this));\n            });\n\n        // Navigate through tabs via Ctrl-(Shift)-Tab\n        // (focus may be on document.body if text in extension listing clicked - see #9511)\n        $(window.document).on(\"keyup.extensionManager\", function (event) {\n            if (event.keyCode === KeyEvent.DOM_VK_TAB && event.ctrlKey) {\n                var $tabs = $(\".nav-tabs a\", $dlg),\n                    tabIndex = _activeTabIndex;\n\n                if (event.shiftKey) {\n                    tabIndex--;\n                } else {\n                    tabIndex++;\n                }\n                tabIndex %= $tabs.length;\n                setActiveTab($tabs.eq(tabIndex));\n            }\n        });\n\n        // Update & hide/show the notification overlay on a tab's icon, based on its model's notifyCount\n        function updateNotificationIcon(index) {\n            var model = models[index],\n                $notificationIcon = $dlg.find(\".nav-tabs li\").eq(index).find(\".notification\");\n            if (model.notifyCount) {\n                $notificationIcon.text(model.notifyCount);\n                $notificationIcon.show();\n            } else {\n                $notificationIcon.hide();\n            }\n        }\n\n        // Initialize models and create a view for each model\n        var modelInitPromise = Async.doInParallel(models, function (model, index) {\n            var view    = new ExtensionManagerView(),\n                promise = view.initialize(model),\n                lastNotifyCount;\n\n            promise.always(function () {\n                views[index] = view;\n\n                lastNotifyCount = model.notifyCount;\n                updateNotificationIcon(index);\n            });\n\n            model.on(\"change\", function () {\n                if (lastNotifyCount !== model.notifyCount) {\n                    lastNotifyCount = model.notifyCount;\n                    updateNotificationIcon(index);\n                }\n            });\n\n            return promise;\n        }, true);\n\n        modelInitPromise.always(function () {\n            $(\".spinner\", $dlg).remove();\n\n            views.forEach(function (view) {\n                view.$el.appendTo($modalDlg);\n            });\n\n            // Update search UI before new tab is shown\n            $(\"a[data-toggle='tab']\", $dlg).each(function (index, tabElement) {\n                $(tabElement).on(\"show\", function (event) {\n                    _activeTabIndex = index;\n\n                    // Focus the search input\n                    if (!updateSearchDisabled()) {\n                        $dlg.find(\".search\").focus();\n                    }\n                });\n            });\n\n            // Filter the views when the user types in the search field.\n            var searchTimeoutID;\n            $dlg.on(\"input\", \".search\", function (e) {\n                clearTimeout(searchTimeoutID);\n                var query = $(this).val();\n                searchTimeoutID = setTimeout(function () {\n                    views[_activeTabIndex].filter(query);\n                    $modalDlg.scrollTop(0);\n                }, 200);\n            }).on(\"click\", \".search-clear\", clearSearch);\n\n            // Sort the extension list based on the current selected sorting criteria\n            $dlg.on(\"change\", \".sort-extensions\", function (e) {\n                var sortBy = $(this).val();\n                PreferencesManager.set(\"extensions.sort\", sortBy);\n                models.forEach(function (model, index) {\n                    if (index <= 1) {\n                        model._setSortedExtensionList(ExtensionManager.extensions, index === 1);\n                        views[index].filter($(\".search\").val());\n                    }\n                });\n            });\n\n            // Disable the search field when there are no items in the model\n            models.forEach(function (model, index) {\n                model.on(\"change\", function () {\n                    if (_activeTabIndex === index) {\n                        updateSearchDisabled();\n                    }\n                });\n            });\n\n            var $activeTab = $dlg.find(\".nav-tabs li.active a\");\n            if ($activeTab.length) { // If there's already a tab selected, show it\n                $activeTab.parent().removeClass(\"active\"); // workaround for bootstrap-tab\n                $activeTab.tab(\"show\");\n            } else if ($(\"#toolbar-extension-manager\").hasClass('updatesAvailable')) {\n                // Open dialog to Installed tab if extension updates are available\n                $dlg.find(\".nav-tabs a.installed\").tab(\"show\");\n            } else { // Otherwise show the first tab\n                $dlg.find(\".nav-tabs a:first\").tab(\"show\");\n            }\n            // If activeTab was explicitly selected by user,\n            // then check for the selection\n            // Or if there was an update available since activeTab.length would be 0,\n            // then check for updatesAvailable class in toolbar-extension-manager\n            if (($activeTab.length && $activeTab.hasClass(\"installed\")) || (!$activeTab.length && $(\"#toolbar-extension-manager\").hasClass('updatesAvailable'))) {\n                $(\".ext-sort-group\").hide();\n            } else {\n                $(\".ext-sort-group\").show();\n            }\n        });\n\n        // Handle the 'Install from URL' button.\n        $(\".extension-manager-dialog .install-from-url\")\n            .click(function () {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"install\", \"fromURL\");\n                InstallExtensionDialog.showDialog().done(ExtensionManager.updateFromDownload);\n            });\n\n        return new $.Deferred().resolve(dialog).promise();\n    }\n\n    CommandManager.register(Strings.CMD_EXTENSION_MANAGER, Commands.FILE_EXTENSION_MANAGER, _showDialog);\n\n    AppInit.appReady(function () {\n        $(\"#toolbar-extension-manager\").click(_showDialog);\n    });\n\n    // Unit tests\n    exports._performChanges = _performChanges;\n});\n"],"file":"ExtensionManagerDialog.js"}