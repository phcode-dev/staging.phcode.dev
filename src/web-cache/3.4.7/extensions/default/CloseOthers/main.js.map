{"version":3,"sources":["extensions/default/CloseOthers/main.js"],"names":["define","require","exports","module","Menus","brackets","getModule","CommandManager","Commands","MainViewManager","Strings","PreferencesManager","workingSetListCmenu","getContextMenu","ContextMenuIds","WORKING_SET_CONTEXT_MENU","closeOthers","closeAbove","closeBelow","prefs","getExtensionPrefs","menuEntriesShown","handleClose","mode","targetIndex","findInWorkingSet","ACTIVE_PANE","getCurrentlyViewedPath","workingSetList","getWorkingSet","start","end","files","i","push","execute","FILE_CLOSE_LIST","fileList","contextMenuOpenHandler","file","getCurrentlyViewedFile","fullPath","workingSetListSize","getWorkingSetSize","get","setEnabled","getPreferences","CURRENT_PROJECT","prefChangeHandler","addMenuItem","AFTER","FILE_CLOSE","removeMenuItem","initializeCommands","register","CMD_FILE_CLOSE_BELOW","CMD_FILE_CLOSE_OTHERS","CMD_FILE_CLOSE_ABOVE","definePreference","description","DESCRIPTION_CLOSE_OTHERS_BELOW","DESCRIPTION_CLOSE_OTHERS","DESCRIPTION_CLOSE_OTHERS_ABOVE","on"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var Menus               = brackets.getModule(\"command/Menus\"),\n        CommandManager      = brackets.getModule(\"command/CommandManager\"),\n        Commands            = brackets.getModule(\"command/Commands\"),\n        MainViewManager     = brackets.getModule(\"view/MainViewManager\"),\n        Strings             = brackets.getModule(\"strings\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        workingSetListCmenu = Menus.getContextMenu(Menus.ContextMenuIds.WORKING_SET_CONTEXT_MENU);\n\n    // Constants\n    var closeOthers             = \"file.close_others\",\n        closeAbove              = \"file.close_above\",\n        closeBelow              = \"file.close_below\";\n\n    // Global vars and preferences\n    var prefs                   = PreferencesManager.getExtensionPrefs(\"closeOthers\"),\n        menuEntriesShown        = {};\n\n    prefs.definePreference(\"below\",  \"boolean\", true, {\n        description: Strings.DESCRIPTION_CLOSE_OTHERS_BELOW\n    });\n    prefs.definePreference(\"others\", \"boolean\", true, {\n        description: Strings.DESCRIPTION_CLOSE_OTHERS\n    });\n    prefs.definePreference(\"above\",  \"boolean\", true, {\n        description: Strings.DESCRIPTION_CLOSE_OTHERS_ABOVE\n    });\n\n\n    /**\n     * Handle the different Close Other commands\n     * @param {string} mode\n     */\n    function handleClose(mode) {\n        var targetIndex  = MainViewManager.findInWorkingSet(MainViewManager.ACTIVE_PANE, MainViewManager.getCurrentlyViewedPath(MainViewManager.ACTIVE_PANE)),\n            workingSetList = MainViewManager.getWorkingSet(MainViewManager.ACTIVE_PANE),\n            start        = (mode === closeBelow) ? (targetIndex + 1) : 0,\n            end          = (mode === closeAbove) ? (targetIndex) : (workingSetList.length),\n            files        = [],\n            i;\n\n        for (i = start; i < end; i++) {\n            if ((mode === closeOthers && i !== targetIndex) || (mode !== closeOthers)) {\n                files.push(workingSetList[i]);\n            }\n        }\n\n        CommandManager.execute(Commands.FILE_CLOSE_LIST, {fileList: files});\n    }\n\n    /**\n     * Enable/Disable the menu items depending on which document is selected in the working set\n     */\n    function contextMenuOpenHandler() {\n        var file = MainViewManager.getCurrentlyViewedFile(MainViewManager.ACTIVE_PANE);\n\n        if (file) {\n            var targetIndex  = MainViewManager.findInWorkingSet(MainViewManager.ACTIVE_PANE, file.fullPath),\n                workingSetListSize = MainViewManager.getWorkingSetSize(MainViewManager.ACTIVE_PANE);\n\n            if (targetIndex === workingSetListSize - 1) { // hide \"Close Others Below\" if the last file in Working Files is selected\n                CommandManager.get(closeBelow).setEnabled(false);\n            } else {\n                CommandManager.get(closeBelow).setEnabled(true);\n            }\n\n            if (workingSetListSize === 1) { // hide \"Close Others\" if there is only one file in Working Files\n                CommandManager.get(closeOthers).setEnabled(false);\n            } else {\n                CommandManager.get(closeOthers).setEnabled(true);\n            }\n\n            if (targetIndex === 0) { // hide \"Close Others Above\" if the first file in Working Files is selected\n                CommandManager.get(closeAbove).setEnabled(false);\n            } else {\n                CommandManager.get(closeAbove).setEnabled(true);\n            }\n        }\n    }\n\n\n    /**\n     * Returns the preferences used to add/remove the menu items\n     * @return {{closeBelow: boolean, closeOthers: boolean, closeAbove: boolean}}\n     */\n    function getPreferences() {\n        // It's senseless to look prefs up for the current file, instead look them up for\n        // the current project (or globally)\n        return {\n            closeBelow: prefs.get(\"below\",  PreferencesManager.CURRENT_PROJECT),\n            closeOthers: prefs.get(\"others\", PreferencesManager.CURRENT_PROJECT),\n            closeAbove: prefs.get(\"above\",  PreferencesManager.CURRENT_PROJECT)\n        };\n    }\n\n    /**\n     * When the preferences changed, add/remove the required menu items\n     */\n    function prefChangeHandler() {\n        var prefs = getPreferences();\n\n        if (prefs.closeBelow !== menuEntriesShown.closeBelow) {\n            if (prefs.closeBelow) {\n                workingSetListCmenu.addMenuItem(closeBelow, \"\", Menus.AFTER, Commands.FILE_CLOSE);\n            } else {\n                workingSetListCmenu.removeMenuItem(closeBelow);\n            }\n        }\n\n        if (prefs.closeOthers !== menuEntriesShown.closeOthers) {\n            if (prefs.closeOthers) {\n                workingSetListCmenu.addMenuItem(closeOthers, \"\", Menus.AFTER, Commands.FILE_CLOSE);\n            } else {\n                workingSetListCmenu.removeMenuItem(closeOthers);\n            }\n        }\n\n        if (prefs.closeAbove !== menuEntriesShown.closeAbove) {\n            if (prefs.closeAbove) {\n                workingSetListCmenu.addMenuItem(closeAbove, \"\", Menus.AFTER, Commands.FILE_CLOSE);\n            } else {\n                workingSetListCmenu.removeMenuItem(closeAbove);\n            }\n        }\n\n        menuEntriesShown = prefs;\n    }\n\n    /**\n     * Register the Commands and add the Menu Items, if required\n     */\n    function initializeCommands() {\n        var prefs = getPreferences();\n\n        CommandManager.register(Strings.CMD_FILE_CLOSE_BELOW, closeBelow, function () {\n            handleClose(closeBelow);\n        });\n        CommandManager.register(Strings.CMD_FILE_CLOSE_OTHERS, closeOthers, function () {\n            handleClose(closeOthers);\n        });\n        CommandManager.register(Strings.CMD_FILE_CLOSE_ABOVE, closeAbove, function () {\n            handleClose(closeAbove);\n        });\n\n        if (prefs.closeBelow) {\n            workingSetListCmenu.addMenuItem(closeBelow, \"\", Menus.AFTER, Commands.FILE_CLOSE);\n        }\n        if (prefs.closeOthers) {\n            workingSetListCmenu.addMenuItem(closeOthers, \"\", Menus.AFTER, Commands.FILE_CLOSE);\n        }\n        if (prefs.closeAbove) {\n            workingSetListCmenu.addMenuItem(closeAbove, \"\", Menus.AFTER, Commands.FILE_CLOSE);\n        }\n        menuEntriesShown = prefs;\n    }\n\n\n    // Initialize using the prefs\n    initializeCommands();\n\n    // Add a context menu open handler\n    workingSetListCmenu.on(\"beforeContextMenuOpen\", contextMenuOpenHandler);\n\n    prefs.on(\"change\", prefChangeHandler);\n});\n"],"file":"main.js"}