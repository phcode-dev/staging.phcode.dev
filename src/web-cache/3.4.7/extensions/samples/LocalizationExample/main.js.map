{"version":3,"sources":["extensions/samples/LocalizationExample/main.js"],"names":["require","config","paths","text","i18n","locale","brackets","getLocale","define","exports","module","CommandManager","getModule","Menus","Dialogs","Mustache","browserWrapperHtml","Strings","testCommand","window","alert","ALERT_MESSAGE","localizedTemplate","render","showModalDialogUsingTemplate","myCommandID","menu","register","COMMAND_NAME","getMenu","AppMenuBar","EDIT_MENU","addMenuItem","AFTER"],"mappings":"AAqBAA,QAAQC,OAAO,CACXC,MAAO,CACHC,KAAQ,WACRC,KAAQ,YAEZC,OAAQC,SAASC,cAGrBC,OAAO,SAAUR,QAASS,QAASC,QAI/B,IAAIC,eAAsBL,SAASM,UAAU,0BACzCC,MAAsBP,SAASM,UAAU,iBACzCE,QAAsBR,SAASM,UAAU,mBACzCG,SAAsBT,SAASM,UAAU,gCAIzCI,mBAAsBhB,QAAQ,4CAK9BiB,QAAsBjB,QAAQ,WAKlC,SAASkB,cACLC,OAAOC,MAAMH,QAAQI,eAGrB,IAAIC,kBAAoBP,SAASQ,OAAOP,mBAAoBC,SAC5DH,QAAQU,6BAA6BF,mBAMzC,IAAIG,YAAc,8BAGdC,KAFJf,eAAegB,SAASV,QAAQW,aAAcH,YAAaP,aAEhDL,MAAMgB,QAAQhB,MAAMiB,WAAWC,WACrCC,YAAYP,YAAa,KAAMZ,MAAMoB,MAAOR","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\nrequire.config({\n    paths: {\n        \"text\": \"lib/text\",\n        \"i18n\": \"lib/i18n\"\n    },\n    locale: brackets.getLocale()\n});\n\ndefine(function (require, exports, module) {\n\n\n    // Brackets modules\n    var CommandManager      = brackets.getModule(\"command/CommandManager\"),\n        Menus               = brackets.getModule(\"command/Menus\"),\n        Dialogs             = brackets.getModule(\"widgets/Dialogs\"),\n        Mustache            = brackets.getModule(\"thirdparty/mustache/mustache\");\n\n    // Load an html fragment using the require text plugin. Mustache will later\n    // be used to localize some of the text\n    var browserWrapperHtml  = require(\"text!htmlContent/sampleHTMLFragment.html\");\n\n    // Load the string module for this plugin. Not this references to the strings.js\n    // file next to the main.js fiel for this plugin. To access core brackets strings\n    // you would call brackets.getModule(\"strings\") instead of require(\"strings\")\n    var Strings             = require(\"strings\");\n\n\n    // This sample command first shows an alert passing in a localized\n    // string in JavaScript then it shows a localized HTML dialog.\n    function testCommand() {\n        window.alert(Strings.ALERT_MESSAGE);\n\n        // Localize the dialog using Strings as the datasource and use it as the dialog template\n        var localizedTemplate = Mustache.render(browserWrapperHtml, Strings);\n        Dialogs.showModalDialogUsingTemplate(localizedTemplate);\n    }\n\n\n    // Register the command\n    // A localized command name is used by passing in Strings.COMMAND_NAME\n    var myCommandID = \"localizationExample.command\";\n    CommandManager.register(Strings.COMMAND_NAME, myCommandID, testCommand);\n\n    var menu = Menus.getMenu(Menus.AppMenuBar.EDIT_MENU);\n    menu.addMenuItem(myCommandID, null, Menus.AFTER, myCommandID);\n});\n"],"file":"main.js"}