{"version":3,"sources":["thirdparty/CodeMirror/mode/clike/clike.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","Context","indented","column","type","info","align","prev","this","pushContext","state","col","indent","context","popContext","t","typeBefore","stream","pos","prevToken","test","string","slice","typeAtEndOfLine","indentation","isTopScope","words","str","obj","split","i","length","contains","word","propertyIsEnumerable","defineMode","config","parserConfig","indentUnit","statementIndentUnit","dontAlignCalls","keywords","types","builtin","blockKeywords","defKeywords","atoms","hooks","multiLineStrings","indentStatements","indentSwitch","namespaceSeparator","isPunctuationChar","numberStart","number","isOperatorChar","isIdentifierChar","isReservedIdentifier","curPunc","isDefKeyword","tokenBase","ch","next","result","tokenize","tokenString","backUp","match","eat","tokenComment","skipToEnd","eatWhile","cur","current","quote","escaped","end","maybeEnd","maybeEOL","typeFirstDefinitions","eol","startState","basecolumn","startOfLine","token","ctx","sol","eatSpace","style","start","undefined","styleDefs","textAfter","Pass","firstChar","charAt","closing","dontIndentStatements","hook","switchBlock","allmanIndentation","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","cKeywords","cppKeywords","objCKeywords","objCBuiltins","basicCTypes","basicObjCTypes","cTypes","identifier","objCTypes","cBlockKeywords","cDefKeywords","cppHook","peek","pointerHook","_stream","cIsReservedIdentifier","toLowerCase","cpp14Literal","cpp11StringHook","cpp11RawStringDelim","tokenRawString","cppLooksLikeConstructor","lastTwo","exec","tokenAtString","delim","replace","RegExp","def","mimes","mode","add","prop","hasOwnProperty","push","helperType","registerHelper","defineMIME","tokenTripleString","tokenNestedComment","depth","tokenKotlinString","tripleString","skipTo","name","#","*","modeProps","u","U","L","R","0","1","2","3","4","5","6","7","8","9","@","\"","'","=","cx","/","closeBrackets","pairs","triples","intendSwitch","stringTokenizer","tokenCeylonString","first","toUpperCase","`"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction Context(indented, column, type, info, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.info = info;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type, info) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\" && type != \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, info, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\nfunction typeBefore(stream, state, pos) {\n  if (state.prevToken == \"variable\" || state.prevToken == \"type\") return true;\n  if (/\\S(?:[^- ]>|[*\\]])\\s*$|\\*$/.test(stream.string.slice(0, pos))) return true;\n  if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;\n}\n\nfunction isTopScope(context) {\n  for (;;) {\n    if (!context || context.type == \"top\") return true;\n    if (context.type == \"}\" && context.prev.info != \"namespace\") return false;\n    context = context.prev;\n  }\n}\n\nCodeMirror.defineMode(\"clike\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      keywords = parserConfig.keywords || {},\n      types = parserConfig.types || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      defKeywords = parserConfig.defKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false,\n      indentSwitch = parserConfig.indentSwitch !== false,\n      namespaceSeparator = parserConfig.namespaceSeparator,\n      isPunctuationChar = parserConfig.isPunctuationChar || /[\\[\\]{}\\(\\),;\\:\\.]/,\n      numberStart = parserConfig.numberStart || /[\\d\\.]/,\n      number = parserConfig.number || /^(?:0x[a-f\\d]+|0b[01]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:e[-+]?\\d+)?)(u|ll?|l|f)?/i,\n      isOperatorChar = parserConfig.isOperatorChar || /[+\\-*&%=<>!?|\\/]/,\n      isIdentifierChar = parserConfig.isIdentifierChar || /[\\w\\$_\\xa1-\\uffff]/,\n      // An optional function that takes a {string} token and returns true if it\n      // should be treated as a builtin.\n      isReservedIdentifier = parserConfig.isReservedIdentifier || false;\n\n  var curPunc, isDefKeyword;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (numberStart.test(ch)) {\n      stream.backUp(1)\n      if (stream.match(number)) return \"number\"\n      stream.next()\n    }\n    if (isPunctuationChar.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      while (!stream.match(/^\\/[\\/*]/, false) && stream.eat(isOperatorChar)) {}\n      return \"operator\";\n    }\n    stream.eatWhile(isIdentifierChar);\n    if (namespaceSeparator) while (stream.match(namespaceSeparator))\n      stream.eatWhile(isIdentifierChar);\n\n    var cur = stream.current();\n    if (contains(keywords, cur)) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      if (contains(defKeywords, cur)) isDefKeyword = true;\n      return \"keyword\";\n    }\n    if (contains(types, cur)) return \"type\";\n    if (contains(builtin, cur)\n        || (isReservedIdentifier && isReservedIdentifier(cur))) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (contains(atoms, cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function maybeEOL(stream, state) {\n    if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))\n      state.typeAtEndOfLine = typeBefore(stream, state, stream.pos)\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", null, false),\n        indented: 0,\n        startOfLine: true,\n        prevToken: null\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) { maybeEOL(stream, state); return null; }\n      curPunc = isDefKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == \";\" || curPunc == \":\" || (curPunc == \",\" && stream.match(/^\\s*(?:\\/\\/.*)?$/, false)))\n        while (state.context.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements &&\n               (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != \";\") ||\n                (ctx.type == \"statement\" && curPunc == \"newstatement\"))) {\n        pushContext(state, stream.column(), \"statement\", stream.current());\n      }\n\n      if (style == \"variable\" &&\n          ((state.prevToken == \"def\" ||\n            (parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) &&\n             isTopScope(state.context) && stream.match(/^\\s*\\(/, false)))))\n        style = \"def\";\n\n      if (hooks.token) {\n        var result = hooks.token(stream, state, style);\n        if (result !== undefined) style = result;\n      }\n\n      if (style == \"def\" && parserConfig.styleDefs === false) style = \"variable\";\n\n      state.startOfLine = false;\n      state.prevToken = isDefKeyword ? \"def\" : style || curPunc;\n      maybeEOL(stream, state);\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      if (parserConfig.dontIndentStatements)\n        while (ctx.type == \"statement\" && parserConfig.dontIndentStatements.test(ctx.info))\n          ctx = ctx.prev\n      if (hooks.indent) {\n        var hook = hooks.indent(state, ctx, textAfter, indentUnit);\n        if (typeof hook == \"number\") return hook\n      }\n      var switchBlock = ctx.prev && ctx.prev.info == \"switch\";\n      if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {\n        while (ctx.type != \"top\" && ctx.type != \"}\") ctx = ctx.prev\n        return ctx.indented\n      }\n      if (ctx.type == \"statement\")\n        return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      if (ctx.align && (!dontAlignCalls || ctx.type != \")\"))\n        return ctx.column + (closing ? 0 : 1);\n      if (ctx.type == \")\" && !closing)\n        return ctx.indented + statementIndentUnit;\n\n      return ctx.indented + (closing ? 0 : indentUnit) +\n        (!closing && switchBlock && !/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 0);\n    },\n\n    electricInput: indentSwitch ? /^\\s*(?:case .*?:|default:|\\{\\}?|\\})$/ : /^\\s*[{}]$/,\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    blockCommentContinue: \" * \",\n    lineComment: \"//\",\n    fold: \"brace\"\n  };\n});\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  function contains(words, word) {\n    if (typeof words === \"function\") {\n      return words(word);\n    } else {\n      return words.propertyIsEnumerable(word);\n    }\n  }\n  var cKeywords = \"auto if break case register continue return default do sizeof \" +\n    \"static else struct switch extern typedef union for goto while enum const \" +\n    \"volatile inline restrict asm fortran\";\n\n  // Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.\n  var cppKeywords = \"alignas alignof and and_eq audit axiom bitand bitor catch \" +\n  \"class compl concept constexpr const_cast decltype delete dynamic_cast \" +\n  \"explicit export final friend import module mutable namespace new noexcept \" +\n  \"not not_eq operator or or_eq override private protected public \" +\n  \"reinterpret_cast requires static_assert static_cast template this \" +\n  \"thread_local throw try typeid typename using virtual xor xor_eq\";\n\n  var objCKeywords = \"bycopy byref in inout oneway out self super atomic nonatomic retain copy \" +\n  \"readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd \" +\n  \"@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class \" +\n  \"@public @package @private @protected @required @optional @try @catch @finally @import \" +\n  \"@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available\";\n\n  var objCBuiltins = \"FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION \" +\n  \" NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER \" +\n  \"NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION \" +\n  \"NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT\"\n\n  // Do not use this. Use the cTypes function below. This is global just to avoid\n  // excessive calls when cTypes is being called multiple times during a parse.\n  var basicCTypes = words(\"int long char short double float unsigned signed \" +\n    \"void bool\");\n\n  // Do not use this. Use the objCTypes function below. This is global just to avoid\n  // excessive calls when objCTypes is being called multiple times during a parse.\n  var basicObjCTypes = words(\"SEL instancetype id Class Protocol BOOL\");\n\n  // Returns true if identifier is a \"C\" type.\n  // C type is defined as those that are reserved by the compiler (basicTypes),\n  // and those that end in _t (Reserved by POSIX for types)\n  // http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html\n  function cTypes(identifier) {\n    return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);\n  }\n\n  // Returns true if identifier is a \"Objective C\" type.\n  function objCTypes(identifier) {\n    return cTypes(identifier) || contains(basicObjCTypes, identifier);\n  }\n\n  var cBlockKeywords = \"case do else for if switch while struct enum union\";\n  var cDefKeywords = \"struct enum union\";\n\n  function cppHook(stream, state) {\n    if (!state.startOfLine) return false\n    for (var ch, next = null; ch = stream.peek();) {\n      if (ch == \"\\\\\" && stream.match(/^.$/)) {\n        next = cppHook\n        break\n      } else if (ch == \"/\" && stream.match(/^\\/[\\/\\*]/, false)) {\n        break\n      }\n      stream.next()\n    }\n    state.tokenize = next\n    return \"meta\"\n  }\n\n  function pointerHook(_stream, state) {\n    if (state.prevToken == \"type\") return \"type\";\n    return false;\n  }\n\n  // For C and C++ (and ObjC): identifiers starting with __\n  // or _ followed by a capital letter are reserved for the compiler.\n  function cIsReservedIdentifier(token) {\n    if (!token || token.length < 2) return false;\n    if (token[0] != '_') return false;\n    return (token[1] == '_') || (token[1] !== token[1].toLowerCase());\n  }\n\n  function cpp14Literal(stream) {\n    stream.eatWhile(/[\\w\\.']/);\n    return \"number\";\n  }\n\n  function cpp11StringHook(stream, state) {\n    stream.backUp(1);\n    // Raw strings.\n    if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {\n      var match = stream.match(/^\"([^\\s\\\\()]{0,16})\\(/);\n      if (!match) {\n        return false;\n      }\n      state.cpp11RawStringDelim = match[1];\n      state.tokenize = tokenRawString;\n      return tokenRawString(stream, state);\n    }\n    // Unicode strings/chars.\n    if (stream.match(/^(?:u8|u|U|L)/)) {\n      if (stream.match(/^[\"']/, /* eat */ false)) {\n        return \"string\";\n      }\n      return false;\n    }\n    // Ignore this hook.\n    stream.next();\n    return false;\n  }\n\n  function cppLooksLikeConstructor(word) {\n    var lastTwo = /(\\w+)::~?(\\w+)$/.exec(word);\n    return lastTwo && lastTwo[1] == lastTwo[2];\n  }\n\n  // C#-style strings where \"\" escapes a quote.\n  function tokenAtString(stream, state) {\n    var next;\n    while ((next = stream.next()) != null) {\n      if (next == '\"' && !stream.eat('\"')) {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"string\";\n  }\n\n  // C++11 raw string literal is <prefix>\"<delim>( anything )<delim>\", where\n  // <delim> can be a string up to 16 characters long.\n  function tokenRawString(stream, state) {\n    // Escape characters that have special regex meanings.\n    var delim = state.cpp11RawStringDelim.replace(/[^\\w\\s]/g, '\\\\$&');\n    var match = stream.match(new RegExp(\".*?\\\\)\" + delim + '\"'));\n    if (match)\n      state.tokenize = null;\n    else\n      stream.skipToEnd();\n    return \"string\";\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n    add(mode.keywords);\n    add(mode.types);\n    add(mode.builtin);\n    add(mode.atoms);\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-csrc\", \"text/x-c\", \"text/x-chdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords),\n    defKeywords: words(cDefKeywords),\n    typeFirstDefinitions: true,\n    atoms: words(\"NULL true false\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n    },\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def([\"text/x-c++src\", \"text/x-c++hdr\"], {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + cppKeywords),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords + \" class try catch\"),\n    defKeywords: words(cDefKeywords + \" class namespace\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false NULL nullptr\"),\n    dontIndentStatements: /^template$/,\n    isIdentifierChar: /[\\w\\$_~\\xa1-\\uffff]/,\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" &&\n            (state.prevToken == \";\" || state.prevToken == null ||\n             state.prevToken == \"}\") &&\n            cppLooksLikeConstructor(stream.current()))\n          return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-java\", {\n    name: \"clike\",\n    keywords: words(\"abstract assert break case catch class const continue default \" +\n                    \"do else enum extends final finally for goto if implements import \" +\n                    \"instanceof interface native new package private protected public \" +\n                    \"return static strictfp super switch synchronized this throw throws transient \" +\n                    \"try volatile while @interface\"),\n    types: words(\"var byte short int long float double boolean char void Boolean Byte Character Double Float \" +\n                 \"Integer Long Number Object Short String StringBuffer StringBuilder Void\"),\n    blockKeywords: words(\"catch class do else finally for if switch try while\"),\n    defKeywords: words(\"class interface enum @interface\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+\\.?\\d*|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    hooks: {\n      \"@\": function(stream) {\n        // Don't match the @interface keyword.\n        if (stream.match('interface', false)) return false;\n\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function(stream, state) {\n        if (!stream.match(/\"\"$/)) return false;\n        state.tokenize = tokenTripleString;\n        return state.tokenize(stream, state);\n      }\n    },\n    modeProps: {fold: [\"brace\", \"import\"]}\n  });\n\n  def(\"text/x-csharp\", {\n    name: \"clike\",\n    keywords: words(\"abstract as async await base break case catch checked class const continue\" +\n                    \" default delegate do else enum event explicit extern finally fixed for\" +\n                    \" foreach goto if implicit in interface internal is lock namespace new\" +\n                    \" operator out override params private protected public readonly ref return sealed\" +\n                    \" sizeof stackalloc static struct switch this throw try typeof unchecked\" +\n                    \" unsafe using virtual void volatile while add alias ascending descending dynamic from get\" +\n                    \" global group into join let orderby partial remove select set value var yield\"),\n    types: words(\"Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func\" +\n                 \" Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32\" +\n                 \" UInt64 bool byte char decimal double short int long object\"  +\n                 \" sbyte float string ushort uint ulong\"),\n    blockKeywords: words(\"catch class do else finally for foreach if struct switch try while\"),\n    defKeywords: words(\"class interface namespace struct var\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\n      \"@\": function(stream, state) {\n        if (stream.eat('\"')) {\n          state.tokenize = tokenAtString;\n          return tokenAtString(stream, state);\n        }\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n  function tokenTripleString(stream, state) {\n    var escaped = false;\n    while (!stream.eol()) {\n      if (!escaped && stream.match('\"\"\"')) {\n        state.tokenize = null;\n        break;\n      }\n      escaped = stream.next() == \"\\\\\" && !escaped;\n    }\n    return \"string\";\n  }\n\n  function tokenNestedComment(depth) {\n    return function (stream, state) {\n      var ch\n      while (ch = stream.next()) {\n        if (ch == \"*\" && stream.eat(\"/\")) {\n          if (depth == 1) {\n            state.tokenize = null\n            break\n          } else {\n            state.tokenize = tokenNestedComment(depth - 1)\n            return state.tokenize(stream, state)\n          }\n        } else if (ch == \"/\" && stream.eat(\"*\")) {\n          state.tokenize = tokenNestedComment(depth + 1)\n          return state.tokenize(stream, state)\n        }\n      }\n      return \"comment\"\n    }\n  }\n\n  def(\"text/x-scala\", {\n    name: \"clike\",\n    keywords: words(\n      /* scala */\n      \"abstract case catch class def do else extends final finally for forSome if \" +\n      \"implicit import lazy match new null object override package private protected return \" +\n      \"sealed super this throw trait try type val var while with yield _ \" +\n\n      /* package scala */\n      \"assert assume require print println printf readLine readBoolean readByte readShort \" +\n      \"readChar readInt readLong readFloat readDouble\"\n    ),\n    types: words(\n      \"AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either \" +\n      \"Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable \" +\n      \"Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering \" +\n      \"Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder \" +\n      \"StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector \" +\n\n      /* package java.lang */\n      \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" +\n      \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" +\n      \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" +\n      \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void\"\n    ),\n    multiLineStrings: true,\n    blockKeywords: words(\"catch class enum do else finally for forSome if match switch try while\"),\n    defKeywords: words(\"class enum def object package trait type val var\"),\n    atoms: words(\"true false null\"),\n    indentStatements: false,\n    indentSwitch: false,\n    isOperatorChar: /[+\\-*&%=<>!?|\\/#:@]/,\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function(stream, state) {\n        if (!stream.match('\"\"')) return false;\n        state.tokenize = tokenTripleString;\n        return state.tokenize(stream, state);\n      },\n      \"'\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      \"=\": function(stream, state) {\n        var cx = state.context\n        if (cx.type == \"}\" && cx.align && stream.eat(\">\")) {\n          state.context = new Context(cx.indented, cx.column, cx.type, cx.info, null, cx.prev)\n          return \"operator\"\n        } else {\n          return false\n        }\n      },\n\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false\n        state.tokenize = tokenNestedComment(1)\n        return state.tokenize(stream, state)\n      }\n    },\n    modeProps: {closeBrackets: {pairs: '()[]{}\"\"', triples: '\"'}}\n  });\n\n  function tokenKotlinString(tripleString){\n    return function (stream, state) {\n      var escaped = false, next, end = false;\n      while (!stream.eol()) {\n        if (!tripleString && !escaped && stream.match('\"') ) {end = true; break;}\n        if (tripleString && stream.match('\"\"\"')) {end = true; break;}\n        next = stream.next();\n        if(!escaped && next == \"$\" && stream.match('{'))\n          stream.skipTo(\"}\");\n        escaped = !escaped && next == \"\\\\\" && !tripleString;\n      }\n      if (end || !tripleString)\n        state.tokenize = null;\n      return \"string\";\n    }\n  }\n\n  def(\"text/x-kotlin\", {\n    name: \"clike\",\n    keywords: words(\n      /*keywords*/\n      \"package as typealias class interface this super val operator \" +\n      \"var fun for is in This throw return annotation \" +\n      \"break continue object if else while do try when !in !is as? \" +\n\n      /*soft keywords*/\n      \"file import where by get set abstract enum open inner override private public internal \" +\n      \"protected catch finally out final vararg reified dynamic companion constructor init \" +\n      \"sealed field property receiver param sparam lateinit data inline noinline tailrec \" +\n      \"external annotation crossinline const operator infix suspend actual expect setparam value\"\n    ),\n    types: words(\n      /* package java.lang */\n      \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" +\n      \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" +\n      \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" +\n      \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray \" +\n      \"ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy \" +\n      \"LazyThreadSafetyMode LongArray Nothing ShortArray Unit\"\n    ),\n    intendSwitch: false,\n    indentStatements: false,\n    multiLineStrings: true,\n    number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+(\\.\\d+)?|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n    blockKeywords: words(\"catch class do else finally for if where try while enum\"),\n    defKeywords: words(\"class val var object interface fun\"),\n    atoms: words(\"true false null this\"),\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '*': function(_stream, state) {\n        return state.prevToken == '.' ? 'variable' : 'operator';\n      },\n      '\"': function(stream, state) {\n        state.tokenize = tokenKotlinString(stream.match('\"\"'));\n        return state.tokenize(stream, state);\n      },\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenNestedComment(1);\n        return state.tokenize(stream, state)\n      },\n      indent: function(state, ctx, textAfter, indentUnit) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        if ((state.prevToken == \"}\" || state.prevToken == \")\") && textAfter == \"\")\n          return state.indented;\n        if ((state.prevToken == \"operator\" && textAfter != \"}\" && state.context.type != \"}\") ||\n          state.prevToken == \"variable\" && firstChar == \".\" ||\n          (state.prevToken == \"}\" || state.prevToken == \")\") && firstChar == \".\")\n          return indentUnit * 2 + ctx.indented;\n        if (ctx.align && ctx.type == \"}\")\n          return ctx.indented + (state.context.type == (textAfter || \"\").charAt(0) ? 0 : indentUnit);\n      }\n    },\n    modeProps: {closeBrackets: {triples: '\"'}}\n  });\n\n  def([\"x-shader/x-vertex\", \"x-shader/x-fragment\"], {\n    name: \"clike\",\n    keywords: words(\"sampler1D sampler2D sampler3D samplerCube \" +\n                    \"sampler1DShadow sampler2DShadow \" +\n                    \"const attribute uniform varying \" +\n                    \"break continue discard return \" +\n                    \"for while do if else struct \" +\n                    \"in out inout\"),\n    types: words(\"float int bool void \" +\n                 \"vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 \" +\n                 \"mat2 mat3 mat4\"),\n    blockKeywords: words(\"for while do if else struct\"),\n    builtin: words(\"radians degrees sin cos tan asin acos atan \" +\n                    \"pow exp log exp2 sqrt inversesqrt \" +\n                    \"abs sign floor ceil fract mod min max clamp mix step smoothstep \" +\n                    \"length distance dot cross normalize ftransform faceforward \" +\n                    \"reflect refract matrixCompMult \" +\n                    \"lessThan lessThanEqual greaterThan greaterThanEqual \" +\n                    \"equal notEqual any all not \" +\n                    \"texture1D texture1DProj texture1DLod texture1DProjLod \" +\n                    \"texture2D texture2DProj texture2DLod texture2DProjLod \" +\n                    \"texture3D texture3DProj texture3DLod texture3DProjLod \" +\n                    \"textureCube textureCubeLod \" +\n                    \"shadow1D shadow2D shadow1DProj shadow2DProj \" +\n                    \"shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod \" +\n                    \"dFdx dFdy fwidth \" +\n                    \"noise1 noise2 noise3 noise4\"),\n    atoms: words(\"true false \" +\n                \"gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex \" +\n                \"gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 \" +\n                \"gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 \" +\n                \"gl_FogCoord gl_PointCoord \" +\n                \"gl_Position gl_PointSize gl_ClipVertex \" +\n                \"gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor \" +\n                \"gl_TexCoord gl_FogFragCoord \" +\n                \"gl_FragCoord gl_FrontFacing \" +\n                \"gl_FragData gl_FragDepth \" +\n                \"gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix \" +\n                \"gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse \" +\n                \"gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse \" +\n                \"gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose \" +\n                \"gl_ProjectionMatrixInverseTranspose \" +\n                \"gl_ModelViewProjectionMatrixInverseTranspose \" +\n                \"gl_TextureMatrixInverseTranspose \" +\n                \"gl_NormalScale gl_DepthRange gl_ClipPlane \" +\n                \"gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel \" +\n                \"gl_FrontLightModelProduct gl_BackLightModelProduct \" +\n                \"gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ \" +\n                \"gl_FogParameters \" +\n                \"gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords \" +\n                \"gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats \" +\n                \"gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits \" +\n                \"gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits \" +\n                \"gl_MaxDrawBuffers\"),\n    indentSwitch: false,\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-nesc\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" as atomic async call command component components configuration event generic \" +\n                    \"implementation includes interface module new norace nx_struct nx_union post provides \" +\n                    \"signal task uses abstract extends\"),\n    types: cTypes,\n    blockKeywords: words(cBlockKeywords),\n    atoms: words(\"null true false\"),\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-objectivec\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + objCKeywords),\n    types: objCTypes,\n    builtin: words(objCBuiltins),\n    blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized\"),\n    defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class\"),\n    dontIndentStatements: /^@.*$/,\n    typeFirstDefinitions: true,\n    atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n    },\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-objectivec++\", {\n    name: \"clike\",\n    keywords: words(cKeywords + \" \" + objCKeywords + \" \" + cppKeywords),\n    types: objCTypes,\n    builtin: words(objCBuiltins),\n    blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch\"),\n    defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class class namespace\"),\n    dontIndentStatements: /^@.*$|^template$/,\n    typeFirstDefinitions: true,\n    atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n    isReservedIdentifier: cIsReservedIdentifier,\n    hooks: {\n      \"#\": cppHook,\n      \"*\": pointerHook,\n      \"u\": cpp11StringHook,\n      \"U\": cpp11StringHook,\n      \"L\": cpp11StringHook,\n      \"R\": cpp11StringHook,\n      \"0\": cpp14Literal,\n      \"1\": cpp14Literal,\n      \"2\": cpp14Literal,\n      \"3\": cpp14Literal,\n      \"4\": cpp14Literal,\n      \"5\": cpp14Literal,\n      \"6\": cpp14Literal,\n      \"7\": cpp14Literal,\n      \"8\": cpp14Literal,\n      \"9\": cpp14Literal,\n      token: function(stream, state, style) {\n        if (style == \"variable\" && stream.peek() == \"(\" &&\n            (state.prevToken == \";\" || state.prevToken == null ||\n             state.prevToken == \"}\") &&\n            cppLooksLikeConstructor(stream.current()))\n          return \"def\";\n      }\n    },\n    namespaceSeparator: \"::\",\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  def(\"text/x-squirrel\", {\n    name: \"clike\",\n    keywords: words(\"base break clone continue const default delete enum extends function in class\" +\n                    \" foreach local resume return this throw typeof yield constructor instanceof static\"),\n    types: cTypes,\n    blockKeywords: words(\"case catch class else for foreach if switch try while\"),\n    defKeywords: words(\"function local class\"),\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null\"),\n    hooks: {\"#\": cppHook},\n    modeProps: {fold: [\"brace\", \"include\"]}\n  });\n\n  // Ceylon Strings need to deal with interpolation\n  var stringTokenizer = null;\n  function tokenCeylonString(type) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while (!stream.eol()) {\n        if (!escaped && stream.match('\"') &&\n              (type == \"single\" || stream.match('\"\"'))) {\n          end = true;\n          break;\n        }\n        if (!escaped && stream.match('``')) {\n          stringTokenizer = tokenCeylonString(type);\n          end = true;\n          break;\n        }\n        next = stream.next();\n        escaped = type == \"single\" && !escaped && next == \"\\\\\";\n      }\n      if (end)\n          state.tokenize = null;\n      return \"string\";\n    }\n  }\n\n  def(\"text/x-ceylon\", {\n    name: \"clike\",\n    keywords: words(\"abstracts alias assembly assert assign break case catch class continue dynamic else\" +\n                    \" exists extends finally for function given if import in interface is let module new\" +\n                    \" nonempty object of out outer package return satisfies super switch then this throw\" +\n                    \" try value void while\"),\n    types: function(word) {\n        // In Ceylon all identifiers that start with an uppercase are types\n        var first = word.charAt(0);\n        return (first === first.toUpperCase() && first !== first.toLowerCase());\n    },\n    blockKeywords: words(\"case catch class dynamic else finally for function if interface module new object switch try while\"),\n    defKeywords: words(\"class dynamic function interface module object package value\"),\n    builtin: words(\"abstract actual aliased annotation by default deprecated doc final formal late license\" +\n                   \" native optional sealed see serializable shared suppressWarnings tagged throws variable\"),\n    isPunctuationChar: /[\\[\\]{}\\(\\),;\\:\\.`]/,\n    isOperatorChar: /[+\\-*&%=<>!?|^~:\\/]/,\n    numberStart: /[\\d#$]/,\n    number: /^(?:#[\\da-fA-F_]+|\\$[01_]+|[\\d_]+[kMGTPmunpf]?|[\\d_]+\\.[\\d_]+(?:[eE][-+]?\\d+|[kMGTPmunpf]|)|)/i,\n    multiLineStrings: true,\n    typeFirstDefinitions: true,\n    atoms: words(\"true false null larger smaller equal empty finished\"),\n    indentSwitch: false,\n    styleDefs: false,\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      },\n      '\"': function(stream, state) {\n          state.tokenize = tokenCeylonString(stream.match('\"\"') ? \"triple\" : \"single\");\n          return state.tokenize(stream, state);\n        },\n      '`': function(stream, state) {\n          if (!stringTokenizer || !stream.match('`')) return false;\n          state.tokenize = stringTokenizer;\n          stringTokenizer = null;\n          return state.tokenize(stream, state);\n        },\n      \"'\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n        return \"atom\";\n      },\n      token: function(_stream, state, style) {\n          if ((style == \"variable\" || style == \"type\") &&\n              state.prevToken == \".\") {\n            return \"variable-2\";\n          }\n        }\n    },\n    modeProps: {\n        fold: [\"brace\", \"import\"],\n        closeBrackets: {triples: '\"'}\n    }\n  });\n\n});\n"],"file":"clike.js"}