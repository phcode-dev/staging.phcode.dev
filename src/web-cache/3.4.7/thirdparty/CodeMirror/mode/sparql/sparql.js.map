{"version":3,"sources":["thirdparty/CodeMirror/mode/sparql/sparql.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","curPunc","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","tokenLiteral","test","skipToEnd","eatPnLocal","eatWhile","eat","word","current","quote","escaped","pushContext","type","col","context","prev","indent","popContext","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,SAAU,SAASC,QACvC,IAAIC,WAAaD,OAAOC,WACpBC,QAEJ,SAASC,WAAWC,OAClB,OAAO,IAAIC,OAAO,OAASD,MAAME,KAAK,KAAO,KAAM,KAErD,IAAIC,IAAMJ,WAAW,CAAC,MAAO,OAAQ,cAAe,WAAY,QAAS,WAAY,QAAS,QACxE,MAAO,MAAO,QAAS,QAAS,MAAO,MAAO,MAAO,MAAO,SAC5D,eAAgB,OAAQ,MAAO,OAAQ,QAAS,QAAS,SAAU,SAAU,SAC7E,UAAW,QAAS,QAAS,iBAAkB,WAAY,YAAa,UACxE,YAAa,WAAY,OAAQ,QAAS,MAAO,QAAS,UAAW,UACrE,WAAY,KAAM,MAAO,OAAQ,UAAW,MAAO,OAAQ,SAAU,SACrE,SAAU,WAAY,KAAM,UAAW,QAAS,YAAa,QAAS,SACtE,UAAW,YAAa,IAAK,SAC/CK,SAAWL,WAAW,CAAC,OAAQ,SAAU,SAAU,WAAY,UAAW,YAAa,WAChE,MAAO,OAAQ,QAAS,QAAS,QAAS,QAAS,SAAU,SAAU,WACvE,QAAS,KAAM,MAAO,OAAQ,KAAM,SAAU,QAAS,SAAU,QACjE,QAAS,KAAM,MAAO,UAAW,SAAU,QAAS,SAAU,SAAU,QACxE,OAAQ,QAAS,OACjB,OAAQ,OAAQ,KAAM,OAAQ,MAAO,SAAU,OAAQ,QAAS,OAAQ,SAC/FM,cAAgB,qBAEpB,SAASC,UAAUC,OAAQC,OACzB,IAAIC,GAAKF,OAAOG,OAEhB,GADAZ,QAAU,KACA,KAANW,IAAmB,KAANA,GACf,MAAS,KAANA,IAAaF,OAAOI,MAAM,MAAM,GAC1B,YAETJ,OAAOI,MAAM,kUACN,cAEJ,GAAU,KAANF,IAAcF,OAAOI,MAAM,gBAAgB,GAI/C,CAAA,GAAU,KAANF,IAAoB,KAANA,GAErB,OADAD,MAAMI,SAAWC,aAAaJ,IACvBD,MAAMI,SAASL,OAAQC,OAE3B,GAAI,mBAAmBM,KAAKL,IAE/B,OADAX,QAAUW,GACH,UAEJ,GAAU,KAANA,GAEP,OADAF,OAAOQ,YACA,UAEJ,GAAIV,cAAcS,KAAKL,IAC1B,MAAO,WAEJ,GAAU,KAANA,GAEP,OADAO,WAAWT,QACJ,OAEJ,GAAU,KAANE,GAEP,OADAF,OAAOU,SAAS,cACT,OAIP,GADAV,OAAOU,SAAS,WACZV,OAAOW,IAAI,KAEb,OADAF,WAAWT,QACJ,OAET,IAAIY,KAAOZ,OAAOa,UAClB,OAAIjB,IAAIW,KAAKK,MACJ,UACAf,SAASU,KAAKK,MACd,UAEA,WArCT,OADAZ,OAAOI,MAAM,oBACN,OAyCX,SAASK,WAAWT,QAClBA,OAAOI,MAAM,2EAGf,SAASE,aAAaQ,OACpB,OAAO,SAASd,OAAQC,OAEtB,IADA,IAAIc,SAAU,EAAOb,GACU,OAAvBA,GAAKF,OAAOG,SAAiB,CACnC,GAAID,IAAMY,QAAUC,QAAS,CAC3Bd,MAAMI,SAAWN,UACjB,MAEFgB,SAAWA,SAAiB,MAANb,GAExB,MAAO,UAIX,SAASc,YAAYf,MAAOgB,KAAMC,KAChCjB,MAAMkB,QAAU,CAACC,KAAMnB,MAAMkB,QAASE,OAAQpB,MAAMoB,OAAQH,IAAKA,IAAKD,KAAMA,MAE9E,SAASK,WAAWrB,OAClBA,MAAMoB,OAASpB,MAAMkB,QAAQE,OAC7BpB,MAAMkB,QAAUlB,MAAMkB,QAAQC,KAGhC,MAAO,CACLG,WAAY,WACV,MAAO,CAAClB,SAAUN,UACVoB,QAAS,KACTE,OAAQ,EACRH,IAAK,IAGfM,MAAO,SAASxB,OAAQC,OAKtB,GAJID,OAAOyB,QACLxB,MAAMkB,SAAkC,MAAvBlB,MAAMkB,QAAQO,QAAezB,MAAMkB,QAAQO,OAAQ,GACxEzB,MAAMoB,OAASrB,OAAO2B,eAEpB3B,OAAO4B,WAAY,OAAO,KAC9B,IAAIC,MAAQ5B,MAAMI,SAASL,OAAQC,OAMnC,GAJa,WAAT4B,OAAsB5B,MAAMkB,SAAkC,MAAvBlB,MAAMkB,QAAQO,OAAuC,WAAtBzB,MAAMkB,QAAQF,OACtFhB,MAAMkB,QAAQO,OAAQ,GAGT,KAAXnC,QAAgByB,YAAYf,MAAO,IAAKD,OAAO8B,eAC9C,GAAe,KAAXvC,QAAgByB,YAAYf,MAAO,IAAKD,OAAO8B,eACnD,GAAe,KAAXvC,QAAgByB,YAAYf,MAAO,IAAKD,OAAO8B,eACnD,GAAI,WAAWvB,KAAKhB,SAAU,CACjC,KAAOU,MAAMkB,SAAiC,WAAtBlB,MAAMkB,QAAQF,MAAmBK,WAAWrB,OAChEA,MAAMkB,SAAW5B,SAAWU,MAAMkB,QAAQF,OAC5CK,WAAWrB,OACI,KAAXV,SAAkBU,MAAMkB,SAAiC,WAAtBlB,MAAMkB,QAAQF,MACnDK,WAAWrB,YAGG,KAAXV,SAAkBU,MAAMkB,SAAiC,WAAtBlB,MAAMkB,QAAQF,KAAmBK,WAAWrB,OAC/E,uBAAuBM,KAAKsB,QAAU5B,MAAMkB,UAC/C,SAASZ,KAAKN,MAAMkB,QAAQF,MAC9BD,YAAYf,MAAO,UAAWD,OAAO8B,UACR,WAAtB7B,MAAMkB,QAAQF,MAAsBhB,MAAMkB,QAAQO,QACzDzB,MAAMkB,QAAQO,OAAQ,EACtBzB,MAAMkB,QAAQD,IAAMlB,OAAO8B,WAI/B,OAAOD,OAGTR,OAAQ,SAASpB,MAAO8B,WACtB,IAAIC,UAAYD,WAAaA,UAAUE,OAAO,GAC1Cd,QAAUlB,MAAMkB,QACpB,GAAI,SAASZ,KAAKyB,WAChB,KAAOb,SAA2B,WAAhBA,QAAQF,MAAmBE,QAAUA,QAAQC,KAEjE,IAAIc,QAAUf,SAAWa,WAAab,QAAQF,KAC9C,OAAKE,QAEoB,WAAhBA,QAAQF,KACRE,QAAQD,IACRC,QAAQO,MACRP,QAAQD,KAAOgB,QAAU,EAAI,GAE7Bf,QAAQE,QAAUa,QAAU,EAAI5C,YANhC,GASX6C,YAAa,OAIjBhD,WAAWiD,WAAW,2BAA4B","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sparql\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\",\n                        \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\",\n                        \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\",\n                        \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\",\n                        \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\",\n                        \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\",\n                        \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\",\n                        \"isblank\", \"isliteral\", \"a\", \"bind\"]);\n  var keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\",\n                             \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\",\n                             \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\",\n                             \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\",\n                             \"true\", \"false\", \"with\",\n                             \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\", \"into\"]);\n  var operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"$\" || ch == \"?\") {\n      if(ch == \"?\" && stream.match(/\\s/, false)){\n        return \"operator\";\n      }\n      stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n      return \"variable-2\";\n    }\n    else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return \"bracket\";\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      return \"operator\";\n    }\n    else if (ch == \":\") {\n      eatPnLocal(stream);\n      return \"atom\";\n    }\n    else if (ch == \"@\") {\n      stream.eatWhile(/[a-z\\d\\-]/i);\n      return \"meta\";\n    }\n    else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if (stream.eat(\":\")) {\n        eatPnLocal(stream);\n        return \"atom\";\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return \"builtin\";\n      else if (keywords.test(word))\n        return \"keyword\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function eatPnLocal(stream) {\n    stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) {\n          popContext(state);\n          if (curPunc == \"}\" && state.context && state.context.type == \"pattern\")\n            popContext(state);\n        }\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sparql-query\", \"sparql\");\n\n});\n"],"file":"sparql.js"}