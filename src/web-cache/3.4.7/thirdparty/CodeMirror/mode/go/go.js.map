{"version":3,"sources":["thirdparty/CodeMirror/mode/go/go.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","keywords","break","case","chan","const","continue","default","defer","else","fallthrough","for","func","go","goto","if","import","interface","map","package","range","return","select","struct","switch","type","var","bool","byte","complex64","complex128","float32","float64","int8","int16","int32","int64","string","uint8","uint16","uint32","uint64","int","uint","uintptr","error","rune","any","comparable","atoms","true","false","iota","nil","append","cap","close","complex","copy","delete","imag","len","make","new","panic","print","println","real","recover","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","match","eat","tokenComment","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","Context","indented","column","align","prev","this","pushContext","col","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","Pass","firstChar","charAt","closing","electricChars","closeBrackets","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,KAAM,SAASC,QACnC,IAAIC,WAAaD,OAAOC,WAEpBC,SAAW,CACbC,OAAQ,EAAMC,MAAO,EAAMC,MAAO,EAAMC,OAAQ,EAAMC,UAAW,EACjEC,SAAU,EAAMC,OAAQ,EAAMC,MAAO,EAAMC,aAAc,EAAMC,KAAM,EACrEC,MAAO,EAAMC,IAAK,EAAMC,MAAO,EAAMC,IAAK,EAAMC,QAAS,EACzDC,WAAY,EAAMC,KAAM,EAAMC,SAAU,EAAMC,OAAQ,EAAMC,QAAS,EACrEC,QAAS,EAAMC,QAAS,EAAMC,QAAS,EAAMC,MAAO,EAAMC,KAAM,EAChEC,MAAO,EAAMC,MAAO,EAAMC,WAAY,EAAMC,YAAa,EACzDC,SAAU,EAAMC,SAAU,EAAMC,MAAO,EAAMC,OAAQ,EAAMC,OAAQ,EACnEC,OAAQ,EAAMC,QAAS,EAAMC,OAAQ,EAAMC,QAAS,EAAMC,QAAS,EACnEC,QAAS,EAAMC,KAAM,EAAMC,MAAO,EAAMC,SAAU,EAAMC,OAAS,EACjEC,MAAO,EAAMC,KAAM,EAAMC,YAAa,GAGpCC,MAAQ,CACVC,MAAO,EAAMC,OAAQ,EAAMC,MAAO,EAAMC,KAAM,EAAMC,QAAS,EAC7DC,KAAM,EAAMC,OAAQ,EAAMC,SAAU,EAAMC,MAAO,EAAMC,QAAS,EAAMC,MAAO,EAC7EC,KAAM,EAAMC,MAAO,EAAMC,KAAM,EAAMC,OAAQ,EAAMC,OAAQ,EAC3DC,SAAU,EAAMC,MAAO,EAAMC,SAAU,GAGrCC,eAAiB,oBAEjBC,QAEJ,SAASC,UAAUC,OAAQC,OACzB,IAAIC,GAAKF,OAAOG,OAChB,GAAU,KAAND,IAAmB,KAANA,IAAmB,KAANA,GAE5B,OADAD,MAAMG,SAAWC,YAAYH,IACtBD,MAAMG,SAASJ,OAAQC,OAEhC,GAAI,SAASK,KAAKJ,IAQhB,MAPU,KAANA,GACFF,OAAOO,MAAM,8BACE,KAANL,GACTF,OAAOO,MAAM,sBAAwBP,OAAOO,MAAM,YAElDP,OAAOO,MAAM,uCAER,SAET,GAAI,qBAAqBD,KAAKJ,IAE5B,OADAJ,QAAUI,GACH,KAET,GAAU,KAANA,GAAW,CACb,GAAIF,OAAOQ,IAAI,KAEb,OADAP,MAAMG,SAAWK,aACVA,aAAaT,OAAQC,OAE9B,GAAID,OAAOQ,IAAI,KAEb,OADAR,OAAOU,YACA,UAGX,GAAIb,eAAeS,KAAKJ,IAEtB,OADAF,OAAOW,SAASd,gBACT,WAETG,OAAOW,SAAS,sBAChB,IAAIC,IAAMZ,OAAOa,UACjB,OAAIpF,SAASqF,qBAAqBF,MACrB,QAAPA,KAAwB,WAAPA,MAAkBd,QAAU,QAC1C,WAELrB,MAAMqC,qBAAqBF,KAAa,OACrC,WAGT,SAASP,YAAYU,OACnB,OAAO,SAASf,OAAQC,OAEtB,IADA,IAAIe,SAAU,EAAOb,KAAMc,KAAM,EACA,OAAzBd,KAAOH,OAAOG,SAAiB,CACrC,GAAIA,MAAQY,QAAUC,QAAS,CAACC,KAAM,EAAM,MAC5CD,SAAWA,SAAoB,KAATD,OAAwB,MAARZ,KAIxC,OAFIc,MAASD,SAAoB,KAATD,SACtBd,MAAMG,SAAWL,WACZ,UAIX,SAASU,aAAaT,OAAQC,OAE5B,IADA,IAAIiB,UAAW,EAAOhB,GACfA,GAAKF,OAAOG,QAAQ,CACzB,GAAU,KAAND,IAAagB,SAAU,CACzBjB,MAAMG,SAAWL,UACjB,MAEFmB,SAAkB,KAANhB,GAEd,MAAO,UAGT,SAASiB,QAAQC,SAAUC,OAAQpE,KAAMqE,MAAOC,MAC9CC,KAAKJ,SAAWA,SAChBI,KAAKH,OAASA,OACdG,KAAKvE,KAAOA,KACZuE,KAAKF,MAAQA,MACbE,KAAKD,KAAOA,KAEd,SAASE,YAAYxB,MAAOyB,IAAKzE,MAC/B,OAAOgD,MAAM0B,QAAU,IAAIR,QAAQlB,MAAMmB,SAAUM,IAAKzE,KAAM,KAAMgD,MAAM0B,SAE5E,SAASC,WAAW3B,OAClB,GAAKA,MAAM0B,QAAQJ,KAAnB,CACA,IAAIM,EAAI5B,MAAM0B,QAAQ1E,KAGtB,MAFS,KAAL4E,GAAiB,KAALA,GAAiB,KAALA,IAC1B5B,MAAMmB,SAAWnB,MAAM0B,QAAQP,UAC1BnB,MAAM0B,QAAU1B,MAAM0B,QAAQJ,MAKvC,MAAO,CACLO,WAAY,SAASC,YACnB,MAAO,CACL3B,SAAU,KACVuB,QAAS,IAAIR,SAASY,YAAc,GAAKvG,WAAY,EAAG,OAAO,GAC/D4F,SAAU,EACVY,aAAa,IAIjBC,MAAO,SAASjC,OAAQC,OACtB,IAAIiC,IAAMjC,MAAM0B,QAOhB,GANI3B,OAAOmC,QACQ,MAAbD,IAAIZ,QAAeY,IAAIZ,OAAQ,GACnCrB,MAAMmB,SAAWpB,OAAOoC,cACxBnC,MAAM+B,aAAc,EACJ,QAAZE,IAAIjF,OAAgBiF,IAAIjF,KAAO,MAEjC+C,OAAOqC,WAAY,OAAO,KAC9BvC,QAAU,KACV,IAAIwC,OAASrC,MAAMG,UAAYL,WAAWC,OAAQC,OAClD,MAAa,WAATqC,MAA2BA,OACd,MAAbJ,IAAIZ,QAAeY,IAAIZ,OAAQ,GAEpB,KAAXxB,QAAgB2B,YAAYxB,MAAOD,OAAOqB,SAAU,KACpC,KAAXvB,QAAgB2B,YAAYxB,MAAOD,OAAOqB,SAAU,KACzC,KAAXvB,QAAgB2B,YAAYxB,MAAOD,OAAOqB,SAAU,KACzC,QAAXvB,QAAmBoC,IAAIjF,KAAO,OACnB,KAAX6C,SAA8B,KAAZoC,IAAIjF,KAAa2E,WAAW3B,OAC9CH,SAAWoC,IAAIjF,MAAM2E,WAAW3B,OACzCA,MAAM+B,aAAc,EACbM,QAGTC,OAAQ,SAAStC,MAAOuC,WACtB,GAAIvC,MAAMG,UAAYL,WAA+B,MAAlBE,MAAMG,SAAkB,OAAO/E,WAAWoH,KAC7E,IAAIP,IAAMjC,MAAM0B,QAASe,UAAYF,WAAaA,UAAUG,OAAO,GACnE,GAAgB,QAAZT,IAAIjF,MAAkB,sBAAsBqD,KAAKkC,WAEnD,OADAvC,MAAM0B,QAAQ1E,KAAO,IACdiF,IAAId,SAEb,IAAIwB,QAAUF,WAAaR,IAAIjF,KAC/B,OAAIiF,IAAIZ,MAAcY,IAAIb,QAAUuB,QAAU,EAAI,GACtCV,IAAId,UAAYwB,QAAU,EAAIpH,aAG5CqH,cAAe,OACfC,cAAe,iBACfC,KAAM,QACNC,kBAAmB,KACnBC,gBAAiB,KACjBC,YAAa,QAIjB7H,WAAW8H,WAAW,YAAa","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"go\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n    \"break\":true, \"case\":true, \"chan\":true, \"const\":true, \"continue\":true,\n    \"default\":true, \"defer\":true, \"else\":true, \"fallthrough\":true, \"for\":true,\n    \"func\":true, \"go\":true, \"goto\":true, \"if\":true, \"import\":true,\n    \"interface\":true, \"map\":true, \"package\":true, \"range\":true, \"return\":true,\n    \"select\":true, \"struct\":true, \"switch\":true, \"type\":true, \"var\":true,\n    \"bool\":true, \"byte\":true, \"complex64\":true, \"complex128\":true,\n    \"float32\":true, \"float64\":true, \"int8\":true, \"int16\":true, \"int32\":true,\n    \"int64\":true, \"string\":true, \"uint8\":true, \"uint16\":true, \"uint32\":true,\n    \"uint64\":true, \"int\":true, \"uint\":true, \"uintptr\":true, \"error\": true,\n    \"rune\":true, \"any\":true, \"comparable\":true\n  };\n\n  var atoms = {\n    \"true\":true, \"false\":true, \"iota\":true, \"nil\":true, \"append\":true,\n    \"cap\":true, \"close\":true, \"complex\":true, \"copy\":true, \"delete\":true, \"imag\":true,\n    \"len\":true, \"make\":true, \"new\":true, \"panic\":true, \"print\":true,\n    \"println\":true, \"real\":true, \"recover\":true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n      }\n      if (end || !(escaped || quote == \"`\"))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n        if (ctx.type == \"case\") ctx.type = \"}\";\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"case\") ctx.type = \"case\";\n      else if (curPunc == \"}\" && ctx.type == \"}\") popContext(state);\n      else if (curPunc == ctx.type) popContext(state);\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) {\n        state.context.type = \"}\";\n        return ctx.indented;\n      }\n      var closing = firstChar == ctx.type;\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}):\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"brace\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-go\", \"go\");\n\n});\n"],"file":"go.js"}