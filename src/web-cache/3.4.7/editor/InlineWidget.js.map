{"version":3,"sources":["editor/InlineWidget.js"],"names":["define","require","exports","module","EditorManager","EventDispatcher","KeyEvent","InlineWidget","self","this","htmlContent","window","document","createElement","$htmlContent","$","addClass","attr","append","$closeBtn","find","click","e","close","stopImmediatePropagation","on","keyCode","DOM_VK_ESCAPE","prototype","id","hostEditor","makeEventDispatcher","height","closeInlineWidget","hasFocus","focusedItem","activeElement","containsFocus","contains","onClosed","trigger","onAdded","load","onParentShown","refresh"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAI/B,IAAIC,cAAsBH,QAAQ,wBAC9BI,gBAAsBJ,QAAQ,yBAC9BK,SAAsBL,QAAQ,kBAMlC,SAASM,eACL,IAAIC,KAAOC,KAGXA,KAAKC,YAAcC,OAAOC,SAASC,cAAc,OACjDJ,KAAKK,aAAeC,EAAEN,KAAKC,aAAaM,SAAS,iBAAiBC,KAAK,WAAY,MACnFR,KAAKK,aAAaI,OAAO,8BACpBA,OAAO,iCACPA,OAAO,kDAGZT,KAAKU,UAAYV,KAAKK,aAAaM,KAAK,UACxCX,KAAKU,UAAUE,MAAM,SAAUC,GAC3Bd,KAAKe,QACLD,EAAEE,6BAGNf,KAAKK,aAAaW,GAAG,UAAW,SAAUH,GAClCA,EAAEI,UAAYpB,SAASqB,gBACvBnB,KAAKe,QACLD,EAAEE,8BAIdjB,aAAaqB,UAAUlB,YAAc,KACrCH,aAAaqB,UAAUd,aAAe,KACtCP,aAAaqB,UAAUC,GAAK,KAC5BtB,aAAaqB,UAAUE,WAAa,KACpCzB,gBAAgB0B,oBAAoBxB,aAAaqB,WAMjDrB,aAAaqB,UAAUI,OAAS,EAMhCzB,aAAaqB,UAAUL,MAAQ,WAC3B,OAAOnB,cAAc6B,kBAAkBxB,KAAKqB,WAAYrB,OAO5DF,aAAaqB,UAAUM,SAAW,WAC9B,MAAMC,YAAcxB,OAAOC,SAASwB,cAChC1B,YAAcD,KAAKK,aAAa,GAC9BuB,cAAgBtB,EAAEuB,SAAS5B,YAAayB,aAC9C,OAAOE,eAAiB3B,cAAgByB,aAM5C5B,aAAaqB,UAAUW,SAAW,WAC9B9B,KAAK+B,QAAQ,UAUjBjC,aAAaqB,UAAUa,QAAU,WAC7BhC,KAAK+B,QAAQ,QAMjBjC,aAAaqB,UAAUc,KAAO,SAAUZ,YACpCrB,KAAKqB,WAAaA,YAMtBvB,aAAaqB,UAAUe,cAAgB,aAOvCpC,aAAaqB,UAAUgB,QAAU,aAIjC1C,QAAQK,aAAeA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var EditorManager       = require(\"editor/EditorManager\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        KeyEvent            = require(\"utils/KeyEvent\");\n\n    /**\n     * @constructor\n     *\n     */\n    function InlineWidget() {\n        var self = this;\n\n        // create the outer wrapper div\n        this.htmlContent = window.document.createElement(\"div\");\n        this.$htmlContent = $(this.htmlContent).addClass(\"inline-widget\").attr(\"tabindex\", \"-1\");\n        this.$htmlContent.append(\"<div class='shadow top' />\")\n            .append(\"<div class='shadow bottom' />\")\n            .append(\"<a href='#' class='close no-focus'>&times;</a>\");\n\n        // create the close button\n        this.$closeBtn = this.$htmlContent.find(\".close\");\n        this.$closeBtn.click(function (e) {\n            self.close();\n            e.stopImmediatePropagation();\n        });\n\n        this.$htmlContent.on(\"keydown\", function (e) {\n            if (e.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n                self.close();\n                e.stopImmediatePropagation();\n            }\n        });\n    }\n    InlineWidget.prototype.htmlContent = null;\n    InlineWidget.prototype.$htmlContent = null;\n    InlineWidget.prototype.id = null;\n    InlineWidget.prototype.hostEditor = null;\n    EventDispatcher.makeEventDispatcher(InlineWidget.prototype);\n\n    /**\n     * Initial height of inline widget in pixels. Can be changed later via hostEditor.setInlineWidgetHeight()\n     * @type {number}\n     */\n    InlineWidget.prototype.height = 0;\n\n    /**\n     * Closes this inline widget and all its contained Editors\n     * @return {$.Promise} A promise that's resolved when the widget is fully closed.\n     */\n    InlineWidget.prototype.close = function () {\n        return EditorManager.closeInlineWidget(this.hostEditor, this);\n        // closeInlineWidget() causes our onClosed() handler to be called\n    };\n\n    /**\n     * @return {boolean} True if any part of the inline widget is focused\n     */\n    InlineWidget.prototype.hasFocus = function () {\n        const focusedItem = window.document.activeElement,\n            htmlContent = this.$htmlContent[0];\n        const containsFocus = $.contains(htmlContent, focusedItem);\n        return containsFocus || htmlContent === focusedItem;\n    };\n\n    /**\n     * Called any time inline is closed, whether manually or automatically.\n     */\n    InlineWidget.prototype.onClosed = function () {\n        this.trigger(\"close\");\n    };\n\n    /**\n     * Called once content is parented in the host editor's DOM. Useful for performing tasks like setting\n     * focus or measuring content, which require htmlContent to be in the DOM tree.\n     *\n     * IMPORTANT: onAdded() MUST be overridden to call hostEditor.setInlineWidgetHeight() at least once to\n     * set the initial height (required to animate it open). The widget will never open otherwise.\n     */\n    InlineWidget.prototype.onAdded = function () {\n        this.trigger(\"add\");\n    };\n\n    /**\n     * @param {Editor} hostEditor\n     */\n    InlineWidget.prototype.load = function (hostEditor) {\n        this.hostEditor = hostEditor;\n    };\n\n    /**\n     * Called when the editor containing the inline is made visible.\n     */\n    InlineWidget.prototype.onParentShown = function () {\n        // do nothing - base implementation\n    };\n\n    /**\n     * Called when the parent editor does a full refresh--for example, when the font size changes.\n     */\n    InlineWidget.prototype.refresh = function () {\n        // do nothing - base implementation\n    };\n\n    exports.InlineWidget = InlineWidget;\n\n});\n"],"file":"InlineWidget.js"}