{"version":3,"sources":["LiveDevelopment/MultiBrowserImpl/documents/LiveCSSDocument.js"],"names":["define","LiveCSSDocumentModule","require","exports","module","_","CSSUtils","EventDispatcher","LiveDocument","PathUtils","LiveCSSDocument","protocol","urlResolver","doc","editor","roots","apply","this","arguments","addRef","onChange","bind","onDeleted","on","_attachToEditor","prototype","Object","create","constructor","parentClass","makeEventDispatcher","close","off","releaseRef","call","_updateBrowser","i","docUrl","url","makeUrlsRelativeToCss","match","quotationMark","absUrl","isRelativeUrl","makeUrlAbsolute","length","toString","trigger","docText","getText","replace","setStylesheetText","redrawHighlights","updateHighlight","isHighlightEnabled","selectors","each","getSelections","sel","selector","findSelectorAtDocumentPos","reversed","end","start","push","highlightRule","join","hideHighlight","isLiveEditingEnabled","event","change","getSourceFromBrowser","deferred","$","Deferred","getStylesheetText","then","res","resolve","text","reject","promise"],"mappings":"AAyCAA,OAAO,SAASC,sBAAsBC,QAASC,QAASC,QAGpD,IAAIC,EAAkBH,QAAQ,qBAC1BI,SAAkBJ,QAAQ,qBAC1BK,gBAAkBL,QAAQ,yBAC1BM,aAAkBN,QAAQ,2DAC1BO,UAAkBP,QAAQ,oCAa1BQ,gBAAkB,SAASA,gBAAgBC,SAAUC,YAAaC,IAAKC,OAAQC,OAC/EP,aAAaQ,MAAMC,KAAMC,WAGzBD,KAAKJ,IAAIM,SACTF,KAAKG,SAAWH,KAAKG,SAASC,KAAKJ,MACnCA,KAAKK,UAAYL,KAAKK,UAAUD,KAAKJ,MAErCA,KAAKJ,IAAIU,GAAG,yBAA0BN,KAAKG,UAC3CH,KAAKJ,IAAIU,GAAG,0BAA2BN,KAAKK,WACxCR,QACAG,KAAKO,gBAAgBV,UAI7BJ,gBAAgBe,UAAYC,OAAOC,OAAOnB,aAAaiB,YAC7BG,YAAclB,gBACxCA,gBAAgBe,UAAUI,YAAcrB,aAAaiB,UAErDlB,gBAAgBuB,oBAAoBpB,gBAAgBe,WAMpDf,gBAAgBe,UAAUM,MAAQ,WAC9Bd,KAAKJ,IAAImB,IAAI,oBACbf,KAAKJ,IAAIoB,aACThB,KAAKY,YAAYE,MAAMG,KAAKjB,OAMhCP,gBAAgBe,UAAUU,eAAiB,WACvC,IAAIC,EACAC,OAASpB,KAAKJ,IAAIyB,IAItB,SAASC,sBAAsBC,MAAOC,cAAeH,KAE7C,IAAII,OADR,OAAIjC,UAAUkC,cAAcL,KAEjB,OAASG,cADHhC,UAAUmC,gBAAgBN,IAAKD,QACHI,cAAgB,IAEtDD,MAGX,IAAKJ,EAAI,EAAGA,EAAInB,KAAKF,MAAM8B,OAAQT,IAC/B,GAAIC,SAAWpB,KAAKF,MAAMqB,GAAGU,WAGzB7B,KAAK8B,QAAQ,YAAa9B,KAAKF,MAAMqB,QAClC,CACH,IAAIY,QAAU/B,KAAKJ,IAAIoC,UAIvBD,QAAUA,QAAQE,QAAQ,sCAAuCX,uBACjEtB,KAAKN,SAASwC,kBAAkBd,OAAQW,SAGhD/B,KAAKmC,oBAOT1C,gBAAgBe,UAAU4B,gBAAkB,WACxC,GAAIpC,KAAKqC,sBAAwBrC,KAAKH,OAAQ,CAC1C,IAAIA,OAASG,KAAKH,OACdyC,UAAY,GAChBlD,EAAEmD,KAAKvC,KAAKH,OAAO2C,gBAAiB,SAAUC,KAC1C,IAAIC,SAAWrD,SAASsD,0BAA0B9C,OAAS4C,IAAIG,SAAWH,IAAII,IAAMJ,IAAIK,OACpFJ,UACAJ,UAAUS,KAAKL,YAGnBJ,UAAUV,OACV5B,KAAKgD,cAAcV,UAAUW,KAAK,MAElCjD,KAAKkD,kBAUjBzD,gBAAgBe,UAAU2C,qBAAuB,WAC7C,OAAO,GAYX1D,gBAAgBe,UAAUL,SAAW,SAAUiD,MAAOvD,OAAQwD,QAC1DrD,KAAKkB,kBASTzB,gBAAgBe,UAAUH,UAAY,SAAU+C,OAK5CpD,KAAKc,QACLd,KAAK8B,QAAQ,UAAW,CAAC9B,QAI7BP,gBAAgBe,UAAU8C,qBAAuB,WAC7C,IAAIC,SAAW,IAAIC,EAAEC,SAOrB,OALAzD,KAAKN,SAASgE,kBAAkB1D,KAAKJ,IAAIyB,KACpCsC,KAAK,SAAUC,KACZL,SAASM,QAAQD,IAAIE,OACtBP,SAASQ,QAETR,SAASS,WAIpB7E,OAAOD,QAAUO","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\n/**\n * LiveCSSDocument manages a single CSS source document\n *\n * # EDITING\n *\n * Editing the document will cause the style sheet to be reloaded in the browser,\n * which immediately updates the appearance of the rendered document.\n *\n * # HIGHLIGHTING\n *\n * DOM nodes corresponding to the rule at the current cursor position are highlighted.\n *\n * # EVENTS\n *\n * LiveCSSDocument dispatches these events:\n *  deleted - When the file for the underlying Document has been deleted. The\n *      2nd argument to the listener will be this LiveCSSDocument.\n */\ndefine(function LiveCSSDocumentModule(require, exports, module) {\n\n\n    var _               = require(\"thirdparty/lodash\"),\n        CSSUtils        = require(\"language/CSSUtils\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        LiveDocument    = require(\"LiveDevelopment/MultiBrowserImpl/documents/LiveDocument\"),\n        PathUtils       = require(\"thirdparty/path-utils/path-utils\");\n\n    /**\n     * @constructor\n     * @see LiveDocument\n     * @param {LiveDevProtocol} protocol The protocol to use for communicating with the browser.\n     * @param {function(string): string} urlResolver A function that, given a path on disk, should return\n     *     the URL that Live Development serves that path at.\n     * @param {Document} doc The Brackets document that this live document is connected to.\n     * @param {?Editor} editor If specified, a particular editor that this live document is managing.\n     *     If not specified initially, the LiveDocument will connect to the editor for the given document\n     *     when it next becomes the active editor.\n     */\n    var LiveCSSDocument = function LiveCSSDocument(protocol, urlResolver, doc, editor, roots) {\n        LiveDocument.apply(this, arguments);\n\n        // Add a ref to the doc since we're listening for change events\n        this.doc.addRef();\n        this.onChange = this.onChange.bind(this);\n        this.onDeleted = this.onDeleted.bind(this);\n\n        this.doc.on(\"change.LiveCSSDocument\", this.onChange);\n        this.doc.on(\"deleted.LiveCSSDocument\", this.onDeleted);\n        if (editor) {\n            this._attachToEditor(editor);\n        }\n    };\n\n    LiveCSSDocument.prototype = Object.create(LiveDocument.prototype);\n    LiveCSSDocument.prototype.constructor = LiveCSSDocument;\n    LiveCSSDocument.prototype.parentClass = LiveDocument.prototype;\n\n    EventDispatcher.makeEventDispatcher(LiveCSSDocument.prototype);\n\n    /**\n     * @override\n     * Closes the live document, terminating its connection to the browser.\n     */\n    LiveCSSDocument.prototype.close = function () {\n        this.doc.off(\".LiveCSSDocument\");\n        this.doc.releaseRef();\n        this.parentClass.close.call(this);\n    };\n\n    /**\n     * When the user edits the file, update the stylesheet in the browser and redraw highlights.\n     */\n    LiveCSSDocument.prototype._updateBrowser = function () {\n        var i,\n            docUrl = this.doc.url;\n\n        // Determines whether an url() line contains a relative or absolute URL, and makes\n        // the URL absolute to the CSS file if it is relative\n        function makeUrlsRelativeToCss(match, quotationMark, url) {\n            if (PathUtils.isRelativeUrl(url)) {\n                var absUrl = PathUtils.makeUrlAbsolute(url, docUrl);\n                return \"url(\" + quotationMark + absUrl + quotationMark + \")\";\n            }\n            return match;\n        }\n\n        for (i = 0; i < this.roots.length; i++) {\n            if (docUrl !== this.roots[i].toString()) {\n                // if it's not directly included through <link>,\n                // reload the original doc\n                this.trigger(\"updateDoc\", this.roots[i]);\n            } else {\n                var docText = this.doc.getText();\n\n                // Replace all occurrences of url() where the URL is relative to the CSS file with\n                // an absolute URL so it is relative to the CSS file, not the HTML file (see #11936)\n                docText = docText.replace(/\\burl\\(\\s*([\"']?)([^)\\n]+)\\1\\s*\\)/ig, makeUrlsRelativeToCss);\n                this.protocol.setStylesheetText(docUrl, docText);\n            }\n        }\n        this.redrawHighlights();\n    };\n\n    /**\n     * @override\n     * Update the highlights in the browser based on the cursor position.\n     */\n    LiveCSSDocument.prototype.updateHighlight = function () {\n        if (this.isHighlightEnabled() && this.editor) {\n            var editor = this.editor,\n                selectors = [];\n            _.each(this.editor.getSelections(), function (sel) {\n                var selector = CSSUtils.findSelectorAtDocumentPos(editor, (sel.reversed ? sel.end : sel.start));\n                if (selector) {\n                    selectors.push(selector);\n                }\n            });\n            if (selectors.length) {\n                this.highlightRule(selectors.join(\",\"));\n            } else {\n                this.hideHighlight();\n            }\n        }\n    };\n\n    /**\n     * @override\n     * Returns true if document edits appear live in the connected browser.\n     * @return {boolean}\n     */\n    LiveCSSDocument.prototype.isLiveEditingEnabled = function () {\n        return true;\n    };\n\n    /** Event Handlers *******************************************************/\n\n    /**\n     * @private\n     * Handles edits to the document. Updates the stylesheet in the browser.\n     * @param {$.Event} event\n     * @param {Editor} editor\n     * @param {Object} change\n     */\n    LiveCSSDocument.prototype.onChange = function (event, editor, change) {\n        this._updateBrowser();\n    };\n\n    /**\n     * @private\n     * Handles when the associated CSS document is deleted on disk. Removes the\n     * stylesheet from the browser and shuts down the live document.\n     * @param {$.Event} event\n     */\n    LiveCSSDocument.prototype.onDeleted = function (event) {\n        // TODO Need to add protocol API to remove the stylesheet from the document.\n        //CSSAgent.clearCSSForDocument(this.doc);\n\n        // shut down, since our Document is now dead\n        this.close();\n        this.trigger(\"deleted\", [this]);\n    };\n\n    // Only used for unit testing.\n    LiveCSSDocument.prototype.getSourceFromBrowser = function () {\n        var deferred = new $.Deferred();\n\n        this.protocol.getStylesheetText(this.doc.url)\n            .then(function (res) {\n                deferred.resolve(res.text);\n            }, deferred.reject);\n\n        return deferred.promise();\n    };\n\n    // Export the class\n    module.exports = LiveCSSDocument;\n});\n"],"file":"LiveCSSDocument.js"}