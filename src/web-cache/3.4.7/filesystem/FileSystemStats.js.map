{"version":3,"sources":["filesystem/FileSystemStats.js"],"names":["define","require","exports","module","FileSystemStats","options","isFile","this","_isFile","_isDirectory","_mtime","mtime","Date","_size","size","_hash","hash","valueOf","realPath","length","_realPath","Object","defineProperties","prototype","get","set","Error","isDirectory"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAO/B,SAASC,gBAAgBC,SACrB,IAAIC,OAASD,QAAQC,OAErBC,KAAKC,QAAUF,OACfC,KAAKE,cAAgBH,OAGrBC,KAAKG,OAASL,QAAQM,iBAAiBC,KAAOP,QAAQM,MAAQ,IAAIC,KAAKP,QAAQM,OAC/EJ,KAAKM,MAAQR,QAAQS,KAGrBP,KAAKQ,MAAQV,QAAQW,MAAQT,KAAKG,OAAOO,UAEzC,IAAIC,SAAWb,QAAQa,SACnBA,WACKZ,QAA4C,MAAlCY,SAASA,SAASC,OAAS,KACtCD,UAAY,KAGhBX,KAAKa,UAAYF,UAKzBG,OAAOC,iBAAiBlB,gBAAgBmB,UAAW,CAC/CjB,OAAU,CACNkB,IAAK,WAAc,OAAOjB,KAAKC,SAC/BiB,IAAK,WAAc,MAAM,IAAIC,MAAM,uBAEvCC,YAAe,CACXH,IAAK,WAAc,OAAOjB,KAAKE,cAC/BgB,IAAK,WAAc,MAAM,IAAIC,MAAM,4BAEvCf,MAAS,CACLa,IAAK,WAAc,OAAOjB,KAAKG,QAC/Be,IAAK,WAAc,MAAM,IAAIC,MAAM,sBAEvCZ,KAAQ,CACJU,IAAK,WAAc,OAAOjB,KAAKM,OAC/BY,IAAK,WAAc,MAAM,IAAIC,MAAM,qBAEvCR,SAAY,CACRM,IAAK,WAAc,OAAOjB,KAAKa,WAC/BK,IAAK,WAAc,MAAM,IAAIC,MAAM,2BAQ3CtB,gBAAgBmB,UAAUf,SAAU,EAMpCJ,gBAAgBmB,UAAUd,cAAe,EAMzCL,gBAAgBmB,UAAUb,OAAS,KAMnCN,gBAAgBmB,UAAUV,MAAQ,KAMlCT,gBAAgBmB,UAAUR,MAAQ,KAQlCX,gBAAgBmB,UAAUH,UAAY,KAEtCjB,OAAOD,QAAUE","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * The FileSystemStats represents a particular FileSystemEntry's stats.\n */\ndefine(function (require, exports, module) {\n\n\n    /**\n     * @constructor\n     * @param {{isFile: boolean, mtime: Date, size: Number, realPath: ?string, hash: object}} options\n     */\n    function FileSystemStats(options) {\n        var isFile = options.isFile;\n\n        this._isFile = isFile;\n        this._isDirectory = !isFile;\n        // in case of stats transferred over a node-domain,\n        // mtime will have JSON-ified value which needs to be restored\n        this._mtime = options.mtime instanceof Date ? options.mtime : new Date(options.mtime);\n        this._size = options.size;\n        // hash is a property introduced by brackets and it's calculated\n        // as a valueOf modification time -> calculate here if it's not present\n        this._hash = options.hash || this._mtime.valueOf();\n\n        var realPath = options.realPath;\n        if (realPath) {\n            if (!isFile && realPath[realPath.length - 1] !== \"/\") {\n                realPath += \"/\";\n            }\n\n            this._realPath = realPath;\n        }\n    }\n\n    // Add \"isFile\", \"isDirectory\", \"mtime\" and \"size\" getters\n    Object.defineProperties(FileSystemStats.prototype, {\n        \"isFile\": {\n            get: function () { return this._isFile; },\n            set: function () { throw new Error(\"Cannot set isFile\"); }\n        },\n        \"isDirectory\": {\n            get: function () { return this._isDirectory; },\n            set: function () { throw new Error(\"Cannot set isDirectory\"); }\n        },\n        \"mtime\": {\n            get: function () { return this._mtime; },\n            set: function () { throw new Error(\"Cannot set mtime\"); }\n        },\n        \"size\": {\n            get: function () { return this._size; },\n            set: function () { throw new Error(\"Cannot set size\"); }\n        },\n        \"realPath\": {\n            get: function () { return this._realPath; },\n            set: function () { throw new Error(\"Cannot set realPath\"); }\n        }\n    });\n\n    /**\n     * Whether or not this is a stats object for a file\n     * @type {boolean}\n     */\n    FileSystemStats.prototype._isFile = false;\n\n    /**\n     * Whether or not this is a stats object for a directory\n     * @type {boolean}\n     */\n    FileSystemStats.prototype._isDirectory = false;\n\n    /**\n     * Modification time for a file\n     * @type {Date}\n     */\n    FileSystemStats.prototype._mtime = null;\n\n    /**\n     * Size in bytes of a file\n     * @type {Number}\n     */\n    FileSystemStats.prototype._size = null;\n\n    /**\n     * Consistency hash for a file\n     * @type {object}\n     */\n    FileSystemStats.prototype._hash = null;\n\n    /**\n     * The canonical path of this file or directory ONLY if it is a symbolic link,\n     * and null otherwise.\n     *\n     * @type {?string}\n     */\n    FileSystemStats.prototype._realPath = null;\n\n    module.exports = FileSystemStats;\n});\n"],"file":"FileSystemStats.js"}