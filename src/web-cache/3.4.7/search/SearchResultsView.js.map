{"version":3,"sources":["search/SearchResultsView.js"],"names":["define","require","exports","module","CommandManager","EventDispatcher","Commands","DocumentManager","Editor","EditorManager","ProjectManager","FileViewController","FileUtils","FindUtils","WorkspaceManager","StringUtils","Strings","Metrics","_","Mustache","searchPanelTemplate","searchResultsTemplate","searchSummaryTemplate","RESULTS_PER_PAGE","UPDATE_TIMEOUT","SearchResultsView","model","panelID","panelName","type","self","this","panelHtml","render","_showPanelIfResultsAvailable","_e","shownPanelID","_model","numMatches","_panel","hide","isReplace","_handleModelChange","createBottomPanel","$","_$summary","$panel","find","_$table","_$previewEditor","_searchResultsType","_hasPreviousPage","_hasNextPage","ResizeObserver","editor","updateLayout","observe","on","EVENT_WORKSPACE_PANEL_SHOWN","makeEventDispatcher","prototype","_searchList","_initialFilePath","_currentStart","_allChecked","_$selectedRow","_timeoutID","quickChange","close","window","clearTimeout","setTimeout","_updateResults","OpenSelectedFile","searchItem","data","item","items","execute","FILE_OPEN","fullPath","done","getCurrentFullEditor","setSelection","start","end","_previewSelectedFile","_showPreviewEditor","selectNextResult","selectedElement","nextElement","nextElementSibling","collapsed","results","hasClass","removeClass","addClass","scrollIntoView","block","trigger","selectNextPage","selectLastResultInPage","lastElement","parentNode","lastChild","previousElementSibling","selectPrevResult","prevElement","showPreviousPage","selectPrevPage","_addPanelListeners","updateHeaderCheckbox","$checkAll","$allFileRows","$checkedFileRows","filter","index","is","length","prop","updateFileAndHeaderCheckboxes","$clickedRow","isChecked","$firstMatch","$fileRow","prevUntil","last","prev","$siblingRows","nextUntil","$fileCheckbox","$checkedSibilings","off","_render","countEvent","EVENT_TYPE","SEARCH","e","$row","target","closest","searchFile","openFileAndAddToWorkingSet","isLineNumberClick","context","$titleRows","metaKey","ctrlKey","each","toggle","toggleClass","setCollapseResults","forEach","matches","match","$matchRows","stopPropagation","_showSummary","count","countFilesMatches","lastIndex","_getLastIndex","typeStr","FIND_IN_FILES_MATCHES","FIND_IN_FILES_MATCH","filesStr","summary","REFERENCES_IN_FILES","REFERENCE_IN_FILES","format","FIND_NUM_FILES","files","FIND_IN_FILES_FILES","FIND_IN_FILES_FILE","FIND_TITLE_SUMMARY","exceedsMaximum","FIND_IN_FILES_MORE_THAN","String","html","query","queryInfo","toString","replaceWith","replaceText","titleLabel","FIND_REPLACE_TITLE_LABEL","FIND_TITLE_LABEL","scope","labelForScope","allChecked","hasPages","FIND_IN_FILES_PAGING","hasPrev","hasNext","replace","searchItems","i","multiLine","searchFiles","prioritizeOpenFile","matchesCounter","showMatches","allInFileChecked","previewFileSelected","some","line","push","fileIndex","itemIndex","matchIndex","pre","substr","ch","highlightOffset","highlight","substring","undefined","post","isCollapsed","relativePath","getDirectoryPath","makeProjectRelativeIfPossible","directoryPath","displayFileName","FIND_IN_FILES_FILE_PATH","breakableUrl","getBaseName","filename","empty","append","searchList","searchResults","show","scrollTop","selectStart","selectEnd","document","file","BOUNDARY_BULLSEYE","getDocumentForPath","doc","_closePreviewEditor","editorOptions","isReadOnly","_previewEditorForTests","destroy","isVisible","_getLastCurrentStart","Math","min","showNextPage","showLastPage","floor","open","currentDoc","getCurrentDocument","bind"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*\n * Panel showing search results for a Find/Replace in Files operation.\n */\ndefine(function (require, exports, module) {\n\n\n    var CommandManager        = require(\"command/CommandManager\"),\n        EventDispatcher       = require(\"utils/EventDispatcher\"),\n        Commands              = require(\"command/Commands\"),\n        DocumentManager       = require(\"document/DocumentManager\"),\n        Editor                = require(\"editor/Editor\"),\n        EditorManager         = require(\"editor/EditorManager\"),\n        ProjectManager        = require(\"project/ProjectManager\"),\n        FileViewController    = require(\"project/FileViewController\"),\n        FileUtils             = require(\"file/FileUtils\"),\n        FindUtils             = require(\"search/FindUtils\"),\n        WorkspaceManager      = require(\"view/WorkspaceManager\"),\n        StringUtils           = require(\"utils/StringUtils\"),\n        Strings               = require(\"strings\"),\n        Metrics               = require(\"utils/Metrics\"),\n        _                     = require(\"thirdparty/lodash\"),\n        Mustache              = require(\"thirdparty/mustache/mustache\"),\n\n        searchPanelTemplate   = require(\"text!htmlContent/search-panel.html\"),\n        searchResultsTemplate = require(\"text!htmlContent/search-results.html\"),\n        searchSummaryTemplate = require(\"text!htmlContent/search-summary.html\");\n\n\n    /**\n     * @const\n     * The maximum results to show per page.\n     * @type {number}\n     */\n    var RESULTS_PER_PAGE = 100;\n\n    /**\n     * @const\n     * Debounce time for document changes updating the search results view.\n     * @type {number}\n     */\n    var UPDATE_TIMEOUT   = 400;\n\n    /**\n     * @constructor\n     * Handles the search results panel.\n     * Dispatches the following events:\n     *      replaceBatch - when the \"Replace\" button is clicked.\n     *      close - when the panel is closed.\n     *\n     * @param {SearchModel} model The model that this view is showing.\n     * @param {string} panelID The CSS ID to use for the panel.\n     * @param {string} panelName The name to use for the panel, as passed to WorkspaceManager.createBottomPanel().\n     * @param {string} type type to identify if it is reference search or string match serach\n     */\n    function SearchResultsView(model, panelID, panelName, type) {\n        const self = this;\n        let panelHtml  = Mustache.render(searchPanelTemplate, {panelID: panelID});\n\n        this._panel    = WorkspaceManager.createBottomPanel(panelName, $(panelHtml), 100);\n        this._$summary = this._panel.$panel.find(\".title\");\n        this._$table   = this._panel.$panel.find(\".table-container\");\n        this._$previewEditor   = this._panel.$panel.find(\".search-editor-preview\");\n        this._model    = model;\n        this._searchResultsType = type;\n        this._hasPreviousPage = false;\n        this._hasNextPage = false;\n        new ResizeObserver(()=>{\n            if(self._$previewEditor.editor){\n                self._$previewEditor.editor.updateLayout();\n            }\n        }).observe(this._panel.$panel[0]);\n\n        function _showPanelIfResultsAvailable(_e, shownPanelID) {\n            if(self._model.numMatches === 0){\n                self._panel.hide();\n            }\n            if(shownPanelID === self._panel.panelID && !self._model.isReplace){\n                // If it is replace, _handleModelChange will close the find bar as we dont\n                // do replace if there is a model change. So we wont enter this flow if it is a replace operation\n                self._handleModelChange();\n            }\n        }\n        WorkspaceManager.on(WorkspaceManager.EVENT_WORKSPACE_PANEL_SHOWN, _showPanelIfResultsAvailable);\n    }\n    EventDispatcher.makeEventDispatcher(SearchResultsView.prototype);\n\n    /** @type {SearchModel} The search results model we're viewing. */\n    SearchResultsView.prototype._model = null;\n\n    /**\n     * Array with content used in the Results Panel\n     * @type {Array.<{fileIndex: number, filename: string, fullPath: string, items: Array.<Object>}>}\n     */\n    SearchResultsView.prototype._searchList = [];\n\n    /** @type {Panel} Bottom panel holding the search results */\n    SearchResultsView.prototype._panel = null;\n\n    /** @type {?string} The full path of the file that was open in the main editor on the initial search */\n    SearchResultsView.prototype._initialFilePath = null;\n\n    /** @type {number} The index of the first result that is displayed */\n    SearchResultsView.prototype._currentStart = 0;\n\n    /** @type {boolean} Used to remake the replace all summary after it is changed */\n    SearchResultsView.prototype._allChecked = false;\n\n    /** @type {$.Element} The currently selected row */\n    SearchResultsView.prototype._$selectedRow = null;\n\n    /** @type {$.Element} The element where the title is placed */\n    SearchResultsView.prototype._$summary = null;\n\n    /** @type {$.Element} The table that holds the results */\n    SearchResultsView.prototype._$table = null;\n\n    /** @type {number} The ID we use for timeouts when handling model changes. */\n    SearchResultsView.prototype._timeoutID = null;\n\n    /** @type {string} The Id we use to check if it is reference search or match search */\n    SearchResultsView.prototype._searchResultsType = null;\n\n    /**\n     * @private\n     * Handles when model changes. Updates the view, buffering changes if necessary so as not to churn too much.\n     */\n    SearchResultsView.prototype._handleModelChange = function (quickChange) {\n        // If this is a replace, to avoid complications with updating, just close ourselves if we hear about\n        // a results model change after we've already shown the results initially.\n        // TODO: notify user, re-do search in file\n        if (this._model.isReplace) {\n            this.close();\n            return;\n        }\n\n        var self = this;\n        if (this._timeoutID) {\n            window.clearTimeout(this._timeoutID);\n        }\n        if (quickChange) {\n            this._timeoutID = window.setTimeout(function () {\n                self._updateResults();\n                self._timeoutID = null;\n            }, UPDATE_TIMEOUT);\n        } else {\n            this._updateResults();\n        }\n    };\n\n    SearchResultsView.prototype.OpenSelectedFile = function () {\n        const self = this;\n        if (self._$selectedRow) {\n            let searchItem = self._searchList[self._$selectedRow.data(\"file-index\")];\n            let item = searchItem.items[self._$selectedRow.data(\"item-index\")];\n            CommandManager.execute(Commands.FILE_OPEN, {fullPath: searchItem.fullPath})\n                .done(function () {\n                    // Opened document is now the current main editor\n                    EditorManager.getCurrentFullEditor().setSelection(item.start, item.end, true);\n                });\n        }\n    };\n\n    SearchResultsView.prototype._previewSelectedFile = function () {\n        const self = this;\n        if (self._$selectedRow) {\n            let searchItem = self._searchList[self._$selectedRow.data(\"file-index\")];\n            let item = searchItem.items[self._$selectedRow.data(\"item-index\")];\n            self._showPreviewEditor(searchItem.fullPath, item.start, item.end);\n        }\n    };\n\n    SearchResultsView.prototype.selectNextResult = function () {\n        const self = this;\n        if (self._$selectedRow) {\n            const selectedElement = self._$selectedRow[0];\n            let nextElement = selectedElement.nextElementSibling;\n            let searchItem = self._searchList[self._$selectedRow.data(\"file-index\")];\n            let collapsed = self._model.results[searchItem.fullPath].collapsed;\n            while(nextElement && (collapsed || !$(nextElement).hasClass('file-search-item'))){\n                // skip collapsed elements too\n                nextElement = nextElement.nextElementSibling;\n                if(!nextElement){\n                    break;\n                }\n                searchItem = self._searchList[$(nextElement).data(\"file-index\")];\n                collapsed = self._model.results[searchItem.fullPath].collapsed;\n            }\n            if(nextElement){\n                self._$selectedRow.removeClass(\"selected\");\n                self._$selectedRow = $(nextElement);\n                self._$selectedRow.addClass(\"selected\");\n                nextElement.scrollIntoView({block: \"nearest\"});\n                self._previewSelectedFile();\n            } else if(self._hasNextPage){\n                self.trigger('getNextPage');\n            }\n        }\n    };\n\n    SearchResultsView.prototype.selectNextPage = function () {\n        const self = this;\n        if(self._hasNextPage){\n            self.trigger('getNextPage');\n        }\n    };\n\n    SearchResultsView.prototype.selectLastResultInPage = function () {\n        const self = this;\n        if (self._$selectedRow) {\n            let selectedElement = self._$selectedRow[0];\n            let lastElement = selectedElement.parentNode.lastChild;\n            while(lastElement && !$(lastElement).hasClass('file-search-item')){\n                lastElement = lastElement.previousElementSibling;\n            }\n            if(lastElement){\n                self._$selectedRow.removeClass(\"selected\");\n                self._$selectedRow = $(lastElement);\n                self._$selectedRow.addClass(\"selected\");\n                lastElement.scrollIntoView({block: \"nearest\"});\n                self._previewSelectedFile();\n            }\n        }\n    };\n\n    SearchResultsView.prototype.selectPrevResult = function () {\n        const self = this;\n        if (self._$selectedRow) {\n            let selectedElement = self._$selectedRow[0];\n            let prevElement = selectedElement.previousElementSibling;\n            let searchItem = self._searchList[self._$selectedRow.data(\"file-index\")];\n            let collapsed = self._model.results[searchItem.fullPath].collapsed;\n            while(prevElement && (collapsed || !$(prevElement).hasClass('file-search-item'))){\n                // skip collapsed elements too\n                prevElement = prevElement.previousElementSibling;\n                if(!prevElement){\n                    break;\n                }\n                searchItem = self._searchList[$(prevElement).data(\"file-index\")];\n                collapsed = self._model.results[searchItem.fullPath].collapsed;\n            }\n            if(prevElement){\n                self._$selectedRow.removeClass(\"selected\");\n                self._$selectedRow = $(prevElement);\n                self._$selectedRow.addClass(\"selected\");\n                prevElement.scrollIntoView({block: \"nearest\"});\n                self._previewSelectedFile();\n            } else if(self._hasPreviousPage){\n                self.showPreviousPage();\n                self.selectLastResultInPage();\n            }\n        }\n    };\n\n    SearchResultsView.prototype.selectPrevPage = function () {\n        const self = this;\n        if(self._hasPreviousPage){\n            self.showPreviousPage();\n        }\n    };\n\n    /**\n     * @private\n     * Adds the listeners for close, prev, next, first, last and check all\n     */\n    SearchResultsView.prototype._addPanelListeners = function () {\n        var self = this;\n        this._panel.$panel\n            .off(\".searchResults\")  // Remove the old events\n            .on(\"dblclick.searchResults\", \".toolbar\", function() {\n                self._panel.hide();\n            })\n            .on(\"click.searchResults\", \".close\", function () {\n                self._panel.hide();\n            })\n            // The link to go the first page\n            .on(\"click.searchResults\", \".first-page:not(.disabled)\", function () {\n                self._currentStart = 0;\n                self._render();\n                Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, \"result.panel.btn\", \"firstPage\");\n            })\n            // The link to go the previous page\n            .on(\"click.searchResults\", \".prev-page:not(.disabled)\", function () {\n                self._currentStart -= RESULTS_PER_PAGE;\n                self._render();\n                Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, \"result.panel.btn\", \"prevPage\");\n            })\n            // The link to go to the next page\n            .on(\"click.searchResults\", \".next-page:not(.disabled)\", function () {\n                self.trigger('getNextPage');\n                Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, \"result.panel.btn\", \"nextPage\");\n            })\n            // The link to go to the last page\n            .on(\"click.searchResults\", \".last-page:not(.disabled)\", function () {\n                self.trigger('getLastPage');\n                Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, \"result.panel.btn\", \"lastPage\");\n            })\n\n            // Add the file to the working set on double click\n            .on(\"dblclick.searchResults\", \".table-container tr:not(.file-section)\", function (e) {\n                let $row = $(e.target).closest(\"tr\");\n                let searchFile = self._searchList[$row.data(\"file-index\")];\n                let item = searchFile.items[$row.data(\"item-index\")];\n                FileViewController.openFileAndAddToWorkingSet(searchFile.fullPath).done(function () {\n                    // Opened document is now the current main editor\n                    EditorManager.getCurrentFullEditor().setSelection(item.start, item.end, true);\n                });\n            })\n\n            // Add the click event listener directly on the table parent\n            .on(\"click.searchResults .table-container\", function (e) {\n                let $row = $(e.target).closest(\"tr\");\n                let isLineNumberClick = $row.context && $($row.context).hasClass(\"line-number\");\n\n                if ($row.length) {\n                    if (self._$selectedRow) {\n                        self._$selectedRow.removeClass(\"selected\");\n                    }\n                    $row.addClass(\"selected\");\n                    self._$selectedRow = $row;\n\n                    var searchItem = self._searchList[$row.data(\"file-index\")],\n                        fullPath   = searchItem.fullPath;\n\n                    // This is a file title row, expand/collapse on click\n                    if ($row.hasClass(\"file-section\")) {\n                        var $titleRows,\n                            collapsed = !self._model.results[fullPath].collapsed;\n\n                        if (e.metaKey || e.ctrlKey) { //Expand all / Collapse all\n                            $titleRows = $(e.target).closest(\"table\").find(\".file-section\");\n                        } else {\n                            // Clicking the file section header collapses/expands result rows for that file\n                            $titleRows = $row;\n                        }\n\n                        $titleRows.each(function () {\n                            fullPath   = self._searchList[$(this).data(\"file-index\")].fullPath;\n                            searchItem = self._model.results[fullPath];\n\n                            if (searchItem.collapsed !== collapsed) {\n                                searchItem.collapsed = collapsed;\n                                $(this).nextUntil(\".file-section\").toggle();\n                                $(this).find(\".disclosure-triangle\").toggleClass(\"expanded\");\n                            }\n                        });\n\n                        //In Expand/Collapse all, reset all search results 'collapsed' flag to same value(true/false).\n                        if (e.metaKey || e.ctrlKey) {\n                            FindUtils.setCollapseResults(collapsed);\n                            _.forEach(self._model.results, function (item) {\n                                item.collapsed = collapsed;\n                            });\n                        }\n\n                    // This is a file row, show the result on click\n                    } else {\n                        // Grab the required item data\n                        let item = searchItem.items[$row.data(\"item-index\")];\n                        self._showPreviewEditor(fullPath, item.start, item.end);\n                        if(isLineNumberClick){\n                            CommandManager.execute(Commands.FILE_OPEN, {fullPath: fullPath})\n                                .done(function () {\n                                    // Opened document is now the current main editor\n                                    EditorManager.getCurrentFullEditor().setSelection(item.start, item.end, true);\n                                });\n                        }\n                    }\n                }\n            });\n\n        function updateHeaderCheckbox($checkAll) {\n            var $allFileRows     = self._panel.$panel.find(\".file-section\"),\n                $checkedFileRows = $allFileRows.filter(function (index) {\n                    return $(this).find(\".check-one-file\").is(\":checked\");\n                });\n            if ($checkedFileRows.length === $allFileRows.length) {\n                $checkAll.prop(\"checked\", true);\n            }\n        }\n\n        function updateFileAndHeaderCheckboxes($clickedRow, isChecked) {\n            var $firstMatch = ($clickedRow.data(\"item-index\") === 0) ? $clickedRow :\n                    $clickedRow.prevUntil(\".file-section\").last(),\n                $fileRow = $firstMatch.prev(),\n                $siblingRows = $fileRow.nextUntil(\".file-section\"),\n                $fileCheckbox = $fileRow.find(\".check-one-file\"),\n                $checkAll = self._panel.$panel.find(\".check-all\");\n\n            if (isChecked) {\n                if (!$fileCheckbox.is(\":checked\")) {\n                    var $checkedSibilings = $siblingRows.filter(function (index) {\n                        return $(this).find(\".check-one\").is(\":checked\");\n                    });\n                    if ($checkedSibilings.length === $siblingRows.length) {\n                        $fileCheckbox.prop(\"checked\", true);\n                        if (!$checkAll.is(\":checked\")) {\n                            updateHeaderCheckbox($checkAll);\n                        }\n                    }\n                }\n            } else {\n                if ($checkAll.is(\":checked\")) {\n                    $checkAll.prop(\"checked\", false);\n                }\n                if ($fileCheckbox.is(\":checked\")) {\n                    $fileCheckbox.prop(\"checked\", false);\n                }\n            }\n        }\n\n        // Add the Click handlers for replace functionality if required\n        if (this._model.isReplace) {\n            this._panel.$panel\n                .on(\"click.searchResults\", \".check-all\", function (e) {\n                    var isChecked = $(this).is(\":checked\");\n                    _.forEach(self._model.results, function (results) {\n                        results.matches.forEach(function (match) {\n                            match.isChecked = isChecked;\n                        });\n                    });\n                    self._$table.find(\".check-one\").prop(\"checked\", isChecked);\n                    self._$table.find(\".check-one-file\").prop(\"checked\", isChecked);\n                    self._allChecked = isChecked;\n                })\n                .on(\"click.searchResults\", \".check-one-file\", function (e) {\n                    var isChecked = $(this).is(\":checked\"),\n                        $row = $(e.target).closest(\"tr\"),\n                        item = self._searchList[$row.data(\"file-index\")],\n                        $matchRows = $row.nextUntil(\".file-section\"),\n                        $checkAll = self._panel.$panel.find(\".check-all\");\n\n                    if (item) {\n                        self._model.results[item.fullPath].matches.forEach(function (match) {\n                            match.isChecked = isChecked;\n                        });\n                    }\n                    $matchRows.find(\".check-one\").prop(\"checked\", isChecked);\n                    if (!isChecked) {\n                        if ($checkAll.is(\":checked\")) {\n                            $checkAll.prop(\"checked\", false);\n                        }\n                    } else if (!$checkAll.is(\":checked\")) {\n                        updateHeaderCheckbox($checkAll);\n                    }\n                    e.stopPropagation();\n                })\n                .on(\"click.searchResults\", \".check-one\", function (e) {\n                    var $row = $(e.target).closest(\"tr\"),\n                        item = self._searchList[$row.data(\"file-index\")],\n                        match = self._model.results[item.fullPath].matches[$row.data(\"match-index\")];\n\n                    match.isChecked = $(this).is(\":checked\");\n                    updateFileAndHeaderCheckboxes($row, match.isChecked);\n                    e.stopPropagation();\n                })\n                .on(\"click.searchResults\", \".replace-checked\", function (e) {\n                    self.trigger(\"replaceBatch\");\n                });\n        }\n    };\n\n\n    /**\n     * @private\n     * Shows the Results Summary\n     */\n    SearchResultsView.prototype._showSummary = function () {\n        let self = this;\n        let count     = self._model.countFilesMatches(),\n            lastIndex = self._getLastIndex(count.matches),\n            typeStr = (count.matches > 1) ? Strings.FIND_IN_FILES_MATCHES : Strings.FIND_IN_FILES_MATCH,\n            filesStr,\n            summary;\n\n        if(this._searchResultsType === \"reference\") {\n            typeStr = (count.matches > 1) ? Strings.REFERENCES_IN_FILES : Strings.REFERENCE_IN_FILES;\n        }\n\n        filesStr = StringUtils.format(\n            Strings.FIND_NUM_FILES,\n            count.files,\n            (count.files > 1 ? Strings.FIND_IN_FILES_FILES : Strings.FIND_IN_FILES_FILE)\n        );\n\n        // This text contains some formatting, so all the strings are assumed to be already escaped\n        summary = StringUtils.format(\n            Strings.FIND_TITLE_SUMMARY,\n            self._model.exceedsMaximum ? Strings.FIND_IN_FILES_MORE_THAN : \"\",\n            String(count.matches),\n            typeStr,\n            filesStr\n        );\n\n        self._hasPreviousPage = self._currentStart > 0;\n        self._hasNextPage = lastIndex < count.matches;\n        self._$summary.html(Mustache.render(searchSummaryTemplate, {\n            query: (self._model.queryInfo && self._model.queryInfo.query && self._model.queryInfo.query.toString()) || \"\",\n            replaceWith: self._model.replaceText,\n            titleLabel: self._model.isReplace ? Strings.FIND_REPLACE_TITLE_LABEL : Strings.FIND_TITLE_LABEL,\n            scope: self._model.scope ? \"&nbsp;\" + FindUtils.labelForScope(self._model.scope) + \"&nbsp;\" : \"\",\n            summary: summary,\n            allChecked: self._allChecked,\n            hasPages: count.matches > RESULTS_PER_PAGE,\n            results: StringUtils.format(Strings.FIND_IN_FILES_PAGING, self._currentStart + 1, lastIndex),\n            hasPrev: self._hasPreviousPage,\n            hasNext: self._hasNextPage,\n            replace: self._model.isReplace,\n            Strings: Strings\n        }));\n    };\n\n    /**\n     * @private\n     * Shows the current set of results.\n     */\n    SearchResultsView.prototype._render = function () {\n        let searchItems, match, i, item, multiLine,\n            count            = this._model.countFilesMatches(),\n            searchFiles      = this._model.prioritizeOpenFile(this._initialFilePath),\n            lastIndex        = this._getLastIndex(count.matches),\n            matchesCounter   = 0,\n            showMatches      = false,\n            allInFileChecked = true,\n            self             = this,\n            previewFileSelected = false;\n\n        this._showSummary();\n        this._searchList = [];\n\n        // Iterates throuh the files to display the results sorted by filenamess. The loop ends as soon as\n        // we filled the results for one page\n        searchFiles.some(function (fullPath) {\n            showMatches = true;\n            item = self._model.results[fullPath];\n\n            // Since the amount of matches on this item plus the amount of matches we skipped until\n            // now is still smaller than the first match that we want to display, skip these.\n            if (matchesCounter + item.matches.length < self._currentStart) {\n                matchesCounter += item.matches.length;\n                showMatches = false;\n\n            // If we still haven't skipped enough items to get to the first match, but adding the\n            // item matches to the skipped ones is greater the the first match we want to display,\n            // then we can display the matches from this item skipping the first ones\n            } else if (matchesCounter < self._currentStart) {\n                i = self._currentStart - matchesCounter;\n                matchesCounter = self._currentStart;\n\n            // If we already skipped enough matches to get to the first match to display, we can start\n            // displaying from the first match of this item\n            } else if (matchesCounter < lastIndex) {\n                i = 0;\n\n            // We can't display more items by now. Break the loop\n            } else {\n                return true;\n            }\n\n            if (showMatches && i < item.matches.length) {\n                // Add a row for each match in the file\n                searchItems = [];\n\n                allInFileChecked = true;\n                // Add matches until we get to the last match of this item, or filling the page\n                while (i < item.matches.length && matchesCounter < lastIndex) {\n                    match     = item.matches[i];\n                    multiLine = match.start.line !== match.end.line;\n                    if(!previewFileSelected){\n                        previewFileSelected = true;\n                        self._showPreviewEditor(fullPath, match.start, match.end);\n                    }\n\n                    searchItems.push({\n                        fileIndex: self._searchList.length,\n                        itemIndex: searchItems.length,\n                        matchIndex: i,\n                        line: match.start.line + 1,\n                        pre: match.line.substr(0, match.start.ch - match.highlightOffset),\n                        highlight: match.line.substring(match.start.ch - match.highlightOffset, multiLine ? undefined : match.end.ch - match.highlightOffset),\n                        post: multiLine ? \"\\u2026\" : match.line.substr(match.end.ch - match.highlightOffset),\n                        start: match.start,\n                        end: match.end,\n                        isChecked: match.isChecked,\n                        isCollapsed: item.collapsed\n                    });\n                    if (!match.isChecked) {\n                        allInFileChecked = false;\n                    }\n                    matchesCounter++;\n                    i++;\n                }\n\n                // Add a row for each file\n                let relativePath    = FileUtils.getDirectoryPath(ProjectManager.makeProjectRelativeIfPossible(fullPath)),\n                    directoryPath   = FileUtils.getDirectoryPath(relativePath),\n                    displayFileName = StringUtils.format(\n                        Strings.FIND_IN_FILES_FILE_PATH,\n                        StringUtils.breakableUrl(FileUtils.getBaseName(fullPath)),\n                        StringUtils.breakableUrl(directoryPath),\n                        directoryPath ? \"&mdash;\" : \"\"\n                    );\n\n                self._searchList.push({\n                    fileIndex: self._searchList.length,\n                    filename: displayFileName,\n                    fullPath: fullPath,\n                    isChecked: allInFileChecked,\n                    items: searchItems,\n                    isCollapsed: item.collapsed\n                });\n            }\n        });\n\n\n        // Insert the search results\n        this._$table\n            .empty()\n            .append(Mustache.render(searchResultsTemplate, {\n                replace: this._model.isReplace,\n                searchList: this._searchList,\n                Strings: Strings\n            }));\n\n        if (this._$selectedRow) {\n            this._$selectedRow.removeClass(\"selected\");\n        }\n        let searchResults = this._$table.find(\".file-search-item\");\n        if(searchResults.length > 0){\n            this._$selectedRow = $(searchResults[0]);\n            this._$selectedRow.addClass(\"selected\");\n        }\n\n        this._panel.show();\n        this._$table.scrollTop(0); // Otherwise scroll pos from previous contents is remembered\n    };\n\n    SearchResultsView.prototype._showPreviewEditor = function (fullPath, selectStart, selectEnd) {\n        let self = this;\n        if(self._$previewEditor.editor\n            && self._$previewEditor.editor.document.file.fullPath === fullPath){\n            self._$previewEditor.editor.setSelection(selectStart, selectEnd, true, Editor.BOUNDARY_BULLSEYE);\n            return;\n        }\n        DocumentManager.getDocumentForPath(fullPath).done(function (doc) {\n            if(self._$previewEditor.editor){\n                self._closePreviewEditor();\n            }\n\n            let editorOptions = {\n                isReadOnly: true\n            };\n            self._$previewEditor.editor =\n                new Editor.Editor(doc, false, self._$previewEditor, null, editorOptions);\n            exports._previewEditorForTests = self._$previewEditor.editor;\n            self._$previewEditor.editor.updateLayout();\n            self._$previewEditor.editor.setSelection(selectStart, selectEnd, true, Editor.BOUNDARY_BULLSEYE);\n        });\n    };\n\n    SearchResultsView.prototype._closePreviewEditor = function () {\n        let self = this;\n        if(self._$previewEditor.editor){\n            exports._previewEditorForTests = null;\n            self._$previewEditor.editor.destroy();\n            self._$previewEditor.editor = null;\n        }\n    };\n\n    /**\n     * Updates the results view after a model change, preserving scroll position and selection.\n     */\n    SearchResultsView.prototype._updateResults = function () {\n        // In general this shouldn't get called if the panel is closed, but in case some\n        // asynchronous process kicks this (e.g. a debounced model change), we double-check.\n        if (this._panel.isVisible()) {\n            var scrollTop  = this._$table.scrollTop(),\n                index      = this._$selectedRow ? this._$selectedRow.index() : null,\n                numMatches = this._model.countFilesMatches().matches;\n\n            if (this._currentStart > numMatches) {\n                this._currentStart = this._getLastCurrentStart(numMatches);\n            }\n\n            this._render();\n\n            this._$table.scrollTop(scrollTop);\n            if (index) {\n                this._$selectedRow = this._$table.find(\"tr:eq(\" + index + \")\");\n                this._$selectedRow.addClass(\"selected\");\n            }\n        }\n    };\n\n    /**\n     * @private\n     * Returns one past the last result index displayed for the current page.\n     * @param {number} numMatches\n     * @return {number}\n     */\n    SearchResultsView.prototype._getLastIndex = function (numMatches) {\n        return Math.min(this._currentStart + RESULTS_PER_PAGE, numMatches);\n    };\n\n    /**\n     * Shows the next page of the resultrs view if possible\n     */\n    SearchResultsView.prototype.showNextPage = function () {\n        this._currentStart += RESULTS_PER_PAGE;\n        this._render();\n    };\n\n    /**\n     * Shows the next page of the resultrs view if possible\n     */\n    SearchResultsView.prototype.showPreviousPage = function () {\n        this._currentStart -= RESULTS_PER_PAGE;\n        if(this._currentStart < 0){\n            this._currentStart = 0;\n        }\n        this._render();\n    };\n\n    /**\n     * Shows the last page of the results view.\n     */\n    SearchResultsView.prototype.showLastPage = function () {\n        this._currentStart = this._getLastCurrentStart();\n        this._render();\n    };\n\n    /**\n     * @private\n     * Returns the last possible current start based on the given number of matches\n     * @param {number=} numMatches\n     * @return {number}\n     */\n    SearchResultsView.prototype._getLastCurrentStart = function (numMatches) {\n        numMatches = numMatches || this._model.countFilesMatches().matches;\n        return Math.floor((numMatches - 1) / RESULTS_PER_PAGE) * RESULTS_PER_PAGE;\n    };\n\n    /**\n     * Opens the results panel and displays the current set of results from the model.\n     */\n    SearchResultsView.prototype.open = function () {\n        // Clear out any paging/selection state.\n        this._currentStart  = 0;\n        this._$selectedRow  = null;\n        this._allChecked    = true;\n\n        // Save the currently open document's fullpath, if any, so we can sort it to the top of the result list.\n        var currentDoc = DocumentManager.getCurrentDocument();\n        this._initialFilePath = currentDoc ? currentDoc.file.fullPath : null;\n\n        this._render();\n\n        // Listen for user interaction events with the panel and change events from the model.\n        this._addPanelListeners();\n        this._model.off(\"change.SearchResultsView\"); // reset old listeners\n        this._model.on(\"change.SearchResultsView\", this._handleModelChange.bind(this));\n    };\n\n    /**\n     * Hides the Search Results Panel and unregisters listeners.\n     */\n    SearchResultsView.prototype.close = function () {\n        if (this._panel && this._panel.isVisible()) {\n            this._$table.empty();\n            this._panel.hide();\n            this._panel.$panel.off(\".searchResults\");\n            this._model.off(\"change.SearchResultsView\");\n            this.trigger(\"close\");\n        }\n    };\n\n    // Public API\n    exports.SearchResultsView = SearchResultsView;\n});\n"],"file":"SearchResultsView.js"}