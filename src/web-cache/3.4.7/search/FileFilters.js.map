{"version":3,"sources":["search/FileFilters.js"],"names":["define","require","exports","module","_","Mustache","Dialogs","DropdownButton","StringUtils","Strings","PreferencesManager","ProjectManager","FindUtils","EditFilterTemplate","FilterNameTemplate","FILTER_TYPE_EXCLUDE","FILTER_TYPE_INCLUDE","FIRST_FILTER_INDEX","FILTER_NAME_CHARACTER_MAX","_context","_picker","_getCondensedForm","filter","isArray","length","slice","join","format","FILE_FILTER_CLIPPED_SUFFIX","_doPopulate","dropdownItems","NEW_FILE_FILTER","CLEAR_FILE_FILTER","filterSets","get","push","patterns","concat","items","_getFilterIndex","index","findIndex","partial","isEqual","getActiveFilter","activeFilterIndex","getViewState","oldFilter","activeFilter","name","type","set","setViewState","_updatePicker","label","filterType","INCLUDE_FILE_FILTER","EXCLUDE_FILE_FILTER","setButtonLabel","NO_FILE_FILTER","setActiveFilter","console","log","notifyFileFiltersChanged","compile","userFilter","subStringFilter","wrappedGlobs","glob","startsWith","includes","isMatch","window","fs","utils","picomatch","dot","ignores","relativeOrFullPath","subStr","filterPath","compiledFilter","fullPath","isWithinProject","relativePath","makeProjectRelativeIfPossible","filterFileList","files","f","getPathsMatchingFilter","filePaths","editFilter","lastFocus","document","activeElement","isExclusionFilter","_getInstructionText","FILE_FILTER_INSTRUCTIONS","FILE_FILTER_INSTRUCTIONS_INCLUDE","templateVars","instruction","dialog","showModalDialogUsingTemplate","render","$nameField","getElement","find","$editField","$excludeToggle","$remainingField","getValue","newFilter","val","split","trim","focus","prop","on","is","html","updateFileCount","bind","remainingCharacters","$","this","show","text","FILTER_NAME_REMAINING","addClass","removeClass","hide","updatePrimaryButton","done","buttonId","DIALOG_BTN_OK","$fileCount","promise","filtered","FILTER_FILE_COUNT","FILTER_FILE_COUNT_ALL","$primaryBtn","trimmedValue","exclusionNameLength","debounce","getPromise","commitPicker","picker","_handleDeleteFilter","e","filterIndex","target","parent","data","stopPropagation","splice","refresh","_handleEditFilter","closeDropdown","_handleListRendered","event","$dropdown","checkedItemIndex","setChecked","createFilterPicker","context","itemRenderer","item","escape","INCLUDE_FILE_FILTER_DROPDOWN","EXCLUDE_FILE_FILTER_DROPDOWN","condensedPatterns","filter-type","filter-name","filter-patterns","$button","itemIndex","showDropdown"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Utilities for managing file-set filters, as used in Find in Files.\n * Includes both UI for selecting/editing filters, as well as the actual file-filtering implementation.\n */\ndefine(function (require, exports, module) {\n\n\n    var _                  = require(\"thirdparty/lodash\"),\n        Mustache           = require(\"thirdparty/mustache/mustache\"),\n        Dialogs            = require(\"widgets/Dialogs\"),\n        DropdownButton     = require(\"widgets/DropdownButton\").DropdownButton,\n        StringUtils        = require(\"utils/StringUtils\"),\n        Strings            = require(\"strings\"),\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        ProjectManager     = require(\"project/ProjectManager\"),\n        FindUtils          = require(\"search/FindUtils\"),\n        EditFilterTemplate = require(\"text!htmlContent/edit-filter-dialog.html\"),\n        FilterNameTemplate = require(\"text!htmlContent/filter-name.html\");\n\n    const FILTER_TYPE_EXCLUDE = \"excludeFilter\",\n        FILTER_TYPE_INCLUDE = \"includeFilter\";\n\n    /**\n     * Constant: first filter index in the filter dropdown list\n     * @type {number}\n     */\n    var FIRST_FILTER_INDEX = 3;\n\n    /**\n     * Constant: max number of characters for the filter name\n     * @type {number}\n     */\n    var FILTER_NAME_CHARACTER_MAX = 20;\n\n    /**\n     * Context Info on which files the filter will be applied to.\n     * It will be initialized when createFilterPicker is called and if specified, editing UI will\n     * indicate how many files are excluded by the filter. Label should be of the form \"in ...\"\n     * @type {?{label:string, promise:$.Promise}}\n     */\n    var _context = null;\n\n    /**\n     * @type {DropdownButton}\n     */\n    var _picker  = null;\n\n    /**\n     * Get the condensed form of the filter set by joining the first two in the set with\n     * a comma separator and appending a short message with the number of filters being clipped.\n     * @param {Array.<string>} filter\n     * @return {string} Condensed form of filter set if `filter` is a valid array.\n     *                  Otherwise, return an empty string.\n     */\n    function _getCondensedForm(filter) {\n        if (!_.isArray(filter)) {\n            return \"\";\n        }\n\n        // Format filter in condensed form\n        if (filter.length > 2) {\n            return filter.slice(0, 2).join(\", \") + \" \" +\n                   StringUtils.format(Strings.FILE_FILTER_CLIPPED_SUFFIX, filter.length - 2);\n        }\n        return filter.join(\", \");\n    }\n\n    /**\n     * Populate the list of dropdown menu with two filter commands and\n     * the list of saved filter sets.\n     */\n    function _doPopulate() {\n        var dropdownItems = [Strings.NEW_FILE_FILTER, Strings.CLEAR_FILE_FILTER],\n            filterSets = PreferencesManager.get(\"fileFilters\") || [];\n\n        if (filterSets.length) {\n            dropdownItems.push(\"---\");\n\n            // Remove all the empty exclusion sets before concatenating to the dropdownItems.\n            filterSets = filterSets.filter(function (filter) {\n                return (_getCondensedForm(filter.patterns) !== \"\");\n            });\n\n            // FIRST_FILTER_INDEX needs to stay in sync with the number of static items (plus separator)\n            // ie. the number of items populated so far before we concatenate with the actual filter sets.\n            dropdownItems = dropdownItems.concat(filterSets);\n        }\n        _picker.items = dropdownItems;\n    }\n\n    /**\n     * Find the index of a filter set in the list of saved filter sets.\n     * @param {Array.<{name: string, patterns: Array.<string>}>} filterSets\n     * @return {{name: string, patterns: Array.<string>}} filter\n     */\n    function _getFilterIndex(filterSets, filter) {\n        var index = -1;\n\n        if (!filter || !filterSets.length) {\n            return index;\n        }\n\n        return _.findIndex(filterSets, _.partial(_.isEqual, filter));\n    }\n\n    /**\n     * A search filter is an array of one or more glob strings. The filter must be 'compiled' via compile()\n     * before passing to filterPath()/filterFileList().\n     * @return {?{name: string, patterns: Array.<string>, type: string}}\n     */\n    function getActiveFilter() {\n        var filterSets        = PreferencesManager.get(\"fileFilters\") || [],\n            activeFilterIndex = PreferencesManager.getViewState(\"activeFileFilter\"),\n            oldFilter         = PreferencesManager.getViewState(\"search.exclusions\") || [],\n            activeFilter      = null;\n\n        if (activeFilterIndex === null && oldFilter.length) {\n            activeFilter = { name: \"\", patterns: oldFilter, type: FILTER_TYPE_EXCLUDE};\n            activeFilterIndex = _getFilterIndex(filterSets, activeFilter);\n\n            // Migrate the old filter into the new filter storage\n            if (activeFilterIndex === -1) {\n                activeFilterIndex = filterSets.length;\n                filterSets.push(activeFilter);\n                PreferencesManager.set(\"fileFilters\", filterSets);\n            }\n            PreferencesManager.setViewState(\"activeFileFilter\", activeFilterIndex);\n        } else if (activeFilterIndex > -1 && activeFilterIndex < filterSets.length) {\n            activeFilter = filterSets[activeFilterIndex];\n        }\n\n        return activeFilter;\n    }\n\n    /**\n     * Update the picker button label with the name/patterns of the selected filter or\n     * No Files Excluded if no filter is selected.\n     */\n    function _updatePicker() {\n        var filter = getActiveFilter();\n        if (filter && filter.patterns.length) {\n            var label = filter.name || _getCondensedForm(filter.patterns);\n            const filterType = filter.type === FILTER_TYPE_INCLUDE ?\n                Strings.INCLUDE_FILE_FILTER : Strings.EXCLUDE_FILE_FILTER;\n            _picker.setButtonLabel(StringUtils.format(filterType, label));\n        } else {\n            _picker.setButtonLabel(Strings.NO_FILE_FILTER);\n        }\n    }\n\n    /**\n     * Sets and save the index of the active filter. Automatically set when editFilter() is completed.\n     * If no filter is passed in, then clear the last active filter index by setting it to -1.\n     *\n     * @param {{name: string, patterns: Array.<string>}=} filter\n     * @param {number=} index The index of the filter set in the list of saved filter sets or -1 if it is a new one\n     */\n    function setActiveFilter(filter, index) {\n        var filterSets = PreferencesManager.get(\"fileFilters\") || [];\n\n        if (filter) {\n            if (index === -1) {\n                // Add a new filter set\n                index = filterSets.length;\n                filterSets.push(filter);\n            } else if (index > -1 && index < filterSets.length) {\n                // Update an existing filter set only if the filter set has some changes\n                if (!_.isEqual(filterSets[index], filter)) {\n                    filterSets[index] = filter;\n                }\n            } else {\n                // Should not have been called with an invalid index to the available filter sets.\n                console.log(\"setActiveFilter is called with an invalid index: \" + index);\n                return;\n            }\n\n            PreferencesManager.set(\"fileFilters\", filterSets);\n            PreferencesManager.setViewState(\"activeFileFilter\", index);\n        } else {\n            // Explicitly set to -1 to remove the active file filter\n            PreferencesManager.setViewState(\"activeFileFilter\", -1);\n        }\n        FindUtils.notifyFileFiltersChanged();\n    }\n\n\n    /**\n     * Converts a user-specified filter object (as chosen in picker or retrieved from getFilters()) to a 'compiled' form\n     * that can be used with filterPath()/filterFileList().\n     * @param {!Array.<string>} userFilter\n     * @param {string} filterType - one of FILTER_TYPE_EXCLUDE or FILTER_TYPE_INCLUDE\n     * @return {{filterType: string, ignores: function}} a globeFilter filter that can be passed to filterPath()/filterFileList().\n     */\n    function compile(userFilter, filterType) {\n        // Automatically apply transforms make writing simple filters more intuitive\n        const subStringFilter = [];\n        const wrappedGlobs = [];\n        for(let glob of userFilter){\n            // *.js -> **/*.js; *.config.js -> **/*.config.js; ?.js -> **/?.js;\n            if (glob.startsWith(\"*.\") || glob.startsWith(\"?.\")) {\n                wrappedGlobs.push(`**/${glob}`); // **/*.txt\n                continue;\n            }\n            // ./ will only match in present project root, this is as an escape for the above transform we apply\n            if(glob.startsWith(\"./\")) {\n                wrappedGlobs.push(glob.slice(2)); // ./*.txt to *.txt\n                continue;\n            }\n            // if not a glob string, we should do a string.includes search to match any substring.\n            if(!(glob.includes(\"?\") || glob.includes(\"*\") ||\n                glob.includes(\"[\") || glob.includes(\"]\") ||\n                glob.includes(\"\\\\\") || glob.includes(\"!\"))) {\n                subStringFilter.push(glob);\n                continue;\n            }\n            wrappedGlobs.push(glob);\n        }\n\n        const isMatch = window.fs.utils.picomatch(wrappedGlobs, {\n            dot: true\n        });\n        function ignores(relativeOrFullPath) {\n            for(let subStr of subStringFilter){\n                if(relativeOrFullPath.includes(subStr)){\n                    return true;\n                }\n            }\n            return isMatch(relativeOrFullPath);\n        }\n        return {\n            ignores: ignores,\n            filterType: filterType || FILTER_TYPE_EXCLUDE\n        };\n    }\n\n\n    /**\n     * Returns false if the given path matches any of the exclusion globs in the given filter. Returns true\n     * if the path does not match any of the globs. If filtering many paths at once, use filterFileList()\n     * for much better performance.\n     *\n     * @param {object} compiledFilter  'Compiled' filter object as returned by compile(), or null to no-op\n     * @param {!string} fullPath\n     * @return {boolean}\n     */\n    function filterPath(compiledFilter, fullPath) {\n        if (!compiledFilter) {\n            return true;\n        }\n\n        if (!ProjectManager.isWithinProject(fullPath)){\n            return false;\n        }\n        const relativePath = ProjectManager.makeProjectRelativeIfPossible(fullPath);\n        if(compiledFilter.filterType === FILTER_TYPE_INCLUDE){\n            return compiledFilter.ignores(relativePath);\n        }\n        return !compiledFilter.ignores(relativePath);\n    }\n\n    /**\n     * Returns a copy of 'files' filtered to just those that don't match any of the exclusion globs in the filter.\n     *\n     * @param {object} compiledFilter  'Compiled' filter object as returned by compile(), or null to no-op\n     * @param {!Array.<File>} files\n     * @return {!Array.<File>}\n     */\n    function filterFileList(compiledFilter, files) {\n        if (!compiledFilter) {\n            return files;\n        }\n\n        return files.filter(function (f) {\n            if (!ProjectManager.isWithinProject(f.fullPath)){\n                return false;\n            }\n            const relativePath = ProjectManager.makeProjectRelativeIfPossible(f.fullPath);\n            if(compiledFilter.filterType === FILTER_TYPE_INCLUDE){\n                return compiledFilter.ignores(relativePath);\n            }\n            return !compiledFilter.ignores(relativePath);\n        });\n    }\n\n    /**\n     * Returns a copy of 'file path' strings that match any of the exclusion globs in the filter.\n     *\n     * @param {object} compiledFilter  'Compiled' filter object as returned by compile(), or null to no-op\n     * @param {!Array.<string>} An array with a list of full file paths that matches atleast one of the filter.\n     * @return {!Array.<string>}\n     */\n    function getPathsMatchingFilter(compiledFilter, filePaths) {\n        if (!compiledFilter) {\n            return filePaths;\n        }\n\n        return filePaths.filter(function (fullPath) {\n            if (!ProjectManager.isWithinProject(fullPath)){\n                return false;\n            }\n            const relativePath = ProjectManager.makeProjectRelativeIfPossible(fullPath);\n            if(compiledFilter.filterType === FILTER_TYPE_INCLUDE){\n                return compiledFilter.ignores(relativePath);\n            }\n            return !compiledFilter.ignores(relativePath);\n        });\n    }\n\n\n    /**\n     * Opens a dialog box to edit the given filter. When editing is finished, the value of getActiveFilter() changes to\n     * reflect the edits. If the dialog was canceled, the preference is left unchanged.\n     * @param {!{name: string, patterns: Array.<string>}} filter\n     * @param {number} index The index of the filter set to be edited or created. The value is -1 if it is for a new one\n     *          to be created.\n     * @return {!$.Promise} Dialog box promise\n     */\n    function editFilter(filter, index) {\n        let lastFocus = window.document.activeElement;\n        let isExclusionFilter = (filter.type !== FILTER_TYPE_INCLUDE);\n        function _getInstructionText() {\n            return StringUtils.format(\n                isExclusionFilter ? Strings.FILE_FILTER_INSTRUCTIONS : Strings.FILE_FILTER_INSTRUCTIONS_INCLUDE,\n                \"https://docs.phcode.dev/docs/find-in-files/#creating-an-exclusioninclusion-filter\");\n        }\n\n        let templateVars = {\n            instruction: _getInstructionText(),\n            Strings: Strings\n        };\n        let dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(EditFilterTemplate, templateVars)),\n            $nameField = dialog.getElement().find(\".exclusions-name\"),\n            $editField = dialog.getElement().find(\".exclusions-editor\"),\n            $excludeToggle = dialog.getElement().find(\".checkbox\"),\n            $remainingField = dialog.getElement().find(\".exclusions-name-characters-remaining\");\n\n        $nameField.val(filter.name);\n        $editField.val(filter.patterns.join(\"\\n\")).focus();\n        $excludeToggle.prop('checked', isExclusionFilter);\n        $excludeToggle.on(\"click\", ()=>{\n            isExclusionFilter = $excludeToggle.is(':checked');\n            dialog.getElement().find(\".instruction-text\")\n                .html(_getInstructionText());\n            updateFileCount();\n        });\n\n        function getValue() {\n            var newFilter = $editField.val().split(\"\\n\");\n\n            // Remove blank lines\n            return newFilter.filter(function (glob) {\n                return glob.trim().length;\n            });\n        }\n\n        $nameField.bind('input', function () {\n            var remainingCharacters = FILTER_NAME_CHARACTER_MAX - $(this).val().length;\n            if (remainingCharacters < 0.25*FILTER_NAME_CHARACTER_MAX) {\n                $remainingField.show();\n\n                $remainingField.text(StringUtils.format(\n                    Strings.FILTER_NAME_REMAINING,\n                    remainingCharacters\n                ));\n\n                if (remainingCharacters < 0) {\n                    $remainingField.addClass(\"exclusions-name-characters-limit-reached\");\n                } else {\n                    $remainingField.removeClass(\"exclusions-name-characters-limit-reached\");\n                }\n            }            else {\n                $remainingField.hide();\n            }\n            updatePrimaryButton();\n        });\n\n        dialog.done(function (buttonId) {\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\n                let filterType = $excludeToggle.is(':checked') ? FILTER_TYPE_EXCLUDE : FILTER_TYPE_INCLUDE;\n                // Update saved filter preference\n                setActiveFilter({\n                    name: $nameField.val(),\n                    patterns: getValue(),\n                    type: filterType\n                }, index);\n                _updatePicker();\n                _doPopulate();\n            }\n            lastFocus.focus();  // restore focus to old pos\n        });\n\n        // Code to update the file count readout at bottom of dialog (if context provided)\n        var $fileCount = dialog.getElement().find(\".exclusions-filecount\");\n\n        function updateFileCount() {\n            _context.promise.done(function (files) {\n                var filter = getValue();\n                if (filter.length) {\n                    const filterType = $excludeToggle.is(':checked') ? FILTER_TYPE_EXCLUDE : FILTER_TYPE_INCLUDE;\n                    const compiledFilter = compile(filter, filterType);\n                    var filtered = filterFileList(compiledFilter, files);\n                    $fileCount.html(StringUtils.format(Strings.FILTER_FILE_COUNT, filtered.length, files.length, _context.label));\n                } else {\n                    $fileCount.html(StringUtils.format(Strings.FILTER_FILE_COUNT_ALL, files.length, _context.label));\n                }\n            });\n        }\n\n        // Code to enable/disable the OK button at the bottom of dialog (whether filter is empty or not)\n        var $primaryBtn = dialog.getElement().find(\".primary\");\n\n        function updatePrimaryButton() {\n            var trimmedValue = $editField.val().trim();\n            var exclusionNameLength = $nameField.val().length;\n\n            $primaryBtn.prop(\"disabled\", !trimmedValue.length || (exclusionNameLength > FILTER_NAME_CHARACTER_MAX));\n        }\n\n        $editField.on(\"input\", updatePrimaryButton);\n        updatePrimaryButton();\n\n        if (_context) {\n            $editField.on(\"input\", _.debounce(updateFileCount, 400));\n            updateFileCount();\n        } else {\n            $fileCount.hide();\n        }\n\n        return dialog.getPromise();\n    }\n\n\n    /**\n     * Marks the filter picker's currently selected item as most-recently used, and returns the corresponding\n     * 'compiled' filter object ready for use with filterPath().\n     * @param {!jQueryObject} picker UI returned from createFilterPicker()\n     * @return {!string} 'compiled' filter that can be passed to filterPath()/filterFileList().\n     */\n    function commitPicker(picker) {\n        var filter = getActiveFilter();\n        return (filter && filter.patterns.length) ? compile(filter.patterns, filter.type) : \"\";\n    }\n\n    /**\n     * Remove the target item from the filter dropdown list and update dropdown button\n     * and dropdown list UI.\n     * @param {!Event} e Mouse events\n     */\n    function _handleDeleteFilter(e) {\n        // Remove the filter set from the preferences and\n        // clear the active filter set index from view state.\n        var filterSets        = PreferencesManager.get(\"fileFilters\") || [],\n            activeFilterIndex = PreferencesManager.getViewState(\"activeFileFilter\"),\n            filterIndex       = $(e.target).parent().data(\"index\") - FIRST_FILTER_INDEX;\n\n        // Don't let the click bubble upward.\n        e.stopPropagation();\n\n        filterSets.splice(filterIndex, 1);\n        PreferencesManager.set(\"fileFilters\", filterSets);\n\n        if (activeFilterIndex === filterIndex) {\n            // Removing the active filter, so clear the active filter\n            // both in the view state.\n            setActiveFilter(null);\n        } else if (activeFilterIndex > filterIndex) {\n            // Adjust the active filter index after the removal of a filter set before it.\n            --activeFilterIndex;\n            setActiveFilter(filterSets[activeFilterIndex], activeFilterIndex);\n        }\n\n        _updatePicker();\n        _doPopulate();\n        _picker.refresh();\n    }\n\n    /**\n     * Close filter dropdwon list and launch edit filter dialog.\n     * @param {!Event} e Mouse events\n     */\n    function _handleEditFilter(e) {\n        var filterSets  = PreferencesManager.get(\"fileFilters\") || [],\n            filterIndex = $(e.target).parent().parent().data(\"index\") - FIRST_FILTER_INDEX;\n\n        // Don't let the click bubble upward.\n        e.stopPropagation();\n\n        // Close the dropdown first before opening the edit filter dialog\n        // so that it will restore focus to the DOM element that has focus\n        // prior to opening it.\n        _picker.closeDropdown();\n\n        editFilter(filterSets[filterIndex], filterIndex);\n    }\n\n    /**\n     * Set up mouse click event listeners for 'Delete' and 'Edit' buttons\n     * when the dropdown is open. Also set check mark on the active filter.\n     * @param {!Event>} event listRendered event triggered when the dropdown is open\n     * @param {!jQueryObject} $dropdown the jQuery DOM node of the dropdown list\n     */\n    function _handleListRendered(event, $dropdown) {\n        var activeFilterIndex = PreferencesManager.getViewState(\"activeFileFilter\"),\n            checkedItemIndex = (activeFilterIndex > -1) ? (activeFilterIndex + FIRST_FILTER_INDEX + 1) : -1;\n        _picker.setChecked(checkedItemIndex, true);\n\n        $dropdown.find(\".filter-trash-icon\")\n            .on(\"click\", _handleDeleteFilter);\n\n        $dropdown.find(\".filter-edit-icon\")\n            .on(\"click\", _handleEditFilter);\n    }\n\n    /**\n     * Creates a UI element for selecting a filter, populated with a list of recently used filters, an option to\n     * edit the selected filter and another option to create a new filter. The client should call commitDropdown()\n     * when the UI containing the filter picker is confirmed (which updates the MRU order) and then use the\n     * returned filter object as needed.\n     *\n     * @param {?{label:string, promise:$.Promise}} context Info on files that filter will apply to.\n     *      This will be saved as _context for later use in creating a new filter or editing an\n     *      existing filter in Edit Filter dialog.\n     * @return {!jQueryObject} Picker UI. To retrieve the selected value, use commitPicker().\n     */\n    function createFilterPicker(context) {\n\n        function itemRenderer(item, index) {\n            if (index < FIRST_FILTER_INDEX) {\n                // Prefix the two filter commands with 'recent-filter-name' so that\n                // they also get the same margin-left as the actual filters.\n                return \"<span class='recent-filter-name'></span>\" + _.escape(item);\n            }\n\n            const filterType = item.type === FILTER_TYPE_INCLUDE ?\n                Strings.INCLUDE_FILE_FILTER_DROPDOWN : Strings.EXCLUDE_FILE_FILTER_DROPDOWN;\n            var condensedPatterns = _getCondensedForm(item.patterns),\n                templateVars = {\n                    \"filter-type\": filterType,\n                    \"filter-name\": _.escape(item.name || condensedPatterns),\n                    \"filter-patterns\": item.name ? \" - \" + _.escape(condensedPatterns) : \"\"\n                };\n\n            return Mustache.render(FilterNameTemplate, templateVars);\n        }\n\n        _context = context;\n        _picker = new DropdownButton(\"\", [], itemRenderer);\n\n        _updatePicker();\n        _doPopulate();\n\n        // Add 'file-filter-picker' to keep some margin space on the left of the button\n        _picker.$button.addClass(\"file-filter-picker no-focus\");\n\n        // Set up mouse click event listeners for 'Delete' and 'Edit' buttons\n        _picker.on(\"listRendered\", _handleListRendered);\n\n        _picker.on(\"select\", function (event, item, itemIndex) {\n            if (itemIndex === 0) {\n                // Close the dropdown first before opening the edit filter dialog\n                // so that it will restore focus to the DOM element that has focus\n                // prior to opening it.\n                _picker.closeDropdown();\n\n                // Create a new filter set\n                editFilter({ name: \"\", patterns: [], type: FILTER_TYPE_EXCLUDE}, -1);\n            } else if (itemIndex === 1) {\n                // Uncheck the prior active filter in the dropdown list.\n                _picker.setChecked(itemIndex, false);\n\n                // Clear the active filter\n                setActiveFilter(null);\n                _updatePicker();\n            } else if (itemIndex >= FIRST_FILTER_INDEX && item) {\n                setActiveFilter(item, itemIndex - FIRST_FILTER_INDEX);\n                _picker.setChecked(itemIndex, true);\n                _updatePicker();\n            }\n        });\n\n        return _picker.$button;\n    }\n\n    /**\n     * Allows unit tests to open the file filter dropdown list.\n     */\n    function showDropdown() {\n        if (_picker) {\n            _picker.showDropdown();\n        }\n    }\n\n    /**\n     * Allows unit tests to close the file filter dropdown list.\n     */\n    function closeDropdown() {\n        if (_picker) {\n            _picker.closeDropdown();\n        }\n    }\n\n    // For unit tests only\n    exports.showDropdown       = showDropdown;\n    exports.closeDropdown      = closeDropdown;\n\n    exports.createFilterPicker     = createFilterPicker;\n    exports.commitPicker           = commitPicker;\n    exports.getActiveFilter        = getActiveFilter;\n    exports.setActiveFilter        = setActiveFilter;\n    exports.editFilter             = editFilter;\n    exports.compile                = compile;\n    exports.filterPath             = filterPath;\n    exports.filterFileList         = filterFileList;\n    exports.getPathsMatchingFilter = getPathsMatchingFilter;\n});\n"],"file":"FileFilters.js"}