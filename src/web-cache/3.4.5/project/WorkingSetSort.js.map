{"version":3,"sources":["project/WorkingSetSort.js"],"names":["define","require","exports","module","Commands","CommandManager","MainViewManager","PreferencesManager","FileUtils","AppInit","Strings","_","_sorts","_currentSort","_automaticSort","_sortPrefConversionMap","view.sortWorkingSetByAdded","view.sortWorkingSetByName","view.sortWorkingSetByType","_SORT_EVENT_NAMES","_WORKING_SET_SORT_PREF","_LEGACY_SORT_PREF","get","command","commandID","getID","console","error","_convertSortPref","sortMethod","hasOwnProperty","setViewState","getAutomatic","_removeListeners","off","setAutomatic","enable","CMD_WORKING_SORT_TOGGLE_AUTO","setChecked","sort","_addListeners","getEvents","on","_setCurrentSort","newSort","setEnabled","getCommandID","Sort","compareFn","events","automaticFn","this","_commandID","_compareFn","_events","register","split","forEach","event","index","trim","join","log","_handleToggleAutoSort","_handleSort","commandId","execute","initSortMethod","getViewState","CMD_WORKINGSET_SORT_BY_ADDED","prototype","getCompareFn","value","_sortWorkingSet","ALL_PANES","paneId","file1","file2","index1","index2","findInWorkingSetByAddedOrder","fullPath","CMD_WORKINGSET_SORT_BY_NAME","compareFilenames","name","CMD_WORKINGSET_SORT_BY_TYPE","partial","stateManager","definePreference","appReady","curSort","autoSort"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,SAA0BH,QAAQ,oBAClCI,eAA0BJ,QAAQ,0BAClCK,gBAA0BL,QAAQ,wBAClCM,mBAA0BN,QAAQ,kCAClCO,UAA0BP,QAAQ,kBAClCQ,QAA0BR,QAAQ,iBAClCS,QAA0BT,QAAQ,WAClCU,EAA0BV,QAAQ,qBAOlCW,OAAS,GAOTC,aAAe,KAOfC,gBAAiB,EAQjBC,uBAAyB,CACzBC,6BAA8B,4BAC9BC,4BAA6B,2BAC7BC,4BAA6B,4BAQ7BC,kBAAoB,kCAOpBC,uBAAyB,uBAOzBC,kBAAoB,cAOxB,SAASC,IAAIC,SACT,IAAIC,UACJ,GAAKD,QAUL,OAJIC,UADmB,iBAAZD,QACKA,QAEAA,QAAQE,QAEjBb,OAAOY,WATVE,QAAQC,MAAM,8EAkBtB,SAASC,iBAAiBC,YACtB,OAAKA,YAIDd,uBAAuBe,eAAeD,aACtCA,WAAad,uBAAuBc,YACpCtB,mBAAmBwB,aAAaX,uBAAwBS,aAExDA,WAAa,KAGVA,YAVI,KAgBf,SAASG,eACL,OAAOlB,eAOX,SAASmB,mBACL3B,gBAAgB4B,IAAI,SAOxB,SAASC,aAAaC,QAClBtB,eAAiBsB,OACjB7B,mBAAmBwB,aAAa,gBAAiBjB,gBACjDT,eAAeiB,IAAIlB,SAASiC,8BAA8BC,WAAWxB,gBACrED,aAAayB,WAAWxB,gBAEpBA,eACAD,aAAa0B,OAEbN,mBAQR,SAASO,gBACD1B,gBAAkBD,cAAgBA,aAAa4B,aAC/CnC,gBACKoC,GAAG7B,aAAa4B,YAAa,WAC1B5B,aAAa0B,SAEhBG,GAAG,kCAAmC,WACnCP,cAAa,KAW7B,SAASQ,gBAAgBC,SACjB/B,eAAiB+B,UACI,OAAjB/B,cACAA,aAAayB,YAAW,GAExBxB,gBACA8B,QAAQN,YAAW,GAGvBjC,eAAeiB,IAAIlB,SAASiC,8BAA8BQ,aAAaD,QAAQH,aAC/ElC,mBAAmBwB,aAAaX,uBAAwBwB,QAAQE,gBAChEjC,aAAe+B,SAavB,SAASG,KAAKvB,UAAWwB,UAAWC,OAAQC,aACxCC,KAAKC,WAAa5B,UAClB2B,KAAKE,WAAaL,UAClBG,KAAKG,QAAaL,OA0EtB,SAASM,SAAShC,QAASyB,UAAWC,QAClC,IAAIzB,UAAY,GAEhB,GAAKD,SAAYyB,UAAjB,CAUA,GALIxB,UADmB,iBAAZD,QACKA,QAEAA,QAAQE,SAGpBb,OAAOY,WAAX,CAMIyB,UACAA,OAASA,OAAOO,MAAM,MACfC,QAAQ,SAAUC,MAAOC,OAC5BV,OAAOU,OAASV,OAAOU,OAAOC,OAAS,UAE3CX,OAASA,OAAOY,KAAK,MAGzB,IAAItB,KAAO,IAAIQ,KAAKvB,UAAWwB,UAAWC,QAE1C,OADArC,OAAOY,WAAae,KACbA,KAfHb,QAAQoC,IAAI,6DAA+DvC,cAV3EG,QAAQoC,IAAI,uGAiCpB,SAASC,wBACL5B,cAAcH,gBAQlB,SAASgC,YAAYC,WACjB3C,IAAI2C,WAAWC,UAuDnB,SAASC,iBACL,IAAItC,WAAatB,mBAAmB6D,aAAahD,wBASjD,OAPKS,aACDA,WAAaD,iBAAiBrB,mBAAmB6D,aAAa/C,qBAG7DQ,aACDA,WAAazB,SAASiE,8BAEnBxC,WAnLXkB,KAAKuB,UAAUxB,aAAe,WAC1B,OAAOK,KAAKC,YAOhBL,KAAKuB,UAAUC,aAAe,WAC1B,OAAOpB,KAAKE,YAOhBN,KAAKuB,UAAU7B,UAAY,WACvB,OAAOU,KAAKG,SAOhBP,KAAKuB,UAAUhC,WAAa,SAAUkC,OAClC,IAAIjD,QAAUlB,eAAeiB,IAAI6B,KAAKC,YAClC7B,SACAA,QAAQe,WAAWkC,QAO3BzB,KAAKuB,UAAUJ,QAAU,WACrBvB,gBAAgBQ,MAChBA,KAAKZ,QAMTQ,KAAKuB,UAAU/B,KAAO,WACd1B,eAAiBsC,OACjBlB,mBACA3B,gBAAgBmE,gBAAgBnE,gBAAgBoE,UAAWvB,KAAKE,YAChEb,kBA0ERe,SACInD,SAASiE,6BACT,SAAUM,OAAQC,MAAOC,OACrB,IAAIC,OACAC,OAEJ,OAHazE,gBAAgB0E,6BAA6BL,OAAQC,MAAMK,UAC3D3E,gBAAgB0E,6BAA6BL,OAAQE,MAAMI,WAI5E9D,mBAEJoC,SACInD,SAAS8E,4BACT,SAAUP,OAAQC,MAAOC,OACrB,OAAOrE,UAAU2E,iBAAiBP,MAAMQ,KAAMP,MAAMO,MAAM,IAE9DjE,mBAEJoC,SACInD,SAASiF,4BACT,SAAUV,OAAQC,MAAOC,OACrB,OAAOrE,UAAU2E,iBAAiBP,MAAMQ,KAAMP,MAAMO,MAAM,IAE9DjE,mBAOJd,eAAekD,SAAS7C,QAAQ2D,6BAA8BjE,SAASiE,6BAA8B1D,EAAE2E,QAAQtB,YAAa5D,SAASiE,+BACrIhE,eAAekD,SAAS7C,QAAQwE,4BAA8B9E,SAAS8E,4BAA8BvE,EAAE2E,QAAQtB,YAAa5D,SAAS8E,8BACrI7E,eAAekD,SAAS7C,QAAQ2E,4BAA8BjF,SAASiF,4BAA8B1E,EAAE2E,QAAQtB,YAAa5D,SAASiF,8BACrIhF,eAAekD,SAAS7C,QAAQ2B,6BAAgCjC,SAASiC,6BAAiC0B,uBAM1GxD,mBAAmBgF,aAAaC,iBAAiB,gBAAiB,WAAW,GAM7EjF,mBAAmBgF,aAAaC,iBAAiBpE,uBAAwB,SAAU,IAqBnFX,QAAQgF,SAAS,WACb,IAAI5D,WACA6D,QAAapE,IADA6C,kBAEbwB,SAAWpF,mBAAmB6D,aAAa,iBAE3CsB,SACA/C,gBAAgB+C,SAEhBC,UACAxD,aAAawD,UAEbD,SAAWC,UACXD,QAAQnD,SAKhBrC,QAAQqD,SAAkBA,SAC1BrD,QAAQoB,IAAkBA,IAC1BpB,QAAQ8B,aAAkBA,aAC1B9B,QAAQiC,aAAkBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Manages the workingSetList sort methods.\n */\ndefine(function (require, exports, module) {\n\n\n    var Commands                = require(\"command/Commands\"),\n        CommandManager          = require(\"command/CommandManager\"),\n        MainViewManager         = require(\"view/MainViewManager\"),\n        PreferencesManager      = require(\"preferences/PreferencesManager\"),\n        FileUtils               = require(\"file/FileUtils\"),\n        AppInit                 = require(\"utils/AppInit\"),\n        Strings                 = require(\"strings\"),\n        _                       = require(\"thirdparty/lodash\");\n\n    /**\n     * List of sorting method objects\n     * @private\n     * @type {Array.<Sort>}\n     */\n    var _sorts = [];\n\n    /**\n     * Denotes the current sort method object\n     * @private\n     * @type {Sort}\n     */\n    var _currentSort = null;\n\n    /**\n     * Denotes if automatic sorting is enabled or not\n     * @private\n     * @type {boolean}\n     */\n    var _automaticSort = false;\n\n\n    /**\n     * Maps Legacy sort method names  to new sort method names\n     * @private\n     * @type {object.<string: string>} oldname: newname\n     */\n    var _sortPrefConversionMap = {\n        \"view.sortWorkingSetByAdded\": \"cmd.sortWorkingSetByAdded\",\n        \"view.sortWorkingSetByName\": \"cmd.sortWorkingSetByName\",\n        \"view.sortWorkingSetByType\": \"cmd.sortWorkingSetByType\"\n    };\n\n    /**\n     * Events which the sort command will listen for to trigger a sort\n     * @constant {string}\n     * @private\n     */\n    var _SORT_EVENT_NAMES = \"workingSetAdd workingSetAddList\";\n\n    /**\n     * Preference name\n     * @constant {string}\n     * @private\n     */\n    var _WORKING_SET_SORT_PREF = \"workingSetSortMethod\";\n\n    /**\n     * Legacy preference name\n     * @constant {string}\n     * @private\n     */\n    var _LEGACY_SORT_PREF = \"currentSort\";\n\n    /**\n     * Retrieves a Sort object by id\n     * @param {(string|Command)} command A command ID or a command object.\n     * @return {?Sort}\n     */\n    function get(command) {\n        var commandID;\n        if (!command) {\n            console.error(\"Attempting to get a Sort method with a missing required parameter: command\");\n            return;\n        }\n\n        if (typeof command === \"string\") {\n            commandID = command;\n        } else {\n            commandID = command.getID();\n        }\n        return _sorts[commandID];\n    }\n\n    /**\n     * Converts the old brackets working set sort preference into the modern paneview sort preference\n     * @private\n     * @param {!string} sortMethod - sort preference to convert\n     * @return {?string} new sort preference string or undefined if an sortMethod is not found\n     */\n    function _convertSortPref(sortMethod) {\n        if (!sortMethod) {\n            return null;\n        }\n\n        if (_sortPrefConversionMap.hasOwnProperty(sortMethod)) {\n            sortMethod = _sortPrefConversionMap[sortMethod];\n            PreferencesManager.setViewState(_WORKING_SET_SORT_PREF, sortMethod);\n        } else {\n            sortMethod = null;\n        }\n\n        return sortMethod;\n    }\n\n    /**\n     * @return {boolean} Enabled state of Automatic Sort.\n     */\n    function getAutomatic() {\n        return _automaticSort;\n    }\n\n    /**\n     * Removes the sort listeners.\n     * @private\n     */\n    function _removeListeners() {\n        MainViewManager.off(\".sort\");\n    }\n\n    /**\n     * Enables/Disables Automatic Sort depending on the value.\n     * @param {boolean} enable True to enable, false to disable.\n     */\n    function setAutomatic(enable) {\n        _automaticSort = enable;\n        PreferencesManager.setViewState(\"automaticSort\", _automaticSort);\n        CommandManager.get(Commands.CMD_WORKING_SORT_TOGGLE_AUTO).setChecked(_automaticSort);\n        _currentSort.setChecked(_automaticSort);\n\n        if (_automaticSort) {\n            _currentSort.sort();\n        } else {\n            _removeListeners();\n        }\n    }\n\n    /**\n     * Adds the current sort MainViewManager listeners.\n     * @private\n     */\n    function _addListeners() {\n        if (_automaticSort && _currentSort && _currentSort.getEvents()) {\n            MainViewManager\n                .on(_currentSort.getEvents(), function () {\n                    _currentSort.sort();\n                })\n                .on(\"_workingSetDisableAutoSort.sort\", function () {\n                    setAutomatic(false);\n                });\n        }\n    }\n\n\n    /**\n     * Sets the current sort method and checks it on the context menu.\n     * @private\n     * @param {Sort} newSort\n     */\n    function _setCurrentSort(newSort) {\n        if (_currentSort !== newSort) {\n            if (_currentSort !== null) {\n                _currentSort.setChecked(false);\n            }\n            if (_automaticSort) {\n                newSort.setChecked(true);\n            }\n\n            CommandManager.get(Commands.CMD_WORKING_SORT_TOGGLE_AUTO).setEnabled(!!newSort.getEvents());\n            PreferencesManager.setViewState(_WORKING_SET_SORT_PREF, newSort.getCommandID());\n            _currentSort = newSort;\n        }\n    }\n\n\n    /**\n     * @constructor\n     * @param {string} commandID A valid command identifier.\n     * @param {function(File, File): number} compareFn A valid sort\n     *      function (see register for a longer explanation).\n     * @param {string} events Space-separated WorkingSetSort possible events\n     *      ending with \".sort\".\n     */\n    function Sort(commandID, compareFn, events, automaticFn) {\n        this._commandID = commandID;\n        this._compareFn = compareFn;\n        this._events    = events;\n    }\n\n    /**\n     * The Command ID\n     * @return {string}\n     */\n    Sort.prototype.getCommandID = function () {\n        return this._commandID;\n    };\n\n    /**\n     * The compare function\n     * @return {function(File, File): number}\n     */\n    Sort.prototype.getCompareFn = function () {\n        return this._compareFn;\n    };\n\n    /**\n     * Gets the event that this sort object is listening to\n     * @return {string}\n     */\n    Sort.prototype.getEvents = function () {\n        return this._events;\n    };\n\n    /**\n     * Checks/Unchecks the command which will show a check in the menu\n     * @param {boolean} value\n     */\n    Sort.prototype.setChecked = function (value) {\n        var command = CommandManager.get(this._commandID);\n        if (command) {\n            command.setChecked(value);\n        }\n    };\n\n    /**\n     * Performs the sort and makes it the current sort method.\n     */\n    Sort.prototype.execute = function () {\n        _setCurrentSort(this);\n        this.sort();\n    };\n\n    /**\n     * Only performs the working set sort if this is the current sort.\n     */\n    Sort.prototype.sort = function () {\n        if (_currentSort === this) {\n            _removeListeners();\n            MainViewManager._sortWorkingSet(MainViewManager.ALL_PANES, this._compareFn);\n            _addListeners();\n        }\n    };\n\n\n    /**\n     * Registers a working set sort method.\n     * @param {(string|Command)} command A command ID or a command object\n     * @param {function(File, File): number} compareFn The function that\n     *      will be used inside JavaScript's sort function. The return a value\n     *      should be >0 (sort a to a lower index than b), =0 (leaves a and b\n     *      unchanged with respect to each other) or <0 (sort b to a lower index\n     *      than a) and must always returns the same value when given a specific\n     *      pair of elements a and b as its two arguments. Documentation at:\n     *      https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/sort\n     * @param {?string} events One or more space-separated event types that\n     *      DocumentManger uses. Each event passed will trigger the automatic\n     *      sort. If no events are passed, the automatic sort will be disabled\n     *      for that sort method.\n     * @return {?Sort}\n     */\n    function register(command, compareFn, events) {\n        var commandID = \"\";\n\n        if (!command || !compareFn) {\n            console.log(\"Attempting to register a Sort method with a missing required parameter: command or compare function\");\n            return;\n        }\n        if (typeof command === \"string\") {\n            commandID = command;\n        } else {\n            commandID = command.getID();\n        }\n\n        if (_sorts[commandID]) {\n            console.log(\"Attempting to register an already-registered Sort method: \" + command);\n            return;\n        }\n\n        // Adds \".sort\" to the end of each event to make them specific for the automatic sort.\n        if (events) {\n            events = events.split(\" \");\n            events.forEach(function (event, index) {\n                events[index] = events[index].trim() + \".sort\";\n            });\n            events = events.join(\" \");\n        }\n\n        var sort = new Sort(commandID, compareFn, events);\n        _sorts[commandID] = sort;\n        return sort;\n    }\n\n\n    /**\n     * Command Handler for CMD_WORKING_SORT_TOGGLE_AUTO\n     * @private\n     */\n    function _handleToggleAutoSort() {\n        setAutomatic(!getAutomatic());\n    }\n\n    /**\n     * Command Handler for CMD_WORKINGSET_SORT_BY_*\n     * @private\n     * @param {!string} commandId identifies the sort method to use\n     */\n    function _handleSort(commandId) {\n        get(commandId).execute();\n    }\n\n    /**\n     * Register Sort Methods\n     */\n    register(\n        Commands.CMD_WORKINGSET_SORT_BY_ADDED,\n        function (paneId, file1, file2) {\n            var index1 = MainViewManager.findInWorkingSetByAddedOrder(paneId, file1.fullPath),\n                index2 = MainViewManager.findInWorkingSetByAddedOrder(paneId, file2.fullPath);\n\n            return index1 - index2;\n        },\n        _SORT_EVENT_NAMES\n    );\n    register(\n        Commands.CMD_WORKINGSET_SORT_BY_NAME,\n        function (paneId, file1, file2) {\n            return FileUtils.compareFilenames(file1.name, file2.name, false);\n        },\n        _SORT_EVENT_NAMES\n    );\n    register(\n        Commands.CMD_WORKINGSET_SORT_BY_TYPE,\n        function (paneId, file1, file2) {\n            return FileUtils.compareFilenames(file1.name, file2.name, true);\n        },\n        _SORT_EVENT_NAMES\n    );\n\n\n    /**\n     * Register Command Handlers\n     */\n    CommandManager.register(Strings.CMD_WORKINGSET_SORT_BY_ADDED, Commands.CMD_WORKINGSET_SORT_BY_ADDED, _.partial(_handleSort, Commands.CMD_WORKINGSET_SORT_BY_ADDED));\n    CommandManager.register(Strings.CMD_WORKINGSET_SORT_BY_NAME,  Commands.CMD_WORKINGSET_SORT_BY_NAME,  _.partial(_handleSort, Commands.CMD_WORKINGSET_SORT_BY_NAME));\n    CommandManager.register(Strings.CMD_WORKINGSET_SORT_BY_TYPE,  Commands.CMD_WORKINGSET_SORT_BY_TYPE,  _.partial(_handleSort, Commands.CMD_WORKINGSET_SORT_BY_TYPE));\n    CommandManager.register(Strings.CMD_WORKING_SORT_TOGGLE_AUTO,   Commands.CMD_WORKING_SORT_TOGGLE_AUTO,    _handleToggleAutoSort);\n\n\n    /**\n     * Initialize default values for sorting preferences\n     */\n    PreferencesManager.stateManager.definePreference(\"automaticSort\", \"boolean\", false);\n\n    /**\n     * Define a default sort method that's empty so that we\n     *   just convert and use the legacy sort method\n     */\n    PreferencesManager.stateManager.definePreference(_WORKING_SET_SORT_PREF, \"string\", \"\");\n\n    /*\n     * initializes global sort method from preference settings or the default\n     */\n    function initSortMethod() {\n        var sortMethod = PreferencesManager.getViewState(_WORKING_SET_SORT_PREF);\n\n        if (!sortMethod) {\n            sortMethod = _convertSortPref(PreferencesManager.getViewState(_LEGACY_SORT_PREF));\n        }\n\n        if (!sortMethod) {\n            sortMethod = Commands.CMD_WORKINGSET_SORT_BY_ADDED;\n        }\n        return sortMethod;\n    }\n\n    /**\n     * Initialize items dependent on extensions/workingSetList\n     */\n    AppInit.appReady(function () {\n        var sortMethod = initSortMethod(),\n            curSort    = get(sortMethod),\n            autoSort = PreferencesManager.getViewState(\"automaticSort\");\n\n        if (curSort) {\n            _setCurrentSort(curSort);\n        }\n        if (autoSort) {\n            setAutomatic(autoSort);\n        }\n        if (curSort && autoSort) {\n            curSort.sort();\n        }\n    });\n\n    // Public API\n    exports.register        = register;\n    exports.get             = get;\n    exports.getAutomatic    = getAutomatic;\n    exports.setAutomatic    = setAutomatic;\n});\n"],"file":"WorkingSetSort.js"}