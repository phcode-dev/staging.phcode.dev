{"version":3,"sources":["languageTools/BracketsToNodeInterface.js"],"names":["define","require","exports","module","BracketsToNodeInterface","domain","this","bracketsFn","_registerDataEvent","prototype","_messageHandler","evt","params","methodName","method","self","_getErrorString","err","name","message","_sendResponse","response","responseParams","requestId","exec","_sendError","error","call","respond","promise","done","result","fail","on","bind","createInterface","isAsync","execEvent","callObject","registerMethod","methodHandle","registerMethods","methodList","forEach","methodObj"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,SAASC,wBAAwBC,QAC7BC,KAAKD,OAASA,OACdC,KAAKC,WAAa,GAElBD,KAAKE,qBAGTJ,wBAAwBK,UAAUC,gBAAkB,SAAUC,IAAKC,QAC/D,IAAIC,WAAaD,OAAOE,OACpBC,KAAOT,KAEX,SAASU,gBAAgBC,KACrB,MAAmB,iBAARA,IACAA,IACAA,KAAOA,IAAIC,MAAqB,UAAbD,IAAIC,KACvBD,IAAIE,QAER,sBAAwBN,WAInC,SAASO,cAAcC,UACnB,IAAIC,eAAiB,CACjBC,UAAWX,OAAOW,UAClBX,OAAQS,UAEZN,KAAKV,OAAOmB,KAAK,WAAYF,gBAGjC,SAASG,WAAWR,KAChB,IAAIK,eAAiB,CACjBC,UAAWX,OAAOW,UAClBG,MAAOV,gBAAgBC,MAE3BF,KAAKV,OAAOmB,KAAK,WAAYF,gBAGjC,GAAIP,KAAKR,WAAWM,YAAa,CAC7B,IAAIC,OAASC,KAAKR,WAAWM,YAC7B,IACI,IAAIQ,SAAWP,OAAOa,KAAK,KAAMf,OAAOA,QACpCA,OAAOgB,SAAWhB,OAAOW,YACrBF,SAASQ,QACTR,SAASS,KAAK,SAAUC,QACpBX,cAAcW,UACfC,KAAK,SAAUf,KACdQ,WAAWR,OAGfG,cAAcC,WAGxB,MAAOJ,KACDL,OAAOgB,SAAWhB,OAAOW,WACzBE,WAAWR,QAQ3Bb,wBAAwBK,UAAUD,mBAAqB,WACnDF,KAAKD,OAAO4B,GAAG,OAAQ3B,KAAKI,gBAAgBwB,KAAK5B,QAGrDF,wBAAwBK,UAAU0B,gBAAkB,SAAUtB,WAAYuB,SACtE,IAAIrB,KAAOT,KACX,OAAO,SAAUM,QACb,IAAIyB,UAAYD,QAAU,YAAc,OACpCE,WAAa,CACbxB,OAAQD,WACRD,OAAQA,QAEZ,OAAOG,KAAKV,OAAOmB,KAAKa,UAAWC,cAI3ClC,wBAAwBK,UAAU8B,eAAiB,SAAU1B,WAAY2B,cACjE3B,YAAc2B,cACQ,iBAAf3B,YAAmD,mBAAjB2B,eACzClC,KAAKC,WAAWM,YAAc2B,eAItCpC,wBAAwBK,UAAUgC,gBAAkB,SAAUC,YAC1D,IAAI3B,KAAOT,KACXoC,WAAWC,QAAQ,SAAUC,WACzB7B,KAAKwB,eAAeK,UAAU/B,WAAY+B,UAAUJ,iBAI5DtC,QAAQE,wBAA0BA","sourcesContent":["/*\n * Copyright (c) 2019 - present Adobe. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*eslint no-invalid-this: 0*/\ndefine(function (require, exports, module) {\n\n\n    function BracketsToNodeInterface(domain) {\n        this.domain = domain;\n        this.bracketsFn = {};\n\n        this._registerDataEvent();\n    }\n\n    BracketsToNodeInterface.prototype._messageHandler = function (evt, params) {\n        var methodName = params.method,\n            self = this;\n\n        function _getErrorString(err) {\n            if (typeof err === \"string\") {\n                return err;\n            } else if (err && err.name && err.name === \"Error\") {\n                return err.message;\n            }\n            return \"Error in executing \" + methodName;\n\n        }\n\n        function _sendResponse(response) {\n            var responseParams = {\n                requestId: params.requestId,\n                params: response\n            };\n            self.domain.exec(\"response\", responseParams);\n        }\n\n        function _sendError(err) {\n            var responseParams = {\n                requestId: params.requestId,\n                error: _getErrorString(err)\n            };\n            self.domain.exec(\"response\", responseParams);\n        }\n\n        if (self.bracketsFn[methodName]) {\n            var method = self.bracketsFn[methodName];\n            try {\n                var response = method.call(null, params.params);\n                if (params.respond && params.requestId) {\n                    if (response.promise) {\n                        response.done(function (result) {\n                            _sendResponse(result);\n                        }).fail(function (err) {\n                            _sendError(err);\n                        });\n                    } else {\n                        _sendResponse(response);\n                    }\n                }\n            } catch (err) {\n                if (params.respond && params.requestId) {\n                    _sendError(err);\n                }\n            }\n        }\n\n    };\n\n\n    BracketsToNodeInterface.prototype._registerDataEvent = function () {\n        this.domain.on(\"data\", this._messageHandler.bind(this));\n    };\n\n    BracketsToNodeInterface.prototype.createInterface = function (methodName, isAsync) {\n        var self = this;\n        return function (params) {\n            var execEvent = isAsync ? \"asyncData\" : \"data\";\n            var callObject = {\n                method: methodName,\n                params: params\n            };\n            return self.domain.exec(execEvent, callObject);\n        };\n    };\n\n    BracketsToNodeInterface.prototype.registerMethod = function (methodName, methodHandle) {\n        if (methodName && methodHandle &&\n            typeof methodName === \"string\" && typeof methodHandle === \"function\") {\n            this.bracketsFn[methodName] = methodHandle;\n        }\n    };\n\n    BracketsToNodeInterface.prototype.registerMethods = function (methodList) {\n        var self = this;\n        methodList.forEach(function (methodObj) {\n            self.registerMethod(methodObj.methodName, methodObj.methodHandle);\n        });\n    };\n\n    exports.BracketsToNodeInterface = BracketsToNodeInterface;\n});\n"],"file":"BracketsToNodeInterface.js"}