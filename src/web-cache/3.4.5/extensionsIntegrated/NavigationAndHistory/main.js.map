{"version":3,"sources":["extensionsIntegrated/NavigationAndHistory/main.js"],"names":["define","require","exports","module","_","AppInit","Async","Strings","MainViewManager","DocumentManager","EditorManager","ProjectManager","CommandManager","Commands","Menus","FileSystem","FileUtils","ViewUtils","KeyEvent","WorkingSetView","PreferencesManager","KeyBindingManager","Mustache","NavigationProvider","FileRecovery","KeyboardPrefs","JSON","parse","PREFS_RECENT_FILES","SHOW_RECENT_FILES","NEXT_IN_RECENT_FILES","PREV_IN_RECENT_FILES","OPEN_FILES_VIEW_STATE","htmlTemplate","dirtyDotTemplate","MAX_ENTRY_COUNT","isRecentFilesNavEnabled","_mrofList","$mrofContainer","$currentContext","activeEditor","_hideMROFList","_openEditorForContext","contextData","activePaneId","getActivePaneId","targetPaneId","paneId","getPaneCount","hideOnOpenFile","execute","FILE_OPEN","fullPath","path","done","cursor","getActiveEditor","setCursorPos","centerOnCursor","_makeMROFListEntry","pane","cursorPos","file","_isOpenAndDirty","docIfOpen","getOpenDocumentForPath","isDirty","_checkExt","entry","index","deferred","$","Deferred","fileEntry","getFileForPath","indxInWS","inMem","findInWorkingSet","reject","resolve","exists","err","promise","_syncWithFileSystem","filter","e","doSequentially","_getFileListForEntries","entries","map","value","_addDirectoriesForDuplicateBaseNames","checked","baseName","getBaseName","push","forEach","length","dirs","getDirNamesForDuplicateFiles","find","each","$li","this","data","dirSplit","split","$dir","html","children","remove","append","_createFileEntries","$mrofList","$link","$newItem","isPaneLabelReqd","addClass","text","getPaneTitle","entryIndex","findIndex","record","name","isFile","getFileEntryDisplay","useIconProviders","attr","css","useClassProviders","prependTo","_createMROFList","paneList","getPaneIdList","mrofList","fileList","mrofEntry","paneCount","fileCount","getWorkingSet","findInGlobalMRUList","_handleArrowKeys","event","UP","DOWN","$context","$nextContext","which","prev","next","trigger","last","preventDefault","stopImmediatePropagation","_hideMROFListOnEscape","keyCode","DOM_VK_ESCAPE","_createMROFDisplayList","refresh","$def","_purgeAllExceptWorkingSet","empty","setViewState","STATE_PROJECT_CONTEXT","_onFocus","$scope","target","parent","removeClass","_onClick","delegateTarget","render","appendTo","one","on","window","always","$fileLinks","first","_openFile","_hideMROFListOnNavigationEnd","DOM_VK_CONTROL","_moveNext","$next","_cmdMoveNext","$displayPromise","_movePrev","$prev","_cmdMovePrev","_updateCursorPosition","filePath","_addToMROFList","constructor","splice","unshift","_handleWorkingSetMove","sourcePaneId","destinationPaneId","tIndex","_handleAppClose","_initRecentFilesList","getViewState","getWorkingSetSize","ALL_PANES","_handleProjectOpen","_showRecentFileList","_handlePaneMerge","FIRST_PANE","itrIndex","_initRecentFileMenusAndCommands","menu","get","register","CMD_RECENT_FILES_OPEN","addBinding","CMD_NEXT_DOC","CMD_PREV_DOC","getMenu","AppMenuBar","FILE_MENU","addMenuItem","AFTER","FILE_OPEN_FOLDER","_initDefaultNavigationCommands","NAVIGATE_NEXT_DOC","NAVIGATE_PREV_DOC","_removeKeys","keys","config","removeBinding","key","_removeNavigationKeys","_deregisterSortcutsAndMenus","removeMenuItem","handleCurrentFileChange","newFile","newPaneId","oldFile","_handleActiveEditorChange","current","previous","document","_paneId","getCursorPos","_attachListners","_detachListners","off","definePreference","description","DESCRIPTION_RECENT_FILES_NAV","focus","appReady","init"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2016 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var _                       = require(\"thirdparty/lodash\"),\n        AppInit                 = require(\"utils/AppInit\"),\n        Async                   = require(\"utils/Async\"),\n        Strings                 = require(\"strings\"),\n        MainViewManager         = require(\"view/MainViewManager\"),\n        DocumentManager         = require(\"document/DocumentManager\"),\n        EditorManager           = require(\"editor/EditorManager\"),\n        ProjectManager          = require(\"project/ProjectManager\"),\n        CommandManager          = require(\"command/CommandManager\"),\n        Commands                = require(\"command/Commands\"),\n        Menus                   = require(\"command/Menus\"),\n        FileSystem              = require(\"filesystem/FileSystem\"),\n        FileUtils               = require(\"file/FileUtils\"),\n        ViewUtils               = require(\"utils/ViewUtils\"),\n        KeyEvent                = require(\"utils/KeyEvent\"),\n        WorkingSetView          = require(\"project/WorkingSetView\"),\n        PreferencesManager      = require(\"preferences/PreferencesManager\"),\n        KeyBindingManager       = require(\"command/KeyBindingManager\"),\n        Mustache                = require(\"thirdparty/mustache/mustache\"),\n        NavigationProvider      = require(\"./NavigationProvider\"),\n        FileRecovery      = require(\"./FileRecovery\");\n\n    var KeyboardPrefs = JSON.parse(require(\"text!./keyboard.json\"));\n\n    // Command constants for recent files\n    var PREFS_RECENT_FILES      = \"recent-files.navigation\",\n        SHOW_RECENT_FILES       = \"recent-files.show\",\n        NEXT_IN_RECENT_FILES    = \"recent-files.next\",\n        PREV_IN_RECENT_FILES    = \"recent-files.prev\",\n        OPEN_FILES_VIEW_STATE   = \"openFiles\";\n\n    var htmlTemplate = require(\"text!./html/recentfiles-template.html\"),\n        dirtyDotTemplate = \"<div class='file-status-icon dirty' style='position: absolute;margin-left: -2px;'></div>\";\n\n    var MAX_ENTRY_COUNT    = 50;\n\n    var isRecentFilesNavEnabled = true;\n\n    /*\n    * Contains list of most recently opened files and their last known cursor position\n    * @private\n    * @type {Array.<Object>}\n    */\n    var _mrofList = [],\n        $mrofContainer = null;\n\n\n    var $currentContext,\n        activeEditor;\n\n    var _hideMROFList;\n\n    PreferencesManager.definePreference(PREFS_RECENT_FILES, \"boolean\", true, {\n        description: Strings.DESCRIPTION_RECENT_FILES_NAV\n    });\n\n    /**\n     * Opens a full editor for the given context\n     * @private\n     * @param {Object.<path, paneId, cursor>} contextData - wrapper to provide the information required to open a full editor\n     * @return {$.Promise} - from the commandmanager\n     */\n    function _openEditorForContext(contextData) {\n        // Open the file in the current active pane to prevent unwanted scenarios if we are not in split view, fallback\n        // to the persisted paneId when specified and we are in split view or unable to determine the paneid\n        var activePaneId = MainViewManager.getActivePaneId(),\n            targetPaneId = contextData.paneId; // Assume we are going to use the last associated paneID\n\n        // Detect if we are not in split mode\n        if (MainViewManager.getPaneCount() === 1) {\n            // Override the targetPaneId with activePaneId as we are not yet in split mode\n            targetPaneId = activePaneId;\n        }\n\n        // If hide of MROF list is a context parameter, hide the MROF list on successful file open\n        if (contextData.hideOnOpenFile) {\n            _hideMROFList();\n        }\n\n        return CommandManager\n            .execute(Commands.FILE_OPEN,\n            {   fullPath: contextData.path,\n                paneId: targetPaneId\n            }\n                )\n            .done(function () {\n                if (contextData.cursor) {\n                    activeEditor = EditorManager.getActiveEditor();\n                    activeEditor.setCursorPos(contextData.cursor);\n                    activeEditor.centerOnCursor();\n                }\n            });\n    }\n\n    /**\n     * Creates an entry for MROF list\n     * @private\n     * @param {String} path - full path of a doc\n     * @param {String} pane - the pane holding the editor for the doc\n     * @param {Object} cursorPos - current cursor position\n     * @return {Object} a frame containing file path, pane and last known cursor\n     */\n    function _makeMROFListEntry(path, pane, cursorPos) {\n        return {\n            file: path,\n            paneId: pane,\n            cursor: cursorPos\n        };\n    }\n\n    /**\n     * Determines if a file is dirty\n     * @private\n     * @param {!File} file - file to test\n     * @return {boolean} true if the file is dirty, false otherwise\n     */\n    function _isOpenAndDirty(file) {\n        // working set item might never have been opened; if so, then it's definitely not dirty\n        var docIfOpen = DocumentManager.getOpenDocumentForPath(file.fullPath);\n        return (docIfOpen && docIfOpen.isDirty);\n    }\n\n    function _checkExt(entry, index) {\n        var deferred = new $.Deferred(),\n            fileEntry = FileSystem.getFileForPath(entry.file);\n\n        if (entry.inMem) {\n            var indxInWS = MainViewManager.findInWorkingSet(entry.paneId, entry.file);\n            // Remove entry if InMemoryFile is not found in Working set\n            if (indxInWS === -1) {\n                _mrofList[index] = null;\n                deferred.reject();\n            } else {\n                deferred.resolve();\n            }\n        } else {\n            fileEntry.exists(function (err, exists) {\n                if (!err && exists) {\n                    deferred.resolve();\n                } else {\n                    _mrofList[index] = null;\n                    deferred.reject();\n                }\n\t\t    });\n\t    }\n\n        return deferred.promise();\n    }\n\n    /**\n     * Checks whether entries in MROF list actually exists in fileSystem to prevent access to deleted files\n     * @private\n     */\n    function _syncWithFileSystem() {\n        _mrofList = _mrofList.filter(function (e) { return e; });\n        return Async.doSequentially(_mrofList, _checkExt, false);\n    }\n\n    function _getFileListForEntries(entries) {\n        return $.map(entries, function (value, index) {\n            return FileSystem.getFileForPath(value.file);\n        });\n    }\n\n    function _addDirectoriesForDuplicateBaseNames() {\n        var checked = {}, baseName;\n        // Find duplicates first\n        $.map(_mrofList, function (value, index) {\n            baseName = FileUtils.getBaseName(value.file);\n            if (!checked[baseName]) {\n                checked[baseName] = [];\n            }\n            checked[baseName].push(value);\n        });\n\n        // Go through the map and solve the arrays with length over 1. Ignore the rest.\n        _.forEach(checked, function (value) {\n            if (value.length > 1) {\n                var dirs = ViewUtils.getDirNamesForDuplicateFiles(_getFileListForEntries(value));\n                $.map(value, function (value, index) {\n                    // Go through recent files and add directories to appropriate entries\n                    $mrofContainer.find(\"#mrof-list > li\").each(function () {\n                        var $li = $(this);\n                        if ($li.data(\"path\") === value.file) {\n                            var dirSplit = dirs[index].split(\"/\");\n                            if (dirSplit.length > 3) {\n                                dirs[index] = dirSplit[0] + \"/\\u2026/\" + dirSplit[dirSplit.length - 1];\n                            }\n                            var $dir = $(\"<span class='directory'/>\").html(\" &mdash; \" + dirs[index]);\n                            $li.children(\"a.mroitem\").find(\"span.directory\").remove();\n                            $li.children(\"a.mroitem\").append($dir);\n                        }\n                    });\n                });\n            }\n        });\n    }\n\n    function _createFileEntries($mrofList) {\n        var data, fileEntry, $link, $newItem;\n        // Iterate over the MROF list and create the pop over UI items\n\n        // If we are in split view we might want to show the panes corresponding to the entries\n        var isPaneLabelReqd = MainViewManager.getPaneCount() > 1;\n\n        if (isPaneLabelReqd) {\n            $mrofContainer.addClass(\"split-mode\");\n            $(\".first.pane-label\", $mrofContainer).text(MainViewManager.getPaneTitle(\"first-pane\"));\n            $(\".second.pane-label\", $mrofContainer).text(MainViewManager.getPaneTitle(\"second-pane\"));\n        }\n\n        $.each(_mrofList, function (index, value) {\n\n            if (!isPaneLabelReqd && value.paneId !== MainViewManager.getActivePaneId()) {\n                // Try to see if we have same doc split\n                // Check existing list for this doc path and active pane entry\n                var entryIndex = _.findIndex(_mrofList, function (record) {\n                    return (record && record.file === value.file && record.paneId === MainViewManager.getActivePaneId());\n                });\n\n                // If found don't process this entry, as the document is already present in active pane\n                if (entryIndex >= 0) {\n                    return true;\n                }\n                    // Process this for active pane id\n                value.paneId = MainViewManager.getActivePaneId();\n\n            }\n\n            var indxInWS = MainViewManager.findInWorkingSet(value.paneId, value.file);\n\n            data = {fullPath: value.file,\n                name: FileUtils.getBaseName(value.file),\n                isFile: true};\n\n            fileEntry = FileSystem.getFileForPath(value.file);\n\n            // Create new list item with a link\n            $link = $(\"<a href='#' class='mroitem'></a>\").html(ViewUtils.getFileEntryDisplay({name: FileUtils.getBaseName(value.file)}));\n\n            // Use the file icon providers\n            WorkingSetView.useIconProviders(data, $link);\n\n            $newItem = $(\"<li></li>\").append($link);\n\n            if (indxInWS !== -1) { // in working set show differently\n                $newItem.addClass(\"working-set\");\n            }\n\n            $newItem.data(\"path\", value.file);\n            $newItem.data(\"paneId\", value.paneId);\n            $newItem.data(\"cursor\", value.cursor);\n            $newItem.data(\"file\", fileEntry);\n            $newItem.attr(\"title\", value.file);\n\n            if (isPaneLabelReqd && value.paneId) {\n                $newItem.addClass(value.paneId);\n                $newItem.css('top', ($('.' + value.paneId, $mrofList).length * 22) + 'px');\n            }\n\n            // Use the class providers(git e.t.c)\n            WorkingSetView.useClassProviders(data, $newItem);\n\n            // If a file is dirty , mark it in the list\n            if (_isOpenAndDirty(fileEntry)) {\n                $(dirtyDotTemplate).prependTo($newItem);\n            }\n\n            $mrofList.append($newItem);\n\n            if (index === MAX_ENTRY_COUNT - 1) {\n                // We have reached the max number of entries we can display, break out\n                return false;\n            }\n        });\n        _addDirectoriesForDuplicateBaseNames();\n    }\n\n    /**\n     * This function is used to create mrof when a project is opened for the firt time with the recent files feature\n     * This routine acts as a logic to migrate existing viewlist to mrof structure\n     * @private\n     */\n    function _createMROFList() {\n\n        var paneList = MainViewManager.getPaneIdList(),\n            mrofList = [],\n            fileList,\n            index;\n\n        var pane, file, mrofEntry, paneCount, fileCount;\n        // Iterate over the pane ID list\n        for (paneCount = 0; paneCount < paneList.length; paneCount++) {\n            pane = paneList[paneCount];\n            fileList = MainViewManager.getWorkingSet(pane);\n            // Iterate over the file list for this pane\n            for (fileCount = 0; fileCount < fileList.length; fileCount++) {\n                file = fileList[fileCount];\n                mrofEntry = _makeMROFListEntry(file.fullPath, pane, null);\n                // Add it in the MRU list order\n                index = MainViewManager.findInGlobalMRUList(pane, file);\n                mrofList[index] = mrofEntry;\n            }\n        }\n\n        return mrofList;\n    }\n\n    function _handleArrowKeys(event) {\n        var UP = 38,\n            DOWN = 40;\n\n        var $context, $nextContext;\n        if ($mrofContainer && (event.which === UP || event.which === DOWN)) {\n            $context = $currentContext || $(\"#mrof-container #mrof-list > li.highlight\");\n            if ($context.length > 0) {\n                $nextContext = event.which === UP ? $context.prev() : $context.next();\n                if ($nextContext.length > 0) {\n                    $currentContext = $nextContext;\n                    //_resetOpenFileTimer();\n                    $nextContext.find(\"a.mroitem\").trigger(\"focus\");\n                }\n            } else {\n                //WTF! (Worse than failure). We should not get here.\n                $(\"#mrof-container #mrof-list > li > a.mroitem:visited\").last().trigger(\"focus\");\n            }\n            // If we don't prevent this then scrolling happens by the browser(user agent behaviour)\n            // as well as a result of moving focus in the ul\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n\n    function _hideMROFListOnEscape(event) {\n        if ($mrofContainer && event.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n            _hideMROFList();\n        }\n    }\n\n    /**\n     * Shows the current MROF list\n     * @private\n     */\n    function _createMROFDisplayList(refresh) {\n        var $def = $.Deferred();\n\n        var $mrofList, $link, $newItem;\n\n        /**\n         * Clears the MROF list in memory and pop over but retains the working set entries\n         * @private\n         */\n        function _purgeAllExceptWorkingSet() {\n            _mrofList = _createMROFList();\n            $mrofList.empty();\n            _createMROFDisplayList(true);\n            $currentContext = null;\n            PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, PreferencesManager.STATE_PROJECT_CONTEXT);\n        }\n\n        if (!refresh) {\n            // Call hide first to make sure we are not creating duplicate lists\n            _hideMROFList();\n            $mrofContainer = $(Mustache.render(htmlTemplate, {Strings: Strings})).appendTo('body');\n            $(\"#mrof-list-close\").one(\"click\", _hideMROFList);\n            // Attach clear list handler to the 'Clear All' button\n            $(\"#mrof-container .footer > div#clear-mrof-list\").on(\"click\", _purgeAllExceptWorkingSet);\n            $(window).on(\"keydown\", _handleArrowKeys);\n            $(window).on(\"keyup\", _hideMROFListOnEscape);\n        }\n\n        $mrofList = $mrofContainer.find(\"#mrof-list\");\n\n        /**\n         * Focus handler for the link in list item\n         * @private\n         */\n        function _onFocus(event) {\n            var $scope = $(event.target).parent();\n            $(\"#mrof-container #mrof-list > li.highlight\").removeClass(\"highlight\");\n            $(event.target).parent().addClass(\"highlight\");\n            $mrofContainer.find(\"#recent-file-path\").text($scope.data(\"path\"));\n            $mrofContainer.find(\"#recent-file-path\").attr('title', ($scope.data(\"path\")));\n            $currentContext = $scope;\n        }\n\n        /**\n         * Click handler for the link in list item\n         * @private\n         */\n        function _onClick(event) {\n            var $scope = $(event.delegateTarget).parent();\n            _openEditorForContext({\n                path: $scope.data(\"path\"),\n                paneId: $scope.data(\"paneId\"),\n                cursor: $scope.data(\"cursor\"),\n                hideOnOpenFile: true\n            });\n        }\n\n        var data, fileEntry;\n\n        _syncWithFileSystem().always(function () {\n            _mrofList = _mrofList.filter(function (e) { return e; });\n            _createFileEntries($mrofList);\n            var $fileLinks = $(\"#mrof-container #mrof-list > li > a.mroitem\");\n            // Handlers for mouse events on the list items\n            $fileLinks.on(\"focus\", _onFocus);\n            $fileLinks.on(\"click\", _onClick);\n            $fileLinks.on(\"select\", _onClick);\n\n            // Put focus on the Most recent file link in the list\n            $fileLinks.first().trigger(\"focus\");\n\n            $def.resolve();\n        });\n\n        return $def.promise();\n    }\n\n    function _openFile() {\n        if ($currentContext) {\n            _openEditorForContext({\n                path: $currentContext.data(\"path\"),\n                paneId: $currentContext.data(\"paneId\"),\n                cursor: $currentContext.data(\"cursor\")\n            });\n        }\n    }\n\n    function _hideMROFListOnNavigationEnd(event) {\n        if ($mrofContainer && event.keyCode === KeyEvent.DOM_VK_CONTROL) {\n            _openFile();\n            _hideMROFList();\n        }\n    }\n\n\n    /**\n     * Opens the next item in MROF list if pop over is visible else displays the pop over\n     * @private\n     */\n    function _moveNext() {\n        var $context, $next;\n\n        $context = $currentContext || $(\"#mrof-container #mrof-list > li.highlight\");\n        if ($context.length > 0) {\n            $next = $context.next();\n            if ($next.length === 0) {\n                $next = $(\"#mrof-container #mrof-list > li\").first();\n            }\n            if ($next.length > 0) {\n                $currentContext = $next;\n                $next.find(\"a.mroitem\").trigger(\"focus\");\n            }\n        } else {\n            //WTF! (Worse than failure). We should not get here.\n            $(\"#mrof-container #mrof-list > li > a.mroitem:visited\").last().trigger(\"focus\");\n        }\n    }\n\n    function _cmdMoveNext() {\n        var $displayPromise;\n        if (!$mrofContainer) {\n            $displayPromise = _createMROFDisplayList();\n            $mrofContainer.addClass(\"confirmation-mode\");\n            $(window).on(\"keyup\", _hideMROFListOnNavigationEnd);\n        }\n\n        if ($displayPromise) {\n            $displayPromise.always(function () {\n                _moveNext();\n            });\n        } else {\n            _moveNext();\n        }\n    }\n\n    /**\n     * Opens the previous item in MROF list if pop over is visible else displays the pop over\n     * @private\n     */\n    function _movePrev() {\n        var $context, $prev;\n\n        $context = $currentContext || $(\"#mrof-container #mrof-list > li.highlight\");\n        if ($context.length > 0) {\n            $prev = $context.prev();\n            if ($prev.length === 0) {\n                $prev = $(\"#mrof-container #mrof-list > li\").last();\n            }\n            if ($prev.length > 0) {\n                $currentContext = $prev;\n                $prev.find(\"a.mroitem\").trigger(\"focus\");\n            }\n        } else {\n            //WTF! (Worse than failure). We should not get here.\n            $(\"#mrof-container #mrof-list > li > a.mroitem:visited\").last().trigger(\"focus\");\n        }\n    }\n\n    function _cmdMovePrev() {\n        var $displayPromise;\n        if (!$mrofContainer) {\n            $displayPromise = _createMROFDisplayList();\n            $mrofContainer.addClass(\"confirmation-mode\");\n            $(window).on(\"keyup\", _hideMROFListOnNavigationEnd);\n        }\n\n        if ($displayPromise) {\n            $displayPromise.always(function () {\n                _movePrev();\n            });\n        } else {\n            _movePrev();\n        }\n    }\n\n    function _updateCursorPosition(filePath, paneId, cursorPos) {\n        if (!paneId) { // Don't handle this if not a full view/editor\n            return;\n        }\n\n        // Check existing list for this doc path and pane entry\n        var index = _.findIndex(_mrofList, function (record) {\n            return (record && record.file === filePath && record.paneId === paneId);\n        });\n\n        var entry;\n\n        if (index !== -1) {\n            _mrofList[index].cursor = cursorPos;\n        }\n\n        PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, PreferencesManager.STATE_PROJECT_CONTEXT);\n    }\n\n    /**\n     * Adds an entry to MROF list\n     * @private\n     * @param {Editor} editor - editor to extract file information\n     */\n    function _addToMROFList(file, paneId, cursorPos) {\n\n        var filePath = file.fullPath;\n\n        if (!paneId) { // Don't handle this if not a full view/editor\n            return;\n        }\n\n\n        // Check existing list for this doc path and pane entry\n        var index = _.findIndex(_mrofList, function (record) {\n            return (record && record.file === filePath && record.paneId === paneId);\n        });\n\n        var entry;\n        if (index !== -1) {\n            entry = _mrofList[index];\n            if (entry.cursor && !cursorPos) {\n                cursorPos = entry.cursor;\n            }\n        }\n\n        entry = _makeMROFListEntry(filePath, paneId, cursorPos);\n\n        // Check if the file is an InMemoryFile\n        if (file.constructor.name === \"InMemoryFile\") {\n            // Mark the entry as inMem, so that we can knock it off from the list when removed from working set\n            entry.inMem = true;\n        }\n\n\n        if (index !== -1) {\n            _mrofList.splice(index, 1);\n        }\n\n        // add it to the front of the list\n        _mrofList.unshift(entry);\n\n        PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, PreferencesManager.STATE_PROJECT_CONTEXT);\n    }\n\n    // To update existing entry if a move has happened\n    function _handleWorkingSetMove(event, file, sourcePaneId, destinationPaneId) {\n        // Check existing list for this doc path and source pane entry\n        var index = _.findIndex(_mrofList, function (record) {\n                return (record && record.file === file.fullPath && record.paneId === sourcePaneId);\n            }), tIndex;\n        // If an entry is found update the pane info\n        if (index >= 0) {\n            // But an entry with the target pane Id should not exist\n            tIndex = _.findIndex(_mrofList, function (record) {\n                return (record && record.file === file.fullPath && record.paneId === destinationPaneId);\n            });\n            if (tIndex === -1) {\n                _mrofList[index].paneId = destinationPaneId;\n            } else {\n                // Remove this entry as it has been moved.\n                _mrofList.splice(index, 1);\n            }\n        }\n    }\n\n    // Handle project close or app close to set view state\n    function _handleAppClose() {\n        PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, PreferencesManager.STATE_PROJECT_CONTEXT);\n        _mrofList = [];\n    }\n\n    function _initRecentFilesList() {\n        _mrofList = PreferencesManager.getViewState(OPEN_FILES_VIEW_STATE, PreferencesManager.STATE_PROJECT_CONTEXT) || [];\n\n        _mrofList = _mrofList.filter(function (entry) {\n            return entry;\n        });\n        // Have a check on the number of entries to fallback to working set if we detect corruption\n        if (_mrofList.length < MainViewManager.getWorkingSetSize(MainViewManager.ALL_PANES)) {\n            _mrofList = _createMROFList();\n        }\n    }\n\n    function _handleProjectOpen() {\n        _mrofList = [];\n        // We will do a late initialization once we get the first editor change or file open notification\n    }\n\n    ProjectManager.on(\"projectOpen\", _handleProjectOpen);\n\n\n    function _showRecentFileList() {\n        if (isRecentFilesNavEnabled) {\n            _createMROFDisplayList();\n        }\n    }\n\n    /**\n     * Hides the current MROF list if visible\n     * @private\n     */\n    _hideMROFList = function () {\n\n        if ($mrofContainer) {\n            $mrofContainer.remove();\n            $mrofContainer = null;\n            $currentContext = null;\n            activeEditor = EditorManager.getActiveEditor();\n            if (activeEditor) {\n                activeEditor.focus();\n            }\n        }\n\n        $(window).off(\"keydown\", _handleArrowKeys);\n        $(window).off(\"keyup\", _hideMROFListOnNavigationEnd);\n        $(window).off(\"keyup\", _hideMROFListOnEscape);\n    };\n\n    // To take care of hiding the popover during app navigation in os using key board shortcuts\n    $(window).on(\"blur focus\", function () {\n        _hideMROFList();\n    });\n\n    // Merges the entries to a single pane if split view have been merged\n    // Then purges duplicate entries in mrof list\n    function _handlePaneMerge(e, paneId) {\n        var index;\n        var targetPaneId = MainViewManager.FIRST_PANE;\n\n        $.each(_mrofList, function (itrIndex, value) {\n            if (value && value.paneId === paneId) { // We have got an entry which needs merge\n                // Before modifying the actual pane info check if an entry exists with same target pane\n                index = _.findIndex(_mrofList, function (record) {\n                    return (record && record.file === value.file && record.paneId === targetPaneId);\n                });\n                if (index !== -1) { // A duplicate entry found, remove the current one instead of updating\n                    _mrofList[index] = null;\n                } else { // Update with merged pane info\n                    _mrofList[itrIndex].paneId = targetPaneId;\n                }\n            }\n        });\n\n        // Clean the null/undefined entries\n        _mrofList = _mrofList.filter(function (e) { return e; });\n\n        PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, PreferencesManager.STATE_PROJECT_CONTEXT);\n    }\n\n    function _initRecentFileMenusAndCommands() {\n        // Command to show recent files list\n\n        if (!CommandManager.get(SHOW_RECENT_FILES)) {\n            CommandManager.register(Strings.CMD_RECENT_FILES_OPEN, SHOW_RECENT_FILES, _showRecentFileList);\n            KeyBindingManager.addBinding(SHOW_RECENT_FILES, KeyboardPrefs[SHOW_RECENT_FILES]);\n        }\n\n        // Keyboard only - Navigate to the next doc in MROF list\n        if (!CommandManager.get(NEXT_IN_RECENT_FILES)) {\n            CommandManager.register(Strings.CMD_NEXT_DOC, NEXT_IN_RECENT_FILES, _cmdMoveNext);\n        }\n        KeyBindingManager.addBinding(NEXT_IN_RECENT_FILES, KeyboardPrefs[NEXT_IN_RECENT_FILES]);\n\n        // Keyboard only - Navigate to the prev doc in MROF list\n        if (!CommandManager.get(PREV_IN_RECENT_FILES)) {\n            CommandManager.register(Strings.CMD_PREV_DOC, PREV_IN_RECENT_FILES, _cmdMovePrev);\n        }\n        KeyBindingManager.addBinding(PREV_IN_RECENT_FILES, KeyboardPrefs[PREV_IN_RECENT_FILES]);\n\n        var menu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        menu.addMenuItem(SHOW_RECENT_FILES, \"\", Menus.AFTER, Commands.FILE_OPEN_FOLDER);\n    }\n\n    function _initDefaultNavigationCommands() {\n        KeyBindingManager.addBinding(Commands.NAVIGATE_NEXT_DOC, KeyboardPrefs[NEXT_IN_RECENT_FILES]);\n        KeyBindingManager.addBinding(Commands.NAVIGATE_PREV_DOC, KeyboardPrefs[PREV_IN_RECENT_FILES]);\n    }\n\n    function _removeKeys(keys) {\n        _.forEach(keys, function (config) {\n            KeyBindingManager.removeBinding(config.key);\n        });\n    }\n\n    function _removeNavigationKeys() {\n        _removeKeys(KeyboardPrefs[NEXT_IN_RECENT_FILES]);\n        _removeKeys(KeyboardPrefs[PREV_IN_RECENT_FILES]);\n    }\n\n    function _deregisterSortcutsAndMenus() {\n        _removeNavigationKeys();\n        Menus.getMenu(Menus.AppMenuBar.FILE_MENU).removeMenuItem(SHOW_RECENT_FILES);\n    }\n\n    // Handle current file change\n    function handleCurrentFileChange(e, newFile, newPaneId, oldFile) {\n        if (newFile) {\n            if (_mrofList.length === 0) {\n                _initRecentFilesList();\n            }\n\n\t        _addToMROFList(newFile, newPaneId);\n        }\n    }\n\n    // Handle Active Editor change to update mrof information\n    function _handleActiveEditorChange(event, current, previous) {\n        if (current) { // Handle only full editors\n            if (_mrofList.length === 0) {\n                _initRecentFilesList();\n            }\n\n            var file = current.document.file;\n            var paneId = current._paneId;\n            _addToMROFList(file, paneId, current.getCursorPos(true, \"first\"));\n        }\n\n        if (previous) { // Capture the last know cursor position\n            _updateCursorPosition(previous.document.file.fullPath, previous._paneId, previous.getCursorPos(true, \"first\"));\n        }\n    }\n\n    function _attachListners() {\n        MainViewManager.on(\"workingSetMove.pane-first-pane\", _handleWorkingSetMove);\n        MainViewManager.on(\"currentFileChange\", handleCurrentFileChange);\n        MainViewManager.on(\"paneDestroy\", _handlePaneMerge);\n        EditorManager.on(\"activeEditorChange\", _handleActiveEditorChange);\n        ProjectManager.on(\"beforeProjectClose beforeAppClose\", _handleAppClose);\n    }\n\n    function _detachListners() {\n        MainViewManager.off(\"workingSetMove.pane-first-pane\", _handleWorkingSetMove);\n        MainViewManager.off(\"currentFileChange\", handleCurrentFileChange);\n        MainViewManager.off(\"paneDestroy\", _handlePaneMerge);\n        EditorManager.off(\"activeEditorChange\", _handleActiveEditorChange);\n        ProjectManager.off(\"beforeProjectClose beforeAppClose\", _handleAppClose);\n    }\n\n    PreferencesManager.on(\"change\", PREFS_RECENT_FILES, function () {\n        if (PreferencesManager.get(PREFS_RECENT_FILES)) {\n            _removeNavigationKeys();\n            _initRecentFileMenusAndCommands();\n            _mrofList = [];\n            _initRecentFilesList();\n            PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, PreferencesManager.STATE_PROJECT_CONTEXT);\n            _detachListners();\n            _attachListners();\n            isRecentFilesNavEnabled = true;\n        } else {\n            // Reset the view state to empty\n            _mrofList = [];\n            PreferencesManager.setViewState(OPEN_FILES_VIEW_STATE, _mrofList, PreferencesManager.STATE_PROJECT_CONTEXT);\n            _deregisterSortcutsAndMenus();\n            _initDefaultNavigationCommands();\n            _detachListners();\n            isRecentFilesNavEnabled = false;\n        }\n    });\n\n    AppInit.appReady(function () {\n        FileRecovery.init();\n        NavigationProvider.init();\n    });\n});\n"],"file":"main.js"}