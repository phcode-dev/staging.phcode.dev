{"version":3,"sources":["extensions/default/QuickView/numberPreviewProvider.js"],"names":["define","require","exports","module","PreferencesManager","brackets","getModule","Strings","AppInit","QuickView","Metrics","colorGradientProvider","PREF_ENABLED_KEY","prefs","getExtensionPrefs","enabled","definePreference","description","DESCRIPTION_NUMBER_QUICK_VIEW","lastOriginId","_splitNumber","numStr","split","match","number","decimalPlaces","roundTo","length","units","getQuickView","editor","pos","token","line","Promise","resolve","reject","type","sPos","ch","start","ePos","end","editOrigin","$content","$","string","changedMetricSent","find","knob","stopper","step","max","width","height","fgColor","fontSize","format","value","Math","round","getValue","userInput","changedSplit","change","document","batchOperation","setSelection","replaceStr","replaceRange","countEvent","EVENT_TYPE","QUICK_VIEW","changeStart","lockQuickView","changeEnd","unlockQuickView","content","exclusive","editsDoc","filterQuickView","popovers","numberQuickView","colorQuickView","popover","providerInfo","provider","QUICK_VIEW_NAME","on","get","appReady","registerQuickViewProvider"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,mBAAsBC,SAASC,UAAU,kCACzCC,QAAsBF,SAASC,UAAU,WACzCE,QAAsBH,SAASC,UAAU,iBACzCG,UAAsBJ,SAASC,UAAU,6BACzCI,QAAsBL,SAASC,UAAU,iBACzCK,sBAAwBV,QAAQ,2BAEpC,MAAMW,iBAAmB,eAEzB,IAAIC,MAAQT,mBAAmBU,kBAAkB,aAK7CC,QAJJF,MAAMG,iBAHmB,eAGgB,WAAW,EAAM,CACtDC,YAAaV,QAAQW,gCAIzB,IAAIC,aAAe,EAEnB,SAASC,aAAaC,QAElB,IAAIC,MAAQD,OAAOE,MAAM,wBACrBC,OAASF,MAAM,GAAKA,MAAM,IAAM,GAChCG,cAAgBD,OAAOF,MAAM,KAAK,GAElCI,QACJ,OAFAD,cAAgBA,eAAiBA,cAAcE,QAAU,GAGzD,KAAK,EAAGD,QAAU,EAAG,MACrB,KAAK,EAAGA,QAAU,GAAI,MACtB,KAAK,EACL,QAASA,QAAU,IAEnB,MAAO,CACHF,OAAAA,OACAI,MAAON,MAAM,IAAM,GACnBG,cAAAA,cACAC,QAAAA,SAIR,SAASG,aAAaC,OAAQC,IAAKC,MAAOC,MAEtC,OAAO,IAAIC,QAAQ,CAACC,QAASC,UACzB,GAAkB,WAAfJ,MAAMK,OAAsBtB,QAE3B,YADAqB,SAGJ,IAAIE,KAAO,CAACL,KAAMF,IAAIE,KAAMM,GAAIP,MAAMQ,OAClCC,KAAO,CAACR,KAAMF,IAAIE,KAAMM,GAAIP,MAAMU,KAClCC,WAAa,oBAAuBxB,eACpCyB,SAAWC,oCAAoCb,MAAMc,8BACrDxB,MAAQF,aAAaY,MAAMc,QAC3BC,mBAAoB,EACxBH,SAASI,KAAK,SAASC,KAAK,CACxBC,SAAS,EACTC,KAAM,EAAE7B,MAAMI,QACd0B,IAAK,IAAI9B,MAAMI,QACf2B,MAAO,IACPC,OAAQ,IACRC,QAAS,UACTC,SAAU,MACVC,OAAQ,SAASC,OACb,OAAOC,KAAKC,MAAMF,MAAMpC,MAAMI,SAASJ,MAAMI,QAAUJ,MAAMM,OAEjEiC,SAAU,SAASC,WACf,IAAIC,aAAe3C,aAAa0C,WAEhC,OADAxC,MAAMM,MAAQmC,aAAanC,MACpBmC,aAAavC,QAExBwC,OAAQ,SAAUN,OACd5B,OAAOmC,SAASC,eAAe,WAE3BpC,OAAOqC,aAAa7B,KAAMG,MAC1B,IAAI2B,WAAaT,KAAKC,MAAMF,MAAMpC,MAAMI,SAASJ,MAAMI,QAAUJ,MAAMM,MACvEE,OAAOuC,aAAaD,WAAY9B,KAAMG,KAAME,YAC5CF,KAAO,CAACR,KAAMK,KAAKL,KAAMM,GAAID,KAAKC,GAAK6B,WAAWzC,QAClDG,OAAOqC,aAAa7B,KAAMG,QAE1BM,oBACArC,QAAQ4D,WAAW5D,QAAQ6D,WAAWC,WAAY,MAAO,WACzDzB,mBAAoB,IAG5B0B,YAAa,WACThE,UAAUiE,iBAEdC,UAAW,WACPlE,UAAUmE,qBAGlBzC,QAAQ,CACJK,MAAOF,KACPI,IAAKD,KACLoC,QAASjC,SACTkC,WAAW,EACXC,UAAU,IAEdrE,QAAQ4D,WAAW5D,QAAQ6D,WAAWC,WAAY,MAAO,UAIjE,SAASQ,gBAAgBC,UAErB,IAAIC,gBAAiBC,eACrB,IAAI,IAAIC,WAAWH,SACZG,QAAQC,aAAaC,SAASC,kBAAoBrF,QAAQqF,gBACzDL,gBAAkBE,QACZA,QAAQC,aAAaC,SAASC,kBAAoB5E,sBAAsB4E,kBAC9EJ,eAAiBC,SAGzB,OAAGD,eACQ,CAACA,gBAGL,CAACD,kBAAoBD,SAGhCpE,MAAM2E,GAAG,SA7GgB,eA6GY,WACjCzE,QAAUF,MAAM4E,IA9GK,kBAiHzBjF,QAAQkF,SAAS,WACb3E,QAAUF,MAAM4E,IAlHK,gBAmHrBhF,UAAUkF,0BAA0BzF,QAAS,CAAC,MAAO,WAGzDA,QAAQ2B,aAAeA,aACvB3B,QAAQ8E,gBAAkBA,gBAC1B9E,QAAQqF,gBAAkB","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n    // Brackets modules\n    let PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        Strings             = brackets.getModule(\"strings\"),\n        AppInit             = brackets.getModule(\"utils/AppInit\"),\n        QuickView           = brackets.getModule(\"features/QuickViewManager\"),\n        Metrics             = brackets.getModule(\"utils/Metrics\"),\n        colorGradientProvider = require(\"./colorGradientProvider\");\n\n    const PREF_ENABLED_KEY = \"numberEditor\";\n\n    let prefs = PreferencesManager.getExtensionPrefs(\"quickview\");\n    prefs.definePreference(PREF_ENABLED_KEY, \"boolean\", true, {\n        description: Strings.DESCRIPTION_NUMBER_QUICK_VIEW\n    });\n\n    let enabled;                             // Only show preview if true\n    let lastOriginId = 0;\n\n    function _splitNumber(numStr) {\n        // https://stackoverflow.com/questions/2868947/split1px-into-1px-1-px-in-javascript\n        let split = numStr.match(/(^-?)(\\d*\\.?\\d*)(.*)/); // \"1px\" -> [\"1px\", \"1\", \"px\"]\n        let number = split[1] + split[2] || \"\";\n        let decimalPlaces = number.split(\".\")[1];\n        decimalPlaces = decimalPlaces && decimalPlaces.length || 0;\n        let roundTo;\n        switch (decimalPlaces) {\n        case 0: roundTo = 1; break;\n        case 1: roundTo = 10; break;\n        case 2: roundTo = 100; break;\n        default: roundTo = 100; break;\n        }\n        return {\n            number,\n            units: split[3] || \"\",\n            decimalPlaces,\n            roundTo\n        };\n    }\n\n    function getQuickView(editor, pos, token, line) {\n\n        return new Promise((resolve, reject)=>{\n            if(token.type !== \"number\" || !enabled){\n                reject();\n                return;\n            }\n            let sPos = {line: pos.line, ch: token.start},\n                ePos = {line: pos.line, ch: token.end};\n            let editOrigin = \"+NumberQuickView_\" + (lastOriginId++);\n            let $content = $(`<div><input type=\"text\" value=\"${token.string}\" class=\"dial\"><div>`);\n            let split = _splitNumber(token.string);\n            let changedMetricSent = false;\n            $content.find(\".dial\").knob({\n                stopper: false,\n                step: 1/split.roundTo,\n                max: 100/split.roundTo,\n                width: 100,\n                height: 100,\n                fgColor: \"#2893ef\",\n                fontSize: \"1em\",\n                format: function(value){\n                    return Math.round(value*split.roundTo)/split.roundTo + split.units;\n                },\n                getValue: function(userInput){\n                    let changedSplit = _splitNumber(userInput);\n                    split.units = changedSplit.units;\n                    return changedSplit.number;\n                },\n                change: function (value) {\n                    editor.document.batchOperation(function () {\n                        // Replace old color in code with the picker's color, and select it\n                        editor.setSelection(sPos, ePos); // workaround for #2805\n                        let replaceStr = Math.round(value*split.roundTo)/split.roundTo + split.units;\n                        editor.replaceRange(replaceStr, sPos, ePos, editOrigin);\n                        ePos = {line: sPos.line, ch: sPos.ch + replaceStr.length};\n                        editor.setSelection(sPos, ePos);\n                    });\n                    if(!changedMetricSent){\n                        Metrics.countEvent(Metrics.EVENT_TYPE.QUICK_VIEW, \"num\", \"changed\");\n                        changedMetricSent = true;\n                    }\n                },\n                changeStart: function () {\n                    QuickView.lockQuickView();\n                },\n                changeEnd: function () {\n                    QuickView.unlockQuickView();\n                }\n            });\n            resolve({\n                start: sPos,\n                end: ePos,\n                content: $content,\n                exclusive: true,\n                editsDoc: true\n            });\n            Metrics.countEvent(Metrics.EVENT_TYPE.QUICK_VIEW, \"num\", \"show\");\n        });\n    }\n\n    function filterQuickView(popovers){\n        // rgb(10 , 100, 20), hover over these kind of numbers should open color quick view if present over number view\n        let numberQuickView, colorQuickView;\n        for(let popover of popovers){\n            if(popover.providerInfo.provider.QUICK_VIEW_NAME === exports.QUICK_VIEW_NAME){\n                numberQuickView = popover;\n            } else if(popover.providerInfo.provider.QUICK_VIEW_NAME === colorGradientProvider.QUICK_VIEW_NAME){\n                colorQuickView = popover;\n            }\n        }\n        if(colorQuickView){\n            return [colorQuickView];\n        }\n\n        return [numberQuickView] || popovers;\n    }\n\n    prefs.on(\"change\", PREF_ENABLED_KEY, function () {\n        enabled = prefs.get(PREF_ENABLED_KEY);\n    });\n\n    AppInit.appReady(function () {\n        enabled = prefs.get(PREF_ENABLED_KEY);\n        QuickView.registerQuickViewProvider(exports, [\"css\", \"html\"]);\n    });\n\n    exports.getQuickView = getQuickView;\n    exports.filterQuickView = filterQuickView;\n    exports.QUICK_VIEW_NAME = \"numberPreviewProvider\";\n\n});\n"],"file":"numberPreviewProvider.js"}