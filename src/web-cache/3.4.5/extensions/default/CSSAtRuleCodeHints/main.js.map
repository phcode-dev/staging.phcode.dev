{"version":3,"sources":["extensions/default/CSSAtRuleCodeHints/main.js"],"names":["define","require","exports","module","AppInit","brackets","getModule","CodeHintManager","AtRulesText","AtRules","JSON","parse","AtRuleHints","prototype","hasHints","editor","implicitChar","pos","getCursorPos","token","_codeMirror","getTokenAt","cmState","this","state","base","localState","type","context","filter","string","getHints","result","hints","Object","keys","key","indexOf","sort","match","selectInitial","defaultDescriptionWidth","handleWideResults","insertHint","completion","cursor","document","replaceRange","line","ch","start","end","appReady","restrictedBlockHints","registerHintProvider"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAI/B,IAAIC,QAAkBC,SAASC,UAAU,iBACrCC,gBAAkBF,SAASC,UAAU,0BACrCE,YAAkBP,QAAQ,wBAC1BQ,QAAkBC,KAAKC,MAAMH,aAMjC,SAASI,eAKTA,YAAYC,UAAUC,SAAW,SAAUC,OAAQC,cAC/C,IAAIC,IAAMF,OAAOG,eACbC,MAAQJ,OAAOK,YAAYC,WAAWJ,KACtCK,QAWJ,OATAC,KAAKR,OAASA,OAGVO,QADAH,MAAMK,MAAMC,MAAQN,MAAMK,MAAMC,KAAKC,WAC3BP,MAAMK,MAAMC,KAAKC,WAEjBP,MAAMK,MAAME,YAAcP,MAAMK,MAI1B,QAAfL,MAAMQ,MAA2C,OAAzBL,QAAQM,QAAQD,MAClB,eAAfR,MAAMQ,OAAmD,QAAzBL,QAAQM,QAAQD,MAA2C,UAAzBL,QAAQM,QAAQD,OAC1FJ,KAAKM,OAASV,MAAMW,QACb,IAEXP,KAAKM,OAAS,MACP,IAIXjB,YAAYC,UAAUkB,SAAW,SAAUf,cACvC,IAAIC,IAAUM,KAAKR,OAAOG,eACtBC,MAAUI,KAAKR,OAAOK,YAAYC,WAAWJ,KAU7Ce,OALJ,OAHAT,KAAKM,OAASV,MAAMW,OACpBP,KAAKJ,MAAQA,MAERI,KAAKM,OAWH,CACHI,MAPSC,OAAOC,KAAK1B,SAASoB,OAAO,SAAUO,KAC/C,GAAkC,IAA9BA,IAAIC,QAAQlB,MAAMW,QAClB,OAAOM,MAEZE,OAICC,MAAOhB,KAAKM,OACZW,eAAe,EACfC,yBAAyB,EACzBC,mBAAmB,GAfZ,MA8Bf9B,YAAYC,UAAU8B,WAAa,SAAUC,YACzC,IAAIC,OAAStB,KAAKR,OAAOG,eAEzB,OADAK,KAAKR,OAAO+B,SAASC,aAAaH,WAAY,CAACI,KAAMH,OAAOG,KAAMC,GAAI1B,KAAKJ,MAAM+B,OAAQ,CAACF,KAAMH,OAAOG,KAAMC,GAAI1B,KAAKJ,MAAMgC,OACrH,GAGX/C,QAAQgD,SAAS,WAEb,IAAIC,qBAAuB,IAAIzC,YAC/BL,gBAAgB+C,qBAAqBD,qBAAsB,CAAC,MAAO,OAAQ,QAAS,GAGpFnD,QAAQmD,qBAAuBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2017 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var AppInit         = brackets.getModule(\"utils/AppInit\"),\n        CodeHintManager = brackets.getModule(\"editor/CodeHintManager\"),\n        AtRulesText     = require(\"text!AtRulesDef.json\"),\n        AtRules         = JSON.parse(AtRulesText);\n\n\n    /**\n     * @constructor\n     */\n    function AtRuleHints() {\n    }\n\n    // As we are only going to provide @rules name hints\n    // we should claim that we don't have hints for anything else\n    AtRuleHints.prototype.hasHints = function (editor, implicitChar) {\n        var pos = editor.getCursorPos(),\n            token = editor._codeMirror.getTokenAt(pos),\n            cmState;\n\n        this.editor = editor;\n\n        if (token.state.base && token.state.base.localState) {\n            cmState = token.state.base.localState;\n        } else {\n            cmState = token.state.localState || token.state;\n        }\n\n        // Check if we are at '@' rule 'def' context\n        if ((token.type === \"def\" && cmState.context.type === \"at\")\n                || (token.type === \"variable-2\" && (cmState.context.type === \"top\" || cmState.context.type === \"block\"))) {\n            this.filter = token.string;\n            return true;\n        }\n        this.filter = null;\n        return false;\n\n    };\n\n    AtRuleHints.prototype.getHints = function (implicitChar) {\n        var pos     = this.editor.getCursorPos(),\n            token   = this.editor._codeMirror.getTokenAt(pos);\n\n        this.filter = token.string;\n        this.token = token;\n\n        if (!this.filter) {\n            return null;\n        }\n\n        // Filter the property list based on the token string\n        var result = Object.keys(AtRules).filter(function (key) {\n            if (key.indexOf(token.string) === 0) {\n                return key;\n            }\n        }).sort();\n\n        return {\n            hints: result,\n            match: this.filter,\n            selectInitial: true,\n            defaultDescriptionWidth: true,\n            handleWideResults: false\n        };\n    };\n\n\n    /**\n     * Inserts a given @<rule> hint into the current editor context.\n     *\n     * @param {string} completion\n     * The hint to be inserted into the editor context.\n     *\n     * @return {boolean}\n     * Indicates whether the manager should follow hint insertion with an\n     * additional explicit hint request.\n     */\n    AtRuleHints.prototype.insertHint = function (completion) {\n        var cursor = this.editor.getCursorPos();\n        this.editor.document.replaceRange(completion, {line: cursor.line, ch: this.token.start}, {line: cursor.line, ch: this.token.end});\n        return false;\n    };\n\n    AppInit.appReady(function () {\n        // Register code hint providers\n        var restrictedBlockHints = new AtRuleHints();\n        CodeHintManager.registerHintProvider(restrictedBlockHints, [\"css\", \"less\", \"scss\"], 0);\n\n        // For unit testing\n        exports.restrictedBlockHints = restrictedBlockHints;\n    });\n});\n"],"file":"main.js"}