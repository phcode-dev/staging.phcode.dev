{"version":3,"sources":["thirdparty/tern/lib/comment.js"],"names":["mod","exports","module","define","amd","tern","comment","isSpace","ch","onOwnLine","text","pos","charCodeAt","commentsBefore","found","emptyLines","topIsLineComment","out","prev","scan","sawNonWS","content","slice","unshift","commentAfter","length","next","after","end","indexOf","ensureCommentsBefore","node","hasOwnProperty","start"],"mappings":"CAAA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OAChCF,IAAIC,SACQ,mBAAVE,QAAwBA,OAAOC,IACjCD,OAAO,CAAC,WAAYH,KAC7BA,IAAIK,KAAKC,UAAYD,KAAKC,QAAU,KALtC,CAMG,SAASL,SACV,SAASM,QAAQC,IACf,OAAQA,GAAK,IAAMA,GAAK,GAAa,KAAPA,IAAoB,MAAPA,GAG7C,SAASC,UAAUC,KAAMC,KACvB,KAAOA,IAAM,IAAKA,IAAK,CACrB,IAAIH,GAAKE,KAAKE,WAAWD,IAAM,GAC/B,GAAU,IAANH,GAAU,MACd,IAAKD,QAAQC,IAAK,OAAO,EAE3B,OAAO,EAITP,QAAQY,eAAiB,SAASH,KAAMC,KACtC,IAAIG,MAAQ,KAAMC,WAAa,EAAGC,iBAClCC,IAAK,KAAON,IAAM,GAAG,CACnB,IAAIO,KAAOR,KAAKE,WAAWD,IAAM,GACjC,GAAY,IAARO,KACF,IAAK,IAAIC,OAASR,IAAKS,UAAW,EAAOD,KAAO,IAAKA,KAAM,CAEzD,GAAY,KADZD,KAAOR,KAAKE,WAAWO,KAAO,KACiB,IAA7BT,KAAKE,WAAWO,KAAO,GAAU,CACjD,IAAKV,UAAUC,KAAMS,KAAO,GAAI,MAAMF,IACtC,IAAII,QAAUX,KAAKY,MAAMH,KAAMR,MAC1BI,YAAcC,iBAAkBF,MAAM,GAAKO,QAAU,KAAOP,MAAM,IACjEA,QAAUA,MAAQ,KAAKS,QAAQF,SACrCL,kBAAmB,EACnBD,WAAa,EACbJ,IAAMQ,KAAO,EACb,MACK,GAAY,IAARD,KAAY,CACrB,IAAKE,YAAcL,WAAa,EAAG,MAAME,IACzC,MACUG,UAAab,QAAQW,QAC/BE,UAAW,QAGV,GAAY,IAARF,MAA0C,IAA5BR,KAAKE,WAAWD,IAAM,GAAU,CACvD,IAAK,IAAIQ,KAAOR,IAAM,EAAGQ,KAAO,IAAKA,KACnC,GAAiC,IAA7BT,KAAKE,WAAWO,KAAO,IAAyC,IAA7BT,KAAKE,WAAWO,KAAO,GAAU,CACtE,IAAKV,UAAUC,KAAMS,KAAO,GAAI,MAAMF,KACrCH,QAAUA,MAAQ,KAAKS,QAAQb,KAAKY,MAAMH,KAAMR,IAAM,IACvDK,kBAAmB,EACnBD,WAAa,EACb,MAGJJ,IAAMQ,KAAO,MACR,CAAA,IAAIZ,QAAQW,MAGjB,QAFEP,KAKN,OAAOG,OAGTb,QAAQuB,aAAe,SAASd,KAAMC,KACpC,KAAOA,IAAMD,KAAKe,QAAQ,CACxB,IAAIC,KAAOhB,KAAKE,WAAWD,KAC3B,GAAY,IAARe,KAAY,CACd,IAAIC,MAAQjB,KAAKE,WAAWD,IAAM,GAAIiB,IACtC,GAAa,IAATD,MACFC,IAAMlB,KAAKmB,QAAQ,KAAMlB,IAAM,OAC5B,CAAA,GAAa,IAATgB,MAGP,OAFAC,IAAMlB,KAAKmB,QAAQ,KAAMlB,IAAM,GAGjC,OAAOD,KAAKY,MAAMX,IAAM,EAAGiB,IAAM,EAAIlB,KAAKe,OAASG,KAC1CrB,QAAQmB,SACff,MAKRV,QAAQ6B,qBAAuB,SAASpB,KAAMqB,MAC5C,OAAIA,KAAKC,eAAe,kBAA0BD,KAAKlB,eAChDkB,KAAKlB,eAAiBZ,QAAQY,eAAeH,KAAMqB,KAAKE","sourcesContent":["(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    return mod(exports);\n  if (typeof define == \"function\" && define.amd) // AMD\n    return define([\"exports\"], mod);\n  mod(tern.comment || (tern.comment = {}));\n})(function(exports) {\n  function isSpace(ch) {\n    return (ch < 14 && ch > 8) || ch === 32 || ch === 160;\n  }\n\n  function onOwnLine(text, pos) {\n    for (; pos > 0; --pos) {\n      var ch = text.charCodeAt(pos - 1);\n      if (ch == 10) break;\n      if (!isSpace(ch)) return false;\n    }\n    return true;\n  }\n\n  // Gather comments directly before a function\n  exports.commentsBefore = function(text, pos) {\n    var found = null, emptyLines = 0, topIsLineComment;\n    out: while (pos > 0) {\n      var prev = text.charCodeAt(pos - 1);\n      if (prev == 10) {\n        for (var scan = --pos, sawNonWS = false; scan > 0; --scan) {\n          prev = text.charCodeAt(scan - 1);\n          if (prev == 47 && text.charCodeAt(scan - 2) == 47) {\n            if (!onOwnLine(text, scan - 2)) break out;\n            var content = text.slice(scan, pos);\n            if (!emptyLines && topIsLineComment) found[0] = content + \"\\n\" + found[0];\n            else (found || (found = [])).unshift(content);\n            topIsLineComment = true;\n            emptyLines = 0;\n            pos = scan - 2;\n            break;\n          } else if (prev == 10) {\n            if (!sawNonWS && ++emptyLines > 1) break out;\n            break;\n          } else if (!sawNonWS && !isSpace(prev)) {\n            sawNonWS = true;\n          }\n        }\n      } else if (prev == 47 && text.charCodeAt(pos - 2) == 42) {\n        for (var scan = pos - 2; scan > 1; --scan) {\n          if (text.charCodeAt(scan - 1) == 42 && text.charCodeAt(scan - 2) == 47) {\n            if (!onOwnLine(text, scan - 2)) break out;\n            (found || (found = [])).unshift(text.slice(scan, pos - 2));\n            topIsLineComment = false;\n            emptyLines = 0;\n            break;\n          }\n        }\n        pos = scan - 2;\n      } else if (isSpace(prev)) {\n        --pos;\n      } else {\n        break;\n      }\n    }\n    return found;\n  };\n\n  exports.commentAfter = function(text, pos) {\n    while (pos < text.length) {\n      var next = text.charCodeAt(pos);\n      if (next == 47) {\n        var after = text.charCodeAt(pos + 1), end;\n        if (after == 47) // line comment\n          end = text.indexOf(\"\\n\", pos + 2);\n        else if (after == 42) // block comment\n          end = text.indexOf(\"*/\", pos + 2);\n        else\n          return;\n        return text.slice(pos + 2, end < 0 ? text.length : end);\n      } else if (isSpace(next)) {\n        ++pos;\n      }\n    }\n  };\n\n  exports.ensureCommentsBefore = function(text, node) {\n    if (node.hasOwnProperty(\"commentsBefore\")) return node.commentsBefore;\n    return node.commentsBefore = exports.commentsBefore(text, node.start);\n  };\n});\n"],"file":"comment.js"}