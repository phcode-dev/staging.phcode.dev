{"version":3,"sources":["thirdparty/tern/plugin/es_modules.js"],"names":["mod","exports","module","require","define","amd","tern","acorn","walk","infer","WG_IMPORT_DEFAULT_FALLBACK","connectModule","file","out","modules","cx","parent","outObj","exp","prop","type","originNode","Obj","origin","name","ast","addType","propObj","defProp","propagate","simple","ImportDeclaration","node","input","resolveModule","source","value","i","specifiers","length","spec","aval","scope","getProp","local","imported","ExportAllDeclaration","forAllProps","val","ExportDefaultDeclaration","decl","declaration","id","expressionType","state","ExportNamedDeclaration","declarations","cur","src","exported","isModuleName","findExpressionAround","sourceFile","end","_","test","isImport","pos","imp","specs","result","text","slice","start","registerPlugin","server","loadPlugin","on","modNameTests","push","importTests","completableTypes","Identifier","Literal"],"mappings":"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","sourcesContent":["(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    return mod(require(\"../lib/infer\"), require(\"../lib/tern\"), require(\"acorn-walk\"), require(\"./modules\"));\n  if (typeof define == \"function\" && define.amd) // AMD\n    return define([\"../lib/infer\", \"../lib/tern\", \"acorn-walk/dist/walk\", \"./modules\"], mod);\n  mod(tern, tern, acorn.walk);\n})(function(infer, tern, walk) {\n  \"use strict\";\n\n  var WG_IMPORT_DEFAULT_FALLBACK = 80;\n\n  function connectModule(file, out) {\n    var modules = infer.cx().parent.mod.modules;\n    var outObj = null;\n    function exp(prop, type, originNode) {\n      if (!outObj) {\n        outObj = new infer.Obj(true);\n        outObj.origin = file.name;\n        outObj.originNode = file.ast;\n        out.addType(outObj);\n      }\n      var propObj = outObj.defProp(prop, originNode);\n      propObj.origin = file.name;\n      type.propagate(propObj);\n    }\n\n    walk.simple(file.ast, {\n      ImportDeclaration: function(node) {\n        var input = modules.resolveModule(node.source.value, file.name);\n        for (var i = 0; i < node.specifiers.length; i++) {\n          var spec = node.specifiers[i];\n          var aval = file.scope.getProp(spec.local.name);\n          if (spec.type == \"ImportNamespaceSpecifier\") {\n            input.propagate(aval);\n          } else if (spec.type == \"ImportDefaultSpecifier\") {\n            input.getProp(\"default\").propagate(aval);\n            input.propagate(aval, WG_IMPORT_DEFAULT_FALLBACK);\n          } else {\n            input.getProp(spec.imported.name).propagate(aval);\n          }\n        }\n      },\n      ExportAllDeclaration: function(node) {\n        var input = modules.resolveModule(node.source.value, file.name);\n        input.forAllProps(function(prop, val, local) {\n          if (local) exp(prop, val, val.originNode);\n        });\n      },\n      ExportDefaultDeclaration: function(node) {\n        var decl = node.declaration.id || node.declaration;\n        exp(\"default\", infer.expressionType({node: decl, state: file.scope}), decl);\n      },\n      ExportNamedDeclaration: function(node) {\n        var decl = node.declaration;\n        if (decl) {\n          if (decl.type == \"VariableDeclaration\") {\n            for (var i = 0; i < decl.declarations.length; ++i) {\n              var cur = decl.declarations[i];\n              if (cur.id.type == \"Identifier\")\n                exp(cur.id.name, file.scope.getProp(cur.id.name), cur.id);\n            }\n          } else if (decl.id){\n            exp(decl.id.name, file.scope.getProp(decl.id.name), decl.id);\n          }\n        }\n        if (node.specifiers.length) {\n          var src = node.source ? modules.resolveModule(node.source.value, file.name) : file.scope;\n          for (var i = 0; i < node.specifiers.length; i++) {\n            var spec = node.specifiers[i];\n            exp(spec.exported.name, src.getProp(spec.local.name), spec.local);\n          }\n        }\n      }\n    });\n  }\n\n  function isModuleName(node) {\n    if (node.type != \"Literal\" || typeof node.value != \"string\") return;\n\n    var decl = infer.findExpressionAround(node.sourceFile.ast, null, node.end, null, function(_, node) {\n      return node.type == \"ImportDeclaration\" || /Export(All|Named)Declaration/.test(node.type);\n    });\n    if (!decl || decl.node.source != node) return;\n    return node.value;\n  }\n\n  function isImport(node, pos) {\n    if (node.type == \"Identifier\") {\n      var imp = infer.findExpressionAround(node.sourceFile.ast, null, node.end, null, \"ImportDeclaration\");\n      if (!imp) return;\n      var specs = imp.node.specifiers;\n      for (var i = 0; i < specs.length; i++) {\n        var spec = specs[i];\n        if (spec.local != node) continue;\n        var result = {name: imp.node.source.value, prop: null};\n        if (spec.type == \"ImportDefaultSpecifier\") result.prop = \"default\";\n        else if (spec.type == \"ImportSpecifier\") result.prop = spec.imported.name;\n        return result;\n      }\n    } else if (node.type == \"ImportDeclaration\" &&\n               /^import\\s+\\{\\s*([\\w$]+\\s*,\\s*)*$/.test(node.sourceFile.text.slice(node.start, pos))) {\n      return {name: node.source.value, prop: \"\"};\n    }\n  }\n\n  tern.registerPlugin(\"es_modules\", function(server) {\n    server.loadPlugin(\"modules\");\n    server.mod.modules.on(\"getExports\", connectModule);\n    server.mod.modules.modNameTests.push(isModuleName);\n    server.mod.modules.importTests.push(isImport);\n    server.mod.modules.completableTypes.Identifier = true;\n    server.mod.modules.completableTypes.Literal = true;\n    server.mod.modules.completableTypes.ImportDeclaration = true;\n  });\n});\n"],"file":"es_modules.js"}