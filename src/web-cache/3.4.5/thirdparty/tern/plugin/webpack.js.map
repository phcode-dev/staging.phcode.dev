{"version":3,"sources":["thirdparty/tern/plugin/webpack.js"],"names":["exports","module","Error","infer","require","tern","isArray","v","Object","prototype","toString","call","fs","path","ResolverFactory","SyncNodeJsInputFileSystem","getResolver","modules","configPath","config","unsafeCache","extensions","aliasFields","mainFields","fileSystem","webpackConfig","existsSync","resolveConfig","resolve","keys","forEach","key","roots","concat","unshift","fallback","push","createResolver","resolveToFile","resolver","name","parentFile","projectDir","cx","parent","fullParent","resolveSync","dirname","e","console","log","stack","registerPlugin","server","options","loadPlugin","mod","resolvers","resolved","normalizeFilename"],"mappings":"AAAA,GAAsB,iBAAXA,SAAwC,iBAAVC,OACvC,MAAM,IAAIC,MAAM,oDAElB,IAAIC,MAAQC,QAAQ,gBAChBC,KAAOD,QAAQ,eAInB,SAASE,QAAQC,GACf,MAA4C,kBAArCC,OAAOC,UAAUC,SAASC,KAAKJ,GAJxCH,QAAQ,cACRA,QAAQ,gBAMR,IAAIQ,GAAKR,QAAQ,MACbS,KAAOT,QAAQ,QACfU,gBAAkBV,QAAQ,oBAAoBU,gBAC9CC,0BAA4BX,QAAQ,kDAExC,SAASY,YAAYC,QAASC,YAC5B,IAAIC,OAAS,CACXC,aAAa,EACbH,QAASA,SAAW,CAAC,gBACrBI,WAAY,CAAC,MAAO,OAAQ,SAC5BC,YAAa,CAAC,WACdC,WAAY,CAAC,UAAW,MAAO,aAAc,QAC7CC,WAAY,IAAIT,2BAEdU,cAAiBP,YAAcN,GAAGc,WAAWR,YAAed,QAAQc,YAAc,KACzD,mBAAlBO,gBACTA,cAAgBA,iBAElB,IAAIE,cAAgBF,eAAiBA,cAAcG,QA2BnD,OA1BID,eACFnB,OAAOqB,KAAKF,eAAeG,QAAQ,SAAUC,KAC3C,GAAY,iBAARA,IACFZ,OAAOI,WAAaI,cAAcI,UAC7B,GAAY,SAARA,IAAgB,CACzB,IAAIC,MAAQL,cAAcI,KACtBzB,QAAQ0B,OACVb,OAAOF,QAAUe,MAAMC,OAAOd,OAAOF,SAErCE,OAAOF,QAAQiB,QAAQF,YAEpB,GAAY,aAARD,IAAoB,CAC7B,IAAII,SAAWR,cAAcI,KACzBzB,QAAQ6B,UACVhB,OAAOF,QAAUE,OAAOF,QAAQgB,OAAOE,UAEvChB,OAAOF,QAAQmB,KAAKD,cAEL,YAARJ,IACTZ,OAAOF,QAAUE,OAAOF,QAAQgB,OAAON,cAAcI,MAErDZ,OAAOY,KAAOJ,cAAcI,OAK3BjB,gBAAgBuB,eAAelB,QAGxC,SAASmB,cAAcC,SAAUC,KAAMC,YACnC,IAAIC,WAAavC,MAAMwC,KAAKC,OAAOF,WAC/BG,WAAahC,KAAKe,QAAQc,WAAYD,YAC1C,IACE,OAAOF,SAASO,YAAY,GAAIjC,KAAKkC,QAAQF,YAAaL,MAC1D,MAAMQ,GAEN,OADAC,QAAQC,IAAIF,EAAEG,OACP,IAIb9C,KAAK+C,eAAe,UAAW,SAASC,OAAQC,SAC9C,IAAIpC,WAAaoC,QAAQpC,YAAc,sBACnCD,QAEAsB,SAAWvB,YAFDsC,QAAQrC,SAAW,CAAC,gBAClCC,WAAaL,KAAKe,QAAQyB,OAAOC,QAAQZ,WAAYxB,aAErDmC,OAAOE,WAAW,YAClBF,OAAOE,WAAW,cAClBF,OAAOG,IAAIvC,QAAQwC,UAAUrB,KAAK,SAAUI,KAAMC,YAChD,IAAIiB,SAAWpB,cAAcC,SAAUC,KAAMC,YAC7C,OAAOiB,UAAYvD,MAAMwC,KAAKC,OAAOe,kBAAkBD","sourcesContent":["if (typeof exports != \"object\" || typeof module != \"object\")\n  throw new Error(\"This plugin works only in a CommonJS environment\");\n\nvar infer = require(\"../lib/infer\");\nvar tern = require(\"../lib/tern\");\nrequire(\"./commonjs\");\nrequire(\"./es_modules\");\n\nfunction isArray(v) {\n  return Object.prototype.toString.call(v) == \"[object Array]\";\n}\n\nvar fs = require('fs');\nvar path = require(\"path\");\nvar ResolverFactory = require(\"enhanced-resolve\").ResolverFactory;\nvar SyncNodeJsInputFileSystem = require(\"enhanced-resolve/lib/SyncNodeJsInputFileSystem\");\n\nfunction getResolver(modules, configPath) {\n  var config = {\n    unsafeCache: true,\n    modules: modules || [\"node_modules\"],\n    extensions: [\".js\", \".jsx\", \".json\"],\n    aliasFields: [\"browser\"],\n    mainFields: [\"browser\", \"web\", \"browserify\", \"main\"],\n    fileSystem: new SyncNodeJsInputFileSystem()\n  };\n  var webpackConfig = (configPath && fs.existsSync(configPath)) ? require(configPath) : null;\n  if (typeof webpackConfig === 'function') {\n    webpackConfig = webpackConfig();\n  }\n  var resolveConfig = webpackConfig && webpackConfig.resolve;\n  if (resolveConfig) {\n    Object.keys(resolveConfig).forEach(function (key) {\n      if (key === 'packageMains') {\n        config.mainFields = resolveConfig[key];\n      } else if (key === 'root') {\n        var roots = resolveConfig[key];\n        if (isArray(roots)) {\n          config.modules = roots.concat(config.modules);\n        } else {\n          config.modules.unshift(roots);\n        }\n      } else if (key === 'fallback') {\n        var fallback = resolveConfig[key];\n        if (isArray(fallback)) {\n          config.modules = config.modules.concat(fallback);\n        } else {\n          config.modules.push(fallback);\n        }\n      } else if (key === 'modules') {\n        config.modules = config.modules.concat(resolveConfig[key]);\n      } else {\n        config[key] = resolveConfig[key];\n      }\n    });\n  }\n\n  return ResolverFactory.createResolver(config);\n}\n\nfunction resolveToFile(resolver, name, parentFile) {\n    var projectDir = infer.cx().parent.projectDir;\n    var fullParent = path.resolve(projectDir, parentFile);\n    try {\n      return resolver.resolveSync({}, path.dirname(fullParent), name);\n    } catch(e) {\n      console.log(e.stack);\n      return '';\n    }\n}\n\ntern.registerPlugin(\"webpack\", function(server, options) {\n  var configPath = options.configPath || './webpack.config.js';\n  var modules = options.modules || ['node_modules'];\n  configPath = path.resolve(server.options.projectDir, configPath);\n  var resolver = getResolver(modules, configPath);\n  server.loadPlugin(\"commonjs\");\n  server.loadPlugin(\"es_modules\");\n  server.mod.modules.resolvers.push(function (name, parentFile) {\n    var resolved = resolveToFile(resolver, name, parentFile);\n    return resolved && infer.cx().parent.normalizeFilename(resolved);\n  });\n});\n"],"file":"webpack.js"}