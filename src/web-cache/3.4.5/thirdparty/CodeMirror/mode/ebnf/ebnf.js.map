{"version":3,"sources":["thirdparty/CodeMirror/mode/ebnf/ebnf.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","commentType","stateType","bracesMode","getMode","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","text","current","i","skipToEnd","indexOf","eatSpace","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {slash: 0, parenthesis: 1};\n    var stateType = {comment: 0, _string: 1, characterClass: 2};\n    var bracesMode = null;\n\n    if (config.bracesMode)\n      bracesMode = CodeMirror.getMode(config, config.bracesMode);\n\n    return {\n      startState: function () {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function (stream, state) {\n        if (!stream) return;\n\n        //check for state changes\n        if (state.stack.length === 0) {\n          //strings\n          if ((stream.peek() == '\"') || (stream.peek() == \"'\")) {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n            state.stack.unshift(stateType._string);\n          } else if (stream.match('/*')) { //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match('(*')) { //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        }\n\n        //return state\n        //stack has\n        switch (state.stack[0]) {\n        case stateType._string:\n          while (state.stack[0] === stateType._string && !stream.eol()) {\n            if (stream.peek() === state.stringType) {\n              stream.next(); // Skip quote\n              state.stack.shift(); // Clear flag\n            } else if (stream.peek() === \"\\\\\") {\n              stream.next();\n              stream.next();\n            } else {\n              stream.match(/^.[^\\\\\\\"\\']*/);\n            }\n          }\n          return state.lhs ? \"property string\" : \"string\"; // Token style\n\n        case stateType.comment:\n          while (state.stack[0] === stateType.comment && !stream.eol()) {\n            if (state.commentType === commentType.slash && stream.match('*/')) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else {\n              stream.match(/^.[^\\*]*/);\n            }\n          }\n          return \"comment\";\n\n        case stateType.characterClass:\n          while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n              state.stack.shift();\n            }\n          }\n          return \"operator\";\n        }\n\n        var peek = stream.peek();\n\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null)\n            state.localState = CodeMirror.startState(bracesMode);\n\n          var token = bracesMode.token(stream, state.localState),\n          text = stream.current();\n\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n          return token;\n        }\n\n        //no stack\n        switch (peek) {\n        case \"[\":\n          stream.next();\n          state.stack.unshift(stateType.characterClass);\n          return \"bracket\";\n        case \":\":\n        case \"|\":\n        case \";\":\n          stream.next();\n          return \"operator\";\n        case \"%\":\n          if (stream.match(\"%%\")) {\n            return \"header\";\n          } else if (stream.match(/[%][A-Za-z]+/)) {\n            return \"keyword\";\n          } else if (stream.match(/[%][}]/)) {\n            return \"matchingbracket\";\n          }\n          break;\n        case \"/\":\n          if (stream.match(/[\\/][A-Za-z]+/)) {\n          return \"keyword\";\n        }\n        case \"\\\\\":\n          if (stream.match(/[\\][a-z]+/)) {\n            return \"string-2\";\n          }\n        case \".\":\n          if (stream.match(\".\")) {\n            return \"atom\";\n          }\n        case \"*\":\n        case \"-\":\n        case \"+\":\n        case \"^\":\n          if (stream.match(peek)) {\n            return \"atom\";\n          }\n        case \"$\":\n          if (stream.match(\"$$\")) {\n            return \"builtin\";\n          } else if (stream.match(/[$][0-9]+/)) {\n            return \"variable-3\";\n          }\n        case \"<\":\n          if (stream.match(/<<[a-zA-Z_]+>>/)) {\n            return \"builtin\";\n          }\n        }\n\n        if (stream.match('//')) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match('return')) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n        return null;\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});\n"],"file":"ebnf.js"}