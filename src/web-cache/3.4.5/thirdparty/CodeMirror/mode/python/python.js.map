{"version":3,"sources":["thirdparty/CodeMirror/mode/python/python.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","wordRegexp","words","RegExp","join","wordOperators","commonKeywords","commonBuiltins","top","state","scopes","length","registerHelper","concat","defineMode","conf","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","indentUnit","myKeywords","myBuiltins","undefined","extra_keywords","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","external","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","isFmtString","current","toLowerCase","indexOf","tokenize","formatStringFactory","tokenStringFactory","next","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","singleLineStringErrors","isString","pop","push","align","pushBracketScope","column","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","slice","startState","basecolumn","token","addErr","textAfter","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","defineMIME","str","split","name"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                        \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                        \"for\", \"from\", \"global\", \"if\", \"import\",\n                        \"lambda\", \"pass\", \"raise\", \"return\",\n                        \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                        \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                        \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                        \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                        \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                        \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                        \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                        \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                        \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                        \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                        \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function(conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n    //               (Backwards-compatibility with old, cumbersome config system)\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                     parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n    for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n\n    var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined)\n      myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n    if (parserConf.extra_builtins != undefined)\n      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                      \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                      \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins);\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\"\n      if (sol) state.indent = stream.indentation()\n      // Handle scope changes\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset)\n            pushPyScope(state);\n          else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n            state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state))\n            style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state, inFormat) {\n      if (stream.eatSpace()) return null;\n\n      // Handle Comments\n      if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n        if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n        if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n        // Binary\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n        // Octal\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n        // Decimal\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i);\n          // TODO - Can you have imaginary longs?\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++)\n        if (stream.match(operators[i])) return \"operator\"\n\n      if (stream.match(delimiters)) return \"punctuation\";\n\n      if (state.lastToken == \".\" && stream.match(identifiers))\n        return \"property\";\n\n      if (stream.match(keywords) || stream.match(wordOperators))\n        return \"keyword\";\n\n      if (stream.match(builtins))\n        return \"builtin\";\n\n      if (stream.match(/^(self|cls)\\b/))\n        return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\")\n          return \"def\";\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return inFormat ? null :ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function(stream, state) {\n          var inner = tokenBaseInner(stream, state, true)\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1)\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n              else state.tokenize = tokenString\n            }\n          }\n          return inner\n        }\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0)\n            if (stream.current()) return OUTCLASS;\n            else return state.tokenize(stream, state)\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop()\n      state.scopes.push({offset: top(state).offset + conf.indentUnit,\n                         type: \"py\",\n                         align: null})\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1\n      state.scopes.push({offset: state.indent + hangingIndent,\n                         type: type,\n                         align: align})\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) {\n        state.beginningOfLine = true;\n        state.dedent = false;\n      }\n\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle decorators\n      if (state.beginningOfLine && current == \"@\")\n        return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n\n      if ((style == \"variable\" || style == \"builtin\")\n          && state.lastToken == \"meta\")\n        style = \"meta\";\n\n      // Handle scope changes.\n      if (current == \"pass\" || current == \"return\")\n        state.dedent = true;\n\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false))\n        pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1)\n          pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n        delimiter_index = \"])}\".indexOf(current);\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent\n          else return ERRORCLASS;\n        }\n      }\n      if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1)\n        state.scopes.pop();\n\n      return style;\n    }\n\n    var external = {\n      startState: function(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{offset: basecolumn || 0, type: \"py\", align: null}],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\")\n          state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n\n        if (stream.eol() && state.lambda)\n          state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n\n      indent: function(state, textAfter) {\n        if (state.tokenize != tokenBase)\n          return state.tokenize.isString ? CodeMirror.Pass : 0;\n\n        var scope = top(state)\n        var closing = scope.type == textAfter.charAt(0) ||\n            scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter)\n        if (scope.align != null)\n          return scope.align - (closing ? 1 : 0)\n        else\n          return scope.offset - (closing ? hangingIndent : 0)\n      },\n\n      electricInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      closeBrackets: {triples: \"'\\\"\"},\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function(str) { return str.split(\" \"); };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                          \"extern gil include nogil property public \"+\n                          \"readonly struct union DEF IF ELIF ELSE\")\n  });\n\n});\n"],"file":"python.js"}