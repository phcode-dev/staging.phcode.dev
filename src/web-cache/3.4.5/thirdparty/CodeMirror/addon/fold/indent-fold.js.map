{"version":3,"sources":["thirdparty/CodeMirror/addon/fold/indent-fold.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","lineIndent","cm","lineNo","text","getLine","spaceTo","search","test","getTokenTypeAt","Pos","countColumn","getOption","registerHelper","start","myIndent","line","lastLineInFold","i","end","lastLine","indent","from","length","to"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEA,SAASC,WAAWC,GAAIC,QACtB,IAAIC,KAAOF,GAAGG,QAAQF,QAClBG,QAAUF,KAAKG,OAAO,MAC1B,OAAgB,GAAZD,SAAiB,cAAcE,KAAKN,GAAGO,eAAeT,WAAWU,IAAIP,OAAQG,QAAU,MACjF,EACHN,WAAWW,YAAYP,KAAM,KAAMF,GAAGU,UAAU,YAGzDZ,WAAWa,eAAe,OAAQ,SAAU,SAASX,GAAIY,OACvD,IAAIC,SAAWd,WAAWC,GAAIY,MAAME,MACpC,KAAID,SAAW,GAAf,CAKA,IAJA,IAAIE,eAAiB,KAIZC,EAAIJ,MAAME,KAAO,EAAGG,IAAMjB,GAAGkB,WAAYF,GAAKC,MAAOD,EAAG,CAC/D,IAAIG,OAASpB,WAAWC,GAAIgB,GAC5B,IAAe,GAAXG,YACG,CAAA,KAAIA,OAASN,UAOlB,MALAE,eAAiBC,GAQrB,OAAID,eAAuB,CACzBK,KAAMtB,WAAWU,IAAII,MAAME,KAAMd,GAAGG,QAAQS,MAAME,MAAMO,QACxDC,GAAIxB,WAAWU,IAAIO,eAAgBf,GAAGG,QAAQY,gBAAgBM,cAFhE","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction lineIndent(cm, lineNo) {\n  var text = cm.getLine(lineNo)\n  var spaceTo = text.search(/\\S/)\n  if (spaceTo == -1 || /\\bcomment\\b/.test(cm.getTokenTypeAt(CodeMirror.Pos(lineNo, spaceTo + 1))))\n    return -1\n  return CodeMirror.countColumn(text, null, cm.getOption(\"tabSize\"))\n}\n\nCodeMirror.registerHelper(\"fold\", \"indent\", function(cm, start) {\n  var myIndent = lineIndent(cm, start.line)\n  if (myIndent < 0) return\n  var lastLineInFold = null\n\n  // Go through lines until we find a line that definitely doesn't belong in\n  // the block we're folding, or to the end.\n  for (var i = start.line + 1, end = cm.lastLine(); i <= end; ++i) {\n    var indent = lineIndent(cm, i)\n    if (indent == -1) {\n    } else if (indent > myIndent) {\n      // Lines with a greater indent are considered part of the block.\n      lastLineInFold = i;\n    } else {\n      // If this line has non-space, non-comment content, and is\n      // indented less or equal to the start line, it is the start of\n      // another block.\n      break;\n    }\n  }\n  if (lastLineInFold) return {\n    from: CodeMirror.Pos(start.line, cm.getLine(start.line).length),\n    to: CodeMirror.Pos(lastLineInFold, cm.getLine(lastLineInFold).length)\n  };\n});\n\n});\n"],"file":"indent-fold.js"}