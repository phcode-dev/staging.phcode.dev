{"version":3,"sources":["thirdparty/CodeMirror/addon/mode/loadmode.js"],"names":["mod","exports","module","require","define","amd","CM","CodeMirror","env","modeURL","loading","splitCallback","cont","n","countDown","ensureDeps","mode","options","modeObj","modes","deps","dependencies","missing","i","length","hasOwnProperty","push","split","requireMode","name","file","path","replace","loadMode","script","document","createElement","src","others","getElementsByTagName","list","on","parentNode","insertBefore","requirejs","autoLoadMode","instance","setOption","getOption"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,wBAAyB,OACb,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyB,SAASE,IAAMN,IAAIM,GAAI,SAExDN,IAAIO,WAAY,SANpB,CAOG,SAASA,WAAYC,KACjBD,WAAWE,UAASF,WAAWE,QAAU,oBAE9C,IAAIC,QAAU,GACd,SAASC,cAAcC,KAAMC,GAC3B,IAAIC,UAAYD,EAChB,OAAO,WAAgC,KAAbC,WAAgBF,QAE5C,SAASG,WAAWC,KAAMJ,KAAMK,SAC9B,IAAIC,QAAUX,WAAWY,MAAMH,MAAOI,KAAOF,SAAWA,QAAQG,aAChE,IAAKD,KAAM,OAAOR,OAElB,IADA,IAAIU,QAAU,GACLC,EAAI,EAAGA,EAAIH,KAAKI,SAAUD,EAC5BhB,WAAWY,MAAMM,eAAeL,KAAKG,KACxCD,QAAQI,KAAKN,KAAKG,IAEtB,IAAKD,QAAQE,OAAQ,OAAOZ,OAE5B,IADA,IAAIe,MAAQhB,cAAcC,KAAMU,QAAQE,QAC/BD,EAAI,EAAGA,EAAID,QAAQE,SAAUD,EACpChB,WAAWqB,YAAYN,QAAQC,GAAII,MAAOV,SAG9CV,WAAWqB,YAAc,SAASZ,KAAMJ,KAAMK,SAE5C,GADmB,iBAARD,OAAkBA,KAAOA,KAAKa,MACrCtB,WAAWY,MAAMM,eAAeT,MAAO,OAAOD,WAAWC,KAAMJ,KAAMK,SACzE,GAAIP,QAAQe,eAAeT,MAAO,OAAON,QAAQM,MAAMU,KAAKd,MAE5D,IAAIkB,KAAOb,SAAWA,QAAQc,KAAOd,QAAQc,KAAKf,MAAQT,WAAWE,QAAQuB,QAAQ,MAAOhB,MAC5F,GAAIC,SAAWA,QAAQgB,SACrBhB,QAAQgB,SAASH,KAAM,WAAaf,WAAWC,KAAMJ,KAAMK,gBACtD,GAAW,SAAPT,IAAgB,CACzB,IAAI0B,OAASC,SAASC,cAAc,UACpCF,OAAOG,IAAMP,KACb,IAAIQ,OAASH,SAASI,qBAAqB,UAAU,GACjDC,KAAO9B,QAAQM,MAAQ,CAACJ,MAC5BL,WAAWkC,GAAGP,OAAQ,OAAQ,WAC5BnB,WAAWC,KAAM,WACf,IAAK,IAAIO,EAAI,EAAGA,EAAIiB,KAAKhB,SAAUD,EAAGiB,KAAKjB,MAC1CN,WAELqB,OAAOI,WAAWC,aAAaT,OAAQI,YACvB,OAAP9B,KACTL,QAAQ2B,MACRlB,QACgB,OAAPJ,KACToC,UAAU,CAACd,MAAOlB,OAItBL,WAAWsC,aAAe,SAASC,SAAU9B,KAAMC,SAC5CV,WAAWY,MAAMM,eAAeT,OACnCT,WAAWqB,YAAYZ,KAAM,WAC3B8B,SAASC,UAAU,OAAQD,SAASE,UAAU,UAC7C/B","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), \"cjs\");\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], function(CM) { mod(CM, \"amd\"); });\n  else // Plain browser env\n    mod(CodeMirror, \"plain\");\n})(function(CodeMirror, env) {\n  if (!CodeMirror.modeURL) CodeMirror.modeURL = \"../mode/%N/%N.js\";\n\n  var loading = {};\n  function splitCallback(cont, n) {\n    var countDown = n;\n    return function() { if (--countDown == 0) cont(); };\n  }\n  function ensureDeps(mode, cont, options) {\n    var modeObj = CodeMirror.modes[mode], deps = modeObj && modeObj.dependencies;\n    if (!deps) return cont();\n    var missing = [];\n    for (var i = 0; i < deps.length; ++i) {\n      if (!CodeMirror.modes.hasOwnProperty(deps[i]))\n        missing.push(deps[i]);\n    }\n    if (!missing.length) return cont();\n    var split = splitCallback(cont, missing.length);\n    for (var i = 0; i < missing.length; ++i)\n      CodeMirror.requireMode(missing[i], split, options);\n  }\n\n  CodeMirror.requireMode = function(mode, cont, options) {\n    if (typeof mode != \"string\") mode = mode.name;\n    if (CodeMirror.modes.hasOwnProperty(mode)) return ensureDeps(mode, cont, options);\n    if (loading.hasOwnProperty(mode)) return loading[mode].push(cont);\n\n    var file = options && options.path ? options.path(mode) : CodeMirror.modeURL.replace(/%N/g, mode);\n    if (options && options.loadMode) {\n      options.loadMode(file, function() { ensureDeps(mode, cont, options) })\n    } else if (env == \"plain\") {\n      var script = document.createElement(\"script\");\n      script.src = file;\n      var others = document.getElementsByTagName(\"script\")[0];\n      var list = loading[mode] = [cont];\n      CodeMirror.on(script, \"load\", function() {\n        ensureDeps(mode, function() {\n          for (var i = 0; i < list.length; ++i) list[i]();\n        }, options);\n      });\n      others.parentNode.insertBefore(script, others);\n    } else if (env == \"cjs\") {\n      require(file);\n      cont();\n    } else if (env == \"amd\") {\n      requirejs([file], cont);\n    }\n  };\n\n  CodeMirror.autoLoadMode = function(instance, mode, options) {\n    if (!CodeMirror.modes.hasOwnProperty(mode))\n      CodeMirror.requireMode(mode, function() {\n        instance.setOption(\"mode\", instance.getOption(\"mode\"));\n      }, options);\n  };\n});\n"],"file":"loadmode.js"}