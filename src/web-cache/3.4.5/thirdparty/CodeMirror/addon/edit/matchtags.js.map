{"version":3,"sources":["thirdparty/CodeMirror/addon/edit/matchtags.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","clear","cm","state","tagHit","tagOther","doMatchTags","failedTagMatch","operation","somethingSelected","cur","getCursor","range","getViewport","from","Math","min","line","to","max","match","findMatchingTag","matchBothTags","hit","at","open","close","markText","className","other","maybeUpdateMatch","defineOption","val","old","Init","off","bothTags","on","commands","toMatchingTag","found","extendSelection"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,wBAAyBA,QAAQ,qBACrB,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,uBAAwB,oBAAqBJ,KAErDA,IAAIM,YANR,CAOG,SAASA,YACV,aAgBA,SAASC,MAAMC,IACTA,GAAGC,MAAMC,QAAQF,GAAGC,MAAMC,OAAOH,QACjCC,GAAGC,MAAME,UAAUH,GAAGC,MAAME,SAASJ,QACzCC,GAAGC,MAAMC,OAASF,GAAGC,MAAME,SAAW,KAGxC,SAASC,YAAYJ,IACnBA,GAAGC,MAAMI,gBAAiB,EAC1BL,GAAGM,UAAU,WAEX,GADAP,MAAMC,KACFA,GAAGO,oBAAP,CACA,IAAIC,IAAMR,GAAGS,YAAaC,MAAQV,GAAGW,cACrCD,MAAME,KAAOC,KAAKC,IAAIJ,MAAME,KAAMJ,IAAIO,MAAOL,MAAMM,GAAKH,KAAKI,IAAIT,IAAIO,KAAO,EAAGL,MAAMM,IACrF,IAAIE,MAAQpB,WAAWqB,gBAAgBnB,GAAIQ,IAAKE,OAChD,GAAKQ,MAAL,CACA,GAAIlB,GAAGC,MAAMmB,cAAe,CAC1B,IAAIC,IAAkB,QAAZH,MAAMI,GAAeJ,MAAMK,KAAOL,MAAMM,MAC9CH,MAAKrB,GAAGC,MAAMC,OAASF,GAAGyB,SAASJ,IAAIT,KAAMS,IAAIL,GAAI,CAACU,UAAW,4BAEvE,IAAIC,MAAoB,SAAZT,MAAMI,GAAgBJ,MAAMK,KAAOL,MAAMM,MACjDG,MACF3B,GAAGC,MAAME,SAAWH,GAAGyB,SAASE,MAAMf,KAAMe,MAAMX,GAAI,CAACU,UAAW,2BAElE1B,GAAGC,MAAMI,gBAAiB,MAIhC,SAASuB,iBAAiB5B,IACpBA,GAAGC,MAAMI,gBAAgBD,YAAYJ,IA1C3CF,WAAW+B,aAAa,aAAa,EAAO,SAAS7B,GAAI8B,IAAKC,KACxDA,KAAOA,KAAOjC,WAAWkC,OAC3BhC,GAAGiC,IAAI,iBAAkB7B,aACzBJ,GAAGiC,IAAI,iBAAkBL,kBACzB7B,MAAMC,KAEJ8B,MACF9B,GAAGC,MAAMmB,cAA8B,iBAAPU,KAAmBA,IAAII,SACvDlC,GAAGmC,GAAG,iBAAkB/B,aACxBJ,GAAGmC,GAAG,iBAAkBP,kBACxBxB,YAAYJ,OAmChBF,WAAWsC,SAASC,cAAgB,SAASrC,IAC3C,IAAIsC,MAAQxC,WAAWqB,gBAAgBnB,GAAIA,GAAGS,aAC9C,GAAI6B,MAAO,CACT,IAAIX,MAAoB,SAAZW,MAAMhB,GAAgBgB,MAAMf,KAAOe,MAAMd,MACjDG,OAAO3B,GAAGuC,gBAAgBZ,MAAMX,GAAIW,MAAMf","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"matchTags\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.off(\"cursorActivity\", doMatchTags);\n      cm.off(\"viewportChange\", maybeUpdateMatch);\n      clear(cm);\n    }\n    if (val) {\n      cm.state.matchBothTags = typeof val == \"object\" && val.bothTags;\n      cm.on(\"cursorActivity\", doMatchTags);\n      cm.on(\"viewportChange\", maybeUpdateMatch);\n      doMatchTags(cm);\n    }\n  });\n\n  function clear(cm) {\n    if (cm.state.tagHit) cm.state.tagHit.clear();\n    if (cm.state.tagOther) cm.state.tagOther.clear();\n    cm.state.tagHit = cm.state.tagOther = null;\n  }\n\n  function doMatchTags(cm) {\n    cm.state.failedTagMatch = false;\n    cm.operation(function() {\n      clear(cm);\n      if (cm.somethingSelected()) return;\n      var cur = cm.getCursor(), range = cm.getViewport();\n      range.from = Math.min(range.from, cur.line); range.to = Math.max(cur.line + 1, range.to);\n      var match = CodeMirror.findMatchingTag(cm, cur, range);\n      if (!match) return;\n      if (cm.state.matchBothTags) {\n        var hit = match.at == \"open\" ? match.open : match.close;\n        if (hit) cm.state.tagHit = cm.markText(hit.from, hit.to, {className: \"CodeMirror-matchingtag\"});\n      }\n      var other = match.at == \"close\" ? match.open : match.close;\n      if (other)\n        cm.state.tagOther = cm.markText(other.from, other.to, {className: \"CodeMirror-matchingtag\"});\n      else\n        cm.state.failedTagMatch = true;\n    });\n  }\n\n  function maybeUpdateMatch(cm) {\n    if (cm.state.failedTagMatch) doMatchTags(cm);\n  }\n\n  CodeMirror.commands.toMatchingTag = function(cm) {\n    var found = CodeMirror.findMatchingTag(cm, cm.getCursor());\n    if (found) {\n      var other = found.at == \"close\" ? found.open : found.close;\n      if (other) cm.extendSelection(other.to, other.from);\n    }\n  };\n});\n"],"file":"matchtags.js"}