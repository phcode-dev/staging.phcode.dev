{"version":3,"sources":["thirdparty/jszip-utils-phoenix.js"],"names":["e","exports","module","define","amd","window","JSZipUtils","global","self","t","n","r","s","o","u","a","require","i","Error","f","call","length","1","createStandardXHR","XMLHttpRequest","createActiveXHR","ActiveXObject","_getBinaryFromXHR","xhr","response","responseText","createXHR","getBinaryContent","path","options","promise","resolve","reject","callback","Promise","data","err","_resolve","_reject","open","responseType","overrideMimeType","onreadystatechange","event","readyState","status","this","statusText","onprogress","abortCheck","abort","progress","originalEvent","percent","loaded","total","send"],"mappings":"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","sourcesContent":["/*@preserve\n CUSTOMISED VERSION of JS ZIP utils in phoenix\nJSZipUtils - A collection of cross-browser utilities to go along with JSZip.\n<http://stuk.github.io/jszip-utils>\n\n(c) 2014-2019 Stuart Knightley, David Duponchel\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip-utils/master/LICENSE.markdown.\n\n*/\n!function(e){\"object\"==typeof exports?module.exports=e():\"function\"==typeof define&&define.amd?define(e):\"undefined\"!=typeof window?window.JSZipUtils=e():\"undefined\"!=typeof global?global.JSZipUtils=e():\"undefined\"!=typeof self&&(self.JSZipUtils=e())}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n/*globals Promise */\n\nvar JSZipUtils = {};\n// just use the responseText with xhr1, response with xhr2.\n// The transformation doesn't throw away high-order byte (with responseText)\n// because JSZip handles that case. If not used with JSZip, you may need to\n// do it, see https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data\nJSZipUtils._getBinaryFromXHR = function (xhr) {\n    // for xhr.responseText, the 0xFF mask is applied by JSZip\n    return xhr.response || xhr.responseText;\n};\n\n// taken from jQuery\nfunction createStandardXHR() {\n    try {\n        return new window.XMLHttpRequest();\n    } catch( e ) {}\n}\n\nfunction createActiveXHR() {\n    try {\n        return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n    } catch( e ) {}\n}\n\n// Create the request object\nvar createXHR = (typeof window !== \"undefined\" && window.ActiveXObject) ?\n    /* Microsoft failed to properly\n     * implement the XMLHttpRequest in IE7 (can't request local files),\n     * so we use the ActiveXObject when it is available\n     * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n     * we need a fallback.\n     */\n    function() {\n    return createStandardXHR() || createActiveXHR();\n} :\n    // For all other browsers, use the standard XMLHttpRequest object\n    createStandardXHR;\n\n\n/**\n * @param  {string} path    The path to the resource to GET.\n * @param  {function|{callback: function, progress: function}} options\n * @return {Promise|undefined} If no callback is passed then a promise is returned\n */\nJSZipUtils.getBinaryContent = function (path, options) {\n    var promise, resolve, reject;\n    var callback;\n\n    if (!options) {\n        options = {};\n    }\n\n    // backward compatible callback\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    } else if (typeof options.callback === 'function') {\n        // callback inside options object\n        callback = options.callback;\n    }\n\n    if (!callback && typeof Promise !== \"undefined\") {\n        promise = new Promise(function (_resolve, _reject) {\n            resolve = _resolve;\n            reject = _reject;\n        });\n    } else {\n        resolve = function (data) { callback(null, data); };\n        reject = function (err) { callback(err, null); };\n    }\n\n    /*\n     * Here is the tricky part : getting the data.\n     * In firefox/chrome/opera/... setting the mimeType to 'text/plain; charset=x-user-defined'\n     * is enough, the result is in the standard xhr.responseText.\n     * cf https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest#Receiving_binary_data_in_older_browsers\n     * In IE <= 9, we must use (the IE only) attribute responseBody\n     * (for binary data, its content is different from responseText).\n     * In IE 10, the 'charset=x-user-defined' trick doesn't work, only the\n     * responseType will work :\n     * http://msdn.microsoft.com/en-us/library/ie/hh673569%28v=vs.85%29.aspx#Binary_Object_upload_and_download\n     *\n     * I'd like to use jQuery to avoid this XHR madness, but it doesn't support\n     * the responseType attribute : http://bugs.jquery.com/ticket/11461\n     */\n    try {\n        var xhr = createXHR();\n\n        xhr.open('GET', path, true);\n\n        // recent browsers\n        if (\"responseType\" in xhr) {\n            xhr.responseType = \"arraybuffer\";\n        }\n\n        // older browser\n        if(xhr.overrideMimeType) {\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n        }\n\n        xhr.onreadystatechange = function (event) {\n            // use `xhr` and not `this`... thanks IE\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0) {\n                    try {\n                        resolve(JSZipUtils._getBinaryFromXHR(xhr));\n                    } catch(err) {\n                        reject(new Error(err));\n                    }\n                } else {\n                    reject(new Error(\"Ajax error for \" + path + \" : \" + this.status + \" \" + this.statusText));\n                }\n            }\n        };\n\n        xhr.onprogress = function(e) {\n            if(options.abortCheck && options.abortCheck()){\n                xhr.abort();\n            }\n            if(options.progress) {\n                options.progress({\n                    path: path,\n                    originalEvent: e,\n                    percent: e.loaded / e.total * 100,\n                    loaded: e.loaded,\n                    total: e.total\n                });\n            }\n        };\n\n        xhr.send();\n\n    } catch (e) {\n        reject(new Error(e), null);\n    }\n\n    // returns a promise or undefined depending on whether a callback was\n    // provided\n    return promise;\n};\n\n// export\nmodule.exports = JSZipUtils;\n\n// enforcing Stuk's coding style\n// vim: set shiftwidth=4 softtabstop=4:\n\n},{}]},{},[1])\n(1)\n});\n;\n"],"file":"jszip-utils-phoenix.js"}