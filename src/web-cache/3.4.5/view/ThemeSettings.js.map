{"version":3,"sources":["view/ThemeSettings.js"],"names":["define","require","exports","module","_","Mustache","Dialogs","Strings","ViewCommandHandlers","settingsTemplate","PreferencesManager","prefs","getExtensionPrefs","loadedThemes","SYSTEM_DEFAULT_THEME","DEFAULTS","themeScrollbars","theme","lightTheme","darkTheme","$settings","$","addClass","getValues","result","Object","keys","forEach","key","get","fontFamily","getFontFamily","fontSize","getFontSize","validFontSizeRegExp","showDialog","currentSettings","newSettings","themes","map","unshift","displayName","SYSTEM_DEFAULT","name","template","append","html","$template","render","settings","$currentThemeOption","find","length","attr","tab","on","$target","this","is","target","targetValue","val","$btn","checkValidity","disabled","set","showModalDialogUsingTemplate","done","id","setterFn","setting","hasOwnProperty","toLocaleUpperCase","substr","setThemes","restore","definePreference","description","DESCRIPTION_THEME","DESCRIPTION_USE_THEME_SCROLLBARS","_setThemes"],"mappings":"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","sourcesContent":["/**\n * Brackets Themes Copyright (c) 2014 Miguel Castillo.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    let _                   = require(\"thirdparty/lodash\"),\n        Mustache            = require(\"thirdparty/mustache/mustache\"),\n        Dialogs             = require(\"widgets/Dialogs\"),\n        Strings             = require(\"strings\"),\n        ViewCommandHandlers = require(\"view/ViewCommandHandlers\"),\n        settingsTemplate    = require(\"text!htmlContent/themes-settings.html\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        prefs               = PreferencesManager.getExtensionPrefs(\"themes\");\n\n    /**\n     * @type {Object}\n     * Currently loaded themes that are available to choose from.\n     */\n    let loadedThemes = {};\n\n    const SYSTEM_DEFAULT_THEME = \"system-default\";\n\n    /**\n     * Object with all default values that can be configure via the settings UI\n     */\n    const DEFAULTS = {\n        themeScrollbars: true,\n        theme: SYSTEM_DEFAULT_THEME,\n        lightTheme: \"light-theme\",\n        darkTheme: \"dark-theme\"\n    };\n\n\n    /**\n     * Cached html settings jQuery object for easier processing when opening the settings dialog\n     */\n    var $settings = $(settingsTemplate).addClass(\"themeSettings\");\n\n    /**\n     * @private\n     * Gets all the configurable settings that need to be loaded in the settings dialog\n     *\n     * @return {Object} a collection with all the settings\n     */\n    function getValues() {\n        var result = {};\n\n        Object.keys(DEFAULTS).forEach(function (key) {\n            result[key] = prefs.get(key);\n        });\n\n        result.fontFamily = ViewCommandHandlers.getFontFamily();\n        result.fontSize   = ViewCommandHandlers.getFontSize();\n        result.validFontSizeRegExp = ViewCommandHandlers.validFontSizeRegExp;\n        return result;\n    }\n\n    /**\n     * Opens the settings dialog\n     */\n    function showDialog() {\n        const currentSettings = getValues(),\n            newSettings     = {},\n            themes          = _.map(loadedThemes, function (theme) { return theme; });\n        // Insert system default theme\n        themes.unshift({\n            displayName: Strings.SYSTEM_DEFAULT,\n            name: SYSTEM_DEFAULT_THEME\n        });\n        const template      = $(\"<div>\").append($settings).html(),\n            $template       = $(Mustache.render(template,\n                {\"settings\": currentSettings, \"themes\": themes, \"Strings\": Strings}));\n\n        // Select the correct theme.\n        var $currentThemeOption = $template\n            .find(\"[value='\" + currentSettings.theme + \"']\");\n\n        if ($currentThemeOption.length === 0) {\n            $currentThemeOption = $template.find(\"[value='\" + DEFAULTS.theme + \"']\");\n        }\n        $currentThemeOption.attr(\"selected\", \"selected\");\n\n        $template\n            .find(\"[data-toggle=tab].default\")\n            .tab(\"show\");\n\n        $template\n            .on(\"change\", \"[data-target]:checkbox\", function () {\n                var $target = $(this);\n                var attr = $target.attr(\"data-target\");\n                newSettings[attr] = $target.is(\":checked\");\n            })\n            .on(\"input\", \"[data-target='fontSize']\", function () {\n                var target = this;\n                var targetValue = $(this).val();\n                var $btn = $(\"#theme-settings-done-btn\")[0];\n\n                // Make sure that the font size is expressed in terms\n                // we can handle (px or em). If not, 'done' button is\n                // disabled until input has been corrected.\n\n                if (target.checkValidity() === true) {\n                    $btn.disabled = false;\n                    newSettings[\"fontSize\"] = targetValue;\n                } else {\n                    $btn.disabled = true;\n                }\n            })\n            .on(\"input\", \"[data-target='fontFamily']\", function () {\n                var targetValue = $(this).val();\n                newSettings[\"fontFamily\"] = targetValue;\n            })\n            .on(\"change\", \"select\", function () {\n                var $target = $(\":selected\", this);\n                var attr = $target.attr(\"data-target\");\n\n                if (attr) {\n                    prefs.set(attr, $target.val());\n                }\n            });\n\n        Dialogs.showModalDialogUsingTemplate($template).done(function (id) {\n            var setterFn;\n\n            if (id === \"save\") {\n                // Go through each new setting and apply it\n                Object.keys(newSettings).forEach(function (setting) {\n                    if (DEFAULTS.hasOwnProperty(setting)) {\n                        prefs.set(setting, newSettings[setting]);\n                    } else {\n                        // Figure out if the setting is in the ViewCommandHandlers, which means it is\n                        // a font setting\n                        setterFn = \"set\" + setting[0].toLocaleUpperCase() + setting.substr(1);\n                        if (typeof ViewCommandHandlers[setterFn] === \"function\") {\n                            ViewCommandHandlers[setterFn](newSettings[setting]);\n                        }\n                    }\n                });\n            } else if (id === \"cancel\") {\n                // Make sure we revert any changes to theme selection\n                prefs.set(\"theme\", currentSettings.theme);\n            }\n        });\n    }\n\n    /**\n     * Interface to set the themes that are available to chose from in the setting dialog\n     * @param {ThemeManager.Theme} themes is a collection of themes created by the ThemeManager\n     */\n    function setThemes(themes) {\n        loadedThemes = themes;\n    }\n\n    /**\n     * Restores themes to factory settings.\n     */\n    function restore() {\n        prefs.set(\"theme\", DEFAULTS.theme);\n        prefs.set(\"themeScrollbars\", DEFAULTS.themeScrollbars);\n    }\n\n    prefs.definePreference(\"theme\", \"string\", DEFAULTS.theme, {\n        description: Strings.DESCRIPTION_THEME\n    });\n    prefs.definePreference(\"themeScrollbars\", \"boolean\", DEFAULTS.themeScrollbars, {\n        description: Strings.DESCRIPTION_USE_THEME_SCROLLBARS\n    });\n\n    exports.DEFAULTS   = DEFAULTS;\n    exports._setThemes = setThemes;\n    exports.restore    = restore;\n    exports.showDialog = showDialog;\n});\n"],"file":"ThemeSettings.js"}