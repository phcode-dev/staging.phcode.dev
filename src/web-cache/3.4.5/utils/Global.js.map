{"version":3,"sources":["utils/Global.js"],"names":["define","require","exports","module","configJSON","UrlParams","Fn","global","Function","brackets","appshell","params","parse","metadata","JSON","config","err","console","log","nativeMenus","isLocaleDefault","PhStore","getItem","getLocale","get","s","contexts","_","locale","setLocale","setItem","removeItem","app","Phoenix","libRequire","getModule","_getGlobalRequireJSConfig"],"mappings":"AA2BAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,WAAcH,QAAQ,oBACtBI,UAAcJ,QAAQ,mBAAmBI,UAQzCC,GAAeC,OAAS,IAAnBC,SAA2B,cAAR,GACvBD,OAAOE,WAMJF,OAAOG,SACPH,OAAOE,SAAWF,OAAOG,SAEzBH,OAAOE,SAAW,IAK1B,IAAIE,OAAS,IAAIN,UACjBM,OAAOC,QAGP,IACIL,OAAOE,SAASI,SAAWC,KAAKF,MAAMR,YACtCG,OAAOE,SAASM,OAASR,OAAOE,SAASI,SAASE,OACpD,MAAOC,KACLC,QAAQC,IAAIF,KAGhBT,OAAOE,SAASU,aAAc,EAG9BZ,OAAOE,SAASW,gBAAkB,WAC9B,OAAQb,OAAOc,QAAQC,QAAQ,WAGnCf,OAAOE,SAASc,UAAY,WAExB,OAAOZ,OAAOa,IAAI,mBAAqB,KAAQjB,OAAOc,QAAQC,QAAQ,WAAaf,OAAON,QAAQwB,EAAEC,SAASC,EAAEZ,OAAOa,QAG1HrB,OAAOE,SAASoB,UAAY,SAAUD,QAC9BA,OACArB,OAAOc,QAAQS,QAAQ,SAAUF,QAEjCrB,OAAOc,QAAQU,WAAW,WAK7BxB,OAAOE,SAASuB,MACjBzB,OAAOE,SAASuB,IAAMzB,OAAO0B,QAAQD,KAQzCzB,OAAOE,SAASyB,WAAa3B,OAAON,QAOpCM,OAAOE,SAAS0B,UAAYlC,QAK5BM,OAAOE,SAAS2B,0BAA4B,WACxC,OAAO7B,OAAON,QAAQwB,EAAEC,SAASC,EAAEZ,QAGvCb,QAAQK,OAASA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Initializes the global \"brackets\" variable and it's properties.\n * Modules should not access the global.brackets object until either\n * (a) the module requires this module, i.e. require(\"utils/Global\") or\n * (b) the module receives a \"appReady\" callback from the utils/AppReady module.\n */\ndefine(function (require, exports, module) {\n\n\n    var configJSON  = require(\"text!config.json\"),\n        UrlParams   = require(\"utils/UrlParams\").UrlParams;\n\n    // Define core brackets namespace if it isn't already defined\n    //\n    // We can't simply do 'brackets = {}' to define it in the global namespace because\n    // we're in \"use strict\" mode. Most likely, 'window' will always point to the global\n    // object when this code is running. However, in case it isn't (e.g. if we're running\n    // inside Node for CI testing) we use this trick to get the global object.\n    var Fn = Function, global = (new Fn(\"return this\"))();\n    if (!global.brackets) {\n\n        // Earlier brackets object was initialized at\n        // https://github.com/adobe/brackets-shell/blob/908ed1503995c1b5ae013473c4b181a9aa64fd22/appshell/appshell_extensions.js#L945.\n        // With the newer versions of CEF, the initialization was crashing the render process, citing\n        // JS eval error. So moved the brackets object initialization from appshell_extensions.js to here.\n        if (global.appshell) {\n            global.brackets = global.appshell;\n        } else {\n            global.brackets = {};\n        }\n    }\n\n    // Parse URL params\n    var params = new UrlParams();\n    params.parse();\n\n    // Parse src/config.json\n    try {\n        global.brackets.metadata = JSON.parse(configJSON);\n        global.brackets.config = global.brackets.metadata.config;\n    } catch (err) {\n        console.log(err);\n    }\n\n    global.brackets.nativeMenus = false;\n\n    // Locale-related APIs\n    global.brackets.isLocaleDefault = function () {\n        return !global.PhStore.getItem(\"locale\");\n    };\n\n    global.brackets.getLocale = function () {\n        // By default use the locale that was determined in brackets.js\n        return params.get(\"testEnvironment\") ? \"en\" : (global.PhStore.getItem(\"locale\") || global.require.s.contexts._.config.locale);\n    };\n\n    global.brackets.setLocale = function (locale) {\n        if (locale) {\n            global.PhStore.setItem(\"locale\", locale);\n        } else {\n            global.PhStore.removeItem(\"locale\");\n        }\n    };\n\n    // Create empty app namespace if running in-browser\n    if (!global.brackets.app) {\n        global.brackets.app = global.Phoenix.app;\n    }\n\n    // Loading extensions requires creating new require.js contexts, which\n    // requires access to the global 'require' object that always gets hidden\n    // by the 'require' in the AMD wrapper. We store this in the brackets\n    // object here so that the ExtensionLoader doesn't have to have access to\n    // the global object.\n    global.brackets.libRequire = global.require;\n\n    // Also store our current require.js context (the one that loads brackets\n    // core modules) so that extensions can use it.\n    // Note: we change the name to \"getModule\" because this won't do exactly\n    // the same thing as 'require' in AMD-wrapped modules. The extension will\n    // only be able to load modules that have already been loaded once.\n    global.brackets.getModule = require;\n\n    /* API for retrieving the global RequireJS config\n     * For internal use only\n     */\n    global.brackets._getGlobalRequireJSConfig = function () {\n        return global.require.s.contexts._.config;\n    };\n\n    exports.global = global;\n});\n"],"file":"Global.js"}