{"version":3,"sources":["project/WorkingSetView.js"],"names":["define","require","exports","module","AppInit","DocumentManager","MainViewManager","CommandManager","Commands","Menus","FileViewController","ViewUtils","KeyEvent","paneListTemplate","Strings","_","Mustache","_views","_iconProviders","_contextEntry","_classProviders","$workingFilesContainer","LEFT_BUTTON","MIDDLE_BUTTON","_FILE_KEY","NOMANSLAND","NOMOVEITEM","ABOVEITEM","BELOWITEM","TOPSCROLL","BOTSCROLL","BELOWVIEW","ABOVEVIEW","_DRAG_MOVE_DETECTION_START","refresh","rebuild","forEach","view","top","$openFilesContainer","scrollTop","_rebuildViewList","_redraw","syncSelectionIndicator","triggerHandler","_updateListItemSelection","listItem","selectedFile","shouldBeSelected","$","data","fullPath","toggleClass","_isOpenAndDirty","file","docIfOpen","getOpenDocumentForPath","isDirty","_hasSelectionFocus","getFileSelectionFocus","WORKING_SET_VIEW","_suppressSortRedrawForAllViews","suppress","suppressSortRedraw","_suppressScrollShadowsOnAllViews","disable","removeScrollerShadow","scrollHeight","clientHeight","addScrollerShadow","_deactivateAllViews","deactivate","$el","hasClass","removeClass","addClass","$openFilesList","trigger","_fireSelectionChanged","_viewFromEl","parents","id","attr","match","pop","_makeDraggable","interval","sourceFile","endScroll","window","clearInterval","undefined","scroll","$container","dir","callback","container","maxScroll","setInterval","mousedown","e","scrollDir","dragged","startPageY","pageY","lastPageY","lastHit","where","tryClosing","target","currentFile","getCurrentlyViewedFile","activePaneId","getActivePaneId","activeView","sourceView","currentView","startingIndex","index","itemHeight","offset","$copy","$ghost","draggingCurrentFile","initDragging","height","clone","append","css","paneId","left","width","appendTo","updateContext","hit","which","hitTest","direction","result","lookCount","hasScroller","onTopScroller","onBottomScroller","$hit","$item","$view","gTop","gHeight","gBottom","containerOffset","scrollerTopArea","scrollerBottomArea","pageX","hide","document","elementFromPoint","closest","show","children","length","bottom","next","prev","mouseIsInTopHalf","$elem","ghostIsAbove","checkVal","ghostIsBelow","elIsClearBelow","$a","$b","aTop","bTop","draggingBelowWorkingSet","targetIsContainer","is","parent","targetIsNoDrop","findViewFor","$prev","$next","scrollCurrentViewToBottom","preDropCleanup","onmousewheel","off","find","remove","postDropCleanup","noRefresh","focusActivePane","drop","execute","FILE_CLOSE","always","setFileViewFocus","FILE_OPEN","_moveWorkingSetItem","_getPane","getViewForPath","_moveView","on","drag","_findListItemFromFile","opacity","insertBefore","insertAfter","prependTo","Math","abs","stopPropagation","preventDefault","keyCode","DOM_VK_ESCAPE","closeAll","ctrlKey","brackets","platform","WorkingSetView","this","$header","render","extend","init","createWorkingSetViewForPane","addIconProvider","priority","push","sort","cb1","cb2","addClassProvider","useIconProviders","$element","provider","icon","prepend","console","error","useClassProviders","succeededPriority","classToApply","getContext","prototype","_updateVisibility","fileList","getWorkingSet","getPaneCount","$workingSetListViewHeader","_checkForDuplicatesInWorkingTree","_handlePaneLayoutChange","$titleEl","title","WORKING_FILES","getPaneTitle","text","items","each","$listItem","_makeEventName","name","_scrollSelectedFileIntoView","$selectedFile","scrollElementIntoView","scrollIntoView","reveal","_adjustForScrollbars","_addDirectoryNamesToWorkingTreeFiles","filesList","displayPaths","getDirNamesForDuplicateFiles","$li","io","indexOf","dirSplit","split","$dir","html","self","map","ALL_PANES","displayHtml","getFileEntryDisplay","value","_updateViewState","_updateItemClasses","_handleActivePaneChange","_updateFileStatusIcon","listElement","canClose","$fileStatusIcon","showIcon","isFile","_createNewListItem","$link","$newItem","hover","forceRedraw","empty","_updateListSelection","_handleFileAdded","fileAdded","_handleFileListAdded","files","_handleFileRemoved","suppressRedraw","$nextListItem","_handleRemoveList","_handleWorkingSetSort","_handleDirtyFlagChanged","doc","_handleWorkingSetUpdate","bind","sidebarList","getContextMenu","ContextMenuIds","WORKING_SET_CONTEXT_MENU","open","destroy","htmlReady"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * WorkingSetView generates the UI for the list of the files user is editing based on the model provided by EditorManager.\n * The UI allows the user to see what files are open/dirty and allows them to close files and specify the current editor.\n *\n */\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var AppInit               = require(\"utils/AppInit\"),\n        DocumentManager       = require(\"document/DocumentManager\"),\n        MainViewManager       = require(\"view/MainViewManager\"),\n        CommandManager        = require(\"command/CommandManager\"),\n        Commands              = require(\"command/Commands\"),\n        Menus                 = require(\"command/Menus\"),\n        FileViewController    = require(\"project/FileViewController\"),\n        ViewUtils             = require(\"utils/ViewUtils\"),\n        KeyEvent              = require(\"utils/KeyEvent\"),\n        paneListTemplate      = require(\"text!htmlContent/working-set.html\"),\n        Strings               = require(\"strings\"),\n        _                     = require(\"thirdparty/lodash\"),\n        Mustache              = require(\"thirdparty/mustache/mustache\");\n\n    /**\n     * Open view dictionary\n     * Maps PaneId to WorkingSetView\n     * @private\n     * @type {Object.<string, WorkingSetView>}\n     */\n    var _views = {};\n\n    /**\n     * Icon Providers\n     * @see {@link #addIconProvider}\n     * @private\n     */\n    var _iconProviders = [];\n\n    /**\n     * The file/folder object of the current context\n     * @type {FileSystemEntry}\n     * @private\n     */\n    var _contextEntry;\n\n    /**\n     * Class Providers\n     * @see {@link #addClassProvider}\n     * @private\n     */\n    var _classProviders = [];\n\n\n    /**\n     * #working-set-list-container\n     * @type {jQuery}\n     */\n    var $workingFilesContainer;\n\n    /**\n     * Constants for event.which values\n     * @enum {number}\n     */\n    var LEFT_BUTTON = 1,\n        MIDDLE_BUTTON = 2;\n\n    /**\n     * Each list item in the working set stores a references to the related document in the list item's data.\n     *  Use `listItem.data(_FILE_KEY)` to get the document reference\n     * @type {string}\n     * @private\n     */\n    var _FILE_KEY = \"file\";\n\n    /**\n     * Constants for hitTest.where\n     * @enum {string}\n     */\n    var NOMANSLAND = \"nomansland\",\n        NOMOVEITEM = \"nomoveitem\",\n        ABOVEITEM  = \"aboveitem\",\n        BELOWITEM  = \"belowitem\",\n        TOPSCROLL  = \"topscroll\",\n        BOTSCROLL  = \"bottomscroll\",\n        BELOWVIEW  = \"belowview\",\n        ABOVEVIEW  = \"aboveview\";\n\n    /**\n     * Drag an item has to move 3px before dragging starts\n     * @constant\n     */\n    var _DRAG_MOVE_DETECTION_START = 3;\n\n    /**\n     * Refreshes all Pane View List Views\n     */\n    function refresh(rebuild) {\n        _.forEach(_views, function (view) {\n            var top = view.$openFilesContainer.scrollTop();\n            if (rebuild) {\n                view._rebuildViewList(true);\n            } else {\n                view._redraw();\n            }\n            view.$openFilesContainer.scrollTop(top);\n        });\n    }\n\n    /**\n     * Synchronizes the selection indicator for all views\n     */\n    function syncSelectionIndicator() {\n        _.forEach(_views, function (view) {\n            view.$openFilesContainer.triggerHandler(\"scroll\");\n        });\n    }\n\n    /**\n     * Updates the appearance of the list element based on the parameters provided.\n     * @private\n     * @param {!HTMLLIElement} listElement\n     * @param {?File} selectedFile\n     */\n    function _updateListItemSelection(listItem, selectedFile) {\n        var shouldBeSelected = (selectedFile && $(listItem).data(_FILE_KEY).fullPath === selectedFile.fullPath);\n        ViewUtils.toggleClass($(listItem), \"selected\", shouldBeSelected);\n    }\n\n    /**\n     * Determines if a file is dirty\n     * @private\n     * @param {!File} file - file to test\n     * @return {boolean} true if the file is dirty, false otherwise\n     */\n    function _isOpenAndDirty(file) {\n        // working set item might never have been opened; if so, then it's definitely not dirty\n        var docIfOpen = DocumentManager.getOpenDocumentForPath(file.fullPath);\n        return (docIfOpen && docIfOpen.isDirty);\n    }\n\n\n    function _hasSelectionFocus() {\n        return FileViewController.getFileSelectionFocus() === FileViewController.WORKING_SET_VIEW;\n    }\n\n    /**\n     * Turns on/off the flag which suppresses rebuilding of the working set\n     * when the \"workingSetSort\" event is dispatched from MainViewManager.\n     * Only used while dragging things around in the working set to disable\n     * rebuilding the list while dragging.\n     * @private\n     * @param {boolean} suppress - true suppress, false to allow sort redrawing\n     */\n    function _suppressSortRedrawForAllViews(suppress) {\n        _.forEach(_views, function (view) {\n            view.suppressSortRedraw = suppress;\n        });\n    }\n\n    /**\n     * turns off the scroll shadow on view containers so they don't interfere with dragging\n     * @private\n     * @param {Boolean} disable - true to disable, false to enable\n     */\n    function _suppressScrollShadowsOnAllViews(disable) {\n        _.forEach(_views, function (view) {\n            if (disable) {\n                ViewUtils.removeScrollerShadow(view.$openFilesContainer[0], null);\n            } else if (view.$openFilesContainer[0].scrollHeight > view.$openFilesContainer[0].clientHeight) {\n                ViewUtils.addScrollerShadow(view.$openFilesContainer[0], null, true);\n            }\n        });\n    }\n\n    /**\n     * Deactivates all views so the selection marker does not show\n     * @private\n     * @param {Boolean} deactivate - true to deactivate, false to reactivate\n     */\n    function _deactivateAllViews(deactivate) {\n        _.forEach(_views, function (view) {\n            if (deactivate) {\n                if (view.$el.hasClass(\"active\")) {\n                    view.$el.removeClass(\"active\").addClass(\"reactivate\");\n                    view.$openFilesList.trigger(\"selectionHide\");\n                }\n            } else {\n                if (view.$el.hasClass(\"reactivate\")) {\n                    view.$el.removeClass(\"reactivate\").addClass(\"active\");\n                }\n                // don't update the scroll pos\n                view._fireSelectionChanged(false);\n            }\n        });\n    }\n\n    /**\n     * Finds the WorkingSetView object for the specified element\n     * @private\n     * @param {jQuery} $el - the element to find the view for\n     * @return {View} view object\n     */\n    function _viewFromEl($el) {\n        if (!$el.hasClass(\"working-set-view\")) {\n            $el = $el.parents(\".working-set-view\");\n        }\n\n        var id = $el.attr(\"id\").match(/working\\-set\\-list\\-([\\w]+[\\w\\d\\-\\.\\:\\_]*)/).pop();\n        return _views[id];\n    }\n\n    /**\n     * Makes the specified element draggable\n     * @private\n     * @param {jQuery} $el - the element to make draggable\n     */\n    function _makeDraggable($el) {\n        var interval,\n            sourceFile = $el.data(_FILE_KEY);\n\n        // turn off the \"hover-scroll\"\n        function endScroll($el) {\n            if (interval) {\n                window.clearInterval(interval);\n                interval = undefined;\n            }\n        }\n\n        //  We scroll the list while hovering over the first or last visible list element\n        //  in the working set, so that positioning a working set item before or after one\n        //  that has been scrolled out of view can be performed.\n        //\n        //  This function will call the drag interface repeatedly on an interval to allow\n        //  the item to be dragged while scrolling the list until the mouse is moved off\n        //  the first or last item or endScroll is called\n        function scroll($container, $el, dir, callback) {\n            var container = $container[0],\n                maxScroll = container.scrollHeight - container.clientHeight;\n            if (maxScroll && dir && !interval) {\n                // Scroll view if the mouse is over the first or last pixels of the container\n                interval = window.setInterval(function () {\n                    var scrollTop = $container.scrollTop();\n                    if ((dir === -1 && scrollTop <= 0) || (dir === 1 && scrollTop >= maxScroll)) {\n                        endScroll($el);\n                    } else {\n                        $container.scrollTop(scrollTop + 7 * dir);\n                        callback($el);\n                    }\n                }, 50);\n            }\n        }\n\n        // The mouse down handler pretty much handles everything\n        $el.mousedown(function (e) {\n            var scrollDir = 0,\n                dragged = false,\n                startPageY = e.pageY,\n                lastPageY = startPageY,\n                lastHit = { where: NOMANSLAND },\n                tryClosing = $(e.target).hasClass(\"can-close\"),\n                currentFile = MainViewManager.getCurrentlyViewedFile(),\n                activePaneId = MainViewManager.getActivePaneId(),\n                activeView = _views[activePaneId],\n                sourceView = _viewFromEl($el),\n                currentView = sourceView,\n                startingIndex = $el.index(),\n                itemHeight,\n                offset,\n                $copy,\n                $ghost,\n                draggingCurrentFile;\n\n            function initDragging() {\n                itemHeight = $el.height();\n                offset = $el.offset();\n                $copy = $el.clone();\n                $ghost = $(\"<div class='open-files-container wsv-drag-ghost' style='overflow: hidden; display: inline-block;'>\").append($(\"<ul>\").append($copy).css(\"padding\", \"0\"));\n                draggingCurrentFile = ($el.hasClass(\"selected\") && sourceView.paneId === activePaneId);\n\n                // setup our ghost element as position absolute\n                //  so we can put it wherever we want to while dragging\n                if (draggingCurrentFile && _hasSelectionFocus()) {\n                    $ghost.addClass(\"dragging-current-file\");\n                }\n\n                $ghost.css({\n                    top: offset.top,\n                    left: offset.left,\n                    width: $el.width() + 8\n                });\n\n                // this will give the element the appearence that it's ghosted if the user\n                //  drags the element out of the view and goes off into no mans land\n                $ghost.appendTo($(\"body\"));\n            }\n\n            // Switches the view context to match the hit context\n            function updateContext(hit) {\n                // just set the container and update\n                currentView = _viewFromEl(hit.which);\n            }\n\n            // Determines where the mouse hit was\n            function hitTest(e) {\n                var pageY = $ghost.offset().top,\n                    direction =  e.pageY - lastPageY,\n                    result = {\n                        where: NOMANSLAND\n                    },\n                    lookCount = 0,\n                    hasScroller = false,\n                    onTopScroller = false,\n                    onBottomScroller = false,\n                    $container,\n                    $hit,\n                    $item,\n                    $view,\n                    gTop,\n                    gHeight,\n                    gBottom,\n                    containerOffset,\n                    scrollerTopArea,\n                    scrollerBottomArea;\n\n                // if the mouse is outside of the view then\n                //  return nomansland -- this prevents some UI glitches\n                //  that appear when dragging onto a second monitor\n                if (e.pageX < 0 || e.pageX > $workingFilesContainer.width()) {\n                    return result;\n                }\n\n                do {\n                    // Turn off the ghost so elementFromPoint ignores it\n                    $ghost.hide();\n\n                    $hit = $(window.document.elementFromPoint(e.pageX, pageY));\n                    $view = $hit.closest(\".working-set-view\");\n                    $item = $hit.closest(\"#working-set-list-container li\");\n\n                    // Show the ghost again\n                    $ghost.show();\n\n                    $container = $view.children(\".open-files-container\");\n\n                    if ($container.length) {\n                        containerOffset = $container.offset();\n\n                        // Compute \"scrollMe\" regions\n                        scrollerTopArea = { top: containerOffset.top - 14,\n                            bottom: containerOffset.top + 7};\n\n                        scrollerBottomArea = { top: containerOffset.top + $container.height() - 7,\n                            bottom: containerOffset.top + $container.height() + 14};\n                    }\n\n                    // If we hit ourself then look for another\n                    //  element to insert before/after\n                    if ($item[0] === $el[0]) {\n                        if (direction > 0) {\n                            $item = $item.next();\n                            if ($item.length) {\n                                pageY += itemHeight;\n                            }\n                        } else {\n                            $item = $item.prev();\n                            if ($item.length) {\n                                pageY -= itemHeight;\n                            }\n                        }\n                    }\n\n                    // If we didn't hit anything then\n                    //  back up and try again in the other direction\n                    if (!$item.length) {\n                        pageY += itemHeight;\n                    }\n\n                    // look one more time below the mouse\n                    //  if we didn't get a hit\n                } while (!$item.length && ++lookCount < 2);\n\n                // if we hit a span or an anchor tag and didn't\n                //  find an item then force the selection hit to\n                //  the item so we can bail out on the scrollMe\n                //  region at the top and bottom of the list\n                if ($item.length === 0 && ($hit.is(\"a\") || $hit.is(\"span\"))) {\n                    $item = $hit.parents(\"#working-set-list-container li\");\n                }\n\n                // compute ghost location, we compute the insertion point based\n                //  on where the ghost is, not where the  mouse is\n                gTop = $ghost.offset().top;\n                gHeight = $ghost.height();\n                gBottom = gTop + gHeight;\n\n                // data to help us determine if we have a scroller\n                hasScroller = $item.length && $container.length && $container[0].scrollHeight > $container[0].clientHeight;\n\n                // data to help determine if the ghost is in either of the scrollMe regions\n                onTopScroller = hasScroller && scrollerTopArea && ((gTop >= scrollerTopArea.top && gTop <= scrollerTopArea.bottom)  ||\n                                                    (gBottom >= scrollerTopArea.top && gBottom <= scrollerTopArea.bottom));\n                onBottomScroller = hasScroller && scrollerBottomArea && ((gTop >= scrollerBottomArea.top && gTop <= scrollerBottomArea.bottom) ||\n                                                         (gBottom >= scrollerBottomArea.top && gBottom <= scrollerBottomArea.bottom));\n\n\n                // helpers\n                function mouseIsInTopHalf($elem) {\n                    var top = $elem.offset().top,\n                        height = $elem.height();\n\n                    return (pageY < top + (height / 2));\n                }\n\n                function ghostIsAbove($elem) {\n                    var top = $elem.offset().top,\n                        checkVal = gTop;\n\n                    if (direction > 0) {\n                        checkVal += gHeight;\n                    }\n\n                    return (checkVal <=  (top + (itemHeight / 2)));\n                }\n\n                function ghostIsBelow($elem) {\n                    var top = $elem.offset().top,\n                        checkVal = gTop;\n\n                    if (direction > 0) {\n                        checkVal += gHeight;\n                    }\n\n                    return (checkVal >= (top + (itemHeight / 2)));\n                }\n\n                function elIsClearBelow($a, $b) {\n                    var aTop = $a.offset().top,\n                        bTop = $b.offset().top;\n\n                    return (aTop >= bTop + $b.height());\n                }\n\n                function draggingBelowWorkingSet() {\n                    return ($hit.length === 0 || elIsClearBelow($hit, $workingFilesContainer));\n                }\n\n                function targetIsContainer() {\n                    return ($hit.is(\".working-set-view\") ||\n                            $hit.is(\".open-files-container\") ||\n                            ($hit.is(\"ul\") && $hit.parent().is(\".open-files-container\")));\n                }\n\n                function targetIsNoDrop() {\n                    return $hit.is(\".working-set-header\") ||\n                           $hit.is(\".working-set-header-title\") ||\n                           $hit.is(\".scroller-shadow\") ||\n                           $hit.is(\".scroller-shadow\");\n                }\n\n                function findViewFor($elem) {\n                    if ($elem.is(\".working-set-view\")) {\n                        return $elem;\n                    }\n                    return $elem.parents(\".working-set-view\");\n                }\n\n                if ($item.length) {\n                    // We hit an item (li)\n                    if (onTopScroller && (direction <= 0 || lastHit.where === TOPSCROLL)) {\n                        result = {\n                            where: TOPSCROLL,\n                            which: $item\n                        };\n                    } else if (onBottomScroller && (direction >= 0 || lastHit.where === BOTSCROLL)) {\n                        result = {\n                            where: BOTSCROLL,\n                            which: $item\n                        };\n                    } else if (ghostIsAbove($item)) {\n                        result = {\n                            where: ABOVEITEM,\n                            which: $item\n                        };\n                    } else if (ghostIsBelow($item)) {\n                        result = {\n                            where: BELOWITEM,\n                            which: $item\n                        };\n                    }\n                } else if ($el.parent()[0] !== $hit[0]) {\n                    // Didn't hit an li, figure out\n                    //  where to go from here\n                    $view = $el.parents(\".working-set-view\");\n\n                    if (targetIsNoDrop()) {\n                        if (direction < 0) {\n                            if (ghostIsBelow($hit)) {\n                                return result;\n                            }\n                        } else {\n                            return result;\n                        }\n                    }\n\n                    if (draggingBelowWorkingSet()) {\n                        return result;\n                    }\n\n                    if (targetIsContainer()) {\n                        if (mouseIsInTopHalf($hit)) {\n                            result = {\n                                where: ABOVEVIEW,\n                                which: findViewFor($hit)\n                            };\n                        } else {\n                            result = {\n                                where: BELOWVIEW,\n                                which: findViewFor($hit)\n                            };\n                        }\n                        return result;\n                    }\n\n                    // Data to determine to help determine if we should\n                    //  append to the previous or prepend to the next\n                    var $prev = $view.prev(),\n                        $next = $view.next();\n\n                    if (direction < 0) {\n                        // moving up, if there is a view above\n                        //  then we want to append to the view above\n                        // otherwise we're in nomandsland\n                        if ($prev.length) {\n                            result = {\n                                where: BELOWVIEW,\n                                which: $prev\n                            };\n                        }\n                    } else if (direction > 0) {\n                        // moving down, if there is a view below\n                        // then we want to append to the view below\n                        //  otherwise we're in nomandsland\n                        if ($next.length) {\n                            result = {\n                                where: ABOVEVIEW,\n                                which: $next\n                            };\n                        }\n                    } else if (mouseIsInTopHalf($view)) {\n                        // we're inside the top half of\n                        //  a view so prepend to the view we hit\n                        result = {\n                            where: ABOVEVIEW,\n                            which: $view\n                        };\n                    } else {\n                        // we're inside the bottom half of\n                        //  a view so append to the view we hit\n                        result = {\n                            where: BELOWVIEW,\n                            which: $view\n                        };\n                    }\n                } else {\n                    // The item doesn't need updating\n                    result = {\n                        where: NOMOVEITEM,\n                        which: $hit\n                    };\n                }\n\n                return result;\n            }\n\n            // mouse move handler -- this pretty much does\n            //  the heavy lifting for dragging the item around\n            $(window).on(\"mousemove.wsvdragging\", function (e) {\n                // The drag function\n                function drag(e) {\n                    if (!dragged) {\n                        initDragging();\n                        // sort redraw and scroll shadows\n                        //  cause problems during drag so disable them\n                        _suppressSortRedrawForAllViews(true);\n                        _suppressScrollShadowsOnAllViews(true);\n\n                        // remove the \"active\" class to remove the\n                        //  selection indicator so we don't have to\n                        //  keep it in sync while we're dragging\n                        _deactivateAllViews(true);\n\n                        // add a \"dragging\" class to the outer container\n                        $workingFilesContainer.addClass(\"dragging\");\n\n                        // add a class to the element we're dragging if\n                        //  it's the currently selected file so that we\n                        //  can show it as selected while dragging\n                        if (!draggingCurrentFile && FileViewController.getFileSelectionFocus() === FileViewController.WORKING_SET_VIEW) {\n                            $(activeView._findListItemFromFile(currentFile)).addClass(\"drag-show-as-selected\");\n                        }\n\n                        // we've dragged the item so set\n                        //  dragged to true so we don't try and open it\n                        dragged = true;\n                    }\n\n                    // reset the scrolling direction to no-scroll\n                    scrollDir = 0;\n\n                    // Find out where to to drag it to\n                    lastHit = hitTest(e);\n\n                    // if the drag goes into nomansland then\n                    //  drop the opacity on the drag affordance\n                    //  and show the inserted item at reduced opacity\n                    switch (lastHit.where) {\n                    case NOMANSLAND:\n                    case BELOWVIEW:\n                    case ABOVEVIEW:\n                        $el.css({opacity: \".75\"});\n                        $ghost.css(\"opacity\", \".25\");\n                        break;\n                    default:\n                        $el.css({opacity: \".0001\"});\n                        $ghost.css(\"opacity\", \"\");\n                        break;\n                    }\n\n                    // now do the insertion\n                    switch (lastHit.where) {\n                    case TOPSCROLL:\n                    case ABOVEITEM:\n                        if (lastHit.where === TOPSCROLL) {\n                            scrollDir = -1;\n                        }\n                        $el.insertBefore(lastHit.which);\n                        updateContext(lastHit);\n                        break;\n                    case BOTSCROLL:\n                    case BELOWITEM:\n                        if (lastHit.where === BOTSCROLL) {\n                            scrollDir = 1;\n                        }\n                        $el.insertAfter(lastHit.which);\n                        updateContext(lastHit);\n                        break;\n                    case BELOWVIEW:\n                        $el.appendTo(lastHit.which.find(\"ul\"));\n                        updateContext(lastHit);\n                        break;\n                    case ABOVEVIEW:\n                        $el.prependTo(lastHit.which.find(\"ul\"));\n                        updateContext(lastHit);\n                        break;\n                    }\n\n                    // we need to scroll\n                    if (scrollDir) {\n                        // we're in range to scroll\n                        scroll(currentView.$openFilesContainer, $el, scrollDir, function () {\n                            // as we scroll, recompute the element and insert\n                            //  it before/after the item to drag it in to place\n                            drag(e);\n                        });\n                    } else {\n                        // we've moved away from the top/bottom \"scrolling\" region\n                        endScroll($el);\n                    }\n                }\n\n                // Reposition the drag affordance if we've started dragging\n                if ($ghost) {\n                    $ghost.css(\"top\", $ghost.offset().top + (e.pageY - lastPageY));\n                }\n\n                // if we have't started dragging yet then we wait until\n                //  the mouse has moved 3 pixels before we start dragging\n                //  to avoid the item moving when clicked or double clicked\n                if (dragged || Math.abs(e.pageY - startPageY) > _DRAG_MOVE_DETECTION_START) {\n                    drag(e);\n                }\n\n                lastPageY = e.pageY;\n                e.stopPropagation();\n            });\n\n\n            function scrollCurrentViewToBottom() {\n                var $container = currentView.$openFilesContainer,\n                    container = $container[0],\n                    maxScroll = container.scrollHeight - container.clientHeight;\n\n                if (maxScroll) {\n                    $container.scrollTop(maxScroll);\n                }\n            }\n\n            // Close down the drag operation\n            function preDropCleanup() {\n                window.onmousewheel = window.document.onmousewheel = null;\n                $(window).off(\".wsvdragging\");\n                if (dragged) {\n                    $workingFilesContainer.removeClass(\"dragging\");\n                    $workingFilesContainer.find(\".drag-show-as-selected\").removeClass(\"drag-show-as-selected\");\n                    endScroll($el);\n                    // re-activate the views (adds the \"active\" class to the view that was previously active)\n                    _deactivateAllViews(false);\n                    // turn scroll wheel back on\n                    $ghost.remove();\n                    $el.css(\"opacity\", \"\");\n\n                    if ($el.next().length === 0) {\n                        scrollCurrentViewToBottom();\n                    }\n                }\n            }\n\n            // Final Cleanup\n            function postDropCleanup(noRefresh) {\n                if (dragged) {\n                    // re-enable stuff we turned off\n                    _suppressSortRedrawForAllViews(false);\n                    _suppressScrollShadowsOnAllViews(false);\n                }\n\n                // we don't need to refresh if the item\n                //  was dragged but not enough to not change\n                //  its order in the working set\n                if (!noRefresh) {\n                    // rebuild the view\n                    refresh(true);\n                }\n                // focus the editor\n                MainViewManager.focusActivePane();\n            }\n\n            // Drop\n            function drop() {\n                preDropCleanup();\n                if (sourceView.paneId === currentView.paneId && startingIndex === $el.index()) {\n                    // if the item was dragged but not moved then don't open or close\n                    if (!dragged) {\n                        // Click on close icon, or middle click anywhere - close the item without selecting it first\n                        if (tryClosing || e.which === MIDDLE_BUTTON) {\n                            CommandManager\n                                .execute(Commands.FILE_CLOSE, {file: sourceFile,\n                                    paneId: sourceView.paneId})\n                                .always(function () {\n                                    postDropCleanup();\n                                });\n                        } else {\n                            // Normal right and left click - select the item\n                            FileViewController.setFileViewFocus(FileViewController.WORKING_SET_VIEW);\n                            CommandManager\n                                .execute(Commands.FILE_OPEN, {fullPath: sourceFile.fullPath,\n                                    paneId: currentView.paneId})\n                                .always(function () {\n                                    postDropCleanup();\n                                });\n                        }\n                    } else {\n                        // no need to refresh\n                        postDropCleanup(true);\n                    }\n                } else if (sourceView.paneId === currentView.paneId) {\n                    // item was reordered\n                    MainViewManager._moveWorkingSetItem(sourceView.paneId, startingIndex, $el.index());\n                    postDropCleanup();\n                } else {\n                    // If the same doc view is present in the destination pane prevent drop\n                    if (!MainViewManager._getPane(currentView.paneId).getViewForPath(sourceFile.fullPath)) {\n                        // item was dragged to another working set\n                        MainViewManager._moveView(sourceView.paneId, currentView.paneId, sourceFile, $el.index())\n                            .always(function () {\n                                // if the current document was dragged to another working set\n                                //  then reopen it to make it the currently selected file\n                                if (draggingCurrentFile) {\n                                    CommandManager\n                                        .execute(Commands.FILE_OPEN, {fullPath: sourceFile.fullPath,\n                                            paneId: currentView.paneId})\n                                        .always(function () {\n                                            postDropCleanup();\n                                        });\n                                } else {\n                                    postDropCleanup();\n                                }\n                            });\n                    } else {\n                        postDropCleanup();\n                    }\n                }\n            }\n\n            // prevent working set from grabbing focus no matter what type of click/drag occurs\n            e.preventDefault();\n\n            // initialization\n            $(window).on(\"mouseup.wsvdragging\", function () {\n                drop();\n            });\n\n            // let escape cancel the drag\n            $(window).on(\"keydown.wsvdragging\", function (e) {\n                if (e.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n                    preDropCleanup();\n                    postDropCleanup();\n                    e.stopPropagation();\n                }\n            });\n\n            // turn off scroll wheel\n            window.onmousewheel = window.document.onmousewheel = function (e) {\n                e.preventDefault();\n            };\n\n            // close all menus, and disable sorting\n            Menus.closeAll();\n\n            // Dragging only happens with the left mouse button\n            //  or (on the Mac) when the ctrl key isn't pressed\n            if (e.which !== LEFT_BUTTON || (e.ctrlKey && brackets.platform === \"mac\")) {\n                drop();\n                return;\n            }\n\n\n\n            e.stopPropagation();\n        });\n    }\n\n    /*\n     * WorkingSetView constructor\n     * @constructor\n     * @param {!jQuery} $container - owning container\n     * @param {!string} paneId - paneId of this view pertains to\n     */\n    function WorkingSetView($container, paneId) {\n        var id = \"working-set-list-\" + paneId;\n\n        this.$header = null;\n        this.$openFilesList = null;\n        this.$container = $container;\n        this.$el = $container.append(Mustache.render(paneListTemplate, _.extend({id: id}, Strings))).find(\"#\" + id);\n        this.suppressSortRedraw = false;\n        this.paneId = paneId;\n\n        this.init();\n    }\n\n    /*\n     * Hides or shows the WorkingSetView\n     */\n    WorkingSetView.prototype._updateVisibility = function () {\n        var fileList = MainViewManager.getWorkingSet(this.paneId);\n        if (MainViewManager.getPaneCount() === 1 && (!fileList || fileList.length === 0)) {\n            this.$openFilesContainer.hide();\n            this.$workingSetListViewHeader.hide();\n        } else {\n            this.$openFilesContainer.show();\n            this.$workingSetListViewHeader.show();\n            this._checkForDuplicatesInWorkingTree();\n        }\n    };\n\n    /*\n     * paneLayoutChange event listener\n     * @private\n     */\n    WorkingSetView.prototype._handlePaneLayoutChange = function () {\n        var $titleEl = this.$el.find(\".working-set-header-title\"),\n            title = Strings.WORKING_FILES;\n\n        this._updateVisibility();\n\n        if (MainViewManager.getPaneCount() > 1) {\n            title = MainViewManager.getPaneTitle(this.paneId);\n        }\n\n        $titleEl.text(title);\n    };\n\n    /**\n     * Finds the listItem item assocated with the file. Returns null if not found.\n     * @private\n     * @param {!File} file\n     * @return {HTMLLIItem} returns the DOM element of the item. null if one could not be found\n     */\n    WorkingSetView.prototype._findListItemFromFile = function (file) {\n        var result = null;\n\n        if (file) {\n            var items = this.$openFilesContainer.find(\"ul\").children();\n            items.each(function () {\n                var $listItem = $(this);\n                if ($listItem.data(_FILE_KEY).fullPath === file.fullPath) {\n                    result = $listItem;\n                    return false; // breaks each\n                }\n            });\n        }\n\n        return result;\n    };\n\n    /*\n     * creates a name that is namespaced to this pane\n     * @param {!string} name - name of the event to create.\n     * use an empty string to get just the event name to turn off all events in the namespace\n     * @private\n     */\n    WorkingSetView.prototype._makeEventName = function (name) {\n        return name + \".paneList\" + this.paneId;\n    };\n\n\n    /**\n     * Scrolls the selected file into view\n     * @private\n     */\n    WorkingSetView.prototype._scrollSelectedFileIntoView = function () {\n        if (!_hasSelectionFocus()) {\n            return;\n        }\n\n        var file = MainViewManager.getCurrentlyViewedFile(this.paneId);\n\n        var $selectedFile = this._findListItemFromFile(file);\n        if (!$selectedFile) {\n            return;\n        }\n\n        ViewUtils.scrollElementIntoView(this.$openFilesContainer, $selectedFile, false);\n    };\n\n    /**\n     * Redraw selection when list size changes or DocumentManager currentDocument changes.\n     * @param {boolean=} scrollIntoView = Scrolls the selected item into view (the default behavior)\n     * @private\n     */\n    WorkingSetView.prototype._fireSelectionChanged = function (scrollIntoView) {\n        var reveal = (scrollIntoView === undefined || scrollIntoView === true);\n\n        if (reveal) {\n            this._scrollSelectedFileIntoView();\n        }\n\n        if (_hasSelectionFocus() && this.$el.hasClass(\"active\")) {\n            this.$openFilesList.trigger(\"selectionChanged\", reveal);\n        } else {\n            this.$openFilesList.trigger(\"selectionHide\");\n        }\n        // in-lieu of resize events, manually trigger contentChanged to update scroll shadows\n        this.$openFilesContainer.trigger(\"contentChanged\");\n    };\n\n    /**\n     * adds the style 'vertical-scroll' if a vertical scroll bar is present\n     * @private\n     */\n    WorkingSetView.prototype._adjustForScrollbars = function () {\n        if (this.$openFilesContainer[0].scrollHeight > this.$openFilesContainer[0].clientHeight) {\n            if (!this.$openFilesContainer.hasClass(\"vertical-scroll\")) {\n                this.$openFilesContainer.addClass(\"vertical-scroll\");\n            }\n        } else {\n            this.$openFilesContainer.removeClass(\"vertical-scroll\");\n        }\n    };\n\n    /**\n     * Adds directory names to elements representing passed files in working tree\n     * @private\n     * @param {Array.<File>} filesList - list of Files with the same filename\n     */\n    WorkingSetView.prototype._addDirectoryNamesToWorkingTreeFiles = function (filesList) {\n        // filesList must have at least two files in it for this to make sense\n        if (filesList.length <= 1) {\n            return;\n        }\n\n        var displayPaths = ViewUtils.getDirNamesForDuplicateFiles(filesList);\n\n        // Go through open files and add directories to appropriate entries\n        this.$openFilesContainer.find(\"ul > li\").each(function () {\n            var $li = $(this);\n            var io = filesList.indexOf($li.data(_FILE_KEY));\n            if (io !== -1) {\n                var dirSplit = displayPaths[io].split(\"/\");\n                if (dirSplit.length > 3) {\n                    displayPaths[io] = dirSplit[0] + \"/\\u2026/\" + dirSplit[dirSplit.length - 1];\n                }\n\n                var $dir = $(\"<span class='directory'/>\").html(\" &mdash; \" + displayPaths[io]);\n                $li.children(\"a\").append($dir);\n            }\n        });\n    };\n\n    /**\n     * Looks for files with the same name in the working set\n     * and adds a parent directory name to them\n     * @private\n     */\n    WorkingSetView.prototype._checkForDuplicatesInWorkingTree = function () {\n        var self = this,\n            map = {},\n            fileList = MainViewManager.getWorkingSet(MainViewManager.ALL_PANES);\n\n        // We need to always clear current directories as files could be removed from working tree.\n        this.$openFilesContainer.find(\"ul > li > a > span.directory\").remove();\n\n        // Go through files and fill map with arrays of files.\n        fileList.forEach(function (file) {\n            // Use the same function that is used to create html for file.\n            var displayHtml = ViewUtils.getFileEntryDisplay(file);\n\n            if (!map[displayHtml]) {\n                map[displayHtml] = [];\n            }\n            map[displayHtml].push(file);\n        });\n\n        // Go through the map and solve the arrays with length over 1. Ignore the rest.\n        _.forEach(map, function (value) {\n            if (value.length > 1) {\n                self._addDirectoryNamesToWorkingTreeFiles(value);\n            }\n        });\n    };\n\n    /**\n     * Shows/Hides open files list based on working set content.\n     * @private\n     */\n    WorkingSetView.prototype._redraw = function () {\n        this._updateViewState();\n        this._updateVisibility();\n        this._updateItemClasses();\n        this._adjustForScrollbars();\n        this._fireSelectionChanged();\n    };\n\n    /**\n     * activePaneChange event handler\n     * @private\n     */\n    WorkingSetView.prototype._handleActivePaneChange = function () {\n        this._redraw();\n    };\n\n    /**\n     * Updates the appearance of the list element based on the parameters provided\n     * @private\n     * @param {!HTMLLIElement} listElement\n     * @param {bool} isDirty\n     * @param {bool} canClose\n     */\n    WorkingSetView.prototype._updateFileStatusIcon = function (listElement, isDirty, canClose) {\n        var $fileStatusIcon = listElement.find(\".file-status-icon\"),\n            showIcon = isDirty || canClose;\n\n        // remove icon if its not needed\n        if (!showIcon && $fileStatusIcon.length !== 0) {\n            $fileStatusIcon.remove();\n            $fileStatusIcon = null;\n\n        // create icon if its needed and doesn't exist\n        } else if (showIcon && $fileStatusIcon.length === 0) {\n\n            $fileStatusIcon = $(\"<div class='file-status-icon'></div>\")\n                .prependTo(listElement);\n        }\n\n        // Set icon's class\n        if ($fileStatusIcon) {\n            ViewUtils.toggleClass($fileStatusIcon, \"dirty\", isDirty);\n            ViewUtils.toggleClass($fileStatusIcon, \"can-close\", canClose);\n        }\n    };\n\n    /**\n     * Updates the working set item class list\n     * @private\n     */\n    WorkingSetView.prototype._updateItemClasses = function () {\n        if (_classProviders.length > 0) {\n            this.$openFilesContainer.find(\"ul > li\").each(function () {\n                var $li = $(this),\n                    file = $li.data(_FILE_KEY),\n                    data = {fullPath: file.fullPath,\n                        name: file.name,\n                        isFile: file.isFile};\n                _classProviders.forEach(function (provider) {\n                    $li.addClass(provider(data));\n                });\n            });\n        }\n    };\n\n    /**\n     * Builds the UI for a new list item and inserts in into the end of the list\n     * @private\n     * @param {File} file\n     * @return {HTMLLIElement} newListItem\n     */\n    WorkingSetView.prototype._createNewListItem = function (file) {\n        var self = this,\n            selectedFile = MainViewManager.getCurrentlyViewedFile(this.paneId),\n            data = {fullPath: file.fullPath,\n                name: file.name,\n                isFile: file.isFile};\n\n        // Create new list item with a link\n        var $link = $(\"<a href='#'></a>\").html(ViewUtils.getFileEntryDisplay(file));\n\n        for(let provider of _iconProviders){\n            try{\n                let icon = provider(data);\n                if (icon) {\n                    $link.prepend($(icon));\n                    break;\n                }\n            } catch (e) {\n                console.error(\"Failed to create workingset file icon: \", e);\n            }\n        }\n\n        var $newItem = $(\"<li></li>\")\n            .append($link)\n            .data(_FILE_KEY, file);\n\n        this.$openFilesContainer.find(\"ul\").append($newItem);\n\n        _classProviders.forEach(function (provider) {\n            $newItem.addClass(provider(data));\n        });\n\n        // Update the listItem's apperance\n        this._updateFileStatusIcon($newItem, _isOpenAndDirty(file), false);\n        _updateListItemSelection($newItem, selectedFile);\n        _makeDraggable($newItem);\n\n        $newItem.hover(\n            function () {\n                self._updateFileStatusIcon($(this), _isOpenAndDirty(file), true);\n            },\n            function () {\n                self._updateFileStatusIcon($(this), _isOpenAndDirty(file), false);\n            }\n        );\n    };\n\n    /**\n     * Deletes all the list items in the view and rebuilds them from the working set model\n     * @private\n     */\n    WorkingSetView.prototype._rebuildViewList = function (forceRedraw) {\n        var self = this,\n            fileList = MainViewManager.getWorkingSet(this.paneId);\n\n        this.$openFilesContainer.find(\"ul\").empty();\n\n        fileList.forEach(function (file) {\n            self._createNewListItem(file);\n        });\n\n        if (forceRedraw) {\n            self._redraw();\n        }\n    };\n\n    /**\n     * Updates the pane view's selection state\n     * @private\n     */\n    WorkingSetView.prototype._updateViewState = function () {\n        var paneId = MainViewManager.getActivePaneId();\n        if (_hasSelectionFocus() && paneId === this.paneId) {\n            this.$el.addClass(\"active\");\n            this.$openFilesContainer.addClass(\"active\");\n        } else {\n            this.$el.removeClass(\"active\");\n            this.$openFilesContainer.removeClass(\"active\");\n        }\n    };\n\n    /**\n     * Updates the pane view's selection marker and scrolls the item into view\n     * @private\n     */\n    WorkingSetView.prototype._updateListSelection = function () {\n        var file = MainViewManager.getCurrentlyViewedFile(this.paneId);\n\n        this._updateViewState();\n\n        // Iterate through working set list and update the selection on each\n        this.$openFilesContainer.find(\"ul\").children().each(function () {\n            _updateListItemSelection(this, file);\n        });\n\n        // Make sure selection is in view\n        this._scrollSelectedFileIntoView();\n        this._fireSelectionChanged();\n    };\n\n    /**\n     * workingSetAdd event handler\n     * @private\n     * @param {jQuery.Event} e - event object\n     * @param {!File} fileAdded - the file that was added\n     * @param {!number} index - index where the file was added\n     * @param {!string} paneId - the id of the pane the item that was to\n     */\n    WorkingSetView.prototype._handleFileAdded = function (e, fileAdded, index, paneId) {\n        if (paneId === this.paneId) {\n            this._rebuildViewList(true);\n        } else {\n            this._checkForDuplicatesInWorkingTree();\n        }\n    };\n\n    /**\n     * workingSetAddList event handler\n     * @private\n     * @param {jQuery.Event} e - event object\n     * @param {!Array.<File>} files - the files that were added\n     * @param {!string} paneId - the id of the pane the item that was to\n     */\n    WorkingSetView.prototype._handleFileListAdded = function (e, files, paneId) {\n        if (paneId === this.paneId) {\n            this._rebuildViewList(true);\n        } else {\n            this._checkForDuplicatesInWorkingTree();\n        }\n    };\n\n    /**\n     * workingSetRemove event handler\n     * @private\n     * @param {jQuery.Event} e - event object\n     * @param {!File} file - the file that was removed\n     * @param {?boolean} suppressRedraw If true, suppress redraw\n     * @param {!string} paneId - the id of the pane the item that was to\n     */\n    WorkingSetView.prototype._handleFileRemoved = function (e, file, suppressRedraw, paneId) {\n        /*\n         * The suppressRedraw flag is used in cases when we are replacing the working\n         * set entry with another one. There are only 2 use cases for this:\n         *\n         *      1) When an untitled document is being saved.\n         *      2) When a file is saved with a new name.\n         */\n        if (paneId === this.paneId) {\n            if (!suppressRedraw) {\n                var $listItem = this._findListItemFromFile(file);\n                if ($listItem) {\n                    // Make the next file in the list show the close icon,\n                    // without having to move the mouse, if there is a next file.\n                    var $nextListItem = $listItem.next();\n                    if ($nextListItem && $nextListItem.length > 0) {\n                        var canClose = ($listItem.find(\".can-close\").length === 1);\n                        var isDirty = _isOpenAndDirty($nextListItem.data(_FILE_KEY));\n                        this._updateFileStatusIcon($nextListItem, isDirty, canClose);\n                    }\n                    $listItem.remove();\n                }\n                this._redraw();\n            }\n        } else {\n            /*\n             * When this event is handled by a pane that is not being updated then\n             * the suppressRedraw flag does not need to be respected.\n             * _checkForDuplicatesInWorkingTree() does not remove any entries so it's\n             * safe to call at any time.\n             */\n            this._checkForDuplicatesInWorkingTree();\n        }\n    };\n\n    /**\n     * workingSetRemoveList event handler\n     * @private\n     * @param {jQuery.Event} e - event object\n     * @param {!Array.<File>} files - the files that were removed\n     * @param {!string} paneId - the id of the pane the item that was to\n     */\n    WorkingSetView.prototype._handleRemoveList = function (e, files, paneId) {\n        var self = this;\n        if (paneId === this.paneId) {\n            files.forEach(function (file) {\n                var $listItem = self._findListItemFromFile(file);\n                if ($listItem) {\n                    $listItem.remove();\n                }\n            });\n\n            this._redraw();\n        } else {\n            this._checkForDuplicatesInWorkingTree();\n        }\n    };\n\n    /**\n     * workingSetSort event handler\n     * @private\n     * @param {jQuery.Event} e - event object\n     * @param {!string} paneId - the id of the pane to sort\n     */\n    WorkingSetView.prototype._handleWorkingSetSort = function (e, paneId) {\n        if (!this.suppressSortRedraw && paneId === this.paneId) {\n            this._rebuildViewList(true);\n        }\n    };\n\n    /**\n     * dirtyFlagChange event handler\n     * @private\n     * @param {jQuery.Event} e - event object\n     * @param {Document} doc - document whose dirty state has changed\n     */\n    WorkingSetView.prototype._handleDirtyFlagChanged = function (e, doc) {\n        var listItem = this._findListItemFromFile(doc.file);\n        if (listItem) {\n            var canClose = $(listItem).find(\".can-close\").length === 1;\n            this._updateFileStatusIcon(listItem, doc.isDirty, canClose);\n        }\n    };\n\n    /**\n     * workingSetUpdate event handler\n     * @private\n     * @param {jQuery.Event} e - event object\n     * @param {!string} paneId - the id of the pane to update\n     */\n    WorkingSetView.prototype._handleWorkingSetUpdate = function (e, paneId) {\n        if (this.paneId === paneId) {\n            this._rebuildViewList(true);\n        } else {\n            this._checkForDuplicatesInWorkingTree();\n        }\n    };\n\n\n    /**\n     * Initializes the WorkingSetView object\n     */\n    WorkingSetView.prototype.init = function () {\n        this.$openFilesContainer = this.$el.find(\".open-files-container\");\n        this.$workingSetListViewHeader = this.$el.find(\".working-set-header\");\n\n        this.$openFilesList = this.$el.find(\"ul\");\n\n        // Register listeners\n        MainViewManager.on(this._makeEventName(\"workingSetAdd\"), _.bind(this._handleFileAdded, this));\n        MainViewManager.on(this._makeEventName(\"workingSetAddList\"), _.bind(this._handleFileListAdded, this));\n        MainViewManager.on(this._makeEventName(\"workingSetRemove\"), _.bind(this._handleFileRemoved, this));\n        MainViewManager.on(this._makeEventName(\"workingSetRemoveList\"), _.bind(this._handleRemoveList, this));\n        MainViewManager.on(this._makeEventName(\"workingSetSort\"), _.bind(this._handleWorkingSetSort, this));\n        MainViewManager.on(this._makeEventName(\"activePaneChange\"), _.bind(this._handleActivePaneChange, this));\n        MainViewManager.on(this._makeEventName(\"paneLayoutChange\"), _.bind(this._handlePaneLayoutChange, this));\n        MainViewManager.on(this._makeEventName(\"workingSetUpdate\"), _.bind(this._handleWorkingSetUpdate, this));\n\n        DocumentManager.on(this._makeEventName(\"dirtyFlagChange\"), _.bind(this._handleDirtyFlagChanged, this));\n\n        FileViewController.on(this._makeEventName(\"documentSelectionFocusChange\") + \" \" + this._makeEventName(\"fileViewFocusChange\"), _.bind(this._updateListSelection, this));\n\n        // Show scroller shadows when open-files-container scrolls\n        ViewUtils.addScrollerShadow(this.$openFilesContainer[0], null, true);\n        ViewUtils.sidebarList(this.$openFilesContainer);\n\n        // Disable horizontal scrolling until WebKit bug #99379 is fixed\n        this.$openFilesContainer.css(\"overflow-x\", \"hidden\");\n\n        this.$openFilesContainer.on(\"contextmenu.workingSetView\", function (e) {\n            _contextEntry = $(e.target).closest(\"li\").data(_FILE_KEY);\n            Menus.getContextMenu(Menus.ContextMenuIds.WORKING_SET_CONTEXT_MENU).open(e);\n        });\n\n        this._redraw();\n    };\n\n    /**\n     * Destroys the WorkingSetView DOM element and removes all event handlers\n     */\n    WorkingSetView.prototype.destroy = function () {\n        ViewUtils.removeScrollerShadow(this.$openFilesContainer[0], null);\n        this.$openFilesContainer.off(\".workingSetView\");\n        this.$el.remove();\n        MainViewManager.off(this._makeEventName(\"\"));\n        DocumentManager.off(this._makeEventName(\"\"));\n        FileViewController.off(this._makeEventName(\"\"));\n    };\n\n    /**\n     * Creates a new WorkingSetView object for the specified pane\n     * @param {!jQuery} $container - the WorkingSetView's DOM parent node\n     * @param {!string} paneId - the id of the pane the view is being created for\n     */\n    function createWorkingSetViewForPane($container, paneId) {\n        var view = _views[paneId];\n        if (!view) {\n            view = new WorkingSetView($container, paneId);\n            _views[view.paneId] = view;\n        }\n    }\n\n\n    /**\n     * Adds an icon provider. The callback is invoked before each working set item is created, and can\n     * return content to prepend to the item if it supports the icon.\n     *\n     * @param {!function(!{name:string, fullPath:string, isFile:boolean}):?string|jQuery|DOMNode} callback\n     * Return a string representing the HTML, a jQuery object or DOM node, or undefined. If undefined,\n     * nothing is prepended to the list item and the default or an available icon will be used.\n     * @param {number} [priority] optional priority. 0 being lowest. The icons with the highest priority wins if there\n     * are multiple callback providers attached. icon providers of the same priority first valid response wins.\n     */\n    function addIconProvider(callback, priority = 0) {\n        if (!callback) {\n            return;\n        }\n        callback.priority = priority;\n        _iconProviders.push(callback);\n        _iconProviders.sort(function(cb1, cb2){\n            return cb2.priority - cb1.priority;\n        });\n        // build all views so the provider has a chance to add icons\n        //    to all items that have already been created\n        refresh(true);\n    }\n\n    /**\n     * Adds a CSS class provider, invoked before each working set item is created or updated. When called\n     * to update an existing item, all previously applied classes have been cleared.\n     *\n     * @param {!function(!{name:string, fullPath:string, isFile:boolean}):?string} callback\n     * Return a string containing space-separated CSS class(es) to add, or undefined to leave CSS unchanged.\n     * @param {number} [priority] optional priority. 0 being lowest. The class with the highest priority wins if there\n     * are multiple callback classes attached. class providers of the same priority will be appended.\n     */\n    function addClassProvider(callback, priority = 0) {\n        if (!callback) {\n            return;\n        }\n        callback.priority = priority;\n        _classProviders.push(callback);\n        _classProviders.sort(function(cb1, cb2){\n            return cb2.priority - cb1.priority;\n        });\n        // build all views so the provider has a chance to style\n        //    all items that have already been created\n        refresh(true);\n    }\n\n    AppInit.htmlReady(function () {\n        $workingFilesContainer =  $(\"#working-set-list-container\");\n        MainViewManager.on(\"paneDestroy\", function (e, paneId) {\n            var view = _views[paneId];\n            delete _views[view.paneId];\n            view.destroy();\n        });\n    });\n\n    /*\n     * To be used by other modules/default-extensions which needs to borrow working set entry icons\n     * @param {!object} data - contains file info {fullPath, name, isFile}\n     * @param {!jQuery} $element - jquery fn wrap for the list item\n     */\n    function useIconProviders(data, $element) {\n        for(let provider of _iconProviders){\n            try{\n                let icon = provider(data);\n                if (icon) {\n                    $element.prepend($(icon));\n                    break;\n                }\n            } catch (e) {\n                console.error(\"Failed to create workingset file icon: \", e);\n            }\n        }\n    }\n\n    /*\n     * To be used by other modules/default-extensions which needs to borrow working set entry custom classes\n     * @param {!object} data - contains file info {fullPath, name, isFile}\n     * @param {!jQuery} $element - jquery fn wrap for the list item\n     */\n    function useClassProviders(data, $element) {\n        let succeededPriority = null;\n        // the classProviders list is sorted by priority at insertion\n        for(let provider of _classProviders){\n            try{\n                if(succeededPriority !== null && (succeededPriority !== provider.priority)){\n                    // we need to append all class of the same priority and break once we shift to lower priority.\n                    break;\n                }\n                let classToApply = provider(data);\n                if(classToApply){\n                    $element.addClass(classToApply);\n                    succeededPriority = provider.priority;\n                }\n            } catch (e) {\n                console.error(\"Failed to apply workingset file class: \", e);\n            }\n        }\n    }\n\n    /**\n     * Gets the filesystem object for the current context in the working set.\n     */\n    function getContext() {\n        return _contextEntry;\n    }\n\n    // Public API\n    exports.createWorkingSetViewForPane   = createWorkingSetViewForPane;\n    exports.refresh                       = refresh;\n    exports.addIconProvider               = addIconProvider;\n    exports.addClassProvider              = addClassProvider;\n    exports.syncSelectionIndicator        = syncSelectionIndicator;\n    exports.getContext                    = getContext;\n\n    // API to be used only by default extensions\n    exports.useIconProviders              = useIconProviders;\n    exports.useClassProviders               = useClassProviders;\n});\n"],"file":"WorkingSetView.js"}