{"version":3,"sources":["project/ProjectManager.js"],"names":["define","require","exports","module","_","AppInit","Async","PreferencesDialogs","PreferencesManager","DocumentManager","MainViewManager","CommandManager","Commands","Dialogs","DefaultDialogs","EventDispatcher","LanguageManager","Menus","StringUtils","Strings","FileSystem","FileViewController","PerfUtils","FileUtils","FileSystemError","Urls","FileSyncManager","ProjectModel","FileTreeView","WorkingSetView","ViewUtils","ZipUtils","Metrics","EVENT_PROJECT_BEFORE_CLOSE","EVENT_PROJECT_CLOSE","EVENT_PROJECT_OPEN_FAILED","EVENT_PROJECT_OPEN","EVENT_AFTER_PROJECT_OPEN","EVENT_PROJECT_REFRESH","EVENT_CONTENT_CHANGED","EVENT_PROJECT_FILE_CHANGED","EVENT_PROJECT_FILE_RENAMED","setLeakThresholdForEvent","CLIPBOARD_SYNC_KEY","SETTINGS_FILENAME","SORT_DIRECTORIES_FIRST","_fileSystemChange","_fileSystemRename","_showErrorDialog","_saveTreeState","_renderTreeSync","_renderTree","ERR_TYPE_CREATE","ERR_TYPE_CREATE_EXISTS","ERR_TYPE_RENAME","ERR_TYPE_DELETE","ERR_TYPE_LOADING_PROJECT","ERR_TYPE_LOADING_PROJECT_NATIVE","ERR_TYPE_MAX_FILES","ERR_TYPE_OPEN_DIALOG","ERR_TYPE_INVALID_FILENAME","ERR_TYPE_MOVE","ERR_TYPE_PASTE","ERR_TYPE_PASTE_FAILED","ERR_TYPE_DUPLICATE_FAILED","ERR_TYPE_DOWNLOAD_FAILED","$projectTreeContainer","fileTreeViewContainer","_hasFileSelectionFocus","getFileSelectionFocus","PROJECT_MANAGER","model","focused","_projectWarnedForTooManyFiles","_displayCreationError","e","errorInfo","window","setTimeout","error","type","isFolder","name","ALREADY_EXISTS","ERROR_INVALID_FILENAME","_invalidChars","errString","NOT_WRITABLE","NO_MODIFICATION_ALLOWED_ERR","format","GENERIC_ERROR","getPromise","_revertSelection","previousPath","switchToWorkingSet","setSelected","setFileViewFocus","WORKING_SET_VIEW","ActionCreator","this","_bindEvents","prototype","on","EVENT_CHANGE","EVENT_SHOULD_SELECT","data","add","openFileAndAddToWorkingSet","path","fail","partial","hadFocus","openAndSelectDocument","EVENT_SHOULD_FOCUS","ERROR_CREATION","setDirectoryOpen","open","then","doNotOpen","selectInWorkingSet","openWithExternalApplication","setContext","restoreContext","startRename","isMoved","renameItemInline","setRenameValue","cancelRename","performRename","startCreating","basedir","newName","setSortDirectoriesFirst","sortDirectoriesFirst","setFocused","setCurrentFile","curFile","toggleSubdirectories","openOrClose","closeSubtree","dragItem","$","length","closeAll","last","moveItem","oldPath","newDirectory","fileName","newPath","getBaseName","self","getParentPath","_ensureTrailingSlash","refresh","actionCreator","getFileTreeContext","selectedEntry","getContext","getSelectedItem","getSelected","getCurrentlyViewedFile","_fileViewControllerChange","_documentSelectionFocusChange","curFullPath","getCurrentlyViewedPath","ACTIVE_PANE","_currentFileChange","_getProjectViewStateContext","location","scope","layer","layerID","projectRoot","fullPath","getBaseUrl","setBaseUrl","projectBaseUrl","context","setViewState","isWithinProject","absPathOrEntry","filterProjectFiles","absPathOrEntryArray","filteredPaths","forEach","file","push","makeProjectRelativeIfPossible","absPath","getProjectRoot","_setProjectRoot","rootEntry","d","Deferred","setProjectRoot","resolve","reopenNodes","getViewState","promise","_saveProjectPath","openNodes","getOpenNodes","errType","dstPath","titleType","DIRECTORY_TITLE","FILE_TITLE","entryType","DIRECTORY","FILE","title","message","breakableUrl","ERROR_CREATING_FILE_TITLE","ERROR_CREATING_FILE","INVALID_FILENAME_TITLE","ENTRY_WITH_SAME_NAME_EXISTS","ERROR_RENAMING_FILE_TITLE","ERROR_RENAMING_FILE","ERROR_MOVING_FILE_TITLE","ERROR_MOVING_FILE","ERROR_DELETING_FILE_TITLE","ERROR_DELETING_FILE","ERROR_LOADING_PROJECT","READ_DIRECTORY_ENTRIES_ERROR","REQUEST_NATIVE_FILE_SYSTEM_ERROR","ERROR_MAX_FILES_TITLE","ERROR_MAX_FILES","OPEN_DIALOG_ERROR","DIRECTORY_NAME","FILENAME","INVALID_FILENAME_MESSAGE","DIRECTORY_NAMES_LEDE","FILENAMES_LEDE","CANNOT_PASTE_TITLE","CANNOT_DUPLICATE_TITLE","CANNOT_DOWNLOAD_TITLE","showModalDialog","DIALOG_ID_ERROR","_RENDER_DEBOUNCE_TIME","getWelcomeProjectPath","_getWelcomeProjectPath","GETTING_STARTED","Phoenix","VFS","getDefaultProjectDir","getExploreProjectPath","getLocalProjectsPath","getUserProjectsDirectory","addWelcomeProjectPath","welcomeProjects","_addWelcomeProjectPath","isWelcomeProjectPath","_isWelcomeProjectPath","updateWelcomeProjectPath","_getFallbackProjectPath","fallbackPaths","recentProjects","deferred","processItem","fileEntry","getDirectoryForPath","exists","err","reject","firstSequentially","done","fallbackPath","getNativeBracketsDirectoryPath","getInitialProjectPath","async","getStartupProjectPath","Promise","startupProjectPath","_watchProjectRoot","rootPath","watch","_shouldShowName","defaultIgnoreGlobs","TOO_MANY_ENTRIES","console","_resetCache","_unwatchProjectRoot","result","off","unwatch","_reloadProjectPreferencesScope","root","_setProjectSettingsFile","_loadProject","isUpdating","startLoad","projectPrefFullPath","getFileForPath","readAsText","text","JSON","parse","info","findInAllWorkingSets","paneId","ERROR_PREFS_CORRUPT_TITLE","ERROR_PROJ_PREFS_CORRUPT","focusActivePane","trigger","_closeAll","ALL_PANES","_resetPathLanguageOverrides","_reloadUserPrefs","_stateProjectLayer","setProjectPath","brackets","inBrowser","projectRootChanged","perfTimerName","markStart","always","_setCurrentFile","projectLoadTime","addMeasurement","valueEvent","EVENT_TYPE","PERFORMANCE","Number","NOT_FOUND","forceRender","setScrollerInfo","scrollWidth","scrollTop","scrollLeft","offset","top","render","_viewModel","platform","debounce","_refreshDelay","refreshFileTree","clearAllCaches","_showFolderFirst","newPref","get","set","showInTree","entry","_filePickerSupported","browser","isTauri","showOpenFilePicker","openProject","execute","FILE_CLOSE_ALL","promptOnly","showOpenDialog","CHOOSE_FOLDER","files","UNSUPPORTED_BROWSER_OPEN_FOLDER_TITLE","UNSUPPORTED_BROWSER_OPEN_FOLDER","_projectSettings","showProjectPreferencesDialog","createNewItem","baseDir","initialName","skipRename","getDirectoryInProject","createAtPath","deleteItem","_getProjectDisplayNameOrPath","DELETING","setProjectBusy","unlink","isDirectory","getFileErrorString","parent","notifyPathDeleted","_updateModelWithChange","dirname","getLanguageFilter","languageId","languageFilter","id","getLanguageForPath","getId","indexOf","handleFSEvent","forceFinishRename","_setFileTreeSelectionWidth","width","setSelectionWidth","event","added","removed","syncOpenDocuments","removedInProject","addedInProject","parentPath","oldName","oldParent","newParent","notifyPathNameChanged","_numPendingOperations","projectBusyMessages","isBusy","$projectSpinner","PROJECT_BUSY","log","index","splice","attr","join","removeClass","addClass","queuePathForSelection","_duplicateFileCMD","DUPLICATING","getFreePath","dupePath","copy","copiedStats","ERR_TYPE_DUPLICATE_FAILED_NO_FILE","_zipFailed","_downloadFolderCommand","downloadPath","projectName","basename","DOWNLOADING_FILE","zipFolder","zip","generateAsync","blob","saveAs","catch","finally","_downloadCommand","entryToDownload","fileOrFolder","isFile","read","encoding","fs","BYTE_ARRAY_ENCODING","blobContent","Blob","resolveAsync","EVENT_FS_RENAME_STARTED","RENAMING","EVENT_FS_RENAME_END","OPERATION_CUT","OPERATION_COPY","_registerPathWithClipboard","operation","app","copyToClipboard","PhStore","setItem","getProjectRelativePath","projectRootParent","relativePath","relative","displayPath","startsWith","getMountDir","getTauriDir","getTauriPlatformPath","_getVirtualDocumentsDirectory","_copyProjectRelativePath","_cutFileCMD","_copyFileCMD","_getPasteTarget","dstThatExists","parentEntry","_isSubPathOf","dir","subDir","isAbsolute","_validatePasteTarget","srcEntry","targetEntry","baseName","targetPath","normalize","existsAsync","_performCut","src","dst","target","canPaste","MOVING","rename","_performCopy","COPYING","targetStat","realPath","_pasteFileCMD","clipboard","getItem","_setProjectDownloadCommandEnabled","_event","FILE_DOWNLOAD_PROJECT","setEnabled","isLocalDiscPath","FILE_DOWNLOAD","FILE_EXISTS_ERR","ERROR_NOT_IN_PROJECT","ERROR_MOVING_NOT_IN_PROJECT","ERROR_RENAMING_NOT_IN_PROJECT","getAllFiles","filter","includeWorkingSet","sort","viewFiles","undefined","getWorkingSet","fileList","addIconProvider","callback","priority","addClassesProvider","addClassProvider","rerenderTree","htmlReady","watchExternalChanges","css","appendTo","click","jqEvent","classList","contains","getContextMenu","ContextMenuIds","PROJECT_MENU","preventDefault","originalEvent","dataTransfer","getData","stopPropagation","addScrollerShadow","makeEventDispatcher","stateManager","definePreference","on_duringInit","register","CMD_OPEN_FOLDER","FILE_OPEN_FOLDER","CMD_PROJECT_SETTINGS","FILE_PROJECT_SETTINGS","CMD_FILE_REFRESH","FILE_REFRESH","CMD_FILE_CUT","FILE_CUT","CMD_FILE_COPY","FILE_COPY","CMD_FILE_COPY_PATH","FILE_COPY_PATH","CMD_FILE_PASTE","FILE_PASTE","CMD_FILE_DUPLICATE","FILE_DUPLICATE","CMD_FILE_DUPLICATE_FILE","FILE_DUPLICATE_FILE","CMD_FILE_DOWNLOAD_PROJECT","CMD_FILE_DOWNLOAD","description","DESCRIPTION_SORT_DIRECTORIES_FIRST","sortPref","FILE_SHOW_FOLDERS_FIRST","setChecked","CMD_FILE_SHOW_FOLDERS_FIRST","_actionCreator","shouldShow","shouldIndex"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * ProjectManager glues together the project model and file tree view and integrates as needed with other parts\n * of Brackets. It is responsible for creating and updating the project tree when projects are opened\n * and when changes occur to the file tree.\n *\n * This module dispatches these events:\n *    - beforeProjectClose -- before `_projectRoot` changes, but working set files still open\n *    - projectClose       -- *just* before `_projectRoot` changes; working set already cleared\n *      & project root unwatched\n *    - beforeAppClose     -- before Brackets quits entirely\n *    - projectOpen        -- after `_projectRoot` changes and the tree is re-rendered\n *    - projectRefresh     -- when project tree is re-rendered for a reason other than\n *      a project being opened (e.g. from the Refresh command)\n *\n * To listen for events, do something like this: (see EventDispatcher for details on this pattern)\n *    ProjectManager.on(\"eventname\", handler);\n */\n\n/*global Phoenix, path*/\n\ndefine(function (require, exports, module) {\n\n\n    require(\"utils/Global\");\n\n    const _ = require(\"thirdparty/lodash\");\n\n    // Load dependent modules\n    const AppInit             = require(\"utils/AppInit\"),\n        Async               = require(\"utils/Async\"),\n        PreferencesDialogs  = require(\"preferences/PreferencesDialogs\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        DocumentManager     = require(\"document/DocumentManager\"),\n        MainViewManager     = require(\"view/MainViewManager\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        Commands            = require(\"command/Commands\"),\n        Dialogs             = require(\"widgets/Dialogs\"),\n        DefaultDialogs      = require(\"widgets/DefaultDialogs\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        LanguageManager     = require(\"language/LanguageManager\"),\n        Menus               = require(\"command/Menus\"),\n        StringUtils         = require(\"utils/StringUtils\"),\n        Strings             = require(\"strings\"),\n        FileSystem          = require(\"filesystem/FileSystem\"),\n        FileViewController  = require(\"project/FileViewController\"),\n        PerfUtils           = require(\"utils/PerfUtils\"),\n        FileUtils           = require(\"file/FileUtils\"),\n        FileSystemError     = require(\"filesystem/FileSystemError\"),\n        Urls                = require(\"i18n!nls/urls\"),\n        FileSyncManager     = require(\"project/FileSyncManager\"),\n        ProjectModel        = require(\"project/ProjectModel\"),\n        FileTreeView        = require(\"project/FileTreeView\"),\n        WorkingSetView      = require(\"project/WorkingSetView\"),\n        ViewUtils           = require(\"utils/ViewUtils\"),\n        ZipUtils            = require(\"utils/ZipUtils\"),\n        Metrics             = require(\"utils/Metrics\");\n\n    // Needed to ensure that menus are set up when we need them.\n    // See #10115\n    require(\"command/DefaultMenus\");\n\n    const EVENT_PROJECT_BEFORE_CLOSE = \"beforeProjectClose\",\n        EVENT_PROJECT_CLOSE = \"projectClose\",\n        EVENT_PROJECT_OPEN_FAILED = \"projectFileOpenFailed\",\n        EVENT_PROJECT_OPEN = \"projectOpen\",\n        EVENT_AFTER_PROJECT_OPEN = \"afterProjectOpen\",\n        EVENT_PROJECT_REFRESH = \"projectRefresh\",\n        EVENT_CONTENT_CHANGED = \"contentChanged\",\n        EVENT_PROJECT_FILE_CHANGED = \"projectFileChanged\",\n        EVENT_PROJECT_FILE_RENAMED = \"projectFileRenamed\";\n\n    EventDispatcher.setLeakThresholdForEvent(EVENT_PROJECT_OPEN, 25);\n\n    const CLIPBOARD_SYNC_KEY = \"phoenix.clipboard\";\n\n    /**\n     * @private\n     * Filename to use for project settings files.\n     * @type {string}\n     */\n    var SETTINGS_FILENAME = \".\" + PreferencesManager.SETTINGS_FILENAME;\n\n    /**\n     * Name of the preferences for sorting directories first\n     *\n     * @type {string}\n     */\n    var SORT_DIRECTORIES_FIRST = \"sortDirectoriesFirst\";\n\n    /**\n     * @private\n     * Forward declarations to make JSLint happy.\n     */\n    var _fileSystemChange,\n        _fileSystemRename,\n        _showErrorDialog,\n        _saveTreeState,\n        _renderTreeSync,\n        _renderTree;\n\n    /**\n     * @const\n     * @private\n     * Error context to show the correct error message\n     * @type {int}\n     */\n    const ERR_TYPE_CREATE                 = 1,\n        ERR_TYPE_CREATE_EXISTS          = 2,\n        ERR_TYPE_RENAME                 = 3,\n        ERR_TYPE_DELETE                 = 4,\n        ERR_TYPE_LOADING_PROJECT        = 5,\n        ERR_TYPE_LOADING_PROJECT_NATIVE = 6,\n        ERR_TYPE_MAX_FILES              = 7,\n        ERR_TYPE_OPEN_DIALOG            = 8,\n        ERR_TYPE_INVALID_FILENAME       = 9,\n        ERR_TYPE_MOVE                   = 10,\n        ERR_TYPE_PASTE                  = 11,\n        ERR_TYPE_PASTE_FAILED           = 12,\n        ERR_TYPE_DUPLICATE_FAILED       = 13,\n        ERR_TYPE_DOWNLOAD_FAILED       = 14;\n\n    /**\n     * @private\n     * Reference to the tree control container div. Initialized by\n     * htmlReady handler\n     * @type {jQueryObject}\n     */\n    var $projectTreeContainer;\n\n    /**\n     * @private\n     *\n     * Reference to the container of the Preact component. Everything in this\n     * node is managed by Preact.\n     * @type {Element}\n     */\n    var fileTreeViewContainer;\n\n    /**\n     * @private\n     *\n     * Does the file tree currently have the focus?\n     *\n     * @return {boolean} `true` if the file tree has the focus\n     */\n    function _hasFileSelectionFocus() {\n        return FileViewController.getFileSelectionFocus() === FileViewController.PROJECT_MANAGER;\n    }\n\n    /**\n     * @private\n     * Singleton ProjectModel object.\n     * @type {ProjectModel.ProjectModel}\n     */\n    var model = new ProjectModel.ProjectModel({\n        focused: _hasFileSelectionFocus()\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     * A flag to remember when user has been warned about too many files, so they\n     * are only warned once per project/session.\n     */\n    var _projectWarnedForTooManyFiles = false;\n\n    /**\n     * @private\n     *\n     * Event handler which displays an error based on a problem creating a file.\n     *\n     * @param {$.Event} e jQuery event object\n     * @param {{type:any,isFolder:boolean}} errorInfo Information passed in the error events\n     */\n    function _displayCreationError(e, errorInfo) {\n        window.setTimeout(function () {\n            var error = errorInfo.type,\n                isFolder = errorInfo.isFolder,\n                name = errorInfo.name;\n\n            if (error === FileSystemError.ALREADY_EXISTS) {\n                _showErrorDialog(ERR_TYPE_CREATE_EXISTS, isFolder, null, name);\n            } else if (error === ProjectModel.ERROR_INVALID_FILENAME) {\n                _showErrorDialog(ERR_TYPE_INVALID_FILENAME, isFolder, ProjectModel._invalidChars);\n            } else {\n                var errString = error === FileSystemError.NOT_WRITABLE ?\n                        Strings.NO_MODIFICATION_ALLOWED_ERR :\n                        StringUtils.format(Strings.GENERIC_ERROR, error);\n\n                _showErrorDialog(ERR_TYPE_CREATE, isFolder, errString, name).getPromise();\n            }\n        }, 10);\n    }\n\n    /**\n     * @private\n     *\n     * Reverts to the previous selection (useful if there's an error).\n     *\n     * @param {string|File} previousPath The previously selected path.\n     * @param {boolean} switchToWorkingSet True if we need to switch focus to the Working Set\n     */\n    function _revertSelection(previousPath, switchToWorkingSet) {\n        model.setSelected(previousPath);\n        if (switchToWorkingSet) {\n            FileViewController.setFileViewFocus(FileViewController.WORKING_SET_VIEW);\n        }\n    }\n\n    /**\n     * @constructor\n     * @private\n     *\n     * Manages the interaction between the view and the model. This is loosely structured in\n     * the style of [Flux](https://github.com/facebook/flux), but the initial implementation did\n     * not need all of the parts of Flux yet. This ActionCreator could be replaced later with\n     * a real ActionCreator that talks to a Dispatcher.\n     *\n     * Most of the methods just delegate to the ProjectModel. Some are responsible for integration\n     * with other parts of Brackets.\n     *\n     * @param {ProjectModel} model store (in Flux terminology) with the project data\n     */\n    function ActionCreator(model) {\n        this.model = model;\n        this._bindEvents();\n    }\n\n    /**\n     * @private\n     *\n     * Listen to events on the ProjectModel and cause the appropriate behavior within the rest of the system.\n     */\n    ActionCreator.prototype._bindEvents = function () {\n\n        // Change events are the standard Flux signal to rerender the view. Note that\n        // current Flux style is to have the view itself listen to the Store for change events\n        // and re-render itself.\n        this.model.on(ProjectModel.EVENT_CHANGE, function () {\n            _renderTree();\n        });\n\n        // The \"should select\" event signals that we need to open the document based on file tree\n        // activity.\n        this.model.on(ProjectModel.EVENT_SHOULD_SELECT, function (e, data) {\n            if (data.add) {\n                FileViewController.openFileAndAddToWorkingSet(data.path).fail(_.partial(_revertSelection, data.previousPath, !data.hadFocus));\n            } else {\n                FileViewController.openAndSelectDocument(data.path, FileViewController.PROJECT_MANAGER).fail(_.partial(_revertSelection, data.previousPath, !data.hadFocus));\n            }\n        });\n\n        this.model.on(ProjectModel.EVENT_SHOULD_FOCUS, function () {\n            FileViewController.setFileViewFocus(FileViewController.PROJECT_MANAGER);\n        });\n\n        this.model.on(ProjectModel.ERROR_CREATION, _displayCreationError);\n    };\n\n    /**\n     * Sets the directory at the given path to open in the tree and saves the open nodes to view state.\n     *\n     * See `ProjectModel.setDirectoryOpen`\n     */\n    ActionCreator.prototype.setDirectoryOpen = function (path, open) {\n        this.model.setDirectoryOpen(path, open).then(_saveTreeState);\n    };\n\n    /**\n     * See `ProjectModel.setSelected`\n     */\n    ActionCreator.prototype.setSelected = function (path, doNotOpen) {\n        this.model.setSelected(path, doNotOpen);\n    };\n\n    /**\n     * See `ProjectModel.selectInWorkingSet`\n     */\n    ActionCreator.prototype.selectInWorkingSet = function (path) {\n        this.model.selectInWorkingSet(path);\n    };\n\n    /**\n     * See `FileViewController.openWithExternalApplication`\n     */\n    ActionCreator.prototype.openWithExternalApplication = function (path) {\n        FileViewController.openWithExternalApplication(path);\n    };\n\n\n    /**\n     * See `ProjectModel.setContext`\n     */\n    ActionCreator.prototype.setContext = function (path) {\n        this.model.setContext(path);\n    };\n\n    /**\n     * See `ProjectModel.restoreContext`\n     */\n    ActionCreator.prototype.restoreContext = function () {\n        this.model.restoreContext();\n    };\n\n    /**\n     * See `ProjectModel.startRename`\n     */\n    ActionCreator.prototype.startRename = function (path, isMoved) {\n        // This is very not Flux-like, which is a sign that Flux may not be the\n        // right choice here *or* that this architecture needs to evolve subtly\n        // in how errors are reported (more like the create case).\n        // See #9284.\n        renameItemInline(path, isMoved);\n    };\n\n    /**\n     * See `ProjectModel.setRenameValue`\n     */\n    ActionCreator.prototype.setRenameValue = function (path) {\n        this.model.setRenameValue(path);\n    };\n\n    /**\n     * See `ProjectModel.cancelRename`\n     */\n    ActionCreator.prototype.cancelRename = function () {\n        this.model.cancelRename();\n    };\n\n    /**\n     * See `ProjectModel.performRename`\n     */\n    ActionCreator.prototype.performRename = function () {\n        return this.model.performRename();\n    };\n\n    /**\n     * See `ProjectModel.startCreating`\n     */\n    ActionCreator.prototype.startCreating = function (basedir, newName, isFolder) {\n        return this.model.startCreating(basedir, newName, isFolder);\n    };\n\n    /**\n     * See `ProjectModel.setSortDirectoriesFirst`\n     */\n    ActionCreator.prototype.setSortDirectoriesFirst = function (sortDirectoriesFirst) {\n        this.model.setSortDirectoriesFirst(sortDirectoriesFirst);\n    };\n\n    /**\n     * See `ProjectModel.setFocused`\n     */\n    ActionCreator.prototype.setFocused = function (focused) {\n        this.model.setFocused(focused);\n    };\n\n    /**\n     * See `ProjectModel.setCurrentFile`\n     */\n    ActionCreator.prototype.setCurrentFile = function (curFile) {\n        this.model.setCurrentFile(curFile);\n    };\n\n    /**\n     * See `ProjectModel.toggleSubdirectories`\n     */\n    ActionCreator.prototype.toggleSubdirectories = function (path, openOrClose) {\n        this.model.toggleSubdirectories(path, openOrClose).then(_saveTreeState);\n    };\n\n    /**\n     * See `ProjectModel.closeSubtree`\n     */\n    ActionCreator.prototype.closeSubtree = function (path) {\n        this.model.closeSubtree(path);\n        _saveTreeState();\n    };\n\n    ActionCreator.prototype.dragItem = function (path) {\n        // Close open menus on drag and clear the context, but only if there's a menu open.\n        if ($(\".dropdown.open\").length > 0) {\n            Menus.closeAll();\n            this.setContext(null);\n        }\n\n        // Close directory, if dragged item is directory\n        if (_.last(path) === '/') {\n            this.setDirectoryOpen(path, false);\n        }\n    };\n\n    /**\n     * Moves the item in the oldPath to the newDirectory directory\n     */\n    ActionCreator.prototype.moveItem = function (oldPath, newDirectory) {\n        var fileName = FileUtils.getBaseName(oldPath),\n            newPath = newDirectory + fileName,\n            self = this;\n\n        // If item dropped onto itself or onto its parent directory, return\n        if (oldPath === newDirectory || FileUtils.getParentPath(oldPath) === newDirectory) {\n            return;\n        }\n\n        // Add trailing slash if directory is moved\n        if (_.last(oldPath) === '/') {\n            newPath = ProjectModel._ensureTrailingSlash(newPath);\n        }\n\n        this.startRename(oldPath, true);\n        this.setRenameValue(newPath);\n\n        this.performRename();\n        this.setDirectoryOpen(newDirectory, true);\n    };\n\n    /**\n     * See `ProjectModel.refresh`\n     */\n    ActionCreator.prototype.refresh = function () {\n        this.model.refresh();\n    };\n\n    /**\n     * @private\n     * @type {ActionCreator}\n     *\n     * Singleton actionCreator that is used for dispatching changes to the ProjectModel.\n     */\n    var actionCreator = new ActionCreator(model);\n\n    /**\n     * Returns the File or Directory corresponding to the item that was right-clicked on in the file tree menu.\n     * @return {?(File|Directory)}\n     */\n    function getFileTreeContext() {\n        var selectedEntry = model.getContext();\n        return selectedEntry;\n    }\n\n    /**\n     * Returns the File or Directory corresponding to the item selected in the sidebar panel, whether in\n     * the file tree OR in the working set; or null if no item is selected anywhere in the sidebar.\n     * May NOT be identical to the current Document - a folder may be selected in the sidebar, or the sidebar may not\n     * have the current document visible in the tree & working set.\n     * @return {?(File|Directory)}\n     */\n    function getSelectedItem() {\n        // Prefer file tree context, then file tree selection, else use working set\n        var selectedEntry = getFileTreeContext();\n        if (!selectedEntry) {\n            selectedEntry = model.getSelected();\n        }\n        if (!selectedEntry) {\n            selectedEntry = MainViewManager.getCurrentlyViewedFile();\n        }\n        return selectedEntry;\n    }\n\n    /**\n     * @private\n     *\n     * Handler for changes in the focus between working set and file tree view.\n     */\n    function _fileViewControllerChange() {\n        actionCreator.setFocused(_hasFileSelectionFocus());\n        _renderTree();\n    }\n\n    /**\n     * @private\n     *\n     * Handler for changes in document selection.\n     */\n    function _documentSelectionFocusChange() {\n        var curFullPath = MainViewManager.getCurrentlyViewedPath(MainViewManager.ACTIVE_PANE);\n        if (curFullPath && _hasFileSelectionFocus()) {\n            actionCreator.setSelected(curFullPath, true);\n        } else {\n            actionCreator.setSelected(null);\n        }\n        _fileViewControllerChange();\n    }\n\n    /**\n     * @private\n     *\n     * Handler for changes to which file is currently viewed.\n     *\n     * @param {Object} e jQuery event object\n     * @param {File} curFile Currently viewed file.\n     */\n    function _currentFileChange(e, curFile) {\n        actionCreator.setCurrentFile(curFile);\n    }\n\n    /**\n     * @private\n     *\n     * Creates a context object for doing project view state lookups.\n     */\n    function _getProjectViewStateContext() {\n        return { location: { scope: \"user\",\n            layer: \"project\",\n            layerID: model.projectRoot.fullPath } };\n    }\n\n    /**\n     * Returns the encoded Base URL of the currently loaded project, or empty string if no project\n     * is open (during startup, or running outside of app shell).\n     * @return {String}\n     */\n    function getBaseUrl() {\n        return model.getBaseUrl();\n    }\n\n    /**\n     * Sets the encoded Base URL of the currently loaded project.\n     * @param {String}\n     */\n    function setBaseUrl(projectBaseUrl) {\n        var context = _getProjectViewStateContext();\n\n        projectBaseUrl = model.setBaseUrl(projectBaseUrl);\n\n        PreferencesManager.setViewState(\"project.baseUrl\", projectBaseUrl, context);\n    }\n\n    /**\n     * Returns true if absPath lies within the project, false otherwise.\n     * Does not support paths containing \"..\"\n     * @param {string|FileSystemEntry} absPathOrEntry\n     * @return {boolean}\n     */\n    function isWithinProject(absPathOrEntry) {\n        return model.isWithinProject(absPathOrEntry);\n    }\n\n    /**\n     * Returns an array of files that is within the project from the supplied list of paths.\n     * @param {string|FileSystemEntry[]} absPathOrEntryArray array which can be either a string path or FileSystemEntry\n     * @return {string|FileSystemEntry[]} A array that contains only files paths that are in the project\n     */\n    function filterProjectFiles(absPathOrEntryArray) {\n        if(!absPathOrEntryArray){\n            return absPathOrEntryArray;\n        }\n        let filteredPaths = [];\n        absPathOrEntryArray.forEach(function (file) {\n            if(isWithinProject(file)){\n                filteredPaths.push(file);\n            }\n        });\n        return filteredPaths;\n    }\n\n    /**\n     * If absPath lies within the project, returns a project-relative path. Else returns absPath\n     * unmodified.\n     * Does not support paths containing \"..\"\n     * @param {!string} absPath\n     * @return {!string}\n     */\n    function makeProjectRelativeIfPossible(absPath) {\n        return model.makeProjectRelativeIfPossible(absPath);\n    }\n\n    /**\n     * Returns the root folder of the currently loaded project, or null if no project is open (during\n     * startup, or running outside of app shell).\n     * @return {Directory}\n     */\n    function getProjectRoot() {\n        return model.projectRoot;\n    }\n\n    /**\n     * @private\n     *\n     * Sets the project root to the given directory, resetting the ProjectModel and file tree in the process.\n     *\n     * @param {Directory} rootEntry directory object for the project root\n     * @return {$.Promise} resolved when the project is done setting up\n     */\n    function _setProjectRoot(rootEntry) {\n        var d = new $.Deferred();\n        model.setProjectRoot(rootEntry).then(function () {\n            d.resolve();\n            model.reopenNodes(PreferencesManager.getViewState(\"project.treeState\", _getProjectViewStateContext()));\n        });\n        return d.promise();\n    }\n\n    /**\n     * @private\n     *\n     * Saves the project path.\n     */\n    var _saveProjectPath = function () {\n        // save the current project\n        PreferencesManager.setViewState(\"projectPath\", model.projectRoot.fullPath);\n    };\n\n    /**\n     * @private\n     * Save tree state.\n     */\n    _saveTreeState = function () {\n        var context = _getProjectViewStateContext(),\n            openNodes = model.getOpenNodes();\n\n        // Store the open nodes by their full path and persist to storage\n        PreferencesManager.setViewState(\"project.treeState\", openNodes, context);\n    };\n\n    /**\n     * @private\n     *\n     * Displays an error dialog for problems when working with files in the file tree.\n     *\n     * @param {number} errType type of error that occurred\n     * @param {boolean} isFolder did the error occur because of a folder operation?\n     * @param {string} error message with detail about the error\n     * @param {string} path path to file or folder that had the error\n     * @return {Dialog|null} Dialog if the error message was created\n     */\n    _showErrorDialog = function (errType, isFolder, error, path, dstPath) {\n        var titleType = isFolder ? Strings.DIRECTORY_TITLE : Strings.FILE_TITLE,\n            entryType = isFolder ? Strings.DIRECTORY : Strings.FILE,\n            title,\n            message;\n        path = StringUtils.breakableUrl(path);\n\n        switch (errType) {\n        case ERR_TYPE_CREATE:\n            title = StringUtils.format(Strings.ERROR_CREATING_FILE_TITLE, titleType);\n            message = StringUtils.format(Strings.ERROR_CREATING_FILE, entryType, path, error);\n            break;\n        case ERR_TYPE_CREATE_EXISTS:\n            title = StringUtils.format(Strings.INVALID_FILENAME_TITLE, titleType);\n            message = StringUtils.format(Strings.ENTRY_WITH_SAME_NAME_EXISTS, path);\n            break;\n        case ERR_TYPE_RENAME:\n            title = StringUtils.format(Strings.ERROR_RENAMING_FILE_TITLE, titleType);\n            message = StringUtils.format(Strings.ERROR_RENAMING_FILE, path, error, entryType);\n            break;\n        case ERR_TYPE_MOVE:\n            title = StringUtils.format(Strings.ERROR_MOVING_FILE_TITLE, titleType);\n            message = StringUtils.format(Strings.ERROR_MOVING_FILE, path, error, entryType);\n            break;\n        case ERR_TYPE_DELETE:\n            title = StringUtils.format(Strings.ERROR_DELETING_FILE_TITLE, titleType);\n            message = StringUtils.format(Strings.ERROR_DELETING_FILE, path, error, entryType);\n            break;\n        case ERR_TYPE_LOADING_PROJECT:\n            title = Strings.ERROR_LOADING_PROJECT;\n            message = StringUtils.format(Strings.READ_DIRECTORY_ENTRIES_ERROR, path, error);\n            break;\n        case ERR_TYPE_LOADING_PROJECT_NATIVE:\n            title = Strings.ERROR_LOADING_PROJECT;\n            message = StringUtils.format(Strings.REQUEST_NATIVE_FILE_SYSTEM_ERROR, path, error);\n            break;\n        case ERR_TYPE_MAX_FILES:\n            title = Strings.ERROR_MAX_FILES_TITLE;\n            message = Strings.ERROR_MAX_FILES;\n            break;\n        case ERR_TYPE_OPEN_DIALOG:\n            title = Strings.ERROR_LOADING_PROJECT;\n            message = StringUtils.format(Strings.OPEN_DIALOG_ERROR, error);\n            break;\n        case ERR_TYPE_INVALID_FILENAME:\n            title = StringUtils.format(Strings.INVALID_FILENAME_TITLE, isFolder ? Strings.DIRECTORY_NAME : Strings.FILENAME);\n            message = StringUtils.format(Strings.INVALID_FILENAME_MESSAGE, isFolder ? Strings.DIRECTORY_NAMES_LEDE : Strings.FILENAMES_LEDE, error);\n            break;\n        case ERR_TYPE_PASTE:\n            title = StringUtils.format(Strings.CANNOT_PASTE_TITLE, titleType);\n            message = StringUtils.format(Strings.ENTRY_WITH_SAME_NAME_EXISTS, path);\n            break;\n        case ERR_TYPE_PASTE_FAILED:\n            title = StringUtils.format(Strings.CANNOT_PASTE_TITLE, titleType);\n            message = StringUtils.format(Strings.ERR_TYPE_PASTE_FAILED, path, dstPath);\n            break;\n        case ERR_TYPE_DUPLICATE_FAILED:\n            title = StringUtils.format(Strings.CANNOT_DUPLICATE_TITLE, titleType);\n            message = StringUtils.format(Strings.ERR_TYPE_DUPLICATE_FAILED, path);\n            break;\n        case ERR_TYPE_DOWNLOAD_FAILED:\n            title = StringUtils.format(Strings.CANNOT_DOWNLOAD_TITLE, titleType);\n            message = StringUtils.format(Strings.ERR_TYPE_DOWNLOAD_FAILED, path);\n            break;\n        }\n\n        if (title && message) {\n            return Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_ERROR,\n                title,\n                message\n            );\n        }\n        return null;\n    };\n\n    var _RENDER_DEBOUNCE_TIME = 100;\n\n    /**\n     * @private\n     *\n     * Rerender the file tree view.\n     *\n     * @param {boolean} forceRender Force the tree to rerender. Should only be needed by extensions that call rerenderTree.\n     */\n    _renderTreeSync = function (forceRender) {\n        var projectRoot = getProjectRoot();\n        if (!projectRoot) {\n            return;\n        }\n        model.setScrollerInfo($projectTreeContainer[0].scrollWidth, $projectTreeContainer.scrollTop(), $projectTreeContainer.scrollLeft(), $projectTreeContainer.offset().top);\n        FileTreeView.render(fileTreeViewContainer, model._viewModel, projectRoot, actionCreator, forceRender, brackets.platform);\n    };\n\n    _renderTree = _.debounce(_renderTreeSync, _RENDER_DEBOUNCE_TIME);\n\n    /**\n     * @private\n     *\n     * Returns the full path to the welcome project, which we open on first launch.\n     *\n     * @param {string} sampleUrl URL for getting started project\n     * @param {string} initialPath Path to Brackets directory (see FileUtils.getNativeBracketsDirectoryPath())\n     * @return {!string} fullPath reference\n     */\n    function getWelcomeProjectPath() {\n        return ProjectModel._getWelcomeProjectPath(Urls.GETTING_STARTED, Phoenix.VFS.getDefaultProjectDir());\n    }\n\n    function getExploreProjectPath() {\n        return `${getLocalProjectsPath()}explore`;\n    }\n\n    /**\n     * The flder where all the system managed projects live\n     * @returns {string}\n     */\n    function getLocalProjectsPath() {\n        return Phoenix.VFS.getUserProjectsDirectory();\n    }\n\n    /**\n     * Adds the path to the list of welcome projects we've ever seen, if not on the list already.\n     *\n     * @param {string} path Path to possibly add\n     */\n    function addWelcomeProjectPath(path) {\n        var welcomeProjects = ProjectModel._addWelcomeProjectPath(path,\n            PreferencesManager.getViewState(\"welcomeProjects\"));\n        PreferencesManager.setViewState(\"welcomeProjects\", welcomeProjects);\n    }\n\n\n    /**\n     * Returns true if the given path is the same as one of the welcome projects we've previously opened,\n     * or the one for the current build.\n     *\n     * @param {string} path Path to check to see if it's a welcome project path\n     * @return {boolean} true if this is a welcome project path\n     */\n    function isWelcomeProjectPath(path) {\n        return ProjectModel._isWelcomeProjectPath(path, getWelcomeProjectPath(), PreferencesManager.getViewState(\"welcomeProjects\"));\n    }\n\n    /**\n     * If the provided path is to an old welcome project, returns the current one instead.\n     */\n    function updateWelcomeProjectPath(path) {\n        if (isWelcomeProjectPath(path)) {\n            return getWelcomeProjectPath();\n        }\n        return path;\n\n    }\n\n    /**\n     * After failing to load a project, this function determines which project path to fallback to.\n     * @return {$.Promise} Promise that resolves to a project path {string}\n     */\n    function _getFallbackProjectPath() {\n        var fallbackPaths = [],\n            recentProjects = PreferencesManager.getViewState(\"recentProjects\") || [],\n            deferred = new $.Deferred();\n\n        // Build ordered fallback path array\n        if (recentProjects.length > 1) {\n            // *Most* recent project is the one that just failed to load, so use second most recent\n            fallbackPaths.push(recentProjects[1]);\n        }\n\n        // Next is Getting Started project\n        fallbackPaths.push(getWelcomeProjectPath());\n\n        // Helper func for Async.firstSequentially()\n        function processItem(path) {\n            var deferred = new $.Deferred(),\n                fileEntry = FileSystem.getDirectoryForPath(path);\n\n            fileEntry.exists(function (err, exists) {\n                if (!err && exists) {\n                    deferred.resolve();\n                } else {\n                    deferred.reject();\n                }\n            });\n\n            return deferred.promise();\n        }\n\n        // Find first path that exists\n        Async.firstSequentially(fallbackPaths, processItem)\n            .done(function (fallbackPath) {\n                deferred.resolve(fallbackPath);\n            })\n            .fail(function () {\n                // Last resort is Brackets source folder which is guaranteed to exist\n                deferred.resolve(FileUtils.getNativeBracketsDirectoryPath());\n            });\n\n        return deferred.promise();\n    }\n\n    /**\n     * @deprecated use getStartupProjectPath instead. Can be removed anytime after 2-Apr-2023.\n     * Initial project path is stored in prefs, which defaults to the welcome project on\n     * first launch.\n     */\n    function getInitialProjectPath() {\n        return updateWelcomeProjectPath(PreferencesManager.getViewState(\"projectPath\"));\n    }\n\n    /**\n     * Initial project path is stored in prefs, which defaults to the welcome project on\n     * first launch.\n     */\n    async function getStartupProjectPath() {\n        return new Promise((resolve)=>{\n            let startupProjectPath = updateWelcomeProjectPath(PreferencesManager.getViewState(\"projectPath\"));\n            FileSystem.getDirectoryForPath(startupProjectPath).exists((err, exists)=>{\n                if(exists){\n                    resolve(startupProjectPath);\n                } else {\n                    resolve(getWelcomeProjectPath());\n                }\n            });\n        });\n    }\n\n    /**\n     * @private\n     *\n     * Watches the project for filesystem changes so that the tree can be updated.\n     */\n    function _watchProjectRoot(rootPath) {\n        FileSystem.on(\"change\", _fileSystemChange);\n        FileSystem.on(\"rename\", _fileSystemRename);\n\n        FileSystem.watch(FileSystem.getDirectoryForPath(rootPath), ProjectModel._shouldShowName, ProjectModel.defaultIgnoreGlobs, function (err) {\n            if (err === FileSystemError.TOO_MANY_ENTRIES) {\n                if (!_projectWarnedForTooManyFiles) {\n                    _showErrorDialog(ERR_TYPE_MAX_FILES);\n                    _projectWarnedForTooManyFiles = true;\n                }\n            } else if (err) {\n                console.error(\"Error watching project root: \", rootPath, err);\n            }\n        });\n\n        // Reset allFiles cache\n        model._resetCache();\n    }\n\n\n    /**\n     * @private\n     * Close the file system and remove listeners.\n     * @return {$.Promise} A promise that's resolved when the root is unwatched. Rejected if\n     *     there is no project root or if the unwatch fails.\n     */\n    function _unwatchProjectRoot() {\n        var result = new $.Deferred();\n        if (!model.projectRoot) {\n            result.reject();\n        } else {\n            FileSystem.off(\"change\", _fileSystemChange);\n            FileSystem.off(\"rename\", _fileSystemRename);\n\n            FileSystem.unwatch(model.projectRoot, function (err) {\n                if (err) {\n                    console.error(\"Error unwatching project root: \", model.projectRoot.fullPath, err);\n                    result.reject(err);\n                } else {\n                    result.resolve();\n                }\n            });\n\n            // Reset allFiles cache\n            model._resetCache();\n        }\n\n        return result.promise();\n    }\n\n    /**\n     * @private\n     * Reloads the project preferences.\n     */\n    function _reloadProjectPreferencesScope() {\n        var root = getProjectRoot();\n        if (root) {\n            // Alias the \"project\" Scope to the path Scope for the project-level settings file\n            PreferencesManager._setProjectSettingsFile(root.fullPath + SETTINGS_FILENAME);\n        } else {\n            PreferencesManager._setProjectSettingsFile();\n        }\n    }\n\n    /**\n     * Loads the given folder as a project. Does NOT prompt about any unsaved changes - use openProject()\n     * instead to check for unsaved changes and (optionally) let the user choose the folder to open.\n     *\n     * @param {!string} rootPath  Absolute path to the root folder of the project.\n     *  A trailing \"/\" on the path is optional (unlike many Brackets APIs that assume a trailing \"/\").\n     * @param {boolean=} isUpdating  If true, indicates we're just updating the tree;\n     *  if false, a different project is being loaded.\n     * @return {$.Promise} A promise object that will be resolved when the\n     *  project is loaded and tree is rendered, or rejected if the project path\n     *  fails to load.\n     */\n    function _loadProject(rootPath, isUpdating) {\n        var result = new $.Deferred(),\n            startLoad = new $.Deferred();\n\n        // Some legacy code calls this API with a non-canonical path\n        rootPath = ProjectModel._ensureTrailingSlash(rootPath);\n\n        var projectPrefFullPath = (rootPath + SETTINGS_FILENAME),\n            file   = FileSystem.getFileForPath(projectPrefFullPath);\n\n        //Verify that the project preferences file (.brackets.json) is NOT corrupted.\n        //If corrupted, display the error message and open the file in editor for the user to edit.\n        FileUtils.readAsText(file)\n            .done(function (text) {\n                try {\n                    if (text) {\n                        JSON.parse(text);\n                    }\n                } catch (err) {\n                    // Cannot parse the text read from the project preferences file.\n                    var info = MainViewManager.findInAllWorkingSets(projectPrefFullPath);\n                    var paneId;\n                    if (info.length) {\n                        paneId = info[0].paneId;\n                    }\n                    FileViewController.openFileAndAddToWorkingSet(projectPrefFullPath, paneId)\n                        .done(function () {\n                            Dialogs.showModalDialog(\n                                DefaultDialogs.DIALOG_ID_ERROR,\n                                Strings.ERROR_PREFS_CORRUPT_TITLE,\n                                Strings.ERROR_PROJ_PREFS_CORRUPT\n                            ).done(function () {\n                                // give the focus back to the editor with the pref file\n                                MainViewManager.focusActivePane();\n                            });\n                        });\n                }\n            });\n\n        if (isUpdating) {\n            // We're just refreshing. Don't need to unwatch the project root, so we can start loading immediately.\n            startLoad.resolve();\n        } else {\n            if (model.projectRoot && model.projectRoot.fullPath === rootPath) {\n                return (new $.Deferred()).resolve().promise();\n            }\n\n            // About to close current project (if any)\n            if (model.projectRoot) {\n                exports.trigger(EVENT_PROJECT_BEFORE_CLOSE, model.projectRoot);\n            }\n\n            // close all the old files\n            MainViewManager._closeAll(MainViewManager.ALL_PANES);\n\n            _unwatchProjectRoot().fail(console.error);\n\n            if (model.projectRoot) {\n                LanguageManager._resetPathLanguageOverrides();\n                PreferencesManager._reloadUserPrefs(model.projectRoot);\n                exports.trigger(EVENT_PROJECT_CLOSE, model.projectRoot);\n            }\n\n            startLoad.resolve();\n        }\n\n        startLoad.done(function () {\n            var context = { location: { scope: \"user\",\n                layer: \"project\" } };\n\n            // Clear project path map\n            if (!isUpdating) {\n                PreferencesManager._stateProjectLayer.setProjectPath(rootPath);\n            }\n\n            // Populate file tree as long as we aren't running in the browser\n            if (!brackets.inBrowser) {\n                if (!isUpdating) {\n                    _watchProjectRoot(rootPath);\n                }\n                // Point at a real folder structure on local disk\n                var rootEntry = FileSystem.getDirectoryForPath(rootPath);\n                rootEntry.exists(function (err, exists) {\n                    if (exists) {\n                        var projectRootChanged = (!model.projectRoot || !rootEntry) ||\n                            model.projectRoot.fullPath !== rootEntry.fullPath;\n\n                        // Success!\n                        var perfTimerName = PerfUtils.markStart(\"Load Project: \" + rootPath);\n\n                        _projectWarnedForTooManyFiles = false;\n\n                        _setProjectRoot(rootEntry).always(function () {\n                            model.setBaseUrl(PreferencesManager.getViewState(\"project.baseUrl\", context) || \"\");\n\n                            if (projectRootChanged) {\n                                _reloadProjectPreferencesScope();\n                                PreferencesManager._setCurrentFile(rootPath);\n                            }\n\n                            // If this is the most current welcome project, record it. In future launches, we want\n                            // to substitute the latest welcome project from the current build instead of using an\n                            // outdated one (when loading recent projects or the last opened project).\n                            if (rootPath === getWelcomeProjectPath()) {\n                                addWelcomeProjectPath(rootPath);\n                            }\n\n                            if (projectRootChanged) {\n                                // Allow asynchronous event handlers to finish before resolving result by collecting promises from them\n                                exports.trigger(EVENT_PROJECT_OPEN, model.projectRoot);\n                                result.resolve();\n                                exports.trigger(EVENT_AFTER_PROJECT_OPEN, model.projectRoot);\n                            } else {\n                                exports.trigger(EVENT_PROJECT_REFRESH, model.projectRoot);\n                                result.resolve();\n                            }\n                            let projectLoadTime = PerfUtils.addMeasurement(perfTimerName);\n                            Metrics.valueEvent(Metrics.EVENT_TYPE.PERFORMANCE, \"projectLoad\",\n                                \"timeMs\", Number(projectLoadTime));\n                        });\n                    } else {\n                        console.error(\"error loading project\");\n                        exports.trigger(EVENT_PROJECT_OPEN_FAILED, rootPath);\n                        _showErrorDialog(ERR_TYPE_LOADING_PROJECT_NATIVE, true, err || FileSystemError.NOT_FOUND, rootPath)\n                            .done(function () {\n                                // Reset _projectRoot to null so that the following _loadProject call won't\n                                // run the 'beforeProjectClose' event a second time on the original project,\n                                // which is now partially torn down (see #6574).\n                                model.projectRoot = null;\n\n                                // The project folder stored in preference doesn't exist, so load the default\n                                // project directory.\n                                // TODO (issue #267): When Brackets supports having no project directory\n                                // defined this code will need to change\n                                _getFallbackProjectPath().done(function (path) {\n                                    _loadProject(path).always(function () {\n                                        // Make sure not to reject the original deferred until the fallback\n                                        // project is loaded, so we don't violate expectations that there is always\n                                        // a current project before continuing after _loadProject().\n                                        result.reject();\n                                    });\n                                });\n                            });\n                    }\n                });\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * @const\n     * @private\n     * @type {number} Minimum delay in milliseconds between calls to refreshFileTree\n     */\n    var _refreshDelay = 1000;\n\n    /**\n     * Refresh the project's file tree, maintaining the current selection.\n     *\n     * Note that the original implementation of this returned a promise to be resolved when the refresh is complete.\n     * That use is deprecated and `refreshFileTree` is now a \"fire and forget\" kind of function.\n     */\n    var refreshFileTree = function refreshFileTree() {\n        FileSystem.clearAllCaches();\n        return new $.Deferred().resolve().promise();\n    };\n\n    function _showFolderFirst() {\n        const newPref = !PreferencesManager.get(SORT_DIRECTORIES_FIRST);\n        PreferencesManager.set(SORT_DIRECTORIES_FIRST, newPref);\n    }\n\n    refreshFileTree = _.debounce(refreshFileTree, _refreshDelay);\n\n    /**\n     * Expands tree nodes to show the given file or folder and selects it. Silently no-ops if the\n     * path lies outside the project, or if it doesn't exist.\n     *\n     * @param {!(File|Directory)} entry File or Directory to show\n     * @return {$.Promise} Resolved when done; or rejected if not found\n     */\n    function showInTree(entry) {\n        return model.showInTree(entry).then(_saveTreeState);\n    }\n\n    function _filePickerSupported() {\n        return Phoenix.browser.isTauri\n            || window.showOpenFilePicker; // fs access file picker\n    }\n\n    /**\n     * Open a new project. Currently, Brackets must always have a project open, so\n     * this method handles both closing the current project and opening a new project.\n     *\n     * @param {string=} path Optional absolute path to the root folder of the project.\n     *  If path is undefined or null, displays a dialog where the user can choose a\n     *  folder to load. If the user cancels the dialog, nothing more happens.\n     * @return {$.Promise} A promise object that will be resolved when the\n     *  project is loaded and tree is rendered, or rejected if the project path\n     *  fails to load.\n     */\n    function openProject(path) {\n\n        var result = new $.Deferred();\n\n        if(!path && !_filePickerSupported()){\n            Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_ERROR,\n                Strings.UNSUPPORTED_BROWSER_OPEN_FOLDER_TITLE,\n                Strings.UNSUPPORTED_BROWSER_OPEN_FOLDER\n            );\n            result.reject();\n            return result.promise();\n        }\n\n        // Confirm any unsaved changes first. We run the command in \"prompt-only\" mode, meaning it won't\n        // actually close any documents even on success; we'll do that manually after the user also oks\n        // the folder-browse dialog.\n        CommandManager.execute(Commands.FILE_CLOSE_ALL, { promptOnly: true })\n            .done(function () {\n                if (path) {\n                    // use specified path\n                    _loadProject(path, false).then(result.resolve, result.reject);\n                } else {\n                    // Pop up a folder browse dialog\n                    FileSystem.showOpenDialog(false, true, Strings.CHOOSE_FOLDER, model.projectRoot.fullPath, null, function (err, files) {\n                        if (!err && files.length > 0) {\n                            // Load the new project into the folder tree\n                            _loadProject(files[0]).then(result.resolve, result.reject);\n                        } else {\n                            result.reject();\n                        }\n                    });\n                }\n            })\n            .fail(function () {\n                result.reject();\n            });\n\n        // if fail, don't open new project: user canceled (or we failed to save its unsaved changes)\n        return result.promise();\n    }\n\n    /**\n     * Invoke project settings dialog.\n     * @return {$.Promise}\n     */\n    function _projectSettings() {\n        return PreferencesDialogs.showProjectPreferencesDialog(getBaseUrl()).getPromise();\n    }\n\n    /**\n     * Create a new item in the current project.\n     *\n     * @param baseDir {string|Directory} Full path of the directory where the item should go.\n     *   Defaults to the project root if the entry is not valid or not within the project.\n     * @param initialName {string} Initial name for the item\n     * @param skipRename {boolean} If true, don't allow the user to rename the item\n     * @param isFolder {boolean} If true, create a folder instead of a file\n     * @return {$.Promise} A promise object that will be resolved with the File\n     *  of the created object, or rejected if the user cancelled or entered an illegal\n     *  filename.\n     */\n    function createNewItem(baseDir, initialName, skipRename, isFolder) {\n        baseDir = model.getDirectoryInProject(baseDir);\n\n        if (skipRename) {\n            if(isFolder) {\n                return model.createAtPath(baseDir + initialName + \"/\");\n            }\n            return model.createAtPath(baseDir + initialName);\n        }\n        return actionCreator.startCreating(baseDir, initialName, isFolder);\n    }\n\n    /**\n     * Delete file or directore from project\n     * @param {!(File|Directory)} entry File or Directory to delete\n     */\n    function deleteItem(entry) {\n        var result = new $.Deferred();\n        let name = _getProjectDisplayNameOrPath(entry.fullPath);\n        let message = StringUtils.format(Strings.DELETING, name);\n        setProjectBusy(true, message);\n        entry.unlink(function (err) {\n            setProjectBusy(false, message);\n            if (!err) {\n                DocumentManager.notifyPathDeleted(entry.fullPath);\n                let parent = window.path.dirname(entry.fullPath);\n                _updateModelWithChange(parent);\n                result.resolve();\n            } else {\n                _showErrorDialog(ERR_TYPE_DELETE, entry.isDirectory, FileUtils.getFileErrorString(err), entry.fullPath);\n\n                result.reject(err);\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Returns a filter for use with getAllFiles() that filters files based on LanguageManager language id\n     * @param {!(string|Array.<string>)} languageId a single string of a language id or an array of language ids\n     * @return {!function(File):boolean}\n     */\n    function getLanguageFilter(languageId) {\n        return function languageFilter(file) {\n            var id = LanguageManager.getLanguageForPath(file.fullPath).getId();\n            if (typeof languageId === \"string\") {\n                return (id === languageId);\n            }\n            return (languageId.indexOf(id) !== -1);\n\n        };\n    }\n\n    /**\n     * @private\n     *\n     * Respond to a FileSystem change event. Note that if renames are initiated\n     * externally, they may be reported as a separate removal and addition. In\n     * this case, the editor state isn't currently preserved.\n     *\n     * @param {$.Event} event\n     * @param {?(File|Directory)} entry File or Directory changed\n     * @param {Array.<FileSystemEntry>=} added If entry is a Directory, contains zero or more added children\n     * @param {Array.<FileSystemEntry>=} removed If entry is a Directory, contains zero or more removed children\n     */\n    _fileSystemChange = function (event, entry, added, removed) {\n        FileSyncManager.syncOpenDocuments();\n\n        model.handleFSEvent(entry, added, removed);\n        let removedInProject = [],\n            addedInProject = [];\n\n        // @TODO: DocumentManager should implement its own fsChange  handler\n        //          we can clean up the calls to DocumentManager.notifyPathDeleted\n        //          and privatize DocumentManager.notifyPathDeleted as well\n        //        We can also remove the _fileSystemRename handler below and move\n        //          it to DocumentManager\n        if (removed) {\n            removed.forEach(function (file) {\n                // The call to syncOpenDocuemnts above will not nofify\n                //  document manager about deleted images that are\n                //  not in the working set -- try to clean that up here\n                DocumentManager.notifyPathDeleted(file.fullPath);\n                if(isWithinProject(file)){\n                    removedInProject.push(file);\n                }\n            });\n        }\n        addedInProject = filterProjectFiles(added);\n\n        if(entry && !isWithinProject(entry)){\n            if(addedInProject && addedInProject.length && isWithinProject(addedInProject[0].parentPath)){\n                entry = FileSystem.getDirectoryForPath(addedInProject[0].parentPath);\n            } else if(removedInProject && removedInProject.length && isWithinProject(removedInProject[0].parentPath)){\n                entry = FileSystem.getDirectoryForPath(removedInProject[0].parentPath);\n            } else {\n                return;\n            }\n        }\n        exports.trigger(EVENT_PROJECT_FILE_CHANGED, entry, addedInProject, removedInProject);\n    };\n\n    function _updateModelWithChange(path) {\n        FileSystem.resolve(path, (err, entry)=>{\n            if(!err){\n                model.handleFSEvent(entry);\n            }\n        });\n    }\n\n    /**\n     * @private\n     * Respond to a FileSystem rename event.\n     */\n    _fileSystemRename = function (event, oldName, newName) {\n        // Tell the document manager about the name change. This will update\n        // all of the model information and send notification to all views\n        let oldParent = window.path.dirname(oldName),\n            newParent = window.path.dirname(newName);\n        _updateModelWithChange(oldParent);\n        if(newParent!== oldParent){\n            _updateModelWithChange(newParent);\n        }\n        DocumentManager.notifyPathNameChanged(oldName, newName);\n        exports.trigger(EVENT_PROJECT_FILE_RENAMED, oldName, newName);\n    };\n\n    /**\n     * Causes the rename operation that's in progress to complete.\n     */\n    function forceFinishRename() {\n        actionCreator.performRename();\n    }\n\n    /**\n     * @private\n     *\n     * Sets the width of the selection bar in the file tree.\n     *\n     * @param {int} width New width value\n     */\n    function _setFileTreeSelectionWidth(width) {\n        model.setSelectionWidth(width);\n        _renderTreeSync();\n    }\n\n    let _numPendingOperations = 0,\n        projectBusyMessages = [];\n\n    /**\n     * Sets or unsets project busy spinner with the specified message as reason.\n     *\n     * For Eg., if you want to mark project as busy with reason compiling project:\n     * `setProjectBusy(true, \"compiling project...\")` . The project spinner will be shown with the specified reason.\n     *\n     * Once the compilation is complete, call, we need to unset the busy status by calling:\n     * `setProjectBusy(false, \"compiling project...\")` . Make sure to pass in the exact message when\n     * calling set and unset.\n     *\n     * @param {boolean} isBusy true or false to set the project as busy or not\n     * @param {string} message The reason why the project is busy. Will be displayed as a hover tooltip on busy spinner.\n     */\n    function setProjectBusy(isBusy, message) {\n        const $projectSpinner = $(\"#project-operations-spinner\");\n        message = message || Strings.PROJECT_BUSY;\n        if(isBusy){\n            _numPendingOperations++;\n            projectBusyMessages.push(message);\n        } else{\n            _numPendingOperations--;\n            console.log(\"ProjectBusy marked by: \", projectBusyMessages);\n            console.log(\"removing busy status: \", message);\n            const index = projectBusyMessages.indexOf(message);\n            if (index > -1) {\n                // can't use array.filter here as it will filter all similar messages like [\"copy\",\"copy\"]\n                projectBusyMessages.splice(index, 1);\n            }\n            console.log(projectBusyMessages);\n        }\n        if(projectBusyMessages.length > 0){\n            $projectSpinner.attr(\"title\", projectBusyMessages.join(\", \"));\n        }\n        if(_numPendingOperations > 0){\n            $projectSpinner.removeClass(\"forced-hidden\");\n        } else {\n            $projectSpinner.addClass(\"forced-hidden\");\n        }\n    }\n\n    // after model change, queue path for selection. As there can be only one selection, the last selection wins.\n    let queuePathForSelection = null;\n    model.on(ProjectModel.EVENT_CHANGE, async ()=>{\n        // Path that is being copied can be selected only after project model is updated.\n        if(queuePathForSelection){\n            let entry = (await FileSystem.resolveAsync(queuePathForSelection)).entry;\n            if(entry.isFile){\n                actionCreator.setSelected(queuePathForSelection);\n            }\n            queuePathForSelection = null;\n        }\n    });\n\n    model.on(ProjectModel.EVENT_FS_RENAME_STARTED, ()=>{\n        setProjectBusy(true, Strings.RENAMING);\n    });\n    model.on(ProjectModel.EVENT_FS_RENAME_END, ()=>{\n        setProjectBusy(false, Strings.RENAMING);\n    });\n\n    function _duplicateFileCMD() {\n        let context = getContext();\n        let fullPath = context && context.fullPath;\n        if(!fullPath){\n            fullPath = MainViewManager.getCurrentlyViewedPath(MainViewManager.ACTIVE_PANE);\n        }\n        if(fullPath && isWithinProject(fullPath)){\n            let name = _getProjectDisplayNameOrPath(fullPath);\n            let message = StringUtils.format(Strings.DUPLICATING, name);\n            setProjectBusy(true, message);\n            FileSystem.getFreePath(fullPath, (err, dupePath)=>{\n                FileSystem.copy(fullPath, dupePath, (err, copiedStats)=>{\n                    setProjectBusy(false, message);\n                    if(err){\n                        _showErrorDialog(ERR_TYPE_DUPLICATE_FAILED, false, \"err\",\n                            _getProjectDisplayNameOrPath(fullPath));\n                        return;\n                    }\n                    FileSystem.resolve(dupePath, function (err, file) {\n                        if(!err) {\n                            // we have to wait a bit for the tree to be in sync before locating file in tree\n                            setTimeout(()=>{\n                                showInTree(file);\n                            }, 200);\n                        }\n                    });\n                });\n            });\n        } else {\n            Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_ERROR,\n                Strings.CANNOT_DUPLICATE_TITLE,\n                Strings.ERR_TYPE_DUPLICATE_FAILED_NO_FILE\n            );\n        }\n    }\n\n    function _zipFailed(fullPath) {\n        _showErrorDialog(ERR_TYPE_DOWNLOAD_FAILED, false, \"err\",\n            _getProjectDisplayNameOrPath(fullPath));\n    }\n\n    function _downloadFolderCommand(downloadPath) {\n        downloadPath = downloadPath || getProjectRoot().fullPath;\n        let projectName = path.basename(downloadPath);\n        let message = StringUtils.format(Strings.DOWNLOADING_FILE, projectName);\n        setProjectBusy(true, message);\n        ZipUtils.zipFolder(downloadPath).then(zip=>{\n            return zip.generateAsync({type:\"blob\"});\n        }).then(function (blob) {\n            window.saveAs(blob, `${projectName}.zip`);\n        }).catch(()=>{\n            _zipFailed(downloadPath);\n        }).finally(()=>{\n            setProjectBusy(false, message);\n        });\n    }\n\n    function _downloadCommand(entryToDownload) {\n        let context = entryToDownload || getContext();\n        let fullPath = context && context.fullPath;\n        if(!fullPath){\n            fullPath = MainViewManager.getCurrentlyViewedPath(MainViewManager.ACTIVE_PANE);\n        }\n        if(fullPath){\n            FileSystem.resolve(fullPath, function (err, fileOrFolder) {\n                if(err) {\n                    _zipFailed(fullPath);\n                    return;\n                }\n                let name = _getProjectDisplayNameOrPath(fullPath);\n                let message = StringUtils.format(Strings.DOWNLOADING_FILE, name);\n                if(fileOrFolder.isFile){\n                    setProjectBusy(true, message);\n                    fileOrFolder.read({encoding: window.fs.BYTE_ARRAY_ENCODING}, function (err, blobContent) {\n                        if (err){\n                            _zipFailed(fullPath);\n                            return;\n                        }\n                        setProjectBusy(false, message);\n                        let blob = new Blob([blobContent], {type:\"application/octet-stream\"});\n                        window.saveAs(blob, path.basename(fullPath));\n                    });\n                } else {\n                    _downloadFolderCommand(fullPath);\n                }\n            });\n        }\n    }\n\n    const OPERATION_CUT = 'cut',\n        OPERATION_COPY = 'copy';\n\n    function _registerPathWithClipboard(path, operation) {\n        Phoenix.app.copyToClipboard(window.path.basename(path));\n        PhStore.setItem(CLIPBOARD_SYNC_KEY, {\n            operation: operation,\n            path: path\n        });\n    }\n\n    /**\n     * Return the project root relative path of the given path.\n     * @param {string} path\n     * @return {string}\n     */\n    function getProjectRelativePath(path) {\n        let projectRootParent = window.path.dirname(getProjectRoot().fullPath);\n        let relativePath = window.path.relative(projectRootParent, path);\n        return relativePath;\n    }\n\n    function _getProjectDisplayNameOrPath(path) {\n        // sometimes, when we copy across projects, there can be two project roots at work. For eg, when copying\n        // across /mnt/prj1 and /app/local/prj2; both should correctly resolve to prj1/ and prj2/ even though only\n        // /mnt/prj1 is the current active project root. So we cannot really use getProjectRoot().fullPath for all cases\n        let projectRootParent = window.path.dirname(getProjectRoot().fullPath);\n        let displayPath = window.path.relative(projectRootParent, path);\n        if(path.startsWith(Phoenix.VFS.getMountDir())){\n            displayPath = window.path.relative(Phoenix.VFS.getMountDir(), path);\n        } else if(path.startsWith(Phoenix.VFS.getTauriDir())){\n            displayPath = window.fs.getTauriPlatformPath(path);\n        } else if(path.startsWith(Phoenix.VFS._getVirtualDocumentsDirectory())){\n            displayPath = window.path.relative(Phoenix.VFS._getVirtualDocumentsDirectory(), path);\n        }\n        return displayPath;\n    }\n\n    function _copyProjectRelativePath() {\n        let context = getContext();\n        let fullPath = context && context.fullPath;\n        if(!fullPath){\n            fullPath = MainViewManager.getCurrentlyViewedPath(MainViewManager.ACTIVE_PANE);\n        }\n        if(fullPath){\n            let projectRoot = getProjectRoot().fullPath;\n            let relativePath = window.path.relative(projectRoot, fullPath);\n            Phoenix.app.copyToClipboard(relativePath);\n            PhStore.setItem(CLIPBOARD_SYNC_KEY, {});\n        }\n    }\n\n    function _cutFileCMD() {\n        let context = getContext();\n        let fullPath = context && context.fullPath;\n        if(!fullPath){\n            fullPath = MainViewManager.getCurrentlyViewedPath(MainViewManager.ACTIVE_PANE);\n        }\n        if(fullPath){\n            _registerPathWithClipboard(fullPath, OPERATION_CUT);\n        }\n    }\n\n    function _copyFileCMD() {\n        let context = getContext();\n        let fullPath = context && context.fullPath;\n        if(!fullPath){\n            fullPath = MainViewManager.getCurrentlyViewedPath(MainViewManager.ACTIVE_PANE);\n        }\n        if(fullPath){\n            _registerPathWithClipboard(fullPath, OPERATION_COPY);\n        }\n    }\n\n    // this function should be given a destination that always exists, be it file or dir\n    function _getPasteTarget(dstThatExists) {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            try {\n                let entry = (await FileSystem.resolveAsync(dstThatExists)).entry;\n                if(entry.isFile){\n                    let parent = window.path.dirname(dstThatExists);\n                    let parentEntry = (await FileSystem.resolveAsync(parent)).entry;\n                    resolve(parentEntry);\n                } else {\n                    resolve(entry);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    function _isSubPathOf(dir, subDir) {\n        const relative = window.path.relative(dir, subDir);\n        return relative && !relative.startsWith('..') && !window.path.isAbsolute(relative);\n    }\n\n    async function _validatePasteTarget(srcEntry, targetEntry) {\n        if(_isSubPathOf(srcEntry.fullPath, targetEntry.fullPath)){\n            _showErrorDialog(ERR_TYPE_PASTE_FAILED, srcEntry.isDirectory, \"err\",\n                _getProjectDisplayNameOrPath(srcEntry.fullPath),\n                _getProjectDisplayNameOrPath(targetEntry.fullPath));\n            return false;\n        }\n        let baseName = window.path.basename(srcEntry.fullPath);\n        let targetPath = window.path.normalize(`${targetEntry.fullPath}/${baseName}`);\n        let exists = await FileSystem.existsAsync(targetPath);\n        if(exists){\n            _showErrorDialog(ERR_TYPE_PASTE, srcEntry.isDirectory, \"err\", _getProjectDisplayNameOrPath(targetPath));\n            return false;\n        }\n        return true;\n    }\n\n    async function _performCut(src, dst) {\n        let target = await _getPasteTarget(dst);\n        let srcEntry = (await FileSystem.resolveAsync(src)).entry;\n        let canPaste = await _validatePasteTarget(srcEntry, target);\n        if(canPaste){\n            let baseName = window.path.basename(srcEntry.fullPath);\n            let targetPath = window.path.normalize(`${target.fullPath}/${baseName}`);\n            let message = StringUtils.format(Strings.MOVING, _getProjectDisplayNameOrPath(srcEntry.fullPath));\n            setProjectBusy(true, message);\n            srcEntry.rename(targetPath, (err)=>{\n                setProjectBusy(false, message);\n                if(err){\n                    _showErrorDialog(ERR_TYPE_PASTE_FAILED, srcEntry.isDirectory, \"err\",\n                        _getProjectDisplayNameOrPath(srcEntry.fullPath),\n                        _getProjectDisplayNameOrPath(target.fullPath));\n                    return;\n                }\n                queuePathForSelection = targetPath;\n            });\n        }\n    }\n\n    async function _performCopy(src, dst) {\n        let target = await _getPasteTarget(dst);\n        let srcEntry = (await FileSystem.resolveAsync(src)).entry;\n        let canPaste = await _validatePasteTarget(srcEntry, target);\n        if(canPaste){\n            let name = _getProjectDisplayNameOrPath(srcEntry.fullPath);\n            let message = StringUtils.format(Strings.COPYING, name);\n            setProjectBusy(true, message);\n            FileSystem.copy(srcEntry.fullPath, target.fullPath, (err, targetStat)=>{\n                setProjectBusy(false, message);\n                if(err){\n                    _showErrorDialog(ERR_TYPE_PASTE_FAILED, srcEntry.isDirectory, \"err\",\n                        _getProjectDisplayNameOrPath(srcEntry.fullPath),\n                        _getProjectDisplayNameOrPath(target.fullPath));\n                    return;\n                }\n                queuePathForSelection = targetStat.realPath;\n            });\n        }\n    }\n\n    function _pasteFileCMD() {\n        let targetPath = getProjectRoot().fullPath;\n        let context = getContext();\n        if(context){\n            targetPath = context.fullPath;\n        }\n        const clipboard = PhStore.getItem(CLIPBOARD_SYNC_KEY);\n        if(!clipboard){\n            return;\n        }\n        switch (clipboard.operation) {\n        case OPERATION_CUT: _performCut(clipboard.path, targetPath); break;\n        case OPERATION_COPY: _performCopy(clipboard.path, targetPath); break;\n        default: console.error(\"Clipboard unknown Operation: \", clipboard, targetPath);\n        }\n    }\n\n    // Initialize variables and listeners that depend on the HTML DOM\n    AppInit.htmlReady(function () {\n        PhStore.watchExternalChanges(CLIPBOARD_SYNC_KEY);\n        $projectTreeContainer = $(\"#project-files-container\");\n        $projectTreeContainer.addClass(\"jstree jstree-brackets\");\n        $projectTreeContainer.css(\"overflow\", \"auto\");\n        $projectTreeContainer.css(\"position\", \"relative\");\n\n        fileTreeViewContainer = $(\"<div>\").appendTo($projectTreeContainer)[0];\n\n        model.setSelectionWidth($projectTreeContainer.width());\n\n        $(\".main-view\").click(function (jqEvent) {\n            if (!jqEvent.target.classList.contains(\"jstree-rename-input\")) {\n                forceFinishRename();\n                actionCreator.setContext(null);\n            }\n        });\n\n        $(\"#working-set-list-container\").on(EVENT_CONTENT_CHANGED, function () {\n            $projectTreeContainer.trigger(EVENT_CONTENT_CHANGED);\n        });\n\n        Menus.getContextMenu(Menus.ContextMenuIds.PROJECT_MENU).on(\"beforeContextMenuOpen\", function () {\n            actionCreator.restoreContext();\n        });\n\n        Menus.getContextMenu(Menus.ContextMenuIds.PROJECT_MENU).on(\"beforeContextMenuClose\", function () {\n            model.setContext(null, false, true);\n        });\n\n        $projectTreeContainer.on(\"contextmenu\", function () {\n            forceFinishRename();\n        });\n\n        $projectTreeContainer.on(\"dragover\", function(e) {\n            e.preventDefault();\n        });\n\n        // Add support for moving items to root directory\n        $projectTreeContainer.on(\"drop\", function(e) {\n            var data = JSON.parse(e.originalEvent.dataTransfer.getData(\"text\"));\n            actionCreator.moveItem(data.path, getProjectRoot().fullPath);\n            e.stopPropagation();\n        });\n\n        // When a context menu item is selected, we need to clear the context\n        // because we don't get a beforeContextMenuClose event since Bootstrap\n        // handles this directly.\n        $(\"#project-context-menu\").on(\"click.dropdown-menu\", function () {\n            model.setContext(null, true);\n        });\n\n        $projectTreeContainer.on(\"scroll\", function () {\n            // Close open menus on scroll and clear the context, but only if there's a menu open.\n            if ($(\".dropdown.open\").length > 0) {\n                Menus.closeAll();\n                actionCreator.setContext(null);\n            }\n            // we need to render the tree without a delay to not cause selection extension issues (#10573)\n            _renderTreeSync();\n        });\n\n        _renderTree();\n\n        ViewUtils.addScrollerShadow($projectTreeContainer[0]);\n    });\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // Init default project path to welcome project\n    PreferencesManager.stateManager.definePreference(\"projectPath\", \"string\", getWelcomeProjectPath());\n\n    function _setProjectDownloadCommandEnabled(_event, projectRoot) {\n        CommandManager.get(Commands.FILE_DOWNLOAD_PROJECT)\n            .setEnabled(!Phoenix.VFS.isLocalDiscPath(projectRoot.fullPath));\n        CommandManager.get(Commands.FILE_DOWNLOAD)\n            .setEnabled(!Phoenix.VFS.isLocalDiscPath(projectRoot.fullPath));\n    }\n\n    exports.on(EVENT_PROJECT_OPEN, _reloadProjectPreferencesScope);\n    exports.on(EVENT_PROJECT_OPEN, _saveProjectPath);\n    exports.on(EVENT_PROJECT_OPEN, _setProjectDownloadCommandEnabled);\n    exports.on(\"beforeAppClose\", _unwatchProjectRoot);\n\n    // Due to circular dependencies, not safe to call on() directly for other modules' events\n    EventDispatcher.on_duringInit(FileViewController, \"documentSelectionFocusChange\", _documentSelectionFocusChange);\n    EventDispatcher.on_duringInit(FileViewController, \"fileViewFocusChange\", _fileViewControllerChange);\n    EventDispatcher.on_duringInit(MainViewManager, \"currentFileChange\", _currentFileChange);\n\n    // Commands\n    CommandManager.register(Strings.CMD_OPEN_FOLDER,      Commands.FILE_OPEN_FOLDER,      openProject);\n    CommandManager.register(Strings.CMD_PROJECT_SETTINGS, Commands.FILE_PROJECT_SETTINGS, _projectSettings);\n    CommandManager.register(Strings.CMD_FILE_REFRESH,     Commands.FILE_REFRESH,          refreshFileTree);\n    CommandManager.register(Strings.CMD_FILE_CUT, Commands.FILE_CUT, _cutFileCMD);\n    CommandManager.register(Strings.CMD_FILE_COPY, Commands.FILE_COPY, _copyFileCMD);\n    CommandManager.register(Strings.CMD_FILE_COPY_PATH, Commands.FILE_COPY_PATH, _copyProjectRelativePath);\n    CommandManager.register(Strings.CMD_FILE_PASTE, Commands.FILE_PASTE, _pasteFileCMD);\n    CommandManager.register(Strings.CMD_FILE_DUPLICATE, Commands.FILE_DUPLICATE, _duplicateFileCMD);\n    CommandManager.register(Strings.CMD_FILE_DUPLICATE_FILE, Commands.FILE_DUPLICATE_FILE, _duplicateFileCMD);\n    CommandManager.register(Strings.CMD_FILE_DOWNLOAD_PROJECT, Commands.FILE_DOWNLOAD_PROJECT, _downloadFolderCommand);\n    CommandManager.register(Strings.CMD_FILE_DOWNLOAD, Commands.FILE_DOWNLOAD, _downloadCommand);\n\n    // Define the preference to decide how to sort the Project Tree files\n    PreferencesManager.definePreference(SORT_DIRECTORIES_FIRST, \"boolean\", true, {\n        description: Strings.DESCRIPTION_SORT_DIRECTORIES_FIRST\n    })\n        .on(\"change\", function () {\n            let sortPref = PreferencesManager.get(SORT_DIRECTORIES_FIRST);\n            actionCreator.setSortDirectoriesFirst(sortPref);\n            CommandManager.get(Commands.FILE_SHOW_FOLDERS_FIRST).setChecked(sortPref);\n        });\n    CommandManager.register(Strings.CMD_FILE_SHOW_FOLDERS_FIRST, Commands.FILE_SHOW_FOLDERS_FIRST, _showFolderFirst);\n    CommandManager.get(Commands.FILE_SHOW_FOLDERS_FIRST).setChecked(PreferencesManager.get(SORT_DIRECTORIES_FIRST));\n\n    actionCreator.setSortDirectoriesFirst(PreferencesManager.get(SORT_DIRECTORIES_FIRST));\n\n    /**\n     * Gets the filesystem object for the current context in the file tree.\n     */\n    function getContext() {\n        return model.getContext();\n    }\n\n    /**\n     * Starts a rename operation, completing the current operation if there is one.\n     *\n     * The Promise returned is resolved with an object with a `newPath` property with the renamed path. If the user cancels the operation, the promise is resolved with the value RENAME_CANCELLED.\n     *\n     * @param {FileSystemEntry} entry file or directory filesystem object to rename\n     * @param {boolean=} isMoved optional flag which indicates whether the entry is being moved instead of renamed\n     * @return {$.Promise} a promise resolved when the rename is done.\n     */\n    function renameItemInline(entry, isMoved) {\n        var d = new $.Deferred();\n\n        model.startRename(entry, isMoved)\n            .done(function () {\n                d.resolve();\n            })\n            .fail(function (errorInfo) {\n                // Need to do display the error message on the next event loop turn\n                // because some errors can come up synchronously and then the dialog\n                // is not displayed.\n                window.setTimeout(function () {\n                    if (isMoved) {\n                        switch (errorInfo.type) {\n                        case FileSystemError.ALREADY_EXISTS:\n                            _showErrorDialog(ERR_TYPE_MOVE, errorInfo.isFolder, Strings.FILE_EXISTS_ERR, errorInfo.fullPath);\n                            break;\n                        case ProjectModel.ERROR_NOT_IN_PROJECT:\n                            _showErrorDialog(ERR_TYPE_MOVE, errorInfo.isFolder, Strings.ERROR_MOVING_NOT_IN_PROJECT, errorInfo.fullPath);\n                            break;\n                        default:\n                            _showErrorDialog(ERR_TYPE_MOVE, errorInfo.isFolder, FileUtils.getFileErrorString(errorInfo.type), errorInfo.fullPath);\n                        }\n                    } else {\n                        switch (errorInfo.type) {\n                        case ProjectModel.ERROR_INVALID_FILENAME:\n                            _showErrorDialog(ERR_TYPE_INVALID_FILENAME, errorInfo.isFolder, ProjectModel._invalidChars);\n                            break;\n                        case FileSystemError.ALREADY_EXISTS:\n                            _showErrorDialog(ERR_TYPE_RENAME, errorInfo.isFolder, Strings.FILE_EXISTS_ERR, errorInfo.fullPath);\n                            break;\n                        case ProjectModel.ERROR_NOT_IN_PROJECT:\n                            _showErrorDialog(ERR_TYPE_RENAME, errorInfo.isFolder, Strings.ERROR_RENAMING_NOT_IN_PROJECT, errorInfo.fullPath);\n                            break;\n                        default:\n                            _showErrorDialog(ERR_TYPE_RENAME, errorInfo.isFolder, FileUtils.getFileErrorString(errorInfo.type), errorInfo.fullPath);\n                        }\n                    }\n                }, 10);\n                d.reject(errorInfo);\n            });\n        return d.promise();\n    }\n\n    /**\n     * Returns an Array of all files for this project, optionally including\n     * files in the working set that are *not* under the project root. Files are\n     * filtered first by ProjectModel.shouldShow(), then by the custom filter\n     * argument (if one was provided).\n     *\n     * @param {function (File, number):boolean=} filter Optional function to filter\n     *          the file list (does not filter directory traversal). API matches Array.filter().\n     * @param {boolean=} includeWorkingSet If true, include files in the working set\n     *          that are not under the project root (*except* for untitled documents).\n     * @param {boolean=} sort If true, The files will be sorted by their paths\n     *\n     * @return {$.Promise} Promise that is resolved with an Array of File objects.\n     */\n    function getAllFiles(filter, includeWorkingSet, sort) {\n        var viewFiles, deferred;\n\n        // The filter and includeWorkingSet params are both optional.\n        // Handle the case where filter is omitted but includeWorkingSet is\n        // specified.\n        if (includeWorkingSet === undefined && typeof (filter) !== \"function\") {\n            includeWorkingSet = filter;\n            filter = null;\n        }\n\n        if (includeWorkingSet) {\n            viewFiles = MainViewManager.getWorkingSet(MainViewManager.ALL_PANES);\n        }\n\n        deferred = new $.Deferred();\n        model.getAllFiles(filter, viewFiles, sort)\n            .done(function (fileList) {\n                deferred.resolve(fileList);\n            })\n            .fail(function (err) {\n                if (err === FileSystemError.TOO_MANY_ENTRIES && !_projectWarnedForTooManyFiles) {\n                    _showErrorDialog(ERR_TYPE_MAX_FILES);\n                    _projectWarnedForTooManyFiles = true;\n                }\n                // resolve with empty list\n                deferred.resolve([]);\n            });\n        return deferred.promise();\n    }\n\n    /**\n     * Adds an icon provider. The callback is invoked before each working set item is created, and can\n     * return content to prepend to the item if it supports the icon.\n     *\n     * @param {!function(!{name:string, fullPath:string, isFile:boolean}):?string|jQuery|DOMNode} callback\n     * Return a string representing the HTML, a jQuery object or DOM node, or undefined. If undefined,\n     * nothing is prepended to the list item and the default or an available icon will be used.\n     * @param {number} [priority] optional priority. 0 being lowest. The icons with the highest priority wins if there\n     * are multiple callback providers attached. icon providers of the same priority first valid response wins.\n     */\n    function addIconProvider(callback, priority= 0) {\n        WorkingSetView.addIconProvider(callback, priority);\n        return FileTreeView.addIconProvider(callback, priority);\n    }\n\n    /**\n     * Adds a CSS class provider, invoked before each working set item is created or updated. When called\n     * to update an existing item, all previously applied classes have been cleared.\n     *\n     * @param {!function(!{name:string, fullPath:string, isFile:boolean}):?string} callback\n     * Return a string containing space-separated CSS class(es) to add, or undefined to leave CSS unchanged.\n     * @param {number} [priority] optional priority. 0 being lowest. The class with the highest priority wins if there\n     * are multiple callback classes attached. class providers of the same priority will be appended.\n     */\n    function addClassesProvider(callback, priority) {\n        WorkingSetView.addClassProvider(callback, priority);\n        return FileTreeView.addClassesProvider(callback, priority);\n    }\n\n    /**\n     * Forces the file tree to rerender. Typically, the tree only rerenders the portions of the\n     * tree that have changed data. If an extension that augments the tree has changes that it\n     * needs to display, calling rerenderTree will cause the components for the whole tree to\n     * be rerendered.\n     */\n    function rerenderTree() {\n        _renderTree(true);\n    }\n\n\n    // Private API helpful in testing\n    exports._actionCreator                = actionCreator;\n    exports._RENDER_DEBOUNCE_TIME         = _RENDER_DEBOUNCE_TIME;\n\n    // Private API for use with SidebarView\n    exports._setFileTreeSelectionWidth    = _setFileTreeSelectionWidth;\n\n    // Define public API\n    exports.getProjectRoot                = getProjectRoot;\n    exports.getBaseUrl                    = getBaseUrl;\n    exports.setBaseUrl                    = setBaseUrl;\n    exports.isWithinProject               = isWithinProject;\n    exports.filterProjectFiles            = filterProjectFiles;\n    exports.makeProjectRelativeIfPossible = makeProjectRelativeIfPossible;\n    exports.shouldShow                    = ProjectModel.shouldShow;\n    exports.shouldIndex                   = ProjectModel.shouldIndex;\n    exports.openProject                   = openProject;\n    exports.getFileTreeContext            = getFileTreeContext;\n    exports.getSelectedItem               = getSelectedItem;\n    exports.getContext                    = getContext;\n    exports.getInitialProjectPath         = getInitialProjectPath;\n    exports.getStartupProjectPath         = getStartupProjectPath;\n    exports.getProjectRelativePath        = getProjectRelativePath;\n    exports.getWelcomeProjectPath         = getWelcomeProjectPath;\n    exports.getExploreProjectPath         = getExploreProjectPath;\n    exports.getLocalProjectsPath          = getLocalProjectsPath;\n    exports.isWelcomeProjectPath          = isWelcomeProjectPath;\n    exports.updateWelcomeProjectPath      = updateWelcomeProjectPath;\n    exports.createNewItem                 = createNewItem;\n    exports.renameItemInline              = renameItemInline;\n    exports.deleteItem                    = deleteItem;\n    exports.forceFinishRename             = forceFinishRename;\n    exports.showInTree                    = showInTree;\n    exports.refreshFileTree               = refreshFileTree;\n    exports.getAllFiles                   = getAllFiles;\n    exports.getLanguageFilter             = getLanguageFilter;\n    exports.addIconProvider               = addIconProvider;\n    exports.addClassesProvider            = addClassesProvider;\n    exports.rerenderTree                  = rerenderTree;\n    exports.setProjectBusy                = setProjectBusy;\n\n    // public events\n    exports.EVENT_PROJECT_BEFORE_CLOSE = EVENT_PROJECT_BEFORE_CLOSE;\n    exports.EVENT_PROJECT_CLOSE = EVENT_PROJECT_CLOSE;\n    exports.EVENT_PROJECT_OPEN = EVENT_PROJECT_OPEN;\n    exports.EVENT_AFTER_PROJECT_OPEN = EVENT_AFTER_PROJECT_OPEN;\n    exports.EVENT_PROJECT_REFRESH = EVENT_PROJECT_REFRESH;\n    exports.EVENT_CONTENT_CHANGED = EVENT_CONTENT_CHANGED;\n    exports.EVENT_PROJECT_FILE_CHANGED = EVENT_PROJECT_FILE_CHANGED;\n    exports.EVENT_PROJECT_FILE_RENAMED = EVENT_PROJECT_FILE_RENAMED;\n    exports.EVENT_PROJECT_OPEN_FAILED = EVENT_PROJECT_OPEN_FAILED;\n});\n"],"file":"ProjectManager.js"}