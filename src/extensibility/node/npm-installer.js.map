{"version":3,"sources":["extensibility/node/npm-installer.js"],"names":["fs","require","path","spawn","Errors","NPM_INSTALL_FAILED","_performNpmInstall","installDirectory","npmOptions","callback","npmPath","args","resolve","dirname","concat","console","log","slice","join","child","process","execPath","cwd","on","err","stdout","addListener","buffer","push","stderr","exitCode","code","Buffer","toString","error","Error","warn","stdin","end","performNpmInstallIfRequired","validationResult","finish","extractDir","commonPrefix","packageJson","readJsonSync","e","dependencies","Object","keys","length","errors","exports"],"mappings":"AAyBA,IAAIA,GAAQC,QAAQ,YAChBC,KAAQD,QAAQ,QAChBE,MAAQF,QAAQ,iBAAiBE,MAEjCC,OAAS,CACTC,mBAAoB,sBAUxB,SAASC,mBAAmBC,iBAAkBC,WAAYC,UACtD,IAAIC,QACAC,KAAO,CADGT,KAAKU,QAAQV,KAAKW,QAAQZ,QAAQW,QAAQ,QAAS,KAAM,MAAO,cACzD,WAAWE,OAAON,YAEvCO,QAAQC,IAAI,eAAiBL,KAAKM,MAAM,GAAGC,KAAK,KAAO,OAASX,kBAEhE,IAAIY,MAAQhB,MAAMiB,QAAQC,SAAUV,KAAM,CAAEW,IAAKf,mBAEjDY,MAAMI,GAAG,QAAS,SAAUC,KACxB,OAAOf,SAASe,OAGpB,IAAIC,OAAS,GACbN,MAAMM,OAAOC,YAAY,OAAQ,SAAUC,QACvCF,OAAOG,KAAKD,UAGhB,IAAIE,OAAS,GACbV,MAAMU,OAAOH,YAAY,OAAQ,SAAUC,QACvCE,OAAOD,KAAKD,UAGhB,IAAIG,SAAW,EACfX,MAAMO,YAAY,OAAQ,SAAUK,MAChCD,SAAWC,OAGfZ,MAAMO,YAAY,QAAS,WAGvB,OAFAG,OAASG,OAAOlB,OAAOe,QAAQI,WAC/BR,OAASO,OAAOlB,OAAOW,QAAQQ,WAC3BH,SAAW,GACXf,QAAQmB,MAAM,eAAiBL,QACxBpB,SAAS,IAAI0B,MAAMN,WAE1BA,QACAd,QAAQqB,KAAK,eAAiBP,QAElCd,QAAQC,IAAI,eAAiBS,QACtBhB,cAGXU,MAAMkB,MAAMC,MAShB,SAASC,4BAA4B/B,WAAYgC,iBAAkB/B,UAE/D,SAASgC,SACLhC,SAAS,KAAM+B,kBAGnB,IAAIjC,iBAAmBL,KAAKgB,KAAKsB,iBAAiBE,WAAYF,iBAAiBG,cAC3EC,YAEJ,IACIA,YAAc5C,GAAG6C,aAAa3C,KAAKgB,KAAKX,iBAAkB,iBAC5D,MAAOuC,GACLF,YAAc,KAGlB,IAAKA,cAAgBA,YAAYG,eAAiBC,OAAOC,KAAKL,YAAYG,cAAcG,OACpF,OAAOT,SAGXnC,mBAAmBC,iBAAkBC,WAAY,SAAUgB,KACnDA,KACAgB,iBAAiBW,OAAOvB,KAAK,CAACxB,OAAOC,mBAAoBmB,IAAIS,aAEjEQ,WAIRW,QAAQb,4BAA8BA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/* eslint-env node */\n\n\n\nvar fs    = require(\"fs-extra\"),\n    path  = require(\"path\"),\n    spawn = require(\"child_process\").spawn;\n\nvar Errors = {\n    NPM_INSTALL_FAILED: \"NPM_INSTALL_FAILED\"\n};\n\n/**\n * Private function to run \"npm install --production\" command in the extension directory.\n *\n * @param {string} installDirectory Directory to remove\n * @param {array} npmOptions can contain additional options like `--production` or `--proxy http://127.0.0.1:8888`\n * @param {function} callback NodeJS style callback to call after finish\n */\nfunction _performNpmInstall(installDirectory, npmOptions, callback) {\n    var npmPath = path.resolve(path.dirname(require.resolve(\"npm\")), \"..\", \"bin\", \"npm-cli.js\");\n    var args = [npmPath, \"install\"].concat(npmOptions);\n\n    console.log(\"running npm \" + args.slice(1).join(\" \") + \" in \" + installDirectory);\n\n    var child = spawn(process.execPath, args, { cwd: installDirectory });\n\n    child.on(\"error\", function (err) {\n        return callback(err);\n    });\n\n    var stdout = [];\n    child.stdout.addListener(\"data\", function (buffer) {\n        stdout.push(buffer);\n    });\n\n    var stderr = [];\n    child.stderr.addListener(\"data\", function (buffer) {\n        stderr.push(buffer);\n    });\n\n    var exitCode = 0;\n    child.addListener(\"exit\", function (code) {\n        exitCode = code;\n    });\n\n    child.addListener(\"close\", function () {\n        stderr = Buffer.concat(stderr).toString();\n        stdout = Buffer.concat(stdout).toString();\n        if (exitCode > 0) {\n            console.error(\"npm-stderr: \" + stderr);\n            return callback(new Error(stderr));\n        }\n        if (stderr) {\n            console.warn(\"npm-stderr: \" + stderr);\n        }\n        console.log(\"npm-stdout: \" + stdout);\n        return callback();\n    });\n\n    child.stdin.end();\n}\n\n/**\n * Checks package.json of the extracted extension for npm dependencies\n * and runs npm install when required.\n * @param {Object} validationResult return value of the validation procedure\n * @param {Function} callback function to be called after the end of validation procedure\n */\nfunction performNpmInstallIfRequired(npmOptions, validationResult, callback) {\n\n    function finish() {\n        callback(null, validationResult);\n    }\n\n    var installDirectory = path.join(validationResult.extractDir, validationResult.commonPrefix);\n    var packageJson;\n\n    try {\n        packageJson = fs.readJsonSync(path.join(installDirectory, \"package.json\"));\n    } catch (e) {\n        packageJson = null;\n    }\n\n    if (!packageJson || !packageJson.dependencies || !Object.keys(packageJson.dependencies).length) {\n        return finish();\n    }\n\n    _performNpmInstall(installDirectory, npmOptions, function (err) {\n        if (err) {\n            validationResult.errors.push([Errors.NPM_INSTALL_FAILED, err.toString()]);\n        }\n        finish();\n    });\n}\n\nexports.performNpmInstallIfRequired = performNpmInstallIfRequired;\n"],"file":"npm-installer.js"}