var semver=require("semver"),path=require("path"),request=require("request"),fs=require("fs-extra"),temp=require("temp"),validate=require("./package-validator").validate;temp.track();var Errors={API_NOT_COMPATIBLE:"API_NOT_COMPATIBLE",MISSING_REQUIRED_OPTIONS:"MISSING_REQUIRED_OPTIONS",DOWNLOAD_ID_IN_USE:"DOWNLOAD_ID_IN_USE",BAD_HTTP_STATUS:"BAD_HTTP_STATUS",NO_SERVER_RESPONSE:"NO_SERVER_RESPONSE",CANNOT_WRITE_TEMP:"CANNOT_WRITE_TEMP",CANCELED:"CANCELED"},Statuses={FAILED:"FAILED",INSTALLED:"INSTALLED",ALREADY_INSTALLED:"ALREADY_INSTALLED",SAME_VERSION:"SAME_VERSION",OLDER_VERSION:"OLDER_VERSION",NEEDS_UPDATE:"NEEDS_UPDATE",DISABLED:"DISABLED"},pendingDownloads={};function _removeFailedInstallation(installDirectory){fs.remove(installDirectory,function(err){err&&console.error("Error while removing directory after failed installation",installDirectory,err)})}function _performInstall(packagePath,installDirectory,validationResult,callback){function fail(err){_removeFailedInstallation(installDirectory),callback(err,null)}function finish(){validationResult.installationStatus||(validationResult.installationStatus=Statuses.INSTALLED),callback(null,validationResult)}validationResult.installedTo=installDirectory,fs.mkdirs(installDirectory,function(err){if(err)callback(err);else{var sourceDir=path.join(validationResult.extractDir,validationResult.commonPrefix);fs.copy(sourceDir,installDirectory,function(err){if(err)return fail(err);finish()})}})}function _removeAndInstall(packagePath,installDirectory,validationResult,callback){fs.remove(installDirectory,function(err){err?callback(err):_performInstall(packagePath,installDirectory,validationResult,callback)})}function _checkExistingInstallation(validationResult,installDirectory,systemInstallDirectory,callback){if(!validationResult.metadata)return validationResult.installationStatus=Statuses.ALREADY_INSTALLED,void callback(null,validationResult);fs.readJson(path.join(installDirectory,"package.json"),function(err,packageObj){err?validationResult.installationStatus=Statuses.NEEDS_UPDATE:semver.lt(packageObj.version,validationResult.metadata.version)?validationResult.installationStatus=Statuses.NEEDS_UPDATE:semver.gt(packageObj.version,validationResult.metadata.version)?(validationResult.installationStatus=Statuses.OLDER_VERSION,validationResult.installedVersion=packageObj.version):validationResult.installationStatus=Statuses.SAME_VERSION,callback(null,validationResult)})}function legacyPackageCheck(legacyDirectory){return fs.existsSync(legacyDirectory)&&!fs.existsSync(path.join(legacyDirectory,"package.json"))}function _cmdInstall(packagePath,destinationDirectory,options,callback,pCallback,_doUpdate){function validateCallback(err,validationResult){function deleteTempAndCallback(err){validationResult.extractDir&&(fs.remove(validationResult.extractDir),delete validationResult.extractDir),callback(err,validationResult)}if(validationResult.localPath=packagePath,err||validationResult.errors.length>0)return validationResult.installationStatus=Statuses.FAILED,void deleteTempAndCallback(err);var extensionName,guessedName;guessedName=options.nameHint?path.basename(options.nameHint,".zip"):path.basename(packagePath,".zip"),extensionName=validationResult.metadata?validationResult.metadata.name:guessedName,validationResult.name=extensionName;var installDirectory=path.join(destinationDirectory,extensionName),legacyDirectory=path.join(destinationDirectory,guessedName),systemInstallDirectory=path.join(options.systemExtensionDirectory,extensionName),compatible;if(validationResult.metadata&&validationResult.metadata.engines&&validationResult.metadata.engines.brackets&&!semver.satisfies(options.apiVersion,validationResult.metadata.engines.brackets))return installDirectory=path.join(options.disabledDirectory,extensionName),validationResult.installationStatus=Statuses.DISABLED,validationResult.disabledReason=Errors.API_NOT_COMPATIBLE,void _removeAndInstall(packagePath,installDirectory,validationResult,deleteTempAndCallback);var hasLegacyPackage=validationResult.metadata&&legacyPackageCheck(legacyDirectory);hasLegacyPackage||fs.existsSync(installDirectory)||fs.existsSync(systemInstallDirectory)?!0===_doUpdate?hasLegacyPackage?fs.remove(legacyDirectory,function(err){err?deleteTempAndCallback(err):_removeAndInstall(packagePath,installDirectory,validationResult,deleteTempAndCallback)}):_removeAndInstall(packagePath,installDirectory,validationResult,deleteTempAndCallback):hasLegacyPackage?(validationResult.installationStatus=Statuses.NEEDS_UPDATE,validationResult.name=guessedName,deleteTempAndCallback(null)):_checkExistingInstallation(validationResult,installDirectory,systemInstallDirectory,deleteTempAndCallback):(validationResult.disabledReason=null,_performInstall(packagePath,installDirectory,validationResult,deleteTempAndCallback))}options&&options.disabledDirectory&&options.apiVersion&&options.systemExtensionDirectory?validate(packagePath,options,validateCallback):callback(new Error(Errors.MISSING_REQUIRED_OPTIONS),null)}function _cmdUpdate(packagePath,destinationDirectory,options,callback,pCallback){_cmdInstall(packagePath,destinationDirectory,options,callback,pCallback,!0)}function _endDownload(downloadId,error){var downloadInfo=pendingDownloads[downloadId];delete pendingDownloads[downloadId],error?(downloadInfo.request.abort(),downloadInfo.outStream&&downloadInfo.outStream.end(function(){fs.unlink(downloadInfo.localPath)}),downloadInfo.callback(error,null)):downloadInfo.outStream.end(function(){downloadInfo.callback(null,downloadInfo.localPath)})}function _cmdDownloadFile(downloadId,url,proxy,callback,pCallback){if("function"==typeof proxy&&(callback=proxy,proxy=void 0),pendingDownloads[downloadId])callback(Errors.DOWNLOAD_ID_IN_USE,null);else{var req=request.get({url:url,encoding:null,proxy:proxy},function(error,response,body){if(error)_endDownload(downloadId,Errors.NO_SERVER_RESPONSE);else if(200===response.statusCode){var stream=temp.createWriteStream("brackets");stream?(pendingDownloads[downloadId].localPath=stream.path,pendingDownloads[downloadId].outStream=stream,stream.write(body),_endDownload(downloadId)):_endDownload(downloadId,Errors.CANNOT_WRITE_TEMP)}else _endDownload(downloadId,[Errors.BAD_HTTP_STATUS,response.statusCode])});pendingDownloads[downloadId]={request:req,callback:callback}}}function _cmdAbortDownload(downloadId){return!!pendingDownloads[downloadId]&&(_endDownload(downloadId,Errors.CANCELED),!0)}function _cmdRemove(extensionDir,callback,pCallback){fs.remove(extensionDir,function(err){callback(err||null)})}function init(domainManager){domainManager.hasDomain("extensionManager")||domainManager.registerDomain("extensionManager",{major:0,minor:1}),domainManager.registerCommand("extensionManager","validate",validate,!0,"Verifies that the contents of the given ZIP file are a valid Brackets extension package",[{name:"path",type:"string",description:"absolute filesystem path of the extension package"},{name:"options",type:"{requirePackageJSON: ?boolean}",description:"options to control the behavior of the validator"}],[{name:"errors",type:"string|Array.<string>",description:"download error, if any; first string is error code (one of Errors.*); subsequent strings are additional info"},{name:"metadata",type:"{name: string, version: string}",description:"all package.json metadata (null if there's no package.json)"}]),domainManager.registerCommand("extensionManager","install",_cmdInstall,!0,"Installs the given Brackets extension if it is valid (runs validation command automatically)",[{name:"path",type:"string",description:"absolute filesystem path of the extension package"},{name:"destinationDirectory",type:"string",description:"absolute filesystem path where this extension should be installed"},{name:"options",type:"{disabledDirectory: !string, apiVersion: !string, nameHint: ?string, systemExtensionDirectory: !string, proxy: ?string}",description:"installation options: disabledDirectory should be set so that extensions can be installed disabled."}],[{name:"errors",type:"string|Array.<string>",description:"download error, if any; first string is error code (one of Errors.*); subsequent strings are additional info"},{name:"metadata",type:"{name: string, version: string}",description:"all package.json metadata (null if there's no package.json)"},{name:"disabledReason",type:"string",description:"reason this extension was installed disabled (one of Errors.*), none if it was enabled"},{name:"installationStatus",type:"string",description:"Current status of the installation (an extension can be valid but not installed because it's an update"},{name:"installedTo",type:"string",description:"absolute path where the extension was installed to"},{name:"commonPrefix",type:"string",description:"top level directory in the package zip which contains all of the files"}]),domainManager.registerCommand("extensionManager","update",_cmdUpdate,!0,"Updates the given Brackets extension (for which install was generally previously attemped). Brackets must be quit after this.",[{name:"path",type:"string",description:"absolute filesystem path of the extension package"},{name:"destinationDirectory",type:"string",description:"absolute filesystem path where this extension should be installed"},{name:"options",type:"{disabledDirectory: !string, apiVersion: !string, nameHint: ?string, systemExtensionDirectory: !string}",description:"installation options: disabledDirectory should be set so that extensions can be installed disabled."}],[{name:"errors",type:"string|Array.<string>",description:"download error, if any; first string is error code (one of Errors.*); subsequent strings are additional info"},{name:"metadata",type:"{name: string, version: string}",description:"all package.json metadata (null if there's no package.json)"},{name:"disabledReason",type:"string",description:"reason this extension was installed disabled (one of Errors.*), none if it was enabled"},{name:"installationStatus",type:"string",description:"Current status of the installation (an extension can be valid but not installed because it's an update"},{name:"installedTo",type:"string",description:"absolute path where the extension was installed to"},{name:"commonPrefix",type:"string",description:"top level directory in the package zip which contains all of the files"}]),domainManager.registerCommand("extensionManager","remove",_cmdRemove,!0,"Removes the Brackets extension at the given path.",[{name:"path",type:"string",description:"absolute filesystem path of the installed extension folder"}],{}),domainManager.registerCommand("extensionManager","downloadFile",_cmdDownloadFile,!0,"Downloads the file at the given URL, saving it to a temp location. Callback receives path to the downloaded file.",[{name:"downloadId",type:"string",description:"Unique identifier for this download 'session'"},{name:"url",type:"string",description:"URL to download from"},{name:"proxy",type:"string",description:"optional proxy URL"}],{type:"string",description:"Local path to the downloaded file"}),domainManager.registerCommand("extensionManager","abortDownload",_cmdAbortDownload,!1,"Aborts any pending download with the given id. Ignored if no download pending (may be already complete).",[{name:"downloadId",type:"string",description:"Unique identifier for this download 'session', previously pased to downloadFile"}],{type:"boolean",description:"True if the download was pending and able to be canceled; false otherwise"})}exports._cmdValidate=validate,exports._cmdInstall=_cmdInstall,exports._cmdRemove=_cmdRemove,exports._cmdUpdate=_cmdUpdate,exports.init=init;
//# sourceMappingURL=ExtensionManagerDomain.js.map
