{"version":3,"sources":["extensibility/InstallExtensionDialog.js"],"names":["define","require","exports","module","Dialogs","File","StringUtils","Strings","FileSystem","KeyEvent","Package","NativeApp","InstallDialogTemplate","Mustache","STATE_CLOSED","STATE_START","STATE_VALID_URL","STATE_INSTALLING","STATE_INSTALLED","STATE_INSTALL_FAILED","STATE_CANCELING_INSTALL","STATE_CANCELING_HUNG","STATE_INSTALL_CANCELED","STATE_ALREADY_INSTALLED","STATE_OVERWRITE_CONFIRMED","STATE_NEEDS_UPDATE","InstallExtensionDialog","installer","_isUpdate","this","_installer","_state","_installResult","_cancelTimeout","InstallerFacade","isLocalFile","_isLocalFile","showDialog","dlg","show","installUsingDialog","urlOrFileToInstall","fullPath","updateUsingDialog","urlToUpdate","prototype","$dlg","$url","$okButton","$cancelButton","$inputArea","$msgArea","$msg","$browseExtensionsButton","_dialogDeferred","_enterState","newState","url","msg","self","prevState","find","remove","hide","prop","text","INSTALL","val","trim","format","INSTALLING_FROM","append","install","done","result","installationStatus","InstallationStatuses","ALREADY_INSTALLED","OLDER_VERSION","SAME_VERSION","NEEDS_UPDATE","fail","err","console","assert","_errorMessage","formatError","CANCELING_INSTALL","cancel","window","setTimeout","CANCELING_HUNG","removeAttr","CLOSE","INSTALL_SUCCEEDED","INSTALL_FAILED","EXTENSION_UPDATE_INSTALLED","INSTALL_CANCELED","html","$","installResult","status","msgText","metadata","version","installedVersion","OVERWRITE","document","body","off","cancelModalDialogIfOpen","resolve","reject","_handleCancel","localPath","keepFile","filename","getFileForPath","unlink","_handleOk","_handleKeyUp","e","keyCode","DOM_VK_ESCAPE","_handleUrlInput","valid","_close","urlToInstall","promise","context","isUpdate","includeBrowseExtensions","brackets","config","extension_listing_url","showModalDialogUsingTemplate","render","focus","on","bind","openURLInDefaultBrowser","Deferred","pendingInstall","error","deferred","installFromPath","then","installationResult","installFromURL","always","_Dialog"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*unittests: Install Extension Dialog*/\n\ndefine(function (require, exports, module) {\n\n\n    var Dialogs                = require(\"widgets/Dialogs\"),\n        File                   = require(\"filesystem/File\"),\n        StringUtils            = require(\"utils/StringUtils\"),\n        Strings                = require(\"strings\"),\n        FileSystem             = require(\"filesystem/FileSystem\"),\n        KeyEvent               = require(\"utils/KeyEvent\"),\n        Package                = require(\"extensibility/Package\"),\n        NativeApp              = require(\"utils/NativeApp\"),\n        InstallDialogTemplate  = require(\"text!htmlContent/install-extension-dialog.html\"),\n        Mustache               = require(\"thirdparty/mustache/mustache\");\n\n    var STATE_CLOSED              = 0,\n        STATE_START               = 1,\n        STATE_VALID_URL           = 2,\n        STATE_INSTALLING          = 3,\n        STATE_INSTALLED           = 4,\n        STATE_INSTALL_FAILED      = 5,\n        STATE_CANCELING_INSTALL   = 6,\n        STATE_CANCELING_HUNG      = 7,\n        STATE_INSTALL_CANCELED    = 8,\n        STATE_ALREADY_INSTALLED   = 9,\n        STATE_OVERWRITE_CONFIRMED = 10,\n        STATE_NEEDS_UPDATE        = 11;\n\n    /**\n     * Creates a new extension installer dialog.\n     * @constructor\n     * @param {{install: function(url), cancel: function()}} installer The installer backend to use.\n     */\n    function InstallExtensionDialog(installer, _isUpdate) {\n        this._installer = installer;\n        this._state = STATE_CLOSED;\n        this._installResult = null;\n        this._isUpdate = _isUpdate;\n\n        // Timeout before we allow user to leave STATE_INSTALL_CANCELING without waiting for a resolution\n        // (per-instance so we can poke it for unit testing)\n        this._cancelTimeout = 10 * 1000;\n    }\n\n    /**\n     * The dialog root.\n     * @type {jQuery}\n     */\n    InstallExtensionDialog.prototype.$dlg = null;\n\n    /**\n     * The url input field.\n     * @type {jQuery}\n     */\n    InstallExtensionDialog.prototype.$url = null;\n\n    /**\n     * The ok button.\n     * @type {jQuery}\n     */\n    InstallExtensionDialog.prototype.$okButton = null;\n\n    /**\n     * The cancel button.\n     * @type {jQuery}\n     */\n    InstallExtensionDialog.prototype.$cancelButton = null;\n\n    /**\n     * The area containing the url input label and field.\n     * @type {jQuery}\n     */\n    InstallExtensionDialog.prototype.$inputArea = null;\n\n    /**\n     * The area containing the installation message and spinner.\n     * @type {jQuery}\n     */\n    InstallExtensionDialog.prototype.$msgArea = null;\n\n    /**\n     * The span containing the installation message.\n     * @type {jQuery}\n     */\n    InstallExtensionDialog.prototype.$msg = null;\n\n    /**\n     * The \"Browse Extensions\" button.\n     * @type {jQuery}\n     */\n    InstallExtensionDialog.prototype.$browseExtensionsButton = null;\n\n    /**\n     * A deferred that's resolved/rejected when the dialog is closed and\n     * something has/hasn't been installed successfully.\n     * @type {$.Deferred}\n     */\n    InstallExtensionDialog.prototype._dialogDeferred = null;\n\n\n    /**\n     * installer The installer backend for this dialog.\n     * @type {{install: function(url), cancel: function()}}\n     */\n    InstallExtensionDialog.prototype._installer = null;\n\n    /**\n     * The current state of the dialog; one of the STATE_* constants above.\n     * @type {number}\n     */\n    InstallExtensionDialog.prototype._state = null;\n\n    /**\n     * @private\n     * Transitions the dialog into a new state as the installation proceeds.\n     * @param {number} newState The state to transition into; one of the STATE_* variables.\n     */\n    InstallExtensionDialog.prototype._enterState = function (newState) {\n        var url,\n            msg,\n            self = this,\n            prevState = this._state;\n\n        // Store the new state up front in case some of the processing below ends up changing\n        // the state again immediately.\n        this._state = newState;\n\n        switch (newState) {\n        case STATE_START:\n            // This should match the default appearance of the dialog when it first opens.\n            this.$msg.find(\".spinner\").remove();\n            this.$msgArea.hide();\n            this.$inputArea.show();\n            this.$okButton\n                .prop(\"disabled\", true)\n                .text(Strings.INSTALL);\n            break;\n\n        case STATE_VALID_URL:\n            this.$okButton.prop(\"disabled\", false);\n            break;\n\n        case STATE_INSTALLING:\n            url = this.$url.val().trim();\n            this.$inputArea.hide();\n            this.$browseExtensionsButton.hide();\n            this.$msg.text(StringUtils.format(Strings.INSTALLING_FROM, url))\n                .append(\"<span class='spinner inline spin'/>\");\n            this.$msgArea.show();\n            this.$okButton.prop(\"disabled\", true);\n            this._installer.install(url)\n                .done(function (result) {\n                    self._installResult = result;\n                    if (result.installationStatus === Package.InstallationStatuses.ALREADY_INSTALLED ||\n                            result.installationStatus === Package.InstallationStatuses.OLDER_VERSION ||\n                            result.installationStatus === Package.InstallationStatuses.SAME_VERSION) {\n                        self._enterState(STATE_ALREADY_INSTALLED);\n                    } else if (result.installationStatus === Package.InstallationStatuses.NEEDS_UPDATE) {\n                        self._enterState(STATE_NEEDS_UPDATE);\n                    } else {\n                        self._enterState(STATE_INSTALLED);\n                    }\n                })\n                .fail(function (err) {\n                    // If the \"failure\" is actually a user-requested cancel, don't show an error UI\n                    if (err === \"CANCELED\") {\n                        console.assert(self._state === STATE_CANCELING_INSTALL || self._state === STATE_CANCELING_HUNG);\n                        self._enterState(STATE_INSTALL_CANCELED);\n                    } else {\n                        self._errorMessage = Package.formatError(err);\n                        self._enterState(STATE_INSTALL_FAILED);\n                    }\n                });\n            break;\n\n        case STATE_CANCELING_INSTALL:\n            // This should call back the STATE_INSTALLING fail() handler above, unless it's too late to cancel\n            // in which case we'll still jump to STATE_INSTALLED after this\n            this.$cancelButton.prop(\"disabled\", true);\n            this.$msg.text(Strings.CANCELING_INSTALL);\n            this._installer.cancel();\n            window.setTimeout(function () {\n                if (self._state === STATE_CANCELING_INSTALL) {\n                    self._enterState(STATE_CANCELING_HUNG);\n                }\n            }, this._cancelTimeout);\n            break;\n\n        case STATE_CANCELING_HUNG:\n            this.$msg.text(Strings.CANCELING_HUNG);\n            this.$okButton\n                .removeAttr(\"disabled\")\n                .text(Strings.CLOSE);\n            break;\n\n        case STATE_INSTALLED:\n        case STATE_INSTALL_FAILED:\n        case STATE_INSTALL_CANCELED:\n        case STATE_NEEDS_UPDATE:\n            if (newState === STATE_INSTALLED) {\n                msg = Strings.INSTALL_SUCCEEDED;\n            } else if (newState === STATE_INSTALL_FAILED) {\n                msg = Strings.INSTALL_FAILED;\n            } else if (newState === STATE_NEEDS_UPDATE) {\n                msg = Strings.EXTENSION_UPDATE_INSTALLED;\n            } else {\n                msg = Strings.INSTALL_CANCELED;\n            }\n            this.$msg.html($(\"<strong/>\").text(msg));\n            if (this._errorMessage) {\n                this.$msg.append($(\"<p/>\").text(this._errorMessage));\n            }\n            this.$okButton\n                .removeAttr(\"disabled\")\n                .text(Strings.CLOSE);\n            this.$cancelButton.hide();\n            break;\n\n        case STATE_ALREADY_INSTALLED:\n            var installResult = this._installResult;\n            var status = installResult.installationStatus;\n            var msgText = Strings[\"EXTENSION_\" + status];\n            if (status === Package.InstallationStatuses.OLDER_VERSION) {\n                msgText = StringUtils.format(msgText, installResult.metadata.version, installResult.installedVersion);\n            }\n            this.$msg.text(msgText);\n            this.$okButton\n                .prop(\"disabled\", false)\n                .text(Strings.OVERWRITE);\n            break;\n\n        case STATE_OVERWRITE_CONFIRMED:\n            this._enterState(STATE_CLOSED);\n            break;\n\n        case STATE_CLOSED:\n            $(window.document.body).off(\".installDialog\");\n\n           // Only resolve as successful if we actually installed something.\n            Dialogs.cancelModalDialogIfOpen(\"install-extension-dialog\");\n            if (prevState === STATE_INSTALLED || prevState === STATE_NEEDS_UPDATE ||\n                    prevState === STATE_OVERWRITE_CONFIRMED) {\n                this._dialogDeferred.resolve(this._installResult);\n            } else {\n                this._dialogDeferred.reject();\n            }\n            break;\n        }\n    };\n\n    /**\n     * @private\n     * Handle a click on the Cancel button, which either cancels an ongoing installation (leaving\n     * the dialog open), or closes the dialog if no installation is in progress.\n     */\n    InstallExtensionDialog.prototype._handleCancel = function () {\n        if (this._state === STATE_INSTALLING) {\n            this._enterState(STATE_CANCELING_INSTALL);\n        } else if (this._state === STATE_ALREADY_INSTALLED) {\n            // If we were prompting the user about overwriting a previous installation,\n            // and the user cancels, we can delete the downloaded file.\n            if (this._installResult && this._installResult.localPath && !this._installResult.keepFile) {\n                var filename = this._installResult.localPath;\n                FileSystem.getFileForPath(filename).unlink();\n            }\n            this._enterState(STATE_CLOSED);\n        } else if (this._state !== STATE_CANCELING_INSTALL) {\n            this._enterState(STATE_CLOSED);\n        }\n    };\n\n    /**\n     * @private\n     * Handle a click on the default button, which is \"Install\" while we're waiting for the\n     * user to enter a URL, and \"Close\" once we've successfully finished installation.\n     */\n    InstallExtensionDialog.prototype._handleOk = function () {\n        if (this._state === STATE_INSTALLED ||\n                this._state === STATE_INSTALL_FAILED ||\n                this._state === STATE_INSTALL_CANCELED ||\n                this._state === STATE_CANCELING_HUNG ||\n                this._state === STATE_NEEDS_UPDATE) {\n            // In these end states, this is a \"Close\" button: just close the dialog and indicate\n            // success.\n            this._enterState(STATE_CLOSED);\n        } else if (this._state === STATE_VALID_URL) {\n            this._enterState(STATE_INSTALLING);\n        } else if (this._state === STATE_ALREADY_INSTALLED) {\n            this._enterState(STATE_OVERWRITE_CONFIRMED);\n        }\n    };\n\n    /**\n     * @private\n     * Handle key up events on the document. We use this to detect the Esc key.\n     */\n    InstallExtensionDialog.prototype._handleKeyUp = function (e) {\n        if (e.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n            this._handleCancel();\n        }\n    };\n\n    /**\n     * @private\n     * Handle typing in the URL field.\n     */\n    InstallExtensionDialog.prototype._handleUrlInput = function (e) {\n        var url     = this.$url.val().trim(),\n            valid   = (url !== \"\");\n        if (!valid && this._state === STATE_VALID_URL) {\n            this._enterState(STATE_START);\n        } else if (valid && this._state === STATE_START) {\n            this._enterState(STATE_VALID_URL);\n        }\n    };\n\n    /**\n     * @private\n     * Closes the dialog if it's not already closed. For unit testing only.\n     */\n    InstallExtensionDialog.prototype._close = function () {\n        if (this._state !== STATE_CLOSED) {\n            this._enterState(STATE_CLOSED);\n        }\n    };\n\n    /**\n     * Initialize and show the dialog.\n     * @param {string=} urlToInstall If specified, immediately starts installing the given file as if the user had\n     *     specified it.\n     * @return {$.Promise} A promise object that will be resolved when the selected extension\n     *     has finished installing, or rejected if the dialog is cancelled.\n     */\n    InstallExtensionDialog.prototype.show = function (urlToInstall) {\n        if (this._state !== STATE_CLOSED) {\n            // Somehow the dialog got invoked twice. Just ignore this.\n            return this._dialogDeferred.promise();\n        }\n\n        var context = {\n            Strings: Strings,\n            isUpdate: this._isUpdate,\n            includeBrowseExtensions: !!brackets.config.extension_listing_url\n        };\n\n        // We ignore the promise returned by showModalDialogUsingTemplate, since we're managing the\n        // lifecycle of the dialog ourselves.\n        Dialogs.showModalDialogUsingTemplate(Mustache.render(InstallDialogTemplate, context), false);\n\n        this.$dlg          = $(\".install-extension-dialog.instance\");\n        this.$url          = this.$dlg.find(\".url\").focus();\n        this.$okButton     = this.$dlg.find(\".dialog-button[data-button-id='ok']\");\n        this.$cancelButton = this.$dlg.find(\".dialog-button[data-button-id='cancel']\");\n        this.$inputArea    = this.$dlg.find(\".input-field\");\n        this.$msgArea      = this.$dlg.find(\".message-field\");\n        this.$msg          = this.$msgArea.find(\".message\");\n        this.$browseExtensionsButton = this.$dlg.find(\".browse-extensions\");\n\n        this.$okButton.on(\"click\", this._handleOk.bind(this));\n        this.$cancelButton.on(\"click\", this._handleCancel.bind(this));\n        this.$url.on(\"input\", this._handleUrlInput.bind(this));\n        this.$browseExtensionsButton.on(\"click\", function () {\n            NativeApp.openURLInDefaultBrowser(brackets.config.extension_listing_url);\n        });\n        $(window.document.body).on(\"keyup.installDialog\", this._handleKeyUp.bind(this));\n\n        this._enterState(STATE_START);\n        if (urlToInstall) {\n            // Act as if the user had manually entered the URL.\n            this.$url.val(urlToInstall);\n            this._enterState(STATE_VALID_URL);\n            this._enterState(STATE_INSTALLING);\n        }\n\n        this._dialogDeferred = new $.Deferred();\n        return this._dialogDeferred.promise();\n    };\n\n\n    /** Mediates between this module and the Package extension-installation utils. Mockable for unit-testing. */\n    function InstallerFacade(isLocalFile) {\n        this._isLocalFile = isLocalFile;\n    }\n\n    InstallerFacade.prototype.install = function (url) {\n        if (this.pendingInstall) {\n            console.error(\"Extension installation already pending\");\n            return new $.Deferred().reject(\"DOWNLOAD_ID_IN_USE\").promise();\n        }\n\n        if (this._isLocalFile) {\n            var deferred = new $.Deferred();\n\n            this.pendingInstall = {\n                promise: deferred.promise(),\n                cancel: function () {\n                    // Can't cancel local zip installs\n                }\n            };\n\n            Package.installFromPath(url).then(function (installationResult) {\n                // Flag to keep zip files for local file installation\n                installationResult.keepFile = true;\n                deferred.resolve(installationResult);\n            }, deferred.reject);\n        } else {\n            this.pendingInstall = Package.installFromURL(url);\n        }\n\n        // Store now since we'll null pendingInstall immediately if the promise was resolved synchronously\n        var promise = this.pendingInstall.promise;\n\n        var self = this;\n        this.pendingInstall.promise.always(function () {\n            self.pendingInstall = null;\n        });\n\n        return promise;\n    };\n    InstallerFacade.prototype.cancel = function () {\n        this.pendingInstall.cancel();\n    };\n\n    /**\n     * @private\n     * Show a dialog that allows the user to enter the URL of an extension ZIP file to install.\n     * @return {$.Promise} A promise object that will be resolved when the selected extension\n     *     has finished installing, or rejected if the dialog is cancelled.\n     */\n    function showDialog() {\n        var dlg = new InstallExtensionDialog(new InstallerFacade());\n        return dlg.show();\n    }\n\n    /**\n     * @private\n     * Show the installation dialog and automatically begin installing the given URL.\n     * @param {(string|File)=} urlOrFileToInstall If specified, immediately starts installing the given file as if the user had\n     *     specified it.\n     * @return {$.Promise} A promise object that will be resolved when the selected extension\n     *     has finished installing, or rejected if the dialog is cancelled.\n     */\n    function installUsingDialog(urlOrFileToInstall, _isUpdate) {\n        var isLocalFile = (urlOrFileToInstall instanceof File),\n            dlg = new InstallExtensionDialog(new InstallerFacade(isLocalFile), _isUpdate);\n\n        return dlg.show(urlOrFileToInstall.fullPath || urlOrFileToInstall);\n    }\n\n    /**\n     * @private\n     * Show the update dialog and automatically begin downloading the update from the given URL.\n     * @param {string} urlToUpdate URL to download\n     * @return {$.Promise} A promise object that will be resolved when the selected extension\n     *     has finished downloading, or rejected if the dialog is cancelled.\n     */\n    function updateUsingDialog(urlToUpdate) {\n        return installUsingDialog(urlToUpdate, true);\n    }\n\n    exports.showDialog          = showDialog;\n    exports.installUsingDialog  = installUsingDialog;\n    exports.updateUsingDialog   = updateUsingDialog;\n\n    // Exposed for unit testing only\n    exports._Dialog = InstallExtensionDialog;\n});\n"],"file":"InstallExtensionDialog.js"}