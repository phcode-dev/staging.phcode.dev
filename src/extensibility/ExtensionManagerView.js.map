{"version":3,"sources":["extensibility/ExtensionManagerView.js"],"names":["define","require","exports","module","Strings","EventDispatcher","StringUtils","ExtensionManager","registry_utils","NativeApp","Commands","CommandManager","ThemeManager","DefaultDialogs","Dialogs","InstallExtensionDialog","LocalizationUtils","LanguageManager","Mustache","PathUtils","itemTemplate","PreferencesManager","warnExtensionIDs","JSON","parse","warnExtensionStoreExtensions","extensionIDs","Metrics","_tmpLink","window","document","createElement","ExtensionManagerView","makeEventDispatcher","prototype","initialize","model","self","this","result","$","Deferred","_itemTemplate","compile","_itemViews","$el","source","_$emptyMessage","appendTo","_$infoMessage","html","infoMessage","_$table","val","get","done","_setupEventHandlers","always","_render","resolve","promise","_toggleDescription","id","$element","showFull","description","linkTitle","info","_getEntry","metadata","VIEW_TRUNCATED_DESCRIPTION","shortdescription","VIEW_COMPLETE_DESCRIPTION","data","attr","prev","text","originalTheme","getCurrentTheme","_handleThemeChange","_event","theme","removeClass","name","addClass","not","on","EVENT_THEME_CHANGE","off","e","extensions","$oldItem","_updateMessage","filterSet","indexOf","remove","$newItem","_renderItem","replaceWith","$target","target","hasClass","markForRemoval","removeUpdate","markForDisabling","execute","CMD_THEMES_OPEN_SETTINGS","bind","countEvent","EVENT_TYPE","EXTENSIONS","_installUsingDialog","setCurrentTheme","preventDefault","stopPropagation","openURLInDefaultBrowser","enable","themeID","themeApplied","showModalDialog","DIALOG_ID_ERROR","THEMES_ERROR","THEMES_ERROR_CANNOT_APPLY","entry","context","extend","isInstalled","installInfo","failedToStart","status","START_FAILED","disabled","DISABLED","hasVersionInfo","versions","registryInfo","latestVerCompatInfo","getCompatibilityInfo","brackets","apiVersion","isCompatible","requiresNewer","isCompatibleLatest","isLatestVersion","ownerRepo","githubStarCount","gihubStars","isVerified","ownershipVerifiedByGitHub","verified","format","EXTENSION_VERIFIED_PUBLISHER","replace","verifiedURL","installWarningBase","EXTENSION_LATEST_INCOMPATIBLE_NEWER","EXTENSION_LATEST_INCOMPATIBLE_OLDER","installWarning","length","version","compatibleVersion","downloadCount","totalDownloads","lang","getLocale","shortLang","split","forEach","locale","hasOwnProperty","prop","undefined","truncate","isMarkedForRemoval","isMarkedForDisabling","isMarkedForUpdate","hasPendingAction","showInstallButton","SOURCE_REGISTRY","SOURCE_THEMES","updateAvailable","showUpdateButton","showApplyButton","isCurrentTheme","defaultFeature","includes","allowInstall","Array","isArray","i18n","translated","translatedLangs","map","value","getLocalizedLabel","sort","lang1","lang2","locales","userLangIndex","localeCompare","join","EXTENSION_TRANSLATED_LANGS","translatedIntoUserLang","isLocaleDefault","extensionTranslated","EXTENSION_TRANSLATED_USER_LANG","EXTENSION_TRANSLATED_GENERAL","isInstalledInUserFolder","locationType","LOCATION_USER","allowRemove","allowUpdate","updateCompatible","updateNotAllowedReason","CANT_UPDATE","CANT_UPDATE_DEV","removalAllowed","isDefaultOrInstalled","isDefaultAndTheme","disablingAllowed","enablingAllowed","helper","homepage","parsed","parseUrl","href","protocol","language","getLanguageForExtension","filenameExtension","isBinary","message","css","empty","$item","trigger","_isUpdate","compatInfo","url","getExtensionURL","versionToInstall","fetch","catch","console","error","updateUsingDialog","updateFromDownload","installUsingDialog","filter","query"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*unittests: ExtensionManager*/\n\ndefine(function (require, exports, module) {\n\n\n    var Strings                   = require(\"strings\"),\n        EventDispatcher           = require(\"utils/EventDispatcher\"),\n        StringUtils               = require(\"utils/StringUtils\"),\n        ExtensionManager          = require(\"extensibility/ExtensionManager\"),\n        registry_utils            = require(\"extensibility/registry_utils\"),\n        NativeApp                 = require(\"utils/NativeApp\"),\n        Commands                  = require(\"command/Commands\"),\n        CommandManager            = require(\"command/CommandManager\"),\n        ThemeManager              = require(\"view/ThemeManager\"),\n        DefaultDialogs            = require(\"widgets/DefaultDialogs\"),\n        Dialogs                   = require(\"widgets/Dialogs\"),\n        InstallExtensionDialog    = require(\"extensibility/InstallExtensionDialog\"),\n        LocalizationUtils         = require(\"utils/LocalizationUtils\"),\n        LanguageManager           = require(\"language/LanguageManager\"),\n        Mustache                  = require(\"thirdparty/mustache/mustache\"),\n        PathUtils                 = require(\"thirdparty/path-utils/path-utils\"),\n        itemTemplate              = require(\"text!htmlContent/extension-manager-view-item.html\"),\n        PreferencesManager        = require(\"preferences/PreferencesManager\"),\n        warnExtensionIDs = JSON.parse(require(\"text!extensions/default/DefaultExtensions.json\"))\n            .warnExtensionStoreExtensions.extensionIDs,\n        Metrics                   = require(\"utils/Metrics\");\n\n\n    /**\n     * Create a detached link element, so that we can use it later to extract url details like 'protocol'\n     */\n    var _tmpLink = window.document.createElement('a');\n\n    /**\n     * Creates a view enabling the user to install and manage extensions. Must be initialized\n     * with initialize(). When the view is closed, dispose() must be called.\n     * @constructor\n     */\n    function ExtensionManagerView() {\n    }\n    EventDispatcher.makeEventDispatcher(ExtensionManagerView.prototype);\n\n    /**\n     * Initializes the view to show a set of extensions.\n     * @param {ExtensionManagerViewModel} model Model object containing extension data to view\n     * @return {$.Promise} a promise that's resolved once the view has been initialized. Never\n     *     rejected.\n     */\n    ExtensionManagerView.prototype.initialize = function (model) {\n        var self = this,\n            result = new $.Deferred();\n        this.model = model;\n        this._itemTemplate = Mustache.compile(itemTemplate);\n        this._itemViews = {};\n        this.$el = $(\"<div class='extension-list tab-pane' id='\" + this.model.source + \"'/>\");\n        this._$emptyMessage = $(\"<div class='empty-message'/>\")\n            .appendTo(this.$el);\n        this._$infoMessage = $(\"<div class='info-message'/>\")\n            .appendTo(this.$el).html(this.model.infoMessage);\n        this._$table = $(\"<table class='table'/>\").appendTo(this.$el);\n        $(\".sort-extensions\").val(PreferencesManager.get(\"extensions.sort\"));\n\n        this.model.initialize().done(function () {\n            self._setupEventHandlers();\n        }).always(function () {\n            self._render();\n            result.resolve();\n        });\n\n        return result.promise();\n    };\n\n    /**\n     * @type {jQueryObject}\n     * The root of the view's DOM tree.\n     */\n    ExtensionManagerView.prototype.$el = null;\n\n    /**\n     * @type {Model}\n     * The view's model. Handles sorting and filtering of items in the view.\n     */\n    ExtensionManagerView.prototype.model = null;\n\n    /**\n     * @type {jQueryObject}\n     * Element showing a message when there are no extensions.\n     */\n    ExtensionManagerView.prototype._$emptyMessage = null;\n\n    /**\n     * @private\n     * @type {jQueryObject}\n     * The root of the table inside the view.\n     */\n    ExtensionManagerView.prototype._$table = null;\n\n    /**\n     * @private\n     * @type {function} The compiled template we use for rendering items in the extension list.\n     */\n    ExtensionManagerView.prototype._itemTemplate = null;\n\n    /**\n     * @private\n     * @type {Object.<string, jQueryObject>}\n     * The individual views for each item, keyed by the extension ID.\n     */\n    ExtensionManagerView.prototype._itemViews = null;\n\n    /**\n     * Toggles between truncated and full length extension descriptions\n     * @param {string} id The id of the extension clicked\n     * @param {JQueryElement} $element The DOM element of the extension clicked\n     * @param {boolean} showFull true if full length description should be shown, false for shortened version.\n     */\n    ExtensionManagerView.prototype._toggleDescription = function (id, $element, showFull) {\n        var description, linkTitle,\n            info = this.model._getEntry(id);\n\n        // Toggle between appropriate descriptions and link title,\n        // depending on if extension is installed or not\n        if (showFull) {\n            description = info.metadata.description;\n            linkTitle = Strings.VIEW_TRUNCATED_DESCRIPTION;\n        } else {\n            description = info.metadata.shortdescription;\n            linkTitle = Strings.VIEW_COMPLETE_DESCRIPTION;\n        }\n\n        $element.data(\"toggle-desc\", showFull ? \"trunc-desc\" : \"expand-desc\")\n                .attr(\"title\", linkTitle)\n                .prev(\".ext-full-description\").text(description);\n    };\n\n    /**\n     * @private\n     * Attaches our event handlers. We wait to do this until we've fully fetched the extension list.\n     */\n    ExtensionManagerView.prototype._setupEventHandlers = function () {\n        const self = this,\n            originalTheme = ThemeManager.getCurrentTheme();\n\n        function _handleThemeChange(_event, theme) {\n            $(\".current-theme-apply-hide\").removeClass(\"current-theme-apply-hide\");\n            $(`[data-extension-id=\"${theme.name}\"].apply`).addClass(\"current-theme-apply-hide\");\n            $(\".currentThemeText\").not(\".forced-hidden\").addClass(\"forced-hidden\");\n            $(`[data-extension-id=\"${theme.name}\"].currentThemeText`).removeClass(\"forced-hidden\");\n            if(theme.name !== originalTheme.name){\n                $(\"#ThemeViewThemeRevert\").removeClass(\"forced-hidden\");\n                $(\"#InstalledViewThemeRevert\").removeClass(\"forced-hidden\");\n            } else {\n                $(\"#ThemeViewThemeRevert\").addClass(\"forced-hidden\");\n                $(\"#InstalledViewThemeRevert\").addClass(\"forced-hidden\");\n            }\n        }\n\n        ThemeManager.on(ThemeManager.EVENT_THEME_CHANGE, _handleThemeChange);\n\n        // Listen for model data and filter changes.\n        this.model\n            .on(\"filter\", function () {\n                self._render();\n            })\n            .on(\"dispose\", function () {\n                ThemeManager.off(ThemeManager.EVENT_THEME_CHANGE, _handleThemeChange);\n            })\n            .on(\"change\", function (e, id) {\n                var extensions = self.model.extensions,\n                    $oldItem = self._itemViews[id];\n                self._updateMessage();\n                if (self.model.filterSet.indexOf(id) === -1) {\n                    // This extension is not in the filter set. Remove it from the view if we\n                    // were rendering it previously.\n                    if ($oldItem) {\n                        $oldItem.remove();\n                        delete self._itemViews[id];\n                    }\n                } else {\n                    // Render the item, replacing the old item if we had previously rendered it.\n                    var $newItem = self._renderItem(extensions[id], self.model._getEntry(id));\n                    if ($oldItem) {\n                        $oldItem.replaceWith($newItem);\n                        self._itemViews[id] = $newItem;\n                    }\n                }\n            });\n\n        // UI event handlers\n        this.$el\n            .on(\"click\", \"a\", function (e) {\n                var $target = $(e.target);\n                if ($target.hasClass(\"undo-remove\")) {\n                    ExtensionManager.markForRemoval($target.attr(\"data-extension-id\"), false);\n                } else if ($target.hasClass(\"remove\")) {\n                    ExtensionManager.markForRemoval($target.attr(\"data-extension-id\"), true);\n                } else if ($target.hasClass(\"undo-update\")) {\n                    ExtensionManager.removeUpdate($target.attr(\"data-extension-id\"));\n                } else if ($target.hasClass(\"undo-disable\")) {\n                    ExtensionManager.markForDisabling($target.attr(\"data-extension-id\"), false);\n                } else if ($target.data(\"toggle-desc\") === \"expand-desc\") {\n                    this._toggleDescription($target.attr(\"data-extension-id\"), $target, true);\n                } else if ($target.data(\"toggle-desc\") === \"trunc-desc\") {\n                    this._toggleDescription($target.attr(\"data-extension-id\"), $target, false);\n                } else if ($target.hasClass(\"theme_settings\")) {\n                    CommandManager.execute(Commands.CMD_THEMES_OPEN_SETTINGS);\n                }\n            }.bind(this))\n            .on(\"click\", \"button.install\", function (e) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"btnClick\", \"install\");\n                self._installUsingDialog($(e.target).attr(\"data-extension-id\"));\n            })\n            .on(\"click\", \"button.update\", function (e) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"btnClick\", \"update\");\n                self._installUsingDialog($(e.target).attr(\"data-extension-id\"), true);\n            })\n            .on(\"click\", \"button.undoTheme\", function (e) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"btnClick\", \"undoTheme\");\n                $(\"#ThemeViewThemeRevert\").addClass(\"forced-hidden\");\n                $(\"#InstalledViewThemeRevert\").addClass(\"forced-hidden\");\n                ThemeManager.setCurrentTheme(originalTheme.name);\n                e.preventDefault();\n                e.stopPropagation();\n            })\n            .on(\"click\", \"button.createTheme\", function (e) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"btnClick\", \"createTheme\");\n                NativeApp.openURLInDefaultBrowser(\"https://github.com/phcode-dev/theme-template\");\n                e.preventDefault();\n                e.stopPropagation();\n            })\n            .on(\"click\", \"button.createExtesnion\", function (e) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"btnClick\", \"createExtension\");\n                NativeApp.openURLInDefaultBrowser(\"https://github.com/phcode-dev/extension-template\");\n                e.preventDefault();\n                e.stopPropagation();\n            })\n            .on(\"click\", \"button.remove\", function (e) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"btnClick\", \"remove\");\n                ExtensionManager.markForRemoval($(e.target).attr(\"data-extension-id\"), true);\n            })\n            .on(\"click\", \"button.disable\", function (e) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"btnClick\", \"disable\");\n                ExtensionManager.markForDisabling($(e.target).attr(\"data-extension-id\"), true);\n            })\n            .on(\"click\", \"button.enable\", function (e) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"btnClick\", \"enable\");\n                ExtensionManager.enable($(e.target).attr(\"data-extension-id\"));\n            })\n            .on(\"click\", \"button.apply\", function (e) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"btnClick\", \"apply\");\n                const themeID = $(e.target).attr(\"data-extension-id\");\n                let themeApplied = ThemeManager.setCurrentTheme(themeID);\n                if(!themeApplied) {\n                    Dialogs.showModalDialog(DefaultDialogs.DIALOG_ID_ERROR, Strings.THEMES_ERROR,\n                        Strings.THEMES_ERROR_CANNOT_APPLY);\n                }\n            });\n    };\n\n    /**\n     * @private\n     * Renders the view for a single extension entry.\n     * @param {Object} entry The extension entry to render.\n     * @param {Object} info The extension's metadata.\n     * @return {jQueryObject} The rendered node as a jQuery object.\n     */\n    ExtensionManagerView.prototype._renderItem = function (entry, info) {\n        // Create a Mustache context object containing the entry data and our helper functions.\n\n        // Start with the basic info from the given entry, either the installation info or the\n        // registry info depending on what we're listing.\n        var context = $.extend({}, info);\n\n        // Normally we would merge the strings into the context we're passing into the template,\n        // but since we're instantiating the template for every item, it seems wrong to take the hit\n        // of copying all the strings into the context, so we just make it a subfield.\n        context.Strings = Strings;\n\n        // Calculate various bools, since Mustache doesn't let you use expressions and interprets\n        // arrays as iteration contexts.\n        context.isInstalled = !!entry.installInfo;\n        context.failedToStart = (entry.installInfo && entry.installInfo.status === ExtensionManager.START_FAILED);\n        context.disabled = (entry.installInfo && entry.installInfo.status === ExtensionManager.DISABLED);\n        context.hasVersionInfo = !!info.versions;\n\n        if (entry.registryInfo) {\n            var latestVerCompatInfo = ExtensionManager.getCompatibilityInfo(entry.registryInfo, brackets.metadata.apiVersion);\n            context.isCompatible = latestVerCompatInfo.isCompatible;\n            context.requiresNewer = latestVerCompatInfo.requiresNewer;\n            context.isCompatibleLatest = latestVerCompatInfo.isLatestVersion;\n            if(entry.registryInfo.ownerRepo){\n                context.githubStarCount = entry.registryInfo.gihubStars || \"0\";\n                context.ownerRepo = entry.registryInfo.ownerRepo;\n            }\n            entry.registryInfo.isVerified = 0;\n            if(entry.registryInfo.ownershipVerifiedByGitHub){\n                context.verified = StringUtils.format(Strings.EXTENSION_VERIFIED_PUBLISHER,\n                    entry.registryInfo.ownershipVerifiedByGitHub[0].replace(\"https://\", \"\"));\n                context.verifiedURL = entry.registryInfo.ownershipVerifiedByGitHub[0];\n                entry.registryInfo.isVerified = 1;\n            }\n            if (!context.isCompatibleLatest) {\n                var installWarningBase = context.requiresNewer ? Strings.EXTENSION_LATEST_INCOMPATIBLE_NEWER : Strings.EXTENSION_LATEST_INCOMPATIBLE_OLDER;\n                context.installWarning = StringUtils.format(installWarningBase, entry.registryInfo.versions[entry.registryInfo.versions.length - 1].version, latestVerCompatInfo.compatibleVersion);\n            }\n            context.downloadCount = entry.registryInfo.totalDownloads;\n        } else {\n            // We should only get here when viewing the Installed tab and some extensions don't exist in the registry\n            // (or registry is offline). These flags *should* always be ignored in that scenario, but just in case...\n            context.isCompatible = context.isCompatibleLatest = true;\n        }\n\n        // Check if extension metadata contains localized content.\n        var lang            = brackets.getLocale(),\n            shortLang       = lang.split(\"-\")[0];\n        if (info.metadata[\"package-i18n\"]) {\n            [shortLang, lang].forEach(function (locale) {\n                if (info.metadata[\"package-i18n\"].hasOwnProperty(locale)) {\n                    // only overlay specific properties with the localized values\n                    [\"title\", \"description\", \"homepage\", \"keywords\"].forEach(function (prop) {\n                        if (info.metadata[\"package-i18n\"][locale].hasOwnProperty(prop)) {\n                            info.metadata[prop] = info.metadata[\"package-i18n\"][locale][prop];\n                        }\n                    });\n                }\n            });\n        }\n\n        if (info.metadata.description !== undefined) {\n            info.metadata.shortdescription = StringUtils.truncate(info.metadata.description, 200);\n        }\n\n        context.isMarkedForRemoval = ExtensionManager.isMarkedForRemoval(info.metadata.name);\n        context.isMarkedForDisabling = ExtensionManager.isMarkedForDisabling(info.metadata.name);\n        context.isMarkedForUpdate = ExtensionManager.isMarkedForUpdate(info.metadata.name);\n        var hasPendingAction = context.isMarkedForDisabling || context.isMarkedForRemoval || context.isMarkedForUpdate;\n\n        context.showInstallButton = (this.model.source === this.model.SOURCE_REGISTRY || this.model.source === this.model.SOURCE_THEMES) && !context.updateAvailable;\n        context.showUpdateButton = context.updateAvailable && !context.isMarkedForUpdate && !context.isMarkedForRemoval;\n        context.showApplyButton = !!context.metadata.theme && !context.disabled;\n        context.isCurrentTheme = entry.installInfo &&\n            (entry.installInfo.metadata.name === ThemeManager.getCurrentTheme().name);\n\n        context.defaultFeature = warnExtensionIDs.includes(info.metadata.name);\n\n        context.allowInstall = context.isCompatible && !context.isInstalled;\n\n        if (Array.isArray(info.metadata.i18n) && info.metadata.i18n.length > 0) {\n            context.translated = true;\n            context.translatedLangs =\n                info.metadata.i18n.map(function (value) {\n                    if (value === \"root\") {\n                        value = \"en\";\n                    }\n                    return { name: LocalizationUtils.getLocalizedLabel(value), locale: value };\n                })\n                .sort(function (lang1, lang2) {\n                    // List users language first\n                    var locales         = [lang1.locale, lang2.locale],\n                        userLangIndex   = locales.indexOf(lang);\n                    if (userLangIndex > -1) {\n                        return userLangIndex;\n                    }\n                    userLangIndex = locales.indexOf(shortLang);\n                    if (userLangIndex > -1) {\n                        return userLangIndex;\n                    }\n\n                    return lang1.name.localeCompare(lang2.name);\n                })\n                .map(function (value) {\n                    return value.name;\n                })\n                .join(\", \");\n            context.translatedLangs = StringUtils.format(Strings.EXTENSION_TRANSLATED_LANGS, context.translatedLangs);\n\n            // If the selected language is System Default, match both the short (2-char) language code\n            // and the long one\n            var translatedIntoUserLang =\n                (brackets.isLocaleDefault() && info.metadata.i18n.indexOf(shortLang) > -1) ||\n                info.metadata.i18n.indexOf(lang) > -1;\n            context.extensionTranslated = StringUtils.format(\n                translatedIntoUserLang ? Strings.EXTENSION_TRANSLATED_USER_LANG : Strings.EXTENSION_TRANSLATED_GENERAL,\n                info.metadata.i18n.length\n            );\n        }\n\n        var isInstalledInUserFolder = (entry.installInfo && entry.installInfo.locationType === ExtensionManager.LOCATION_USER);\n        context.allowRemove = isInstalledInUserFolder;\n        context.allowUpdate = context.showUpdateButton && context.isCompatible && context.updateCompatible && isInstalledInUserFolder;\n        if (!context.allowUpdate) {\n            context.updateNotAllowedReason = isInstalledInUserFolder ? Strings.CANT_UPDATE : Strings.CANT_UPDATE_DEV;\n        }\n\n        context.removalAllowed = context.isInstalled &&\n            !context.failedToStart && !hasPendingAction;\n        var isDefaultOrInstalled = this.model.source === \"default\" || this.model.source === \"installed\";\n        var isDefaultAndTheme = this.model.source === \"default\" && context.metadata.theme;\n        context.disablingAllowed = isDefaultOrInstalled && !isDefaultAndTheme && !context.disabled\n            && !hasPendingAction && !context.metadata.theme;\n        context.enablingAllowed = isDefaultOrInstalled && !isDefaultAndTheme && context.disabled\n            && !hasPendingAction && !context.metadata.theme;\n\n        // Copy over helper functions that we share with the registry app.\n        [\"lastVersionDate\", \"authorInfo\"].forEach(function (helper) {\n            context[helper] = registry_utils[helper];\n        });\n\n        // Do some extra validation on homepage url to make sure we don't end up executing local binary\n        if (context.metadata.homepage) {\n            var parsed = PathUtils.parseUrl(context.metadata.homepage);\n\n            // We can't rely on path-utils because of known problems with protocol identification\n            // Falling back to Browsers protocol identification mechanism\n            _tmpLink.href = context.metadata.homepage;\n\n            // Check if the homepage refers to a local resource\n            if (_tmpLink.protocol === \"file:\") {\n                var language = LanguageManager.getLanguageForExtension(parsed.filenameExtension.replace(/^\\./, ''));\n                // If identified language for the local resource is binary, don't list it\n                if (language && language.isBinary()) {\n                    delete context.metadata.homepage;\n                }\n            }\n        }\n\n        return $(this._itemTemplate(context));\n    };\n\n    /**\n     * @private\n     * Display an optional message (hiding the extension list if displayed)\n     * @return {boolean} Returns true if a message is displayed\n     */\n    ExtensionManagerView.prototype._updateMessage = function () {\n        if (this.model.message) {\n            this._$emptyMessage.css(\"display\", \"block\");\n            this._$emptyMessage.html(this.model.message);\n            this._$infoMessage.css(\"display\", \"none\");\n            this._$table.css(\"display\", \"none\");\n\n            return true;\n        }\n        this._$emptyMessage.css(\"display\", \"none\");\n        this._$infoMessage.css(\"display\", this.model.infoMessage ? \"block\" : \"none\");\n        this._$table.css(\"display\", \"\");\n\n        return false;\n\n    };\n\n    /**\n     * @private\n     * Renders the extension entry table based on the model's current filter set. Will create\n     * new items for entries that haven't yet been rendered, but will not re-render existing items.\n     */\n    ExtensionManagerView.prototype._render = function () {\n        var self = this;\n\n        this._$table.empty();\n        this._updateMessage();\n\n        this.model.filterSet.forEach(function (id) {\n            var $item = self._itemViews[id];\n            if (!$item) {\n                $item = self._renderItem(self.model.extensions[id], self.model._getEntry(id));\n                self._itemViews[id] = $item;\n            }\n            $item.appendTo(self._$table);\n        });\n\n        this.trigger(\"render\");\n    };\n\n    /**\n     * @private\n     * Install the extension with the given ID using the install dialog.\n     * @param {string} id ID of the extension to install.\n     */\n    ExtensionManagerView.prototype._installUsingDialog = function (id, _isUpdate) {\n        var entry = this.model.extensions[id];\n        if (entry && entry.registryInfo) {\n            const compatInfo = ExtensionManager.getCompatibilityInfo(entry.registryInfo, brackets.metadata.apiVersion),\n                url = ExtensionManager.getExtensionURL(id, compatInfo.compatibleVersion),\n                versionToInstall = entry.registryInfo.metadata.version;\n\n            fetch(`https://publish.phcode.dev/countDownload?extensionName=${id}&extensionVersion=${versionToInstall}`)\n                .catch(console.error);\n            // TODO: this should set .done on the returned promise\n            if (_isUpdate) {\n                // save to metric id as it is from public extension store.\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"install\", id);\n                InstallExtensionDialog.updateUsingDialog(url).done(ExtensionManager.updateFromDownload);\n            } else {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"update\", id);\n                InstallExtensionDialog.installUsingDialog(url);\n            }\n        }\n    };\n\n    /**\n     * Filters the contents of the view.\n     * @param {string} query The query to filter by.\n     */\n    ExtensionManagerView.prototype.filter = function (query) {\n        this.model.filter(query);\n    };\n\n    exports.ExtensionManagerView = ExtensionManagerView;\n});\n"],"file":"ExtensionManagerView.js"}