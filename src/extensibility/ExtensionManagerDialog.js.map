{"version":3,"sources":["extensibility/ExtensionManagerDialog.js"],"names":["define","require","exports","module","_","Mustache","Dialogs","DefaultDialogs","FileSystem","FileUtils","Package","Strings","StringUtils","Commands","CommandManager","InstallExtensionDialog","ThemeManager","AppInit","Async","KeyEvent","ExtensionManager","ExtensionManagerView","ExtensionManagerViewModel","PreferencesManager","Metrics","dialogTemplate","_activeTabIndex","_stopEvent","event","stopPropagation","preventDefault","_performChanges","hasRemovedExtensions","hasExtensionsToRemove","hasUpdatedExtensions","hasExtensionsToUpdate","hasDisabledExtensions","hasExtensionsToDisable","buttonLabel","CHANGE_AND_RELOAD","DISABLE_AND_RELOAD","UPDATE_AND_RELOAD","REMOVE_AND_RELOAD","dlg","showModalDialog","DIALOG_ID_CHANGE_EXTENSIONS","CHANGE_AND_RELOAD_TITLE","CHANGE_AND_RELOAD_MESSAGE","className","DIALOG_BTN_CLASS_NORMAL","id","DIALOG_BTN_CANCEL","text","CANCEL","DIALOG_BTN_CLASS_PRIMARY","DIALOG_BTN_OK","$dlg","getElement","one","e","buttonId","removeExtensionsPromise","updateExtensionsPromise","disableExtensionsPromise","removeErrors","updateErrors","disableErrors","find","prop","hide","PROCESSING_EXTENSIONS","append","removeMarkedExtensions","fail","errorArray","updateExtensions","disableMarkedExtensions","waitForAll","always","close","done","execute","APP_RELOAD","ids","dialogs","nextDialog","dialog","shift","title","message","forEach","errorObj","push","item","DIALOG_ID_ERROR","EXTENSION_MANAGER_REMOVE","format","EXTENSION_MANAGER_REMOVE_ERROR","join","length","error","console","formatError","EXTENSION_MANAGER_UPDATE","EXTENSION_MANAGER_UPDATE_ERROR","EXTENSION_MANAGER_DISABLE","EXTENSION_MANAGER_DISABLE_ERROR","cleanupUpdates","unmarkAllForRemoval","unmarkAllForDisabling","installFromZipSupported","_installUsingDragAndDrop","files","countEvent","EVENT_TYPE","EXTENSIONS","$","Deferred","reject","promise","installZips","updateZips","deferred","validatePromise","brackets","app","getDroppedFiles","err","paths","resolve","doInParallel_aggregateErrors","path","result","file","extension","getFileExtension","isZip","isFile","errStr","getFileErrorString","INVALID_ZIP_FILE","validate","requirePackageJSON","info","errors","map","extensionName","metadata","name","extensionInfo","extensions","isUpdate","installInfo","installPromise","updatePromise","doSequentially","installUsingDialog","then","updateUsingDialog","updateFromDownload","_showDialog","views","$search","$searchClear","$modalDlg","context","showRegistry","config","extension_registry","models","originalTheme","getCurrentTheme","updateSearchDisabled","model","searchDisabled","val","filterSet","clearSearch","view","index","filter","scrollTop","focus","setActiveTab","$tab","scrollPos","tab","show","updateNotificationIcon","$notificationIcon","eq","notifyCount","modelInitPromise","RegistryViewModel","ThemesViewModel","InstalledViewModel","DefaultViewModel","showModalDialogUsingTemplate","render","window","document","off","dispose","on","this","keyCode","DOM_VK_TAB","ctrlKey","$tabs","tabIndex","shiftKey","doInParallel","initialize","lastNotifyCount","searchTimeoutID","remove","$el","appendTo","each","tabElement","clearTimeout","query","setTimeout","sortBy","set","_setSortedExtensionList","$activeTab","parent","removeClass","hasClass","click","showDialog","$dropzone","$dropmask","originalEvent","dataTransfer","items","isValidDrop","zipMimeTypes","every","kind","includes","type","width","addClass","dropEffect","errorFiles","INSTALL_EXTENSION_DROP_ERROR","fileKey","Object","keys","breakableUrl","CANT_DROP_ZIP","EXTENSION_MANAGER_TITLE","register","CMD_EXTENSION_MANAGER","FILE_EXTENSION_MANAGER","appReady"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var _                           = require(\"thirdparty/lodash\"),\n        Mustache                    = require(\"thirdparty/mustache/mustache\"),\n        Dialogs                     = require(\"widgets/Dialogs\"),\n        DefaultDialogs              = require(\"widgets/DefaultDialogs\"),\n        FileSystem                  = require(\"filesystem/FileSystem\"),\n        FileUtils                   = require(\"file/FileUtils\"),\n        Package                     = require(\"extensibility/Package\"),\n        Strings                     = require(\"strings\"),\n        StringUtils                 = require(\"utils/StringUtils\"),\n        Commands                    = require(\"command/Commands\"),\n        CommandManager              = require(\"command/CommandManager\"),\n        InstallExtensionDialog      = require(\"extensibility/InstallExtensionDialog\"),\n        ThemeManager                = require(\"view/ThemeManager\"),\n        AppInit                     = require(\"utils/AppInit\"),\n        Async                       = require(\"utils/Async\"),\n        KeyEvent                    = require(\"utils/KeyEvent\"),\n        ExtensionManager            = require(\"extensibility/ExtensionManager\"),\n        ExtensionManagerView        = require(\"extensibility/ExtensionManagerView\").ExtensionManagerView,\n        ExtensionManagerViewModel   = require(\"extensibility/ExtensionManagerViewModel\"),\n        PreferencesManager          = require(\"preferences/PreferencesManager\"),\n        Metrics                     = require(\"utils/Metrics\");\n\n    var dialogTemplate    = require(\"text!htmlContent/extension-manager-dialog.html\");\n\n    // bootstrap tabs component\n    require(\"widgets/bootstrap-tab\");\n\n    var _activeTabIndex;\n\n    function _stopEvent(event) {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    /**\n     * @private\n     * Triggers changes requested by the dialog UI.\n     */\n    function _performChanges() {\n        // If an extension was removed or updated, prompt the user to quit Brackets.\n        var hasRemovedExtensions    = ExtensionManager.hasExtensionsToRemove(),\n            hasUpdatedExtensions    = ExtensionManager.hasExtensionsToUpdate(),\n            hasDisabledExtensions   = ExtensionManager.hasExtensionsToDisable();\n        if (!hasRemovedExtensions && !hasUpdatedExtensions && !hasDisabledExtensions) {\n            return;\n        }\n\n        var buttonLabel = Strings.CHANGE_AND_RELOAD;\n        if (hasRemovedExtensions && !hasUpdatedExtensions && !hasDisabledExtensions) {\n            buttonLabel = Strings.REMOVE_AND_RELOAD;\n        } else if (hasUpdatedExtensions && !hasRemovedExtensions && !hasDisabledExtensions) {\n            buttonLabel = Strings.UPDATE_AND_RELOAD;\n        } else if (hasDisabledExtensions && !hasRemovedExtensions && !hasUpdatedExtensions) {\n            buttonLabel = Strings.DISABLE_AND_RELOAD;\n        }\n\n        var dlg = Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_CHANGE_EXTENSIONS,\n            Strings.CHANGE_AND_RELOAD_TITLE,\n            Strings.CHANGE_AND_RELOAD_MESSAGE,\n            [\n                {\n                    className: Dialogs.DIALOG_BTN_CLASS_NORMAL,\n                    id: Dialogs.DIALOG_BTN_CANCEL,\n                    text: Strings.CANCEL\n                },\n                {\n                    className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                    id: Dialogs.DIALOG_BTN_OK,\n                    text: buttonLabel\n                }\n            ],\n            false\n        ),\n            $dlg = dlg.getElement();\n\n        $dlg.one(\"buttonClick\", function (e, buttonId) {\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\n                // Disable the dialog buttons so the user can't dismiss it,\n                // and show a message indicating that we're doing the updates,\n                // in case it takes a long time.\n                $dlg.find(\".dialog-button\").prop(\"disabled\", true);\n                $dlg.find(\".close\").hide();\n                $dlg.find(\".dialog-message\")\n                    .text(Strings.PROCESSING_EXTENSIONS)\n                    .append(\"<span class='spinner inline spin'/>\");\n\n                var removeExtensionsPromise,\n                    updateExtensionsPromise,\n                    disableExtensionsPromise,\n                    removeErrors,\n                    updateErrors,\n                    disableErrors;\n\n                removeExtensionsPromise = ExtensionManager.removeMarkedExtensions()\n                    .fail(function (errorArray) {\n                        removeErrors = errorArray;\n                    });\n                updateExtensionsPromise = ExtensionManager.updateExtensions()\n                    .fail(function (errorArray) {\n                        updateErrors = errorArray;\n                    });\n                disableExtensionsPromise = ExtensionManager.disableMarkedExtensions()\n                    .fail(function (errorArray) {\n                        disableErrors = errorArray;\n                    });\n\n                Async.waitForAll([removeExtensionsPromise, updateExtensionsPromise, disableExtensionsPromise], true)\n                    .always(function () {\n                        dlg.close();\n                    })\n                    .done(function () {\n                        CommandManager.execute(Commands.APP_RELOAD);\n                    })\n                    .fail(function () {\n                        var ids = [],\n                            dialogs = [];\n\n                        function nextDialog() {\n                            var dialog = dialogs.shift();\n                            if (dialog) {\n                                Dialogs.showModalDialog(dialog.dialog, dialog.title, dialog.message)\n                                    .done(nextDialog);\n                            } else {\n                                // Even in case of error condition, we still have to reload\n                                CommandManager.execute(Commands.APP_RELOAD);\n                            }\n                        }\n\n                        if (removeErrors) {\n                            removeErrors.forEach(function (errorObj) {\n                                ids.push(errorObj.item);\n                            });\n                            dialogs.push({\n                                dialog: DefaultDialogs.DIALOG_ID_ERROR,\n                                title: Strings.EXTENSION_MANAGER_REMOVE,\n                                message: StringUtils.format(Strings.EXTENSION_MANAGER_REMOVE_ERROR, ids.join(\", \"))\n                            });\n                        }\n\n                        if (updateErrors) {\n                            // This error case should be very uncommon.\n                            // Just let the user know that we couldn't update\n                            // this extension and log the errors to the console.\n                            ids.length = 0;\n                            updateErrors.forEach(function (errorObj) {\n                                ids.push(errorObj.item);\n                                if (errorObj.error && errorObj.error.forEach) {\n                                    console.error(\"Errors for\", errorObj.item);\n                                    errorObj.error.forEach(function (error) {\n                                        console.error(Package.formatError(error));\n                                    });\n                                } else {\n                                    console.error(\"Error for\", errorObj.item, errorObj);\n                                }\n                            });\n                            dialogs.push({\n                                dialog: DefaultDialogs.DIALOG_ID_ERROR,\n                                title: Strings.EXTENSION_MANAGER_UPDATE,\n                                message: StringUtils.format(Strings.EXTENSION_MANAGER_UPDATE_ERROR, ids.join(\", \"))\n                            });\n                        }\n\n                        if (disableErrors) {\n                            ids.length = 0;\n                            disableErrors.forEach(function (errorObj) {\n                                ids.push(errorObj.item);\n                            });\n                            dialogs.push({\n                                dialog: DefaultDialogs.DIALOG_ID_ERROR,\n                                title: Strings.EXTENSION_MANAGER_DISABLE,\n                                message: StringUtils.format(Strings.EXTENSION_MANAGER_DISABLE_ERROR, ids.join(\", \"))\n                            });\n                        }\n\n                        nextDialog();\n                    });\n            } else {\n                dlg.close();\n                ExtensionManager.cleanupUpdates();\n                ExtensionManager.unmarkAllForRemoval();\n                ExtensionManager.unmarkAllForDisabling();\n            }\n        });\n    }\n\n\n    const installFromZipSupported = false;\n    /**\n     * @private\n     * Install extensions from the local file system using the install dialog.\n     * @return {$.Promise}\n     */\n    function _installUsingDragAndDrop(files) {\n        Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"install\", \"dropZip\");\n        if(!installFromZipSupported){\n            return new $.Deferred().reject(files).promise();\n        }\n        var installZips = [],\n            updateZips = [],\n            deferred = new $.Deferred(),\n            validatePromise;\n\n        brackets.app.getDroppedFiles(function (err, paths) {\n            if (err) {\n                // Only possible error is invalid params, silently ignore\n                console.error(err);\n                deferred.resolve();\n                return;\n            }\n\n            // Parse zip files and separate new installs vs. updates\n            validatePromise = Async.doInParallel_aggregateErrors(paths, function (path) {\n                var result = new $.Deferred();\n\n                FileSystem.resolve(path, function (err, file) {\n                    var extension = FileUtils.getFileExtension(path),\n                        isZip = file.isFile && (extension === \"zip\"),\n                        errStr;\n\n                    if (err) {\n                        errStr = FileUtils.getFileErrorString(err);\n                    } else if (!isZip) {\n                        errStr = Strings.INVALID_ZIP_FILE;\n                    }\n\n                    if (errStr) {\n                        result.reject(errStr);\n                        return;\n                    }\n\n                    // Call validate() so that we open the local zip file and parse the\n                    // package.json. We need the name to detect if this zip will be a\n                    // new install or an update.\n                    Package.validate(path, { requirePackageJSON: true }).done(function (info) {\n                        if (info.errors.length) {\n                            result.reject(info.errors.map(Package.formatError).join(\" \"));\n                            return;\n                        }\n\n                        var extensionName = info.metadata.name,\n                            extensionInfo = ExtensionManager.extensions[extensionName],\n                            isUpdate = extensionInfo && !!extensionInfo.installInfo;\n\n                        if (isUpdate) {\n                            updateZips.push(file);\n                        } else {\n                            installZips.push(file);\n                        }\n\n                        result.resolve();\n                    }).fail(function (err) {\n                        result.reject(Package.formatError(err));\n                    });\n                });\n\n                return result.promise();\n            });\n\n            validatePromise.done(function () {\n                var installPromise = Async.doSequentially(installZips, function (file) {\n                    return InstallExtensionDialog.installUsingDialog(file);\n                });\n\n                var updatePromise = installPromise.then(function () {\n                    return Async.doSequentially(updateZips, function (file) {\n                        return InstallExtensionDialog.updateUsingDialog(file).done(function (result) {\n                            ExtensionManager.updateFromDownload(result);\n                        });\n                    });\n                });\n\n                // InstallExtensionDialog displays it's own errors, always\n                // resolve the outer promise\n                updatePromise.always(deferred.resolve);\n            }).fail(function (errorArray) {\n                deferred.reject(errorArray);\n            });\n        });\n\n        return deferred.promise();\n    }\n\n    /**\n     * @private\n     * Show a dialog that allows the user to browse and manage extensions.\n     */\n    function _showDialog() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"dialogue\", \"shown\");\n\n        let dialog,\n            $dlg,\n            views   = [],\n            $search,\n            $searchClear,\n            $modalDlg,\n            context = { Strings: Strings, showRegistry: !!brackets.config.extension_registry },\n            models  = [],\n            originalTheme = ThemeManager.getCurrentTheme();\n\n        // Load registry only if the registry URL exists\n        if (context.showRegistry) {\n            models.push(new ExtensionManagerViewModel.RegistryViewModel());\n            models.push(new ExtensionManagerViewModel.ThemesViewModel());\n        }\n\n        models.push(new ExtensionManagerViewModel.InstalledViewModel());\n        models.push(new ExtensionManagerViewModel.DefaultViewModel());\n\n        function updateSearchDisabled() {\n            var model           = models[_activeTabIndex],\n                searchDisabled  = ($search.val() === \"\") &&\n                                  (!model.filterSet || model.filterSet.length === 0);\n\n            $search.prop(\"disabled\", searchDisabled);\n            $searchClear.prop(\"disabled\", searchDisabled);\n\n            return searchDisabled;\n        }\n\n        function clearSearch() {\n            $search.val(\"\");\n            views.forEach(function (view, index) {\n                view.filter(\"\");\n                $modalDlg.scrollTop(0);\n            });\n\n            if (!updateSearchDisabled()) {\n                $search.focus();\n            }\n        }\n\n        // Open the dialog\n        dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(dialogTemplate, context));\n\n        // On dialog close: clean up listeners & models, and commit changes\n        dialog.done(function () {\n            $(window.document).off(\".extensionManager\");\n\n            models.forEach(function (model) {\n                model.dispose();\n            });\n            _performChanges();\n        });\n\n        // Create the view.\n        $dlg = dialog.getElement();\n        $search = $(\".search\", $dlg);\n        $searchClear = $(\".search-clear\", $dlg);\n        $modalDlg = $(\".modal-body\", $dlg);\n\n        function setActiveTab($tab) {\n            if (models[_activeTabIndex]) {\n                models[_activeTabIndex].scrollPos = $modalDlg.scrollTop();\n            }\n            $tab.tab(\"show\");\n            if (models[_activeTabIndex]) {\n                $modalDlg.scrollTop(models[_activeTabIndex].scrollPos || 0);\n                clearSearch();\n                if (_activeTabIndex === 2) {\n                    $(\".ext-sort-group\").hide();\n                } else {\n                    $(\".ext-sort-group\").show();\n                }\n            }\n        }\n\n        // Dialog tabs\n        $dlg.find(\".nav-tabs a\")\n            .on(\"click\", function (event) {\n                setActiveTab($(this));\n            });\n\n        // Navigate through tabs via Ctrl-(Shift)-Tab\n        // (focus may be on document.body if text in extension listing clicked - see #9511)\n        $(window.document).on(\"keyup.extensionManager\", function (event) {\n            if (event.keyCode === KeyEvent.DOM_VK_TAB && event.ctrlKey) {\n                var $tabs = $(\".nav-tabs a\", $dlg),\n                    tabIndex = _activeTabIndex;\n\n                if (event.shiftKey) {\n                    tabIndex--;\n                } else {\n                    tabIndex++;\n                }\n                tabIndex %= $tabs.length;\n                setActiveTab($tabs.eq(tabIndex));\n            }\n        });\n\n        // Update & hide/show the notification overlay on a tab's icon, based on its model's notifyCount\n        function updateNotificationIcon(index) {\n            var model = models[index],\n                $notificationIcon = $dlg.find(\".nav-tabs li\").eq(index).find(\".notification\");\n            if (model.notifyCount) {\n                $notificationIcon.text(model.notifyCount);\n                $notificationIcon.show();\n            } else {\n                $notificationIcon.hide();\n            }\n        }\n\n        // Initialize models and create a view for each model\n        var modelInitPromise = Async.doInParallel(models, function (model, index) {\n            var view    = new ExtensionManagerView(),\n                promise = view.initialize(model),\n                lastNotifyCount;\n\n            promise.always(function () {\n                views[index] = view;\n\n                lastNotifyCount = model.notifyCount;\n                updateNotificationIcon(index);\n            });\n\n            model.on(\"change\", function () {\n                if (lastNotifyCount !== model.notifyCount) {\n                    lastNotifyCount = model.notifyCount;\n                    updateNotificationIcon(index);\n                }\n            });\n\n            return promise;\n        }, true);\n\n        modelInitPromise.always(function () {\n            $(\".spinner\", $dlg).remove();\n\n            views.forEach(function (view) {\n                view.$el.appendTo($modalDlg);\n            });\n\n            // Update search UI before new tab is shown\n            $(\"a[data-toggle='tab']\", $dlg).each(function (index, tabElement) {\n                $(tabElement).on(\"show\", function (event) {\n                    _activeTabIndex = index;\n\n                    // Focus the search input\n                    if (!updateSearchDisabled()) {\n                        $dlg.find(\".search\").focus();\n                    }\n                });\n            });\n\n            // Filter the views when the user types in the search field.\n            var searchTimeoutID;\n            $dlg.on(\"input\", \".search\", function (e) {\n                clearTimeout(searchTimeoutID);\n                var query = $(this).val();\n                searchTimeoutID = setTimeout(function () {\n                    views[_activeTabIndex].filter(query);\n                    $modalDlg.scrollTop(0);\n                }, 200);\n            }).on(\"click\", \".search-clear\", clearSearch);\n\n            // Sort the extension list based on the current selected sorting criteria\n            $dlg.on(\"change\", \".sort-extensions\", function (e) {\n                var sortBy = $(this).val();\n                PreferencesManager.set(\"extensions.sort\", sortBy);\n                models.forEach(function (model, index) {\n                    if (index <= 1) {\n                        model._setSortedExtensionList(ExtensionManager.extensions, index === 1);\n                        views[index].filter($(\".search\").val());\n                    }\n                });\n            });\n\n            // Disable the search field when there are no items in the model\n            models.forEach(function (model, index) {\n                model.on(\"change\", function () {\n                    if (_activeTabIndex === index) {\n                        updateSearchDisabled();\n                    }\n                });\n            });\n\n            var $activeTab = $dlg.find(\".nav-tabs li.active a\");\n            if ($activeTab.length) { // If there's already a tab selected, show it\n                $activeTab.parent().removeClass(\"active\"); // workaround for bootstrap-tab\n                $activeTab.tab(\"show\");\n            } else if ($(\"#toolbar-extension-manager\").hasClass('updatesAvailable')) {\n                // Open dialog to Installed tab if extension updates are available\n                $dlg.find(\".nav-tabs a.installed\").tab(\"show\");\n            } else { // Otherwise show the first tab\n                $dlg.find(\".nav-tabs a:first\").tab(\"show\");\n            }\n            // If activeTab was explicitly selected by user,\n            // then check for the selection\n            // Or if there was an update available since activeTab.length would be 0,\n            // then check for updatesAvailable class in toolbar-extension-manager\n            if (($activeTab.length && $activeTab.hasClass(\"installed\")) || (!$activeTab.length && $(\"#toolbar-extension-manager\").hasClass('updatesAvailable'))) {\n                $(\".ext-sort-group\").hide();\n            } else {\n                $(\".ext-sort-group\").show();\n            }\n        });\n\n        // Handle the 'Install from URL' button.\n        $(\".extension-manager-dialog .install-from-url\")\n            .click(function () {\n                Metrics.countEvent(Metrics.EVENT_TYPE.EXTENSIONS, \"install\", \"fromURL\");\n                InstallExtensionDialog.showDialog().done(ExtensionManager.updateFromDownload);\n            });\n\n        // Handle the drag/drop zone\n        var $dropzone = $(\"#install-drop-zone\"),\n            $dropmask = $(\"#install-drop-zone-mask\");\n\n        $dropzone\n            .on(\"dragover\", function (event) {\n                _stopEvent(event);\n\n                if (!event.originalEvent.dataTransfer.files) {\n                    return;\n                }\n\n                let items = event.originalEvent.dataTransfer.items,\n                    isValidDrop = false,\n                    zipMimeTypes = [\"application/zip\",\n                        \"application/x-zip\",\n                        \"application/octet-stream\",\n                        \"application/x-zip-compressed\"];\n\n                isValidDrop = _.every(items, function (item) {\n                    return item.kind === \"file\" && zipMimeTypes.includes(item.type);\n                });\n\n                if (isValidDrop) {\n                    // Set an absolute width to stabilize the button size\n                    $dropzone.width($dropzone.width());\n\n                    // Show drop styling and message\n                    $dropzone.removeClass(\"drag\");\n                    $dropzone.addClass(\"drop\");\n                } else {\n                    event.originalEvent.dataTransfer.dropEffect = \"none\";\n                }\n            })\n            .on(\"drop\", _stopEvent);\n\n        $dropmask\n            .on(\"dragover\", function (event) {\n                _stopEvent(event);\n                event.originalEvent.dataTransfer.dropEffect = \"copy\";\n            })\n            .on(\"dragleave\", function () {\n                $dropzone.removeClass(\"drop\");\n                $dropzone.addClass(\"drag\");\n            })\n            .on(\"drop\", function (event) {\n                _stopEvent(event);\n\n                if (event.originalEvent.dataTransfer.files) {\n                    // Attempt install\n                    _installUsingDragAndDrop(event.originalEvent.dataTransfer.files).fail(function (errorFiles) {\n                        var message = Strings.INSTALL_EXTENSION_DROP_ERROR;\n\n                        message += \"<ul class='dialog-list'>\";\n                        for(let fileKey of Object.keys(errorFiles)){\n                            message += \"<li><span class='dialog-filename'>\";\n                            message += StringUtils.breakableUrl(errorFiles[fileKey].name);\n                            message += \"</span>: \" + Strings.CANT_DROP_ZIP + \"</li>\";\n                        }\n                        message += \"</ul>\";\n\n                        Dialogs.showModalDialog(\n                            DefaultDialogs.DIALOG_ID_ERROR,\n                            Strings.EXTENSION_MANAGER_TITLE,\n                            message\n                        );\n                    }).always(function () {\n                        $dropzone.removeClass(\"validating\");\n                        $dropzone.addClass(\"drag\");\n                    });\n\n                    // While installing, show validating message\n                    $dropzone.removeClass(\"drop\");\n                    $dropzone.addClass(\"validating\");\n                }\n            });\n\n        return new $.Deferred().resolve(dialog).promise();\n    }\n\n    CommandManager.register(Strings.CMD_EXTENSION_MANAGER, Commands.FILE_EXTENSION_MANAGER, _showDialog);\n\n    AppInit.appReady(function () {\n        $(\"#toolbar-extension-manager\").click(_showDialog);\n    });\n\n    // Unit tests\n    exports._performChanges = _performChanges;\n});\n"],"file":"ExtensionManagerDialog.js"}