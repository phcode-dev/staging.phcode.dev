define(function(require,exports,module){var EventDispatcher=require("utils/EventDispatcher"),_commands={},_commandsOriginal={};function Command(name,id,commandFn){this._name=name,this._id=id,this._commandFn=commandFn,this._checked=void 0,this._enabled=!0}function register(name,id,commandFn){if(_commands[id])return console.log("Attempting to register an already-registered command: "+id),null;if(!name||!id||!commandFn)return console.error("Attempting to register a command with a missing name, id, or command function:"+name+" "+id),null;var command=new Command(name,id,commandFn);return _commands[id]=command,exports.trigger("commandRegistered",command),command}function registerInternal(id,commandFn){if(_commands[id])return console.log("Attempting to register an already-registered command: "+id),null;if(!id||!commandFn)return console.error("Attempting to register an internal command with a missing id, or command function: "+id),null;var command=new Command(null,id,commandFn);return _commands[id]=command,exports.trigger("commandRegistered",command),command}function _testReset(){_commandsOriginal=_commands,_commands={}}function _testRestore(){_commands=_commandsOriginal,_commandsOriginal={}}function get(id){return _commands[id]}function getAll(){return Object.keys(_commands)}function execute(id){var command=_commands[id];if(command){try{exports.trigger("beforeExecuteCommand",id)}catch(err){console.error(err)}return command.execute.apply(command,Array.prototype.slice.call(arguments,1))}return(new $.Deferred).reject().promise()}EventDispatcher.makeEventDispatcher(Command.prototype),Command.prototype.getID=function(){return this._id},Command.prototype.execute=function(){if(!this._enabled)return(new $.Deferred).reject().promise();var result=this._commandFn.apply(this,arguments);return result||(new $.Deferred).resolve().promise()},Command.prototype.getEnabled=function(){return this._enabled},Command.prototype.setEnabled=function(enabled){var changed=this._enabled!==enabled;this._enabled=enabled,changed&&this.trigger("enabledStateChange")},Command.prototype.setChecked=function(checked){var changed=this._checked!==checked;this._checked=checked,changed&&this.trigger("checkedStateChange")},Command.prototype.getChecked=function(){return this._checked},Command.prototype.setName=function(name){var changed=this._name!==name;this._name=name,changed&&this.trigger("nameChange")},Command.prototype.getName=function(){return this._name},EventDispatcher.makeEventDispatcher(exports),exports.register=register,exports.registerInternal=registerInternal,exports.execute=execute,exports.get=get,exports.getAll=getAll,exports._testReset=_testReset,exports._testRestore=_testRestore});
//# sourceMappingURL=CommandManager.js.map
