window.jsPromise=function(jqueryOrJSPromise){if(jqueryOrJSPromise&&jqueryOrJSPromise.catch&&jqueryOrJSPromise.then&&jqueryOrJSPromise.finally)return jqueryOrJSPromise;if(!jqueryOrJSPromise||jqueryOrJSPromise&&!jqueryOrJSPromise.fail||jqueryOrJSPromise&&!jqueryOrJSPromise.done)throw console.error("this function expects a jquery promise with done and fail handlers"),new Error("this function expects a jquery promise with done and fail handlers");return new Promise((resolve,reject)=>{jqueryOrJSPromise.done(resolve).fail(reject)})};let trackedScriptCount=0;function _setSplashScreenStatusUpdate(message1,message2){let splashScreenFrame=document.getElementById("splash-screen-frame");if(!splashScreenFrame)return window.debugMode||(window.scriptObserver&&window.scriptObserver.disconnect(),console.log("startup Watcher: Disconnected script load watcher.")),!1;let displayBtn1=splashScreenFrame.contentDocument.getElementById("load-status-display-btn"),displayText2=splashScreenFrame.contentDocument.getElementById("load-status-display-text");return displayBtn1.textContent=message1,displayText2.textContent=message2,!0}const callback=function(mutationsList){try{for(const mutation of mutationsList)if("childList"===mutation.type&&mutation.addedNodes.length>0&&mutation.addedNodes[0].src){trackedScriptCount++;let scriptAddedSplit=mutation.addedNodes[0].src.split("/");if(scriptAddedSplit.length>0){let message=`Loading (${trackedScriptCount})`;window.Phoenix&&window.Phoenix.firstBoot&&(message=`Installing (${trackedScriptCount})`),_setSplashScreenStatusUpdate(message,`${scriptAddedSplit[scriptAddedSplit.length-1]}`)}}}catch(e){console.error("Error in script mutation observer!",e)}},mainScripts=document.getElementById("main-scripts-head"),config={childList:!0};Phoenix.browser.isTauri||(window.scriptObserver=new MutationObserver(callback),window.scriptObserver.observe(mainScripts,config)),require.config({paths:{text:"thirdparty/text/text",i18n:"thirdparty/i18n/i18n",fileSystemImpl:"filesystem/impls/appshell/AppshellFileSystem","preact-compat":"thirdparty/preact-compat/preact-compat.min",preact:"thirdparty/preact/preact"},map:{"*":{"thirdparty/CodeMirror2":"thirdparty/CodeMirror","thirdparty/preact":"preact-compat","view/PanelManager":"view/WorkspaceManager"}},waitSeconds:60}),window.location.search.indexOf("testEnvironment")>-1?require.config({paths:{"preferences/PreferencesImpl":"../test/TestPreferencesImpl"},locale:"en"}):require.config({locale:window.PhStore.getItem("locale")||window.navigator.language}),define(function(require){require(["utils/Metrics","utils/Compatibility","utils/EventDispatcher"],function(){window.Metrics=require("utils/Metrics");try{require(["brackets"])}catch(err){window.refreshServiceWorkerCache&&window.refreshServiceWorkerCache(),window.logger&&window.logger.reportError(err,"Critical error when loading brackets. Trying to reload again."),setTimeout(window.location.reload,3e3)}})});
//# sourceMappingURL=main.js.map
