{"version":3,"sources":["JSUtils/node/ExtractFileContent.js"],"names":["fs","require","_dirtyFilesCache","clearDirtyFilesCache","updateDirtyFilesCache","name","action","_readFile","fileName","callback","readFile","err","data","content","apply","extractContent","extractFromMainContext","exports","clearFilesCache","updateFilesCache"],"mappings":"AA0BA,IAAIA,GAAKC,QAAQ,MACbC,iBAAmB,GAKvB,SAASC,uBACLD,iBAAmB,GAWvB,SAASE,sBAAsBC,KAAMC,QAC7BA,OACAJ,iBAAiBG,OAAQ,EAErBH,iBAAiBG,cACVH,iBAAiBG,MAWpC,SAASE,UAAUC,SAAUC,UACzBT,GAAGU,SAASF,SAAU,OAAQ,SAAUG,IAAKC,MACzC,IAAIC,QAAU,GACTF,MACDE,QAAUD,MAEdH,SAASK,MAAM,KAAM,CAACN,SAAUK,YAaxC,SAASE,eAAeP,SAAUC,SAAUO,wBAGxCA,uBAAuBF,MAAM,KAAM,CAACN,WAGxCS,QAAQF,eAAiBA,eACzBE,QAAQC,gBAAkBf,qBAC1Bc,QAAQE,iBAAmBf","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2017 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*eslint-env node */\n/*jslint node: true */\n\n\n\nvar fs = require(\"fs\"),\n    _dirtyFilesCache = {};\n\n/**\n * Clears the cache for dirty file paths\n */\nfunction clearDirtyFilesCache() {\n    _dirtyFilesCache = {};\n}\n\n/**\n * Updates the files cache with fullpath when dirty flag changes for a document\n * If the doc is being marked as dirty then an entry is created in the cache\n * If the doc is being marked as clean then the corresponsing entry gets cleared from cache\n *\n * @param {String} name - fullpath of the document\n * @param {boolean} action - whether the document is dirty\n */\nfunction updateDirtyFilesCache(name, action) {\n    if (action) {\n        _dirtyFilesCache[name] = true;\n    } else {\n        if (_dirtyFilesCache[name]) {\n            delete _dirtyFilesCache[name];\n        }\n    }\n}\n\n/**\n * Extract content locally from the file system used fs.readFile()\n *\n * @param {String} fileName - fullpath of the document\n * @param {Function} callback - callback handle to post the content back\n */\nfunction _readFile(fileName, callback) {\n    fs.readFile(fileName, \"utf8\", function (err, data) {\n        var content = \"\";\n        if (!err) {\n            content = data;\n        }\n        callback.apply(null, [fileName, content]);\n    });\n}\n\n/**\n * Extracts file content for the given file name(1st param) and invokes the callback handle(2nd param) with\n * extracted file content. Content can be extracted locally from the file system used fs.readFile()\n * or conditionally from main context(brackets main thread) by using the 3rd param\n *\n * @param {String} fileName - fullpath of the document\n * @param {Function} callback - callback handle to post the content back\n * @param {Object} extractFromMainContext - content request handle wrapper from main thread\n */\nfunction extractContent(fileName, callback, extractFromMainContext) {\n    // Ask the main thread context to provide the updated file content\n    // We can't yet use node io to read, to utilize shells encoding detection\n    extractFromMainContext.apply(null, [fileName]);\n}\n\nexports.extractContent = extractContent;\nexports.clearFilesCache = clearDirtyFilesCache;\nexports.updateFilesCache = updateDirtyFilesCache;\n\n"],"file":"ExtractFileContent.js"}