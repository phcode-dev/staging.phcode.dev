importScripts(`${Phoenix.baseURL}thirdparty/acorn/dist/acorn.js`),importScripts(`${Phoenix.baseURL}thirdparty/acorn/dist/acorn_loose.js`),importScripts(`${Phoenix.baseURL}thirdparty/acorn/dist/walk.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/lib/signal.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/lib/tern.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/lib/comment.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/lib/def.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/lib/infer.js`);const Tern=tern;importScripts(`${Phoenix.baseURL}thirdparty/tern/plugin/modules.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/plugin/requirejs.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/plugin/es_modules.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/plugin/doc_comment.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/plugin/node.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/plugin/node_resolve.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/plugin/complete_strings.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/plugin/commonjs.js`),importScripts(`${Phoenix.baseURL}thirdparty/tern/plugin/angular.js`),importScripts(`${Phoenix.baseURL}JSUtils/worker/testTern.js`),function(){const detailedDebugLogs=!1;function debugLog(...args){detailedDebugLogs&&console.log("tern: "+args[0],...args.splice(1))}function _postTernData(data){WorkerComm.triggerPeer("tern-data",data)}let MessageIds,ternOptions,config={};fetch(`${Phoenix.baseURL}JSUtils/MessageIds.json`).then(async contents=>{MessageIds=await contents.json()}).catch(e=>{console.error("failed to init MessageIds ",e)});let ternServer=null,isUntitledDoc=!1,inferenceTimeout,fileCallBacks={},_dirtyFilesCache={};function clearDirtyFilesCache(){_dirtyFilesCache={}}function updateDirtyFilesCache(name,action){action?_dirtyFilesCache[name]=!0:_dirtyFilesCache[name]&&delete _dirtyFilesCache[name]}function _reportError(e,file){e instanceof Tern.TimedOut?_postTernData({type:MessageIds.TERN_INFERENCE_TIMEDOUT,file:file}):console.error("Error thrown in tern worker:"+e.message+" : file: "+file,e.stack)}function handleGetFile(file,text){debugLog(`tern Got file ${file}`,text);let contentCallback=fileCallBacks[file];if(contentCallback)try{contentCallback(null,text)}catch(e){_reportError(e,file)}delete fileCallBacks[file]}function _getNormalizedFilename(fileName){return!isUntitledDoc&&ternServer.projectDir&&-1===fileName.indexOf(ternServer.projectDir)&&(fileName=ternServer.projectDir+fileName),fileName}function _getDenormalizedFilename(fileName){return!isUntitledDoc&&ternServer.projectDir&&0===fileName.indexOf(ternServer.projectDir)&&(fileName=fileName.slice(ternServer.projectDir.length)),fileName}function _requestFileContent(name){debugLog("_requestFileContent: ",name),_postTernData({type:MessageIds.TERN_GET_FILE_MSG,file:name})}function getFile(name,contentCb){fileCallBacks[name]=contentCb;try{_requestFileContent(name)}catch(error){console.log(error)}}function initTernServer(env,files){console.log("init tern server with files: ",files),ternOptions={defs:env,async:!0,getFile:getFile,plugins:{commonjs:!0,requirejs:{},angular:!0,complete_strings:!0,doc_comment:!0,doc_comments:!0,es_modules:!0,node:!0,node_resolve:!0}},ternServer&&(ternServer.reset(),Tern.resetGuessing()),ternServer=new Tern.Server(ternOptions),files.forEach(function(file){ternServer.addFile(file)})}function resetTernServer(){ternServer&&(ternServer.reset(),Tern.resetGuessing(),_postTernData({type:MessageIds.TERN_WORKER_READY}))}function createEmptyUpdate(path){return{type:MessageIds.TERN_FILE_INFO_TYPE_EMPTY,name:path,offsetLines:0,text:""}}function buildRequest(fileInfo,query,offset){(query={type:query}).start=offset,query.end=offset,query.file=fileInfo.type===MessageIds.TERN_FILE_INFO_TYPE_PART?"#0":fileInfo.name,query.filter=!1,query.sort=!1,query.depths=!0,query.guess=!0,query.origins=!0,query.types=!0,query.expandWordForward=!1,query.lineCharPositions=!0,query.docs=!0,query.urls=!0;let request={query:query,files:[],offset:offset,timeout:inferenceTimeout};if(fileInfo.type!==MessageIds.TERN_FILE_INFO_TYPE_EMPTY){let fileInfoCopy=JSON.parse(JSON.stringify(fileInfo));request.files.push(fileInfoCopy)}return request}function getRefs(fileInfo,offset){let request=buildRequest(fileInfo,"refs",offset);try{ternServer.request(request,function(error,data){if(error){let response;return console.error("Error returned from Tern 'refs' request: "+error),void _postTernData({type:MessageIds.TERN_REFS,error:error.message})}let response;_postTernData({type:MessageIds.TERN_REFS,file:fileInfo.name,offset:offset,references:data})})}catch(e){_reportError(e,fileInfo.name)}}function getScopeData(fileInfo,offset){ternOptions.plugins={};let ternServer=new Tern.Server(ternOptions),error;ternServer.addFile(fileInfo.name,fileInfo.text);let request=buildRequest(fileInfo,"completions",offset);try{ternServer.request(request,function(ternError,data){if(ternError)console.error("Error for Tern request: \n"+JSON.stringify(request)+"\n"+ternError),error=ternError.toString();else{let file=ternServer.findFile(fileInfo.name),scope=Tern.scopeAt(file.ast,Tern.resolvePos(file,offset),file.scope);scope&&(scope=JSON.parse(JSON.stringify(scope,function(key,value){if(!["proto","propertyOf","onNewProp","sourceFile","maybeProps"].includes(key)){if("fnType"===key)return value.name||"FunctionExpression";if("props"===key){for(let key in value)value[key]=value[key].propertyName;return value}return"originNode"===key?value&&{start:value.start,end:value.end,type:value.type,body:{start:value.body.start,end:value.body.end}}:value}}))),_postTernData({type:MessageIds.TERN_SCOPEDATA_MSG,file:_getNormalizedFilename(fileInfo.name),offset:offset,scope:scope})}})}catch(e){_reportError(e,fileInfo.name)}finally{ternServer.reset(),Tern.resetGuessing()}}function getJumptoDef(fileInfo,offset){let request=buildRequest(fileInfo,"definition",offset);try{ternServer.request(request,function(error,data){if(error)return console.error("Error returned from Tern 'definition' request: "+error),void _postTernData({type:MessageIds.TERN_JUMPTODEF_MSG,file:fileInfo.name,offset:offset});let response={type:MessageIds.TERN_JUMPTODEF_MSG,file:_getNormalizedFilename(fileInfo.name),resultFile:data.file,offset:offset,start:data.start,end:data.end};request=buildRequest(fileInfo,"definition",offset),ternServer.request(request,function(error,data){_postTernData(response)})})}catch(e){_reportError(e,fileInfo.name)}}function getTernProperties(fileInfo,offset,type){let request=buildRequest(fileInfo,"properties",offset),i;try{ternServer.request(request,function(error,data){let properties=[];error?console.error("Error returned from Tern 'properties' request: "+error):properties=data.completions.map(function(completion){return{value:completion,type:completion.type,guess:!0}}),_postTernData({type:type,file:_getNormalizedFilename(fileInfo.name),offset:offset,properties:properties})})}catch(e){_reportError(e,fileInfo.name)}}function getTernHints(fileInfo,offset,isProperty){let request=buildRequest(fileInfo,"completions",offset),i;try{ternServer.request(request,function(error,data){let completions=[];error?console.error("Error returned from Tern 'completions' request: "+error):completions=data.completions.map(function(completion){return{value:completion.name,type:completion.type,depth:completion.depth,guess:completion.guess,origin:completion.origin,doc:completion.doc,url:completion.url}}),completions.length>0||!isProperty?_postTernData({type:MessageIds.TERN_COMPLETIONS_MSG,file:_getNormalizedFilename(fileInfo.name),offset:offset,completions:completions}):getTernProperties(fileInfo,offset,MessageIds.TERN_COMPLETIONS_MSG)})}catch(e){_reportError(e,fileInfo.name)}}function getParameters(inferFnType){let recordTypeToString,inferTypeToString,processInferFnTypeParameters,inferFnTypeToString;function inferArrTypeToString(inferArrType){let result="Array.<";return result+=inferArrType.props["<i>"].types.map(inferTypeToString).join(", "),0===inferArrType.props["<i>"].types.length&&(result+="Object"),result+=">"}function formatParameterHint(params,appendSeparators,appendParameter,typesOnly){let result="",pendingOptional=!1;return params.forEach(function(value,i){let param=value.type,separators="";value.isOptional&&(pendingOptional&&(separators+="]"),pendingOptional=!0),i>0&&(separators+=", "),value.isOptional&&(separators+="["),appendSeparators&&appendSeparators(separators),result+=separators,typesOnly||(param+=" "+value.name),appendParameter&&appendParameter(param,i),result+=param}),pendingOptional&&(appendSeparators&&appendSeparators("]"),result+="]"),result}return recordTypeToString=function(props){let result="{",first=!0,prop;return result+=Object.keys(props).map(function(key){return key+": "+inferTypeToString(props[key])}).join(", "),result+="}"},inferTypeToString=function(inferType){let result;return inferType instanceof Tern.AVal&&(inferType=inferType.types[0]),inferType instanceof Tern.Prim?"string"===(result=inferType.toString())?result="String":"number"===result?result="Number":"boolean"===result&&(result="Boolean"):result=inferType instanceof Tern.Arr?inferArrTypeToString(inferType):inferType instanceof Tern.Fn?inferFnTypeToString(inferType):inferType instanceof Tern.Obj?void 0===inferType.name?recordTypeToString(inferType.props):inferType.name:"Object",result},inferFnTypeToString=function(inferType){let result="function(",params;return result+=formatParameterHint(processInferFnTypeParameters(inferType),null,null,!0),inferType.retval&&(result+="):",result+=inferTypeToString(inferType.retval)),result},(processInferFnTypeParameters=function(inferType){let params=[],i;for(i=0;i<inferType.args.length;i++){let param={},name=inferType.argNames[i],type=inferType.args[i];name||(name="param"+(i+1)),"?"===name[name.length-1]&&(name=name.substring(0,name.length-1),param.isOptional=!0),param.name=name,param.type=inferTypeToString(type),params.push(param)}return params})(inferFnType)}function handleFunctionType(fileInfo,offset){let request=buildRequest(fileInfo,"type",offset),error;request.query.preferFunction=!0;let fnType="";try{ternServer.request(request,function(ternError,data){if(ternError)console.error("Error for Tern request: \n"+JSON.stringify(request)+"\n"+ternError),error=ternError.toString();else{let file=ternServer.findFile(fileInfo.name),newOffset=offset;fileInfo.type===MessageIds.TERN_FILE_INFO_TYPE_PART&&(newOffset={line:offset.line+fileInfo.offsetLines,ch:offset.ch}),request=buildRequest(createEmptyUpdate(fileInfo.name),"type",newOffset);let expr=Tern.findQueryExpr(file,request.query);Tern.resetGuessing();let type=Tern.expressionType(expr);(type=type.getFunctionType()||type.getType())?fnType=getParameters(type):(ternError="No parameter type found",console.error(ternError))}})}catch(e){_reportError(e,fileInfo.name)}_postTernData({type:MessageIds.TERN_CALLED_FUNC_TYPE_MSG,file:_getNormalizedFilename(fileInfo.name),offset:offset,fnType:fnType,error:error})}function handleAddFiles(files){debugLog("handleAddFiles: ",files),files.forEach(function(file){ternServer.addFile(file)})}function handleUpdateFile(path,text){debugLog(`handleUpdateFile: ${path} `,text),ternServer.addFile(path,text),_postTernData({type:MessageIds.TERN_UPDATE_FILE_MSG,path:path}),ternServer.reset(),Tern.resetGuessing()}function handlePrimePump(path){let fileName,fileInfo,request=buildRequest(createEmptyUpdate(_getDenormalizedFilename(path)),"completions",{line:0,ch:0});try{ternServer.request(request,function(error,data){_postTernData({type:MessageIds.TERN_PRIME_PUMP_MSG,path:_getNormalizedFilename(path)})})}catch(e){_reportError(e,path)}}function setConfig(configUpdate){config=configUpdate}function _requestTernServer(commandConfig){let file,text,offset,request=commandConfig,type=request.type;if(console.log("Tern worker received Message of type: "+type),type===MessageIds.TERN_INIT_MSG){let env=request.env,files=request.files;inferenceTimeout=request.timeout,initTernServer(env,files)}else type===MessageIds.TERN_COMPLETIONS_MSG?(offset=request.offset,getTernHints(request.fileInfo,offset,request.isProperty)):type===MessageIds.TERN_GET_FILE_MSG?handleGetFile(file=request.file,text=request.text):type===MessageIds.TERN_CALLED_FUNC_TYPE_MSG?(offset=request.offset,handleFunctionType(request.fileInfo,offset)):type===MessageIds.TERN_JUMPTODEF_MSG?(offset=request.offset,getJumptoDef(request.fileInfo,offset)):type===MessageIds.TERN_SCOPEDATA_MSG?(offset=request.offset,getScopeData(request.fileInfo,offset)):type===MessageIds.TERN_REFS?(offset=request.offset,getRefs(request.fileInfo,offset)):type===MessageIds.TERN_ADD_FILES_MSG?handleAddFiles(request.files):type===MessageIds.TERN_PRIME_PUMP_MSG?(isUntitledDoc=request.isUntitledDoc,handlePrimePump(request.path)):type===MessageIds.TERN_GET_GUESSES_MSG?(offset=request.offset,getTernProperties(request.fileInfo,offset,MessageIds.TERN_GET_GUESSES_MSG)):type===MessageIds.TERN_UPDATE_FILE_MSG?handleUpdateFile(request.path,request.text):type===MessageIds.SET_CONFIG?setConfig(request.config):type===MessageIds.TERN_UPDATE_DIRTY_FILE?updateDirtyFilesCache(request.name,request.action):type===MessageIds.TERN_CLEAR_DIRTY_FILES_LIST?clearDirtyFilesCache():console.error("Unknown message: "+JSON.stringify(request))}function invokeTernCommand(commandConfig){try{_requestTernServer(commandConfig)}catch(error){console.warn(error)}}WorkerComm.setExecHandler("invokeTernCommand",invokeTernCommand),WorkerComm.setExecHandler("resetTernServer",resetTernServer)}();
//# sourceMappingURL=tern-main.js.map
