{"version":3,"sources":["utils/EventManager.js"],"names":["define","require","exports","module","_eventHandlerMap","registerEventHandler","handlerName","eventDispatcher","console","error","isExistsEventHandler","undefined","triggerEvent","eventName","eventParams","handler","trigger"],"mappings":"AAkDAA,OAAO,SAAUC,QAASC,QAASC,QAE/B,MAAMC,iBAAmB,GAkBzB,SAASC,qBAAqBC,YAAaC,iBACpCH,iBAAiBE,cAChBE,QAAQC,MAAM,6EAA8EH,aAEhGF,iBAAiBE,aAAeC,gBASpC,SAASG,qBAAqBJ,aAC1B,YAAyCK,IAAlCP,iBAAiBE,aAgB5B,SAASM,aAAaN,YAAaO,aAAcC,aAC7C,IAAIC,QAAUX,iBAAiBE,aAC3BS,QAIJA,QAAQC,QAAQH,aAAcC,aAH1BN,QAAQC,uCAAuCH,0BAA0BO,oBAAoBC,eAOrGZ,QAAQG,qBAAuBA,qBAC/BH,QAAQQ,qBAAuBA,qBAC/BR,QAAQU,aAAeA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global less */\n// jshint ignore: start\n\n// @INCLUDE_IN_API_DOCS\n\n/**\n * The global EventManager can be used to register named EventDispatchers so that events\n * can be triggered from anywhere without using require context.\n *\n * A global `window.EventManager` object is made available in phoenix that can be called anytime after AppStart.\n *\n * ## Usage\n * For Eg. Let's say we have an extension `drawImage` installed that wants to expose custom functionality to phoenix.\n * The Extension will first register named EventHandler like this:\n * ```js\n * // in drawImage/someExtensionModule.js module within the extension, do the following:\n * const EventDispatcher = brackets.getModule(\"utils/EventDispatcher\"),\n * EventManager = brackets.getModule(\"utils/EventManager\");\n * EventDispatcher.makeEventDispatcher(exports);\n *\n * EventManager.registerEventHandler(\"drawImageHandler\", exports);\n * ```\n * Once the event handler is registered, we can trigger events on the named handler anywhere in phoenix\n * (inside or outside the extension) by using:\n *\n * ```js\n * EventManager.triggerEvent(\"drawImageHandler\", \"someEventName\", \"param1\", \"param2\", ...);\n * ```\n * @module utils/EventManager\n */\ndefine(function (require, exports, module) {\n\n    const _eventHandlerMap = {};\n    /**\n     * Registers a named EventHandler. Event handlers are created using the call:\n     * `EventDispatcher.makeEventDispatcher(Command.prototype);`\n     *\n     * @example <caption>To register a close dialogue event handler in an extension:</caption>\n     * // in close-dialogue.js module winthin the extension, do the following:\n     * const EventDispatcher = brackets.getModule(\"utils/EventDispatcher\"),\n     * EventDispatcher.makeEventDispatcher(exports);\n     *\n     * EventManager.registerEventHandler(\"closeDialogueHandler\", exports);\n     * // Once the event handler is registered, see triggerEvent API on how to raise events\n     *\n     * @param {string} handlerName a unique name of the handler.\n     * @param {object} eventDispatcher An EventDispatcher that will be used to trigger events.\n     * @return {boolean}\n     * @type {function}\n     */\n    function registerEventHandler(handlerName, eventDispatcher) {\n        if(_eventHandlerMap[handlerName]){\n            console.error(\"Duplicate EventManager registration for event, overwriting event handler: \", handlerName);\n        }\n        _eventHandlerMap[handlerName] = eventDispatcher;\n    }\n\n    /**\n     * Returns true is an EventHandler of the given name exists.\n     * @param {string} handlerName\n     * @return {boolean}\n     * @type {function}\n     */\n    function isExistsEventHandler(handlerName) {\n        return _eventHandlerMap[handlerName] !== undefined;\n    }\n\n    /**\n     * Triggers an event on the named event handler.\n     *\n     * @example <caption>To trigger an event to the `closeDialogue` event handler registered above</caption>\n     * // anywhere in code, do the following:\n     * const EventManager = brackets.getModule(\"utils/EventManager\");\n     * EventManager.triggerEvent(\"closeDialogueHandler\", \"someEvent\", \"param1\", \"param2\", ...);\n     *\n     * @param {string} handlerName\n     * @param eventName the event name as recognised by the handler. this is usually a string.\n     * @param eventParams Can be a comma seperated list of args or a single argument.\n     * @type {function}\n     */\n    function triggerEvent(handlerName, eventName, ...eventParams) {\n        let handler = _eventHandlerMap[handlerName];\n        if(!handler){\n            console.error(`Could not locate handler for: ${handlerName} eventName: ${eventName} event: ${eventParams}`);\n            return;\n        }\n        handler.trigger(eventName, ...eventParams);\n    }\n\n    // Public API\n    exports.registerEventHandler = registerEventHandler;\n    exports.isExistsEventHandler = isExistsEventHandler;\n    exports.triggerEvent = triggerEvent;\n});\n"],"file":"EventManager.js"}