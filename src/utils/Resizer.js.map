{"version":3,"sources":["utils/Resizer.js"],"names":["define","require","exports","module","DIRECTION_VERTICAL","DIRECTION_HORIZONTAL","POSITION_TOP","POSITION_BOTTOM","POSITION_LEFT","POSITION_RIGHT","PREFS_PURE_CODE","DEFAULT_MIN_SIZE","EVENT_PANEL_COLLAPSED","EVENT_PANEL_EXPANDED","EVENT_PANEL_RESIZE_START","EVENT_PANEL_RESIZE_UPDATE","EVENT_PANEL_RESIZE_END","AppInit","EventDispatcher","ViewUtils","PreferencesManager","$mainView","$sideBar","isResizing","isWindowResizing","show","element","showFunc","$","data","apply","hide","hideFunc","toggle","is","removeSizable","removeSizableFunc","resyncSizer","resyncSizerFunc","isVisible","_isPercentage","value","isNumeric","indexOf","_percentageToPixels","total","parseFloat","replace","_sideBarMaxSize","siblingsWidth","siblings","not","each","i","elem","$elem","css","outerWidth","width","makeResizable","direction","position","minSize","collapsible","forceLeft","createdByWorkspaceManager","usePercentages","forceRight","_attachToParent","initialSize","$resizer","$element","$parent","parent","$resizableElement","find","$body","window","document","body","elementID","attr","elementPrefs","getViewState","animationRequest","directionProperty","directionIncrement","parentSizeFunction","innerWidth","innerHeight","elementSizeFunction","newSize","this","height","parentSize","percentage","prop","resizerCSSPosition","contentSizeFunction","adjustSibling","size","undefined","resizeElement","elementSize","contentSize","length","repositionResizer","resizerPosition","get","hasClass","visible","console","error","prepend","off","removeData","remove","elementOffset","offset","trigger","setViewState","resizerSize","insertBefore","on","e","$resizeShield","startPosition","startSize","previousSize","baseSize","resizeStarted","doRedraw","requestAnimationFrame","onMouseMove","Math","max","maxSize","min","preventDefault","endResize","setTimeout","append","children","index","child","outerHeight","one","updateResizeLimits","sideBarMaxSize","onWindowResize","addEventListener","htmlReady","minsize","forceleft","hideMainToolBar","makeEventDispatcher"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Resizer is a Module utility to inject resizing capabilities to any element\n * inside Brackets.\n *\n * On initialization, Resizer discovers all nodes tagged as \"vert-resizable\"\n * and \"horz-resizable\" to add the resizer handler. Additionally, \"top-resizer\",\n * \"bottom-resizer\", \"left-resizer\" and \"right-resizer\" classes control the\n * position of the resizer on the element.\n *\n * An element can be made resizable at any time using the `makeResizable()` API.\n * Panel sizes are saved via preferences and restored when the DOM node becomes resizable\n * again in a subsequent launch.\n *\n * The resizable elements trigger a panelResizeStart, panelResizeUpdate and panelResizeEnd\n * event that can be used to create performance optimizations (such as hiding/showing elements\n * while resizing), custom layout logic, etc. See makeResizable() for details on the events.\n *\n * A resizable element can be collapsed/expanded using the `show`, `hide` and `toggle` APIs or\n * via user action. This triggers panelCollapsed/panelExpanded events - see makeResizable().\n */\ndefine(function (require, exports, module) {\n\n\n    var DIRECTION_VERTICAL = \"vert\";\n    var DIRECTION_HORIZONTAL = \"horz\";\n\n    var POSITION_TOP = \"top\";\n    var POSITION_BOTTOM = \"bottom\";\n    var POSITION_LEFT = \"left\";\n    var POSITION_RIGHT = \"right\";\n    var PREFS_PURE_CODE = \"noDistractions\";\n\n    // Minimum size (height or width) for autodiscovered resizable panels\n    var DEFAULT_MIN_SIZE = 100;\n\n    const EVENT_PANEL_COLLAPSED = 'panelCollapsed',\n        EVENT_PANEL_EXPANDED = 'panelExpanded',\n        EVENT_PANEL_RESIZE_START = 'panelResizeStart',\n        EVENT_PANEL_RESIZE_UPDATE = 'panelResizeUpdate',\n        EVENT_PANEL_RESIZE_END = 'panelResizeEnd';\n\n    // Load dependent modules\n    var AppInit                 = require(\"utils/AppInit\"),\n        EventDispatcher         = require(\"utils/EventDispatcher\"),\n        ViewUtils               = require(\"utils/ViewUtils\"),\n        PreferencesManager      = require(\"preferences/PreferencesManager\");\n\n    var $mainView,\n        $sideBar;\n\n    var isResizing = false,\n        isWindowResizing = false;\n\n    /**\n     * Shows a resizable element.\n     * @param {DOMNode} element Html element to show if possible\n     */\n    function show(element) {\n        var showFunc = $(element).data(\"show\");\n        if (showFunc) {\n            showFunc.apply(element);\n        }\n    }\n\n    /**\n     * Hides a resizable element.\n     * @param {DOMNode} element Html element to hide if possible\n     */\n    function hide(element) {\n        var hideFunc = $(element).data(\"hide\");\n        if (hideFunc) {\n            hideFunc.apply(element);\n        }\n    }\n\n    /**\n     * Changes the visibility state of a resizable element. The toggle\n     * functionality is added when an element is made resizable.\n     * @param {DOMNode} element Html element to toggle\n     */\n    function toggle(element) {\n        if ($(element).is(\":visible\")) {\n            hide(element);\n        } else {\n            show(element);\n        }\n    }\n\n    /**\n     * Removes the resizability of an element if it's resizable\n     * @param {DOMNode} element Html element in which to remove sizing\n     */\n    function removeSizable(element) {\n        var removeSizableFunc = $(element).data(\"removeSizable\");\n        if (removeSizableFunc) {\n            removeSizableFunc.apply(element);\n        }\n    }\n\n    /**\n     * Updates the sizing div by resyncing to the sizing edge of the element\n     * Call this method after manually changing the size of the element\n     * @param {DOMNode} element Html element whose sizer should be resynchronized\n     */\n    function resyncSizer(element) {\n        var resyncSizerFunc = $(element).data(\"resyncSizer\");\n        if (resyncSizerFunc) {\n            resyncSizerFunc.apply(element);\n        }\n    }\n\n    /**\n     * Returns the visibility state of a resizable element.\n     * @param {DOMNode} element Html element to toggle\n     * @return {boolean} true if element is visible, false if it is not visible\n     */\n    function isVisible(element) {\n        return $(element).is(\":visible\");\n    }\n\n    function _isPercentage(value) {\n        return !$.isNumeric(value) && value.indexOf('%') > -1;\n    }\n\n    function _percentageToPixels(value, total) {\n        return parseFloat(value.replace('%', '')) * (total / 100);\n    }\n\n    function _sideBarMaxSize() {\n        var siblingsWidth = 0;\n        $sideBar.siblings().not(\".content\").each(function (i, elem) {\n            var $elem = $(elem);\n            if ($elem.css(\"display\") !== \"none\") {\n                siblingsWidth += $elem.outerWidth();\n            }\n        });\n        return $(\".main-view\").width() - siblingsWidth - 1;\n    }\n\n    /**\n     * Adds resizing and (optionally) expand/collapse capabilities to a given html element. The element's size\n     * & visibility are automatically saved & restored as a view-state preference.\n     *\n     * Resizing can be configured in two directions:\n     *  - Vertical (\"vert\"): Resizes the height of the element\n     *  - Horizontal (\"horz\"): Resizes the width of the element\n     *\n     * Resizer handlers can be positioned on the element at:\n     *  - Top (\"top\") or bottom (\"bottom\") for vertical resizing\n     *  - Left (\"left\") or right (\"right\") for horizontal resizing\n     *\n     * A resizable element triggers the following events while resizing:\n     *  - panelResizeStart: When the resize starts. Passed the new size.\n     *  - panelResizeUpdate: When the resize gets updated. Passed the new size.\n     *  - panelResizeEnd: When the resize ends. Passed the final size.\n     *  - panelCollapsed: When the panel gets collapsed (or hidden). Passed the last size\n     *      before collapse. May occur without any resize events.\n     *  - panelExpanded: When the panel gets expanded (or shown). Passed the initial size.\n     *      May occur without any resize events.\n     *\n     * @param {!DOMNode} element DOM element which should be made resizable. Must have an id attribute, for\n     *                          use as a preferences key.\n     * @param {!string} direction Direction of the resize action: one of the DIRECTION_* constants.\n     * @param {!string} position Which side of the element can be dragged: one of the POSITION_* constants\n     *                          (TOP/BOTTOM for vertical resizing or LEFT/RIGHT for horizontal).\n     * @param {?number} minSize Minimum size (width or height) of the element's outer dimensions, including\n     *                          border & padding. Defaults to DEFAULT_MIN_SIZE.\n     * @param {?boolean} collapsible Indicates the panel is collapsible on double click on the\n     *                          resizer. Defaults to false.\n     * @param {?string} forceLeft CSS selector indicating element whose 'left' should be locked to the\n     *                          the resizable element's size (useful for siblings laid out to the right of\n     *                          the element). Must lie in element's parent's subtree.\n     * @param {?boolean} createdByWorkspaceManager For internal use only\n     * @param {?boolean} usePercentages Maintain the size of the element as a percentage of its parent\n     *                          the default is to maintain the size of the element in pixels\n     * @param {?string} forceRight CSS selector indicating element whose 'right' should be locked to the\n     *                          the resizable element's size (useful for siblings laid out to the left of\n     *                          the element). Must lie in element's parent's subtree.\n     * @param {?boolean} _attachToParent Attaches the resizer element to parent of the element rather than\n     *                          to element itself. Attach the resizer to the parent *ONLY* if element has the\n     *                          same offset as parent otherwise the resizer will be incorrectly positioned.\n     *                          FOR INTERNAL USE ONLY\n     * @param {?number=} initialSize  Optional Initial size of panel in px. If not given, panel will use minsize\n     *      or current size.\n     */\n    function makeResizable(element, direction, position, minSize, collapsible,\n                           forceLeft, createdByWorkspaceManager, usePercentages,\n                           forceRight, _attachToParent, initialSize) {\n        var $resizer            = $('<div class=\"' + direction + '-resizer\"></div>'),\n            $element            = $(element),\n            $parent             = $element.parent(),\n            $resizableElement   = $($element.find(\".resizable-content:first\")[0]),\n            $body               = $(window.document.body),\n            elementID           = $element.attr(\"id\"),\n            elementPrefs        = PreferencesManager.getViewState(elementID) || {},\n            animationRequest    = null,\n            directionProperty   = direction === DIRECTION_HORIZONTAL ? \"clientX\" : \"clientY\",\n            directionIncrement  = (position === POSITION_TOP || position === POSITION_LEFT) ? 1 : -1,\n            parentSizeFunction  = direction === DIRECTION_HORIZONTAL ? $parent.innerWidth : $parent.innerHeight,\n\n            elementSizeFunction = function (newSize) {\n                if (!newSize) {\n                    // calling the function as a getter\n                    if (direction === DIRECTION_HORIZONTAL) {\n                        return this.width();\n                    }\n                    return this.height();\n\n                } else if (!usePercentages) {\n                    if (direction === DIRECTION_HORIZONTAL) {\n                        return this.width(newSize);\n                    }\n                    return this.height(newSize);\n\n                }\n                    // calling the function as a setter\n                var parentSize = parentSizeFunction.apply($parent),\n                    percentage,\n                    prop;\n\n                if (direction === DIRECTION_HORIZONTAL) {\n                    prop = \"width\";\n                } else {\n                    prop = \"height\";\n                }\n                percentage = newSize / parentSize;\n                this.css(prop, (percentage * 100) + \"%\");\n\n                return this; // chainable\n\n            },\n\n            resizerCSSPosition  = direction === DIRECTION_HORIZONTAL ? \"left\" : \"top\",\n            contentSizeFunction = direction === DIRECTION_HORIZONTAL ? $resizableElement.width : $resizableElement.height;\n\n        if (PreferencesManager.get(PREFS_PURE_CODE) &&\n                ($element.hasClass(\"bottom-panel\") || $element.hasClass(\"sidebar\"))) {\n            elementPrefs.visible = false;\n        }\n\n        if (!elementID) {\n            console.error(\"Resizable panels must have a DOM id to use as a preferences key:\", element);\n            return;\n        }\n        // Detect legacy cases where panels in the editor area are created without using WorkspaceManager APIs\n        if ($parent[0] && $parent.is(\".content\") && !createdByWorkspaceManager) {\n            console.error(\"Resizable panels within the editor area should be created via WorkspaceManager.createBottomPanel(). \\nElement:\", element);\n            return;\n        }\n\n        if (minSize === undefined) {\n            minSize = DEFAULT_MIN_SIZE;\n        }\n\n        collapsible = collapsible || false;\n\n        if (_attachToParent) {\n            $parent.prepend($resizer);\n        } else {\n            $element.prepend($resizer);\n        }\n        // Important so min/max sizes behave predictably\n        $element.css(\"box-sizing\", \"border-box\");\n\n        function adjustSibling(size) {\n            if (forceLeft !== undefined) {\n                $(forceLeft, $parent).css(\"left\", size);\n            } else if (forceRight !== undefined) {\n                $(forceRight, $parent).css(\"right\", size);\n            }\n        }\n\n        function resizeElement(elementSize, contentSize) {\n            elementSizeFunction.apply($element, [elementSize]);\n\n            if ($resizableElement.length) {\n                contentSizeFunction.apply($resizableElement, [contentSize]);\n            }\n        }\n\n        // If the resizer is positioned right or bottom of the panel, we need to listen to\n        // reposition it if the element size changes externally\n        function repositionResizer(elementSize) {\n            var resizerPosition = elementSize || 1;\n            if (position === POSITION_RIGHT || position === POSITION_BOTTOM) {\n                $resizer.css(resizerCSSPosition, resizerPosition);\n            }\n        }\n\n        $element.data(\"removeSizable\", function () {\n            $resizer.off(\".resizer\");\n\n            $element.removeData(\"show\");\n            $element.removeData(\"hide\");\n            $element.removeData(\"resyncSizer\");\n            $element.removeData(\"removeSizable\");\n\n            $resizer.remove();\n        });\n\n        $element.data(\"resyncSizer\", function () {\n            repositionResizer(elementSizeFunction.apply($element));\n        });\n\n        $element.data(\"show\", function () {\n            var elementOffset   = $element.offset(),\n                elementSize     = elementSizeFunction.apply($element) || elementPrefs.size,\n                contentSize     = contentSizeFunction.apply($resizableElement) || elementPrefs.contentSize;\n            if(initialSize){\n                elementSize = elementPrefs.size || initialSize;\n            }\n            if(elementSize<minSize){\n                elementSize = minSize;\n            }\n            if(contentSize<elementSize){\n                contentSize = elementSize;\n            }\n\n            // Resize the element before showing it again. If the panel was collapsed by dragging\n            // the resizer, the size of the element should be 0, so we restore size in preferences\n            resizeElement(elementSize, contentSize);\n\n            $element.show();\n            elementPrefs.visible = true;\n\n            if (collapsible) {\n                if (_attachToParent) {\n                    $parent.prepend($resizer);\n                } else {\n                    $element.prepend($resizer);\n                }\n                if (position === POSITION_TOP) {\n                    $resizer.css(resizerCSSPosition, \"\");\n                } else if (position === POSITION_RIGHT) {\n                    $resizer.css(resizerCSSPosition, elementOffset[resizerCSSPosition] + elementSize);\n                }\n            }\n\n            adjustSibling(elementSize);\n\n            $element.trigger(EVENT_PANEL_EXPANDED, [elementSize]);\n            elementPrefs.size = elementSize;\n            elementPrefs.contentSize = contentSize;\n            PreferencesManager.setViewState(elementID, elementPrefs, null, isResizing);\n        });\n\n        $element.data(\"hide\", function () {\n            var elementOffset   = $element.offset(),\n                elementSize     = elementSizeFunction.apply($element),\n                resizerSize     = elementSizeFunction.apply($resizer);\n\n            $element.hide();\n            elementPrefs.visible = false;\n            if (collapsible) {\n                $resizer.insertBefore($element);\n                if (position === POSITION_RIGHT) {\n                    $resizer.css(resizerCSSPosition, \"\");\n                } else if (position === POSITION_TOP) {\n                    $resizer.css(resizerCSSPosition, elementOffset[resizerCSSPosition] + elementSize - resizerSize);\n                }\n            }\n\n            adjustSibling(0);\n\n            $element.trigger(EVENT_PANEL_COLLAPSED, [elementSize]);\n            PreferencesManager.setViewState(elementID, elementPrefs, null, isResizing);\n        });\n\n\n        $resizer.on(\"mousedown.resizer\", function (e) {\n            var $resizeShield   = $(\"<div class='resizing-container \" + direction + \"-resizing' />\"),\n                startPosition   = e[directionProperty],\n                startSize       = $element.is(\":visible\") ? elementSizeFunction.apply($element) : 0,\n                newSize         = startSize,\n                previousSize    = startSize,\n                baseSize        = 0,\n                resizeStarted   = false;\n\n            isResizing = true;\n            $body.append($resizeShield);\n\n            if ($resizableElement.length) {\n                $element.children().not(\".horz-resizer, .vert-resizer, .resizable-content\").each(function (index, child) {\n                    if (direction === DIRECTION_HORIZONTAL) {\n                        baseSize += $(child).outerWidth();\n                    } else {\n                        baseSize += $(child).outerHeight();\n                    }\n                });\n            }\n\n            function doRedraw() {\n                // only run this if the mouse is down so we don't constantly loop even\n                // after we're done resizing.\n                if (!isResizing) {\n                    return;\n                }\n\n                // Check for real size changes to avoid unnecessary resizing and events\n                if (newSize !== previousSize) {\n                    previousSize = newSize;\n\n                    if ($element.is(\":visible\")) {\n                        if (newSize < 10) {\n                            toggle($element);\n                            elementSizeFunction.apply($element, [0]);\n                        } else {\n                            // Trigger resizeStarted just before the first successful resize update\n                            if (!resizeStarted) {\n                                resizeStarted = true;\n                                $element.trigger(EVENT_PANEL_RESIZE_START, newSize);\n                            }\n\n                            // Resize the main element to the new size. If there is a content element,\n                            // its size is the new size minus the size of the non-resizable elements\n                            resizeElement(newSize, (newSize - baseSize));\n                            adjustSibling(newSize);\n\n                            $element.trigger(EVENT_PANEL_RESIZE_UPDATE, [newSize]);\n                        }\n                    } else if (newSize > 10) {\n                        elementSizeFunction.apply($element, [newSize]);\n                        toggle($element);\n\n                        // Trigger resizeStarted after expanding the element if it was previously collapsed\n                        if (!resizeStarted) {\n                            resizeStarted = true;\n                            $element.trigger(EVENT_PANEL_RESIZE_START, newSize);\n                        }\n                    }\n                }\n\n                animationRequest = window.requestAnimationFrame(doRedraw);\n            }\n\n            function onMouseMove(e) {\n                // calculate newSize adding to startSize the difference\n                // between starting and current position, capped at minSize\n                newSize = Math.max(startSize + directionIncrement * (startPosition - e[directionProperty]), minSize);\n\n                // respect max size if one provided (e.g. by WorkspaceManager)\n                var maxSize = $element.data(\"maxsize\");\n                if (maxSize !== undefined) {\n                    // if provided as percentage size convert it to a pixel size\n                    if (_isPercentage(maxSize)) {\n                        maxSize = _percentageToPixels(maxSize, _sideBarMaxSize());\n                    }\n                    newSize = Math.min(newSize, maxSize);\n                }\n\n                e.preventDefault();\n\n                if (animationRequest === null) {\n                    animationRequest = window.requestAnimationFrame(doRedraw);\n                }\n            }\n\n            $(window.document).on(\"mousemove\", onMouseMove);\n\n            // If the element is marked as collapsible, check for double click\n            // to toggle the element visibility\n            if (collapsible) {\n                $resizeShield.on(\"mousedown\", function (e) {\n                    $(window.document).off(\"mousemove\", onMouseMove);\n                    $resizeShield.off(\"mousedown\");\n                    $resizeShield.remove();\n                    animationRequest = null;\n                    toggle($element);\n                });\n            }\n\n            function endResize(e) {\n                if (isResizing) {\n\n                    var elementSize\t= elementSizeFunction.apply($element);\n                    if ($element.is(\":visible\")) {\n                        elementPrefs.size = elementSize;\n                        if ($resizableElement.length) {\n                            elementPrefs.contentSize = contentSizeFunction.apply($resizableElement);\n                        }\n                        PreferencesManager.setViewState(elementID, elementPrefs);\n                        repositionResizer(elementSize);\n                    }\n\n                    isResizing = false;\n\n                    if (resizeStarted) {\n                        $element.trigger(EVENT_PANEL_RESIZE_END, [elementSize]);\n                    }\n\n                    // We wait 300ms to remove the resizer container to capture a mousedown\n                    // on the container that would account for double click\n                    window.setTimeout(function () {\n                        $(window.document).off(\"mousemove\", onMouseMove);\n                        $resizeShield.off(\"mousedown\");\n                        $resizeShield.remove();\n                        animationRequest = null;\n                    }, 300);\n                }\n            }\n\n            $(window.document).one(\"mouseup\", endResize);\n\n            e.preventDefault();\n        });\n\n        // Panel preferences initialization\n        if (elementPrefs) {\n\n            if (elementPrefs.size !== undefined) {\n                elementSizeFunction.apply($element, [elementPrefs.size]);\n            }\n\n            if (elementPrefs.contentSize !== undefined) {\n                contentSizeFunction.apply($resizableElement, [elementPrefs.contentSize]);\n            }\n\n            if (elementPrefs.visible !== undefined && !elementPrefs.visible) {\n                hide($element);\n            } else {\n                adjustSibling(elementSizeFunction.apply($element));\n                repositionResizer(elementSizeFunction.apply($element));\n            }\n        }\n    }\n\n    function updateResizeLimits() {\n        var sideBarMaxSize = _sideBarMaxSize(),\n            maxSize = $sideBar.data(\"maxsize\"),\n            width = false;\n\n        if (maxSize !== undefined && _isPercentage(maxSize)) {\n            sideBarMaxSize = _percentageToPixels(maxSize, sideBarMaxSize);\n        }\n\n        if ($sideBar.width() > sideBarMaxSize) {\n            // Adjust the sideBar's width in case it exceeds the window's width when resizing the window.\n            $sideBar.width(sideBarMaxSize);\n            resyncSizer($sideBar);\n            $(\".content\").css(\"left\", $sideBar.width());\n            $sideBar.trigger(EVENT_PANEL_RESIZE_START, $sideBar.width());\n            $sideBar.trigger(EVENT_PANEL_RESIZE_UPDATE, [$sideBar.width()]);\n            $sideBar.trigger(EVENT_PANEL_RESIZE_END, [$sideBar.width()]);\n        }\n    }\n\n    function onWindowResize(e) {\n        if ($sideBar.css(\"display\") === \"none\") {\n            return;\n        }\n\n        if (!isWindowResizing) {\n            isWindowResizing = true;\n\n            // We don't need any fancy debouncing here - we just need to react before the user can start\n            // resizing any panels at the new window size. So just listen for first mousemove once the\n            // window resize releases mouse capture.\n            $(window.document).one(\"mousemove\", function () {\n                isWindowResizing = false;\n                updateResizeLimits();\n            });\n        }\n    }\n\n    window.addEventListener(\"resize\", onWindowResize, true);\n\n    // Scan DOM for horz-resizable and vert-resizable classes and make them resizable\n    AppInit.htmlReady(function () {\n        var minSize = DEFAULT_MIN_SIZE;\n\n        $mainView = $(\".main-view\");\n        $sideBar = $(\"#sidebar\");\n\n        $(\".vert-resizable\").each(function (index, element) {\n\n            if ($(element).data().minsize !== undefined) {\n                minSize = $(element).data().minsize;\n            }\n\n            if ($(element).hasClass(\"top-resizer\")) {\n                makeResizable(element, DIRECTION_VERTICAL, POSITION_TOP, minSize, $(element).hasClass(\"collapsible\"));\n            }\n\n            //if ($(element).hasClass(\"bottom-resizer\")) {\n            //    makeResizable(element, DIRECTION_VERTICAL, POSITION_BOTTOM, DEFAULT_MIN_SIZE);\n            //}\n        });\n\n        $(\".horz-resizable\").each(function (index, element) {\n\n            if ($(element).data().minsize !== undefined) {\n                minSize = $(element).data().minsize;\n            }\n\n            //if ($(element).hasClass(\"left-resizer\")) {\n            //    makeResizable(element, DIRECTION_HORIZONTAL, POSITION_LEFT, DEFAULT_MIN_SIZE);\n            //}\n\n            if ($(element).hasClass(\"right-resizer\")) {\n                makeResizable(element, DIRECTION_HORIZONTAL, POSITION_RIGHT, minSize, $(element).hasClass(\"collapsible\"), $(element).data().forceleft);\n            }\n        });\n\n        // The main toolbar is only collapsible.\n        if ($(\"#main-toolbar\").hasClass(\"collapsible\") && PreferencesManager.get(PREFS_PURE_CODE)) {\n            ViewUtils.hideMainToolBar();\n        }\n    });\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    exports.makeResizable   = makeResizable;\n    exports.removeSizable   = removeSizable;\n    exports.resyncSizer     = resyncSizer;\n    exports.toggle          = toggle;\n    exports.show            = show;\n    exports.hide            = hide;\n    exports.isVisible       = isVisible;\n\n    //Resizer Constants\n    exports.DIRECTION_VERTICAL   = DIRECTION_VERTICAL;\n    exports.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;\n    exports.POSITION_TOP         = POSITION_TOP;\n    exports.POSITION_RIGHT       = POSITION_RIGHT;\n    exports.POSITION_BOTTOM      = POSITION_BOTTOM;\n    exports.POSITION_LEFT        = POSITION_LEFT;\n\n    // events\n    exports.EVENT_PANEL_COLLAPSED = EVENT_PANEL_COLLAPSED;\n    exports.EVENT_PANEL_EXPANDED = EVENT_PANEL_EXPANDED;\n    exports.EVENT_PANEL_RESIZE_START = EVENT_PANEL_RESIZE_START;\n    exports.EVENT_PANEL_RESIZE_UPDATE = EVENT_PANEL_RESIZE_UPDATE;\n    exports.EVENT_PANEL_RESIZE_END = EVENT_PANEL_RESIZE_END;\n});\n"],"file":"Resizer.js"}