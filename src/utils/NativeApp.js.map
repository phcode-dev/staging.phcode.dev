{"version":3,"sources":["utils/NativeApp.js"],"names":["define","require","exports","module","Async","FileSystemError","_browserErrToFileError","err","brackets","fs","ERR_NOT_FOUND","NOT_FOUND","UNKNOWN","liveBrowserOpenedPIDs","openLiveBrowser","url","enableRemoteDebugging","result","$","Deferred","app","onRun","pid","reject","undefined","push","resolve","promise","closeLiveBrowser","isNaN","i","indexOf","splice","closeAllLiveBrowsers","closeIDs","concat","doSequentially","openURLInDefaultBrowser"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,MAAkBH,QAAQ,eAC1BI,gBAAkBJ,QAAQ,8BAM9B,SAASK,uBAAuBC,KAC5B,OAAIA,MAAQC,SAASC,GAAGC,cACbL,gBAAgBM,UAIpBN,gBAAgBO,QAG3B,IAAIC,sBAAwB,GAQ5B,SAASC,gBAAgBC,IAAKC,uBAC1B,IAAIC,OAAS,IAAIC,EAAEC,SAcnB,OAZAX,SAASY,IAAIN,gBAAgBC,MAAOC,sBAAuB,SAASK,MAAMd,IAAKe,KACtEf,IAODU,OAAOM,OAAOjB,uBAAuBC,YALzBiB,IAARF,KACAT,sBAAsBY,KAAKH,KAE/BL,OAAOS,QAAQJ,QAMhBL,OAAOU,UAOlB,SAASC,iBAAiBN,KACtB,IAAIL,OAAS,IAAIC,EAAEC,SAiBnB,OAfIU,MAAMP,OACNA,IAAM,GAEVd,SAASY,IAAIQ,iBAAiB,SAAUrB,KACpC,GAAKA,IAODU,OAAOM,OAAOjB,uBAAuBC,UAP/B,CACN,IAAIuB,EAAIjB,sBAAsBkB,QAAQT,MAC3B,IAAPQ,GACAjB,sBAAsBmB,OAAOF,EAAG,GAEpCb,OAAOS,YAIZJ,KAEIL,OAAOU,UAQlB,SAASM,uBAEL,IAAIC,SAAWrB,sBAAsBsB,SACrC,OAAO/B,MAAMgC,eAAeF,SAAUN,kBAAkB,GAM5D,SAASS,wBAAwBtB,KAC7BP,SAASY,IAAIiB,wBAAwBtB,KAKzCb,QAAQY,gBAAkBA,gBAC1BZ,QAAQ0B,iBAAmBA,iBAC3B1B,QAAQ+B,qBAAuBA,qBAC/B/B,QAAQmC,wBAA0BA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var Async           = require(\"utils/Async\"),\n        FileSystemError = require(\"filesystem/FileSystemError\");\n\n    /**\n     * @private\n     * Map an fs error code to a FileError.\n     */\n    function _browserErrToFileError(err) {\n        if (err === brackets.fs.ERR_NOT_FOUND) {\n            return FileSystemError.NOT_FOUND;\n        }\n\n        // All other errors are mapped to the generic \"unknown\" error\n        return FileSystemError.UNKNOWN;\n    }\n\n    var liveBrowserOpenedPIDs = [];\n\n    /** openLiveBrowser\n     * Open the given URL in the user's system browser, optionally enabling debugging.\n     * @param {string} url The URL to open.\n     * @param {boolean=} enableRemoteDebugging Whether to turn on remote debugging. Default false.\n     * @return {$.Promise}\n     */\n    function openLiveBrowser(url, enableRemoteDebugging) {\n        var result = new $.Deferred();\n\n        brackets.app.openLiveBrowser(url, !!enableRemoteDebugging, function onRun(err, pid) {\n            if (!err) {\n                // Undefined ids never get removed from list, so don't push them on\n                if (pid !== undefined) {\n                    liveBrowserOpenedPIDs.push(pid);\n                }\n                result.resolve(pid);\n            } else {\n                result.reject(_browserErrToFileError(err));\n            }\n        });\n\n        return result.promise();\n    }\n\n    /** closeLiveBrowser\n     *\n     * @return {$.Promise}\n     */\n    function closeLiveBrowser(pid) {\n        var result = new $.Deferred();\n\n        if (isNaN(pid)) {\n            pid = 0;\n        }\n        brackets.app.closeLiveBrowser(function (err) {\n            if (!err) {\n                var i = liveBrowserOpenedPIDs.indexOf(pid);\n                if (i !== -1) {\n                    liveBrowserOpenedPIDs.splice(i, 1);\n                }\n                result.resolve();\n            } else {\n                result.reject(_browserErrToFileError(err));\n            }\n        }, pid);\n\n        return result.promise();\n    }\n\n    /** closeAllLiveBrowsers\n     * Closes all the browsers that were tracked on open\n     * TODO: does not seem to work on Windows\n     * @return {$.Promise}\n     */\n    function closeAllLiveBrowsers() {\n        //make a copy incase the array is edited as we iterate\n        var closeIDs = liveBrowserOpenedPIDs.concat();\n        return Async.doSequentially(closeIDs, closeLiveBrowser, false);\n    }\n\n    /**\n     * Opens a URL in the system default browser\n     */\n    function openURLInDefaultBrowser(url) {\n        brackets.app.openURLInDefaultBrowser(url);\n    }\n\n\n    // Define public API\n    exports.openLiveBrowser = openLiveBrowser;\n    exports.closeLiveBrowser = closeLiveBrowser;\n    exports.closeAllLiveBrowsers = closeAllLiveBrowsers;\n    exports.openURLInDefaultBrowser = openURLInDefaultBrowser;\n});\n"],"file":"NativeApp.js"}