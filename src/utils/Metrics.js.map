{"version":3,"sources":["utils/Metrics.js"],"names":["define","require","exports","module","MAX_AUDIT_ENTRIES","ONE_DAY","initDone","disabled","loggedDataForAudit","Map","isFirstUseDay","_setFirstDayFlag","firstUseDay","localStorage","getItem","Date","parseInt","setItem","getTime","dayAfterFirstUse","setUTCDate","getUTCDate","today","setInterval","EVENT_TYPE","PLATFORM","PROJECT","THEMES","EXTENSIONS","UI","UI_MENU","UI_DIALOG","UI_BOTTOM_PANEL","UI_SIDE_PANEL","LIVE_PREVIEW","KEYBOARD","CODE_HINTS","EDITOR","QUICK_VIEW","SEARCH","SHARING","PERFORMANCE","STORAGE","NEW_PROJECT","ERROR","USER","_createAnalyticsShims","window","analytics","_initData","loadStartTime","event","push","arguments","dataLayer","gtag","_initGoogleAnalytics","script","document","createElement","type","async","onload","brackets","config","googleAnalyticsID","page_title","page_path","page_location","location","origin","src","getElementsByTagName","appendChild","_initMixPanelAnalytics","mixpanel","init","mixPanelID","debug","debugMode","console","error","_initCoreAnalytics","initAnalyticsSession","coreAnalyticsID","coreAnalyticsAppName","testEnvironment","ignoredGAEvents","_sendToGoogleAnalytics","category","action","label","count","eventAct","includes","event_category","event_label","value","_sendToMixPanel","track","_sendToCoreAnalytics","AUDIT_TYPE_COUNT","AUDIT_TYPE_VALUE","_logEventForAudit","eventType","eventCategory","eventSubCategory","val","defaultVal","sum","key","newVal","get","set","size","NUM_ENTRIES_TO_DELETE","keys","Array","from","slice","forEach","k","delete","_decorateRepeatUserEvent","Phoenix","isTestWindow","countEvent","valueEvent","setDisabled","shouldDisable","getLoggedDataForAudit","clearAuditData","clear"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2015 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global gtag, analytics, mixpanel*/\n\n// @INCLUDE_IN_API_DOCS\n/**\n * The Metrics API can be used to send analytics data to track feature usage in accordance with users privacy settings.\n *\n *`Status: Internal - Not to be used by third party extensions.`\n *\n * ### Import\n * ```js\n * // usage within core:\n * const Metrics = require(\"utils/Metrics\");\n *\n * // usage within default extensions:\n * const Metrics = brackets.getModule(\"utils/Metrics\");\n * ```\n *\n * @module utils/Metrics\n */\ndefine(function (require, exports, module) {\n    const MAX_AUDIT_ENTRIES = 3000,\n        ONE_DAY = 24 * 60* 60 * 1000;\n    let initDone = false,\n        disabled = false,\n        loggedDataForAudit = new Map();\n\n    let isFirstUseDay;\n    function _setFirstDayFlag() {\n        let firstUseDay= localStorage.getItem(\"healthData.firstUseDay\");\n        if(!firstUseDay){\n            firstUseDay = new Date();\n            localStorage.setItem(\"healthData.firstUseDay\", `${firstUseDay.getTime()}`);\n        } else {\n            firstUseDay = new Date(parseInt(firstUseDay));\n        }\n        let dayAfterFirstUse = new Date(firstUseDay);\n        dayAfterFirstUse.setUTCDate(firstUseDay.getUTCDate() + 1);\n        let today = new Date();\n        isFirstUseDay = today < dayAfterFirstUse;\n    }\n    _setFirstDayFlag();\n    setInterval(_setFirstDayFlag, ONE_DAY);\n\n    /**\n     * This section outlines the properties and methods available in this module\n     * @name API\n     */\n\n    /**\n     * The Type of events that can be specified as an `eventType` in the API calls.\n     *\n     * ### Properties\n     * `PLATFORM`, `PROJECT`, `THEMES`, `EXTENSIONS`, `EXTENSIONS`, `UI`, `UI_DIALOG`, `UI_BOTTOM_PANEL`,\n     * `UI_SIDE_PANEL`, `LIVE_PREVIEW`, `CODE_HINTS`, `EDITOR`, `SEARCH`, `SHARING`, `PERFORMANCE`, `NEW_PROJECT`\n     *\n     * @typedef EVENT_TYPE\n     * @type {Object}\n     */\n    const EVENT_TYPE = {\n        PLATFORM: \"phoenix.platform\",\n        PROJECT: \"project\",\n        THEMES: \"themes\",\n        EXTENSIONS: \"extensions\",\n        UI: \"phoenix.UI\",\n        UI_MENU: \"phoenix.UIMenu\",\n        UI_DIALOG: \"ui-dialog\",\n        UI_BOTTOM_PANEL: \"ui-bottomPanel\",\n        UI_SIDE_PANEL: \"ui-sidePanel\",\n        LIVE_PREVIEW: \"live-preview\",\n        KEYBOARD: \"keyboard\",\n        CODE_HINTS: \"code-hints\",\n        EDITOR: \"editor\",\n        QUICK_VIEW: \"quickView\",\n        SEARCH: \"search\",\n        SHARING: \"sharing\",\n        PERFORMANCE: \"performance\",\n        STORAGE: \"storage\",\n        NEW_PROJECT: \"new-project\",\n        ERROR: \"error\",\n        USER: \"user\"\n    };\n\n    /**\n     * This is so that phoenix can starting as soon as the shims are inited. The events logged before init() will be\n     * placed into a holding queue by ga and core analytics. When the lib is loaded and inited,\n     * the events will be processed without any loss.\n     * @private\n     */\n    function _createAnalyticsShims() {\n        // for core analytics\n        if(!window.analytics){ window.analytics = {\n            _initData: [], loadStartTime: new Date().getTime(),\n            event: function (){window.analytics._initData.push(arguments);}\n        };}\n        // for google analytics\n        window.dataLayer = window.dataLayer || [];\n        window.gtag = function(){window.dataLayer.push(arguments);};\n    }\n\n    _createAnalyticsShims();\n\n    function _initGoogleAnalytics() {\n        // Load google analytics scripts\n        let script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.onload = function(){\n            gtag('js', new Date());\n\n            gtag('config', brackets.config.googleAnalyticsID, {\n                'page_title': 'Phoenix editor',\n                'page_path': '/index.html',\n                'page_location': window.location.origin\n            });\n        };\n        script.src = 'https://www.googletagmanager.com/gtag/js?' + brackets.config.googleAnalyticsID;\n        document.getElementsByTagName('head')[0].appendChild(script);\n    }\n\n    function _initMixPanelAnalytics() {\n        // evaluating mixpanel instead of Google Analytics\n        // Enabling the debug mode flag is useful during implementation,\n        // but it's recommended you remove it for production\n        if(!window.mixpanel){\n            console.error(\"Mixpanel not found. MixPanel Analytics will not be initialized.\");\n            return;\n        }\n        mixpanel.init(brackets.config.mixPanelID, {debug: window.debugMode});\n    }\n\n    function _initCoreAnalytics() {\n        // Load core analytics scripts\n        let script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        window.analytics.debugMode = window.debugMode;\n        script.onload = function(){\n            // replace `your_analytics_account_ID` and `appName` below with your values\n            window.initAnalyticsSession( brackets.config.coreAnalyticsID,\n                brackets.config.coreAnalyticsAppName);\n            window.analytics.event(\"core-analytics\", \"client-lib\", \"loadTime\", 1,\n                (new Date().getTime())- window.analytics.loadStartTime);\n        };\n        script.src = 'https://unpkg.com/@aicore/core-analytics-client-lib/dist/analytics.min.js';\n        document.getElementsByTagName('head')[0].appendChild(script);\n    }\n\n    /**\n     * We are transitioning to our own analytics instead of google as we breached the free user threshold of google\n     * and paid plans for GA starts at 100,000 USD.\n     * @private\n     */\n    function init(){\n        if(initDone || window.testEnvironment){\n            return;\n        }\n        _initGoogleAnalytics();\n        _initMixPanelAnalytics();\n        _initCoreAnalytics();\n        initDone = true;\n    }\n\n    // some events generate too many ga events that ga can't handle. ignore them.\n    const ignoredGAEvents = ['instantSearch'];\n    function _sendToGoogleAnalytics(category, action, label, count) {\n        // https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n        // TODO, see if we are sending too many events to ga, unlike core analytics, GA has a limit of\n        //  1 Million events per month for free plan.\n        if(disabled || window.testEnvironment){\n            return;\n        }\n        category = category || \"category\";\n        action = action || \"action\";\n        if(!label){\n            label = action;\n        }\n        if(!count){\n            count = 1;\n        }\n        let eventAct = `${category}.${action}.${label}`;\n        if(ignoredGAEvents.includes(action)){\n            return;\n        }\n        gtag('event', eventAct, {\n            'event_category': category,\n            'event_label': label,\n            'value': count\n        });\n    }\n\n    function _sendToMixPanel(category, action, label, count, value) {\n        if(disabled || window.testEnvironment){\n            return;\n        }\n        category = category || \"category\";\n        action = action || \"action\";\n        if(!label){\n            label = action;\n        }\n        count = count || 1;\n        value = value || 1;\n        if(!window.mixpanel || !mixpanel.track) {\n            return;\n        }\n        mixpanel.track(category, {\n            action, label, count, value\n        });\n    }\n\n    function _sendToCoreAnalytics(category, action, label, count, value) {\n        // https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n        if(disabled || window.testEnvironment){\n            return;\n        }\n        category = category || \"category\";\n        action = action || \"action\";\n        if(!label){\n            label = action;\n        }\n        if(!value){\n            value = 1;\n        }\n        analytics.event(category, action, label, count, value);\n    }\n\n    const AUDIT_TYPE_COUNT = \"count\",\n        AUDIT_TYPE_VALUE = \"val\";\n    function _logEventForAudit(eventType, eventCategory, eventSubCategory, val, type) {\n        let defaultVal = {\n            eventType: type,\n            sum: 0,\n            count: 0\n        };\n        let key = `${eventType}.${eventCategory}.${eventSubCategory}`;\n        let newVal = loggedDataForAudit.get(key) || defaultVal;\n        newVal.count = newVal.count + 1;\n        newVal.sum = newVal.sum + val;\n        loggedDataForAudit.set(key, newVal);\n        if(loggedDataForAudit.size >= MAX_AUDIT_ENTRIES){\n            const NUM_ENTRIES_TO_DELETE = 1000;\n            let keys = Array.from(loggedDataForAudit.keys()).slice(0, NUM_ENTRIES_TO_DELETE);\n            keys.forEach(k => loggedDataForAudit.delete(k));\n        }\n    }\n\n    function _decorateRepeatUserEvent(eventType) {\n        if(isFirstUseDay || window.Phoenix.isTestWindow){\n            return eventType;\n        }\n        return `R.${eventType}`;\n    }\n\n    /**\n     * log a numeric count >=0\n     * @example <caption>To log that user clicked searchButton 5 times:</caption>\n     * Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"searchButton\", \"click\");\n     * Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"searchButton\", \"click\", 5);\n     *\n     * @param {EVENT_TYPE|string} eventType The kind of Event Type that needs to be logged- should be a js var compatible string.\n     * Some standard event types are available as `EVENT_TYPE`.\n     * @param {string} eventCategory The kind of Event Category that\n     * needs to be logged- should be a js var compatible string\n     * @param {string} eventSubCategory The kind of Event Sub Category that\n     * needs to be logged- should be a js var compatible string\n     * @param {number} [count=1] >=0 , optional, if not set defaults to 1\n     * @type {function}\n     */\n    function countEvent(eventType, eventCategory, eventSubCategory, count= 1) {\n        eventType= _decorateRepeatUserEvent(eventType);\n        _logEventForAudit(eventType, eventCategory, eventSubCategory, count, AUDIT_TYPE_COUNT);\n        _sendToGoogleAnalytics(eventType, eventCategory, eventSubCategory, count);\n        _sendToMixPanel(eventType, eventCategory, eventSubCategory, count);\n        _sendToCoreAnalytics(eventType, eventCategory, eventSubCategory, count);\n    }\n\n    /**\n     * log a numeric value (number).\n     * @example <caption>To log that startup time is 200ms:</caption>\n     * Metrics.valueEvent(Metrics.EVENT_TYPE.PERFORMANCE, \"startupTime\", \"ms\", 200);\n     *\n     * @param {EVENT_TYPE|string} eventType The kind of Event Type that needs to be logged- should be a js var compatible string.\n     * some standard event types are available as `EVENT_TYPE`.\n     * @param {string} eventCategory The kind of Event Category that\n     * needs to be logged- should be a js var compatible string\n     * @param {string} eventSubCategory The kind of Event Sub Category that\n     * needs to be logged- should be a js var compatible string\n     * @param {number} value\n     * @type {function}\n     */\n    function valueEvent(eventType, eventCategory, eventSubCategory, value) {\n        eventType= _decorateRepeatUserEvent(eventType);\n        _logEventForAudit(eventType, eventCategory, eventSubCategory, value, AUDIT_TYPE_VALUE);\n        _sendToGoogleAnalytics(eventType, eventCategory, eventSubCategory, value);\n        _sendToMixPanel(eventType, eventCategory, eventSubCategory, 1, value);\n        _sendToCoreAnalytics(eventType, eventCategory, eventSubCategory, 1, value);\n    }\n\n    function setDisabled(shouldDisable) {\n        disabled = shouldDisable;\n    }\n\n    function getLoggedDataForAudit() {\n        return loggedDataForAudit;\n    }\n\n    function clearAuditData() {\n        loggedDataForAudit.clear();\n    }\n\n    // Define public API\n    exports.init               = init;\n    exports.setDisabled        = setDisabled;\n    exports.getLoggedDataForAudit      = getLoggedDataForAudit;\n    exports.clearAuditData     = clearAuditData;\n    exports.countEvent         = countEvent;\n    exports.valueEvent         = valueEvent;\n    exports.EVENT_TYPE = EVENT_TYPE;\n    exports.AUDIT_TYPE_COUNT = AUDIT_TYPE_COUNT;\n    exports.AUDIT_TYPE_VALUE = AUDIT_TYPE_VALUE;\n});\n"],"file":"Metrics.js"}