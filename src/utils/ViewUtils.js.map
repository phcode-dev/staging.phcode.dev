{"version":3,"sources":["utils/ViewUtils.js"],"names":["define","require","exports","module","_","LanguageManager","SCROLL_SHADOW_HEIGHT","_resizeHandlers","_updateScrollerShadow","$displayElement","$scrollElement","$shadowTop","$shadowBottom","isPositionFixed","offsetTop","scrollElement","get","scrollTop","topShadowOffset","Math","min","displayElementWidth","width","css","offset","top","clientHeight","outerHeight","scrollHeight","bottomShadowOffset","getOrCreateShadow","position","$findShadow","find","length","$","window","document","createElement","addClass","append","addScrollerShadow","displayElement","showBottom","doUpdate","off","on","removeScrollerShadow","remove","toggleClass","$domElement","className","removeClass","sidebarList","$scrollerElement","selectedClassName","leafClassName","$listElement","$selectionMarker","$selectionExtension","$sidebar","showExtension","prepend","updateSelectionExtension","selectionMarkerHeight","height","selectionMarkerOffset","scrollerOffset","selectionExtensionHeight","scrollerTop","scrollerBottom","selectionExtensionTop","outerWidth","selectionExtensionClipOffsetYBy","floor","selectionExtensionBottom","max","hideSelectionMarker","event","updateSelectionMarker","reveal","$listItem","closest","hasClass","hide","selectionMarkerTop","show","scrollerElement","scrollerHeight","selectionMarkerBottom","currentScrollBottom","scrollIntoView","push","_handleResize","forEach","f","apply","getElementClipSize","$view","elementRect","delta","clip","right","bottom","left","viewOffset","scrollElementIntoView","$element","scrollHorizontal","elementOffset","scrollLeft","getFileEntryDisplay","entry","name","ext","getCompoundFileExtension","i","lastIndexOf","escape","substring","getDirNamesForDuplicateFiles","files","map","filePaths","displayPaths","file","index","fp","fullPath","split","pop","processMap","didSomething","arr","key","repeat","traverseViewArray","viewArray","startIndex","direction","abs","console","error","toString","hideMainToolBar","each","element","showMainToolBar","resize"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var _                   = require(\"thirdparty/lodash\"),\n        LanguageManager     = require(\"language/LanguageManager\");\n\n    var SCROLL_SHADOW_HEIGHT = 5;\n\n    /**\n     * @private\n     */\n    var _resizeHandlers = [];\n\n    /**\n     * Positions shadow background elements to indicate vertical scrolling.\n     * @param {!DOMElement} $displayElement the DOMElement that displays the shadow\n     * @param {!Object} $scrollElement the object that is scrolled\n     * @param {!DOMElement} $shadowTop div .scroller-shadow.top\n     * @param {!DOMElement} $shadowBottom div .scroller-shadow.bottom\n     * @param {boolean} isPositionFixed When using absolute position, top remains at 0.\n     */\n    function _updateScrollerShadow($displayElement, $scrollElement, $shadowTop, $shadowBottom, isPositionFixed) {\n        var offsetTop           = 0,\n            scrollElement       = $scrollElement.get(0),\n            scrollTop           = scrollElement.scrollTop,\n            topShadowOffset     = Math.min(scrollTop - SCROLL_SHADOW_HEIGHT, 0),\n            displayElementWidth = $displayElement.width();\n\n        if ($shadowTop) {\n            $shadowTop.css(\"background-position\", \"0px \" + topShadowOffset + \"px\");\n\n            if (isPositionFixed) {\n                offsetTop = $displayElement.offset().top;\n                $shadowTop.css(\"top\", offsetTop);\n            }\n\n            if (isPositionFixed) {\n                $shadowTop.css(\"width\", displayElementWidth);\n            }\n        }\n\n        if ($shadowBottom) {\n            var clientHeight        = scrollElement.clientHeight,\n                outerHeight         = $displayElement.outerHeight(),\n                scrollHeight        = scrollElement.scrollHeight,\n                bottomShadowOffset  = SCROLL_SHADOW_HEIGHT; // outside of shadow div viewport\n\n            if (scrollHeight > clientHeight) {\n                bottomShadowOffset -= Math.min(SCROLL_SHADOW_HEIGHT, (scrollHeight - (scrollTop + clientHeight)));\n            }\n\n            $shadowBottom.css(\"background-position\", \"0px \" + bottomShadowOffset + \"px\");\n            $shadowBottom.css(\"top\", offsetTop + outerHeight - SCROLL_SHADOW_HEIGHT);\n            $shadowBottom.css(\"width\", displayElementWidth);\n        }\n    }\n\n    function getOrCreateShadow($displayElement, position, isPositionFixed) {\n        var $findShadow = $displayElement.find(\".scroller-shadow.\" + position);\n\n        if ($findShadow.length === 0) {\n            $findShadow = $(window.document.createElement(\"div\")).addClass(\"scroller-shadow \" + position);\n            $displayElement.append($findShadow);\n        }\n\n        if (!isPositionFixed) {\n            // position is fixed by default\n            $findShadow.css(\"position\", \"absolute\");\n            $findShadow.css(position, \"0\");\n        }\n\n        return $findShadow;\n    }\n\n    /**\n     * Installs event handlers for updatng shadow background elements to indicate vertical scrolling.\n     * @param {!DOMElement} displayElement the DOMElement that displays the shadow. Must fire\n     *  \"contentChanged\" events when the element is resized or repositioned.\n     * @param {?Object} scrollElement the object that is scrolled. Must fire \"scroll\" events\n     *  when the element is scrolled. If null, the displayElement is used.\n     * @param {?boolean} showBottom optionally show the bottom shadow\n     */\n    function addScrollerShadow(displayElement, scrollElement, showBottom) {\n        // use fixed positioning when the display and scroll elements are the same\n        var isPositionFixed = false;\n\n        if (!scrollElement) {\n            scrollElement = displayElement;\n            isPositionFixed = true;\n        }\n\n        // update shadows when the scrolling element is scrolled\n        var $displayElement = $(displayElement),\n            $scrollElement = $(scrollElement);\n\n        var $shadowTop = getOrCreateShadow($displayElement, \"top\", isPositionFixed);\n        var $shadowBottom = (showBottom) ? getOrCreateShadow($displayElement, \"bottom\", isPositionFixed) : null;\n\n        var doUpdate = function () {\n            _updateScrollerShadow($displayElement, $scrollElement, $shadowTop, $shadowBottom, isPositionFixed);\n        };\n\n        // remove any previously installed listeners on this node\n        $scrollElement.off(\"scroll.scroller-shadow\");\n        $displayElement.off(\"contentChanged.scroller-shadow\");\n\n        // add new ones\n        $scrollElement.on(\"scroll.scroller-shadow\", doUpdate);\n        $displayElement.on(\"contentChanged.scroller-shadow\", doUpdate);\n\n        // update immediately\n        doUpdate();\n    }\n\n    /**\n     * Remove scroller-shadow effect.\n     * @param {!DOMElement} displayElement the DOMElement that displays the shadow\n     * @param {?Object} scrollElement the object that is scrolled\n     */\n    function removeScrollerShadow(displayElement, scrollElement) {\n        if (!scrollElement) {\n            scrollElement = displayElement;\n        }\n\n        var $displayElement = $(displayElement),\n            $scrollElement = $(scrollElement);\n\n        // remove scrollerShadow elements from DOM\n        $displayElement.find(\".scroller-shadow.top\").remove();\n        $displayElement.find(\".scroller-shadow.bottom\").remove();\n\n        // remove event handlers\n        $scrollElement.off(\"scroll.scroller-shadow\");\n        $displayElement.off(\"contentChanged.scroller-shadow\");\n    }\n\n    /**\n     * Utility function to replace jQuery.toggleClass when used with the second argument, which needs to be a true boolean for jQuery\n     * @param {!jQueryObject} $domElement The jQueryObject to toggle the Class on\n     * @param {!string} className Class name or names (separated by spaces) to toggle\n     * @param {!boolean} addClass A truthy value to add the class and a falsy value to remove the class\n     */\n    function toggleClass($domElement, className, addClass) {\n        if (addClass) {\n            $domElement.addClass(className);\n        } else {\n            $domElement.removeClass(className);\n        }\n    }\n\n    /**\n     * Within a scrolling DOMElement, creates and positions a styled selection\n     * div to align a single selected list item from a ul list element.\n     *\n     * Assumptions:\n     * - scrollerElement is a child of the #sidebar div\n     * - ul list element fires a \"selectionChanged\" event after the\n     *   selectedClassName is assigned to a new list item\n     *\n     * @param {!DOMElement} scrollElement A DOMElement containing a ul list element\n     * @param {!string} selectedClassName A CSS class name on at most one list item in the contained list\n     */\n    function sidebarList($scrollerElement, selectedClassName, leafClassName) {\n        var $listElement = $scrollerElement.find(\"ul\"),\n            $selectionMarker,\n            $selectionExtension,\n            $sidebar = $(\"#sidebar\"),\n            showExtension = true;\n\n        // build selectionMarker and position absolute within the scroller\n        $selectionMarker = $(window.document.createElement(\"div\")).addClass(\"sidebar-selection\");\n        $scrollerElement.prepend($selectionMarker);\n\n        // enable scrolling\n        $scrollerElement.css(\"overflow\", \"auto\");\n\n        // use relative postioning for clipping the selectionMarker within the scrollElement\n        $scrollerElement.css(\"position\", \"relative\");\n\n        // build selectionExtension and position fixed to the window\n        $selectionExtension = $(window.document.createElement(\"div\")).addClass(\"sidebar-selection-extension\");\n\n        $scrollerElement.append($selectionExtension);\n\n        selectedClassName = \".\" + (selectedClassName || \"selected\");\n\n        var updateSelectionExtension = function () {\n            var selectionMarkerHeight = $selectionMarker.height(),\n                selectionMarkerOffset = $selectionMarker.offset(),  // offset relative to *document*\n                scrollerOffset = $scrollerElement.offset(),\n                selectionExtensionHeight = $selectionExtension.outerHeight(),\n                scrollerTop = scrollerOffset.top,\n                scrollerBottom = scrollerTop + $scrollerElement.outerHeight(),\n                selectionExtensionTop = selectionMarkerOffset.top;\n\n            $selectionExtension.css(\"top\", selectionExtensionTop);\n            $selectionExtension.css(\"left\", $sidebar.width() - $selectionExtension.outerWidth());\n            toggleClass($selectionExtension, \"selectionExtension-visible\", showExtension);\n\n            var selectionExtensionClipOffsetYBy = Math.floor((selectionMarkerHeight - selectionExtensionHeight) / 2),\n                selectionExtensionBottom = selectionExtensionTop + selectionExtensionHeight + selectionExtensionClipOffsetYBy;\n\n            if (selectionExtensionTop < scrollerTop || selectionExtensionBottom > scrollerBottom) {\n                $selectionExtension.css(\"clip\", \"rect(\" + Math.max(scrollerTop - selectionExtensionTop - selectionExtensionClipOffsetYBy, 0) + \"px, auto, \" +\n                                           (selectionExtensionHeight - Math.max(selectionExtensionBottom - scrollerBottom, 0)) + \"px, auto)\");\n            } else {\n                $selectionExtension.css(\"clip\", \"\");\n            }\n        };\n\n        var hideSelectionMarker = function (event) {\n            $selectionExtension.addClass(\"forced-hidden\");\n            $selectionMarker.addClass(\"forced-hidden\");\n        };\n\n        var updateSelectionMarker = function (event, reveal) {\n            // find the selected list item\n            var $listItem = $listElement.find(selectedClassName).closest(\"li\");\n\n            if (leafClassName) {\n                showExtension = $listItem.hasClass(leafClassName);\n            }\n\n            $selectionExtension.removeClass(\"forced-hidden\");\n            $selectionMarker.removeClass(\"forced-hidden\");\n\n            // always hide selection visuals first to force layout (issue #719)\n            $selectionExtension.hide();\n            $selectionMarker.hide();\n\n            if ($listItem.length === 1) {\n                // list item position is relative to scroller\n                var selectionMarkerTop = $listItem.offset().top - $scrollerElement.offset().top + $scrollerElement.get(0).scrollTop;\n\n                // move the selectionMarker position to align with the list item\n                $selectionMarker.css(\"top\", selectionMarkerTop);\n                $selectionMarker.show();\n\n                updateSelectionExtension();\n                $selectionExtension.show();\n\n                // fully scroll to the selectionMarker if it's not initially in the viewport\n                var scrollerElement = $scrollerElement.get(0),\n                    scrollerHeight = scrollerElement.clientHeight,\n                    selectionMarkerHeight = $selectionMarker.height(),\n                    selectionMarkerBottom = selectionMarkerTop + selectionMarkerHeight,\n                    currentScrollBottom = scrollerElement.scrollTop + scrollerHeight;\n\n                // update scrollTop to reveal the selected list item\n                if (reveal) {\n                    if (selectionMarkerTop >= currentScrollBottom) {\n                        $listItem.get(0).scrollIntoView(false);\n                    } else if (selectionMarkerBottom <= scrollerElement.scrollTop) {\n                        $listItem.get(0).scrollIntoView(true);\n                    }\n                }\n            }\n        };\n\n        $listElement.on(\"selectionChanged\", updateSelectionMarker);\n        $scrollerElement.on(\"scroll\", updateSelectionExtension);\n        $scrollerElement.on(\"selectionRedraw\", updateSelectionExtension);\n        $scrollerElement.on(\"selectionHide\", hideSelectionMarker);\n\n        // update immediately\n        updateSelectionMarker();\n\n        // update clipping when the window resizes\n        _resizeHandlers.push(updateSelectionExtension);\n    }\n\n    /**\n     * @private\n     */\n    function _handleResize() {\n        _resizeHandlers.forEach(function (f) {\n            f.apply();\n        });\n    }\n\n    /**\n     * Determine how much of an element rect is clipped in view.\n     *\n     * @param {!DOMElement} $view - A jQuery scrolling container\n     * @param {!{top: number, left: number, height: number, width: number}}\n     *          elementRect - rectangle of element's default position/size\n     * @return {{top: number, right: number, bottom: number, left: number}}\n     *          amount element rect is clipped in each direction\n     */\n    function getElementClipSize($view, elementRect) {\n        var delta,\n            clip = { top: 0, right: 0, bottom: 0, left: 0 },\n            viewOffset = $view.offset() || { top: 0, left: 0};\n\n        // Check if element extends below viewport\n        delta = (elementRect.top + elementRect.height) - (viewOffset.top + $view.height());\n        if (delta > 0) {\n            clip.bottom = delta;\n        }\n\n        // Check if element extends above viewport\n        delta = viewOffset.top - elementRect.top;\n        if (delta > 0) {\n            clip.top = delta;\n        }\n\n        // Check if element extends to the left of viewport\n        delta = viewOffset.left - elementRect.left;\n        if (delta > 0) {\n            clip.left = delta;\n        }\n\n        // Check if element extends to the right of viewport\n        delta = (elementRect.left + elementRect.width) - (viewOffset.left + $view.width());\n        if (delta > 0) {\n            clip.right = delta;\n        }\n\n        return clip;\n    }\n\n    /**\n     * Within a scrolling DOMElement, if necessary, scroll element into viewport.\n     *\n     * To Perform the minimum amount of scrolling necessary, cases should be handled as follows:\n     * - element already completely in view : no scrolling\n     * - element above    viewport          : scroll view so element is at top\n     * - element left of  viewport          : scroll view so element is at left\n     * - element below    viewport          : scroll view so element is at bottom\n     * - element right of viewport          : scroll view so element is at right\n     *\n     * Assumptions:\n     * - $view is a scrolling container\n     *\n     * @param {!DOMElement} $view - A jQuery scrolling container\n     * @param {!DOMElement} $element - A jQuery element\n     * @param {?boolean} scrollHorizontal - whether to also scroll horizontally\n     */\n    function scrollElementIntoView($view, $element, scrollHorizontal) {\n        var elementOffset = $element.offset();\n\n        // scroll minimum amount\n        var elementRect = {\n                top: elementOffset.top,\n                left: elementOffset.left,\n                height: $element.height(),\n                width: $element.width()\n            },\n            clip = getElementClipSize($view, elementRect);\n\n        if (clip.bottom > 0) {\n            // below viewport\n            $view.scrollTop($view.scrollTop() + clip.bottom);\n        } else if (clip.top > 0) {\n            // above viewport\n            $view.scrollTop($view.scrollTop() - clip.top);\n        }\n\n        if (scrollHorizontal) {\n            if (clip.left > 0) {\n                $view.scrollLeft($view.scrollLeft() - clip.left);\n            } else if (clip.right > 0) {\n                $view.scrollLeft($view.scrollLeft() + clip.right);\n            }\n        }\n    }\n\n    /**\n     * HTML formats a file entry name  for display in the sidebar.\n     * @param {!File} entry File entry to display\n     * @return {string} HTML formatted string\n     */\n    function getFileEntryDisplay(entry) {\n        var name = entry.name,\n            ext = LanguageManager.getCompoundFileExtension(name),\n            i = name.lastIndexOf(\".\" + ext);\n\n        if (i > 0) {\n            // Escape all HTML-sensitive characters in filename.\n            name = _.escape(name.substring(0, i)) + \"<span class='extension'>\" + _.escape(name.substring(i)) + \"</span>\";\n        } else {\n            name = _.escape(name);\n        }\n\n        return name;\n    }\n\n    /**\n     * Determine the minimum directory path to distinguish duplicate file names\n     * for each file in list.\n     *\n     * @param {Array.<File>} files - list of Files with the same filename\n     * @return {Array.<string>} directory paths to match list of files\n     */\n    function getDirNamesForDuplicateFiles(files) {\n        // Must have at least two files in list for this to make sense\n        if (files.length <= 1) {\n            return [];\n        }\n\n        // First collect paths from the list of files and fill map with them\n        var map = {}, filePaths = [], displayPaths = [];\n        files.forEach(function (file, index) {\n            var fp = file.fullPath.split(\"/\");\n            fp.pop(); // Remove the filename itself\n            displayPaths[index] = fp.pop();\n            filePaths[index] = fp;\n\n            if (!map[displayPaths[index]]) {\n                map[displayPaths[index]] = [index];\n            } else {\n                map[displayPaths[index]].push(index);\n            }\n        });\n\n        // This function is used to loop through map and resolve duplicate names\n        var processMap = function (map) {\n            var didSomething = false;\n            _.forEach(map, function (arr, key) {\n                // length > 1 means we have duplicates that need to be resolved\n                if (arr.length > 1) {\n                    arr.forEach(function (index) {\n                        if (filePaths[index].length !== 0) {\n                            displayPaths[index] = filePaths[index].pop() + \"/\" + displayPaths[index];\n                            didSomething = true;\n\n                            if (!map[displayPaths[index]]) {\n                                map[displayPaths[index]] = [index];\n                            } else {\n                                map[displayPaths[index]].push(index);\n                            }\n                        }\n                    });\n                }\n                delete map[key];\n            });\n            return didSomething;\n        };\n\n        var repeat;\n        do {\n            repeat = processMap(map);\n        } while (repeat);\n\n        return displayPaths;\n    }\n\n    function traverseViewArray(viewArray, startIndex, direction) {\n        if (Math.abs(direction) !== 1) {\n            console.error(\"traverseViewArray called with unsupported direction: \" + direction.toString());\n            return null;\n        }\n        if (startIndex === -1) {\n            // If doc not in view list, return most recent view list item\n            if (viewArray.length > 0) {\n                return viewArray[0];\n            }\n        } else if (viewArray.length > 1) {\n            // If doc is in view list, return next/prev item with wrap-around\n            startIndex += direction;\n            if (startIndex >= viewArray.length) {\n                startIndex = 0;\n            } else if (startIndex < 0) {\n                startIndex = viewArray.length - 1;\n            }\n\n            return viewArray[startIndex];\n        }\n\n        // If no doc open or view list empty, there is no \"next\" file\n        return null;\n    }\n\n    function hideMainToolBar() {\n        $(\"#main-toolbar\").addClass(\"forced-hidden\");\n        $(\".main-view .content\").each(function (index, element) {\n            $(element).addClass(\"force-right-zero\");\n        });\n    }\n\n    function showMainToolBar() {\n        $(\"#main-toolbar\").removeClass(\"forced-hidden\");\n        $(\".main-view .content\").each(function (index, element) {\n            $(element).removeClass(\"force-right-zero\");\n        });\n    }\n\n    // handle all resize handlers in a single listener\n    $(window).resize(_handleResize);\n\n    // Define public API\n    exports.SCROLL_SHADOW_HEIGHT         = SCROLL_SHADOW_HEIGHT;\n    exports.addScrollerShadow            = addScrollerShadow;\n    exports.removeScrollerShadow         = removeScrollerShadow;\n    exports.sidebarList                  = sidebarList;\n    exports.showMainToolBar              = showMainToolBar;\n    exports.hideMainToolBar              = hideMainToolBar;\n    exports.scrollElementIntoView        = scrollElementIntoView;\n    exports.getElementClipSize           = getElementClipSize;\n    exports.getFileEntryDisplay          = getFileEntryDisplay;\n    exports.toggleClass                  = toggleClass;\n    exports.getDirNamesForDuplicateFiles = getDirNamesForDuplicateFiles;\n    exports.traverseViewArray            = traverseViewArray;\n});\n"],"file":"ViewUtils.js"}