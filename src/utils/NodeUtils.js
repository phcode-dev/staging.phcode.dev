define(function(require,exports,module){const Strings=require("strings"),NodeConnector=require("NodeConnector"),UTILS_NODE_CONNECTOR="ph_utils";let utilsConnector;async function fetchURLText(url,encoding){if(!Phoenix.browser.isTauri)throw new Error("node not available in browser");const{buffer:buffer}=await utilsConnector.execPeer("getURLContent",{url:url});return iconv.decode(Buffer.from(buffer),encoding)}async function updateNodeLocaleStrings(){return!!Phoenix.browser.isTauri&&(await utilsConnector.execPeer("setLocaleStrings",Strings),!0)}async function getPhoenixBinaryVersion(){if(!Phoenix.browser.isTauri)throw new Error("getPhoenixBinaryVersion not available in browser");const cliArgs=await window.__TAURI__.invoke("_get_commandline_args"),phoenixBinPath=cliArgs[0];return utilsConnector.execPeer("getPhoenixBinaryVersion",phoenixBinPath)}async function getLinuxOSFlavorName(){return"linux"===Phoenix.platform&&Phoenix.browser.isTauri?utilsConnector.execPeer("getLinuxOSFlavorName"):null}Phoenix.browser.isTauri&&(utilsConnector=NodeConnector.createNodeConnector("ph_utils",exports)),NodeConnector.isNodeAvailable()&&updateNodeLocaleStrings(),exports.fetchURLText=fetchURLText,exports.updateNodeLocaleStrings=updateNodeLocaleStrings,exports.getPhoenixBinaryVersion=getPhoenixBinaryVersion,exports.getLinuxOSFlavorName=getLinuxOSFlavorName,exports.isNodeReady=NodeConnector.isNodeReady,window.NodeUtils=exports});
//# sourceMappingURL=NodeUtils.js.map
