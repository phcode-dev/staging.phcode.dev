{"version":3,"sources":["utils/PhoenixComm.js"],"names":["define","require","exports","module","EventDispatcher","_phoenixBroadcastChannel","BroadcastChannel","PHOENIX_INSTANCE_ID","Math","round","random","Phoenix","EVENT_PHOENIX_CLOSING","EVENT_PHOENIX_OPENED","_EVENT_PHOENIX_INSTANCE_DETAILS","_phoenixInstanceDetails","broadcast","eventType","data","postMessage","getAllInstanceDetails","_processBroadcastMessage","event","trigger","console","error","_getInstanceDetails","instanceID","isTestWindow","PHOENIX_INSTANCE_DETAILS","onmessage","makeEventDispatcher","addEventListener","on","_event","instanceDetails"],"mappings":"AAqCAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,gBAAkBH,QAAQ,yBAC1BI,yBAA2B,IAAIC,iBAAiB,eAWhDC,oBAAsB,MAAQC,KAAKC,MAAqB,KAAdD,KAAKE,UACrDC,QAAQJ,oBAAsBA,oBAC9B,MAAMK,sBAAwB,iBAC1BC,qBAAuB,gBACvBC,gCAAkC,yBAEhCC,wBAA0B,GAiBhC,SAASC,UAAUC,UAAWC,MAC1Bb,yBAAyBc,YAAY,CACjCF,UAAAA,UACAC,KAAAA,OASR,SAASE,wBACL,OAAOL,wBAGX,SAASM,yBAAyBC,OAC3BA,MAAMJ,MAAQI,MAAMJ,KAAKD,UACxBf,QAAQqB,QAAQD,MAAMJ,KAAKD,UAAWK,MAAMJ,KAAKA,MAGrDM,QAAQC,MAAM,4DAA6DH,OAO/E,SAASI,sBACL,MAAO,CACHC,WAAYpB,oBACZqB,aAAcjB,QAAQiB,cA/C9BjB,QAAQkB,yBAA2Bd,wBAwCnCV,yBAAyByB,UAAYT,yBAErCjB,gBAAgB2B,oBAAoB7B,SASpCc,UAvD2B,gBAuDKU,uBAChCM,iBAAkB,eAAgB,WAC9BhB,UA1D0B,iBA0DOT,uBAGrCL,QAAQ+B,GA7DsB,iBA6DI,CAACC,OAAQP,qBAChCZ,wBAAwBY,cAGnCzB,QAAQ+B,GAhEmB,gBAgEM,CAACC,OAAQC,mBACtCpB,wBAAwBoB,gBAAgBR,YAAcQ,gBAGtDnB,UAnEkC,yBAmESU,yBAG/CxB,QAAQ+B,GAtE8B,yBAsEM,CAACC,OAAQC,mBACjDpB,wBAAwBoB,gBAAgBR,YAAcQ,kBAa1DjC,QAAQU,sBAtFsB,iBAuF9BV,QAAQW,qBAtFmB,gBA0F3BX,QAAQc,UAA0BA,UAClCd,QAAQkB,sBAA0BA,sBAClClB,QAAQK,oBAAsBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n\n// @INCLUDE_IN_API_DOCS\n/**\n * PhoenixComm APIs can be used to communicate between Phoenix browser tabs/iframe instances across the browser.\n *\n * ### Import\n * ```js\n * // usage within core:\n * const PhoenixComm = require(\"utils/PhoenixComm\");\n *\n * // usage within default extensions:\n * const PhoenixComm = brackets.getModule(\"utils/PhoenixComm\");\n * ```\n *\n * @module utils/PhoenixComm\n */\ndefine(function (require, exports, module) {\n    const EventDispatcher = require(\"utils/EventDispatcher\");\n    const _phoenixBroadcastChannel = new BroadcastChannel(\"PhoenixComm\");\n    /**\n     * This section outlines the properties and methods available in this module\n     * @name API\n     */\n\n    /**\n     * A unique ID for each phoenix window instance. Test windows also have an id.\n     * @typedef PHOENIX_INSTANCE_ID\n     * @type {String}\n     */\n    const PHOENIX_INSTANCE_ID = \"PH-\" + Math.round( Math.random()*1000000000000);\n    Phoenix.PHOENIX_INSTANCE_ID = PHOENIX_INSTANCE_ID;\n    const EVENT_PHOENIX_CLOSING = \"phoenixClosing\",\n        EVENT_PHOENIX_OPENED = \"phoenixOpened\",\n        _EVENT_PHOENIX_INSTANCE_DETAILS = \"phoenixInstanceDetails\";\n\n    const _phoenixInstanceDetails = {};\n    Phoenix.PHOENIX_INSTANCE_DETAILS = _phoenixInstanceDetails;\n\n    /**\n     * Broadcast a message to other Phoenix instances. To listen to the broadcast message on another phoenix instance,\n     * use PhoenixComm.on methord\n     * @example <caption>To broadcast/receive a hello message to everyone</caption>\n     * PhoenixComm.broadcast(\"MSG_TYPE\", \"hello world\", \"ms\", 200);\n     * // now to receive the message of the type, use the on method\n     * PhoenixComm.on(\"MSG_TYPE\", (evt, data) =>{\n     *     console.log(data); // hello world\n     * })\n     *\n     * @param {string} eventType The kind of Event Type that needs to be sent to other phoenix instances\n     * @param {Object} data The Data object to broadcast\n     * @type {function}\n     */\n    function broadcast(eventType, data) {\n        _phoenixBroadcastChannel.postMessage({\n            eventType,\n            data\n        });\n    }\n\n    /**\n     * Returns a map of all instances of Phoenix. Mapped from instanceID to detail {instanceID, isTestWindow}.\n     * Will not contain self instance details.\n     * @return {Object} that maps instance IDs that are currently online to the instance details.\n     */\n    function getAllInstanceDetails() {\n        return _phoenixInstanceDetails;\n    }\n\n    function _processBroadcastMessage(event) {\n        if(event.data && event.data.eventType){\n            exports.trigger(event.data.eventType, event.data.data);\n            return;\n        }\n        console.error(\"Unknown event type for _phoenixBroadcastChannel message: \", event);\n    }\n\n    _phoenixBroadcastChannel.onmessage = _processBroadcastMessage;\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    function _getInstanceDetails() {\n        return {\n            instanceID: PHOENIX_INSTANCE_ID,\n            isTestWindow: Phoenix.isTestWindow\n        };\n    }\n\n    broadcast(EVENT_PHOENIX_OPENED, _getInstanceDetails());\n    addEventListener( 'beforeunload', function() {\n        broadcast(EVENT_PHOENIX_CLOSING, PHOENIX_INSTANCE_ID);\n    });\n\n    exports.on(EVENT_PHOENIX_CLOSING, (_event, instanceID)=>{\n        delete _phoenixInstanceDetails[instanceID];\n    });\n\n    exports.on(EVENT_PHOENIX_OPENED, (_event, instanceDetails)=>{\n        _phoenixInstanceDetails[instanceDetails.instanceID] = instanceDetails;\n        // a new window came up, so we broadcast our instance detail so that everyone(esp. the new window) is updated\n        // of our instance detail.\n        broadcast(_EVENT_PHOENIX_INSTANCE_DETAILS, _getInstanceDetails());\n    });\n\n    exports.on(_EVENT_PHOENIX_INSTANCE_DETAILS, (_event, instanceDetails)=>{\n        _phoenixInstanceDetails[instanceDetails.instanceID] = instanceDetails;\n    });\n\n    // public events\n    /**\n     * This section outlines the standard events generated by PhoenixComm. use\n     * `PhoenixComm.on(PhoenixComm.EVENT_PHOENIX_CLOSING,fn)` to listen to these events.\n     *\n     * * `EVENT_PHOENIX_CLOSING` - Event raised when another phoenix window is closing. Raises `instanceID`\n     * * `EVENT_PHOENIX_OPENED`  - Raises `{instanceID, isTestWindow}` when another phoenix window is opened.\n     * @name EVENTS\n     */\n\n    exports.EVENT_PHOENIX_CLOSING = EVENT_PHOENIX_CLOSING;\n    exports.EVENT_PHOENIX_OPENED = EVENT_PHOENIX_OPENED;\n\n    // Define public API\n    // exports.on is injected by eventDispatcher\n    exports.broadcast               = broadcast;\n    exports.getAllInstanceDetails   = getAllInstanceDetails;\n    exports.PHOENIX_INSTANCE_ID = PHOENIX_INSTANCE_ID;\n});\n"],"file":"PhoenixComm.js"}