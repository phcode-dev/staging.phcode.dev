{"version":3,"sources":["main.js"],"names":["window","jsPromise","jqueryOrJSPromise","catch","then","finally","fail","done","console","error","Error","Promise","resolve","reject","trackedScriptCount","_setSplashScreenStatusUpdate","message1","message2","splashScreenFrame","document","getElementById","debugMode","scriptObserver","disconnect","log","displayBtn1","contentDocument","displayText2","textContent","callback","mutationsList","mutation","type","addedNodes","length","src","scriptAddedSplit","split","message","Phoenix","firstBoot","e","mainScripts","config","childList","browser","isTauri","MutationObserver","observe","require","paths","text","i18n","fileSystemImpl","preact-compat","preact","map","*","thirdparty/CodeMirror2","thirdparty/preact","view/PanelManager","waitSeconds","location","search","indexOf","preferences/PreferencesImpl","locale","PhStore","getItem","navigator","language","define","Metrics","err","refreshServiceWorkerCache","logger","reportError","setTimeout","reload"],"mappings":"AA2BAA,OAAOC,UAAY,SAAUC,mBACzB,GAAGA,mBAAqBA,kBAAkBC,OAASD,kBAAkBE,MAAQF,kBAAkBG,QAE3F,OAAQH,kBAEZ,IAAIA,mBACCA,oBAAsBA,kBAAkBI,MAAUJ,oBAAsBA,kBAAkBK,KAE3F,MADAC,QAAQC,MAAM,sEACR,IAAIC,MAAM,sEAEpB,OAAO,IAAIC,QAAQ,CAACC,QAASC,UACzBX,kBACKK,KAAKK,SACLN,KAAKO,WAKlB,IAAIC,mBAAqB,EACzB,SAASC,6BAA6BC,SAAUC,UAC5C,IAAIC,kBAAoBC,SAASC,eAAe,uBAChD,IAAIF,kBAOA,OANIlB,OAAOqB,YAGPrB,OAAOsB,gBAAkBtB,OAAOsB,eAAeC,aAC/Cf,QAAQgB,IAAI,wDAET,EAEX,IAAIC,YAAcP,kBAAkBQ,gBAAgBN,eAAe,2BAC/DO,aAAeT,kBAAkBQ,gBAAgBN,eAAe,4BAGpE,OAFAK,YAAYG,YAAcZ,SAC1BW,aAAaC,YAAcX,UACpB,EAIX,MAAMY,SAAW,SAASC,eACtB,IAGI,IAAI,MAAMC,YAAYD,cAClB,GAAsB,cAAlBC,SAASC,MAAwBD,SAASE,WAAWC,OAAQ,GAAKH,SAASE,WAAW,GAAGE,IAAK,CAC9FrB,qBACA,IAAIsB,iBAAmBL,SAASE,WAAW,GAAGE,IAAIE,MAAM,KACxD,GAAGD,iBAAiBF,OAAS,EAAE,CAC3B,IAAII,oBAAsBxB,sBACvBd,OAAOuC,SAAWvC,OAAOuC,QAAQC,YAChCF,uBAAyBxB,uBAE7BC,6BAA6BuB,WAAYF,iBAAiBA,iBAAiBF,OAAO,QAIhG,MAAOO,GACLjC,QAAQC,MAAM,qCAAsCgC,KAGtDC,YAAcvB,SAASC,eAAe,qBACtCuB,OAAS,CAAEC,WAAW,GAExBL,QAAQM,QAAQC,UAGhB9C,OAAOsB,eAAiB,IAAIyB,iBAAiBlB,UAG7C7B,OAAOsB,eAAe0B,QAAQN,YAAaC,SAO/CM,QAAQN,OAAO,CACXO,MAAO,CACHC,KAAQ,uBACRC,KAAQ,uBAIRC,eAAkB,+CAClBC,gBAAiB,6CACjBC,OAAU,4BAEdC,IAAK,CACDC,IAAK,CACDC,yBAA0B,wBAC1BC,oBAAqB,gBACrBC,oBAAqB,0BAG7BC,YAAa,KAGb7D,OAAO8D,SAASC,OAAOC,QAAQ,oBAAsB,EACrDf,QAAQN,OAAO,CACXO,MAAO,CACHe,8BAA+B,+BAEnCC,OAAQ,OAWZjB,QAAQN,OAAO,CACXuB,OAAQlE,OAAOmE,QAAQC,QAAQ,WAAapE,OAAOqE,UAAUC,WAIrEC,OAAO,SAAUtB,SAKbA,QAAQ,CAAC,gBAAiB,sBAAuB,yBAA0B,WACvEjD,OAAOwE,QAAUvB,QAAQ,iBAEzB,IACIA,QAAQ,CAAC,aACX,MAAOwB,KAELzE,OAAO0E,2BAA6B1E,OAAO0E,4BAE3C1E,OAAO2E,QAAU3E,OAAO2E,OAAOC,YAAYH,IACvC,iEAEJI,WAAW7E,OAAO8D,SAASgB,OAAQ","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * global util to convert jquery/js promise to a js promise. This can be used as an adapter when you do not know if the\n * promise in hand is a js or jquery deferred promise. This function will always return a normal js promise.\n * @param jqueryOrJSPromise\n * @returns {{finally}|{then}|{catch}|*}\n */\nwindow.jsPromise = function (jqueryOrJSPromise) {\n    if(jqueryOrJSPromise && jqueryOrJSPromise.catch && jqueryOrJSPromise.then && jqueryOrJSPromise.finally){\n        // this should be a normal js promise return as is\n        return  jqueryOrJSPromise;\n    }\n    if(!jqueryOrJSPromise ||\n        (jqueryOrJSPromise && !jqueryOrJSPromise.fail) || (jqueryOrJSPromise && !jqueryOrJSPromise.done)){\n        console.error(\"this function expects a jquery promise with done and fail handlers\");\n        throw new Error(\"this function expects a jquery promise with done and fail handlers\");\n    }\n    return new Promise((resolve, reject)=>{\n        jqueryOrJSPromise\n            .done(resolve)\n            .fail(reject);\n    });\n};\n\n// splash screen updates for initial install which could take time, or slow networks.\nlet trackedScriptCount = 0;\nfunction _setSplashScreenStatusUpdate(message1, message2) {\n    let splashScreenFrame = document.getElementById(\"splash-screen-frame\");\n    if(!splashScreenFrame){\n        if(!window.debugMode){\n            // If not in debug mode & splash screen isn't there, we don't need to observe dom script update status\n            // to improve performance.\n            window.scriptObserver && window.scriptObserver.disconnect();\n            console.log('startup Watcher: Disconnected script load watcher.');\n        }\n        return false;\n    }\n    let displayBtn1 = splashScreenFrame.contentDocument.getElementById(\"load-status-display-btn\");\n    let displayText2 = splashScreenFrame.contentDocument.getElementById(\"load-status-display-text\");\n    displayBtn1.textContent = message1;\n    displayText2.textContent = message2;\n    return true;\n}\n\n// Callback function to execute when mutations are observed\nconst callback = function(mutationsList) {\n    try{\n        // we have to guard here with try catch as this callback is executed on script load and any error\n        // here will break load\n        for(const mutation of mutationsList) {\n            if (mutation.type === 'childList' && mutation.addedNodes.length >0 && mutation.addedNodes[0].src) {\n                trackedScriptCount++;\n                let scriptAddedSplit = mutation.addedNodes[0].src.split(\"/\");\n                if(scriptAddedSplit.length > 0){\n                    let message = `Loading (${trackedScriptCount})`;\n                    if(window.Phoenix && window.Phoenix.firstBoot) {\n                        message = `Installing (${trackedScriptCount})`;\n                    }\n                    _setSplashScreenStatusUpdate(message, `${scriptAddedSplit[scriptAddedSplit.length-1]}`);\n                }\n            }\n        }\n    } catch (e) {\n        console.error(\"Error in script mutation observer!\", e);\n    }\n};\nconst mainScripts = document.getElementById('main-scripts-head');\nconst config = { childList: true};\n\nif(!Phoenix.browser.isTauri) {\n    // in tauri, there is no splash screen, so we dont do this.\n    // Create an observer instance linked to the callback function\n    window.scriptObserver = new MutationObserver(callback);\n\n    // Start observing the target node for configured mutations\n    window.scriptObserver.observe(mainScripts, config);\n}\n\n/**\n * The bootstrapping module for brackets. This module sets up the require\n * configuration and loads the brackets module.\n */\nrequire.config({\n    paths: {\n        \"text\": \"thirdparty/text/text\",\n        \"i18n\": \"thirdparty/i18n/i18n\",\n\n        // The file system implementation. Change this value to use different\n        // implementations (e.g. cloud-based storage).\n        \"fileSystemImpl\": \"filesystem/impls/appshell/AppshellFileSystem\",\n        \"preact-compat\": \"thirdparty/preact-compat/preact-compat.min\",\n        \"preact\": \"thirdparty/preact/preact\"\n    },\n    map: {\n        \"*\": {\n            \"thirdparty/CodeMirror2\": \"thirdparty/CodeMirror\",\n            \"thirdparty/preact\": \"preact-compat\",\n            \"view/PanelManager\": \"view/WorkspaceManager\"  // For extension compatibility\n        }\n    },\n    waitSeconds: 60\n});\n\nif (window.location.search.indexOf(\"testEnvironment\") > -1) {\n    require.config({\n        paths: {\n            \"preferences/PreferencesImpl\": \"../test/TestPreferencesImpl\"\n        },\n        locale: \"en\" // force English (US)\n    });\n} else {\n    /**\n     * hack for r.js optimization, move locale to another config call\n     *\n     * Use custom brackets property until CEF sets the correct navigator.language\n     * NOTE: When we change to navigator.language here, we also should change to\n     * navigator.language in ExtensionLoader (when making require contexts for each\n     * extension).\n     */\n    require.config({\n        locale: window.PhStore.getItem(\"locale\") || window.navigator.language\n    });\n}\n\ndefine(function (require) {\n\n\n    // Load compatibility shims--these need to load early, be careful moving this\n    // Event dispatcher must be loaded before worker comm https://github.com/phcode-dev/phoenix/pull/678\n    require([\"utils/Metrics\", \"utils/Compatibility\", \"utils/EventDispatcher\"], function () {\n        window.Metrics = require(\"utils/Metrics\");\n        // Load the brackets module. This is a self-running module that loads and runs the entire application.\n        try{\n            require([\"brackets\"]);\n        } catch (err) {\n            // try a cache refresh (not a full reset). this will happen in the service worker in the background\n            window.refreshServiceWorkerCache && window.refreshServiceWorkerCache();\n            // metrics api might not be available here as we were seeing no metrics raised. Only bugsnag there.\n            window.logger && window.logger.reportError(err,\n                'Critical error when loading brackets. Trying to reload again.');\n            // wait for 3 seconds for bugsnag to send report.\n            setTimeout(window.location.reload, 3000);\n        }\n    });\n});\n"],"file":"main.js"}