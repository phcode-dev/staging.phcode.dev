{"version":3,"sources":["worker/IndexingWorker.js"],"names":["define","require","exports","module","WorkerComm","EventDispatcher","_FileIndexingWorker","Worker","Phoenix","baseURL","window","logToConsolePref","console","error","makeEventDispatcher","createWorkerComm","EVENT_CRAWL_STARTED","EVENT_CRAWL_PROGRESS","EVENT_CRAWL_COMPLETE"],"mappings":"AA4DAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,WAAaH,QAAQ,qBACvBI,gBAAkBJ,QAAQ,yBAExBK,oBAAsB,IAAIC,UACzBC,QAAQC,+CAA2E,SAA5BC,OAAOC,oBAEjEL,qBACAM,QAAQC,MAAM,iEAElBR,gBAAgBS,oBAAoBZ,SACpCE,WAAWW,iBAAiBT,oBAAqBJ,SA2BjDA,QAAQc,oBAAsB,eAS9Bd,QAAQe,qBAAuB,gBAU/Bf,QAAQgB,qBAAuB","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n// @INCLUDE_IN_API_DOCS\n/**\n * Phoenix houses a file indexing worker which caches all cacheable files of a project in memory.\n * This module can be used to communicate with the Index and extend it by attaching new js worker scripts to the\n * indexing worker as discussed below. Any extension that works on a large number of files should use the indexing\n * worker cache to free up the main thread of heavy computation.\n *\n * ## Import\n * ```js\n * // usage within extensions:\n * const IndexingWorker = brackets.getModule(\"worker/IndexingWorker\");\n * ```\n * ## Extending the indexing worker\n * You can add your own custom scripts to the indexing worker by following the below example. Suppose you have an\n * extension folder with the following structure:\n * ```\n * myExtensionFolder\n * │  my_worker.js // the script that you need to attach to the web worker\n * │  main.js\n * ```\n * In `main.js` extension module, we can import `my_worker.js` script into `IndexingWorker` by:\n * ```js\n * let ExtensionUtils = brackets.getModule(\"utils/ExtensionUtils\");\n * let workerPath = ExtensionUtils.getModulePath(module, \"my_worker.js\")\n * IndexingWorker.loadScriptInWorker(workerPath);\n * ```\n *\n * Once the worker script is loaded with the above step, we can communicate with it using the either `IndexingWorker`\n * reference within Phoenix or the global `WorkerComm` reference within the Indexing worker.\n * All utility methods in module [worker/WorkerComm](WorkerComm-API) can be used for worker communication.\n *\n * A global constant `Phoenix.baseURL` is available in the worker context to get the base url from which phoenix was\n * launched.\n *\n * NB: You can use all util methods available in `worker/WorkerComm` as `IndexingWorker` internally uses `WorkerComm`\n * to communicate with the underlying worker thread.\n *\n * @module worker/IndexingWorker\n */\ndefine(function (require, exports, module) {\n    const WorkerComm = require(\"worker/WorkerComm\"),\n        EventDispatcher = require(\"utils/EventDispatcher\");\n\n    const _FileIndexingWorker = new Worker(\n        `${Phoenix.baseURL}worker/file-Indexing-Worker.js?debug=${window.logToConsolePref === 'true'}`);\n\n    if(!_FileIndexingWorker){\n        console.error(\"Could not load find in files worker! Search will be disabled.\");\n    }\n    EventDispatcher.makeEventDispatcher(exports);\n    WorkerComm.createWorkerComm(_FileIndexingWorker, exports);\n    /**\n     * To communicate between the IndexingWorker and Phoenix, the following methods are available:\n     * `loadScriptInWorker`, `execPeer`, `setExecHandler`, `triggerPeer` and other APIs described\n     * in module `worker/WorkerComm`.\n     * The above methods can be used with either `IndexingWorker` reference within Phoenix\n     * or the global `WorkerComm` reference within the Indexing worker. (See example below.)\n     *\n     * See [worker/WorkerComm](WorkerComm-API) for detailed API docs.\n     *\n     * @example <caption>To Execute a named function `sayHello` in the worker from phoenix</caption>\n     * // in my_worker.js\n     * WorkerComm.setExecHandler(\"sayHello\", (arg)=>{\n     *     console.log(\"hello from worker \", arg); // prints \"hello from worker phoenix\"\n     *     return \"Hello Phoenix\";\n     *   });\n     * // In Phoenix/extension\n     * let workerMessage = await IndexingWorker.execPeer(\"sayHello\", \"phoenix\");\n     * console.log(workerMessage); // prints \"Hello Phoenix\"\n     * @name WorkerComm-APIS\n     */\n\n    /**\n     * Raised when crawling started in the indexing worker.\n     * @event EVENT_CRAWL_STARTED\n     * @type {null}\n     */\n    exports.EVENT_CRAWL_STARTED = \"crawlStarted\";\n    /**\n     * Raised when crawling in progressing within the worker. The handler will receive the\n     * following properties as parameter.\n     * @event EVENT_CRAWL_PROGRESS\n     * @type {object}\n     * @property {number} processed The number of files cached till now.\n     * @property {number} total Number of files to cache.\n     */\n    exports.EVENT_CRAWL_PROGRESS = \"crawlProgress\";\n    /**\n     * Raised when crawling is complete within the worker. The handler will receive the\n     * following properties as parameter.\n     * @event EVENT_CRAWL_COMPLETE\n     * @type {object}\n     * @property {number} numFilesCached\n     * @property {number} cacheSizeBytes\n     * @property {number} crawlTimeMs in milliseconds.\n     */\n    exports.EVENT_CRAWL_COMPLETE = \"crawlComplete\";\n});\n"],"file":"IndexingWorker.js"}