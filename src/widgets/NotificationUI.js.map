{"version":3,"sources":["widgets/NotificationUI.js"],"names":["define","require","exports","module","WorkspaceManager","Mustache","ToastPopupHtml","Dialogs","MainViewManager","NOTIFICATION_TYPE_ARROW","NOTIFICATION_TYPE_TOAST","CLOSE_REASON","TIMEOUT","CLICK_DISMISS","CLOSE_BTN_CLICK","Notification","$notification","type","this","_result","$","Deferred","_promise","promise","_closeToastNotification","$NotificationPopup","endCB","removeClass","addClass","one","remove","_closeArrowNotification","off","EVENT_WORKSPACE_UPDATE_LAYOUT","update","createFromTemplate","template","elementID","options","allowedPlacements","dismissOnClick","tooltip","_createDomElementWithArrowElement","notification","autoCloseTimeS","setTimeout","close","click","prototype","closeType","self","resolve","done","callback","notificationWidgetCount","_computePlacementWithArrowElement","arrowElement","x","y","placement","middlewareData","Object","assign","style","left","top","arrowX","arrowY","arrow","staticSide","right","bottom","split","[object Object]","_updatePositions","onElement","middleWare","FloatingUIDOM","offset","autoPlacement","shift","padding","push","element","computePosition","middleware","then","on","domTemplate","document","getElementById","widgetID","arrowID","textTemplate","String","floatingDom","append","createToastFromTemplate","title","render","id","find","addLinkTooltips","appendTo","hide","focusActivePane","show"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global FloatingUIDOM*/\n// @INCLUDE_IN_API_DOCS\n\n/**\n * The global NotificationUI can be used to create popup notifications over dom elements or generics app notifications.\n *\n * A global `window.EventManager` object is made available in phoenix that can be called anytime after AppStart.\n * This global can be triggered from anywhere without using require context.\n *\n * ## Usage\n * ### Simple example\n * For Eg. Let's say we have to create a popup notification over the HTML element with ID `showInfileTree`.\n * We can do this with the following\n * ```js\n * const NotificationUI = brackets.getModule(\"widgets/NotificationUI\");\n * // or use window.NotificationUI global object has the same effect.\n * let notification = NotificationUI.createFromTemplate(\"Click me to locate the file in file tree\", \"showInfileTree\",{});\n * notification.done(()=>{\n *     console.log(\"notification is closed in ui.\");\n * })\n * ```\n * ### Advanced example\n * Another advanced example where you can specify html and interactive components in the notification\n * ```js\n * // note that you can even provide an HTML Element node with\n * // custom event handlers directly here instead of HTML text.\n * let notification1 = NotificationUI.createFromTemplate(\n *   \"<div>Click me to </br>locate the file in file tree</div>\", \"showInfileTree\",{\n *       allowedPlacements: ['top', 'bottom'],\n *       dismissOnClick: false,\n *       autoCloseTimeS: 300 // auto close the popup after 5 minutes\n *   });\n * // do stuff\n * notification1.done((closeReason)=>{\n *     console.log(\"notification is closed in ui reason:\", closeReason);\n * })\n * ```\n * The [createFromTemplate]() API can be configured with numerous options. See API options below.\n * @module widgets/NotificationUI\n */\n\ndefine(function (require, exports, module) {\n\n\n    const WorkspaceManager  = require(\"view/WorkspaceManager\"),\n        Mustache = require(\"thirdparty/mustache/mustache\"),\n        ToastPopupHtml  = require(\"text!widgets/html/toast-popup.html\"),\n        Dialogs = require(\"widgets/Dialogs\"),\n        MainViewManager = require(\"view/MainViewManager\");\n\n    const NOTIFICATION_TYPE_ARROW = \"arrow\",\n        NOTIFICATION_TYPE_TOAST = \"toast\";\n\n    const CLOSE_REASON ={\n        TIMEOUT: 'closeTimeout',\n        CLICK_DISMISS: 'clickDismiss',\n        CLOSE_BTN_CLICK: 'closeBtnClick'\n    };\n\n    /**\n     * This section outlines the properties and methods available in this module\n     * @name API\n     */\n\n    /**\n     * This is an instance of the notification returned by the `createFromTemplate` call. The object can be used to\n     * control the created notification. See Notification docs below.\n     * @type {Object}\n     * @name Notification\n     */\n\n    /**\n     * @constructor\n     * @private\n     */\n    function Notification($notification, type) {\n        this.$notification    = $notification;\n        this.type = type;\n        this._result  = new $.Deferred();\n        this._promise = this._result.promise();\n    }\n\n    function _closeToastNotification($NotificationPopup, endCB) {\n        // Animate out\n        $NotificationPopup.removeClass(\"animateOpen\");\n        $NotificationPopup\n            .addClass(\"animateClose\")\n            .one(\"transitionend\", function () {\n                // Normally we'd use AnimationUtils for this, but due to an apparent Chrome bug, calling .is(\":hidden\")\n                // causes the animation not to play (even though it returns false and that early-exit branch isn't taken).\n                $NotificationPopup.removeClass(\"animateClose\");\n                $NotificationPopup.remove();\n                endCB && endCB();\n            });\n    }\n\n    function _closeArrowNotification($NotificationPopup, endCB) {\n        $NotificationPopup.removeClass('notification-ui-visible')\n            .addClass('notification-ui-hidden')\n            .one(\"transitionend\", function () {\n                // wait for the animation to complete before removal\n                $NotificationPopup.remove();\n                WorkspaceManager.off(WorkspaceManager.EVENT_WORKSPACE_UPDATE_LAYOUT, $NotificationPopup[0].update);\n                endCB && endCB();\n            });\n    }\n\n    /**\n     * Closes the Notification if is visible and destroys then dom nodes\n     * @param {string} closeType - an optional reason as to why the notification is closed.\n     * @type {function}\n     * @name Notification.close\n     */\n    Notification.prototype.close = function (closeType) {\n        let self = this,\n            $notification = this.$notification;\n        if(!$notification){\n            return this; // if already closed\n        }\n        this.$notification = null;\n        this.type === NOTIFICATION_TYPE_TOAST ?\n            _closeToastNotification($notification, ()=>{\n                // do not move out this function. bugsnag error. see history\n                self._result.resolve(closeType);\n            }) :\n            _closeArrowNotification($notification, ()=>{\n                self._result.resolve(closeType);\n            });\n        return this;\n    };\n\n    /**\n     * Adds a done callback to the Notification promise. The promise will be resolved\n     * when the Notification is dismissed. Never rejected.\n     * @example <caption>Print the close reason on console when the notification closes</caption>\n     * notificationInstance.done((closeReason)=>{\n     *     console.log(closeReason)\n     * })\n     * @type {function}\n     * @name Notification.done\n     */\n    Notification.prototype.done = function (callback) {\n        this._promise.done(callback);\n    };\n\n    /**\n     * Creates a new notification popup from given template.\n     * The template can either be a string or a jQuery object representing a DOM node that is *not* in the current DOM.\n     *\n     * @example <caption>Creating a notification popup</caption>\n     * // note that you can even provide an HTML Element node with\n     * // custom event handlers directly here instead of HTML text.\n     * let notification1 = NotificationUI.createFromTemplate(\n     *   \"<div>Click me to </br>locate the file in file tree</div>\", \"showInfileTree\",{\n     *       allowedPlacements: ['top', 'bottom'],\n     *       dismissOnClick: false,\n     *       autoCloseTimeS: 300 // auto close the popup after 5 minutes\n     *   });\n     *\n     * @param {string|Element} template A string template or HTML Element to use as the dialog HTML.\n     * @param {String} [elementID] optional id string if provided will show the notification pointing to the element.\n     *   If no element is specified, it will be managed as a generic notification.\n     * @param {Object} [options] optional, supported\n     *   * options are:\n     *   * `allowedPlacements` - Optional String array with values restricting where the notification will be shown.\n     *       Values can be a mix of `['top', 'bottom', 'left', 'right']`\n     *   * `autoCloseTimeS` - Time in seconds after which the notification should be auto closed. Default is never.\n     *   * `dismissOnClick` - when clicked, the notification is closed. Default is true(dismiss).\n     * @return {Notification} Object with a done handler that resolves when the notification closes.\n     * @type {function}\n     */\n    function createFromTemplate(template, elementID, options= {}) {\n        // https://floating-ui.com/docs/tutorial\n        options.allowedPlacements = options.allowedPlacements || ['top', 'bottom', 'left', 'right'];\n        options.dismissOnClick = options.dismissOnClick || true;\n        if(!elementID){\n            elementID = 'notificationUIDefaultAnchor';\n        }\n        const tooltip = _createDomElementWithArrowElement(template, elementID, options);\n        tooltip.addClass('notification-ui-visible');\n        let notification = (new Notification(tooltip, NOTIFICATION_TYPE_ARROW));\n\n        if(options.autoCloseTimeS){\n            setTimeout(()=>{\n                notification.close(CLOSE_REASON.TIMEOUT);\n            }, options.autoCloseTimeS * 1000);\n        }\n\n        if(options.dismissOnClick){\n            tooltip.click(()=>{\n                notification.close(CLOSE_REASON.CLICK_DISMISS);\n            });\n        }\n        return notification;\n    }\n\n    let notificationWidgetCount = 0;\n\n    function _computePlacementWithArrowElement(tooltip, arrowElement, {x, y, placement, middlewareData}) {\n        Object.assign(tooltip.style, {\n            left: `${x}px`,\n            top: `${y}px`\n        });\n        if(arrowElement){\n            const {x: arrowX, y: arrowY} = middlewareData.arrow;\n\n            const staticSide = {\n                top: 'bottom',\n                right: 'left',\n                bottom: 'top',\n                left: 'right'\n            }[placement.split('-')[0]];\n\n            Object.assign(arrowElement.style, {\n                left: arrowX != null ? `${arrowX}px` : '',\n                top: arrowY != null ? `${arrowY}px` : '',\n                right: '',\n                bottom: '',\n                [staticSide]: '-4px'\n            });\n        }\n    }\n\n    function _updatePositions(tooltip, onElement, arrowElement, options) {\n        let middleWare=  [\n            FloatingUIDOM.offset(6),\n            FloatingUIDOM.autoPlacement({\n                // 'right' and 'left' won't be chosen\n                allowedPlacements: options.allowedPlacements\n            }),\n            FloatingUIDOM.shift({padding: 5})\n        ];\n        if(arrowElement){\n            middleWare.push(FloatingUIDOM.arrow({element: arrowElement}));\n        }\n        tooltip.update = function () {\n            FloatingUIDOM.computePosition(onElement, tooltip, {\n                placement: 'top',\n                middleware: middleWare\n            }).then(({x, y, placement, middlewareData}) => {\n                _computePlacementWithArrowElement(tooltip, arrowElement,\n                    {x, y, placement, middlewareData});\n            });\n        };\n        tooltip.update();\n        WorkspaceManager.on(WorkspaceManager.EVENT_WORKSPACE_UPDATE_LAYOUT, tooltip.update);\n    }\n\n    function _createDomElementWithArrowElement(domTemplate, elementID, options) {\n        notificationWidgetCount++;\n        const onElement = document.getElementById(elementID);\n        let arrowElement;\n        let widgetID = `notification-ui-widget-${notificationWidgetCount}`;\n        let arrowID = `notification-ui-arrow-${notificationWidgetCount}`;\n        let textTemplate = null;\n        if (typeof domTemplate === 'string' || domTemplate instanceof String){\n            textTemplate = domTemplate;\n        }\n        let floatingDom = $(`<div id=\"${widgetID}\" class=\"notification-ui-tooltip\" role=\"tooltip\">\n                                ${textTemplate||''}</div>`);\n        if(!textTemplate && domTemplate){\n            floatingDom.append($(domTemplate));\n        }\n        if(onElement){\n            arrowElement = $(`<div id=\"${arrowID}\" class=\"notification-ui-arrow\"></div>`);\n            floatingDom.append(arrowElement);\n        }\n        $(\"body\").append(floatingDom);\n        _updatePositions(floatingDom[0], onElement, arrowElement[0], options);\n        return floatingDom;\n    }\n\n    /**\n     * Creates a new toast notification popup from given title and html message.\n     * The message can either be a string or a jQuery object representing a DOM node that is *not* in the current DOM.\n     *\n     * @example <caption>Creating a toast notification popup</caption>\n     * // note that you can even provide an HTML Element node with\n     * // custom event handlers directly here instead of HTML text.\n     * let notification1 = NotificationUI.createToastFromTemplate( \"Title here\",\n     *   \"<div>Click me to </br>locate the file in file tree</div>\", {\n     *       dismissOnClick: false,\n     *       autoCloseTimeS: 300 // auto close the popup after 5 minutes\n     *   });\n     *\n     * @param {string} title The title for the notification.\n     * @param {string|Element} template A string template or HTML Element to use as the dialog HTML.\n     * @param {{dismissOnClick, autoCloseTimeS}} [options] optional, supported\n     *   * options are:\n     *   * `autoCloseTimeS` - Time in seconds after which the notification should be auto closed. Default is never.\n     *   * `dismissOnClick` - when clicked, the notification is closed. Default is true(dismiss).\n     * @return {Notification} Object with a done handler that resolves when the notification closes.\n     * @type {function}\n     */\n    function createToastFromTemplate(title, template, options = {}) {\n        options.dismissOnClick = options.dismissOnClick || true;\n        notificationWidgetCount++;\n        const widgetID = `notification-toast-${notificationWidgetCount}`,\n            $NotificationPopup = $(Mustache.render(ToastPopupHtml,\n                {id: widgetID, title: title}));\n        $NotificationPopup.find(\".notification-dialog-content\")\n            .append($(template));\n\n        Dialogs.addLinkTooltips($NotificationPopup);\n\n        $NotificationPopup.appendTo(\"#toast-notification-container\").hide()\n            .find(\".notification-popup-close-button\").click(function () {\n                _closeToastNotification($NotificationPopup, CLOSE_REASON.CLOSE_BTN_CLICK);\n                MainViewManager.focusActivePane();\n            });\n        $NotificationPopup.show();\n\n        // Animate in\n        // Must wait a cycle for the \"display: none\" to drop out before CSS transitions will work\n        setTimeout(function () {\n            $NotificationPopup.addClass(\"animateOpen\");\n        }, 0);\n\n        let notification = (new Notification($NotificationPopup, NOTIFICATION_TYPE_TOAST));\n\n        if(options.autoCloseTimeS){\n            setTimeout(()=>{\n                notification.close(CLOSE_REASON.TIMEOUT);\n            }, options.autoCloseTimeS * 1000);\n        }\n\n        if(options.dismissOnClick){\n            $NotificationPopup.click(()=>{\n                notification.close(CLOSE_REASON.CLICK_DISMISS);\n            });\n        }\n        return notification;\n    }\n\n    exports.createFromTemplate = createFromTemplate;\n    exports.createToastFromTemplate = createToastFromTemplate;\n    exports.CLOSE_REASON = CLOSE_REASON;\n});\n"],"file":"NotificationUI.js"}