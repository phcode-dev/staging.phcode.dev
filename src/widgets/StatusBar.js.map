{"version":3,"sources":["widgets/StatusBar.js"],"names":["define","require","exports","module","AppInit","StatusBarHTML","Strings","WorkspaceManager","Mustache","_init","_busyCursor","_indicatorIDRegexp","RegExp","$statusInfo","$statusBar","$indicators","$busyIndicator","showBusyIndicator","updateCursor","$","addClass","console","error","hideBusyIndicator","removeClass","addIndicator","id","indicator","visible","style","tooltip","insertBefore","window","document","createElement","replace","$indicator","attr","hide","length","insertAfter","updateIndicator","brackets","test","show","hideInformation","css","showInformation","hideIndicators","showIndicators","hideAllPanes","showAllPanes","is","recomputeLayout","htmlReady","$parent","append","render"],"mappings":"AA2BAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,QAAmBH,QAAQ,iBAC3BI,cAAmBJ,QAAQ,+BAC3BK,QAAmBL,QAAQ,WAC3BM,iBAAmBN,QAAQ,yBAC3BO,SAAmBP,QAAQ,gCAE3BQ,OAAQ,EAGRC,aAAc,EAGdC,mBAAqB,IAAIC,OAAO,iBAAkB,KAIlDC,YACAC,WACAC,YACAC,eAMJ,SAASC,kBAAkBC,cAClBT,OAKDS,eACAR,aAAc,EACdS,EAAE,KAAKC,SAAS,eAGpBJ,eAAeI,SAAS,SATpBC,QAAQC,MAAM,mDAetB,SAASC,oBACAd,OAODC,cACAA,aAAc,EACdS,EAAE,KAAKK,YAAY,eAGvBR,eAAeQ,YAAY,SAXvBH,QAAQC,MAAM,mDAyBtB,SAASG,aAAaC,GAAIC,UAAWC,QAASC,MAAOC,QAASC,cAC1D,GAAKtB,MAAL,CAKAkB,UAAYA,WAAaK,OAAOC,SAASC,cAAc,OACvDJ,QAAUA,SAAW,GACrBD,MAAQA,OAAS,GACjBH,GAAKA,GAAGS,QAAQxB,mBAAoB,MAAQ,GAE5C,IAAIyB,WAAajB,EAAEQ,WAcnB,GAZAS,WAAWC,KAAK,KAAMX,IACtBU,WAAWC,KAAK,QAASP,SACzBM,WAAWhB,SAAS,aACpBgB,WAAWhB,SAASS,OAEfD,SACDQ,WAAWE,OAMXP,cAAgBZ,EAAE,IAAMY,cAAcQ,OAAS,EAC/CH,WAAWI,YAAY,IAAMT,kBAC1B,CAGH,IAAIf,eAAiBG,EAAE,wBACvBiB,WAAWL,aAAaf,sBA7BxBK,QAAQC,MAAM,mDAwCtB,SAASmB,gBAAgBf,GAAIE,QAASC,MAAOC,SACzC,GAAKrB,QAAWiC,SAASC,KAAzB,CAKA,IAAIP,WAAajB,EAAE,IAAMO,GAAGS,QAAQxB,mBAAoB,MAEpDyB,aAEIR,QACAQ,WAAWQ,OAEXR,WAAWE,OAGXT,OACAO,WAAWZ,cACXY,WAAWhB,SAASS,SAEpBO,WAAWZ,cACXY,WAAWhB,SAAS,cAGpBU,SACAM,WAAWC,KAAK,QAASP,eAvB7BT,QAAQC,MAAM,mDA+BtB,SAASuB,kBACLhC,YAAYiC,IAAI,UAAW,QAM/B,SAASC,kBACLlC,YAAYiC,IAAI,UAAW,IAM/B,SAASE,iBACLjC,YAAY+B,IAAI,UAAW,QAM/B,SAASG,iBACLlC,YAAY+B,IAAI,UAAW,IAO/B,SAASI,eACLL,kBACAG,iBAMJ,SAASG,eACLJ,kBACAE,iBAOJ,SAASX,OACA7B,MAKDK,WAAWsC,GAAG,cACdtC,WAAWwB,OACX/B,iBAAiB8C,mBANjBhC,QAAQC,MAAM,mDAatB,SAASsB,OACAnC,MAKAK,WAAWsC,GAAG,cACftC,WAAW8B,OACXrC,iBAAiB8C,mBANjBhC,QAAQC,MAAM,mDAUtBlB,QAAQkD,UAAU,WACd,IAAIC,QAAUpC,EAAE,uBACRqC,OAAOhD,SAASiD,OAAOpD,cAAeC,UAG9CQ,WAAsBK,EAAE,eACxBJ,YAAsBI,EAAE,sBACxBH,eAAsBG,EAAE,wBACxBN,YAAsBM,EAAE,gBAExBV,OAAQ,EAGR6B,SAGJpC,QAAQ2C,gBAAoBA,gBAC5B3C,QAAQ6C,gBAAoBA,gBAC5B7C,QAAQe,kBAAoBA,kBAC5Bf,QAAQqB,kBAAoBA,kBAC5BrB,QAAQ8C,eAAoBA,eAC5B9C,QAAQ+C,eAAoBA,eAC5B/C,QAAQgD,aAAoBA,aAC5BhD,QAAQiD,aAAoBA,aAC5BjD,QAAQuB,aAAoBA,aAC5BvB,QAAQuC,gBAAoBA,gBAC5BvC,QAAQoC,KAAoBA,KAC5BpC,QAAQ0C,KAAoBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * A status bar with support for file information and busy and status indicators. This is a semi-generic\n * container; for the code that decides what content appears in the status bar, see client modules like\n * EditorStatusBar. (Although in practice StatusBar's HTML structure and initialization\n * assume it's only used for this one purpose, and all the APIs are on a singleton).\n */\ndefine(function (require, exports, module) {\n\n\n    var AppInit          = require(\"utils/AppInit\"),\n        StatusBarHTML    = require(\"text!widgets/StatusBar.html\"),\n        Strings          = require(\"strings\"),\n        WorkspaceManager = require(\"view/WorkspaceManager\"),\n        Mustache         = require(\"thirdparty/mustache/mustache\");\n\n    var _init = false;\n\n    // Indicates if the busy cursor is active to avoid unnecesary operations\n    var _busyCursor = false;\n\n    // A simple regexp to sanitize indicator ids\n    var _indicatorIDRegexp = new RegExp(\"[^a-zA-Z 0-9]+\", \"g\");\n\n    // These vars are initialized by the AppInit.htmlReady handler\n    // below since they refer to DOM elements\n    var $statusInfo,\n        $statusBar,\n        $indicators,\n        $busyIndicator;\n\n    /**\n     * Shows the 'busy' indicator\n     * @param {boolean} updateCursor Sets the cursor to \"wait\"\n     */\n    function showBusyIndicator(updateCursor) {\n        if (!_init) {\n            console.error(\"StatusBar API invoked before status bar created\");\n            return;\n        }\n\n        if (updateCursor) {\n            _busyCursor = true;\n            $(\"*\").addClass(\"busyCursor\");\n        }\n\n        $busyIndicator.addClass(\"spin\");\n    }\n\n    /**\n     * Hides the 'busy' indicator\n     */\n    function hideBusyIndicator() {\n        if (!_init) {\n            console.error(\"StatusBar API invoked before status bar created\");\n            return;\n        }\n\n        // Check if we are using the busyCursor class to avoid\n        // unnecesary calls to $('*').removeClass()\n        if (_busyCursor) {\n            _busyCursor = false;\n            $(\"*\").removeClass(\"busyCursor\");\n        }\n\n        $busyIndicator.removeClass(\"spin\");\n    }\n\n    /**\n     * Registers a new status indicator\n     * @param {string} id Registration id of the indicator to be updated.\n     * @param {(DOMNode|jQueryObject)=} indicator Optional DOMNode for the indicator\n     * @param {boolean=} visible Shows or hides the indicator over the statusbar.\n     * @param {string=} style Sets the attribute \"class\" of the indicator.\n     * @param {string=} tooltip Sets the attribute \"title\" of the indicator.\n     * @param {string=} insertBefore An id of an existing status bar indicator.\n     *          The new indicator will be inserted before (i.e. to the left of)\n     *          the indicator specified by this parameter.\n     */\n    function addIndicator(id, indicator, visible, style, tooltip, insertBefore) {\n        if (!_init) {\n            console.error(\"StatusBar API invoked before status bar created\");\n            return;\n        }\n\n        indicator = indicator || window.document.createElement(\"div\");\n        tooltip = tooltip || \"\";\n        style = style || \"\";\n        id = id.replace(_indicatorIDRegexp, \"-\") || \"\";\n\n        var $indicator = $(indicator);\n\n        $indicator.attr(\"id\", id);\n        $indicator.attr(\"title\", tooltip);\n        $indicator.addClass(\"indicator\");\n        $indicator.addClass(style);\n\n        if (!visible) {\n            $indicator.hide();\n        }\n\n        // This code looks backwards because the DOM model is ordered\n        // top-to-bottom but the UI view is ordered right-to-left. The concept\n        // of \"before\" in the model is \"after\" in the view, and vice versa.\n        if (insertBefore && $(\"#\" + insertBefore).length > 0) {\n            $indicator.insertAfter(\"#\" + insertBefore);\n        } else {\n            // No positioning is provided, put on left end of indicators, but\n            // to right of \"busy\" indicator (which is usually hidden).\n            var $busyIndicator = $(\"#status-bar .spinner\");\n            $indicator.insertBefore($busyIndicator);\n        }\n    }\n\n    /**\n     * Updates a status indicator\n     * @param {string} id Registration id of the indicator to be updated.\n     * @param {boolean} visible Shows or hides the indicator over the statusbar.\n     * @param {string=} style Sets the attribute \"class\" of the indicator.\n     * @param {string=} tooltip Sets the attribute \"title\" of the indicator.\n     */\n    function updateIndicator(id, visible, style, tooltip) {\n        if (!_init && !!brackets.test) {\n            console.error(\"StatusBar API invoked before status bar created\");\n            return;\n        }\n\n        var $indicator = $(\"#\" + id.replace(_indicatorIDRegexp, \"-\"));\n\n        if ($indicator) {\n\n            if (visible) {\n                $indicator.show();\n            } else {\n                $indicator.hide();\n            }\n\n            if (style) {\n                $indicator.removeClass();\n                $indicator.addClass(style);\n            } else {\n                $indicator.removeClass();\n                $indicator.addClass(\"indicator\");\n            }\n\n            if (tooltip) {\n                $indicator.attr(\"title\", tooltip);\n            }\n        }\n    }\n\n    /**\n     * Hide the statusbar Information Panel\n     */\n    function hideInformation() {\n        $statusInfo.css(\"display\", \"none\");\n    }\n\n    /**\n     * Show the statusbar Information Panel\n     */\n    function showInformation() {\n        $statusInfo.css(\"display\", \"\");\n    }\n\n    /**\n     * Hide the statusbar Indicators\n     */\n    function hideIndicators() {\n        $indicators.css(\"display\", \"none\");\n    }\n\n    /**\n     * Show the statusbar Indicators\n     */\n    function showIndicators() {\n        $indicators.css(\"display\", \"\");\n    }\n\n\n    /**\n     * Hides all panels but not the status bar\n     */\n    function hideAllPanes() {\n        hideInformation();\n        hideIndicators();\n    }\n\n    /**\n     * Shows all panels (will not show a hidden statusbar)\n     */\n    function showAllPanes() {\n        showInformation();\n        showIndicators();\n    }\n\n\n    /**\n     * Hide the statusbar\n     */\n    function hide() {\n        if (!_init) {\n            console.error(\"StatusBar API invoked before status bar created\");\n            return;\n        }\n\n        if ($statusBar.is(\":visible\")) {\n            $statusBar.hide();\n            WorkspaceManager.recomputeLayout();\n        }\n    }\n\n    /**\n     * Show the statusbar\n     */\n    function show() {\n        if (!_init) {\n            console.error(\"StatusBar API invoked before status bar created\");\n            return;\n        }\n\n        if (!$statusBar.is(\":visible\")) {\n            $statusBar.show();\n            WorkspaceManager.recomputeLayout();\n        }\n    }\n\n    AppInit.htmlReady(function () {\n        var $parent = $(\".main-view .content\");\n        $parent.append(Mustache.render(StatusBarHTML, Strings));\n\n        // Initialize items dependent on HTML DOM\n        $statusBar          = $(\"#status-bar\");\n        $indicators         = $(\"#status-indicators\");\n        $busyIndicator      = $(\"#status-bar .spinner\");\n        $statusInfo         = $(\"#status-info\");\n\n        _init = true;\n\n        // hide on init\n        hide();\n    });\n\n    exports.hideInformation   = hideInformation;\n    exports.showInformation   = showInformation;\n    exports.showBusyIndicator = showBusyIndicator;\n    exports.hideBusyIndicator = hideBusyIndicator;\n    exports.hideIndicators    = hideIndicators;\n    exports.showIndicators    = showIndicators;\n    exports.hideAllPanes      = hideAllPanes;\n    exports.showAllPanes      = showAllPanes;\n    exports.addIndicator      = addIndicator;\n    exports.updateIndicator   = updateIndicator;\n    exports.hide              = hide;\n    exports.show              = show;\n});\n"],"file":"StatusBar.js"}