{"version":3,"sources":["widgets/Dialogs.js"],"names":["define","require","exports","module","KeyBindingManager","KeyEvent","Strings","DialogTemplate","Mustache","DIALOG_BTN_CANCEL","DIALOG_BTN_OK","DIALOG_BTN_DONTSAVE","DIALOG_BTN_SAVE_AS","DIALOG_CANCELED","DIALOG_BTN_DOWNLOAD","DIALOG_BTN_CLASS_PRIMARY","DIALOG_BTN_CLASS_NORMAL","DIALOG_BTN_CLASS_LEFT","zIndex","_dismissDialog","$dlg","buttonId","data","modal","_processButton","autoDismiss","triggerHandler","_hasButton","find","length","_handleTab","event","$inputs","$","filter","stopEvent","stopPropagation","preventDefault","target","closest","shiftKey","focus","first","_keydownHook","e","$primaryBtn","this","which","String","fromCharCode","$focusedElement","inTextArea","tagName","inTypingField","DOM_VK_TAB","DOM_VK_ESCAPE","DOM_VK_RETURN","ctrlKey","DOM_VK_SPACE","click","brackets","platform","metaKey","DOM_VK_BACK_SPACE","DOM_VK_PERIOD","Dialog","promise","_$dlg","_promise","setDialogMaxSize","maxWidth","maxHeight","$dlgs","width","height","css","max-width","max-height","overflow","showModalDialogUsingTemplate","template","undefined","append","result","Deferred","addClass","appendTo","keydownHook","call","lastFocus","window","document","activeElement","one","setTimeout","resolve","remove","removeGlobalKeydownHook","$otherBtn","blur","addGlobalKeydownHook","attr","backdrop","show","selector","keyboard","next","showModalDialog","dlgClass","title","message","buttons","templateVars","className","id","text","OK","render","cancelModalDialogIfOpen","each","is","addLinkTooltips","elementOrDialog","$element","getElement","index","elem","$elem","url","prototype","getPromise","close","done","callback","addEventListener"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Utilities for creating and managing standard modal dialogs.\n */\ndefine(function (require, exports, module) {\n\n\n    require(\"utils/Global\");\n\n    var KeyBindingManager = require(\"command/KeyBindingManager\"),\n        KeyEvent          = require(\"utils/KeyEvent\"),\n        Strings           = require(\"strings\"),\n        DialogTemplate    = require(\"text!htmlContent/dialog-template.html\"),\n        Mustache          = require(\"thirdparty/mustache/mustache\");\n\n    /**\n     * Dialog Buttons IDs\n     * @const {string}\n     */\n    var DIALOG_BTN_CANCEL           = \"cancel\",\n        DIALOG_BTN_OK               = \"ok\",\n        DIALOG_BTN_DONTSAVE         = \"dontsave\",\n        DIALOG_BTN_SAVE_AS          = \"save_as\",\n        DIALOG_CANCELED             = \"_canceled\",\n        DIALOG_BTN_DOWNLOAD         = \"download\";\n\n    /**\n     * Dialog Buttons Class Names\n     * @const {string}\n     */\n    var DIALOG_BTN_CLASS_PRIMARY    = \"primary\",\n        DIALOG_BTN_CLASS_NORMAL     = \"\",\n        DIALOG_BTN_CLASS_LEFT       = \"left\";\n\n    /**\n     * The z-index used for the dialogs. Each new dialog increase this number by 2\n     * @type {number}\n     */\n    var zIndex = 1050;\n\n    /**\n     * @private\n     * Dismises a modal dialog\n     * @param {$.Element} $dlg\n     * @param {string} buttonId\n     */\n    function _dismissDialog($dlg, buttonId) {\n        $dlg.data(\"buttonId\", buttonId);\n        $dlg.modal(\"hide\");\n    }\n\n    /**\n     * @private\n     * If autoDismiss is true, then dismisses the dialog. Otherwise just raises an event that the\n     * given button was clicked.\n     * @param {$.Element} $dlg The dialog element to be dismissed.\n     * @param {string} buttonId The ID of the button that was clicked.\n     * @param {boolean} autoDismiss Whether to autodismiss the dialog on a button click.\n     */\n    function _processButton($dlg, buttonId, autoDismiss) {\n        if (autoDismiss) {\n            _dismissDialog($dlg, buttonId);\n        } else {\n            $dlg.triggerHandler(\"buttonClick\", buttonId);\n        }\n    }\n\n    /**\n     * @private\n     * Returns true if the modal dialog has a button with the given ID\n     * @param {$.Element} $dlg\n     * @param {string} buttonId\n     * @return {boolean}\n     */\n    function _hasButton($dlg, buttonId) {\n        return ($dlg.find(\"[data-button-id='\" + buttonId + \"']\").length > 0);\n    }\n\n\n    /**\n     * @private\n     * Handles the use of Tab so that it stays inside the Dialog\n     * @param {$.Event} event\n     * @param {$.Element} $dlg\n     */\n    function _handleTab(event, $dlg) {\n        var $inputs = $(\":input:enabled, a\", $dlg).filter(\":visible\");\n\n        function stopEvent() {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n        if ($(event.target).closest($dlg).length) {\n            // If it's the first or last tabbable element, focus the last/first element\n            if ((!event.shiftKey && event.target === $inputs[$inputs.length - 1]) ||\n                    (event.shiftKey && event.target === $inputs[0])) {\n                $inputs.filter(event.shiftKey ? \":last\" : \":first\").focus();\n                stopEvent();\n\n            // If there is no element to focus, don't let it focus outside of the dialog\n            } else if (!$inputs.length) {\n                stopEvent();\n            }\n\n        // If the focus left the dialog, focus the first element in the dialog\n        } else {\n            $inputs.first().focus();\n            stopEvent();\n        }\n    }\n\n\n    /**\n     * Handles the keyDown event for the dialogs\n     * @param {$.Event} e\n     * @param {boolean} autoDismiss\n     * @return {boolean}\n     */\n    var _keydownHook = function (e, autoDismiss) {\n        var $primaryBtn     = this.find(\".primary\"),\n            buttonId        = null,\n            which           = String.fromCharCode(e.which),\n            $focusedElement = this.find(\".dialog-button:focus, a:focus\");\n\n        function stopEvent() {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        // There might be a textfield in the dialog's UI; don't want to mistake normal typing for dialog dismissal\n        var inTextArea    = (e.target.tagName === \"TEXTAREA\"),\n            inTypingField = inTextArea || ($(e.target).filter(\":text, :password\").length > 0);\n\n        if (e.which === KeyEvent.DOM_VK_TAB) {\n            // We don't want to stopEvent() in this case since we might want the default behavior.\n            // _handleTab takes care of stopping/preventing default as necessary.\n            _handleTab(e, this);\n        } else if (e.which === KeyEvent.DOM_VK_ESCAPE) {\n            buttonId = DIALOG_BTN_CANCEL;\n        } else if (e.which === KeyEvent.DOM_VK_RETURN && (!inTextArea || e.ctrlKey)) {\n            // Enter key in single-line text input always dismisses; in text area, only Ctrl+Enter dismisses\n            // Click primary\n            stopEvent();\n            if (e.target.tagName === \"BUTTON\") {\n                this.find(e.target).click();\n            } else if (e.target.tagName !== \"INPUT\") {\n                // If the target element is not BUTTON or INPUT, click the primary button\n                // We're making an exception for INPUT element because of this issue: GH-11416\n                $primaryBtn.click();\n            }\n        } else if (e.which === KeyEvent.DOM_VK_SPACE) {\n            if ($focusedElement.length) {\n                // Space bar on focused button or link\n                stopEvent();\n                $focusedElement.click();\n            }\n        } else if (brackets.platform === \"mac\") {\n            // CMD+Backspace Don't Save\n            if (e.metaKey && (e.which === KeyEvent.DOM_VK_BACK_SPACE)) {\n                if (_hasButton(this, DIALOG_BTN_DONTSAVE)) {\n                    buttonId = DIALOG_BTN_DONTSAVE;\n                }\n            // FIXME (issue #418) CMD+. Cancel swallowed by native shell\n            } else if (e.metaKey && (e.which === KeyEvent.DOM_VK_PERIOD)) {\n                buttonId = DIALOG_BTN_CANCEL;\n            }\n        } else { // if (brackets.platform === \"win\") {\n            // 'N' Don't Save\n            if (which === \"N\" && !inTypingField) {\n                if (_hasButton(this, DIALOG_BTN_DONTSAVE)) {\n                    buttonId = DIALOG_BTN_DONTSAVE;\n                }\n            }\n        }\n\n        if (buttonId) {\n            stopEvent();\n            _processButton(this, buttonId, autoDismiss);\n        }\n\n        // Stop any other global hooks from processing the event (but\n        // allow it to continue bubbling if we haven't otherwise stopped it).\n        return true;\n    };\n\n\n\n    /**\n     * @constructor\n     * @private\n     *\n     * @param {$.Element} $dlg The dialog jQuery element\n     * @param {$.Promise} promise A promise that will be resolved with the ID of the clicked button when the dialog\n     *     is dismissed. Never rejected.\n     */\n    function Dialog($dlg, promise) {\n        this._$dlg    = $dlg;\n        this._promise = promise;\n    }\n\n    /**\n     * The dialog jQuery element\n     * @type {$.Element}\n     */\n    Dialog.prototype.getElement = function () {\n        return this._$dlg;\n    };\n\n    /**\n     * The dialog promise\n     * @type {$.Promise}\n     */\n    Dialog.prototype.getPromise = function () {\n        return this._promise;\n    };\n\n    /**\n     * Closes the dialog if is visible\n     */\n    Dialog.prototype.close = function () {\n        if (this._$dlg.is(\":visible\")) {   // Bootstrap breaks if try to hide dialog that's already hidden\n            _dismissDialog(this._$dlg, DIALOG_CANCELED);\n        }\n    };\n\n    /**\n     * Adds a done callback to the dialog promise\n     */\n    Dialog.prototype.done = function (callback) {\n        this._promise.done(callback);\n    };\n\n\n    /**\n     * Don't allow dialog to exceed viewport size\n     */\n    function setDialogMaxSize() {\n        var maxWidth, maxHeight,\n            $dlgs = $(\".modal-inner-wrapper > .instance\");\n\n        // Verify 1 or more modal dialogs are showing\n        if ($dlgs.length > 0) {\n            maxWidth  = $(\"body\").width();\n            maxHeight = $(\"body\").height();\n\n            $dlgs.css({\n                \"max-width\": maxWidth,\n                \"max-height\": maxHeight,\n                \"overflow\": \"auto\"\n            });\n        }\n    }\n\n    /**\n     * Creates a new modal dialog from a given template.\n     * The template can either be a string or a jQuery object representing a DOM node that is *not* in the current DOM.\n     *\n     * @param {string} template A string template or jQuery object to use as the dialog HTML.\n     * @param {boolean=} autoDismiss Whether to automatically dismiss the dialog when one of the buttons\n     *      is clicked. Default true. If false, you'll need to manually handle button clicks and the Esc\n     *      key, and dismiss the dialog yourself when ready by calling `close()` on the returned dialog.\n     * @return {Dialog}\n     */\n    function showModalDialogUsingTemplate(template, autoDismiss) {\n        if (autoDismiss === undefined) {\n            autoDismiss = true;\n        }\n\n        $(\"body\").append(\"<div class='modal-wrapper'><div class='modal-inner-wrapper'></div></div>\");\n\n        var result  = new $.Deferred(),\n            promise = result.promise(),\n            $dlg    = $(template)\n                .addClass(\"instance\")\n                .appendTo(\".modal-inner-wrapper:last\");\n\n        // Don't allow dialog to exceed viewport size\n        setDialogMaxSize();\n\n        // Save the dialog promise for unit tests\n        $dlg.data(\"promise\", promise);\n\n        var keydownHook = function (e) {\n            return _keydownHook.call($dlg, e, autoDismiss);\n        };\n\n        // Store current focus\n        var lastFocus = window.document.activeElement;\n\n        // Pipe dialog-closing notification back to client code\n        $dlg.one(\"hidden\", function () {\n            var buttonId = $dlg.data(\"buttonId\");\n            if (!buttonId) {    // buttonId will be undefined if closed via Bootstrap's \"x\" button\n                buttonId = DIALOG_BTN_CANCEL;\n            }\n\n            // Let call stack return before notifying that dialog has closed; this avoids issue #191\n            // if the handler we're triggering might show another dialog (as long as there's no\n            // fade-out animation)\n            window.setTimeout(function () {\n                result.resolve(buttonId);\n            }, 0);\n\n            // Remove the dialog instance from the DOM.\n            $dlg.remove();\n\n            // Remove our global keydown handler.\n            KeyBindingManager.removeGlobalKeydownHook(keydownHook);\n\n            // Restore previous focus\n            if (lastFocus) {\n                lastFocus.focus();\n            }\n\n            //Remove wrapper\n            $(\".modal-wrapper:last\").remove();\n        }).one(\"shown\", function () {\n            var $primaryBtn = $dlg.find(\".primary:enabled\"),\n                $otherBtn   = $dlg.find(\".modal-footer .dialog-button:enabled:eq(0)\");\n\n            // Set focus to the primary button, to any other button, or to the dialog depending\n            // if there are buttons\n            if ($primaryBtn.length) {\n                $primaryBtn.focus();\n            } else if ($otherBtn.length) {\n                $otherBtn.focus();\n            } else {\n                window.document.activeElement.blur();\n            }\n\n            // Push our global keydown handler onto the global stack of handlers.\n            KeyBindingManager.addGlobalKeydownHook(keydownHook);\n        });\n\n        // Click handler for buttons\n        $dlg.one(\"click\", \".dialog-button\", function (e) {\n            _processButton($dlg, $(this).attr(\"data-button-id\"), autoDismiss);\n        });\n\n        // Run the dialog\n        $dlg\n            .modal({\n                backdrop: \"static\",\n                show: true,\n                selector: \".modal-inner-wrapper:last\",\n                keyboard: false // handle the ESC key ourselves so we can deal with nested dialogs\n            })\n            // Updates the z-index of the modal dialog and the backdrop\n            .css(\"z-index\", zIndex + 1)\n            .next()\n            .css(\"z-index\", zIndex);\n\n        zIndex += 2;\n\n        return (new Dialog($dlg, promise));\n    }\n\n\n    /**\n     * Creates a new general purpose modal dialog using the default template and the template variables given\n     * as parameters as described.\n     *\n     * @param {string} dlgClass A class name identifier for the dialog. Typically one of DefaultDialogs.*\n     * @param {string=} title The title of the dialog. Can contain HTML markup. Defaults to \"\".\n     * @param {string=} message The message to display in the dialog. Can contain HTML markup. Defaults to \"\".\n     * @param {Array.<{className: string, id: string, text: string}>=} buttons An array of buttons where each button\n     *      has a class, id and text property. The id is used in \"data-button-id\". Defaults to a single Ok button.\n     *      Typically className is one of DIALOG_BTN_CLASS_*, id is one of DIALOG_BTN_*\n     * @param {boolean=} autoDismiss Whether to automatically dismiss the dialog when one of the buttons\n     *      is clicked. Default true. If false, you'll need to manually handle button clicks and the Esc\n     *      key, and dismiss the dialog yourself when ready by calling `close()` on the returned dialog.\n     * @return {Dialog}\n     */\n    function showModalDialog(dlgClass, title, message, buttons, autoDismiss) {\n        var templateVars = {\n            dlgClass: dlgClass,\n            title: title   || \"\",\n            message: message || \"\",\n            buttons: buttons || [{ className: DIALOG_BTN_CLASS_PRIMARY, id: DIALOG_BTN_OK, text: Strings.OK }]\n        };\n        var template = Mustache.render(DialogTemplate, templateVars);\n\n        return showModalDialogUsingTemplate(template, autoDismiss);\n    }\n\n    /**\n     * Immediately closes any dialog instances with the given class. The dialog callback for each instance will\n     * be called with the special buttonId DIALOG_CANCELED (note: callback is run asynchronously).\n     * @param {string} dlgClass The class name identifier for the dialog.\n     * @param {string=} buttonId The button id to use when closing the dialog. Defaults to DIALOG_CANCELED\n     */\n    function cancelModalDialogIfOpen(dlgClass, buttonId) {\n        $(\".\" + dlgClass + \".instance\").each(function () {\n            if ($(this).is(\":visible\")) {   // Bootstrap breaks if try to hide dialog that's already hidden\n                _dismissDialog($(this), buttonId || DIALOG_CANCELED);\n            }\n        });\n    }\n\n    /**\n     * Ensures that all <a> tags with a URL have a tooltip showing the same URL\n     * @param {!jQueryObject|Dialog} elementOrDialog  Dialog intance, or root of other DOM tree to add tooltips to\n     */\n    function addLinkTooltips(elementOrDialog) {\n        var $element;\n        if (elementOrDialog.getElement) {\n            $element = elementOrDialog.getElement().find(\".dialog-message\");\n        } else {\n            $element = elementOrDialog;\n        }\n        $element.find(\"a\").each(function (index, elem) {\n            var $elem = $(elem);\n            var url = $elem.attr(\"href\");\n            if (url && url !== \"#\" && !$elem.attr(\"title\")) {\n                $elem.attr(\"title\", url);\n            }\n        });\n    }\n\n    window.addEventListener(\"resize\", setDialogMaxSize);\n\n    exports.DIALOG_BTN_CANCEL            = DIALOG_BTN_CANCEL;\n    exports.DIALOG_BTN_OK                = DIALOG_BTN_OK;\n    exports.DIALOG_BTN_DONTSAVE          = DIALOG_BTN_DONTSAVE;\n    exports.DIALOG_BTN_SAVE_AS           = DIALOG_BTN_SAVE_AS;\n    exports.DIALOG_CANCELED              = DIALOG_CANCELED;\n    exports.DIALOG_BTN_DOWNLOAD          = DIALOG_BTN_DOWNLOAD;\n\n    exports.DIALOG_BTN_CLASS_PRIMARY     = DIALOG_BTN_CLASS_PRIMARY;\n    exports.DIALOG_BTN_CLASS_NORMAL      = DIALOG_BTN_CLASS_NORMAL;\n    exports.DIALOG_BTN_CLASS_LEFT        = DIALOG_BTN_CLASS_LEFT;\n\n    exports.showModalDialog              = showModalDialog;\n    exports.showModalDialogUsingTemplate = showModalDialogUsingTemplate;\n    exports.cancelModalDialogIfOpen      = cancelModalDialogIfOpen;\n    exports.addLinkTooltips              = addLinkTooltips;\n});\n"],"file":"Dialogs.js"}