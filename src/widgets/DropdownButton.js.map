{"version":3,"sources":["widgets/DropdownButton.js"],"names":["define","require","exports","module","DropdownEventHandler","EventDispatcher","WorkspaceManager","Menus","ViewUtils","_","DropdownButton","label","items","itemRenderer","this","_onClick","bind","closeDropdown","_onClickOutside","$button","$","text","on","makeEventDispatcher","prototype","$dropdown","dropdownExtraClasses","_lastFocus","_dropdownEventHandler","event","hasClass","toggleDropdown","stopPropagation","setButtonLabel","item","index","escape","String","_renderList","parent","html","forEach","i","rendered","itemHtml","disabledClass","enabled","append","trigger","reRegisterMouseHandlers","refresh","remove","setChecked","checked","listItems","count","length","toggleClass","showDropdown","closeAll","addClass","css","outerWidth","appendTo","data","toggleOffset","offset","posLeft","left","posTop","top","outerHeight","elementRect","height","width","clip","getElementClipSize","window","bottom","Math","max","dropdownElement","scrollWidth","offsetWidth","clientWidth","right","_onSelect","_onDropdownClose","open","document","body","addEventListener","activeElement","focus","removeEventListener","off","close","$container","target","closest","is","preventDefault","$link","itemIndex","Number"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2021 - present core.ai . All rights reserved.\n *  Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Button that opens a dropdown list when clicked. More akin to a popup menu than a combobox. Compared to a\n * simple <select> element:\n *  - There's no \"selected\" state\n *  - The button's label is not automatically changed when an item in the list is clicked\n *  - Its width is not the max of all the dropdown items' labels\n *  - The button & dropdown's appearance can be customized far more\n * Events\n *  - listRendered -- This event is dispatched after the entire list is rendered so that custom event handlers can be\n *                    set up for any custom UI in the list.\n *\n * TODO: merge DropdownEventHandler into this? Are there any other widgets that might want to use it separately?\n *\n */\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var DropdownEventHandler    = require(\"utils/DropdownEventHandler\").DropdownEventHandler,\n        EventDispatcher         = require(\"utils/EventDispatcher\"),\n        WorkspaceManager        = require(\"view/WorkspaceManager\"),\n        Menus                   = require(\"command/Menus\"),\n        ViewUtils               = require(\"utils/ViewUtils\"),\n        _                       = require(\"thirdparty/lodash\");\n\n    /**\n     * Creates a single dropdown-button instance. The DOM node is created but not attached to\n     * the document anywhere - clients should append this.$button to the appropriate location.\n     *\n     * DropdownButton dispatches the following events:\n     *  - \"select\" - when an option in the dropdown is clicked. Passed item object and index.\n     *\n     * @param {!string} label  Label to display on the button\n     * @param {!Array.<*>} items  Items in the dropdown list. It generally doesn't matter what type/value the\n     *          items have, except that any item === \"---\" will be treated as a divider. Such items are not\n     *          clickable and itemRenderer() will not be called for them.\n     * @param {?function(*, number):!string|{html:string, enabled:boolean} itemRenderer  Optional function to\n     *          convert a single item to HTML (see itemRenderer() docs below). If not provided, items are\n     *          assumed to be plain text strings.\n     */\n    function DropdownButton(label, items, itemRenderer) {\n        this.items = items;\n\n        this.itemRenderer = itemRenderer || this.itemRenderer;\n\n        this._onClick        = this._onClick.bind(this);\n        this.closeDropdown   = this.closeDropdown.bind(this);\n        this._onClickOutside = this._onClickOutside.bind(this);\n\n        this.$button = $(\"<button class='btn btn-dropdown'/>\")\n            .text(label)\n            .on(\"click\", this._onClick);\n    }\n    EventDispatcher.makeEventDispatcher(DropdownButton.prototype);\n\n    /**\n     * Items in dropdown list - may be changed any time dropdown isn't open\n     * @type {!Array.<*>}\n     */\n    DropdownButton.prototype.items = null;\n\n    /**\n     * The clickable button. Available as soon as the DropdownButton is constructed.\n     * @type {!jQueryObject}\n     */\n    DropdownButton.prototype.$button = null;\n\n    /**\n     * The dropdown element. Only non-null while open.\n     * @type {?jQueryObject}\n     */\n    DropdownButton.prototype.$dropdown = null;\n\n    /**\n     * Extra CSS class(es) to apply to $dropdown\n     * @type {?string}\n     */\n    DropdownButton.prototype.dropdownExtraClasses = null;\n\n    /**\n     * @private\n     * Where to restore focus when dropdown closed\n     * @type {?HTMLElement}\n     */\n    DropdownButton.prototype._lastFocus = null;\n\n    /**\n     * @private\n     * Helper object for dropdown. Only non-null while open.\n     * @type {?DropdownEventHandler}\n     */\n    DropdownButton.prototype._dropdownEventHandler = null;\n\n\n    /**\n     * @private\n     * Handle clicking button\n     */\n    DropdownButton.prototype._onClick = function (event) {\n        if (!this.$button.hasClass(\"disabled\")) {\n            this.toggleDropdown();\n        }\n        // Indicate click was handled (e.g. to shield from MultiRangeInlineEditor._onClick())\n        event.stopPropagation();\n    };\n\n    /**\n     * Update the button label.\n     * @param {string} label\n     */\n    DropdownButton.prototype.setButtonLabel = function (label) {\n        if (!this.$button) {\n            return;\n        }\n        $(this.$button).text(label);\n    };\n\n    /**\n     * Called for each item when rendering the dropdown.\n     * @param {*} item from items array\n     * @param {number} index in items array\n     * @return {!string|{html:string, enabled:boolean}} Formatted & escaped HTML, either as a simple string\n     *      or as the 'html' field in an object that also conveys enabled state. Disabled items inherit gray\n     *      text color and cannot be selected.\n     */\n    DropdownButton.prototype.itemRenderer = function (item, index) {\n        return _.escape(String(item));\n    };\n\n    /**\n     * Converts the list of item objects into HTML list items in format required by DropdownEventHandler\n     * @param {!jQueryObject} parent The dropdown element\n     * @return {!jQueryObject} The dropdown element with the rendered list items appended.\n     */\n    DropdownButton.prototype._renderList = function (parent) {\n        if (!parent) {\n            return null;\n        }\n\n        var html = \"\";\n        this.items.forEach(function (item, i) {\n            if (item === \"---\") {\n                html += \"<li class='divider'></li>\";\n            } else {\n                var rendered = this.itemRenderer(item, i),\n                    itemHtml = rendered.html || rendered,\n                    disabledClass = (rendered.html && !rendered.enabled) ? \"disabled\" : \"\";\n\n                html += \"<li><a class='stylesheet-link \" + disabledClass + \"' data-index='\" + i + \"'>\";\n                html += itemHtml;\n                html += \"</a></li>\";\n            }\n        }.bind(this));\n\n        parent.append(html);\n\n        // Also trigger listRendered handler so that custom event handlers can be\n        // set up for any custom UI in the list.\n        this.trigger(\"listRendered\", parent);\n\n        // Also need to re-register mouse event handlers with the updated list.\n        if (this._dropdownEventHandler) {\n            this._dropdownEventHandler.reRegisterMouseHandlers(parent);\n        }\n\n        return parent;\n    };\n\n    /**\n     * Refresh the dropdown list by removing and re-creating all list items.\n     * Call this after deleting/adding any item in the dropdown list.\n     */\n    DropdownButton.prototype.refresh = function () {\n        if (!this.$dropdown) {\n            return;\n        }\n\n        // Remove all list items and then re-create them from this.items.\n        $(\"li\", this.$dropdown).remove();\n        this._renderList(this.$dropdown);\n    };\n\n    /**\n     * Check/Uncheck the list item of the given index.\n     * @param {number} index The index of the list item to be checked or unchecked\n     * @param {boolean} checked True if the list item is to be checked, false to get check\n     *    mark removed.\n     */\n    DropdownButton.prototype.setChecked = function (index, checked) {\n        if (!this.$dropdown) {\n            return;\n        }\n\n        var listItems = $(\"li\", this.$dropdown),\n            count     = listItems.length;\n\n        if (index > -1 && index < count) {\n            $(\"a\", listItems[index]).toggleClass(\"checked\", checked);\n        }\n    };\n\n    /** Pops open the dropdown if currently closed. Does nothing if items.length == 0 */\n    DropdownButton.prototype.showDropdown = function () {\n        // Act like a plain old button if no items to show\n        if (!this.items.length) {\n            return;\n        }\n\n        if (this.$dropdown) {\n            return;\n        }\n\n        Menus.closeAll();\n\n        var $dropdown = $(\"<ul class='dropdown-menu dropdownbutton-popup' tabindex='-1'>\")\n            .addClass(this.dropdownExtraClasses)  // (no-op if unspecified)\n            .css(\"min-width\", this.$button.outerWidth());  // do this before the clipping calcs below\n\n        this.$dropdown = $dropdown;\n        this._renderList(this.$dropdown)\n            .appendTo($(\"body\"))\n            .data(\"attached-to\", this.$button[0]);  // keep ModalBar open while dropdown focused\n\n        // Calculate position of dropdown\n        var toggleOffset = this.$button.offset(),\n            posLeft      = toggleOffset.left,\n            posTop       = toggleOffset.top + this.$button.outerHeight(),\n            elementRect  = {\n                top: posTop,\n                left: posLeft,\n                height: $dropdown.height(),\n                width: $dropdown.width()\n            },\n            clip = ViewUtils.getElementClipSize($(window), elementRect);\n\n        if (clip.bottom > 0) {\n            // Bottom is clipped, so move entire menu above button\n            posTop = Math.max(0, toggleOffset.top - $dropdown.height() - 4);\n        }\n\n        // Take in consideration the scrollbar to prevent unexpected behaviours (see #10963).\n        var dropdownElement = this.$dropdown[0];\n        var scrollWidth = dropdownElement.offsetWidth - dropdownElement.clientWidth + 1;\n\n        if (clip.right > 0) {\n            // Right is clipped, so adjust left to fit menu in editor.\n            posLeft = Math.max(0, posLeft - clip.right - scrollWidth);\n        }\n\n        $dropdown.css({\n            left: posLeft,\n            top: posTop,\n            width: $dropdown.width() + scrollWidth\n        });\n\n        // Attach event handlers\n        this._dropdownEventHandler = new DropdownEventHandler($dropdown, this._onSelect.bind(this), this._onDropdownClose.bind(this));\n        this._dropdownEventHandler.open();\n\n        window.document.body.addEventListener(\"mousedown\", this._onClickOutside, true);\n        WorkspaceManager.on(\"workspaceUpdateLayout\", this.closeDropdown);\n\n        // Manage focus\n        this._lastFocus = window.document.activeElement;\n        $dropdown.focus();\n    };\n\n    /**\n     * @private\n     * Clean up event handlers after dropdown closed & dispose old dropdown DOM. Called regardless of how the dropdown\n     * was closed.\n     */\n    DropdownButton.prototype._onDropdownClose = function () {\n        window.document.body.removeEventListener(\"mousedown\", this._onClickOutside, true);\n        WorkspaceManager.off(\"workspaceUpdateLayout\", this.closeDropdown);\n\n        // Restore focus to old pos, unless \"select\" handler changed it\n        if (window.document.activeElement === this.$dropdown[0]) {\n            this._lastFocus.focus();\n        }\n\n        this._dropdownEventHandler = null;\n        this.$dropdown = null;  // already remvoed from DOM automatically by PopUpManager\n    };\n\n    /** Closes the dropdown if currently open */\n    DropdownButton.prototype.closeDropdown = function () {\n        if (this._dropdownEventHandler) {\n            this._dropdownEventHandler.close();\n        }\n    };\n\n    /**\n     * @private\n     * Clicking outside the dropdown closes it\n     */\n    DropdownButton.prototype._onClickOutside = function (event) {\n        var $container = $(event.target).closest(\".dropdownbutton-popup\");\n\n        // If click is outside dropdown list or dropdown button, then close dropdown list\n        if (!$(event.target).is(this.$button) &&\n                ($container.length === 0 || $container[0] !== this.$dropdown[0])) {\n            this.closeDropdown();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    };\n\n    /** Opens the dropdown if closed; closes it if open */\n    DropdownButton.prototype.toggleDropdown = function () {\n        if (this.$dropdown) {\n            this.closeDropdown();\n        } else {\n            this.showDropdown();\n        }\n    };\n\n    /**\n     * @private\n     * Callback from DropdownEventHandler when item in dropdown list is selected (via mouse or keyboard)\n     * @param {!jQueryObject} $link  The `a` element selected\n     */\n    DropdownButton.prototype._onSelect = function ($link) {\n        var itemIndex = Number($link.data(\"index\"));\n        this.trigger(\"select\", this.items[itemIndex], itemIndex);\n    };\n\n\n    exports.DropdownButton = DropdownButton;\n});\n"],"file":"DropdownButton.js"}