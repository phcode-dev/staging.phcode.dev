{"version":3,"sources":["widgets/DropdownButton.js"],"names":["define","require","exports","module","DropdownEventHandler","EventDispatcher","WorkspaceManager","Menus","ViewUtils","_","EVENT_SELECTED","EVENT_LIST_RENDERED","EVENT_DROPDOWN_SHOWN","EVENT_DROPDOWN_CLOSED","DropdownButton","label","items","itemRenderer","options","this","enableFilter","customFilter","_onClick","bind","closeDropdown","_onClickOutside","$button","$","text","on","makeEventDispatcher","prototype","itemsSearchFilterText","$dropdown","dropdownExtraClasses","_lastFocus","_dropdownEventHandler","event","hasClass","toggleDropdown","stopPropagation","setButtonLabel","item","index","escape","String","_renderList","parent","self","html","searchStr","forEach","i","rendered","itemHtml","disabledClass","enabled","append","trigger","reRegisterMouseHandlers","refresh","remove","setChecked","checked","listItems","count","length","toggleClass","showDropdown","closeAll","addClass","css","outerWidth","appendTo","data","toggleOffset","offset","posLeft","left","posTop","top","outerHeight","elementRect","height","width","clip","getElementClipSize","window","bottom","Math","max","dropdownElement","scrollWidth","offsetWidth","clientWidth","right","_onSelect","_onDropdownClose","_onKeyDown","open","document","body","addEventListener","activeElement","focus","removeEventListener","off","filterDropdown","searchString","$stickyLi","find","itemText","$liElementAtIndex","shouldShow","toLowerCase","includes","removeClass","ctrlKey","metaKey","key","Phoenix","app","clipboardReadText","then","stopImmediatePropagation","preventDefault","slice","close","$container","target","closest","is","$link","itemIndex","Number"],"mappings":"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","sourcesContent":["/*\n *  Copyright (c) 2021 - present core.ai . All rights reserved.\n *  Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Button that opens a dropdown list when clicked. More akin to a popup menu than a combobox. Compared to a\n * simple <select> element:\n *  - There's no \"selected\" state\n *  - The button's label is not automatically changed when an item in the list is clicked\n *  - Its width is not the max of all the dropdown items' labels\n *  - The button & dropdown's appearance can be customized far more\n * Events\n *  - listRendered -- This event is dispatched after the entire list is rendered so that custom event handlers can be\n *                    set up for any custom UI in the list.\n *\n * TODO: merge DropdownEventHandler into this? Are there any other widgets that might want to use it separately?\n *\n */\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    const DropdownEventHandler    = require(\"utils/DropdownEventHandler\").DropdownEventHandler,\n        EventDispatcher         = require(\"utils/EventDispatcher\"),\n        WorkspaceManager        = require(\"view/WorkspaceManager\"),\n        Menus                   = require(\"command/Menus\"),\n        ViewUtils               = require(\"utils/ViewUtils\"),\n        _                       = require(\"thirdparty/lodash\");\n\n    const EVENT_SELECTED = \"select\",\n        EVENT_LIST_RENDERED = \"listRendered\",\n        EVENT_DROPDOWN_SHOWN = \"shown\",\n        EVENT_DROPDOWN_CLOSED = \"closed\";\n\n    /**\n     * Creates a single dropdown-button instance. The DOM node is created but not attached to\n     * the document anywhere - clients should append this.$button to the appropriate location.\n     *\n     * DropdownButton dispatches the following events:\n     *  - \"select\" - when an option in the dropdown is clicked. Passed item object and index.\n     *\n     * @param {!string} label  Label to display on the button\n     * @param {!Array.<*>} items  Items in the dropdown list. It generally doesn't matter what type/value the\n     *          items have, except that any item === \"---\" will be treated as a divider. Such items are not\n     *          clickable and itemRenderer() will not be called for them.\n     * @param {?function(*, number):!string|{html:string, enabled:boolean} itemRenderer  Optional function to\n     *          convert a single item to HTML (see itemRenderer() docs below). If not provided, items are\n     *          assumed to be plain text strings.\n     * @param {Object?} options\n     * @param {boolean?} options.enableFilter - true if you need to enable filter by typing\n     * @param {function(userSearchText, elementText, elementIndex)?} options.customFilter - Optional. When `enableFilter`\n     *      is enabled, this function is used as a custom filtering callback. It receives the user's search text, the\n     *      text of the element being filtered, and the element's index. Return `true` to display the list item, or `false` to hide it.\n     */\n    function DropdownButton(label, items, itemRenderer, options) {\n        this.items = items;\n        options = options || {};\n        this.enableFilter = (typeof options.enableFilter === 'boolean' ? options.enableFilter : true);\n        this.customFilter = options.customFilter;\n\n        this.itemRenderer = itemRenderer || this.itemRenderer;\n\n        this._onClick        = this._onClick.bind(this);\n        this.closeDropdown   = this.closeDropdown.bind(this);\n        this._onClickOutside = this._onClickOutside.bind(this);\n\n        this.$button = $(\"<button class='btn btn-dropdown'/>\")\n            .text(label)\n            .on(\"click\", this._onClick);\n    }\n    EventDispatcher.makeEventDispatcher(DropdownButton.prototype);\n\n    /**\n     * Items in dropdown list - may be changed any time dropdown isn't open\n     * @type {!Array.<*>}\n     */\n    DropdownButton.prototype.items = null;\n\n    /**\n     * This is filter text corresponding to each items. it will be used to filter the items based on\n     * the keyboard key presses the user does to enter search filter in popup.\n     * @type {null}\n     */\n    DropdownButton.prototype.itemsSearchFilterText = null;\n\n    /**\n     * The clickable button. Available as soon as the DropdownButton is constructed.\n     * @type {!jQueryObject}\n     */\n    DropdownButton.prototype.$button = null;\n\n    /**\n     * The dropdown element. Only non-null while open.\n     * @type {?jQueryObject}\n     */\n    DropdownButton.prototype.$dropdown = null;\n\n    /**\n     * Extra CSS class(es) to apply to $dropdown\n     * @type {?string}\n     */\n    DropdownButton.prototype.dropdownExtraClasses = null;\n\n    /**\n     * @private\n     * Where to restore focus when dropdown closed\n     * @type {?HTMLElement}\n     */\n    DropdownButton.prototype._lastFocus = null;\n\n    /**\n     * @private\n     * Helper object for dropdown. Only non-null while open.\n     * @type {?DropdownEventHandler}\n     */\n    DropdownButton.prototype._dropdownEventHandler = null;\n\n\n    /**\n     * @private\n     * Handle clicking button\n     */\n    DropdownButton.prototype._onClick = function (event) {\n        if (!this.$button.hasClass(\"disabled\")) {\n            this.toggleDropdown();\n        }\n        // Indicate click was handled (e.g. to shield from MultiRangeInlineEditor._onClick())\n        event.stopPropagation();\n    };\n\n    /**\n     * Update the button label.\n     * @param {string} label\n     */\n    DropdownButton.prototype.setButtonLabel = function (label) {\n        if (!this.$button) {\n            return;\n        }\n        $(this.$button).text(label);\n    };\n\n    /**\n     * Called for each item when rendering the dropdown.\n     * @param {*} item from items array\n     * @param {number} index in items array\n     * @return {!string|{html:string, enabled:boolean}} Formatted & escaped HTML, either as a simple string\n     *      or as the 'html' field in an object that also conveys enabled state. Disabled items inherit gray\n     *      text color and cannot be selected.\n     */\n    DropdownButton.prototype.itemRenderer = function (item, index) {\n        return _.escape(String(item));\n    };\n\n    /**\n     * Converts the list of item objects into HTML list items in format required by DropdownEventHandler\n     * @param {!jQueryObject} parent The dropdown element\n     * @return {!jQueryObject} The dropdown element with the rendered list items appended.\n     */\n    DropdownButton.prototype._renderList = function (parent) {\n        if (!parent) {\n            return null;\n        }\n\n        const self = this;\n        this.itemsSearchFilterText = [];\n        let html = \"\";\n        this.searchStr = \"\";\n        if(self.enableFilter){\n            html = `<li class=\"sticky-li-top forced-hidden\"><a class='stylesheet-link'><i class=\"fa fa-search\" aria-hidden=\"true\"></i>&nbsp;&nbsp;<span class=\"searchTextSpan\"></span></a></li>`;\n        }\n        this.items.forEach(function (item, i) {\n            self.itemsSearchFilterText[i] = \"\";\n            if (item === \"---\") {\n                html += \"<li class='divider'></li>\";\n            } else {\n                let rendered = self.itemRenderer(item, i),\n                    itemHtml = rendered.html || rendered || \"\",\n                    disabledClass = (rendered.html && !rendered.enabled) ? \"disabled\" : \"\";\n\n                itemHtml = `<li data-index='${i}'><a class='stylesheet-link ${disabledClass}' data-index='${i}'>${itemHtml}</a></li>`;\n                self.itemsSearchFilterText[i] = $(itemHtml).text();\n                html += itemHtml;\n            }\n        }.bind(this));\n\n        parent.append(html);\n\n        // Also trigger listRendered handler so that custom event handlers can be\n        // set up for any custom UI in the list.\n        this.trigger(EVENT_LIST_RENDERED, parent);\n\n        // Also need to re-register mouse event handlers with the updated list.\n        if (this._dropdownEventHandler) {\n            this._dropdownEventHandler.reRegisterMouseHandlers(parent);\n        }\n\n        return parent;\n    };\n\n    /**\n     * Refresh the dropdown list by removing and re-creating all list items.\n     * Call this after deleting/adding any item in the dropdown list.\n     */\n    DropdownButton.prototype.refresh = function () {\n        if (!this.$dropdown) {\n            return;\n        }\n\n        // Remove all list items and then re-create them from this.items.\n        $(\"li\", this.$dropdown).remove();\n        this._renderList(this.$dropdown);\n    };\n\n    /**\n     * Check/Uncheck the list item of the given index.\n     * @param {number} index The index of the list item to be checked or unchecked\n     * @param {boolean} checked True if the list item is to be checked, false to get check\n     *    mark removed.\n     */\n    DropdownButton.prototype.setChecked = function (index, checked) {\n        if (!this.$dropdown) {\n            return;\n        }\n\n        var listItems = $(\"li\", this.$dropdown),\n            count     = listItems.length;\n\n        if (index > -1 && index < count) {\n            $(\"a\", listItems[index]).toggleClass(\"checked\", checked);\n        }\n    };\n\n    /** Pops open the dropdown if currently closed. Does nothing if items.length == 0 */\n    DropdownButton.prototype.showDropdown = function () {\n        // Act like a plain old button if no items to show\n        if (!this.items.length) {\n            return;\n        }\n\n        if (this.$dropdown) {\n            return;\n        }\n\n        Menus.closeAll();\n        this.searchStr = \"\";\n        var $dropdown = $(\"<ul class='dropdown-menu dropdownbutton-popup' tabindex='-1'>\")\n            .addClass(this.dropdownExtraClasses)  // (no-op if unspecified)\n            .css(\"min-width\", this.$button.outerWidth());  // do this before the clipping calcs below\n\n        this.$dropdown = $dropdown;\n        this._renderList(this.$dropdown)\n            .appendTo($(\"body\"))\n            .data(\"attached-to\", this.$button[0]);  // keep ModalBar open while dropdown focused\n\n        // Calculate position of dropdown\n        var toggleOffset = this.$button.offset(),\n            posLeft      = toggleOffset.left,\n            posTop       = toggleOffset.top + this.$button.outerHeight(),\n            elementRect  = {\n                top: posTop,\n                left: posLeft,\n                height: $dropdown.height(),\n                width: $dropdown.width()\n            },\n            clip = ViewUtils.getElementClipSize($(window), elementRect);\n\n        if (clip.bottom > 0) {\n            // Bottom is clipped, so move entire menu above button\n            posTop = Math.max(0, toggleOffset.top - $dropdown.height() - 4);\n        }\n\n        // Take in consideration the scrollbar to prevent unexpected behaviours (see #10963).\n        var dropdownElement = this.$dropdown[0];\n        var scrollWidth = dropdownElement.offsetWidth - dropdownElement.clientWidth + 1;\n\n        if (clip.right > 0) {\n            // Right is clipped, so adjust left to fit menu in editor.\n            posLeft = Math.max(0, posLeft - clip.right - scrollWidth);\n        }\n\n        $dropdown.css({\n            left: posLeft,\n            top: posTop,\n            width: $dropdown.width() + scrollWidth\n        });\n\n        // Attach event handlers\n        this._dropdownEventHandler = new DropdownEventHandler($dropdown, this._onSelect.bind(this),\n            this._onDropdownClose.bind(this), this._onKeyDown.bind(this));\n        this._dropdownEventHandler.open();\n\n        window.document.body.addEventListener(\"mousedown\", this._onClickOutside, true);\n        WorkspaceManager.on(\"workspaceUpdateLayout\", this.closeDropdown);\n\n        // Manage focus\n        this._lastFocus = window.document.activeElement;\n        $dropdown.focus();\n        this.trigger(EVENT_DROPDOWN_SHOWN);\n    };\n\n    /**\n     * @private\n     * Clean up event handlers after dropdown closed & dispose old dropdown DOM. Called regardless of how the dropdown\n     * was closed.\n     */\n    DropdownButton.prototype._onDropdownClose = function () {\n        window.document.body.removeEventListener(\"mousedown\", this._onClickOutside, true);\n        WorkspaceManager.off(\"workspaceUpdateLayout\", this.closeDropdown);\n\n        // Restore focus to old pos, unless \"select\" handler changed it\n        if (window.document.activeElement === this.$dropdown[0]) {\n            this._lastFocus.focus();\n        }\n\n        this._dropdownEventHandler = null;\n        this.$dropdown = null;  // already remvoed from DOM automatically by PopUpManager\n        this.trigger(EVENT_DROPDOWN_CLOSED);\n    };\n\n    /**\n     * hides all elements in popup that doesn't match the given search string, also shows the search bar in popup\n     * @param searchString\n     */\n    DropdownButton.prototype.filterDropdown = function (searchString) {\n        this.searchStr = searchString;\n        const $stickyLi = this.$dropdown.find('li.sticky-li-top');\n        for(let i=0; i<this.itemsSearchFilterText.length; i++){\n            const itemText = this.itemsSearchFilterText[i];\n            const $liElementAtIndex = this.$dropdown.find(`li[data-index='${i}']`);\n            let shouldShow = itemText && itemText.toLowerCase().includes(searchString.toLowerCase());\n            if(this.customFilter){\n                shouldShow = this.customFilter(searchString, itemText, i);\n            }\n            if(shouldShow){\n                $liElementAtIndex.removeClass('forced-hidden');\n            } else {\n                $liElementAtIndex.addClass('forced-hidden');\n            }\n        }\n        if(searchString) {\n            $stickyLi.removeClass('forced-hidden');\n            $stickyLi.find('.searchTextSpan').text(searchString);\n        } else {\n            $stickyLi.addClass('forced-hidden');\n        }\n    };\n\n    DropdownButton.prototype._onKeyDown = function (event) {\n        if(!this.enableFilter){\n            return false;\n        }\n        const self = this;\n        if((event.ctrlKey || event.metaKey) && event.key === 'v') {\n            Phoenix.app.clipboardReadText().then(text=>{\n                self.searchStr += text;\n                self.filterDropdown(this.searchStr);\n            });\n            event.stopImmediatePropagation();\n            event.preventDefault();\n            return true;\n        } else if (event.key.length === 1) {\n            this.searchStr += event.key;\n        } else if (event.key === 'Backspace') {\n            // Remove the last character when Backspace is pressed\n            this.searchStr  = this.searchStr.slice(0, -1);\n        } else {\n            // bubble up, not for us to handle\n            return false;\n        }\n        this.filterDropdown(this.searchStr);\n        event.stopImmediatePropagation();\n        event.preventDefault();\n        return true;\n    };\n\n    /** Closes the dropdown if currently open */\n    DropdownButton.prototype.closeDropdown = function () {\n        if (this._dropdownEventHandler) {\n            this._dropdownEventHandler.close();\n        }\n    };\n\n    /**\n     * @private\n     * Clicking outside the dropdown closes it\n     */\n    DropdownButton.prototype._onClickOutside = function (event) {\n        var $container = $(event.target).closest(\".dropdownbutton-popup\");\n\n        // If click is outside dropdown list or dropdown button, then close dropdown list\n        if (!$(event.target).is(this.$button) &&\n                ($container.length === 0 || $container[0] !== this.$dropdown[0])) {\n            this.closeDropdown();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    };\n\n    /** Opens the dropdown if closed; closes it if open */\n    DropdownButton.prototype.toggleDropdown = function () {\n        if (this.$dropdown) {\n            this.closeDropdown();\n        } else {\n            this.showDropdown();\n        }\n    };\n\n    /**\n     * @private\n     * Callback from DropdownEventHandler when item in dropdown list is selected (via mouse or keyboard)\n     * @param {!jQueryObject} $link  The `a` element selected\n     */\n    DropdownButton.prototype._onSelect = function ($link) {\n        var itemIndex = Number($link.data(\"index\"));\n        this.trigger(EVENT_SELECTED, this.items[itemIndex], itemIndex);\n    };\n\n\n    exports.DropdownButton = DropdownButton;\n    // public events\n    exports.EVENT_SELECTED = EVENT_SELECTED;\n    exports.EVENT_LIST_RENDERED = EVENT_LIST_RENDERED;\n    exports.EVENT_DROPDOWN_SHOWN = EVENT_DROPDOWN_SHOWN;\n    exports.EVENT_DROPDOWN_CLOSED = EVENT_DROPDOWN_CLOSED;\n});\n"],"file":"DropdownButton.js"}