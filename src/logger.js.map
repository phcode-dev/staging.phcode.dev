{"version":3,"sources":["logger.js"],"names":["AppConfig","swallowLogs","savedLoggingFn","console","log","savedInfoFn","info","onError","event","reportedStatus","window","loggingOptions","healthDataDisabled","error","Metrics","countEvent","EVENT_TYPE","ERROR","setupLogging","urlParams","URLSearchParams","location","search","logToConsoleOverride","get","logToConsolePref","localStorage","getItem","testEnvironment","toLowerCase","debugMode","isLoggingEnabled","key","loggingEnabled","toggleLoggingKey","setItem","LOCAL_STORAGE_KEYS","LOG_LIVE_PREVIEW","livePreview","args","logLivePreview","reportError","Bugsnag","notify","isTestWindow","start","apiKey","appType","__TAURI__","collectUserIp","appVersion","version","enabledReleaseStages","releaseStage","config","bugsnagEnv","enabledBreadcrumbTypes","maxEvents"],"mappings":"OAsBOA,cAAe,oBAGtB,SAASC,eAGT,MAAMC,eAAiBC,QAAQC,IACzBC,YAAcF,QAAQG,KA6D5B,SAASC,QAAQC,OAGb,IAAIC,eAAiBC,OAAOC,eAAeC,mBAAoB,wCAA0C,WAMzG,GAJAT,QAAQU,gCAAgCJ,mBAAoBD,OACzDE,OAAOI,SACNJ,OAAOI,QAAQC,WAAWL,OAAOI,QAAQE,WAAWC,MAAO,WAAY,UAExEP,OAAOC,eAAeC,mBAErB,OAAO,EAtEfF,OAAOQ,aAAe,WAClB,MAAMC,UAAY,IAAIC,gBAAgBV,OAAOW,SAASC,QAChDC,qBAAuBJ,UAAUK,IAAI,gBACrCC,iBAAmBC,aAAaC,QAAQ,gBAE9C,OADAjB,OAAOkB,gBAAwD,SAArCT,UAAUK,IAAI,mBACpCD,sBAA+D,SAAvCA,qBAAqBM,eACzCJ,kBAAuD,SAAnCA,iBAAiBI,gBAA6BN,sBACtEpB,QAAQC,IAAKF,eACbC,QAAQG,KAAMD,YACdK,OAAOe,iBAAmB,OAC1Bf,OAAOoB,WAAY,GACZ,IAEP3B,QAAQG,KAAOH,QAAQC,IAAMH,YAC7BS,OAAOe,iBAAmB,QAC1Bf,OAAOoB,WAAY,GACZ,IAIfpB,OAAOqB,iBAAmB,SAAUC,KAChC,IAAIC,eACJ,MAAwC,UADnBP,aAAaC,QAAQK,MAAQ,SAC5BH,eAG1BnB,OAAOwB,iBAAmB,SAASF,KAC5BtB,OAAOqB,iBAAiBC,KACvBN,aAAaS,QAAQH,IAAK,SAE1BN,aAAaS,QAAQH,IAAK,SAIlCtB,OAAOC,eAAiB,CACpByB,mBAAoB,CAChBC,iBAAkB,kBAEtBC,YAAa,CACTlC,IAAK,YAAamC,MACX7B,OAAOC,eAAe6B,gBACrBrC,QAAQC,OAAOmC,QAI3B3B,oBAAoB,EAMpB6B,YAAa,SAAU5B,OACnB6B,QAAQC,OAAO9B,SAGvBH,OAAOC,eAAe6B,eAAiB9B,OAAOqB,iBAC1CrB,OAAOC,eAAeyB,mBAAmBC,kBAE7C3B,OAAOQ,eAiBP,MAAM0B,aAAe,IAAKlC,OAAOU,gBAAgBV,OAAOW,SAASC,QAAU,IAAKE,IAAI,mBAEhFoB,cACAF,QAAQG,MAAM,CACVC,OAAQ,mCACRC,QAASrC,OAAOsC,UAAY,QAAU,UACtCC,eAAe,EACfC,WAAYlD,UAAUmD,QACtBC,qBAAsB,CAAE,cAAe,aAAc,WACrDC,aAAcrD,UAAUsD,OAAOC,WAG/BC,uBAAwB,GAExBC,UAAW,GACXlD,QAAAA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals Bugsnag*/\n\nimport AppConfig from \"./loggerConfig.js\";\n\n// logger setup\nfunction swallowLogs() {\n    // Do nothing\n}\nconst savedLoggingFn = console.log;\nconst savedInfoFn = console.info;\n\nwindow.setupLogging = function () {\n    const urlParams = new URLSearchParams(window.location.search);\n    const logToConsoleOverride = urlParams.get('logToConsole');\n    const logToConsolePref = localStorage.getItem(\"logToConsole\");\n    window.testEnvironment = (urlParams.get('testEnvironment') === 'true');\n    if((logToConsoleOverride && logToConsoleOverride.toLowerCase() === 'true')\n        || (logToConsolePref && logToConsolePref.toLowerCase() === 'true' && !logToConsoleOverride)){\n        console.log= savedLoggingFn;\n        console.info= savedInfoFn;\n        window.logToConsolePref = 'true';\n        window.debugMode = true;\n        return true;\n    } else {\n        console.info = console.log = swallowLogs;\n        window.logToConsolePref = 'false';\n        window.debugMode = false;\n        return false;\n    }\n};\n\nwindow.isLoggingEnabled = function (key) {\n    let loggingEnabled = localStorage.getItem(key) || \"false\";\n    return loggingEnabled.toLowerCase() === 'true';\n};\n\nwindow.toggleLoggingKey = function(key) {\n    if(window.isLoggingEnabled(key)){\n        localStorage.setItem(key, 'false');\n    } else {\n        localStorage.setItem(key, 'true');\n    }\n};\n\nwindow.loggingOptions = {\n    LOCAL_STORAGE_KEYS: {\n        LOG_LIVE_PREVIEW: \"logLivePreview\"\n    },\n    livePreview: {\n        log: function (...args) {\n            if(window.loggingOptions.logLivePreview){\n                console.log(...args);\n            }\n        }\n    },\n    healthDataDisabled: false,\n    /**\n     * By default all uncaught exceptions and promise rejections are sent to logger utility. But in some cases\n     * you may want to sent handled errors too if it is critical. use this function to report those\n     * @param error\n     */\n    reportError: function (error) {\n        Bugsnag.notify(error);\n    }\n};\nwindow.loggingOptions.logLivePreview = window.isLoggingEnabled(\n    window.loggingOptions.LOCAL_STORAGE_KEYS.LOG_LIVE_PREVIEW);\n\nwindow.setupLogging();\n\nfunction onError(event) {\n    // for mroe info https://docs.bugsnag.com/platforms/javascript/customizing-error-reports\n    // change health logger popup string before changing the below line to anything other than \"Caught Critical error\"\n    let reportedStatus = window.loggingOptions.healthDataDisabled? \"Not Reported as health data disabled.\" : \"Reported\";\n\n    console.error(`Caught Critical error, ${reportedStatus}: `, event);\n    if(window.Metrics) {\n        window.Metrics.countEvent(window.Metrics.EVENT_TYPE.ERROR, \"uncaught\", \"logger\");\n    }\n    if(window.loggingOptions.healthDataDisabled){\n        // don't log anything as user disabled health tracking\n        return false;\n    }\n}\n\nconst isTestWindow = (new window.URLSearchParams(window.location.search || \"\")).get(\"testEnvironment\");\n\nif(!isTestWindow) {\n    Bugsnag.start({\n        apiKey: 'a899c29d251bfdf30c3222016a2a7ea7',\n        appType: window.__TAURI__ ? \"tauri\" : \"browser\",\n        collectUserIp: false,\n        appVersion: AppConfig.version,\n        enabledReleaseStages: [ 'development', 'production', 'staging' ],\n        releaseStage: AppConfig.config.bugsnagEnv,\n        // https://docs.bugsnag.com/platforms/javascript/#logging-breadcrumbs\n        // breadcrumbs is disabled as it seems a bit intrusive in Pheonix even-though it might help with debugging.\n        enabledBreadcrumbTypes: [],\n        // https://docs.bugsnag.com/platforms/javascript/configuration-options/#maxevents\n        maxEvents: 10,\n        onError\n    });\n}\n"],"file":"logger.js"}