{"version":3,"sources":["extensionsIntegrated/Phoenix-live-preview/main.js"],"names":["define","require","exports","module","ExtensionUtils","EditorManager","ExtensionInterface","CommandManager","Commands","Menus","WorkspaceManager","AppInit","ProjectManager","MainViewManager","Strings","Mustache","Metrics","LiveDevelopment","LiveDevServerManager","NativeApp","StringUtils","FileSystem","BrowserStaticServer","NodeStaticServer","TrustProjectHTML","panelHTML","utils","StaticServer","Phoenix","browser","isTauri","EVENT_EMBEDDED_IFRAME_WHO_AM_I","EVENT_EMBEDDED_IFRAME_FOCUS_EDITOR","PREVIEW_TRUSTED_PROJECT_KEY","PREVIEW_PROJECT_README_KEY","LIVE_PREVIEW_PANEL_ID","LIVE_PREVIEW_IFRAME_ID","LIVE_PREVIEW_IFRAME_HTML","$icon","$iframe","$panel","$pinUrlBtn","$highlightBtn","$livePreviewPopBtn","$reloadBtn","_isLiveHighlightEnabled","get","FILE_LIVE_HIGHLIGHT","getChecked","_getTrustProjectPage","trustProjectMessage","format","TRUST_PROJECT","path","basename","getProjectRoot","fullPath","templateVars","render","_isProjectPreviewTrusted","isTestWindow","projectPath","getWelcomeProjectPath","getExploreProjectPath","isTrustedProject","PhStore","getItem","_setProjectReadmePreviewdOnce","previewReadmeKey","setItem","_isProjectReadmePreviewdOnce","_createStaticServer","config","pathResolver","makeProjectRelativeIfPossible","root","on","iframeDom","contentWindow","postMessage","type","editor","getActiveEditor","focus","window","_trustCurrentProjectForLivePreview","attr","isTrustedProjectKey","_loadPreview","registerExtensionInterface","_DEFAULT_EXTENSIONS_INTERFACE_NAMES","PHOENIX_LIVE_PREVIEW","loadStyleSheet","panel","urlPinned","currentLivePreviewURL","currentPreviewFile","_blankIframe","newIframe","$","insertAfter","remove","panelShownOnce","_setPanelVisibility","isVisible","toggleClass","show","hide","_startOrStopLivePreviewIfRequired","explicitClickOnLPIcon","visible","isInactive","openLivePreview","isActive","hasActiveLivePreviews","closeLivePreview","_toggleVisibilityOnClick","_togglePinUrl","pinStatus","hasClass","removeClass","addClass","setLivePreviewPinned","countEvent","EVENT_TYPE","LIVE_PREVIEW","_updateLiveHighlightToggleStatus","isHighlightEnabled","_toggleLiveHighlights","togglePreviewHighlight","_popoutLivePreview","openURL","getTabPopoutURL","openURLInDefaultBrowser","_setTitle","fileName","message","LIVE_DEV_SELECT_FILE_TO_PREVIEW","tooltip","LIVE_DEV_STATUS_TIP_OUT_OF_SYNC","document","getElementById","textContent","title","async","_createExtensionPanel","livePreview","clickToReload","LIVE_DEV_CLICK_TO_RELOAD_PAGE","toggleLiveHighlight","LIVE_DEV_TOGGLE_LIVE_HIGHLIGHT","clickToPopout","LIVE_DEV_CLICK_POPOUT","clickToPinUnpin","LIVE_DEV_CLICK_TO_PIN_UNPIN","PANEL_MIN_SIZE","INITIAL_PANEL_SIZE","body","clientWidth","click","find","onload","popoutSupported","desktop","isChromeBased","isFirefox","createPluginPanel","recomputeLayout","force","isPreviewLoadable","previewDetails","getPreviewDetails","newSrc","encodeURI","URL","relativeOrFullPath","app","getDisplayPath","getExtension","redirectAllTabs","_projectFileChanges","evt","changedFile","isPreviewableFile","isHTMLFile","_openReadmeMDIfFirstTime","readmePath","fileEntry","getFileForPath","exists","err","execute","FILE_ADD_TO_WORKING_SET","_projectOpened","_evt","getNoPreviewURL","_projectClosed","_activeDocChanged","_openLivePreviewURL","_event","currentPreviewDetails","console","error","_currentFileChanged","newFile","appReady","isSpecRunnerWindow","init","registerServer","create","EVENT_PROJECT_FILE_CHANGED","EVENT_PROJECT_OPEN","EVENT_PROJECT_CLOSE","register","CMD_LIVE_FILE_PREVIEW","FILE_LIVE_FILE_PREVIEW","fileMenu","getMenu","AppMenuBar","FILE_MENU","addMenuItem","AFTER","FILE_EXTENSION_MANAGER","addMenuDivider","BEFORE","EVENT_OPEN_PREVIEW_URL","EVENT_LIVE_HIGHLIGHT_PREF_CHANGED","EVENT_LIVE_PREVIEW_RELOAD","EVENT_SERVER_READY","event","then","consecutiveEmptyClientsCount","setInterval"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global path*/\n//jshint-ignore:no-start\n\ndefine(function (require, exports, module) {\n    const ExtensionUtils   = require(\"utils/ExtensionUtils\"),\n        EditorManager      = require(\"editor/EditorManager\"),\n        ExtensionInterface = require(\"utils/ExtensionInterface\"),\n        CommandManager     = require(\"command/CommandManager\"),\n        Commands           = require(\"command/Commands\"),\n        Menus              = require(\"command/Menus\"),\n        WorkspaceManager   = require(\"view/WorkspaceManager\"),\n        AppInit            = require(\"utils/AppInit\"),\n        ProjectManager     = require(\"project/ProjectManager\"),\n        MainViewManager    = require(\"view/MainViewManager\"),\n        Strings            = require(\"strings\"),\n        Mustache           = require(\"thirdparty/mustache/mustache\"),\n        Metrics            = require(\"utils/Metrics\"),\n        LiveDevelopment    = require(\"LiveDevelopment/main\"),\n        LiveDevServerManager = require(\"LiveDevelopment/LiveDevServerManager\"),\n        NativeApp           = require(\"utils/NativeApp\"),\n        StringUtils         = require(\"utils/StringUtils\"),\n        FileSystem          = require(\"filesystem/FileSystem\"),\n        BrowserStaticServer  = require(\"./BrowserStaticServer\"),\n        NodeStaticServer  = require(\"./NodeStaticServer\"),\n        TrustProjectHTML    = require(\"text!./trust-project.html\"),\n        panelHTML       = require(\"text!./panel.html\"),\n        utils = require('./utils');\n\n    const StaticServer = Phoenix.browser.isTauri? NodeStaticServer : BrowserStaticServer;\n\n    const EVENT_EMBEDDED_IFRAME_WHO_AM_I = 'whoAmIframePhoenix';\n    const EVENT_EMBEDDED_IFRAME_FOCUS_EDITOR = 'embeddedIframeFocusEditor';\n\n    const PREVIEW_TRUSTED_PROJECT_KEY = \"preview_trusted\";\n    const PREVIEW_PROJECT_README_KEY = \"preview_readme\";\n\n    const LIVE_PREVIEW_PANEL_ID = \"live-preview-panel\";\n    const LIVE_PREVIEW_IFRAME_ID = \"panel-live-preview-frame\";\n    const LIVE_PREVIEW_IFRAME_HTML = `\n    <iframe id=\"${LIVE_PREVIEW_IFRAME_ID}\" title=\"Live Preview\" style=\"border: none\"\n             width=\"100%\" height=\"100%\" seamless=\"true\"\n             src='about:blank'\n             sandbox=\"allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-scripts allow-forms allow-modals allow-pointer-lock\">\n    </iframe>\n    `;\n\n    // jQuery objects\n    let $icon,\n        $iframe,\n        $panel,\n        $pinUrlBtn,\n        $highlightBtn,\n        $livePreviewPopBtn,\n        $reloadBtn;\n\n    StaticServer.on(EVENT_EMBEDDED_IFRAME_WHO_AM_I, function () {\n        if($iframe && $iframe[0]) {\n            const iframeDom = $iframe[0];\n            iframeDom.contentWindow.postMessage({\n                type: \"WHO_AM_I_RESPONSE\",\n                isTauri: Phoenix.browser.isTauri\n            }, \"*\"); // this is not sensitive info, and is only dispatched if requested by the iframe\n        }\n    });\n    StaticServer.on(EVENT_EMBEDDED_IFRAME_FOCUS_EDITOR, function () {\n        const editor  = EditorManager.getActiveEditor();\n        editor.focus();\n    });\n\n    function _isLiveHighlightEnabled() {\n        return CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT).getChecked();\n    }\n\n    function _getTrustProjectPage() {\n        const trustProjectMessage = StringUtils.format(Strings.TRUST_PROJECT,\n            path.basename(ProjectManager.getProjectRoot().fullPath));\n        const templateVars = {\n            trustProjectMessage,\n            Strings: Strings\n        };\n        return Mustache.render(TrustProjectHTML, templateVars);\n    }\n\n    function _isProjectPreviewTrusted() {\n        // We Do not show a trust project window before executing a live preview in desktop builds as in\n        // desktop, each project will have its on live preview `server:port` domain isolation.\n        // Live preview is almost the same as opening a url in the browser. The user opening a project by going though\n        // a lot of selection folder picker dialogs should be regarded as enough confirmation that the user\n        // intents to open that file for preview via a browser url. The browser security sandbox should\n        // take care of most of the security issues as much as any other normal browsing in a browser.\n        // Showing a trust window is UI friction for 99% of users. The user confirm dialog also relies on the user\n        // taking the decision that an anti-virus/firewall would make- which is not going to end well; and a lot of\n        // our users are school students or new devs, who we should assist. Phoenix trust model will heavily rely on\n        // us doing the necessary sand boxing whenever possible.\n        // A compromised project can have special html that can instruct phoenix to change editor selections and\n        // edit only the project files. We will have safeguards in place to detect anomalous large change requests\n        // to mitigate DOS attacks coming from the live preview in the future. A malicious project changing its on\n        // text only using its own code should be an acceptable risk for now as it cant affect anything else in the\n        // system.\n        if(Phoenix.isTestWindow || Phoenix.browser.isTauri){ // for test windows, we trust all test files\n            return true;\n        }\n        // In browsers, The url bar will show up as phcode.dev for live previews and there is a chance that\n        // a malicious project can appear as `phcode.dev` when user live previews. So for every live preview\n        // popout tab which shows `phcode.dev` in browser address bar, we will show a trust live preview\n        // confirm dialog every single time when user opens live preivew project.\n        // Further, since all live previews for all projects uses the same phcode.live domain,\n        // untrusted projects can access data of past opened projects. Future plans for browser versions\n        // include adopting a similar approach to desktop to dynamically generate URLs in the format\n        // `project-name.phcode.live` preventing the past data access problem in browser. This will also let us drop the\n        // trust project screen an work the same as desktop apps.\n        const projectPath = ProjectManager.getProjectRoot().fullPath;\n        if(projectPath === ProjectManager.getWelcomeProjectPath() ||\n            projectPath === ProjectManager.getExploreProjectPath()){\n            return true;\n        }\n        const isTrustedProject = `${PREVIEW_TRUSTED_PROJECT_KEY}-${projectPath}`;\n        return !!PhStore.getItem(isTrustedProject);\n    }\n\n    window._trustCurrentProjectForLivePreview = function () {\n        $iframe.attr('srcdoc', null);\n        const projectPath = ProjectManager.getProjectRoot().fullPath;\n        const isTrustedProjectKey = `${PREVIEW_TRUSTED_PROJECT_KEY}-${projectPath}`;\n        PhStore.setItem(isTrustedProjectKey, true);\n        _loadPreview(true);\n    };\n\n    function _setProjectReadmePreviewdOnce() {\n        const projectPath = ProjectManager.getProjectRoot().fullPath;\n        const previewReadmeKey = `${PREVIEW_PROJECT_README_KEY}-${projectPath}`;\n        PhStore.setItem(previewReadmeKey, true);\n    }\n\n    function _isProjectReadmePreviewdOnce() {\n        const projectPath = ProjectManager.getProjectRoot().fullPath;\n        const previewReadmeKey = `${PREVIEW_PROJECT_README_KEY}-${projectPath}`;\n        return !!PhStore.getItem(previewReadmeKey);\n    }\n\n    ExtensionInterface.registerExtensionInterface(\n        ExtensionInterface._DEFAULT_EXTENSIONS_INTERFACE_NAMES.PHOENIX_LIVE_PREVIEW, exports);\n\n    /**\n     * @private\n     * @return {StaticServerProvider} The singleton StaticServerProvider initialized\n     * on app ready.\n     */\n    function _createStaticServer() {\n        var config = {\n            pathResolver: ProjectManager.makeProjectRelativeIfPossible,\n            root: ProjectManager.getProjectRoot().fullPath\n        };\n\n        return new StaticServer.StaticServer(config);\n    }\n\n    // Templates\n    ExtensionUtils.loadStyleSheet(module, \"live-preview.css\");\n    // Other vars\n    let panel,\n        urlPinned,\n        currentLivePreviewURL = \"\",\n        currentPreviewFile = '';\n\n    function _blankIframe() {\n        // we have to remove the dom node altog as at time chrome fails to clear workers if we just change\n        // src. so we delete the node itself to eb thorough.\n        let newIframe = $(LIVE_PREVIEW_IFRAME_HTML);\n        newIframe.insertAfter($iframe);\n        $iframe.remove();\n        $iframe = newIframe;\n    }\n\n    let panelShownOnce = false;\n    function _setPanelVisibility(isVisible) {\n        if (isVisible) {\n            panelShownOnce = true;\n            $icon.toggleClass(\"active\");\n            panel.show();\n            _loadPreview(true);\n        } else {\n            $icon.toggleClass(\"active\");\n            _blankIframe();\n            panel.hide();\n        }\n    }\n\n    function _startOrStopLivePreviewIfRequired(explicitClickOnLPIcon) {\n        let visible = panel && panel.isVisible();\n        if(visible && (LiveDevelopment.isInactive() || explicitClickOnLPIcon)) {\n            LiveDevelopment.openLivePreview();\n        } else if(!visible && LiveDevelopment.isActive()\n            && !StaticServer.hasActiveLivePreviews()) {\n            LiveDevelopment.closeLivePreview();\n        }\n    }\n    function _toggleVisibilityOnClick() {\n        let visible = !panel.isVisible();\n        _setPanelVisibility(visible);\n        _startOrStopLivePreviewIfRequired(true);\n    }\n\n    function _togglePinUrl() {\n        let pinStatus = $pinUrlBtn.hasClass('pin-icon');\n        if(pinStatus){\n            $pinUrlBtn.removeClass('pin-icon').addClass('unpin-icon');\n        } else {\n            $pinUrlBtn.removeClass('unpin-icon').addClass('pin-icon');\n        }\n        urlPinned = !pinStatus;\n        LiveDevelopment.setLivePreviewPinned(urlPinned, currentPreviewFile);\n        _loadPreview(true);\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"pinURLBtn\", \"click\");\n    }\n\n    function _updateLiveHighlightToggleStatus() {\n        let isHighlightEnabled = _isLiveHighlightEnabled();\n        if(isHighlightEnabled){\n            $highlightBtn.removeClass('pointer-icon').addClass('pointer-fill-icon');\n        } else {\n            $highlightBtn.removeClass('pointer-fill-icon').addClass('pointer-icon');\n        }\n    }\n\n    function _toggleLiveHighlights() {\n        LiveDevelopment.togglePreviewHighlight();\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"HighlightBtn\", \"click\");\n    }\n\n    function _popoutLivePreview() {\n        // We cannot use $iframe.src here if panel is hidden\n        const openURL = StaticServer.getTabPopoutURL(currentLivePreviewURL);\n        NativeApp.openURLInDefaultBrowser(openURL, \"livePreview\");\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"popoutBtn\", \"click\");\n        _loadPreview(true);\n        _setPanelVisibility(false);\n    }\n\n    function _setTitle(fileName) {\n        let message = Strings.LIVE_DEV_SELECT_FILE_TO_PREVIEW,\n            tooltip = message;\n        if(fileName){\n            message = `${fileName} - ${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC}`;\n            tooltip = `${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC} - ${fileName}`;\n        }\n        document.getElementById(\"panel-live-preview-title\").textContent = message;\n        document.getElementById(\"live-preview-plugin-toolbar\").title = tooltip;\n    }\n\n    async function _createExtensionPanel() {\n        let templateVars = {\n            Strings: Strings,\n            livePreview: Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC,\n            clickToReload: Strings.LIVE_DEV_CLICK_TO_RELOAD_PAGE,\n            toggleLiveHighlight: Strings.LIVE_DEV_TOGGLE_LIVE_HIGHLIGHT,\n            clickToPopout: Strings.LIVE_DEV_CLICK_POPOUT,\n            clickToPinUnpin: Strings.LIVE_DEV_CLICK_TO_PIN_UNPIN\n        };\n        const PANEL_MIN_SIZE = 50;\n        const INITIAL_PANEL_SIZE = document.body.clientWidth/2.5;\n        $icon = $(\"#toolbar-go-live\");\n        $icon.click(_toggleVisibilityOnClick);\n        $panel = $(Mustache.render(panelHTML, templateVars));\n        $iframe = $panel.find(\"#panel-live-preview-frame\");\n        $pinUrlBtn = $panel.find(\"#pinURLButton\");\n        $highlightBtn = $panel.find(\"#highlightLPButton\");\n        $reloadBtn = $panel.find(\"#reloadLivePreviewButton\");\n        $livePreviewPopBtn = $panel.find(\"#livePreviewPopoutButton\");\n        $iframe[0].onload = function () {\n            $iframe.attr('srcdoc', null);\n        };\n\n        const popoutSupported = Phoenix.browser.isTauri\n            || Phoenix.browser.desktop.isChromeBased || Phoenix.browser.desktop.isFirefox;\n        if(!popoutSupported){\n            // live preview can be popped out currently in only chrome based browsers. The cross domain iframe\n            // that serves the live preview(phcode.live) is sandboxed to the tab in which phcode.dev resides.\n            // all iframes in the tab can communicate between each other, but when you popout another tab, it forms\n            // its own sandbox and firefox/safari prevents communication from iframe in one tab to another. chrome\n            // doesn't seem to enforce this restriction. Since this is a core usecase, we will try to enable this\n            // workflow whenever possible.\n            $livePreviewPopBtn.addClass(\"forced-hidden\");\n        }\n\n        panel = WorkspaceManager.createPluginPanel(LIVE_PREVIEW_PANEL_ID, $panel,\n            PANEL_MIN_SIZE, $icon, INITIAL_PANEL_SIZE);\n\n        WorkspaceManager.recomputeLayout(false);\n        _updateLiveHighlightToggleStatus();\n        $pinUrlBtn.click(_togglePinUrl);\n        $highlightBtn.click(_toggleLiveHighlights);\n        $livePreviewPopBtn.click(_popoutLivePreview);\n        $reloadBtn.click(()=>{\n            LiveDevelopment.openLivePreview();\n            _loadPreview(true);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"reloadBtn\", \"click\");\n        });\n    }\n\n    async function _loadPreview(force) {\n        // we wait till the first server ready event is received till we render anything. else a 404-page may\n        // briefly flash on first load of phoenix as we try to load the page before the server is available.\n        const isPreviewLoadable = panel.isVisible() || StaticServer.hasActiveLivePreviews();\n        if(!isPreviewLoadable){\n            return;\n        }\n        // panel-live-preview-title\n        let previewDetails = await StaticServer.getPreviewDetails();\n        if(urlPinned && !force) {\n            return;\n        }\n        let newSrc = encodeURI(previewDetails.URL);\n        if($iframe.attr('src') === newSrc && !force){\n            // we already have this url loaded in previews!\n            return;\n        }\n        // we have to create a new iframe on every switch as we use cross domain iframes for phcode.live which\n        // the browser sandboxes strictly and sometimes it wont allow a src change on our iframe causing live\n        // preview breaks sporadically. to alleviate this, we create a new iframe every time.\n        if(!urlPinned) {\n            currentLivePreviewURL = newSrc;\n            currentPreviewFile = previewDetails.fullPath;\n        }\n        let relativeOrFullPath= ProjectManager.makeProjectRelativeIfPossible(currentPreviewFile);\n        relativeOrFullPath = Phoenix.app.getDisplayPath(relativeOrFullPath);\n        _setTitle(relativeOrFullPath);\n        if(panel.isVisible()) {\n            let newIframe = $(LIVE_PREVIEW_IFRAME_HTML);\n            newIframe.insertAfter($iframe);\n            $iframe.remove();\n            $iframe = newIframe;\n            if(_isProjectPreviewTrusted()){\n                $iframe.attr('src', currentLivePreviewURL);\n            } else {\n                $iframe.attr('srcdoc', _getTrustProjectPage());\n            }\n        }\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\",\n            utils.getExtension(previewDetails.fullPath));\n        StaticServer.redirectAllTabs(currentLivePreviewURL);\n    }\n\n    async function _projectFileChanges(evt, changedFile) {\n        if(changedFile && utils.isPreviewableFile(changedFile.fullPath)){\n            // we are getting this change event somehow.\n            // bug, investigate why we get this change event as a project file change.\n            const previewDetails = await StaticServer.getPreviewDetails();\n            if(!(LiveDevelopment.isActive() && previewDetails.isHTMLFile)) {\n                // We force reload live preview on save for all non html preview-able file or\n                // if html file and live preview isnt active.\n                _loadPreview(true);\n            }\n        }\n    }\n\n    function _openReadmeMDIfFirstTime() {\n        if(!_isProjectReadmePreviewdOnce() && !Phoenix.isTestWindow){\n            const readmePath = `${ProjectManager.getProjectRoot().fullPath}README.md`;\n            const fileEntry = FileSystem.getFileForPath(readmePath);\n            fileEntry.exists(function (err, exists) {\n                if (!err && exists) {\n                    CommandManager.execute(Commands.FILE_ADD_TO_WORKING_SET, {fullPath: readmePath});\n                    _setProjectReadmePreviewdOnce();\n                }\n            });\n        }\n    }\n\n    async function _projectOpened(_evt) {\n        _openReadmeMDIfFirstTime();\n        if(!LiveDevelopment.isActive()\n            && (panel.isVisible() || StaticServer.hasActiveLivePreviews())) {\n            // we do this only once after project switch if live preview for a doc is not active.\n            LiveDevelopment.openLivePreview();\n        }\n        if(urlPinned){\n            _togglePinUrl();\n        }\n        $iframe.attr('src', StaticServer.getNoPreviewURL());\n        if(!panel.isVisible()){\n            return;\n        }\n        _loadPreview(true);\n    }\n\n    function _projectClosed() {\n        if(urlPinned) {\n            _togglePinUrl();\n        }\n        LiveDevelopment.closeLivePreview();\n    }\n\n    function _activeDocChanged() {\n        if(!LiveDevelopment.isActive()\n            && (panel.isVisible() || StaticServer.hasActiveLivePreviews())) {\n            // we do this only once after project switch if live preview for a doc is not active.\n            LiveDevelopment.openLivePreview();\n        }\n    }\n\n    /**\n     * EVENT_OPEN_PREVIEW_URL triggers this once live preview infrastructure is instrumented and ready to accept live\n     * preview connections from browsers. So, if we have loaded an earlier live preview, that is most likely not\n     * instrumented code and just plain html for the previewed file. We force load the live preview again here to\n     * load the instrumented live preview code.\n     * @param _event\n     * @param previewDetails\n     * @return {Promise<void>}\n     * @private\n     */\n    async function _openLivePreviewURL(_event, previewDetails) {\n        _loadPreview(true);\n        const currentPreviewDetails = await StaticServer.getPreviewDetails();\n        if(currentPreviewDetails.isHTMLFile && currentPreviewDetails.fullPath !== previewDetails.fullPath){\n            console.error(\"Live preview URLs differ between phoenix live preview extension and core live preview\",\n                currentPreviewDetails, previewDetails);\n        }\n    }\n\n    function _currentFileChanged(_event, newFile) {\n        if(newFile && utils.isPreviewableFile(newFile.fullPath)){\n            _loadPreview();\n        }\n    }\n\n    AppInit.appReady(function () {\n        if(Phoenix.isSpecRunnerWindow){\n            return;\n        }\n        _createExtensionPanel();\n        StaticServer.init();\n        LiveDevServerManager.registerServer({ create: _createStaticServer }, 5);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED, _projectFileChanges);\n        MainViewManager.on(\"currentFileChange\", _currentFileChanged);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _projectOpened);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_CLOSE, _projectClosed);\n        EditorManager.on(\"activeEditorChange\", _activeDocChanged);\n        CommandManager.register(Strings.CMD_LIVE_FILE_PREVIEW,  Commands.FILE_LIVE_FILE_PREVIEW, function () {\n            _toggleVisibilityOnClick();\n        });\n        let fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        fileMenu.addMenuItem(Commands.FILE_LIVE_FILE_PREVIEW, \"\", Menus.AFTER, Commands.FILE_EXTENSION_MANAGER);\n        fileMenu.addMenuDivider(Menus.BEFORE, Commands.FILE_LIVE_FILE_PREVIEW);\n        LiveDevelopment.openLivePreview();\n        LiveDevelopment.on(LiveDevelopment.EVENT_OPEN_PREVIEW_URL, _openLivePreviewURL);\n        LiveDevelopment.on(LiveDevelopment.EVENT_LIVE_HIGHLIGHT_PREF_CHANGED, _updateLiveHighlightToggleStatus);\n        LiveDevelopment.on(LiveDevelopment.EVENT_LIVE_PREVIEW_RELOAD, ()=>{\n            // Usually, this event is listened by live preview iframes/tabs and they initiate a location.reload.\n            // But in firefox, the embedded iframe will throw a 404 when we try to reload from within the iframe as\n            // in firefox security posture, the third party live preview iframe phcode.live itself cannot activate\n            // the service worker. So we have to reload the iframe from its parent- ie. phcode.dev. This is not\n            // required in chrome, but we just keep it just for all platforms behaving the same.\n            _loadPreview(true);\n        });\n        StaticServer.on(StaticServer.EVENT_SERVER_READY, function (_evt, event) {\n            // We always show the live preview panel on startup if there is a preview file\n            StaticServer.getPreviewDetails().then(previewDetails =>{\n                if(previewDetails.URL && !panelShownOnce){\n                    // only show if there is some file to preview and not the default no-preview preview on startup\n                    _setPanelVisibility(true);\n                }\n                _loadPreview(true);\n            });\n        });\n\n        let consecutiveEmptyClientsCount = 0;\n        setInterval(()=>{\n            if(!StaticServer.hasActiveLivePreviews()){\n                consecutiveEmptyClientsCount ++;\n            } else {\n                consecutiveEmptyClientsCount = 0;\n            }\n            if(consecutiveEmptyClientsCount > 5){\n                _startOrStopLivePreviewIfRequired();\n            }\n        }, 1000);\n        _projectOpened();\n    });\n\n    // private API to be used inside phoenix codebase only\n    exports.LIVE_PREVIEW_PANEL_ID = LIVE_PREVIEW_PANEL_ID;\n});\n\n\n"],"file":"main.js"}