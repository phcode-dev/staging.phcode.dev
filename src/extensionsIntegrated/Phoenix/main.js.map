{"version":3,"sources":["extensionsIntegrated/Phoenix/main.js"],"names":["define","require","exports","module","serverSync","newProject","defaultProjects","newFeature","AppInit","Strings","Dialogs","NotificationUI","FileSystem","FileViewController","DefaultDialogs","PERSIST_STORAGE_DIALOG_DELAY_SECS","$icon","_addToolbarIcon","helpButtonID","$","attr","id","href","class","title","CMD_SUPPORT","appendTo","on","Phoenix","app","openURLInDefaultBrowser","brackets","config","support_url","_showUnSupportedBrowserDialogue","browser","isMobile","isTablet","showModalDialog","DIALOG_ID_ERROR","UNSUPPORTED_BROWSER_MOBILE_TITLE","UNSUPPORTED_BROWSER_MOBILE","UNSUPPORTED_BROWSER_TITLE","UNSUPPORTED_BROWSER_MESSAGE","navigator","Error","_detectUnSupportedBrowser","isTestWindow","isSupportedBrowser","desktop","isSafari","mobile","isIos","createToastFromTemplate","ATTENTION_SAFARI_USERS","ATTENTION_SAFARI_USERS_MESSAGE","dismissOnClick","toastStyle","NOTIFICATION_STYLES_CSS_CLASS","DANGER","async","_persistBrowserStorage","storage","persist","isPersisted","persisted","console","log","setTimeout","isTauri","error","appReady","isSpecRunnerWindow","init"],"mappings":"AAyBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,WAAeH,QAAQ,gBACzBI,WAAeJ,QAAQ,iBACvBK,gBAAoBL,QAAQ,sBAC5BM,WAAeN,QAAQ,0BACvBO,QAAeP,QAAQ,iBACvBQ,QAAeR,QAAQ,WACvBS,QAAeT,QAAQ,mBACvBU,eAAkBV,QAAQ,0BAC1BW,WAAcX,QAAQ,yBACtBY,mBAAsBZ,QAAQ,8BAC9Ba,eAAiBb,QAAQ,0BAEvBc,kCAAoC,IAC1C,IAAIC,MAEJ,SAASC,kBACL,MAAMC,aAAe,eACrBF,MAAQG,EAAE,OACLC,KAAK,CACFC,GAAIH,aACJI,KAAM,IACNC,MAAO,OACPC,MAAOf,QAAQgB,cAElBC,SAASP,EAAE,mCACVQ,GAAG,QAAS,KACdC,QAAQC,IAAIC,wBAAwBC,SAASC,OAAOC,eAG5D,SAASC,kCACL,GAAGN,QAAQO,QAAQC,UAAYR,QAAQO,QAAQE,SAC3C3B,QAAQ4B,gBACJxB,eAAeyB,gBACf9B,QAAQ+B,iCACR/B,QAAQgC,iCAShB,GALA/B,QAAQ4B,gBACJxB,eAAeyB,gBACf9B,QAAQiC,0BACRjC,QAAQkC,+BAEN,kBAAmBC,WAErB,MAAM,IAAIC,MAAM,2EAIxB,SAASC,4BACFlB,QAAQmB,eAGPnB,QAAQoB,oBACRd,mCAEDN,QAAQO,QAAQc,QAAQC,UAAYtB,QAAQO,QAAQgB,OAAOC,QAC1DzC,eAAe0C,wBAAyB5C,QAAQ6C,uBAC5C7C,QAAQ8C,+BAAgC,CACpCC,gBAAgB,EAChBC,WAAY9C,eAAe+C,8BAA8BC,UAKzEC,eAAeC,yBACX,GAAGjB,UAAUkB,SAAWlB,UAAUkB,QAAQC,QAAQ,CAC9C,IAAIC,kBAAoBpB,UAAUkB,QAAQG,YAC1CC,QAAQC,2CAA2CH,eACnDI,WAAWR,UACHI,cACAE,QAAQC,IAAI,wCACZH,kBAAoBpB,UAAUkB,QAAQC,UACtCG,QAAQC,2CAA2CH,iBAExDjD,wCACIa,QAAQO,QAAQkC,UACvBH,QAAQI,MAAM,qDACdpC,mCAIR1B,QAAQ+D,SAAS,WACV3C,QAAQ4C,qBAGXvD,kBACAb,WAAWqE,OACXnE,gBAAgBmE,OAChBpE,WAAWoE,OACXlE,WAAWkE,OACX3B,4BACAe","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/* jshint ignore:start */\n\ndefine(function (require, exports, module) {\n    const serverSync   = require(\"./serverSync\"),\n        newProject   = require(\"./new-project\"),\n        defaultProjects   = require(\"./default-projects\"),\n        newFeature   = require(\"./newly-added-features\"),\n        AppInit      = require(\"utils/AppInit\"),\n        Strings      = require(\"strings\"),\n        Dialogs      = require(\"widgets/Dialogs\"),\n        NotificationUI  = require(\"widgets/NotificationUI\"),\n        FileSystem  = require(\"filesystem/FileSystem\"),\n        FileViewController  = require(\"project/FileViewController\"),\n        DefaultDialogs = require(\"widgets/DefaultDialogs\");\n\n    const PERSIST_STORAGE_DIALOG_DELAY_SECS = 60000;\n    let $icon;\n\n    function _addToolbarIcon() {\n        const helpButtonID = \"help-button\";\n        $icon = $(\"<a>\")\n            .attr({\n                id: helpButtonID,\n                href: \"#\",\n                class: \"help\",\n                title: Strings.CMD_SUPPORT\n            })\n            .appendTo($(\"#main-toolbar .bottom-buttons\"));\n        $icon.on('click', ()=>{\n            Phoenix.app.openURLInDefaultBrowser(brackets.config.support_url);\n        });\n    }\n    function _showUnSupportedBrowserDialogue() {\n        if(Phoenix.browser.isMobile || Phoenix.browser.isTablet){\n            Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_ERROR,\n                Strings.UNSUPPORTED_BROWSER_MOBILE_TITLE,\n                Strings.UNSUPPORTED_BROWSER_MOBILE\n            );\n            return;\n        }\n        Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_ERROR,\n            Strings.UNSUPPORTED_BROWSER_TITLE,\n            Strings.UNSUPPORTED_BROWSER_MESSAGE\n        );\n        if (!(\"serviceWorker\" in navigator)) {\n            // service worker is required for phcode to work\n            throw new Error(\"Service worker is not supported by the browser. Phcode cannot continue.\");\n        }\n    }\n\n    function _detectUnSupportedBrowser() {\n        if(Phoenix.isTestWindow) {\n            return;\n        }\n        if(!Phoenix.isSupportedBrowser){\n            _showUnSupportedBrowserDialogue();\n        }\n        if(Phoenix.browser.desktop.isSafari || Phoenix.browser.mobile.isIos) {\n            NotificationUI.createToastFromTemplate( Strings.ATTENTION_SAFARI_USERS,\n                Strings.ATTENTION_SAFARI_USERS_MESSAGE, {\n                    dismissOnClick: false,\n                    toastStyle: NotificationUI.NOTIFICATION_STYLES_CSS_CLASS.DANGER\n                });\n        }\n    }\n\n    async function _persistBrowserStorage() {\n        if(navigator.storage && navigator.storage.persist){\n            let isPersisted = await navigator.storage.persisted();\n            console.log(`Browser Persisted storage granted?: ${isPersisted}`);\n            setTimeout(async ()=>{\n                if(!isPersisted){\n                    console.log(`Browser Persisted storage requesting`);\n                    isPersisted = await navigator.storage.persist();\n                    console.log(`Browser Persisted storage granted?: ${isPersisted}`);\n                }\n            }, PERSIST_STORAGE_DIALOG_DELAY_SECS);\n        } else if(!Phoenix.browser.isTauri){\n            console.error(\"Browser does not support storage persistence APIs\");\n            _showUnSupportedBrowserDialogue();\n        }\n    }\n\n    AppInit.appReady(function () {\n        if(Phoenix.isSpecRunnerWindow){\n            return;\n        }\n        _addToolbarIcon();\n        serverSync.init();\n        defaultProjects.init();\n        newProject.init();\n        newFeature.init();\n        _detectUnSupportedBrowser();\n        _persistBrowserStorage();\n    });\n});\n"],"file":"main.js"}