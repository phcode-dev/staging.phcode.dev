{"version":3,"sources":["extensionsIntegrated/Phoenix/newly-added-features.js"],"names":["define","require","exports","module","FileViewController","DocumentManager","FileSystem","FileUtils","Metrics","_getUpdateMarkdownURL","Phoenix","baseURL","_getUpdateMarkdownLocalPath","VFS","getDefaultProjectDir","async","_getUpdateMarkdownText","Promise","resolve","reject","fetch","then","response","text","catch","_showNewFeatureMarkdownDoc","setTimeout","openFileAndAddToWorkingSet","countEvent","EVENT_TYPE","PLATFORM","_cacheUpdatedCB","err","window","cache","updatePendingReloadReason","updatedFilesCount","_readMarkdownTextFile","markdownFile","getFileForPath","jsPromise","getDocumentText","e","_showNewUpdatesIfPresent","newMarkdownText","replace","currentMarkdownText","writeText","done","fail","console","error","init","firstBoot","testEnvironment","browser","isTauri","refreshServiceWorkerCache"],"mappings":"AAsBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,mBAAwBH,QAAQ,8BAClCI,gBAAkBJ,QAAQ,4BAC1BK,WAAaL,QAAQ,yBACrBM,UAAYN,QAAQ,kBACpBO,QAAUP,QAAQ,iBAEtB,SAASQ,wBACL,OAAOC,QAAQC,QAAU,oDAG7B,SAASC,8BACL,OAAOF,QAAQG,IAAIC,uBAAyB,0BAGhDC,eAAeC,yBACX,OAAO,IAAIC,QAAQ,CAACC,QAASC,UACzBC,MAAMX,yBACDY,KAAKC,UAAYA,SAASC,QAC1BF,KAAKN,eAAgBQ,MAClBL,QAAQK,QAEXC,MAAML,UAInB,SAASM,6BAELC,WAAW,KACPtB,mBAAmBuB,2BAA2Bf,+BAC9CJ,QAAQoB,WAAWpB,QAAQqB,WAAWC,SAAU,YAAa,UAC9D,KAGP,SAASC,gBAAgBC,KAClBA,IACCxB,QAAQoB,WAAWpB,QAAQqB,WAAWC,SAAU,QAAS,iBAG7DtB,QAAQoB,WAAWpB,QAAQqB,WAAWC,SAAU,WACzCG,OAAOvB,QAAQwB,MAAMC,kCAC5B3B,QAAQoB,WAAWpB,QAAQqB,WAAWC,SAAU,QAAS,cACrDG,OAAOvB,QAAQwB,MAAME,mBAAmB,IAGhDrB,eAAesB,wBACX,IACI,IAAIC,aAAehC,WAAWiC,eAAe3B,+BAC7C,aAAaqB,OAAOO,UAAUnC,gBAAgBoC,gBAAgBH,eAChE,MAAMI,GACJ,MAAO,IAIf3B,eAAe4B,2BAEX,IAAIC,uBAAyB5B,0BAA0B6B,QAAQ,MAAO,IAClEC,oBACJ,GAAGF,yBAD8BP,yBAAyBQ,QAAQ,MAAO,IAC9B,CACvC,IAAIP,aAAehC,WAAWiC,eAAe3B,+BAE7CL,UAAUwC,UAAUT,aAAcM,iBAAiB,GAC9CI,KAAKvB,4BACLwB,KAAMP,IACHQ,QAAQC,MAAM,qDAAsDT,MAKpFxC,QAAQkD,KAAO,WACP1C,QAAQ2C,WAAcpB,OAAOqB,iBAC7BX,4BAEAjC,QAAQ6C,QAAQC,SAAWvB,OAAOwB,4BAGlCjD,QAAQoB,WAAWpB,QAAQqB,WAAWC,SAAU,QAAS,aACzDG,OAAOwB,0BAA0B1B","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals Phoenix*/\n\ndefine(function (require, exports, module) {\n    const FileViewController    = require(\"project/FileViewController\"),\n        DocumentManager = require(\"document/DocumentManager\"),\n        FileSystem = require(\"filesystem/FileSystem\"),\n        FileUtils = require(\"file/FileUtils\"),\n        Metrics = require(\"utils/Metrics\");\n\n    function _getUpdateMarkdownURL() {\n        return Phoenix.baseURL + \"assets/default-project/en/Newly_added_features.md\";\n    }\n\n    function _getUpdateMarkdownLocalPath() {\n        return Phoenix.VFS.getDefaultProjectDir() + \"Newly_added_features.md\";\n    }\n\n    async function _getUpdateMarkdownText() {\n        return new Promise((resolve, reject)=>{\n            fetch(_getUpdateMarkdownURL())\n                .then(response => response.text())\n                .then(async function (text) {\n                    resolve(text);\n                })\n                .catch(reject);\n        });\n    }\n\n    function _showNewFeatureMarkdownDoc() {\n        // We wait for few seconds after boot to grab user attention\n        setTimeout(()=>{\n            FileViewController.openFileAndAddToWorkingSet(_getUpdateMarkdownLocalPath());\n            Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"newFeatMD\", \"shown\");\n        }, 3000);\n    }\n\n    function _cacheUpdatedCB(err) {\n        if(err) {\n            Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"cache\", \"errorRefresh\");\n            return;\n        }\n        Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"cache\",\n            `${window.Phoenix.cache.updatePendingReloadReason}.done`);\n        Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"cache\", `updateCount`,\n            window.Phoenix.cache.updatedFilesCount||0);\n    }\n\n    async function _readMarkdownTextFile() {\n        try{\n            let markdownFile = FileSystem.getFileForPath(_getUpdateMarkdownLocalPath());\n            return await window.jsPromise(DocumentManager.getDocumentText(markdownFile));\n        } catch(e){\n            return \"\";\n        }\n    }\n\n    async function _showNewUpdatesIfPresent() {\n        // codemirror documents are always \\n instead of \\r\\n line endings. so we strip here too\n        let newMarkdownText = (await _getUpdateMarkdownText()).replace(/\\r/g, '');\n        let currentMarkdownText = (await _readMarkdownTextFile()).replace(/\\r/g, '');\n        if(newMarkdownText !== currentMarkdownText){\n            let markdownFile = FileSystem.getFileForPath(_getUpdateMarkdownLocalPath());\n            // if the user overwrites the markdown file, then the user edited content will be nuked here.\n            FileUtils.writeText(markdownFile, newMarkdownText, true)\n                .done(_showNewFeatureMarkdownDoc)\n                .fail((e)=>{\n                    console.error(\"Error while showing new feature markdown on update\", e);\n                });\n        }\n    }\n\n    exports.init = function () {\n        if(!Phoenix.firstBoot && !window.testEnvironment){\n            _showNewUpdatesIfPresent();\n        }\n        if(!Phoenix.browser.isTauri && window.refreshServiceWorkerCache) {\n            // window.refreshServiceWorkerCache is only present if the page loads service worker. Not available\n            // in integ test windows as they don't load service workers.\n            Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"cache\", \"doRefresh\");\n            window.refreshServiceWorkerCache(_cacheUpdatedCB);\n        }\n    };\n});\n"],"file":"newly-added-features.js"}