{"version":3,"sources":["extensionsIntegrated/Phoenix/guided-tour.js"],"names":["define","require","exports","module","NotificationUI","LiveDevelopment","ExtensionInterface","WorkspaceManager","MainViewManager","Commands","Strings","Menus","StringUtils","KeyBindingManager","Metrics","Dialogs","Mustache","PreferencesManager","SurveyTemplate","NOTIFICATION_BACKOFF","GUIDED_TOUR_LOCAL_STORAGE_KEY","GITHUB_STARS_POPUP_TIME","POWER_USER_SURVEY_TIME","GENERAL_SURVEY_TIME","TWO_WEEKS_IN_DAYS","USAGE_COUNTS_KEY","userAlreadyDidAction","PhStore","getItem","JSON","parse","version","newProjectShown","beautifyCodeShown","generalSurveyShownVersion","currentlyShowingNotification","_showBeautifyNotification","editorContextMenu","getContextMenu","ContextMenuIds","EDITOR_MENU","_showNotification","setTimeout","keyboardShortcut","getKeyBindingsDisplay","EDIT_BEAUTIFY_CODE","setItem","stringify","countEvent","EVENT_TYPE","UI","createFromTemplate","format","BEAUTIFY_CODE_NOTIFICATION","allowedPlacements","autoCloseTimeS","dismissOnClick","done","off","EVENT_BEFORE_CONTEXT_MENU_OPEN","on","_showNewProjectNotification","NEW_PROJECT_NOTIFICATION","EVENT_CURRENT_FILE_CHANGE","_showPopoutLivePreviewNotification","waitAndGetExtensionInterface","_DEFAULT_EXTENSIONS_INTERFACE_NAMES","PHOENIX_LIVE_PREVIEW","then","livePreviewExtension","notificationKey","popoutMessageShown","isPanelVisible","LIVE_PREVIEW_PANEL_ID","GUIDED_LIVE_PREVIEW_POPOUT","EVENT_LIVE_PREVIEW_CLICKED","_showLivePreviewNotification","livePreviewNotificationKey","livePreviewNotificationShown","GUIDED_LIVE_PREVIEW","_loadTwitterScripts","window","twttr","twitterScript","document","createElement","setAttribute","body","appendChild","addEventListener","events","bind","ev","USER","Phoenix","browser","isTauri","app","openURLInDefaultBrowser","console","error","_openStarsPopup","notification","$","GITHUB_STARS_POPUP","GITHUB_STARS_POPUP_TWITTER","find","click","createToastFromTemplate","ENJOYING_APP","_showRequestStarsPopup","lastShownDate","lastShownGithubStarsDate","nextShowDate","Date","setUTCDate","getUTCDate","currentDate","now","_showGeneralSurvey","surveyVersion","templateVars","surveyURL","showModalDialogUsingTemplate","render","_isPowerUser","usageData","getViewState","dateKeys","Object","keys","dateBefore14Days","totalUsageMinutes","totalUsageDays","dateKey","date","_openPowerUserSurvey","_showPowerUserSurvey","lastShownPowerSurveyDate","$content","POWER_USER_POPUP_TEXT","POWER_USER_POPUP_TITLE","tourStarted","startTourIfNeeded"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n\ndefine(function (require, exports, module) {\n    const NotificationUI = require(\"widgets/NotificationUI\"),\n        LiveDevelopment  = require(\"LiveDevelopment/main\"),\n        ExtensionInterface = require(\"utils/ExtensionInterface\"),\n        WorkspaceManager = require(\"view/WorkspaceManager\"),\n        MainViewManager  = require(\"view/MainViewManager\"),\n        Commands = require(\"command/Commands\"),\n        Strings = require(\"strings\"),\n        Menus = require(\"command/Menus\"),\n        StringUtils = require(\"utils/StringUtils\"),\n        KeyBindingManager = require(\"command/KeyBindingManager\"),\n        Metrics = require(\"utils/Metrics\"),\n        Dialogs = require(\"widgets/Dialogs\"),\n        Mustache = require(\"thirdparty/mustache/mustache\"),\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        SurveyTemplate = require(\"text!./html/survey-template.html\"),\n        NOTIFICATION_BACKOFF = 10000,\n        GUIDED_TOUR_LOCAL_STORAGE_KEY = \"guidedTourActions\";\n\n    const GITHUB_STARS_POPUP_TIME = 120000, // 2 min\n        POWER_USER_SURVEY_TIME = 180000, // 3 min\n        GENERAL_SURVEY_TIME = 600000, // 10 min\n        TWO_WEEKS_IN_DAYS = 14,\n        USAGE_COUNTS_KEY    = \"healthDataUsage\"; // private to phoenix, set from health data extension\n\n    const userAlreadyDidAction = PhStore.getItem(GUIDED_TOUR_LOCAL_STORAGE_KEY)\n        ? JSON.parse(PhStore.getItem(GUIDED_TOUR_LOCAL_STORAGE_KEY)) : {\n            version: 1,\n            newProjectShown: false,\n            beautifyCodeShown: false,\n            generalSurveyShownVersion: 0\n        };\n\n    // we should only show one notification at a time\n    let currentlyShowingNotification;\n\n    /* Order of things in first boot now:\n    *  1. First we show the popup in new project window to select default project - see the html in assets folder\n    *  2. Then after user opens default project, we show \"edit code for live preview popup\"\n    *  3. When user changes file by clicking on files panel, we show \"click here to open new project window\"\n    *     this will continue showing every session until user clicks on the new project icon\n    *  4. After about 2 minutes, the GitHub stars popup will show, if not shown in the past two weeks. Repeats 2 weeks.\n    *  5. After about 3 minutes, the health popup will show up.\n    *  6. power user survey shows up if the user has used brackets for 3 days or 8 hours in the last two weeks after 3\n    *     minutes. This will not coincide with health popup due to the power user check.\n    *  7. After about 10 minutes, survey shows up.\n    *  // the rest are by user actions\n    *  a. When user clicks on live preview, we show \"click here to popout live preview\"\n    *  b. Beautification notification when user opened the editor context menu and have not done any beautification yet.\n    * */\n\n    // 3. Beautification notification when user opened the editor context menu for the first time\n    function _showBeautifyNotification() {\n        if(userAlreadyDidAction.beautifyCodeShown){\n            return;\n        }\n        let editorContextMenu = Menus.getContextMenu(Menus.ContextMenuIds.EDITOR_MENU);\n        function _showNotification() {\n            if(currentlyShowingNotification){\n                return;\n            }\n            setTimeout(()=>{\n                let keyboardShortcut = KeyBindingManager.getKeyBindingsDisplay(Commands.EDIT_BEAUTIFY_CODE);\n                keyboardShortcut = keyboardShortcut || \"\";\n                userAlreadyDidAction.beautifyCodeShown =  true;\n                PhStore.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n                Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"beautify\");\n                currentlyShowingNotification = NotificationUI.createFromTemplate(\n                    StringUtils.format(Strings.BEAUTIFY_CODE_NOTIFICATION, keyboardShortcut),\n                    \"editor-context-menu-edit.beautifyCode\", {\n                        allowedPlacements: ['left', 'right'],\n                        autoCloseTimeS: 15,\n                        dismissOnClick: true}\n                );\n                currentlyShowingNotification.done(()=>{\n                    currentlyShowingNotification = null;\n                });\n                editorContextMenu.off(Menus.EVENT_BEFORE_CONTEXT_MENU_OPEN, _showNotification);\n            }, 500);\n        }\n        editorContextMenu.on(Menus.EVENT_BEFORE_CONTEXT_MENU_OPEN, _showNotification);\n    }\n\n    // 3. When user changes file by clicking on files panel, we show \"click here to open new project window\"\n    // Only shown once.\n    function _showNewProjectNotification() {\n        if(userAlreadyDidAction.newProjectShown){\n            return;\n        }\n        function _showNotification() {\n            if(currentlyShowingNotification){\n                setTimeout(_showNotification, NOTIFICATION_BACKOFF);\n                return;\n            }\n            userAlreadyDidAction.newProjectShown =  true;\n            PhStore.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"newProj\");\n            currentlyShowingNotification = NotificationUI.createFromTemplate(Strings.NEW_PROJECT_NOTIFICATION,\n                \"newProject\", {\n                    allowedPlacements: ['top', 'bottom'],\n                    autoCloseTimeS: 15,\n                    dismissOnClick: true}\n            );\n            currentlyShowingNotification.done(()=>{\n                currentlyShowingNotification = null;\n            });\n            MainViewManager.off(MainViewManager.EVENT_CURRENT_FILE_CHANGE, _showNotification);\n        }\n        MainViewManager.on(MainViewManager.EVENT_CURRENT_FILE_CHANGE, _showNotification);\n    }\n\n    // 1. When user clicks on live preview, we show \"click here to popout live preview\". only shown once.\n    function _showPopoutLivePreviewNotification() {\n        ExtensionInterface.waitAndGetExtensionInterface(\n            ExtensionInterface._DEFAULT_EXTENSIONS_INTERFACE_NAMES.PHOENIX_LIVE_PREVIEW).then((livePreviewExtension)=>{\n            function _showNotification() {\n                // legacy key. cant change without triggering the user base\n                let notificationKey = 'livePreviewPopoutShown', version = \"v1\";\n                let popoutMessageShown = PhStore.getItem(notificationKey);\n                if(popoutMessageShown === version){\n                    // already shown\n                    LiveDevelopment.off(LiveDevelopment.EVENT_LIVE_PREVIEW_CLICKED, _showNotification);\n                    return;\n                }\n                if(currentlyShowingNotification){\n                    return;\n                }\n                if(WorkspaceManager.isPanelVisible(livePreviewExtension.LIVE_PREVIEW_PANEL_ID)){\n                    Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"lp_popout\");\n                    currentlyShowingNotification = NotificationUI.createFromTemplate(Strings.GUIDED_LIVE_PREVIEW_POPOUT,\n                        \"livePreviewPopoutButton\", {\n                            allowedPlacements: ['bottom'],\n                            autoCloseTimeS: 15,\n                            dismissOnClick: true}\n                    );\n                    currentlyShowingNotification.done(()=>{\n                        currentlyShowingNotification = null;\n                    });\n                    PhStore.setItem(notificationKey, version);\n                }\n                LiveDevelopment.off(LiveDevelopment.EVENT_LIVE_PREVIEW_CLICKED, _showNotification);\n            }\n            LiveDevelopment.on(LiveDevelopment.EVENT_LIVE_PREVIEW_CLICKED, _showNotification);\n        });\n    }\n\n    // only shown once on first boot\n    // order: 2. Then after user opens default project, we show \"edit code for live preview popup\"\n    function _showLivePreviewNotification() {\n        // legacy reasons live preview notification is called new project notification.\n        const livePreviewNotificationKey = \"newProjectNotificationShown\";\n        const livePreviewNotificationShown = PhStore.getItem(livePreviewNotificationKey);\n        if(livePreviewNotificationShown){\n            return;\n        }\n        if(currentlyShowingNotification){\n            setTimeout(_showLivePreviewNotification, NOTIFICATION_BACKOFF);\n            return;\n        }\n        currentlyShowingNotification = NotificationUI.createFromTemplate(Strings.GUIDED_LIVE_PREVIEW,\n            \"main-toolbar\", {\n                allowedPlacements: ['left'],\n                autoCloseTimeS: 15,\n                dismissOnClick: true}\n        );\n        PhStore.setItem(livePreviewNotificationKey, \"true\");\n        currentlyShowingNotification.done(()=>{\n            currentlyShowingNotification = null;\n        });\n    }\n\n    function _loadTwitterScripts() {\n        // https://developer.twitter.com/en/docs/twitter-for-websites/javascript-api/guides/javascript-api\n        // we maily do this to metric the users who clicked on the tweet button\n        if(window.twttr){\n            return;\n        }\n        const twitterScript = document.createElement( 'script' );\n        twitterScript.setAttribute( 'src', \"https://platform.twitter.com/widgets.js\" );\n        document.body.appendChild( twitterScript );\n        twitterScript.addEventListener(\"load\", ()=>{\n            if(!window.twttr){\n                console.error(\"twitter scripts not loaded\");\n                return;\n            }\n            window.twttr.events.bind('click', function (ev) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"twit.click\", 1);\n                if(Phoenix.browser.isTauri) {\n                    // hyperlinks wont work in tauri, so we have to use tauri apis\n                    Phoenix.app.openURLInDefaultBrowser(\n                        'https://twitter.com/intent/tweet?screen_name=phcodedev&ref_src=twsrc%5Etfw');\n                }\n            });\n        });\n    }\n\n    function _openStarsPopup() {\n        _loadTwitterScripts();\n        let notification = $(`${Strings.GITHUB_STARS_POPUP}\n                        <div class=\"gtstarph\" style=\"display: flex;justify-content: space-around;margin-top: 6px;\">\n                            <a class=\"github-button\"\n                             href=\"https://github.com/phcode-dev/phoenix\"\n                             data-color-scheme=\"no-preference: dark; light: dark; dark: dark;\"\n                             data-icon=\"octicon-star\"\n                             data-size=\"large\"\n                             data-show-count=\"true\"\n                             title=\"Star phcode.dev on GitHub\"\n                             aria-label=\"Star phcode-dev/phoenix on GitHub\">Star</a>\n                           <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n                        </div>\n                       ${Strings.GITHUB_STARS_POPUP_TWITTER}\n                       <div class=\"twbnpop\" style=\"display: flex;justify-content: space-around;margin-top: 6px;\">\n                            <a href=\"https://twitter.com/intent/tweet?screen_name=phcodedev&ref_src=twsrc%5Etfw\"\n                             class=\"twitter-mention-button\"\n                             data-size=\"large\"\n                             data-related=\"BracketsCont,brackets\"\n                             data-show-count=\"false\">Tweet to @phcodedev</a>\n                       </div>\n                    </div>`);\n        notification.find(\".gtstarph\").click(()=>{\n            Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"star.click\", 1);\n            if(Phoenix.browser.isTauri) {\n                // hyperlinks wont work in tauri, so we have to use tauri apis\n                Phoenix.app.openURLInDefaultBrowser(\n                    'https://github.com/phcode-dev/phoenix');\n            }\n        });\n        NotificationUI.createToastFromTemplate(Strings.ENJOYING_APP, notification, {\n            dismissOnClick: false\n        });\n    }\n\n    function _showRequestStarsPopup() {\n        let lastShownDate = userAlreadyDidAction.lastShownGithubStarsDate;\n        let nextShowDate = new Date(lastShownDate);\n        nextShowDate.setUTCDate(nextShowDate.getUTCDate() + TWO_WEEKS_IN_DAYS);\n        let currentDate = new Date();\n        if(!lastShownDate || currentDate >= nextShowDate){\n            setTimeout(()=>{\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"star\", 1);\n                _openStarsPopup();\n                userAlreadyDidAction.lastShownGithubStarsDate = Date.now();\n                PhStore.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            }, GITHUB_STARS_POPUP_TIME);\n        }\n    }\n\n    function _showGeneralSurvey() {\n        setTimeout(()=>{\n            let surveyVersion = 6; // increment this if you want to show this again\n            var templateVars = {\n                Strings: Strings,\n                surveyURL: \"https://s.surveyplanet.com/g837j5k9\"\n            };\n            if(userAlreadyDidAction.generalSurveyShownVersion !== surveyVersion){\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"survey\", \"generalShown\", 1);\n                Dialogs.showModalDialogUsingTemplate(Mustache.render(SurveyTemplate, templateVars));\n                userAlreadyDidAction.generalSurveyShownVersion = surveyVersion;\n                PhStore.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            }\n        }, GENERAL_SURVEY_TIME);\n    }\n\n    // a power user is someone who has used Phoenix at least 3 days or 8 hours in the last two weeks\n    function _isPowerUser() {\n        let usageData = PreferencesManager.getViewState(USAGE_COUNTS_KEY) || {},\n            dateKeys = Object.keys(usageData),\n            dateBefore14Days = new Date(),\n            totalUsageMinutes = 0,\n            totalUsageDays = 0;\n        dateBefore14Days.setUTCDate(dateBefore14Days.getUTCDate()-14);\n        for(let dateKey of dateKeys){\n            let date = new Date(dateKey);\n            if(date >= dateBefore14Days) {\n                totalUsageDays ++;\n                totalUsageMinutes = totalUsageMinutes + usageData[dateKey];\n            }\n        }\n        return totalUsageDays >= 3 || (totalUsageMinutes/60) >= 8;\n    }\n\n    function _openPowerUserSurvey() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"survey\", \"powerShown\", 1);\n        const templateVars = {\n            Strings: Strings,\n            surveyURL: \"https://s.surveyplanet.com/2dgk0hbn\"\n        };\n        Dialogs.showModalDialogUsingTemplate(Mustache.render(SurveyTemplate, templateVars));\n    }\n\n    function _showPowerUserSurvey() {\n        if(_isPowerUser()) {\n            Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"power\", \"user\", 1);\n            let lastShownDate = userAlreadyDidAction.lastShownPowerSurveyDate;\n            let nextShowDate = new Date(lastShownDate);\n            nextShowDate.setUTCDate(nextShowDate.getUTCDate() + TWO_WEEKS_IN_DAYS);\n            let currentDate = new Date();\n            if(currentDate < nextShowDate){\n                return;\n            }\n            setTimeout(()=>{\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"powerSurvey\", 1);\n                let $content = $(Strings.POWER_USER_POPUP_TEXT);\n                $content.find(\"a\").click(_openPowerUserSurvey);\n                NotificationUI.createToastFromTemplate(Strings.POWER_USER_POPUP_TITLE, $content);\n                userAlreadyDidAction.lastShownPowerSurveyDate = Date.now();\n                PhStore.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            }, POWER_USER_SURVEY_TIME);\n        }\n    }\n\n    let tourStarted = false;\n    exports.startTourIfNeeded = function () {\n        if(tourStarted) {\n            return;\n        }\n        tourStarted = true;\n        _showLivePreviewNotification();\n        _showPopoutLivePreviewNotification();\n        _showNewProjectNotification();\n        _showBeautifyNotification();\n        _showRequestStarsPopup();\n        _showGeneralSurvey();\n        _showPowerUserSurvey();\n    };\n});\n"],"file":"guided-tour.js"}