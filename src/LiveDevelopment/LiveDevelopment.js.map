{"version":3,"sources":["LiveDevelopment/LiveDevelopment.js"],"names":["define","LiveDevelopment","require","exports","module","_","STATUS_ERROR","STATUS_INACTIVE","STATUS_CONNECTING","STATUS_LOADING_AGENTS","STATUS_ACTIVE","STATUS_OUT_OF_SYNC","STATUS_SYNC_ERROR","Async","CSSUtils","Dialogs","DefaultDialogs","DocumentManager","EditorManager","EventDispatcher","FileServer","FileSystemError","FileUtils","LiveDevelopmentUtils","LiveDevServerManager","MainViewManager","NativeApp","PreferencesDialogs","ProjectManager","Strings","StringUtils","UserServer","WebSocketTransport","PreferencesManager","Metrics","Inspector","CSSDocument","CSSPreprocessorDocument","HTMLDocument","JSDocument","SYNC_ERROR_CLASS","CSSAgent","agents","console","remote","network","dom","css","script","highlight","goto","edit","launcherUrl","window","location","pathname","replace","substr","lastIndexOf","origin","_enabledAgentNames","_loadedAgentNames","_liveDocument","_relatedDocuments","_openDeferred","_closeDeferred","_loadAgentsPromise","_server","_regServers","_isPromisePending","promise","state","_getCurrentDocument","getCurrentDocument","_classForDocument","doc","getLanguage","getId","config","experimental","isHtmlFileExt","file","fullPath","getLiveDocForPath","path","get","getLiveDocForEditor","editor","document","_doClearErrors","liveDocument","lineHandle","_errorLineHandles","length","_codeMirror","operation","pop","removeLineClass","_makeTroubleshootingMessage","msg","format","LIVE_DEVELOPMENT_TROUBLESHOOTING","brackets","troubleshoot_url","_closeDocument","close","off","_closeRelatedDocument","liveDoc","url","remove","_setStatus","status","closeReason","reason","trigger","_handleLiveDocumentStatusChanged","startLine","endLine","i","errors","forEach","error","startPos","line","endPos","addLineClass","push","_closeDocuments","undefined","Object","keys","clear","_createDocument","DocClass","on","_createLiveDocumentForFrame","_ensureMasterEditor","_masterEditor","add","enableAgent","name","hasOwnProperty","disableAgent","_docIsOutOfSync","isLiveEditingEnabled","isDirty","_onError","event","msgData","message","warn","JSON","stringify","data","Array","isArray","join","_styleSheetAdded","urlToPath","exists","docPromise","getDocumentForPath","done","unloadAgents","unload","_invokeAgentMethod","methodName","oneAgentPromise","call","fail","$","Deferred","resolve","getEnabledAgents","enabledAgents","_enableAgents","doInParallel","loadAgents","result","allAgentsPromise","withTimeout","reject","showModalDialog","DIALOG_ID_ERROR","LIVE_DEVELOPMENT_ERROR_TITLE","LIVE_DEV_LOADING_ERROR_MESSAGE","always","_getInitialDocFromCurrent","refPath","isStaticHtmlFileExt","isServerHtmlFileExt","baseUrl","getBaseUrl","hasOwnServerForLiveDevelopment","getAllFiles","allFiles","projectRoot","getProjectRoot","containingFolder","indexFileFound","stillInProjectTree","getDirectoryPath","filteredFiltered","filter","item","parent","getParentPath","indexOf","filterIndexFile","fileInfo","getFilenameWithoutExtension","findIndex","then","onActiveEditorChange","current","previous","isCSSPreprocessorFile","prevDocUrl","pathToUrl","docUrl","_doInspectorDisconnect","doCloseWindow","closePromise","deferred","connected","Page","stop","Runtime","evaluate","disconnect","_close","closeWebSocketServer","cleanup","closeDeferred","platform","closeLiveBrowser","server","removeServer","err","_onFrameNavigated","res","frame","baseUrlRegExp","parentId","match","RegExp","regexEscape","_onDisconnect","_onDetached","reconnect","forOwn","relatedDoc","reload","_waitForInterstitialPageLoad","keepPolling","timer","setTimeout","pollInterstitialPage","response","type","value","clearTimeout","_onInterstitialPageLoad","enablePromise","uaResponse","setUserAgent","enable","DOM","navigate","_onConnect","_showWrongDocError","LIVE_DEV_NEED_HTML_MESSAGE","_showLiveDevServerNotReadyError","LIVE_DEV_SERVER_NOT_READY_MESSAGE","_openInterstitialPage","browserStarted","retryCount","connectToURL","onConnectFail","dialogPromise","DIALOG_ID_LIVE_DEVELOPMENT","LIVE_DEVELOPMENT_RELAUNCH_TITLE","LIVE_DEVELOPMENT_ERROR_MESSAGE","className","DIALOG_BTN_CLASS_LEFT","id","DIALOG_BTN_CANCEL","text","CANCEL","DIALOG_BTN_CLASS_PRIMARY","DIALOG_BTN_OK","RELAUNCH_CHROME","open","openLiveBrowser","NOT_FOUND","ERROR_CANT_FIND_CHROME","ERROR_LAUNCHING_BROWSER","ERROR_LAUNCHING_BROWSER_TITLE","retryConnect","_doLaunchAfterServerReady","initialDoc","start","one","getActiveEditor","_prepareServer","showBaseUrlPrompt","getServer","showProjectPreferencesDialog","LIVE_DEV_NEED_BASEURL_MESSAGE","readyPromise","readyToServe","getCurrentProjectServerConfig","pathResolver","makeProjectRelativeIfPossible","root","_createUserServer","_createFileServer","restart","countEvent","EVENT_TYPE","LIVE_PREVIEW","registerServer","create","prepareServerPromise","otherDocumentsInWorkingFiles","getWorkingSet","ALL_PANES","addToWorkingSet","ACTIVE_PANE","_edit","reverseInspectPref","wsPort","createWebSocketServer","showHighlight","updateHighlight","hideHighlight","hide","redrawHighlight","redraw","_onFileChanged","wasRequested","wasURLRequested","isViewable","canServe","_onDocumentSaved","absolutePath","liveEditingEnabled","documentUrl","_onDirtyFlagChange","init","theConfig","_getServer","getServerBaseUrl","definePreference","description","DESCRIPTION_LIVEDEV_WEBSOCKET_PORT","DESCRIPTION_LIVEDEV_ENABLE_REVERSE_INSPECT","makeEventDispatcher"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global open */\n\n/**\n * LiveDevelopment manages the Inspector, all Agents, and the active LiveDocument\n *\n * __STARTING__\n *\n * To start a session call `open`. This will read the currentDocument from brackets,\n * launch the LiveBrowser (currently Chrome) with the remote debugger port open,\n * establish the Inspector connection to the remote debugger, and finally load all\n * agents.\n *\n * __STOPPING__\n *\n * To stop a session call `close`. This will close the active browser window,\n * disconnect the Inspector, unload all agents, and clean up.\n *\n * __STATUS__\n *\n * Status updates are dispatched as `statusChange` jQuery events. The status\n * is passed as the first parameter and the reason for the change as the second\n * parameter. Currently only the \"Inactive\" status supports the reason parameter.\n * The status codes are:\n *\n *     -1: Error\n *      0: Inactive\n *      1: Connecting to the remote debugger\n *      2: Loading agents\n *      3: Active\n *      4: Out of sync\n *      5: Sync error\n *\n * The reason codes are:\n * - null (Unknown reason)\n * - \"explicit_close\" (LiveDevelopment.close() was called)\n * - \"navigated_away\" (The browser changed to a location outside of the project)\n * - \"detached_target_closed\" (The tab or window was closed)\n * - \"detached_replaced_with_devtools\" (The developer tools were opened in the browser)\n */\ndefine(function LiveDevelopment(require, exports, module) {\n\n\n    require(\"utils/Global\");\n\n    var _ = require(\"thirdparty/lodash\");\n\n    // Status Codes\n    var STATUS_ERROR          = exports.STATUS_ERROR          = -1;\n    var STATUS_INACTIVE       = exports.STATUS_INACTIVE       =  0;\n    var STATUS_CONNECTING     = exports.STATUS_CONNECTING     =  1;\n    var STATUS_LOADING_AGENTS = exports.STATUS_LOADING_AGENTS =  2;\n    var STATUS_ACTIVE         = exports.STATUS_ACTIVE         =  3;\n    var STATUS_OUT_OF_SYNC    = exports.STATUS_OUT_OF_SYNC    =  4;\n    var STATUS_SYNC_ERROR     = exports.STATUS_SYNC_ERROR     =  5;\n\n    var Async                = require(\"utils/Async\"),\n        CSSUtils             = require(\"language/CSSUtils\"),\n        Dialogs              = require(\"widgets/Dialogs\"),\n        DefaultDialogs       = require(\"widgets/DefaultDialogs\"),\n        DocumentManager      = require(\"document/DocumentManager\"),\n        EditorManager        = require(\"editor/EditorManager\"),\n        EventDispatcher      = require(\"utils/EventDispatcher\"),\n        FileServer           = require(\"LiveDevelopment/Servers/FileServer\").FileServer,\n        FileSystemError      = require(\"filesystem/FileSystemError\"),\n        FileUtils            = require(\"file/FileUtils\"),\n        LiveDevelopmentUtils = require(\"LiveDevelopment/LiveDevelopmentUtils\"),\n        LiveDevServerManager = require(\"LiveDevelopment/LiveDevServerManager\"),\n        MainViewManager      = require(\"view/MainViewManager\"),\n        NativeApp            = require(\"utils/NativeApp\"),\n        PreferencesDialogs   = require(\"preferences/PreferencesDialogs\"),\n        ProjectManager       = require(\"project/ProjectManager\"),\n        Strings              = require(\"strings\"),\n        StringUtils          = require(\"utils/StringUtils\"),\n        UserServer           = require(\"LiveDevelopment/Servers/UserServer\").UserServer,\n        WebSocketTransport   = require(\"LiveDevelopment/transports/WebSocketTransport\"),\n        PreferencesManager   = require(\"preferences/PreferencesManager\"),\n        Metrics         = require(\"utils/Metrics\");\n\n    // Inspector\n    var Inspector       = require(\"LiveDevelopment/Inspector/Inspector\");\n\n    // Documents\n    var CSSDocument     = require(\"LiveDevelopment/Documents/CSSDocument\"),\n        CSSPreprocessorDocument = require(\"LiveDevelopment/Documents/CSSPreprocessorDocument\"),\n        HTMLDocument    = require(\"LiveDevelopment/Documents/HTMLDocument\"),\n        JSDocument      = require(\"LiveDevelopment/Documents/JSDocument\");\n\n    // Document errors\n    var SYNC_ERROR_CLASS = \"live-preview-sync-error\";\n\n    // Agents\n    var CSSAgent = require(\"LiveDevelopment/Agents/CSSAgent\");\n\n    var agents = {\n        \"console\": require(\"LiveDevelopment/Agents/ConsoleAgent\"),\n        \"remote\": require(\"LiveDevelopment/Agents/RemoteAgent\"),\n        \"network\": require(\"LiveDevelopment/Agents/NetworkAgent\"),\n        \"dom\": require(\"LiveDevelopment/Agents/DOMAgent\"),\n        \"css\": CSSAgent,\n        \"script\": require(\"LiveDevelopment/Agents/ScriptAgent\"),\n        \"highlight\": require(\"LiveDevelopment/Agents/HighlightAgent\"),\n        \"goto\": require(\"LiveDevelopment/Agents/GotoAgent\"),\n        \"edit\": require(\"LiveDevelopment/Agents/EditAgent\")\n    };\n\n    // construct path to launch.html\n    // window location is can be one of the following:\n    // Installed:                /path/to/Brackets.app/Contents/www/index.html\n    // Installed, dev:           /path/to/Brackets.app/Contents/dev/src/index.html\n    // Installed, dev, test:     /path/to/Brackets.app/Contents/dev/test/SpecRunner.html\n    // Arbitrary git repo:       /path/to/brackets/src/index.html\n    // Arbitrary git repo, test: /path/to/brackets/test/SpecRunner.html\n    var launcherUrl = window.location.pathname;\n\n    // special case for test/SpecRunner.html since we can't tell how requirejs\n    // baseUrl is configured dynamically\n    launcherUrl = launcherUrl.replace(\"/test/SpecRunner.html\", \"/src/index.html\");\n\n    launcherUrl = launcherUrl.substr(0, launcherUrl.lastIndexOf(\"/\")) + \"/LiveDevelopment/launch.html\";\n    launcherUrl = window.location.origin + launcherUrl;\n\n    // Some agents are still experimental, so we don't enable them all by default\n    // However, extensions can enable them by calling enableAgent().\n    // This object is used as a set (thus all properties have the value 'true').\n    // Property names should match property names in the 'agents' object.\n    var _enabledAgentNames = {\n        \"console\": true,\n        \"remote\": true,\n        \"network\": true,\n        \"css\": true,\n        \"highlight\": true\n    };\n\n    /**\n     * Store the names (matching property names in the 'agent' object) of agents that we've loaded\n     * @type {string}\n     */\n    var _loadedAgentNames = [];\n\n    /**\n     * Live Preview current Document info\n     * @type {HTMLDocument}\n     */\n    var _liveDocument;\n\n    /**\n     * Related Live Documents\n     * @type {Object.<string: (HTMLDocument|CSSDocument)>}\n     */\n    var _relatedDocuments = {};\n\n    /**\n     * Promise returned for each call to open()\n     * @type {jQuery.Deferred}\n     */\n    var _openDeferred;\n\n    /**\n     * Promise returned for each call to close()\n     * @type {jQuery.Deferred}\n     */\n    var _closeDeferred;\n\n    // Disallow re-entrancy of loadAgents()\n    var _loadAgentsPromise;\n\n    /**\n     * Current live preview server\n     * @type {BaseServer}\n     */\n    var _server;\n\n    /**\n     * @private\n     * Handles of registered servers\n     */\n    var _regServers = [];\n\n    PreferencesManager.definePreference(\"livedev.wsPort\", \"number\", 8125, {\n        description: Strings.DESCRIPTION_LIVEDEV_WEBSOCKET_PORT\n    });\n\n    PreferencesManager.definePreference(\"livedev.enableReverseInspect\", \"boolean\", true, {\n        description: Strings.DESCRIPTION_LIVEDEV_ENABLE_REVERSE_INSPECT\n    });\n\n    function _isPromisePending(promise) {\n        return promise && promise.state() === \"pending\";\n    }\n\n    /** Get the current document from the document manager\n     * _adds extension, url and root to the document\n     */\n    function _getCurrentDocument() {\n        return DocumentManager.getCurrentDocument();\n    }\n\n    /** Determine which document class should be used for a given document\n     * @param {Document} document\n     */\n    function _classForDocument(doc) {\n        switch (doc.getLanguage().getId()) {\n        case \"less\":\n        case \"scss\":\n            return CSSPreprocessorDocument;\n        case \"css\":\n            return CSSDocument;\n        case \"javascript\":\n            return exports.config.experimental ? JSDocument : null;\n        }\n\n        if (LiveDevelopmentUtils.isHtmlFileExt(doc.file.fullPath)) {\n            return HTMLDocument;\n        }\n\n        return null;\n    }\n\n    function getLiveDocForPath(path) {\n        if (!_server) {\n            return undefined;\n        }\n\n        return _server.get(path);\n    }\n\n    function getLiveDocForEditor(editor) {\n        if (!editor) {\n            return null;\n        }\n        return getLiveDocForPath(editor.document.file.fullPath);\n    }\n\n    /**\n     * @private\n     * Clears errors from line number gutter (line class)\n     * @param {HTMLDocument|CSSDocument} liveDocument\n     */\n    function _doClearErrors(liveDocument) {\n        var lineHandle;\n\n        if (!liveDocument.editor ||\n                !liveDocument._errorLineHandles ||\n                !liveDocument._errorLineHandles.length) {\n            return;\n        }\n\n        liveDocument.editor._codeMirror.operation(function () {\n            while (true) {\n                // Iterate over all lines that were previously marked with an error\n                lineHandle = liveDocument._errorLineHandles.pop();\n\n                if (!lineHandle) {\n                    break;\n                }\n\n                liveDocument.editor._codeMirror.removeLineClass(lineHandle, \"wrap\", SYNC_ERROR_CLASS);\n            }\n        });\n    }\n\n    /**\n     * @private\n     * Make a message to direct users to the troubleshooting page\n     * @param {string} msg Original message\n     * @return {string} Original message plus link to troubleshooting page.\n     */\n    function _makeTroubleshootingMessage(msg) {\n        return msg + \" \" + StringUtils.format(Strings.LIVE_DEVELOPMENT_TROUBLESHOOTING, brackets.config.troubleshoot_url);\n    }\n\n    /**\n     * @private\n     * Close a live document\n     */\n    function _closeDocument(liveDocument) {\n        _doClearErrors(liveDocument);\n        liveDocument.close();\n\n        if (liveDocument.editor) {\n            liveDocument.editor.off(\".livedev\");\n        }\n\n        liveDocument.off(\".livedev\");\n    }\n\n    /**\n     * Removes the given CSS/JSDocument from _relatedDocuments. Signals that the\n     * given file is no longer associated with the HTML document that is live (e.g.\n     * if the related file has been deleted on disk).\n     */\n    function _closeRelatedDocument(liveDoc) {\n        if (_relatedDocuments[liveDoc.doc.url]) {\n            delete _relatedDocuments[liveDoc.doc.url];\n        }\n\n        if (_server) {\n            _server.remove(liveDoc);\n        }\n\n        _closeDocument(liveDoc);\n    }\n\n    /**\n     * Update the status. Triggers a statusChange event.\n     * @param {number} status new status\n     * @param {?string} closeReason Optional string key suffix to display to\n     *     user when closing the live development connection (see LIVE_DEV_* keys)\n     */\n    function _setStatus(status, closeReason) {\n        // Don't send a notification when the status didn't actually change\n        if (status === exports.status) {\n            return;\n        }\n\n        exports.status = status;\n\n        var reason = status === STATUS_INACTIVE ? closeReason : null;\n        exports.trigger(\"statusChange\", status, reason);\n    }\n\n    /**\n     * @private\n     * Event handler for live document errors. Displays error status in the editor gutter.\n     * @param {$.Event} event\n     * @param {HTMLDocument|CSSDocument} liveDocument\n     * @param {Array.<{token: SimpleNode, startPos: Pos, endPos: Pos}>} errors\n     */\n    function _handleLiveDocumentStatusChanged(liveDocument) {\n        var startLine,\n            endLine,\n            i,\n            lineHandle,\n            status = (liveDocument.errors.length) ? STATUS_SYNC_ERROR : STATUS_ACTIVE;\n\n        _setStatus(status);\n\n        if (!liveDocument.editor) {\n            return;\n        }\n\n        // Buffer addLineClass DOM changes in a CodeMirror operation\n        liveDocument.editor._codeMirror.operation(function () {\n            // Remove existing errors before marking new ones\n            _doClearErrors(liveDocument);\n\n            liveDocument._errorLineHandles = liveDocument._errorLineHandles || [];\n\n            liveDocument.errors.forEach(function (error) {\n                startLine = error.startPos.line;\n                endLine = error.endPos.line;\n\n                for (i = startLine; i < endLine + 1; i++) {\n                    lineHandle = liveDocument.editor._codeMirror.addLineClass(i, \"wrap\", SYNC_ERROR_CLASS);\n                    liveDocument._errorLineHandles.push(lineHandle);\n                }\n            });\n        });\n    }\n\n    /**\n     * @private\n     * Close all live documents\n     */\n    function _closeDocuments() {\n        if (_liveDocument) {\n            _closeDocument(_liveDocument);\n            _liveDocument = undefined;\n        }\n\n        Object.keys(_relatedDocuments).forEach(function (url) {\n            _closeDocument(_relatedDocuments[url]);\n            delete _relatedDocuments[url];\n        });\n\n        // Clear all documents from request filtering\n        if (_server) {\n            _server.clear();\n        }\n    }\n\n    /**\n     * @private\n     * Create a live version of a Brackets document\n     * @param {Document} doc Current document\n     * @param {Editor} editor Current editor\n     * @return {?(HTMLDocument|CSSDocument)}\n     */\n    function _createDocument(doc, editor) {\n        var DocClass        = _classForDocument(doc),\n            liveDocument    = new DocClass(doc, editor);\n\n        if (!DocClass) {\n            return null;\n        }\n\n        liveDocument.on(\"statusChanged.livedev\", function () {\n            _handleLiveDocumentStatusChanged(liveDocument);\n        });\n\n        return liveDocument;\n    }\n\n    /**\n     * @private\n     * Initialize `_liveDocument`.\n     * @param {Document} doc Current document\n     */\n    function _createLiveDocumentForFrame(doc) {\n        // create live document\n        doc._ensureMasterEditor();\n        _liveDocument = _createDocument(doc, doc._masterEditor);\n        _server.add(_liveDocument);\n    }\n\n    /** Enable an agent. Takes effect next time a connection is made. Does not affect\n     *  current live development sessions.\n     *\n     *  @param {string} name of agent to enable\n     */\n    function enableAgent(name) {\n        if (agents.hasOwnProperty(name) && !_enabledAgentNames.hasOwnProperty(name)) {\n            _enabledAgentNames[name] = true;\n        }\n    }\n\n    /** Disable an agent. Takes effect next time a connection is made. Does not affect\n     *  current live development sessions.\n     *\n     *  @param {string} name of agent to disable\n     */\n    function disableAgent(name) {\n        if (_enabledAgentNames.hasOwnProperty(name)) {\n            delete _enabledAgentNames[name];\n        }\n    }\n\n    /** Documents are considered to be out-of-sync if they are dirty and\n     *  do not have \"update while editing\" support\n     * @param {Document} doc\n     */\n    function _docIsOutOfSync(doc) {\n        var liveDoc = _server && _server.get(doc.file.fullPath),\n            isLiveEditingEnabled = liveDoc && liveDoc.isLiveEditingEnabled();\n\n        return doc.isDirty && !isLiveEditingEnabled;\n    }\n\n    /** Triggered by Inspector.error */\n    function _onError(event, error, msgData) {\n        var message;\n\n        // Sometimes error.message is undefined\n        if (!error.message) {\n            console.warn(\"Expected a non-empty string in error.message, got this instead:\", error.message);\n            message = JSON.stringify(error);\n        } else {\n            message = error.message;\n        }\n\n        // Remove \"Uncaught\" from the beginning to avoid the inspector popping up\n        if (message && message.substr(0, 8) === \"Uncaught\") {\n            message = message.substr(9);\n        }\n\n        // Additional information, like exactly which parameter could not be processed.\n        var data = error.data;\n        if (Array.isArray(data)) {\n            message += \"\\n\" + data.join(\"\\n\");\n        }\n\n        // Show the message, but include the error object for further information (e.g. error code)\n        console.error(message, error, msgData);\n    }\n\n    function _styleSheetAdded(event, url) {\n        var path = _server && _server.urlToPath(url),\n            exists = !!_relatedDocuments[url];\n\n        // path may be null if loading an external stylesheet.\n        // Also, the stylesheet may already exist and be reported as added twice\n        // due to Chrome reporting added/removed events after incremental changes\n        // are pushed to the browser\n        if (!path || exists) {\n            return;\n        }\n\n        var docPromise = DocumentManager.getDocumentForPath(path);\n\n        docPromise.done(function (doc) {\n            if ((_classForDocument(doc) === CSSDocument ||\n                    _classForDocument(doc) === CSSPreprocessorDocument) &&\n                    (!_liveDocument || (doc !== _liveDocument.doc))) {\n                // The doc may already have an editor (e.g. starting live preview from an css file),\n                // so pass the editor if any\n                var liveDoc = _createDocument(doc, doc._masterEditor);\n                if (liveDoc) {\n                    _server.add(liveDoc);\n                    _relatedDocuments[doc.url] = liveDoc;\n\n                    liveDoc.on(\"deleted.livedev\", function (event, liveDoc) {\n                        _closeRelatedDocument(liveDoc);\n                    });\n                }\n            }\n        });\n    }\n\n    /** Unload the agents */\n    function unloadAgents() {\n        _loadedAgentNames.forEach(function (name) {\n            agents[name].unload();\n        });\n        _loadedAgentNames = [];\n    }\n\n    /**\n     * @private\n     * Invoke a no-arg method on an inspector agent\n     * @param {string} name Agent name\n     * @param {stirng} methodName Method name to call on the agent\n     */\n    function _invokeAgentMethod(name, methodName) {\n        var oneAgentPromise;\n\n        if (agents[name] && agents[name][methodName]) {\n            oneAgentPromise = agents[name][methodName].call();\n        }\n\n        if (!oneAgentPromise) {\n            oneAgentPromise = new $.Deferred().resolve().promise();\n        } else {\n            oneAgentPromise.fail(function () {\n                console.error(methodName + \" failed on agent\", name);\n            });\n        }\n\n        return oneAgentPromise;\n    }\n\n    function getEnabledAgents() {\n        var enabledAgents;\n\n        // Select agents to use\n        if (exports.config.experimental) {\n            // load all agents\n            enabledAgents = agents;\n        } else {\n            // load only enabled agents\n            enabledAgents = _enabledAgentNames;\n        }\n\n        return Object.keys(enabledAgents);\n    }\n\n    /**\n     * @private\n     * Setup agents that need inspector domains enabled before loading\n     */\n    function _enableAgents() {\n        // enable agents in parallel\n        return Async.doInParallel(\n            getEnabledAgents(),\n            function (name) {\n                return _invokeAgentMethod(name, \"enable\");\n            },\n            true\n        );\n    }\n\n    /** Load the agents */\n    function loadAgents() {\n        // If we're already loading agents return same promise\n        if (_loadAgentsPromise) {\n            return _loadAgentsPromise;\n        }\n\n        var result = new $.Deferred(),\n            allAgentsPromise;\n\n        _loadAgentsPromise = result.promise();\n\n        _setStatus(STATUS_LOADING_AGENTS);\n\n        // load agents in parallel\n        allAgentsPromise = Async.doInParallel(\n            getEnabledAgents(),\n            function (name) {\n                return _invokeAgentMethod(name, \"load\").done(function () {\n                    _loadedAgentNames.push(name);\n                });\n            },\n            true\n        );\n\n        // wrap agent loading with a timeout\n        allAgentsPromise = Async.withTimeout(allAgentsPromise, 10000);\n\n        allAgentsPromise.done(function () {\n            var doc = (_liveDocument) ? _liveDocument.doc : null;\n\n            if (doc) {\n                var status = STATUS_ACTIVE;\n\n                if (_docIsOutOfSync(doc)) {\n                    status = STATUS_OUT_OF_SYNC;\n                }\n\n                _setStatus(status);\n                result.resolve();\n            } else {\n                result.reject();\n            }\n        });\n\n        allAgentsPromise.fail(result.reject);\n\n        _loadAgentsPromise\n            .fail(function () {\n                // show error loading live dev dialog\n                _setStatus(STATUS_ERROR);\n\n                Dialogs.showModalDialog(\n                    Dialogs.DIALOG_ID_ERROR,\n                    Strings.LIVE_DEVELOPMENT_ERROR_TITLE,\n                    _makeTroubleshootingMessage(Strings.LIVE_DEV_LOADING_ERROR_MESSAGE)\n                );\n            })\n            .always(function () {\n                _loadAgentsPromise = null;\n            });\n\n        return _loadAgentsPromise;\n    }\n\n    /**\n     * @private\n     * Determine an index file that can be used to start Live Development.\n     * This function will inspect all files in a project to find the closest index file\n     * available for currently opened document. We are searching for these files:\n     *  - index.html\n     *  - index.htm\n     *\n     * If the project is configured with a custom base url for live development, then\n     * the list of possible index files is extended to contain these index files too:\n     *  - index.php\n     *  - index.php3\n     *  - index.php4\n     *  - index.php5\n     *  - index.phtm\n     *  - index.phtml\n     *  - index.cfm\n     *  - index.cfml\n     *  - index.asp\n     *  - index.aspx\n     *  - index.jsp\n     *  - index.jspx\n     *  - index.shm\n     *  - index.shml\n     *\n     * If a file was found, the promise will be resolved with the full path to this file. If no file\n     * was found in the whole project tree, the promise will be resolved with null.\n     *\n     * @return {jQuery.Promise} A promise that is resolved with a full path\n     * to a file if one could been determined, or null if there was no suitable index\n     * file.\n     */\n    function _getInitialDocFromCurrent() {\n        var doc = _getCurrentDocument(),\n            refPath,\n            i;\n\n        // Is the currently opened document already a file we can use for Live Development?\n        if (doc) {\n            refPath = doc.file.fullPath;\n            if (LiveDevelopmentUtils.isStaticHtmlFileExt(refPath) || LiveDevelopmentUtils.isServerHtmlFileExt(refPath)) {\n                return new $.Deferred().resolve(doc);\n            }\n        }\n\n        var result = new $.Deferred();\n\n        var baseUrl = ProjectManager.getBaseUrl(),\n            hasOwnServerForLiveDevelopment = (baseUrl && baseUrl.length);\n\n        ProjectManager.getAllFiles().done(function (allFiles) {\n            var projectRoot = ProjectManager.getProjectRoot().fullPath,\n                containingFolder,\n                indexFileFound = false,\n                stillInProjectTree = true;\n\n            if (refPath) {\n                containingFolder = FileUtils.getDirectoryPath(refPath);\n            } else {\n                containingFolder = projectRoot;\n            }\n\n            var filteredFiltered = allFiles.filter(function (item) {\n                var parent = FileUtils.getParentPath(item.fullPath);\n\n                return (containingFolder.indexOf(parent) === 0);\n            });\n\n            var filterIndexFile = function (fileInfo) {\n                if (fileInfo.fullPath.indexOf(containingFolder) === 0) {\n                    if (FileUtils.getFilenameWithoutExtension(fileInfo.name) === \"index\") {\n                        if (hasOwnServerForLiveDevelopment) {\n                            if ((LiveDevelopmentUtils.isServerHtmlFileExt(fileInfo.name)) ||\n                                    (LiveDevelopmentUtils.isStaticHtmlFileExt(fileInfo.name))) {\n                                return true;\n                            }\n                        } else if (LiveDevelopmentUtils.isStaticHtmlFileExt(fileInfo.name)) {\n                            return true;\n                        }\n                    } else {\n                        return false;\n                    }\n                }\n            };\n\n            while (!indexFileFound && stillInProjectTree) {\n                i = _.findIndex(filteredFiltered, filterIndexFile);\n\n                // We found no good match\n                if (i === -1) {\n                    // traverse the directory tree up one level\n                    containingFolder = FileUtils.getParentPath(containingFolder);\n                    // Are we still inside the project?\n                    if (containingFolder.indexOf(projectRoot) === -1) {\n                        stillInProjectTree = false;\n                    }\n                } else {\n                    indexFileFound = true;\n                }\n            }\n\n            if (i !== -1) {\n                DocumentManager.getDocumentForPath(filteredFiltered[i].fullPath).then(result.resolve, result.resolve);\n                return;\n            }\n\n            result.resolve(null);\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * If the current editor is for a CSS preprocessor file, then add it to the style sheet\n     * so that we can track cursor positions in the editor to show live preview highlighting.\n     * For normal CSS we only do highlighting from files we know for sure are referenced by the\n     * current live preview document, but for preprocessors we just assume that any preprocessor\n     * file you edit is probably related to the live preview.\n     *\n     * @param {Event} event (unused)\n     * @param {Editor} current Current editor\n     * @param {Editor} previous Previous editor\n     *\n     */\n    function onActiveEditorChange(event, current, previous) {\n        if (previous && previous.document &&\n                CSSUtils.isCSSPreprocessorFile(previous.document.file.fullPath)) {\n            var prevDocUrl = _server && _server.pathToUrl(previous.document.file.fullPath);\n\n            if (_relatedDocuments && _relatedDocuments[prevDocUrl]) {\n                _closeRelatedDocument(_relatedDocuments[prevDocUrl]);\n            }\n        }\n        if (current && current.document &&\n                CSSUtils.isCSSPreprocessorFile(current.document.file.fullPath)) {\n            var docUrl = _server && _server.pathToUrl(current.document.file.fullPath);\n            _styleSheetAdded(null, docUrl);\n        }\n    }\n\n    /**\n     * @private\n     * While still connected to the Inspector, do cleanup for agents,\n     * documents and server.\n     * @param {boolean} doCloseWindow Use true to close the window/tab in the browser\n     * @return {jQuery.Promise} A promise that is always resolved\n     */\n    function _doInspectorDisconnect(doCloseWindow) {\n        var closePromise,\n            deferred    = new $.Deferred(),\n            connected   = Inspector.connected();\n\n        EditorManager.off(\"activeEditorChange\", onActiveEditorChange);\n\n        Inspector.Page.off(\".livedev\");\n        Inspector.off(\".livedev\");\n\n        // Wait if agents are loading\n        if (_loadAgentsPromise) {\n            _loadAgentsPromise.always(unloadAgents);\n        } else {\n            unloadAgents();\n        }\n\n        // Close live documents\n        _closeDocuments();\n\n        if (_server) {\n            // Stop listening for requests when disconnected\n            _server.stop();\n\n            // Dispose server\n            _server = null;\n        }\n\n        if (doCloseWindow && connected) {\n            closePromise = Inspector.Runtime.evaluate(\"window.open('', '_self').close();\");\n\n            // Add a timeout to continue cleanup if Inspector does not respond\n            closePromise = Async.withTimeout(closePromise, 5000);\n        } else {\n            closePromise = new $.Deferred().resolve();\n        }\n\n        // Disconnect WebSocket if connected\n        closePromise.always(function () {\n            if (Inspector.connected()) {\n                Inspector.disconnect().always(deferred.resolve);\n            } else {\n                deferred.resolve();\n            }\n        });\n\n        return deferred.promise();\n    }\n\n    /**\n     * @private\n     * Close the connection and the associated window asynchronously\n     * @param {boolean} doCloseWindow Use true to close the window/tab in the browser\n     * @param {?string} reason Optional string key suffix to display to user (see LIVE_DEV_* keys)\n     * @return {jQuery.Promise} Always return a resolved promise once the connection is closed\n     */\n    function _close(doCloseWindow, reason) {\n        WebSocketTransport.closeWebSocketServer();\n        if (_closeDeferred) {\n            return _closeDeferred;\n        }\n        _closeDeferred = new $.Deferred();\n        _closeDeferred.always(function () {\n            _closeDeferred = null;\n        });\n\n\n        var promise = _closeDeferred.promise();\n\n        /*\n         * Finish closing the live development connection, including setting\n         * the status accordingly.\n         */\n        function cleanup() {\n            // Need to do this in order to trigger the corresponding CloseLiveBrowser cleanups required on\n            // the native Mac side\n            var closeDeferred = (brackets.platform === \"mac\") ? NativeApp.closeLiveBrowser() : $.Deferred().resolve();\n            closeDeferred.done(function () {\n                _setStatus(STATUS_INACTIVE, reason || \"explicit_close\");\n                // clean-up registered servers\n                _regServers.forEach(function (server) {\n                    LiveDevServerManager.removeServer(server);\n                });\n                _regServers = [];\n                _closeDeferred.resolve();\n            }).fail(function (err) {\n                if (err) {\n                    reason +=  \" (\" + err + \")\";\n                }\n                _setStatus(STATUS_INACTIVE, reason || \"explicit_close\");\n                _closeDeferred.resolve();\n            });\n        }\n\n        if (_isPromisePending(_openDeferred)) {\n            // Reject calls to open if requests are still pending\n            _openDeferred.reject();\n        }\n\n        if (exports.status === STATUS_INACTIVE) {\n            // Ignore close if status is inactive\n            _closeDeferred.resolve();\n        } else {\n            _doInspectorDisconnect(doCloseWindow).always(cleanup);\n        }\n\n        return promise;\n    }\n\n    // WebInspector Event: Page.frameNavigated\n    function _onFrameNavigated(event, res) {\n        // res = {frame}\n        var url = res.frame.url,\n            baseUrl,\n            baseUrlRegExp;\n\n        // Only check domain of root frame (with undefined parentId)\n        if (res.frame.parentId) {\n            return;\n        }\n\n        // Any local file is OK\n        if (url.match(/^file:\\/\\//i) || !_server) {\n            return;\n        }\n\n        // Need base url to build reg exp\n        baseUrl = _server.getBaseUrl();\n        if (!baseUrl) {\n            return;\n        }\n\n        // Test that url is within site\n        baseUrlRegExp = new RegExp(\"^\" + StringUtils.regexEscape(baseUrl), \"i\");\n        if (!url.match(baseUrlRegExp)) {\n            // No longer in site, so terminate live dev, but don't close browser window\n            _close(false, \"navigated_away\");\n        }\n    }\n\n    /**\n     * @private\n     * Triggered by unexpected Inspector disconnect event\n     */\n    function _onDisconnect(event) {\n        _close(false, \"closed_unknown_reason\");\n    }\n\n    function _onDetached(event, res) {\n        var closeReason;\n\n        if (res && res.reason) {\n            // Get the explanation from res.reason, e.g. \"replaced_with_devtools\", \"target_closed\", \"canceled_by_user\"\n            // Examples taken from https://chromiumcodereview.appspot.com/10947037/patch/12001/13004\n            // However, the link refers to the Chrome Extension API, it may not apply 100% to the Inspector API\n            // Prefix with \"detached_\" to create a quasi-namespace for Chrome's reasons\n            closeReason = \"detached_\" + res.reason;\n        }\n\n        _close(false, closeReason);\n    }\n\n    /**\n     * Unload and reload agents\n     * @return {jQuery.Promise} Resolves once the agents are loaded\n     */\n    function reconnect() {\n        if (_loadAgentsPromise) {\n            // Agents are already loading, so don't unload\n            return _loadAgentsPromise;\n        }\n\n        unloadAgents();\n\n        // Clear any existing related documents before we reload the agents.\n        // We need to recreate them for the reloaded document due to some\n        // desirable side-effects (see #7606). Eventually, we should simplify\n        // the way we get that behavior.\n        _.forOwn(_relatedDocuments, function (relatedDoc) {\n            _closeRelatedDocument(relatedDoc);\n        });\n\n        return loadAgents();\n    }\n\n    /** reload the live preview */\n    function reload() {\n        // Unload and reload agents before reloading the page\n        // Some agents (e.g. DOMAgent and RemoteAgent) require us to\n        // navigate to the page first before loading can complete.\n        // To accomodate this, we load all agents (in reconnect())\n        // and navigate in parallel.\n        reconnect();\n\n        // Reload HTML page\n        Inspector.Page.reload();\n    }\n\n    /**\n     * Close the connection and the associated window asynchronously\n     * @return {jQuery.Promise} Resolves once the connection is closed\n     */\n    function close() {\n        return _close(true);\n    }\n\n    /**\n     * @private\n     * Create a promise that resolves when the interstitial page has\n     * finished loading.\n     *\n     * @return {jQuery.Promise} Resolves once page is loaded\n     */\n    function _waitForInterstitialPageLoad() {\n        var deferred    = $.Deferred(),\n            keepPolling = true,\n            timer       = window.setTimeout(function () {\n                keepPolling = false;\n                deferred.reject();\n            }, 10000); // 10 seconds\n\n        /*\n         * Asynchronously check to see if the interstitial page has\n         * finished loading; if not, check again until timing out.\n         */\n        function pollInterstitialPage() {\n            if (keepPolling && Inspector.connected()) {\n                Inspector.Runtime.evaluate(\"window.isBracketsLiveDevelopmentInterstitialPageLoaded\", function (response) {\n                    var result = response.result;\n\n                    if (result.type === \"boolean\" && result.value) {\n                        window.clearTimeout(timer);\n                        deferred.resolve();\n                    } else {\n                        window.setTimeout(pollInterstitialPage, 100);\n                    }\n                });\n            } else {\n                deferred.reject();\n            }\n        }\n\n        pollInterstitialPage();\n        return deferred.promise();\n    }\n\n    /**\n     * @private\n     * Load agents and navigate to the target document once the\n     * interstitial page has finished loading.\n     */\n    function _onInterstitialPageLoad() {\n\n        Inspector.Runtime.evaluate(\"window.navigator.userAgent\", function (uaResponse) {\n            Inspector.setUserAgent(uaResponse.result.value);\n        });\n\n        // Domains for some agents must be enabled first before loading\n        var enablePromise = Inspector.Page.enable().then(function () {\n            return Inspector.DOM.enable().then(_enableAgents, _enableAgents);\n        });\n\n        enablePromise.done(function () {\n            // Some agents (e.g. DOMAgent and RemoteAgent) require us to\n            // navigate to the page first before loading can complete.\n            // To accomodate this, we load all agents and navigate in\n            // parallel.\n\n            // resolve/reject the open() promise after agents complete\n            loadAgents().then(_openDeferred.resolve, _openDeferred.reject);\n\n            _getInitialDocFromCurrent().done(function (doc) {\n                if (doc && _liveDocument) {\n                    if (doc !== _liveDocument.doc) {\n                        _createLiveDocumentForFrame(doc);\n                    }\n\n                    // Navigate from interstitial to the document\n                    // Fires a frameNavigated event\n                    if (_server) {\n                        Inspector.Page.navigate(_server.pathToUrl(doc.file.fullPath));\n                    } else {\n                        console.error(\"LiveDevelopment._onInterstitialPageLoad(): No server active\");\n                    }\n                } else {\n                    // Unlikely that we would get to this state where\n                    // a connection is in process but there is no current\n                    // document\n                    close();\n                }\n            });\n        });\n    }\n\n    /** Triggered by Inspector.connect */\n    function _onConnect(event) {\n        // When the browser navigates away from the primary live document\n        Inspector.Page.on(\"frameNavigated.livedev\", _onFrameNavigated);\n\n        // When the Inspector WebSocket disconnects unexpectedely\n        Inspector.on(\"disconnect.livedev\", _onDisconnect);\n\n        _waitForInterstitialPageLoad()\n            .fail(function () {\n                close();\n\n                Dialogs.showModalDialog(\n                    DefaultDialogs.DIALOG_ID_ERROR,\n                    Strings.LIVE_DEVELOPMENT_ERROR_TITLE,\n                    _makeTroubleshootingMessage(Strings.LIVE_DEV_LOADING_ERROR_MESSAGE)\n                );\n            })\n            .done(_onInterstitialPageLoad);\n    }\n\n    function _showWrongDocError() {\n        Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_ERROR,\n            Strings.LIVE_DEVELOPMENT_ERROR_TITLE,\n            _makeTroubleshootingMessage(Strings.LIVE_DEV_NEED_HTML_MESSAGE)\n        );\n        _openDeferred.reject();\n    }\n\n    function _showLiveDevServerNotReadyError() {\n        Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_ERROR,\n            Strings.LIVE_DEVELOPMENT_ERROR_TITLE,\n            _makeTroubleshootingMessage(Strings.LIVE_DEV_SERVER_NOT_READY_MESSAGE)\n        );\n        _openDeferred.reject();\n    }\n\n    function _openInterstitialPage() {\n        var browserStarted  = false,\n            retryCount      = 0;\n\n        // Open the live browser if the connection fails, retry 3 times\n        Inspector.connectToURL(launcherUrl).fail(function onConnectFail(err) {\n            if (err === \"CANCEL\") {\n                _openDeferred.reject(err);\n                return;\n            }\n\n            if (retryCount > 3) {\n                _setStatus(STATUS_ERROR);\n\n                var dialogPromise = Dialogs.showModalDialog(\n                    DefaultDialogs.DIALOG_ID_LIVE_DEVELOPMENT,\n                    Strings.LIVE_DEVELOPMENT_RELAUNCH_TITLE,\n                    _makeTroubleshootingMessage(Strings.LIVE_DEVELOPMENT_ERROR_MESSAGE),\n                    [\n                        {\n                            className: Dialogs.DIALOG_BTN_CLASS_LEFT,\n                            id: Dialogs.DIALOG_BTN_CANCEL,\n                            text: Strings.CANCEL\n                        },\n                        {\n                            className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                            id: Dialogs.DIALOG_BTN_OK,\n                            text: Strings.RELAUNCH_CHROME\n                        }\n                    ]\n                );\n\n                dialogPromise.done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_OK) {\n                        // User has chosen to reload Chrome, quit the running instance\n                        _setStatus(STATUS_INACTIVE);\n                        _close()\n                            .done(function () {\n                                browserStarted = false;\n                                // Continue to use _openDeferred\n                                open(true);\n                            })\n                            .fail(function (err) {\n                                // Report error?\n                                _setStatus(STATUS_ERROR);\n                                browserStarted = false;\n                                _openDeferred.reject(\"CLOSE_LIVE_BROWSER\");\n                            });\n                    } else {\n                        _close()\n                            .done(function () {\n                                browserStarted = false;\n                                _openDeferred.reject(\"CANCEL\");\n                            })\n                            .fail(function (err) {\n                                // Report error?\n                                _setStatus(STATUS_ERROR);\n                                browserStarted = false;\n                                _openDeferred.reject(\"CLOSE_LIVE_BROWSER\");\n                            });\n                    }\n                });\n\n                return;\n            }\n            retryCount++;\n\n            if (!browserStarted && exports.status !== STATUS_ERROR) {\n                NativeApp.openLiveBrowser(\n                    launcherUrl,\n                    true        // enable remote debugging\n                )\n                    .done(function () {\n                        browserStarted = true;\n                    })\n                    .fail(function (err) {\n                        var message;\n\n                        _setStatus(STATUS_ERROR);\n                        if (err === FileSystemError.NOT_FOUND) {\n                            message = Strings.ERROR_CANT_FIND_CHROME;\n                        } else {\n                            message = StringUtils.format(Strings.ERROR_LAUNCHING_BROWSER, err);\n                        }\n\n                        Dialogs.showModalDialog(\n                            DefaultDialogs.DIALOG_ID_ERROR,\n                            Strings.ERROR_LAUNCHING_BROWSER_TITLE,\n                            _makeTroubleshootingMessage(message)\n                        );\n\n                        _openDeferred.reject(\"OPEN_LIVE_BROWSER\");\n                    });\n            }\n\n            if (exports.status !== STATUS_ERROR) {\n                window.setTimeout(function retryConnect() {\n                    Inspector.connectToURL(launcherUrl).fail(onConnectFail);\n                }, 3000);\n            }\n        });\n    }\n\n    // helper function that actually does the launch once we are sure we have\n    // a doc and the server for that doc is up and running.\n    function _doLaunchAfterServerReady(initialDoc) {\n        // update status\n        _setStatus(STATUS_CONNECTING);\n        _createLiveDocumentForFrame(initialDoc);\n\n        // start listening for requests\n        _server.start();\n\n        // Install a one-time event handler when connected to the launcher page\n        Inspector.one(\"connect\", _onConnect);\n\n        // open browser to the interstitial page to prepare for loading agents\n        _openInterstitialPage();\n\n        // Once all agents loaded (see _onInterstitialPageLoad()), begin Live Highlighting for preprocessor documents\n        _openDeferred.done(function () {\n            // Setup activeEditorChange event listener so that we can track cursor positions in\n            // CSS preprocessor files and perform live preview highlighting on all elements with\n            // the current selector in the preprocessor file.\n            EditorManager.on(\"activeEditorChange\", onActiveEditorChange);\n\n            // Explicitly trigger onActiveEditorChange so that live preview highlighting\n            // can be set up for the preprocessor files.\n            onActiveEditorChange(null, EditorManager.getActiveEditor(), null);\n        });\n    }\n\n    function _prepareServer(doc) {\n        var deferred = new $.Deferred(),\n            showBaseUrlPrompt = false;\n\n        _server = LiveDevServerManager.getServer(doc.file.fullPath);\n\n        // Optionally prompt for a base URL if no server was found but the\n        // file is a known server file extension\n        showBaseUrlPrompt = !exports.config.experimental && !_server &&\n            LiveDevelopmentUtils.isServerHtmlFileExt(doc.file.fullPath);\n\n        if (showBaseUrlPrompt) {\n            // Prompt for a base URL\n            PreferencesDialogs.showProjectPreferencesDialog(\"\", Strings.LIVE_DEV_NEED_BASEURL_MESSAGE)\n                .done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_OK && ProjectManager.getBaseUrl()) {\n                        // If base url is specifed, then re-invoke _prepareServer() to continue\n                        _prepareServer(doc).then(deferred.resolve, deferred.reject);\n                    } else {\n                        deferred.reject();\n                    }\n                });\n        } else if (_server) {\n            // Startup the server\n            var readyPromise = _server.readyToServe();\n            if (!readyPromise) {\n                _showLiveDevServerNotReadyError();\n                deferred.reject();\n            } else {\n                readyPromise.then(deferred.resolve, function () {\n                    _showLiveDevServerNotReadyError();\n                    deferred.reject();\n                });\n            }\n        } else {\n            // No server found\n            deferred.reject();\n        }\n\n        return deferred.promise();\n    }\n\n    function getCurrentProjectServerConfig() {\n        return {\n            baseUrl: ProjectManager.getBaseUrl(),\n            pathResolver: ProjectManager.makeProjectRelativeIfPossible,\n            root: ProjectManager.getProjectRoot().fullPath\n        };\n    }\n\n    function _createUserServer() {\n        return new UserServer(getCurrentProjectServerConfig());\n    }\n\n    function _createFileServer() {\n        return new FileServer(getCurrentProjectServerConfig());\n    }\n\n    /**\n     * Open the Connection and go live\n     *\n     * @param {!boolean} restart  true if relaunching and _openDeferred already exists\n     * @return {jQuery.Promise} Resolves once live preview is open\n     */\n    function open(restart) {\n        // If close() is still pending, wait for close to finish before opening\n        if (_isPromisePending(_closeDeferred)) {\n            return _closeDeferred.then(function () {\n                return open(restart);\n            });\n        }\n\n        if (!restart) {\n            // Return existing promise if it is still pending\n            if (_isPromisePending(_openDeferred)) {\n                return _openDeferred;\n            }\n            _openDeferred = new $.Deferred();\n            _openDeferred.always(function () {\n                _openDeferred = null;\n            });\n\n        }\n        // Send analytics data when Live Preview is opened\n        Metrics.countEvent(\n            Metrics.EVENT_TYPE.LIVE_PREVIEW,\n            \"Open\",\n            \"usage\"\n        );\n\n        // Register user defined server provider and keep handlers for further clean-up\n        _regServers.push(LiveDevServerManager.registerServer({ create: _createUserServer }, 99));\n        _regServers.push(LiveDevServerManager.registerServer({ create: _createFileServer }, 0));\n\n        // TODO: need to run _onFileChanged() after load if doc != currentDocument here? Maybe not, since activeEditorChange\n        // doesn't trigger it, while inline editors can still cause edits in doc other than currentDoc...\n        _getInitialDocFromCurrent().done(function (doc) {\n            var prepareServerPromise = (doc && _prepareServer(doc)) || new $.Deferred().reject(),\n                otherDocumentsInWorkingFiles;\n\n            if (doc && !doc._masterEditor) {\n                otherDocumentsInWorkingFiles = MainViewManager.getWorkingSet(MainViewManager.ALL_PANES).length;\n                MainViewManager.addToWorkingSet(MainViewManager.ACTIVE_PANE, doc.file);\n\n                if (!otherDocumentsInWorkingFiles) {\n                    MainViewManager._edit(MainViewManager.ACTIVE_PANE, doc);\n                }\n            }\n\n            // wait for server (StaticServer, Base URL or file:)\n            prepareServerPromise\n                .done(function () {\n                    var reverseInspectPref = PreferencesManager.get(\"livedev.enableReverseInspect\"),\n                        wsPort             = PreferencesManager.get(\"livedev.wsPort\");\n\n                    if (wsPort && reverseInspectPref) {\n                        WebSocketTransport.createWebSocketServer(wsPort);\n                    }\n                    _doLaunchAfterServerReady(doc);\n                })\n                .fail(function () {\n                    _showWrongDocError();\n                });\n        });\n\n        return _openDeferred.promise();\n    }\n\n    /** Enable highlighting */\n    function showHighlight() {\n        var doc = getLiveDocForEditor(EditorManager.getActiveEditor());\n\n        if (doc && doc.updateHighlight) {\n            doc.updateHighlight();\n        }\n    }\n\n    /** Hide any active highlighting */\n    function hideHighlight() {\n        if (Inspector.connected() && agents.highlight) {\n            agents.highlight.hide();\n        }\n    }\n\n    /** Redraw highlights **/\n    function redrawHighlight() {\n        if (Inspector.connected() && agents.highlight) {\n            agents.highlight.redraw();\n        }\n    }\n\n    /**\n     * @private\n     * MainViewManager.currentFileChange event handler.\n     */\n    function _onFileChanged() {\n        var doc = _getCurrentDocument();\n\n        if (!doc || !Inspector.connected()) {\n            return;\n        }\n\n        // close the current session and begin a new session if the current\n        // document changes to an HTML document that was not loaded yet\n        var docUrl = _server && _server.pathToUrl(doc.file.fullPath),\n            wasRequested = agents.network && agents.network.wasURLRequested(docUrl),\n            isViewable = exports.config.experimental || (_server && _server.canServe(doc.file.fullPath));\n\n        if (!wasRequested && isViewable) {\n            // Update status\n            _setStatus(STATUS_CONNECTING);\n\n            // clear live doc and related docs\n            _closeDocuments();\n\n            // create new live doc\n            _createLiveDocumentForFrame(doc);\n\n            // Navigate to the new page within this site. Agents must handle\n            // frameNavigated event to clear any saved state.\n            Inspector.Page.navigate(docUrl).then(function () {\n                _setStatus(STATUS_ACTIVE);\n            }, function () {\n                _close(false, \"closed_unknown_reason\");\n            });\n        } else if (wasRequested) {\n            // Update highlight\n            showHighlight();\n        }\n    }\n\n    /**\n     * Triggered by a documentSaved event from DocumentManager.\n     * @param {$.Event} event\n     * @param {Document} doc\n     */\n    function _onDocumentSaved(event, doc) {\n        if (!Inspector.connected() || !_server) {\n            return;\n        }\n\n        var absolutePath            = doc.file.fullPath,\n            liveDocument            = absolutePath && _server.get(absolutePath),\n            liveEditingEnabled      = liveDocument && liveDocument.isLiveEditingEnabled  && liveDocument.isLiveEditingEnabled();\n\n        // Skip reload if the saved document has live editing enabled\n        if (liveEditingEnabled) {\n            return;\n        }\n\n        var documentUrl     = _server.pathToUrl(absolutePath),\n            wasRequested    = agents.network && agents.network.wasURLRequested(documentUrl);\n\n        if (wasRequested) {\n            reload();\n        }\n    }\n\n    /** Triggered by a change in dirty flag from the DocumentManager */\n    function _onDirtyFlagChange(event, doc) {\n        if (doc && Inspector.connected() &&\n                _server && agents.network && agents.network.wasURLRequested(_server.pathToUrl(doc.file.fullPath))) {\n            // Set status to out of sync if dirty. Otherwise, set it to active status.\n            _setStatus(_docIsOutOfSync(doc) ? STATUS_OUT_OF_SYNC : STATUS_ACTIVE);\n        }\n    }\n\n    /** Initialize the LiveDevelopment Session */\n    function init(theConfig) {\n        exports.config = theConfig;\n\n        Inspector.on(\"error\", _onError);\n        Inspector.Inspector.on(\"detached\", _onDetached);\n\n        // Only listen for styleSheetAdded\n        // We may get interim added/removed events when pushing incremental updates\n        CSSAgent.on(\"styleSheetAdded.livedev\", _styleSheetAdded);\n\n        MainViewManager\n            .on(\"currentFileChange\", _onFileChanged);\n        DocumentManager\n            .on(\"documentSaved\", _onDocumentSaved)\n            .on(\"dirtyFlagChange\", _onDirtyFlagChange);\n        ProjectManager\n            .on(\"beforeProjectClose beforeAppClose\", close);\n\n        // Initialize exports.status\n        _setStatus(STATUS_INACTIVE);\n    }\n\n    function _getServer() {\n        return _server;\n    }\n\n    function getServerBaseUrl() {\n        return _server && _server.getBaseUrl();\n    }\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // For unit testing\n    exports.launcherUrl               = launcherUrl;\n    exports._getServer                = _getServer;\n    exports._getInitialDocFromCurrent = _getInitialDocFromCurrent;\n\n    // Export public functions\n    exports.agents              = agents;\n    exports.open                = open;\n    exports.close               = close;\n    exports.reconnect           = reconnect;\n    exports.reload              = reload;\n    exports.enableAgent         = enableAgent;\n    exports.disableAgent        = disableAgent;\n    exports.getLiveDocForPath   = getLiveDocForPath;\n    exports.showHighlight       = showHighlight;\n    exports.hideHighlight       = hideHighlight;\n    exports.redrawHighlight     = redrawHighlight;\n    exports.init                = init;\n    exports.getCurrentProjectServerConfig = getCurrentProjectServerConfig;\n    exports.getServerBaseUrl    = getServerBaseUrl;\n});\n"],"file":"LiveDevelopment.js"}