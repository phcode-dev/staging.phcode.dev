{"version":3,"sources":["LiveDevelopment/Servers/FileServer.js"],"names":["define","require","exports","module","BaseServer","LiveDevelopmentUtils","PREFIX","brackets","platform","FileServer","config","call","this","prototype","Object","create","constructor","canServe","localPath","_baseUrl","isStaticHtmlFileExt","urlToPath","url","indexOf","decodeURI","slice","length","pathToUrl","path","encodeURI"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,WAAuBH,QAAQ,sCAAsCG,WACrEC,qBAAuBJ,QAAQ,wCAK/BK,OAAgC,QAAtBC,SAASC,SAAsB,WAAa,UAc1D,SAASC,WAAWC,QAChBN,WAAWO,KAAKC,KAAMF,QAG1BD,WAAWI,UAAYC,OAAOC,OAAOX,WAAWS,WAChDJ,WAAWI,UAAUG,YAAcP,WAOnCA,WAAWI,UAAUI,SAAW,SAAUC,WAEtC,OAASN,KAAKO,UAAYd,qBAAqBe,oBAAoBF,YASvET,WAAWI,UAAUQ,UAAY,SAAUC,KACvC,OAA4B,IAAxBA,IAAIC,QAAQjB,QAELkB,UAAUF,IAAIG,MAAMnB,OAAOoB,SAG/B,MAQXjB,WAAWI,UAAUc,UAAY,SAAUC,MACvC,OAAOC,UAAUvB,OAASsB,OAG9B1B,QAAQO,WAAaA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var BaseServer           = require(\"LiveDevelopment/Servers/BaseServer\").BaseServer,\n        LiveDevelopmentUtils = require(\"LiveDevelopment/LiveDevelopmentUtils\");\n\n    // The path on Windows starts with a drive letter (e.g. \"C:\").\n    // In order to make it a valid file: URL we need to add an\n    // additional slash to the prefix.\n    var PREFIX = (brackets.platform === \"win\") ? \"file:///\" : \"file://\";\n\n    /**\n     * Server for file: URLs\n     *\n     * Configuration parameters for this server:\n     * - baseUrl      - Optional base URL (populated by the current project)\n     * - pathResolver - Function to covert absolute native paths to project relative paths\n     * - root         - Native path to the project root (and base URL)\n     *\n     * @constructor\n     * @param {!{baseUrl: string, root: string, pathResolver: function(string): string}} config\n     * @extends {BaseServer}\n     */\n    function FileServer(config) {\n        BaseServer.call(this, config);\n    }\n\n    FileServer.prototype = Object.create(BaseServer.prototype);\n    FileServer.prototype.constructor = FileServer;\n\n    /**\n     * Determines whether we can serve local file.\n     * @param {string} localPath A local path to file being served.\n     * @return {boolean} true for yes, otherwise false.\n     */\n    FileServer.prototype.canServe = function (localPath) {\n        // FileServer requires that the base URL is undefined and static HTML files\n        return (!this._baseUrl && LiveDevelopmentUtils.isStaticHtmlFileExt(localPath));\n    };\n\n    /**\n     * Convert a file: URL to a absolute file path\n     * @param {string} url\n     * @return {?string} The absolute path for given file: URL or null if the path is\n     *  not a descendant of the project.\n     */\n    FileServer.prototype.urlToPath = function (url) {\n        if (url.indexOf(PREFIX) === 0) {\n            // Convert a file URL to local file path\n            return decodeURI(url.slice(PREFIX.length));\n        }\n\n        return null;\n    };\n\n    /**\n     * Returns a file: URL for a given absolute path\n     * @param {string} path Absolute path to covert to a file: URL\n     * @return {string} Converts an absolute path within the project root to a file: URL.\n     */\n    FileServer.prototype.pathToUrl = function (path) {\n        return encodeURI(PREFIX + path);\n    };\n\n    exports.FileServer = FileServer;\n});\n"],"file":"FileServer.js"}