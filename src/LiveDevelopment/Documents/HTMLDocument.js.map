{"version":3,"sources":["LiveDevelopment/Documents/HTMLDocument.js"],"names":["define","HTMLDocumentModule","require","exports","module","EditorManager","EventDispatcher","HighlightAgent","HTMLInstrumentation","Inspector","LiveDevelopment","PerfUtils","RemoteAgent","_","HTMLDocument","doc","editor","this","addRef","_instrumentationEnabled","_onActiveEditorChange","bind","on","attachToEditor","makeEventDispatcher","prototype","setInstrumentationEnabled","enabled","scanDocument","_markText","isLiveEditingEnabled","getResponseData","body","generateInstrumentedHTML","_ensureMasterEditor","_masterEditor","getText","close","off","releaseRef","config","experimental","_onHighlight","self","event","_onCursorActivity","change","_onChange","_onDestroy","node","detachFromEditor","hide","_removeHighlight","updateHighlight","ids","highlight","each","getSelections","sel","tagID","_getTagIDAtDocumentPos","reversed","end","start","push","length","domElement","_compareWithBrowser","call","done","res","browserSimpleDOM","JSON","parse","result","value","edits","_getBrowserDiff","err","console","error","stack","diff","filter","delta","browser","nodeMap","parentID","tag","type","warn","stringify","forEach","log","perfTimerName","isNestedTimer","isActive","markStart","getUnappliedEditList","applyEditsPromise","always","addMeasurement","errors","trigger","_debug","newActive","oldActive","document","location","codeMirror","_codeMirror","to","from","posFromIndex","closeLocation","closeLength","_highlight","markText","className","clear"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * HTMLDocument manages a single HTML source document\n *\n * __EDITING__\n *\n * Editing the document will cause the corresponding node to be updated\n * by calling `applyChanges` on the DOMAgent. This will only work for\n * altering text nodes and will break when attempting to change DOM elements\n * or inserting or deleting nodes.\n *\n * __HIGHLIGHTING__\n *\n * HTMLDocument supports highlighting nodes from the HighlightAgent and\n * highlighting the DOMNode corresponding to the cursor position in the\n * editor.\n */\ndefine(function HTMLDocumentModule(require, exports, module) {\n\n\n    var EditorManager       = require(\"editor/EditorManager\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        HighlightAgent      = require(\"LiveDevelopment/Agents/HighlightAgent\"),\n        HTMLInstrumentation = require(\"language/HTMLInstrumentation\"),\n        Inspector           = require(\"LiveDevelopment/Inspector/Inspector\"),\n        LiveDevelopment     = require(\"LiveDevelopment/LiveDevelopment\"),\n        PerfUtils           = require(\"utils/PerfUtils\"),\n        RemoteAgent         = require(\"LiveDevelopment/Agents/RemoteAgent\"),\n        _                   = require(\"thirdparty/lodash\");\n\n    /**\n     * @constructor\n     * @param {!Document} doc The source document from Brackets\n     * @param {!Editor} editor The editor for this document\n     */\n    var HTMLDocument = function HTMLDocument(doc, editor) {\n        this.doc = doc;\n        if (this.doc) {\n            this.doc.addRef();\n        }\n\n        this.editor = editor;\n        this._instrumentationEnabled = false;\n\n        this._onActiveEditorChange = this._onActiveEditorChange.bind(this);\n        EditorManager.on(\"activeEditorChange\", this._onActiveEditorChange);\n\n        // Attach now\n        this.attachToEditor(editor);\n    };\n    EventDispatcher.makeEventDispatcher(HTMLDocument.prototype);\n\n    /**\n     * Enable or disable instrumented HTML\n     * @param {boolean} enabled Whether to enable or disable\n     */\n    HTMLDocument.prototype.setInstrumentationEnabled = function setInstrumentationEnabled(enabled) {\n        if (enabled && !this._instrumentationEnabled && this.editor) {\n            HTMLInstrumentation.scanDocument(this.doc);\n            HTMLInstrumentation._markText(this.editor);\n        }\n\n        this._instrumentationEnabled = enabled;\n    };\n\n    /**\n     * Returns true if document edits appear live in the connected browser\n     * @return {boolean}\n     */\n    HTMLDocument.prototype.isLiveEditingEnabled = function () {\n        return this._instrumentationEnabled;\n    };\n\n    /**\n     * Returns a JSON object with HTTP response overrides\n     * @param {boolean} enabled (Unused)\n     * @return {{body: string}}\n     */\n    HTMLDocument.prototype.getResponseData = function getResponseData(enabled) {\n        var body;\n        if (this._instrumentationEnabled) {\n            if (this.editor) {\n                body = HTMLInstrumentation.generateInstrumentedHTML(this.editor);\n            } else {\n                this.doc._ensureMasterEditor();\n                body = HTMLInstrumentation.generateInstrumentedHTML(this.doc._masterEditor);\n            }\n        }\n\n        return {\n            body: body || this.doc.getText()\n        };\n    };\n\n    /**\n     * Close the document\n     */\n    HTMLDocument.prototype.close = function close() {\n        if (this.editor) {\n            this.editor.off(\".HTMLDocument\");\n        }\n\n        if (this.doc) {\n            this.doc.releaseRef();\n        }\n\n        EditorManager.off(\"activeEditorChange\", this._onActiveEditorChange);\n\n        // Experimental code\n        if (LiveDevelopment.config.experimental) {\n            // Force highlight teardown\n            this._onHighlight();\n        }\n    };\n\n    /**\n     * Attach new editor\n     * @param {!Editor} editor The editor for this document\n     */\n    HTMLDocument.prototype.attachToEditor = function (editor) {\n        var self = this;\n        this.editor = editor;\n\n        // Performance optimization to use closures instead of Function.bind()\n        // to improve responsiveness during cursor movement and keyboard events\n        this.editor.on(\"cursorActivity.HTMLDocument\", function (event, editor) {\n            self._onCursorActivity(event, editor);\n        });\n\n        this.editor.on(\"change.HTMLDocument\", function (event, editor, change) {\n            self._onChange(event, editor, change);\n        });\n\n        this.editor.on(\"beforeDestroy.HTMLDocument\", function (event, editor) {\n            self._onDestroy(event, editor);\n        });\n\n        // Experimental code\n        if (LiveDevelopment.config.experimental) {\n            HighlightAgent.on(\"highlight.HTMLDocument\", function (event, node) {\n                self._onHighlight(event, node);\n            });\n        }\n\n        if (this._instrumentationEnabled) {\n            // Resync instrumentation with editor\n            HTMLInstrumentation._markText(this.editor);\n        }\n    };\n\n    /**\n     * Detach current editor\n     */\n    HTMLDocument.prototype.detachFromEditor = function () {\n        if (this.editor) {\n            HighlightAgent.hide();\n            this.editor.off(\".HTMLDocument\");\n            this._removeHighlight();\n            this.editor = null;\n        }\n    };\n\n    /**\n     * Update the highlight\n     */\n    HTMLDocument.prototype.updateHighlight = function () {\n        var editor = this.editor,\n            ids = [];\n\n        if (Inspector.config.highlight) {\n            if (editor) {\n                _.each(editor.getSelections(), function (sel) {\n                    var tagID = HTMLInstrumentation._getTagIDAtDocumentPos(\n                        editor,\n                        sel.reversed ? sel.end : sel.start\n                    );\n                    if (tagID !== -1) {\n                        ids.push(tagID);\n                    }\n                });\n            }\n\n            if (!ids.length) {\n                HighlightAgent.hide();\n            } else {\n                HighlightAgent.domElement(ids);\n            }\n        }\n    };\n\n    /** Event Handlers *******************************************************/\n\n    /**\n     * Triggered on cursor activity by the editor\n     * @param {$.Event} event Event\n     * @param {!Editor} editor The editor for this document\n     */\n    HTMLDocument.prototype._onCursorActivity = function (event, editor) {\n        if (this.editor !== editor) {\n            return;\n        }\n        this.updateHighlight();\n    };\n\n    /**\n     * @private\n     * For the given editor change, compare the resulting browser DOM with the\n     * in-editor DOM. If there are any diffs, a warning is logged to the\n     * console along with each diff.\n     * @param {Object} change CodeMirror editor change data\n     */\n    HTMLDocument.prototype._compareWithBrowser = function (change) {\n        var self = this;\n\n        RemoteAgent.call(\"getSimpleDOM\").done(function (res) {\n            var browserSimpleDOM = JSON.parse(res.result.value),\n                edits,\n                node,\n                result;\n\n            try {\n                result = HTMLInstrumentation._getBrowserDiff(self.editor, browserSimpleDOM);\n            } catch (err) {\n                console.error(\"Error comparing in-browser DOM to in-editor DOM\");\n                console.error(err.stack);\n                return;\n            }\n\n            edits = result.diff.filter(function (delta) {\n                // ignore textDelete in html root element\n                node = result.browser.nodeMap[delta.parentID];\n\n                if (node && node.tag === \"html\" && delta.type === \"textDelete\") {\n                    return false;\n                }\n\n                return true;\n            });\n\n            if (edits.length > 0) {\n                console.warn(\"Browser DOM does not match after change: \" + JSON.stringify(change));\n\n                edits.forEach(function (delta) {\n                    console.log(delta);\n                });\n            }\n        });\n    };\n\n    /**\n     * Triggered when the editor is being destroyed\n     * @param {$.Event} event Event\n     * @param {!Editor} editor The editor being destroyed\n     */\n    HTMLDocument.prototype._onDestroy = function (event, editor) {\n        if (this.editor === editor) {\n            this.detachFromEditor();\n        }\n    };\n\n\n    /**\n     * Triggered on change by the editor\n     * @param {$.Event} event Event\n     * @param {!Editor} editor The editor for this document\n     * @param {Object} change CodeMirror editor change data\n     */\n    HTMLDocument.prototype._onChange = function (event, editor, change) {\n        // Make sure LiveHTML is turned on\n        if (!this._instrumentationEnabled) {\n            return;\n        }\n\n        // Apply DOM edits is async, so previous PerfUtils timer may still be\n        // running. PerfUtils does not support running multiple timers with same\n        // name, so do not start another timer in this case.\n        var perfTimerName   = \"HTMLDocument applyDOMEdits\",\n            isNestedTimer   = PerfUtils.isActive(perfTimerName);\n        if (!isNestedTimer) {\n            PerfUtils.markStart(perfTimerName);\n        }\n\n        // Only handles attribute changes currently.\n        // TODO: text changes should be easy to add\n        // TODO: if new tags are added, need to instrument them\n        var self                = this,\n            result              = HTMLInstrumentation.getUnappliedEditList(editor, change),\n            applyEditsPromise;\n\n        if (result.edits) {\n            applyEditsPromise = RemoteAgent.call(\"applyDOMEdits\", result.edits);\n\n            applyEditsPromise.always(function () {\n                if (!isNestedTimer) {\n                    PerfUtils.addMeasurement(perfTimerName);\n                }\n            });\n        }\n\n        this.errors = result.errors || [];\n        this.trigger(\"statusChanged\", this);\n\n        // Debug-only: compare in-memory vs. in-browser DOM\n        // edit this file or set a conditional breakpoint at the top of this function:\n        //     \"this._debug = true, false\"\n        if (this._debug) {\n            console.log(\"Edits applied to browser were:\");\n            console.log(JSON.stringify(result.edits, null, 2));\n            applyEditsPromise.done(function () {\n                self._compareWithBrowser(change);\n            });\n        }\n\n//        var marker = HTMLInstrumentation._getMarkerAtDocumentPos(\n//            this.editor,\n//            editor.getCursorPos()\n//        );\n//\n//        if (marker && marker.tagID) {\n//            var range   = marker.find(),\n//                text    = marker.doc.getRange(range.from, range.to);\n//\n//            // HACK maintain ID\n//            text = text.replace(\">\", \" data-brackets-id='\" + marker.tagID + \"'>\");\n//\n//            // FIXME incorrectly replaces body elements with content only, missing body element\n//            RemoteAgent.remoteElement(marker.tagID).replaceWith(text);\n//        }\n\n        // if (!this.editor) {\n        //     return;\n        // }\n        // var codeMirror = this.editor._codeMirror;\n        // while (change) {\n        //     var from = codeMirror.indexFromPos(change.from);\n        //     var to = codeMirror.indexFromPos(change.to);\n        //     var text = change.text.join(\"\\n\");\n        //     DOMAgent.applyChange(from, to, text);\n        //     change = change.next;\n        // }\n    };\n\n    /**\n     * Triggered when the active editor changes\n     * @param {$.Event} event Event\n     * @param {!Editor} newActive The new active editor\n     * @param {!Editor} oldActive The old active editor\n     */\n    HTMLDocument.prototype._onActiveEditorChange = function (event, newActive, oldActive) {\n        this.detachFromEditor();\n\n        if (newActive && newActive.document === this.doc) {\n            this.attachToEditor(newActive);\n        }\n    };\n\n    /**\n     * Triggered by the HighlightAgent to highlight a node in the editor\n     * @param {$.Event} event Event\n     * @param {DOMElement} node Element to highlight\n     */\n    HTMLDocument.prototype._onHighlight = function (event, node) {\n        this._removeHighlight();\n        if (!node || !node.location || !this.editor) {\n            return;\n        }\n\n        var codeMirror = this.editor._codeMirror;\n        var to, from = codeMirror.posFromIndex(node.location);\n        if (node.closeLocation) {\n            to = node.closeLocation + node.closeLength;\n        } else {\n            to = node.location + node.length;\n        }\n\n        to = codeMirror.posFromIndex(to);\n        this._highlight = codeMirror.markText(from, to, { className: \"highlight\" });\n    };\n\n    /**\n     * Remove all highlighting\n     */\n    HTMLDocument.prototype._removeHighlight = function () {\n        if (this._highlight) {\n            this._highlight.clear();\n            this._highlight = null;\n        }\n    };\n\n    // Export the class\n    module.exports = HTMLDocument;\n});\n"],"file":"HTMLDocument.js"}