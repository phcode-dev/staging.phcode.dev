define(function HTMLDocumentModule(require,exports,module){var EditorManager=require("editor/EditorManager"),EventDispatcher=require("utils/EventDispatcher"),HighlightAgent=require("LiveDevelopment/Agents/HighlightAgent"),HTMLInstrumentation=require("language/HTMLInstrumentation"),Inspector=require("LiveDevelopment/Inspector/Inspector"),LiveDevelopment=require("LiveDevelopment/LiveDevelopment"),PerfUtils=require("utils/PerfUtils"),RemoteAgent=require("LiveDevelopment/Agents/RemoteAgent"),_=require("thirdparty/lodash"),HTMLDocument=function HTMLDocument(doc,editor){this.doc=doc,this.doc&&this.doc.addRef(),this.editor=editor,this._instrumentationEnabled=!1,this._onActiveEditorChange=this._onActiveEditorChange.bind(this),EditorManager.on("activeEditorChange",this._onActiveEditorChange),this.attachToEditor(editor)};EventDispatcher.makeEventDispatcher(HTMLDocument.prototype),HTMLDocument.prototype.setInstrumentationEnabled=function setInstrumentationEnabled(enabled){enabled&&!this._instrumentationEnabled&&this.editor&&(HTMLInstrumentation.scanDocument(this.doc),HTMLInstrumentation._markText(this.editor)),this._instrumentationEnabled=enabled},HTMLDocument.prototype.isLiveEditingEnabled=function(){return this._instrumentationEnabled},HTMLDocument.prototype.getResponseData=function getResponseData(enabled){var body;return this._instrumentationEnabled&&(this.editor?body=HTMLInstrumentation.generateInstrumentedHTML(this.editor):(this.doc._ensureMasterEditor(),body=HTMLInstrumentation.generateInstrumentedHTML(this.doc._masterEditor))),{body:body||this.doc.getText()}},HTMLDocument.prototype.close=function close(){this.editor&&this.editor.off(".HTMLDocument"),this.doc&&this.doc.releaseRef(),EditorManager.off("activeEditorChange",this._onActiveEditorChange),LiveDevelopment.config.experimental&&this._onHighlight()},HTMLDocument.prototype.attachToEditor=function(editor){var self=this;this.editor=editor,this.editor.on("cursorActivity.HTMLDocument",function(event,editor){self._onCursorActivity(event,editor)}),this.editor.on("change.HTMLDocument",function(event,editor,change){self._onChange(event,editor,change)}),this.editor.on("beforeDestroy.HTMLDocument",function(event,editor){self._onDestroy(event,editor)}),LiveDevelopment.config.experimental&&HighlightAgent.on("highlight.HTMLDocument",function(event,node){self._onHighlight(event,node)}),this._instrumentationEnabled&&HTMLInstrumentation._markText(this.editor)},HTMLDocument.prototype.detachFromEditor=function(){this.editor&&(HighlightAgent.hide(),this.editor.off(".HTMLDocument"),this._removeHighlight(),this.editor=null)},HTMLDocument.prototype.updateHighlight=function(){var editor=this.editor,ids=[];Inspector.config.highlight&&(editor&&_.each(editor.getSelections(),function(sel){var tagID=HTMLInstrumentation._getTagIDAtDocumentPos(editor,sel.reversed?sel.end:sel.start);-1!==tagID&&ids.push(tagID)}),ids.length?HighlightAgent.domElement(ids):HighlightAgent.hide())},HTMLDocument.prototype._onCursorActivity=function(event,editor){this.editor===editor&&this.updateHighlight()},HTMLDocument.prototype._compareWithBrowser=function(change){var self=this;RemoteAgent.call("getSimpleDOM").done(function(res){var browserSimpleDOM=JSON.parse(res.result.value),edits,node,result;try{result=HTMLInstrumentation._getBrowserDiff(self.editor,browserSimpleDOM)}catch(err){return console.error("Error comparing in-browser DOM to in-editor DOM"),void console.error(err.stack)}(edits=result.diff.filter(function(delta){return!(node=result.browser.nodeMap[delta.parentID])||"html"!==node.tag||"textDelete"!==delta.type})).length>0&&(console.warn("Browser DOM does not match after change: "+JSON.stringify(change)),edits.forEach(function(delta){console.log(delta)}))})},HTMLDocument.prototype._onDestroy=function(event,editor){this.editor===editor&&this.detachFromEditor()},HTMLDocument.prototype._onChange=function(event,editor,change){if(this._instrumentationEnabled){var perfTimerName="HTMLDocument applyDOMEdits",isNestedTimer=PerfUtils.isActive(perfTimerName);isNestedTimer||PerfUtils.markStart(perfTimerName);var self=this,result=HTMLInstrumentation.getUnappliedEditList(editor,change),applyEditsPromise;result.edits&&(applyEditsPromise=RemoteAgent.call("applyDOMEdits",result.edits)).always(function(){isNestedTimer||PerfUtils.addMeasurement(perfTimerName)}),this.errors=result.errors||[],this.trigger("statusChanged",this),this._debug&&(console.log("Edits applied to browser were:"),console.log(JSON.stringify(result.edits,null,2)),applyEditsPromise.done(function(){self._compareWithBrowser(change)}))}},HTMLDocument.prototype._onActiveEditorChange=function(event,newActive,oldActive){this.detachFromEditor(),newActive&&newActive.document===this.doc&&this.attachToEditor(newActive)},HTMLDocument.prototype._onHighlight=function(event,node){if(this._removeHighlight(),node&&node.location&&this.editor){var codeMirror=this.editor._codeMirror,to,from=codeMirror.posFromIndex(node.location);to=node.closeLocation?node.closeLocation+node.closeLength:node.location+node.length,to=codeMirror.posFromIndex(to),this._highlight=codeMirror.markText(from,to,{className:"highlight"})}},HTMLDocument.prototype._removeHighlight=function(){this._highlight&&(this._highlight.clear(),this._highlight=null)},module.exports=HTMLDocument});
//# sourceMappingURL=HTMLDocument.js.map
