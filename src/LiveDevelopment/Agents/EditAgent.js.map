{"version":3,"sources":["LiveDevelopment/Agents/EditAgent.js"],"names":["define","EditAgent","require","exports","module","Inspector","DOMAgent","RemoteAgent","GotoAgent","EditorManager","_editedNode","_findChangedCharacters","oldValue","value","length","index","i","substr","from","to","text","_onCharacterDataModified","event","res","nodeId","open","url","editor","getCurrentFullEditor","codeMirror","_codeMirror","change","characterData","posFromIndex","location","isEditing","document","replaceRange","newPos","setCursorPos","line","ch","_onRemoteEdit","node","nodeWithId","children","DOM","on","off","load","unload"],"mappings":"AAyBAA,OAAO,SAASC,UAAUC,QAASC,QAASC,QAGxC,IAAIC,UAAYH,QAAQ,uCACpBI,SAAWJ,QAAQ,mCACnBK,YAAcL,QAAQ,sCACtBM,UAAYN,QAAQ,oCAEpBO,cAAgBP,QAAQ,wBAExBQ,YAOJ,SAASC,uBAAuBC,SAAUC,OACtC,GAAID,WAAaC,MAAjB,CAGA,IAAIC,OAASF,SAASE,OAClBC,MAAQ,EAGRC,EACJ,IAAKA,EAAI,EAAGA,EAAIF,QACRD,MAAMG,KAAOJ,SAASI,GADNA,KAUxB,IALAD,OAASC,EACTH,MAAQA,MAAMI,OAAOD,GACrBF,QAAUE,EAGLA,EAAI,EAAGA,EAAIF,QACRD,MAAMA,MAAMC,OAAS,EAAIE,KAAOJ,SAASA,SAASE,OAAS,EAAIE,GAD/CA,KAQxB,MAAO,CAAEE,KAAMH,MAAOI,GAAIJ,OAH1BD,QAAUE,GAGgCI,KAF1CP,MAAQA,MAAMI,OAAO,EAAGJ,MAAMC,OAASE,KAM3C,SAASK,yBAAyBC,MAAOC,KAErC,GAAIb,YAAYc,SAAWD,IAAIC,OAA/B,CAIAhB,UAAUiB,KAAKnB,SAASoB,KACxB,IAAIC,OAASlB,cAAcmB,uBACvBC,WAAaF,OAAOG,YACpBC,OAASpB,uBAAuBD,YAAYG,MAAOU,IAAIS,eAC3D,GAAID,OAAQ,CACR,IAAIb,KAAOW,WAAWI,aAAavB,YAAYwB,SAAWH,OAAOb,MAC7DC,GAAKU,WAAWI,aAAavB,YAAYwB,SAAWH,OAAOZ,IAC/DhB,QAAQgC,WAAY,EACpBR,OAAOS,SAASC,aAAaN,OAAOX,KAAMF,KAAMC,IAChDhB,QAAQgC,WAAY,EAEpB,IAAIG,OAAST,WAAWI,aAAavB,YAAYwB,SAAWH,OAAOb,KAAOa,OAAOX,KAAKN,QACtFa,OAAOY,aAAaD,OAAOE,KAAMF,OAAOG,MAKhD,SAASC,cAAcpB,MAAOC,KAI1B,GAAkB,MAAdA,IAAIV,MAAR,CAMA,IAAI8B,KAAOrC,SAASsC,WAAWrB,IAAIC,SACnCmB,KAAOA,KAAKE,SAAS,IACXX,WAGVxB,YAAciC,KAGdtC,UAAUyC,IAAIC,GAAG,kCAAmC1B,gCAbhDhB,UAAUyC,IAAIE,IAAI,cAiB1B,SAASC,OACL1C,YAAYwC,GAAG,iBAAkBL,eAIrC,SAASQ,SACL3C,YAAYyC,IAAI,cAIpB7C,QAAQ8C,KAAOA,KACf9C,QAAQ+C,OAASA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * EditAgent propagates changes from the in-document editor to the source\n * document.\n */\ndefine(function EditAgent(require, exports, module) {\n\n\n    var Inspector = require(\"LiveDevelopment/Inspector/Inspector\");\n    var DOMAgent = require(\"LiveDevelopment/Agents/DOMAgent\");\n    var RemoteAgent = require(\"LiveDevelopment/Agents/RemoteAgent\");\n    var GotoAgent = require(\"LiveDevelopment/Agents/GotoAgent\");\n\n    var EditorManager = require(\"editor/EditorManager\");\n\n    var _editedNode;\n\n    /** Find changed characters\n     * @param {string} old value\n     * @param {string} changed value\n     * @return {from, to, text}\n     */\n    function _findChangedCharacters(oldValue, value) {\n        if (oldValue === value) {\n            return undefined;\n        }\n        var length = oldValue.length;\n        var index = 0;\n\n        // find the first character that changed\n        var i;\n        for (i = 0; i < length; i++) {\n            if (value[i] !== oldValue[i]) {\n                break;\n            }\n        }\n        index += i;\n        value = value.substr(i);\n        length -= i;\n\n        // find the last character that changed\n        for (i = 0; i < length; i++) {\n            if (value[value.length - 1 - i] !== oldValue[oldValue.length - 1 - i]) {\n                break;\n            }\n        }\n        length -= i;\n        value = value.substr(0, value.length - i);\n\n        return { from: index, to: index + length, text: value };\n    }\n\n    // WebInspector Event: DOM.characterDataModified\n    function _onCharacterDataModified(event, res) {\n        // res = {nodeId, characterData}\n        if (_editedNode.nodeId !== res.nodeId) {\n            return;\n        }\n\n        GotoAgent.open(DOMAgent.url);\n        var editor = EditorManager.getCurrentFullEditor();\n        var codeMirror = editor._codeMirror;\n        var change = _findChangedCharacters(_editedNode.value, res.characterData);\n        if (change) {\n            var from = codeMirror.posFromIndex(_editedNode.location + change.from);\n            var to = codeMirror.posFromIndex(_editedNode.location + change.to);\n            exports.isEditing = true;\n            editor.document.replaceRange(change.text, from, to);\n            exports.isEditing = false;\n\n            var newPos = codeMirror.posFromIndex(_editedNode.location + change.from + change.text.length);\n            editor.setCursorPos(newPos.line, newPos.ch);\n        }\n    }\n\n    // Remote Event: Go to the given source node\n    function _onRemoteEdit(event, res) {\n        // res = {nodeId, name, value}\n\n        // detach from DOM change events\n        if (res.value === \"0\") {\n            Inspector.DOM.off(\".EditAgent\");\n            return;\n        }\n\n        // find and store the edited node\n        var node = DOMAgent.nodeWithId(res.nodeId);\n        node = node.children[0];\n        if (!node.location) {\n            return;\n        }\n        _editedNode = node;\n\n        // attach to character data modified events\n        Inspector.DOM.on(\"characterDataModified.EditAgent\", _onCharacterDataModified);\n    }\n\n    /** Initialize the agent */\n    function load() {\n        RemoteAgent.on(\"edit.EditAgent\", _onRemoteEdit);\n    }\n\n    /** Initialize the agent */\n    function unload() {\n        RemoteAgent.off(\".EditAgent\");\n    }\n\n    // Export public functions\n    exports.load = load;\n    exports.unload = unload;\n});\n"],"file":"EditAgent.js"}