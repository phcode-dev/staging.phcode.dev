{"version":3,"sources":["LiveDevelopment/Agents/ScriptAgent.js"],"names":["define","ScriptAgent","require","exports","module","Inspector","DOMAgent","_load","_urlToScript","_idToScript","_insertTrace","scriptWithId","url","scriptForURL","_onGetDocument","event","res","DOMDebugger","setDOMBreakpoint","root","nodeId","resolve","_onChildNodeInserted","node","nodeWithId","trace","undefined","_onScriptParsed","scriptId","_onScriptFailedToParse","_onPaused","reason","Debugger","resume","data","type","insertion","callFrames","_reset","_onFrameNavigated","frame","parentId","load","$","Deferred","enableResult","enable","done","setPauseOnExceptions","Page","on","DOM","when","promise","unload","off"],"mappings":"AAyBAA,OAAO,SAASC,YAAYC,QAASC,QAASC,QAG1C,IAAIC,UAAYH,QAAQ,uCACpBI,SAAWJ,QAAQ,mCAEnBK,MACAC,aACAC,YACAC,aAMJ,SAASC,aAAaC,KAClB,OAAOH,YAAYG,KAOvB,SAASC,aAAaD,KAClB,OAAOJ,aAAaI,KAIxB,SAASE,eAAeC,MAAOC,KAC3BX,UAAUY,YAAYC,iBAAiBF,IAAIG,KAAKC,OAAQ,oBACxDb,MAAMc,UAIV,SAASC,qBAAqBP,MAAOC,KAG7B,IAAIO,KADJb,eACWJ,SAASkB,WAAWR,IAAIO,KAAKH,QACnCK,MAAQf,aACbA,kBAAegB,GAMvB,SAASC,gBAAgBZ,MAAOC,KAE5BP,YAAYO,IAAIY,UAAYZ,IAC5BR,aAAaQ,IAAIJ,KAAOI,IAI5B,SAASa,uBAAuBd,MAAOC,MAKvC,SAASc,UAAUf,MAAOC,KAEtB,OAAQA,IAAIe,QAGZ,IAAK,YACD1B,UAAU2B,SAASC,SAGnB,MAGJ,IAAK,MACD5B,UAAU2B,SAASC,SACG,qBAAlBjB,IAAIkB,KAAKC,OAAsD,IAAvBnB,IAAIkB,KAAKE,YACjD1B,aAAeM,IAAIqB,aAO/B,SAASC,SACL9B,aAAe,GACfC,YAAc,GASlB,SAAS8B,kBAAkBxB,MAAOC,KAEzBA,IAAIwB,MAAMC,UACXH,SAKR,SAASI,OACLJ,SACA/B,MAAQ,IAAIoC,EAAEC,SAEd,IAAIC,aAAe,IAAIF,EAAEC,SAgBzB,OAdAvC,UAAU2B,SAASc,SAASC,KAAK,WAC7B1C,UAAU2B,SAASgB,qBAAqB,YAAYD,KAAK,WACrDF,aAAaxB,cAIrBhB,UAAU4C,KAAKC,GAAG,6BAA8BX,mBAChDjC,SAAS4C,GAAG,0BAA2BpC,gBACvCT,UAAU2B,SACLkB,GAAG,2BAA4BvB,iBAC/BuB,GAAG,kCAAmCrB,wBACtCqB,GAAG,qBAAsBpB,WAC9BzB,UAAU8C,IAAID,GAAG,gCAAiC5B,sBAE3CqB,EAAES,KAAK7C,MAAM8C,UAAWR,aAAaQ,WAIhD,SAASC,SACLhB,SACAjC,UAAU4C,KAAKM,IAAI,gBACnBjD,SAASiD,IAAI,gBACblD,UAAU2B,SAASuB,IAAI,gBACvBlD,UAAU8C,IAAII,IAAI,gBAItBpD,QAAQQ,aAAeA,aACvBR,QAAQU,aAAeA,aACvBV,QAAQuC,KAAOA,KACfvC,QAAQmD,OAASA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * ScriptAgent tracks all executed scripts, defines internal breakpoints, and\n * interfaces with the remote debugger.\n */\ndefine(function ScriptAgent(require, exports, module) {\n\n\n    var Inspector = require(\"LiveDevelopment/Inspector/Inspector\");\n    var DOMAgent = require(\"LiveDevelopment/Agents/DOMAgent\");\n\n    var _load; // the load promise\n    var _urlToScript; // url -> script info\n    var _idToScript; // id -> script info\n    var _insertTrace; // the last recorded trace of a DOM insertion\n\n    // TODO: should the parameter to this be an ID rather than a URL?\n    /** Get the script information for a given url\n     * @param {string} url\n     */\n    function scriptWithId(url) {\n        return _idToScript[url];\n    }\n\n    // TODO: Strip off query/hash strings from URL (see CSSAgent._canonicalize())\n    /** Get the script information for a given url\n     * @param {string} url\n     */\n    function scriptForURL(url) {\n        return _urlToScript[url];\n    }\n\n    // DOMAgent Event: Document root loaded\n    function _onGetDocument(event, res) {\n        Inspector.DOMDebugger.setDOMBreakpoint(res.root.nodeId, \"subtree-modified\");\n        _load.resolve();\n    }\n\n    // WebInspector Event: DOM.childNodeInserted\n    function _onChildNodeInserted(event, res) {\n        // res = {parentNodeId, previousNodeId, node}\n        if (_insertTrace) {\n            var node = DOMAgent.nodeWithId(res.node.nodeId);\n            node.trace = _insertTrace;\n            _insertTrace = undefined;\n        }\n    }\n\n    // TODO: Strip off query/hash strings from URL (see CSSAgent._canonicalize())\n    // WebInspector Event: Debugger.scriptParsed\n    function _onScriptParsed(event, res) {\n        // res = {scriptId, url, startLine, startColumn, endLine, endColumn, isContentScript, sourceMapURL}\n        _idToScript[res.scriptId] = res;\n        _urlToScript[res.url] = res;\n    }\n\n    // WebInspector Event: Debugger.scriptFailedToParse\n    function _onScriptFailedToParse(event, res) {\n        // res = {url, scriptSource, startLine, errorLine, errorMessage}\n    }\n\n    // WebInspector Event: Debugger.paused\n    function _onPaused(event, res) {\n        // res = {callFrames, reason, data}\n        switch (res.reason) {\n\n        // Exception\n        case \"exception\":\n            Inspector.Debugger.resume();\n            // var callFrame = res.callFrames[0];\n            // var script = scriptWithId(callFrame.location.scriptId);\n            break;\n\n        // DOMBreakpoint\n        case \"DOM\":\n            Inspector.Debugger.resume();\n            if (res.data.type === \"subtree-modified\" && res.data.insertion === true) {\n                _insertTrace = res.callFrames;\n            }\n            break;\n        }\n\n    }\n\n    function _reset() {\n        _urlToScript = {};\n        _idToScript = {};\n    }\n\n    /**\n     * @private\n     * WebInspector Event: Page.frameNavigated\n     * @param {jQuery.Event} event\n     * @param {frame: Frame} res\n     */\n    function _onFrameNavigated(event, res) {\n        // Clear maps when navigating to a new page, but not if an iframe was loaded\n        if (!res.frame.parentId) {\n            _reset();\n        }\n    }\n\n    /** Initialize the agent */\n    function load() {\n        _reset();\n        _load = new $.Deferred();\n\n        var enableResult = new $.Deferred();\n\n        Inspector.Debugger.enable().done(function () {\n            Inspector.Debugger.setPauseOnExceptions(\"uncaught\").done(function () {\n                enableResult.resolve();\n            });\n        });\n\n        Inspector.Page.on(\"frameNavigated.ScriptAgent\", _onFrameNavigated);\n        DOMAgent.on(\"getDocument.ScriptAgent\", _onGetDocument);\n        Inspector.Debugger\n            .on(\"scriptParsed.ScriptAgent\", _onScriptParsed)\n            .on(\"scriptFailedToParse.ScriptAgent\", _onScriptFailedToParse)\n            .on(\"paused.ScriptAgent\", _onPaused);\n        Inspector.DOM.on(\"childNodeInserted.ScriptAgent\", _onChildNodeInserted);\n\n        return $.when(_load.promise(), enableResult.promise());\n    }\n\n    /** Clean up */\n    function unload() {\n        _reset();\n        Inspector.Page.off(\".ScriptAgent\");\n        DOMAgent.off(\".ScriptAgent\");\n        Inspector.Debugger.off(\".ScriptAgent\");\n        Inspector.DOM.off(\".ScriptAgent\");\n    }\n\n    // Export public functions\n    exports.scriptWithId = scriptWithId;\n    exports.scriptForURL = scriptForURL;\n    exports.load = load;\n    exports.unload = unload;\n});\n"],"file":"ScriptAgent.js"}