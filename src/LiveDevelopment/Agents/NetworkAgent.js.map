{"version":3,"sources":["LiveDevelopment/Agents/NetworkAgent.js"],"names":["define","NetworkAgent","require","exports","module","Inspector","_urlRequested","_urlWithoutQueryString","url","index","search","substr","wasURLRequested","_logURL","_onRequestWillBeSent","event","res","request","_reset","_onFrameNavigated","frame","parentId","enable","Network","load","Page","on","unload","off"],"mappings":"AAyBAA,OAAO,SAASC,aAAaC,QAASC,QAASC,QAG3C,IAAIC,UAAYH,QAAQ,uCAEpBI,cAAgB,GAKpB,SAASC,uBAAuBC,KAC5B,IAAIC,MAAQD,IAAIE,OAAO,SAIvB,OAHID,OAAS,IACTD,IAAMA,IAAIG,OAAO,EAAGF,QAEjBD,IAMX,SAASI,gBAAgBJ,KACrB,OAAOF,eAAiBA,cAAcE,KAG1C,SAASK,QAAQL,KACbF,cAAcC,uBAAuBC,OAAQ,EAIjD,SAASM,qBAAqBC,MAAOC,KAEjCH,QAAQG,IAAIC,QAAQT,KAGxB,SAASU,SACLZ,cAAgB,GAIpB,SAASa,kBAAkBJ,MAAOC,KAGzBA,IAAII,MAAMC,UACXH,SAEJL,QAAQG,IAAII,MAAMZ,KAOtB,SAASc,SACL,OAAOjB,UAAUkB,QAAQD,SAI7B,SAASE,OACLnB,UAAUoB,KAAKC,GAAG,8BAA+BP,mBACjDd,UAAUkB,QAAQG,GAAG,iCAAkCZ,sBAI3D,SAASa,SACLT,SACAb,UAAUoB,KAAKG,IAAI,iBACnBvB,UAAUkB,QAAQK,IAAI,iBAI1BzB,QAAQS,gBAAkBA,gBAC1BT,QAAQmB,OAASA,OACjBnB,QAAQqB,KAAOA,KACfrB,QAAQwB,OAASA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * NetworkAgent tracks all resources loaded by the remote debugger. Use\n * `wasURLRequested(url)` to query whether a resource was loaded.\n */\ndefine(function NetworkAgent(require, exports, module) {\n\n\n    var Inspector = require(\"LiveDevelopment/Inspector/Inspector\");\n\n    var _urlRequested = {}; // url -> request info\n\n    /** Return the URL without the query string\n     * @param {string} URL\n     */\n    function _urlWithoutQueryString(url) {\n        var index = url.search(/[#\\?]/);\n        if (index >= 0) {\n            url = url.substr(0, index);\n        }\n        return url;\n    }\n\n    /** Return the resource information for a given URL\n     * @param {string} url\n     */\n    function wasURLRequested(url) {\n        return _urlRequested && _urlRequested[url];\n    }\n\n    function _logURL(url) {\n        _urlRequested[_urlWithoutQueryString(url)] = true;\n    }\n\n    // WebInspector Event: Network.requestWillBeSent\n    function _onRequestWillBeSent(event, res) {\n        // res = {requestId, frameId, loaderId, documentURL, request, timestamp, initiator, stackTrace, redirectResponse}\n        _logURL(res.request.url);\n    }\n\n    function _reset() {\n        _urlRequested = {};\n    }\n\n    // WebInspector Event: Page.frameNavigated\n    function _onFrameNavigated(event, res) {\n        // res = {frame}\n        // Clear log when navigating to a new page, but not if an iframe was loaded\n        if (!res.frame.parentId) {\n            _reset();\n        }\n        _logURL(res.frame.url);\n    }\n\n    /**\n     * Enable the inspector Network domain\n     * @return {jQuery.Promise} A promise resolved when the Network.enable() command is successful.\n     */\n    function enable() {\n        return Inspector.Network.enable();\n    }\n\n    /** Initialize the agent */\n    function load() {\n        Inspector.Page.on(\"frameNavigated.NetworkAgent\", _onFrameNavigated);\n        Inspector.Network.on(\"requestWillBeSent.NetworkAgent\", _onRequestWillBeSent);\n    }\n\n    /** Unload the agent */\n    function unload() {\n        _reset();\n        Inspector.Page.off(\".NetworkAgent\");\n        Inspector.Network.off(\".NetworkAgent\");\n    }\n\n    // Export public functions\n    exports.wasURLRequested = wasURLRequested;\n    exports.enable = enable;\n    exports.load = load;\n    exports.unload = unload;\n});\n"],"file":"NetworkAgent.js"}