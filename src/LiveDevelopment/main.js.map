{"version":3,"sources":["LiveDevelopment/main.js"],"names":["define","main","require","exports","module","DocumentManager","Commands","AppInit","LiveDevelopment","MultiBrowserLiveDev","Inspector","CommandManager","PreferencesManager","Dialogs","DefaultDialogs","UrlParams","Strings","ExtensionUtils","StringUtils","params","config","experimental","debug","autoconnect","highlight","highlightConfig","borderColor","r","g","b","a","contentColor","marginColor","paddingColor","showInfo","_status","_allStatusStyles","join","_$btnGoLive","LiveDevImpl","PREF_MULTIBROWSER","prefs","getExtensionPrefs","multiBrowserPref","definePreference","description","DESCRIPTION_LIVE_DEV_MULTIBROWSER","PREF_REMOTEHIGHLIGHT","remoteHighlightPref","animateStartValue","background-color","opacity","animateEndValue","paddingStyling","border-width","border-style","border-color","marginStyling","showPaddingMargin","DESCRIPTION_LIVE_DEV_HIGHLIGHT_SETTINGS","_togglePref","key","value","val","oldPref","get","undefined","set","_toggleLivePreviewMultiBrowser","TOGGLE_LIVE_PREVIEW_MB_MODE","setChecked","FILE_PROJECT_SETTINGS","setEnabled","_loadStyles","lessText","less","render","onParse","err","tree","console","assert","addEmbeddedStyleSheet","css","_setLabel","$btn","text","style","tooltip","$","remove","removeClass","length","addClass","appendTo","attr","_handleGoLiveCommand","window","alert","status","STATUS_ACTIVE","close","STATUS_INACTIVE","getViewState","open","setViewState","showModalDialog","DIALOG_ID_INFO","LIVE_DEVELOPMENT_INFO_TITLE","LIVE_DEVELOPMENT_INFO_MESSAGE","done","id","_showStatusChangeReason","reason","twipsy","removeData","translatedReason","toUpperCase","format","LIVE_DEV_CLOSED_UNKNOWN_REASON","options","placement","trigger","autoHideDelay","title","_setupGoLiveButton","on","statusChange","event","sessionStorage","setItem","_setupGoLiveMenu","FILE_LIVE_FILE_PREVIEW","FILE_LIVE_HIGHLIGHT","_updateHighlightCheckmark","_handlePreviewHighlightCommand","showHighlight","hideHighlight","_setImplementation","multibrowser","LIVE_DEV_STATUS_TIP_NOT_CONNECTED","LIVE_DEV_STATUS_TIP_PROGRESS1","LIVE_DEV_STATUS_TIP_CONNECTED","LIVE_DEV_STATUS_TIP_OUT_OF_SYNC","LIVE_DEV_STATUS_TIP_SYNC_ERROR","LIVE_DEV_STATUS_TIP_PROGRESS2","_setupDebugHelpers","ld","i","report","info","_handleReloadLivePreviewCommand","reload","appReady","parse","remoteHighlight","init","getItem","getCurrentDocument","focus","connected","redrawHighlight","off","agents","remote","call","JSON","stringify","stateManager","register","CMD_LIVE_HIGHLIGHT","CMD_RELOAD_LIVE_PREVIEW","CMD_TOGGLE_LIVE_PREVIEW_MB_MODE"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global less */\n\n/**\n * main integrates LiveDevelopment into Brackets\n *\n * This module creates two menu items:\n *\n *  \"Go Live\": open or close a Live Development session and visualize the status\n *  \"Highlight\": toggle source highlighting\n */\ndefine(function main(require, exports, module) {\n\n\n    var DocumentManager     = require(\"document/DocumentManager\"),\n        Commands            = require(\"command/Commands\"),\n        AppInit             = require(\"utils/AppInit\"),\n        LiveDevelopment     = require(\"LiveDevelopment/LiveDevelopment\"),\n        MultiBrowserLiveDev = require(\"LiveDevelopment/LiveDevMultiBrowser\"),\n        Inspector           = require(\"LiveDevelopment/Inspector/Inspector\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        Dialogs             = require(\"widgets/Dialogs\"),\n        DefaultDialogs      = require(\"widgets/DefaultDialogs\"),\n        UrlParams           = require(\"utils/UrlParams\").UrlParams,\n        Strings             = require(\"strings\"),\n        ExtensionUtils      = require(\"utils/ExtensionUtils\"),\n        StringUtils         = require(\"utils/StringUtils\");\n\n    var params = new UrlParams();\n    var config = {\n        experimental: false, // enable experimental features\n        debug: true, // enable debug output and helpers\n        autoconnect: false, // go live automatically after startup?\n        highlight: true, // enable highlighting?\n        highlightConfig: { // the highlight configuration for the Inspector\n            borderColor: {r: 255, g: 229, b: 153, a: 0.66},\n            contentColor: {r: 111, g: 168, b: 220, a: 0.55},\n            marginColor: {r: 246, g: 178, b: 107, a: 0.66},\n            paddingColor: {r: 147, g: 196, b: 125, a: 0.66},\n            showInfo: true\n        }\n    };\n    // Status labels/styles are ordered: error, not connected, progress1, progress2, connected.\n    var _status,\n        _allStatusStyles = [\"warning\", \"info\", \"success\", \"out-of-sync\", \"sync-error\"].join(\" \");\n\n    var _$btnGoLive; // reference to the GoLive button\n\n    // current selected implementation (LiveDevelopment | LiveDevMultiBrowser)\n    var LiveDevImpl;\n\n    // \"livedev.multibrowser\" preference\n    var PREF_MULTIBROWSER = \"multibrowser\";\n    var prefs = PreferencesManager.getExtensionPrefs(\"livedev\");\n    var multiBrowserPref = prefs.definePreference(PREF_MULTIBROWSER, \"boolean\", false, {\n        description: Strings.DESCRIPTION_LIVE_DEV_MULTIBROWSER\n    });\n\n    // \"livedev.remoteHighlight\" preference\n    var PREF_REMOTEHIGHLIGHT = \"remoteHighlight\";\n    var remoteHighlightPref = prefs.definePreference(PREF_REMOTEHIGHLIGHT, \"object\", {\n        animateStartValue: {\n            \"background-color\": \"rgba(0, 162, 255, 0.5)\",\n            \"opacity\": 0\n        },\n        animateEndValue: {\n            \"background-color\": \"rgba(0, 162, 255, 0)\",\n            \"opacity\": 0.6\n        },\n        \"paddingStyling\": {\n            \"border-width\": \"1px\",\n            \"border-style\": \"dashed\",\n            \"border-color\": \"rgba(0, 162, 255, 0.5)\"\n        },\n        \"marginStyling\": {\n            \"background-color\": \"rgba(21, 165, 255, 0.58)\"\n        },\n        \"borderColor\": \"rgba(21, 165, 255, 0.85)\",\n        \"showPaddingMargin\": true\n    }, {\n        description: Strings.DESCRIPTION_LIVE_DEV_HIGHLIGHT_SETTINGS\n    });\n\n    /** Toggles or sets the preference **/\n    function _togglePref(key, value) {\n        var val,\n            oldPref = !!prefs.get(key);\n\n        if (value === undefined) {\n            val = !oldPref;\n        } else {\n            val = !!value;\n        }\n\n        // update menu\n        if (val !== oldPref) {\n            prefs.set(key, val);\n        }\n\n        return val;\n    }\n\n    /* Toggles or sets the \"livedev.multibrowser\" preference */\n    function _toggleLivePreviewMultiBrowser(value) {\n        var val = _togglePref(PREF_MULTIBROWSER, value);\n\n        CommandManager.get(Commands.TOGGLE_LIVE_PREVIEW_MB_MODE).setChecked(val);\n        // Issue #10217: multi-browser does not support user server, so disable\n        // the setting if it is enabled.\n        CommandManager.get(Commands.FILE_PROJECT_SETTINGS).setEnabled(!val);\n    }\n\n    /** Load Live Development LESS Style */\n    function _loadStyles() {\n        var lessText = require(\"text!LiveDevelopment/main.less\");\n\n        less.render(lessText, function onParse(err, tree) {\n            console.assert(!err, err);\n            ExtensionUtils.addEmbeddedStyleSheet(tree.css);\n        });\n    }\n\n    /**\n     * Change the appearance of a button. Omit text to remove any extra text; omit style to return to default styling;\n     * omit tooltip to leave tooltip unchanged.\n     */\n    function _setLabel($btn, text, style, tooltip) {\n        // Clear text/styles from previous status\n        $(\"span\", $btn).remove();\n        $btn.removeClass(_allStatusStyles);\n\n        // Set text/styles for new status\n        if (text && text.length > 0) {\n            $(\"<span class=\\\"label\\\">\")\n                .addClass(style)\n                .text(text)\n                .appendTo($btn);\n        } else {\n            $btn.addClass(style);\n        }\n\n        if (tooltip) {\n            $btn.attr(\"title\", tooltip);\n        }\n    }\n\n    /**\n     * Toggles LiveDevelopment and synchronizes the state of UI elements that reports LiveDevelopment status\n     *\n     * Stop Live Dev when in an active state (ACTIVE, OUT_OF_SYNC, SYNC_ERROR).\n     * Start Live Dev when in an inactive state (ERROR, INACTIVE).\n     * Do nothing when in a connecting state (CONNECTING, LOADING_AGENTS).\n     */\n    function _handleGoLiveCommand() {\n        window.alert('Coming soon: live preview support');\n        if (LiveDevImpl.status >= LiveDevImpl.STATUS_ACTIVE) {\n            LiveDevImpl.close();\n        } else if (LiveDevImpl.status <= LiveDevImpl.STATUS_INACTIVE) {\n            if (!params.get(\"skipLiveDevelopmentInfo\") && !PreferencesManager.getViewState(\"livedev.afterFirstLaunch\")) {\n                PreferencesManager.setViewState(\"livedev.afterFirstLaunch\", \"true\");\n                Dialogs.showModalDialog(\n                    DefaultDialogs.DIALOG_ID_INFO,\n                    Strings.LIVE_DEVELOPMENT_INFO_TITLE,\n                    Strings.LIVE_DEVELOPMENT_INFO_MESSAGE\n                ).done(function (id) {\n                    LiveDevImpl.open();\n                });\n            } else {\n                LiveDevImpl.open();\n            }\n        }\n    }\n\n    /** Called on status change */\n    function _showStatusChangeReason(reason) {\n        // Destroy the previous twipsy (options are not updated otherwise)\n        _$btnGoLive.twipsy(\"hide\").removeData(\"twipsy\");\n\n        // If there was no reason or the action was an explicit request by the user, don't show a twipsy\n        if (!reason || reason === \"explicit_close\") {\n            return;\n        }\n\n        // Translate the reason\n        var translatedReason = Strings[\"LIVE_DEV_\" + reason.toUpperCase()];\n        if (!translatedReason) {\n            translatedReason = StringUtils.format(Strings.LIVE_DEV_CLOSED_UNKNOWN_REASON, reason);\n        }\n\n        // Configure the twipsy\n        var options = {\n            placement: \"left\",\n            trigger: \"manual\",\n            autoHideDelay: 5000,\n            title: function () {\n                return translatedReason;\n            }\n        };\n\n        // Show the twipsy with the explanation\n        _$btnGoLive.twipsy(options).twipsy(\"show\");\n    }\n\n    /** Create the menu item \"Go Live\" */\n    function _setupGoLiveButton() {\n        if (!_$btnGoLive) {\n            _$btnGoLive = $(\"#toolbar-go-live\");\n            // Phoenix disable old live preivew\n            // _$btnGoLive.click(function onGoLive() {\n            //     _handleGoLiveCommand();\n            // });\n        }\n        LiveDevImpl.on(\"statusChange\", function statusChange(event, status, reason) {\n            // status starts at -1 (error), so add one when looking up name and style\n            // See the comments at the top of LiveDevelopment.js for details on the\n            // various status codes.\n            _setLabel(_$btnGoLive, null, _status[status + 1].style, _status[status + 1].tooltip);\n            _showStatusChangeReason(reason);\n            if (config.autoconnect) {\n                window.sessionStorage.setItem(\"live.enabled\", status === 3);\n            }\n        });\n\n        // Initialize tooltip for 'not connected' state\n        _setLabel(_$btnGoLive, null, _status[1].style, _status[1].tooltip);\n    }\n\n    /** Maintains state of the Live Preview menu item */\n    function _setupGoLiveMenu() {\n        LiveDevImpl.on(\"statusChange\", function statusChange(event, status) {\n            // Update the checkmark next to 'Live Preview' menu item\n            // Add checkmark when status is STATUS_ACTIVE; otherwise remove it\n            CommandManager.get(Commands.FILE_LIVE_FILE_PREVIEW).setChecked(status === LiveDevImpl.STATUS_ACTIVE);\n            CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT).setEnabled(status === LiveDevImpl.STATUS_ACTIVE);\n        });\n    }\n\n    function _updateHighlightCheckmark() {\n        CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT).setChecked(config.highlight);\n    }\n\n    function _handlePreviewHighlightCommand() {\n        config.highlight = !config.highlight;\n        _updateHighlightCheckmark();\n        if (config.highlight) {\n            LiveDevImpl.showHighlight();\n        } else {\n            LiveDevImpl.hideHighlight();\n        }\n        PreferencesManager.setViewState(\"livedev.highlight\", config.highlight);\n    }\n\n    /**\n     * Sets the MultiBrowserLiveDev implementation if multibrowser is truthy,\n     * keeps default LiveDevelopment implementation based on CDT otherwise.\n     * It also resets the listeners and UI elements.\n     */\n    function _setImplementation(multibrowser) {\n        if (multibrowser) {\n            // set implemenation\n            LiveDevImpl = MultiBrowserLiveDev;\n            // update styles for UI status\n            _status = [\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_NOT_CONNECTED, style: \"warning\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_NOT_CONNECTED, style: \"\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_PROGRESS1, style: \"info\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_CONNECTED, style: \"success\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC, style: \"out-of-sync\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_SYNC_ERROR, style: \"sync-error\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_PROGRESS1, style: \"info\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_PROGRESS1, style: \"info\" }\n            ];\n        } else {\n            LiveDevImpl = LiveDevelopment;\n            _status = [\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_NOT_CONNECTED, style: \"warning\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_NOT_CONNECTED, style: \"\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_PROGRESS1, style: \"info\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_PROGRESS2, style: \"info\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_CONNECTED, style: \"success\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC, style: \"out-of-sync\" },\n                { tooltip: Strings.LIVE_DEV_STATUS_TIP_SYNC_ERROR, style: \"sync-error\" }\n            ];\n        }\n        // setup status changes listeners for new implementation\n        _setupGoLiveButton();\n        _setupGoLiveMenu();\n        // toggle the menu\n        _toggleLivePreviewMultiBrowser(multibrowser);\n    }\n\n    /** Setup window references to useful LiveDevelopment modules */\n    function _setupDebugHelpers() {\n        window.ld = LiveDevelopment;\n        window.i = Inspector;\n        window.report = function report(params) { window.params = params; console.info(params); };\n    }\n\n    /** force reload the live preview */\n    function _handleReloadLivePreviewCommand() {\n        if (LiveDevelopment.status >= LiveDevelopment.STATUS_ACTIVE) {\n            LiveDevelopment.reload();\n        }\n    }\n\n    /** Initialize LiveDevelopment */\n    AppInit.appReady(function () {\n        params.parse();\n        config.remoteHighlight = prefs.get(PREF_REMOTEHIGHLIGHT);\n\n        Inspector.init(config);\n        LiveDevelopment.init(config);\n\n        // init experimental multi-browser implementation\n        // it can be enable by setting 'livedev.multibrowser' preference to true.\n        // It has to be initiated at this point in case of dynamically switching\n        // by changing the preference value.\n        MultiBrowserLiveDev.init(config);\n\n        _loadStyles();\n        _updateHighlightCheckmark();\n\n        _setImplementation(prefs.get(PREF_MULTIBROWSER));\n\n        if (config.debug) {\n            _setupDebugHelpers();\n        }\n\n        // trigger autoconnect\n        if (config.autoconnect &&\n                window.sessionStorage.getItem(\"live.enabled\") === \"true\" &&\n                DocumentManager.getCurrentDocument()) {\n            _handleGoLiveCommand();\n        }\n\n        // Redraw highlights when window gets focus. This ensures that the highlights\n        // will be in sync with any DOM changes that may have occurred.\n        $(window).focus(function () {\n            if (Inspector.connected() && config.highlight) {\n                LiveDevelopment.redrawHighlight();\n            }\n        });\n\n        multiBrowserPref\n            .on(\"change\", function () {\n                // Stop the current session if it is open and set implementation based on\n                // the pref value. We could start the new implementation immediately, but\n                // since the current document is potentially a user preferences file, Live\n                // Preview will not locate the html file to serve.\n                if (LiveDevImpl && LiveDevImpl.status >= LiveDevImpl.STATUS_ACTIVE) {\n                    LiveDevImpl.close()\n                        .done(function () {\n                            // status changes will now be listened by the new implementation\n                            LiveDevImpl.off(\"statusChange\");\n                            _setImplementation(prefs.get(PREF_MULTIBROWSER));\n                        });\n                } else {\n                    _setImplementation(prefs.get(PREF_MULTIBROWSER));\n                }\n            });\n\n        remoteHighlightPref\n            .on(\"change\", function () {\n                config.remoteHighlight = prefs.get(PREF_REMOTEHIGHLIGHT);\n\n                if (LiveDevImpl && LiveDevImpl.status >= LiveDevImpl.STATUS_ACTIVE) {\n                    LiveDevImpl.agents.remote.call(\"updateConfig\", JSON.stringify(config));\n                }\n            });\n\n    });\n\n    // init prefs\n    PreferencesManager.stateManager.definePreference(\"livedev.highlight\", \"boolean\", true)\n        .on(\"change\", function () {\n            config.highlight = PreferencesManager.getViewState(\"livedev.highlight\");\n            _updateHighlightCheckmark();\n        });\n\n    config.highlight = PreferencesManager.getViewState(\"livedev.highlight\");\n\n    // init commands\n    //CommandManager.register(Strings.CMD_LIVE_FILE_PREVIEW,  Commands.FILE_LIVE_FILE_PREVIEW, _handleGoLiveCommand);\n    CommandManager.register(Strings.CMD_LIVE_HIGHLIGHT, Commands.FILE_LIVE_HIGHLIGHT, _handlePreviewHighlightCommand);\n    CommandManager.register(Strings.CMD_RELOAD_LIVE_PREVIEW, Commands.CMD_RELOAD_LIVE_PREVIEW, _handleReloadLivePreviewCommand);\n    CommandManager.register(Strings.CMD_TOGGLE_LIVE_PREVIEW_MB_MODE, Commands.TOGGLE_LIVE_PREVIEW_MB_MODE, _toggleLivePreviewMultiBrowser);\n\n    CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT).setEnabled(false);\n\n    // Export public functions\n});\n"],"file":"main.js"}