{"version":3,"sources":["LiveDevelopment/MultiBrowserImpl/transports/ServiceWorkerTransport.js"],"names":["define","require","exports","module","EventDispatcher","Metrics","METRIC_SEND_INTERVAL_MS","transportMessagesCount","transportMessagesSizeB","setInterval","countEvent","EVENT_TYPE","LIVE_PREVIEW","ServiceWorkerTransportRemote","BROADCAST_CHANNEL_ID","Math","round","random","_broadcastChannel","BroadcastChannel","getRemoteScript","window","loggingOptions","logLivePreview","makeEventDispatcher","start","addEventListener","postMessage","type","onmessage","event","livePreview","log","data","trigger","clientID","url","message","length","console","error","close","send","args"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,MAAMC,gBAAkBH,QAAQ,yBAC5BI,QAAUJ,QAAQ,iBAEhBK,wBAA0B,IAEhC,IAAIC,uBAAyB,EACzBC,uBAAyB,EAK7BC,YAAY,KACLF,uBAAyB,IACxBF,QAAQK,WAAWL,QAAQM,WAAWC,aAAc,YAAa,WAAYL,wBAC7EF,QAAQK,WAAWL,QAAQM,WAAWC,aAAc,YAAa,WAAYJ,wBAC7ED,uBAAyB,EACzBC,uBAAyB,IAbD,KAkBhC,MAAMK,6BAA+BZ,QAAQ,uEAGvCa,wBAA0BC,KAAKC,MAAqB,KAAdD,KAAKE,wBACjD,IAAIC,kBAAoB,IAAIC,iBAAiBL,sBAM7C,SAASM,kBACL,MAAO,4DAC4CN,kEACRO,OAAOC,eAAeC,oBAC7DV,6BACA,eAGRT,gBAAgBoB,oBAAoBtB,SAGpCA,QAAQkB,gBAAkBA,gBAE1BlB,QAAQuB,MAAQ,WAIZC,iBAAkB,eAAgB,WAC9BR,kBAAkBS,YAAY,CAC1BC,KAAM,oBAGdV,kBAAkBW,UAAY,CAACC,QAC3BT,OAAOC,eAAeS,YAAYC,IAC9B,yEAA0EF,MAAMG,MACpF,MAAML,KAAOE,MAAMG,KAAKL,KACxB,OAAQA,MACR,IAAK,kBAAmB1B,QAAQgC,QAAQ,UAAW,CAACJ,MAAMG,KAAKE,SAAUL,MAAMG,KAAKG,MAAO,MAC3F,IAAK,kBACD,MAAMC,QAAUP,MAAMG,KAAKI,SAAW,GACtCnC,QAAQgC,QAAQ,UAAW,CAACJ,MAAMG,KAAKE,SAAUE,UACjD7B,wBAAkD6B,QAAQC,OAC1D,MACJ,IAAK,gBAAiBpC,QAAQgC,QAAQ,QAAS,CAACJ,MAAMG,KAAKE,WAAY,MACvE,QAASI,QAAQC,MAAM,wEAAyEV,OAEhGvB,4BAIRL,QAAQuC,MAAQ,aAIhBvC,QAAQwC,KAAO,YAAaC,MACxBzB,kBAAkBS,YAAY,CAC1BC,KAAM,uBACNe,KAAAA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// This transport provides a connection between Brackets and a live browser preview via service worker\n// as the intermediary. We also rely on an injected script in the browser for the other end of the transport.\n\ndefine(function (require, exports, module) {\n\n\n    const EventDispatcher = require(\"utils/EventDispatcher\"),\n        Metrics = require(\"utils/Metrics\");\n\n    const METRIC_SEND_INTERVAL_MS = 1000;\n\n    let transportMessagesCount = 0,\n        transportMessagesSizeB = 0;\n\n    // mix panel and Google Analytics is sending too many request and seems to not have client side aggregation\n    // like core analytics. So we do our own aggregation and send metrics only atmost once a second.\n    // We could remove this once we moe fully to core analytics.\n    setInterval(()=>{\n        if(transportMessagesCount > 0){\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"transport\", \"msgCount\", transportMessagesCount);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"transport\", \"msgSizeB\", transportMessagesSizeB);\n            transportMessagesCount = 0;\n            transportMessagesSizeB = 0;\n        }\n    }, METRIC_SEND_INTERVAL_MS);\n\n    // The script that will be injected into the previewed HTML to handle the other side of the socket connection.\n    const ServiceWorkerTransportRemote = require(\"text!LiveDevelopment/BrowserScripts/ServiceWorkerTransportRemote.js\");\n\n    // Events - setup the service worker communication channel.\n    const BROADCAST_CHANNEL_ID = `${Math.round( Math.random()*1000000000000)}_livePreview`;\n    let _broadcastChannel = new BroadcastChannel(BROADCAST_CHANNEL_ID);\n\n    /**\n     * Returns the script that should be injected into the browser to handle the other end of the transport.\n     * @return {string}\n     */\n    function getRemoteScript() {\n        return \"<script>\\n\" +\n            `window.LIVE_PREVIEW_BROADCAST_CHANNEL_ID = \"${BROADCAST_CHANNEL_ID}\";\\n` +\n            `window.LIVE_PREVIEW_DEBIG_ENABLED = ${window.loggingOptions.logLivePreview};\\n` +\n            ServiceWorkerTransportRemote +\n            \"</script>\\n\";\n    }\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // Exports\n    exports.getRemoteScript = getRemoteScript;\n\n    exports.start = function () {\n        // Listen to the response\n        // attach to browser tab/window closing event so that we send a cleanup request\n        // to the service worker for the comm ports\n        addEventListener( 'beforeunload', function() {\n            _broadcastChannel.postMessage({\n                type: 'PHOENIX_CLOSE'\n            });\n        });\n        _broadcastChannel.onmessage = (event) => {\n            window.loggingOptions.livePreview.log(\n                \"Live Preview: Phoenix received event from Browser preview tab/iframe: \", event.data);\n            const type = event.data.type;\n            switch (type) {\n            case 'BROWSER_CONNECT': exports.trigger('connect', [event.data.clientID, event.data.url]); break;\n            case 'BROWSER_MESSAGE':\n                const message = event.data.message || \"\";\n                exports.trigger('message', [event.data.clientID, message]);\n                transportMessagesSizeB = transportMessagesSizeB + message.length;\n                break;\n            case 'BROWSER_CLOSE': exports.trigger('close', [event.data.clientID]); break;\n            default: console.error(\"ServiceWorkerTransport received unknown message from Browser preview:\", event);\n            }\n            transportMessagesCount++;\n        };\n    };\n\n    exports.close = function () {\n        // no-op the broadcast channel is never broken even though live preview may be on or off.\n    };\n\n    exports.send = function (...args) {\n        _broadcastChannel.postMessage({\n            type: 'MESSAGE_FROM_PHOENIX',\n            args\n        });\n    };\n\n});\n"],"file":"ServiceWorkerTransport.js"}