{"version":3,"sources":["LiveDevelopment/MultiBrowserImpl/transports/NodeSocketTransport.js"],"names":["define","require","exports","module","FileUtils","EventDispatcher","NodeDomain","NodeSocketTransportRemote","domainPath","NodeSocketTransportDomain","getNativeBracketsDirectoryPath","getNativeModuleDirectoryPath","SOCKET_PORT","getRemoteScript","forEach","type","on","console","log","JSON","stringify","Array","prototype","slice","call","arguments","trigger","makeEventDispatcher","method","args","unshift","exec","apply"],"mappings":"AA0BAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,UAAkBH,QAAQ,kBAC1BI,gBAAkBJ,QAAQ,yBAC1BK,WAAkBL,QAAQ,oBAG1BM,0BAA4BN,QAAQ,wFAIpCO,WAEAC,0BAA4B,IAAIH,WAAW,sBAF9BF,UAAUM,iCAAmC,IAAMN,UAAUO,6BAA6BR,QAAU,mCAMjHS,YAAc,KAMlB,SAASC,kBACL,MAAO,aACHN,0BACA,iEAAmEK,YAAc,mBASzF,CAAC,UAAW,UAAW,SAASE,QAAQ,SAAUC,MAC9CN,0BAA0BO,GAAGD,KAAM,WAC/BE,QAAQC,IAAI,iCAAmCH,KAAO,MAAQI,KAAKC,UAAUC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,KAEnHvB,QAAQwB,QAAQX,KAAMM,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,QAIpEpB,gBAAgBsB,oBAAoBzB,SAGpCA,QAAQW,gBAAkBA,gBAI1B,CAAC,QAAS,OAAQ,SAASC,QAAQ,SAAUc,QACzC1B,QAAQ0B,QAAU,WACd,IAAIC,KAAOR,MAAMC,UAAUC,MAAMC,KAAKC,WACtCI,KAAKC,QAAQF,QACbX,QAAQC,IAAI,yBAA2BW,MACvCpB,0BAA0BsB,KAAKC,MAAMvB,0BAA2BoB","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// This transport provides a WebSocket connection between Brackets and a live browser preview.\n// This is just a thin wrapper around the Node extension (NodeSocketTransportDomain) that actually\n// provides the WebSocket server and handles the communication. We also rely on an injected script in\n// the browser for the other end of the transport.\n\ndefine(function (require, exports, module) {\n\n\n    var FileUtils       = require(\"file/FileUtils\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        NodeDomain      = require(\"utils/NodeDomain\");\n\n    // The script that will be injected into the previewed HTML to handle the other side of the socket connection.\n    var NodeSocketTransportRemote = require(\"text!LiveDevelopment/MultiBrowserImpl/transports/remote/NodeSocketTransportRemote.js\");\n\n    // The node extension that actually provides the WebSocket server.\n\n    var domainPath = FileUtils.getNativeBracketsDirectoryPath() + \"/\" + FileUtils.getNativeModuleDirectoryPath(module) + \"/node/NodeSocketTransportDomain\";\n\n    var NodeSocketTransportDomain = new NodeDomain(\"nodeSocketTransport\", domainPath);\n\n    // This must match the port declared in NodeSocketTransportDomain.js.\n    // TODO: randomize this?\n    var SOCKET_PORT = 8123;\n\n    /**\n     * Returns the script that should be injected into the browser to handle the other end of the transport.\n     * @return {string}\n     */\n    function getRemoteScript() {\n        return \"<script>\\n\" +\n            NodeSocketTransportRemote +\n            \"this._Brackets_LiveDev_Socket_Transport_URL = 'ws://localhost:\" + SOCKET_PORT + \"';\\n\" +\n            \"</script>\\n\";\n    }\n\n    // Events\n\n    // We can simply retrigger the events we receive from the node domain directly, since they're in\n    // the same format expected by clients of the transport.\n\n    [\"connect\", \"message\", \"close\"].forEach(function (type) {\n        NodeSocketTransportDomain.on(type, function () {\n            console.log(\"NodeSocketTransport - event - \" + type + \" - \" + JSON.stringify(Array.prototype.slice.call(arguments, 1)));\n            // Remove the event object from the argument list.\n            exports.trigger(type, Array.prototype.slice.call(arguments, 1));\n        });\n    });\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // Exports\n    exports.getRemoteScript = getRemoteScript;\n\n    // Proxy the node domain methods directly through, since they have exactly the same\n    // signatures as the ones we're supposed to provide.\n    [\"start\", \"send\", \"close\"].forEach(function (method) {\n        exports[method] = function () {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift(method);\n            console.log(\"NodeSocketTransport - \" + args);\n            NodeSocketTransportDomain.exec.apply(NodeSocketTransportDomain, args);\n        };\n    });\n\n});\n"],"file":"NodeSocketTransport.js"}