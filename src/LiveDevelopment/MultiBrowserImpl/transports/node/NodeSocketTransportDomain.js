var WebSocketServer=require("ws").Server,_=require("lodash"),_wsServer,_domainManager,_nextClientId=1,_clients={},SOCKET_PORT=8123;function _clientForSocket(ws){return _.find(_clients,function(client){return client.socket===ws})}function _createServer(){_wsServer||(_wsServer=new WebSocketServer({port:SOCKET_PORT})).on("connection",function(ws){ws.on("message",function(msg){var msgObj;console.log("WebSocketServer - received - "+msg);try{msgObj=JSON.parse(msg)}catch(e){return void console.error("nodeSocketTransport: Error parsing message: "+msg)}if("connect"===msgObj.type){if(!msgObj.url)return void console.error("nodeSocketTransport: Malformed connect message: "+msg);var clientId=_nextClientId++;_clients[clientId]={id:clientId,url:msgObj.url,socket:ws},console.log("emitting connect event"),_domainManager.emitEvent("nodeSocketTransport","connect",[clientId,msgObj.url])}else if("message"===msgObj.type){var client=_clientForSocket(ws);client?_domainManager.emitEvent("nodeSocketTransport","message",[client.id,msgObj.message]):console.error("nodeSocketTransport: Couldn't locate client for message: "+msg)}else console.error("nodeSocketTransport: Got bad socket message type: "+msg)}).on("error",function(e){var client=_clientForSocket(ws);console.error("nodeSocketTransport: Error on socket for client "+JSON.stringify(client)+": "+e)}).on("close",function(){var client=_clientForSocket(ws);client?(_domainManager.emitEvent("nodeSocketTransport","close",[client.id]),delete _clients[client.id]):console.error("nodeSocketTransport: Socket closed, but couldn't locate client")})}).on("error",function(e){console.error("nodeSocketTransport: Error on live preview server creation: "+e)})}function _cmdStart(url){_createServer()}function _cmdSend(idOrArray,msgStr){Array.isArray(idOrArray)||(idOrArray=[idOrArray]),idOrArray.forEach(function(id){var client=_clients[id];client?client.socket.send(msgStr):console.error("nodeSocketTransport: Couldn't find client ID: "+id)})}function _cmdClose(clientId){var client=_clients[clientId];client&&(client.socket.close(),delete _clients[clientId])}function init(domainManager){_domainManager=domainManager,domainManager.hasDomain("nodeSocketTransport")||domainManager.registerDomain("nodeSocketTransport",{major:0,minor:1}),domainManager.registerCommand("nodeSocketTransport","start",_cmdStart,!1,"Creates the WS server",[]),domainManager.registerCommand("nodeSocketTransport","send",_cmdSend,!1,"Sends a message to a given client or list of clients",[{name:"idOrArray",type:"number|Array.<number>",description:"id or array of ids to send the message to"},{name:"message",type:"string",description:"JSON message to send"}],[]),domainManager.registerCommand("nodeSocketTransport","close",_cmdClose,!1,"Closes the connection to a given client",[{name:"id",type:"number",description:"id of connection to close"}],[]),domainManager.registerEvent("nodeSocketTransport","connect",[{name:"clientID",type:"number",description:"ID of live preview page connecting to live development"},{name:"url",type:"string",description:"URL of page that live preview is connecting from"}]),domainManager.registerEvent("nodeSocketTransport","message",[{name:"clientID",type:"number",description:"ID of live preview page sending message"},{name:"msg",type:"string",description:"JSON message from client page"}]),domainManager.registerEvent("nodeSocketTransport","close",[{name:"clientID",type:"number",description:"ID of live preview page being closed"}])}exports.init=init;
//# sourceMappingURL=NodeSocketTransportDomain.js.map
