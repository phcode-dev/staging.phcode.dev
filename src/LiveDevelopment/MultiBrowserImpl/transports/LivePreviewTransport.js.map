{"version":3,"sources":["LiveDevelopment/MultiBrowserImpl/transports/LivePreviewTransport.js"],"names":["define","require","exports","module","LiveDevProtocol","EventDispatcher","Metrics","METRIC_SEND_INTERVAL_MS","transportMessagesRecvCount","transportMessagesSendCount","transportMessagesRecvSizeB","transportMessagesSendSizeB","setInterval","countEvent","EVENT_TYPE","LIVE_PREVIEW","LivePreviewTransportRemote","_transportBridge","getRemoteScript","replaceString","includes","Error","transportScript","getRemoteTransportScript","Phoenix","PHOENIX_INSTANCE_ID","LIVE_DEV_REMOTE_WORKER_SCRIPTS_FILE_NAME","logger","loggingOptions","logLivePreview","JSON","stringify","TRUSTED_ORIGINS","replace","start","addEventListener","messageToLivePreviewTabs","type","close","send","clientIDs","message","length","_browserConnect","_ev","event","window","livePreview","log","data","trigger","clientID","url","_browserClose","_browserMessage","setLivePreviewTransportBridge","transportBridge","off","on","makeEventDispatcher"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,MAAMC,gBAAuBH,QAAQ,6DACjCI,gBAAkBJ,QAAQ,yBAC1BK,QAAUL,QAAQ,iBAEhBM,wBAA0B,IAEhC,IAAIC,2BAA6B,EAC7BC,2BAA6B,EAC7BC,2BAA6B,EAC7BC,2BAA6B,EAKjCC,YAAY,KACLJ,2BAA6B,IAC5BF,QAAQO,WAAWP,QAAQQ,WAAWC,aAAc,UAChD,YAAaN,4BACjBH,QAAQO,WAAWP,QAAQQ,WAAWC,aAAc,UAChD,YAAaP,4BACjBF,QAAQO,WAAWP,QAAQQ,WAAWC,aAAc,UAChD,YAAaJ,4BACjBL,QAAQO,WAAWP,QAAQQ,WAAWC,aAAc,UAChD,YAAaL,4BACjBF,2BAA6B,EAC7BC,2BAA6B,EAC7BC,2BAA6B,EAC7BC,2BAA6B,IAvBL,KA4BhC,MAAMK,2BAA6Bf,QAAQ,qEAE3C,IAAIgB,iBAMJ,SAASC,kBACL,MAAMC,cAAgB,6BACtB,IAAIH,2BAA2BI,SAASD,eACpC,MAAM,IAAIE,MAAM,8IAGpB,IAAIC,gBAAmBL,kBAAoBA,iBAAiBM,0BACxDN,iBAAiBM,4BAA+B,GAOpD,OANAD,gBAAkB,wEAC6BE,QAAQC,0FACarB,gBAAgBsB,gGAC/BC,OAAOC,eAAeC,gEAC3BC,KAAKC,UAAUP,QAAQQ,sBACnEV,gBACGN,2BAA2BiB,QAAQd,cAAeG,iBACnD,KAKV,SAASY,QAILC,iBAAkB,eAAgB,WAC9BlB,kBAAoBA,iBAAiBmB,yBAAyB,CAC1DC,KAAM,oBAKlB,SAASC,SAIT,SAASC,KAAKC,UAAWC,SACrBA,QAAUA,SAAW,GACrBxB,kBAAoBA,iBAAiBmB,yBAAyB,CAC1DC,KAAM,uBACNG,UAAAA,UACAC,QAAAA,UAEJhC,6BACAE,4BAA0D8B,QAAQC,OAGtE,SAASC,gBAAgBC,IAAKC,OAC1BC,OAAOnB,OAAOoB,YAAYC,IACtB,yEAA0EH,MAAMI,MACpF/C,QAAQgD,QAAQ,UAAW,CAACL,MAAMI,KAAKR,QAAQU,SAAUN,MAAMI,KAAKR,QAAQW,MAC5E5C,6BAGJ,SAAS6C,cAAcT,IAAKC,OACxBC,OAAOnB,OAAOoB,YAAYC,IACtB,yEAA0EH,MAAMI,MACpF/C,QAAQgD,QAAQ,QAAS,CAACL,MAAMI,KAAKR,QAAQU,WAC7C3C,6BAGJ,SAAS8C,gBAAgBV,IAAKC,OAC1BC,OAAOnB,OAAOoB,YAAYC,IACtB,yEAA0EH,MAAMI,MACpF,MAAMR,QAAUI,MAAMI,KAAKR,QAAQA,SAAW,GAC9CvC,QAAQgD,QAAQ,UAAW,CAACL,MAAMI,KAAKR,QAAQU,SAAUV,UACzD/B,4BAA0D+B,QAAQC,OAClElC,6BAGJ,SAAS+C,8BAA8BC,iBACnCvC,iBAAmBuC,gBACnBA,gBAAgBC,IAAI,6BACpBD,gBAAgBE,GAAG,4BAA6Bf,iBAEhDa,gBAAgBC,IAAI,2BACpBD,gBAAgBE,GAAG,0BAA2BL,eAE9CG,gBAAgBC,IAAI,6BACpBD,gBAAgBE,GAAG,4BAA6BJ,iBA5DpDjD,gBAAgBsD,oBAAoBzD,SAgEpCA,QAAQgB,gBAAkBA,gBAC1BhB,QAAQqD,8BAAgCA,8BACxCrD,QAAQgC,MAAQA,MAChBhC,QAAQoC,MAAQA,MAChBpC,QAAQqC,KAAOA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// This transport provides a connection between Brackets and a live browser preview via service worker\n// as the intermediary. We also rely on an injected script in the browser for the other end of the transport.\n/*globals logger, Phoenix*/\ndefine(function (require, exports, module) {\n\n\n    const LiveDevProtocol      = require(\"LiveDevelopment/MultiBrowserImpl/protocol/LiveDevProtocol\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        Metrics = require(\"utils/Metrics\");\n\n    const METRIC_SEND_INTERVAL_MS = 1000;\n\n    let transportMessagesRecvCount = 0,\n        transportMessagesSendCount = 0,\n        transportMessagesRecvSizeB = 0,\n        transportMessagesSendSizeB = 0;\n\n    // mix panel and Google Analytics is sending too many request and seems to not have client side aggregation\n    // like core analytics. So we do our own aggregation and send metrics only atmost once a second.\n    // We could remove this once we moe fully to core analytics.\n    setInterval(()=>{\n        if(transportMessagesRecvCount > 0){\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"message\",\n                \"sendCount\", transportMessagesSendCount);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"message\",\n                \"recvCount\", transportMessagesRecvCount);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"message\",\n                \"sentBytes\", transportMessagesSendSizeB);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"message\",\n                \"recvBytes\", transportMessagesRecvSizeB);\n            transportMessagesRecvCount = 0;\n            transportMessagesSendCount = 0;\n            transportMessagesRecvSizeB = 0;\n            transportMessagesSendSizeB = 0;\n        }\n    }, METRIC_SEND_INTERVAL_MS);\n\n    // The script that will be injected into the previewed HTML to handle the other side of the socket connection.\n    const LivePreviewTransportRemote = require(\"text!LiveDevelopment/BrowserScripts/LivePreviewTransportRemote.js\");\n\n    let _transportBridge;\n\n    /**\n     * Returns the script that should be injected into the browser to handle the other end of the transport.\n     * @return {string}\n     */\n    function getRemoteScript() {\n        const replaceString = \"const TRANSPORT_CONFIG={};\";\n        if(!LivePreviewTransportRemote.includes(replaceString)){\n            throw new Error(\"Live preview transport is expected to have replaceable template string:\" +\n                \" //REPLACE_ME_WITH_LIVE_PREVIEW_TRANSPORT_CONFIG_AND_SCRIPT_DYNAMIC\");\n        }\n        let transportScript = (_transportBridge && _transportBridge.getRemoteTransportScript &&\n            _transportBridge.getRemoteTransportScript()) || \"\";\n        transportScript = \"const TRANSPORT_CONFIG={};\" +\n            `TRANSPORT_CONFIG.PHOENIX_INSTANCE_ID = \"${Phoenix.PHOENIX_INSTANCE_ID}\";\\n` +\n            `TRANSPORT_CONFIG.LIVE_DEV_REMOTE_WORKER_SCRIPTS_FILE_NAME = \"${LiveDevProtocol.LIVE_DEV_REMOTE_WORKER_SCRIPTS_FILE_NAME}\";\\n` +\n            `TRANSPORT_CONFIG.LIVE_PREVIEW_DEBUG_ENABLED = ${logger.loggingOptions.logLivePreview};\\n`+\n            `TRANSPORT_CONFIG.TRUSTED_ORIGINS_EMBED = ${JSON.stringify(Phoenix.TRUSTED_ORIGINS)};\\n`+\n            transportScript;\n        return LivePreviewTransportRemote.replace(replaceString, transportScript)\n            + \"\\n\";\n    }\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    function start() {\n        // Listen to the response\n        // attach to browser tab/window closing event so that we send a cleanup request\n        // to the service worker for the comm ports\n        addEventListener( 'beforeunload', function() {\n            _transportBridge && _transportBridge.messageToLivePreviewTabs({\n                type: 'PHOENIX_CLOSE'\n            });\n        });\n    }\n\n    function close() {\n        // no-op the broadcast channel is never broken even though live preview may be on or off.\n    }\n\n    function send(clientIDs, message) {\n        message = message || \"\";\n        _transportBridge && _transportBridge.messageToLivePreviewTabs({\n            type: 'MESSAGE_FROM_PHOENIX',\n            clientIDs,\n            message\n        });\n        transportMessagesSendCount ++;\n        transportMessagesSendSizeB = transportMessagesSendSizeB + message.length;\n    };\n\n    function _browserConnect(_ev, event) {\n        window.logger.livePreview.log(\n            \"Live Preview: Phoenix received event from Browser preview tab/iframe: \", event.data);\n        exports.trigger('connect', [event.data.message.clientID, event.data.message.url]);\n        transportMessagesRecvCount++;\n    }\n\n    function _browserClose(_ev, event) {\n        window.logger.livePreview.log(\n            \"Live Preview: Phoenix received event from Browser preview tab/iframe: \", event.data);\n        exports.trigger('close', [event.data.message.clientID]);\n        transportMessagesRecvCount++;\n    }\n\n    function _browserMessage(_ev, event) {\n        window.logger.livePreview.log(\n            \"Live Preview: Phoenix received event from Browser preview tab/iframe: \", event.data);\n        const message = event.data.message.message || \"\";\n        exports.trigger('message', [event.data.message.clientID, message]);\n        transportMessagesRecvSizeB = transportMessagesRecvSizeB + message.length;\n        transportMessagesRecvCount++;\n    }\n\n    function setLivePreviewTransportBridge(transportBridge) {\n        _transportBridge = transportBridge;\n        transportBridge.off('BROWSER_CONNECT.transport');\n        transportBridge.on('BROWSER_CONNECT.transport', _browserConnect);\n\n        transportBridge.off('BROWSER_CLOSE.transport');\n        transportBridge.on('BROWSER_CLOSE.transport', _browserClose);\n\n        transportBridge.off('BROWSER_MESSAGE.transport');\n        transportBridge.on('BROWSER_MESSAGE.transport', _browserMessage);\n    }\n\n    // Exports\n    exports.getRemoteScript = getRemoteScript;\n    exports.setLivePreviewTransportBridge = setLivePreviewTransportBridge;\n    exports.start = start;\n    exports.close = close;\n    exports.send = send;\n});\n"],"file":"LivePreviewTransport.js"}