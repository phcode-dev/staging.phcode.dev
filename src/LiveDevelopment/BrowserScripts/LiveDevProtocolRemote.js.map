{"version":3,"sources":["LiveDevelopment/BrowserScripts/LiveDevProtocolRemote.js"],"names":["global","transport","_Brackets_LiveDev_Transport","MessageBroker","handlers","trigger","msg","msgHandlers","method","this","length","forEach","handler","e","console","error","stack","warn","respond","orig","response","id","send","on","push","msgStr","JSON","stringify","Runtime","evaluate","result","eval","params","expression","CSS","setStylesheetText","text","url","i","node","head","window","document","getElementsByTagName","s","createElement","type","appendChild","createTextNode","styleSheets","ownerNode","insertBefore","parentNode","removeChild","href","disabled","getStylesheetText","sheet","textContent","j","rules","cssRules","name","cssText","Page","reload","location","ignoreCache","navigate","replace","close","ProtocolManager","_documentObserver","_protocolHandler","enable","setCallbacks","onConnect","start","onClose","body","overlay","background","status","style","width","height","zIndex","position","top","left","backgroundColor","opacity","color","padding","verticalAlign","textAlign","title","setDocumentObserver","documentOberver","setProtocolHandler","protocolHandler","_Brackets_LiveDev_ProtocolManager","ProtocolHandler","message","parse","evt","connect","addEventListener","onDocumentClick","event","element","target","hasAttribute","tagId","getAttribute","clicked"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint evil: true */\n\n// This is the script that Brackets live development injects into HTML pages in order to\n// establish and maintain the live development socket connection. Note that Brackets may\n// also inject other scripts via \"evaluate\" once this has connected back to Brackets.\n\n(function (global) {\n\n\n    // This protocol handler assumes that there is also an injected transport script that\n    // has the following methods:\n    //     setCallbacks(obj) - a method that takes an object with a \"message\" callback that\n    //         will be called with the message string whenever a message is received by the transport.\n    //     send(msgStr) - sends the given message string over the transport.\n    var transport = global._Brackets_LiveDev_Transport;\n\n    /**\n     * Manage messaging between Editor and Browser at the protocol layer.\n     * Handle messages that arrives through the current transport and dispatch them\n     * to subscribers. Subscribers are handlers that implements remote commands/functions.\n     * Property 'method' of messages body is used as the 'key' to identify message types.\n     * Provide a 'send' operation that allows remote commands sending messages to the Editor.\n     */\n    var MessageBroker = {\n\n        /**\n         * Collection of handlers (subscribers) per each method.\n         * To be pushed by 'on' and consumed by 'trigger' stored this way:\n         *      handlers[method] = [handler1, handler2, ...]\n         */\n        handlers: {},\n\n         /**\n          * Dispatch messages to handlers according to msg.method value.\n          * @param {Object} msg Message to be dispatched.\n          */\n        trigger: function (msg) {\n            var msgHandlers;\n            if (!msg.method) {\n                // no message type, ignoring it\n                // TODO: should we trigger a generic event?\n                console.error(\"[Brackets LiveDev] Received message without method.\");\n                return;\n            }\n            // get handlers for msg.method\n            msgHandlers = this.handlers[msg.method];\n\n            if (msgHandlers && msgHandlers.length > 0) {\n                // invoke handlers with the received message\n                msgHandlers.forEach(function (handler) {\n                    try {\n                        // TODO: check which context should be used to call handlers here.\n                        handler(msg);\n                        return;\n                    } catch (e) {\n                        console.error(\"[Brackets LiveDev] Error executing a handler for \" + msg.method, e.stack);\n                        return;\n                    }\n                });\n            } else {\n                // no subscribers, ignore it.\n                // TODO: any other default handling? (eg. specific respond, trigger as a generic event, etc.);\n                console.warn(\"[Brackets LiveDev] No subscribers for message \" + msg.method);\n                return;\n            }\n        },\n\n        /**\n         * Send a response of a particular message to the Editor.\n         * Original message must provide an 'id' property\n         * @param {Object} orig Original message.\n         * @param {Object} response Message to be sent as the response.\n         */\n        respond: function (orig, response) {\n            if (!orig.id) {\n                console.error(\"[Brackets LiveDev] Trying to send a response for a message with no ID\");\n                return;\n            }\n            response.id = orig.id;\n            this.send(response);\n        },\n\n        /**\n         * Subscribe handlers to specific messages.\n         * @param {string} method Message type.\n         * @param {function} handler.\n         * TODO: add handler name or any identification mechanism to then implement 'off'?\n         */\n        on: function (method, handler) {\n            if (!method || !handler) {\n                return;\n            }\n            if (!this.handlers[method]) {\n                //initialize array\n                this.handlers[method] = [];\n            }\n            // add handler to the stack\n            this.handlers[method].push(handler);\n        },\n\n        /**\n         * Send a message to the Editor.\n         * @param {string} msgStr Message to be sent.\n         */\n        send: function (msgStr) {\n            transport.send(JSON.stringify(msgStr));\n        }\n    };\n\n    /**\n     * Runtime Domain. Implements remote commands for \"Runtime.*\"\n     */\n    var Runtime = {\n        /**\n         * Evaluate an expresion and return its result.\n         */\n        evaluate: function (msg) {\n            var result = eval(msg.params.expression);\n            MessageBroker.respond(msg, {\n                result: JSON.stringify(result) // TODO: in original protocol this is an object handle\n            });\n        }\n    };\n\n    // subscribe handler to method Runtime.evaluate\n    MessageBroker.on(\"Runtime.evaluate\", Runtime.evaluate);\n\n    /**\n     * CSS Domain.\n     */\n    var CSS = {\n\n        setStylesheetText : function (msg) {\n\n            if (!msg || !msg.params || !msg.params.text || !msg.params.url) {\n                return;\n            }\n\n            var i,\n                node;\n\n            var head = window.document.getElementsByTagName('head')[0];\n            // create an style element to replace the one loaded with <link>\n            var s = window.document.createElement('style');\n            s.type = 'text/css';\n            s.appendChild(window.document.createTextNode(msg.params.text));\n\n            for (i = 0; i < window.document.styleSheets.length; i++) {\n                node = window.document.styleSheets[i];\n                if (node.ownerNode.id === msg.params.url) {\n                    head.insertBefore(s, node.ownerNode); // insert the style element here\n                    // now can remove the style element previously created (if any)\n                    node.ownerNode.parentNode.removeChild(node.ownerNode);\n                } else if (node.href === msg.params.url  && !node.disabled) {\n                    // if the link element to change\n                    head.insertBefore(s, node.ownerNode); // insert the style element here\n                    node.disabled = true;\n                    i++; // since we have just inserted a stylesheet\n                }\n            }\n            s.id = msg.params.url;\n        },\n\n        /**\n        * retrieves the content of the stylesheet\n        * TODO: it now depends on reloadCSS implementation\n        */\n        getStylesheetText: function (msg) {\n            var i,\n                sheet,\n                text = \"\";\n            for (i = 0; i < window.document.styleSheets.length; i++) {\n                sheet = window.document.styleSheets[i];\n                // if it was already 'reloaded'\n                if (sheet.ownerNode.id ===  msg.params.url) {\n                    text = sheet.ownerNode.textContent;\n                } else if (sheet.href === msg.params.url && !sheet.disabled) {\n                    var j,\n                        rules;\n\n                    // Deal with Firefox's SecurityError when accessing sheets\n                    // from other domains, and Chrome returning `undefined`.\n                    try {\n                        rules = window.document.styleSheets[i].cssRules;\n                    } catch (e) {\n                        if (e.name !== \"SecurityError\") {\n                            throw e;\n                        }\n                    }\n                    if (!rules) {\n                        return;\n                    }\n\n                    for (j = 0; j < rules.length; j++) {\n                        text += rules[j].cssText + '\\n';\n                    }\n                }\n            }\n\n            MessageBroker.respond(msg, {\n                text: text\n            });\n        }\n    };\n\n    MessageBroker.on(\"CSS.setStylesheetText\", CSS.setStylesheetText);\n    MessageBroker.on(\"CSS.getStylesheetText\", CSS.getStylesheetText);\n\n    /**\n     * Page Domain.\n     */\n    var Page = {\n        /**\n         * Reload the current page optionally ignoring cache.\n         * @param {Object} msg\n         */\n        reload: function (msg) {\n            // just reload the page\n            window.location.reload(msg.params.ignoreCache);\n        },\n\n        /**\n         * Navigate to a different page.\n         * @param {Object} msg\n         */\n        navigate: function (msg) {\n            if (msg.params.url) {\n                // navigate to a new page.\n                window.location.replace(msg.params.url);\n            }\n        }\n    };\n\n    // subscribe handler to method Page.reload\n    MessageBroker.on(\"Page.reload\", Page.reload);\n    MessageBroker.on(\"Page.navigate\", Page.navigate);\n    MessageBroker.on(\"ConnectionClose\", Page.close);\n\n\n\n    // By the time this executes, there must already be an active transport.\n    if (!transport) {\n        console.error(\"[Brackets LiveDev] No transport set\");\n        return;\n    }\n\n    var ProtocolManager = {\n\n        _documentObserver: {},\n\n        _protocolHandler: {},\n\n        enable: function () {\n            transport.setCallbacks(this._protocolHandler);\n            transport.enable();\n        },\n\n        onConnect: function () {\n            this._documentObserver.start(window.document, transport);\n        },\n\n        onClose: function () {\n            var body = window.document.getElementsByTagName(\"body\")[0],\n                overlay = window.document.createElement(\"div\"),\n                background = window.document.createElement(\"div\"),\n                status = window.document.createElement(\"div\");\n\n            overlay.style.width = \"100%\";\n            overlay.style.height = \"100%\";\n            overlay.style.zIndex = 2227;\n            overlay.style.position = \"fixed\";\n            overlay.style.top = 0;\n            overlay.style.left = 0;\n\n            background.style.backgroundColor = \"#fff\";\n            background.style.opacity = 0.5;\n            background.style.width = \"100%\";\n            background.style.height = \"100%\";\n            background.style.position = \"fixed\";\n            background.style.top = 0;\n            background.style.left = 0;\n\n            status.textContent = \"Live Development Session has Ended\";\n            status.style.width = \"100%\";\n            status.style.color = \"#fff\";\n            status.style.backgroundColor = \"#666\";\n            status.style.position = \"fixed\";\n            status.style.top = 0;\n            status.style.left = 0;\n            status.style.padding = \"0.2em\";\n            status.style.verticalAlign = \"top\";\n            status.style.textAlign = \"center\";\n            overlay.appendChild(background);\n            overlay.appendChild(status);\n            body.appendChild(overlay);\n\n            // change the title as well\n            window.document.title = \"(Brackets Live Preview: closed) \" + window.document.title;\n        },\n\n        setDocumentObserver: function (documentOberver) {\n            if (!documentOberver) {\n                return;\n            }\n            this._documentObserver = documentOberver;\n        },\n\n        setProtocolHandler: function (protocolHandler) {\n            if (!protocolHandler) {\n                return;\n            }\n            this._protocolHandler = protocolHandler;\n        }\n    };\n\n    // exposing ProtocolManager\n    global._Brackets_LiveDev_ProtocolManager = ProtocolManager;\n\n    /**\n     * The remote handler for the protocol.\n     */\n    var ProtocolHandler = {\n        /**\n         * Handles a message from the transport. Parses it as JSON and delegates\n         * to MessageBroker who is in charge of routing them to handlers.\n         * @param {string} msgStr The protocol message as stringified JSON.\n         */\n        message: function (msgStr) {\n            var msg;\n            try {\n                msg = JSON.parse(msgStr);\n            } catch (e) {\n                console.error(\"[Brackets LiveDev] Malformed message received: \", msgStr);\n                return;\n            }\n            // delegates handling/routing to MessageBroker.\n            MessageBroker.trigger(msg);\n        },\n\n        close: function (evt) {\n            ProtocolManager.onClose();\n        },\n\n        connect: function (evt) {\n            ProtocolManager.onConnect();\n        }\n    };\n\n    ProtocolManager.setProtocolHandler(ProtocolHandler);\n\n    window.addEventListener('load', function () {\n        ProtocolManager.enable();\n    });\n\n    /**\n    * Sends the message containing tagID which is being clicked\n    * to the editor in order to change the cursor position to\n    * the HTML tag corresponding to the clicked element.\n    */\n    function onDocumentClick(event) {\n        var element = event.target;\n        if (element && element.hasAttribute('data-brackets-id')) {\n            MessageBroker.send({\"tagId\": element.getAttribute('data-brackets-id'),\n                \"clicked\": true});\n        }\n    }\n    window.document.addEventListener(\"click\", onDocumentClick);\n\n}(this));\n"],"file":"LiveDevProtocolRemote.js"}