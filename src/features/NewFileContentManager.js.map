{"version":3,"sources":["features/NewFileContentManager.js"],"names":["define","require","exports","module","LanguageManager","ProviderRegistrationHandler","RegistrationHandler","_providerRegistrationHandler","registerContentProvider","registerProvider","bind","removeContentProvider","removeProvider","_getContent","results","providerInfos","console","log","i","length","result","status","value","async","getInitialContentForFile","fullPath","language","getLanguageForPath","contentProviders","getProvidersForLanguageId","getId","providerPromises","activeProviderInfos","providerInfo","provider","getContent","push","error","Promise","allSettled"],"mappings":"AAsGAA,OAAO,SAAUC,QAASC,QAASC,QAI/B,MAAMC,gBAAkBH,QAAQ,4BAC5BI,4BAA8BJ,QAAQ,sCAAsCK,oBAE1EC,6BAA+B,IAAIF,4BACrCG,wBAA0BD,6BAA6BE,iBAAiBC,KAAKH,8BAC7EI,sBAAwBJ,6BAA6BK,eAAeF,KAAKH,8BAE7E,SAASM,YAAYC,QAASC,eAC1BC,QAAQC,IAAIH,QAASC,eACrB,IAAI,IAAIG,EAAE,EAAGA,EAAGJ,QAAQK,OAAQD,IAAI,CAEhC,IAAIE,OAASN,QAAQI,GACrB,GAAqB,cAAlBE,OAAOC,QAA0BD,OAAOE,MACvC,OAAOF,OAAOE,MAItB,MAAO,GAWXC,eAAeC,yBAAyBC,UACpC,IAAIC,SAAWtB,gBAAgBuB,mBAAmBF,UAC9CG,iBAAmBrB,6BAA6BsB,0BAA0BH,SAASI,SACnFC,iBAAmB,GAAIC,oBAAsB,GAW7ClB,QAVJ,IAAI,IAAImB,gBAAgBL,iBAAiB,CACrC,IAAIM,SAAWD,aAAaC,SACxBA,SAASC,YAKbJ,iBAAiBK,KAAKF,SAASC,WAAWV,WAC1CO,oBAAoBI,KAAKH,eALrBjB,QAAQqB,MAAM,qFACVH,UAOZ,OAAOrB,kBADayB,QAAQC,WAAWR,kBACXC,qBAIhC9B,QAAQM,wBAA0BA,wBAClCN,QAAQS,sBAA0BA,sBAClCT,QAAQsB,yBAA2BA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\n// @INCLUDE_IN_API_DOCS\n\n/**\n * NewFileContentManager provides support to add default template content when a new/empty file is created.\n * Extensions can register to provide content with `NewFileContentManager.registerContentProvider` API.\n *\n * ## Usage\n * Let's say whenever a user creates a new js file, we have to prefill the contents to \"sample content\"\n * ```js\n * const NewFileContentManager = brackets.getModule(\"features/NewFileContentManager\");\n * // replace `js` with language ID(Eg. javascript) if you want to restrict the preview to js files only. use `all` for\n * // all languages.\n * NewFileContentManager.registerContentProvider(exports, [\"js\"], 1);\n *\n * // provide a helpful name for the ContentProvider. This will be useful if you have to debug.\n * exports.CONTENT_PROVIDER_NAME = \"extension.someName\";\n * // now implement the getContent function that will be invoked when ever user creates a new empty file.\n * exports.getContent = function(fullPath) {\n *         return new Promise((resolve, reject)=>{\n *             resolve(\"sample content\");\n *         });\n *     };\n * ```\n *\n * ## API\n * ### registerContentProvider\n * Register a Content provider with this api.\n *\n * ```js\n * // syntax\n * NewFileContentManager.registerContentProvider(provider, supportedLanguages, priority);\n * ```\n * The API requires three parameters:\n * 1. `provider`: must implement a  `getContent` function which will be invoked to get the content. See API doc below.\n * 1. `supportedLanguages`: An array of languages that the provider supports. If `[\"all\"]` is supplied, then the\n *    provider will be invoked for all languages. Restrict to specific languages: Eg: `[\"javascript\", \"html\", \"php\"]`\n * 1. `priority`: Contents provided hy providers with higher priority will win if there are more than\n *    one provider registered for the language. Default is 0.\n *\n * ```js\n * // to register a provider that will be invoked for all languages. where provider is any object that implements\n * // a getContent function\n * NewFileContentManager.registerContentProvider(provider, [\"all\"]);\n *\n * // to register a provider that will be invoked for specific languages\n * NewFileContentManager.registerContentProvider(provider, [\"javascript\", \"html\", \"php\"]);\n * ```\n *\n * ### removeContentProvider\n * Removes a registered content provider. The API takes the same arguments as `registerContentProvider`.\n * ```js\n * // syntax\n * NewFileContentManager.removeContentProvider(provider, supportedLanguages);\n * // Example\n * NewFileContentManager.removeContentProvider(provider, [\"javascript\", \"html\"]);\n * ```\n *\n * ### provider.getContent\n * Each provider must implement the `getContent` function that returns a promise. The promise either resolves with\n * the content text or rejects if there is no content made available by the provider.\n * ```js\n * exports.CONTENT_PROVIDER_NAME = \"extension.someName\"; // for debugging\n * // function signature\n * exports.getContent = function(fullPath) {\n *         return new Promise((resolve, reject)=>{\n *             resolve(\"sample content\");\n *         });\n *     };\n * ```\n *\n * #### parameters\n * The function will be called with the path of the file that needs the content.\n * 1. `fullPath` - string path\n *\n * #### return types\n * A promise that resolves with the content text or rejects if there is no content made available by the provider.\n *\n * @module features/NewFileContentManager\n */\n\ndefine(function (require, exports, module) {\n\n\n    // Brackets modules\n    const LanguageManager = require(\"language/LanguageManager\"),\n        ProviderRegistrationHandler = require(\"features/PriorityBasedRegistration\").RegistrationHandler;\n\n    const _providerRegistrationHandler = new ProviderRegistrationHandler(),\n        registerContentProvider = _providerRegistrationHandler.registerProvider.bind(_providerRegistrationHandler),\n        removeContentProvider = _providerRegistrationHandler.removeProvider.bind(_providerRegistrationHandler);\n\n    function _getContent(results, providerInfos) {\n        console.log(results, providerInfos);\n        for(let i=0; i< results.length; i++){\n            // providers are already sorted in descending priority order\n            let result = results[i];\n            if(result.status === \"fulfilled\" && result.value){\n                return result.value;\n            }\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Returns a promise that resolves to the default text content of the given file after querying\n     * all the content providers. If no text is returned by any providers, it will return an empty string \"\".\n     * @example <caption>To get the default content given a path</caption>\n     * NewFileContentManager.getInitialContentForFile(\"/path/to/file.jsx\");\n     * @param {string} fullPath\n     * @returns {Promise<string>} The text contents\n     */\n    async function getInitialContentForFile(fullPath) {\n        let language = LanguageManager.getLanguageForPath(fullPath);\n        let contentProviders = _providerRegistrationHandler.getProvidersForLanguageId(language.getId());\n        let providerPromises = [], activeProviderInfos = [];\n        for(let providerInfo of contentProviders){\n            let provider = providerInfo.provider;\n            if(!provider.getContent){\n                console.error(\"NewFileContentManager provider does not implement the required getContent function\",\n                    provider);\n                continue;\n            }\n            providerPromises.push(provider.getContent(fullPath));\n            activeProviderInfos.push(providerInfo);\n        }\n        let results = await Promise.allSettled(providerPromises);\n        return _getContent(results, activeProviderInfos);\n    }\n\n    // public API\n    exports.registerContentProvider = registerContentProvider;\n    exports.removeContentProvider   = removeContentProvider;\n    exports.getInitialContentForFile = getInitialContentForFile;\n});\n"],"file":"NewFileContentManager.js"}