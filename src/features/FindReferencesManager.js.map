{"version":3,"sources":["features/FindReferencesManager.js"],"names":["define","require","exports","module","AppInit","CommandManager","MainViewManager","LanguageManager","DocumentManager","Commands","EditorManager","ProjectManager","ProviderRegistrationHandler","RegistrationHandler","SearchResultsView","SearchModel","Strings","_providerRegistrationHandler","registerFindReferencesProvider","registerProvider","bind","removeFindReferencesProvider","removeProvider","searchModel","_resultsView","_getReferences","provider","hostEditor","pos","result","$","Deferred","getReferences","done","rcvdObj","results","numFiles","numMatches","allResultsAvailable","setQueryInfo","query","queryInfo","caseSensitive","isRegExp","resolve","fail","reject","promise","_openReferencesPanel","editor","getActiveEditor","getCursorPos","referencesPromise","errorMsg","REFERENCES_NO_RESULTS","referencesProvider","language","getLanguageForSelection","enabledProviders","getProvidersForLanguageId","getId","some","item","index","hasReferences","open","close","displayErrorMessageAtCursor","_clearSearch","clear","closeReferencesPanel","setMenuItemStateForLanguage","languageId","get","CMD_FIND_ALL_REFERENCES","setEnabled","getLanguageForPath","document","file","_path","on","event","newFile","newPaneId","oldFile","oldPaneId","newFilePath","fullPath","newLanguage","newLanguageId","isBinary","getDocumentForPath","newDoc","changedLanguageId","oldFilePath","oldDoc","off","htmlReady","hasResults","showNextPage","showLastPage","register","FIND_ALL_REFERENCES"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 - present Adobe. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var AppInit                     = require(\"utils/AppInit\"),\n        CommandManager              = require(\"command/CommandManager\"),\n        MainViewManager             = require(\"view/MainViewManager\"),\n        LanguageManager             = require(\"language/LanguageManager\"),\n        DocumentManager             = require(\"document/DocumentManager\"),\n        Commands                    = require(\"command/Commands\"),\n        EditorManager               = require(\"editor/EditorManager\"),\n        ProjectManager              = require(\"project/ProjectManager\"),\n        ProviderRegistrationHandler = require(\"features/PriorityBasedRegistration\").RegistrationHandler,\n        SearchResultsView           = require(\"search/SearchResultsView\").SearchResultsView,\n        SearchModel                 = require(\"search/SearchModel\").SearchModel,\n        Strings                     = require(\"strings\");\n\n    var _providerRegistrationHandler = new ProviderRegistrationHandler(),\n        registerFindReferencesProvider = _providerRegistrationHandler.registerProvider.bind(\n            _providerRegistrationHandler\n        ),\n        removeFindReferencesProvider = _providerRegistrationHandler.removeProvider.bind(_providerRegistrationHandler);\n\n    var searchModel = new SearchModel(),\n        _resultsView;\n\n    function _getReferences(provider, hostEditor, pos) {\n        var result = new $.Deferred();\n\n        if(!provider) {\n            return result.reject();\n        }\n\n        provider.getReferences(hostEditor, pos)\n            .done(function (rcvdObj) {\n\n                searchModel.results = rcvdObj.results;\n                searchModel.numFiles = rcvdObj.numFiles;\n                searchModel.numMatches = rcvdObj.numMatches;\n                searchModel.allResultsAvailable = true;\n                searchModel.setQueryInfo({query: rcvdObj.queryInfo, caseSensitive: true, isRegExp: false});\n                result.resolve();\n            }).fail(function (){\n                result.reject();\n            });\n        return result.promise();\n\n    }\n\n    function _openReferencesPanel() {\n        var editor = EditorManager.getActiveEditor(),\n            pos = editor ? editor.getCursorPos() : null,\n            referencesPromise,\n            result = new $.Deferred(),\n            errorMsg = Strings.REFERENCES_NO_RESULTS,\n            referencesProvider;\n\n        var language = editor.getLanguageForSelection(),\n            enabledProviders = _providerRegistrationHandler.getProvidersForLanguageId(language.getId());\n\n        enabledProviders.some(function (item, index) {\n            if (item.provider.hasReferences(editor)) {\n                referencesProvider = item.provider;\n                return true;\n            }\n        });\n\n        referencesPromise = _getReferences(referencesProvider, editor, pos);\n\n        // If one of them will provide a widget, show it inline once ready\n        if (referencesPromise) {\n            referencesPromise.done(function () {\n                if(_resultsView) {\n                    _resultsView.open();\n                }\n            }).fail(function () {\n                if(_resultsView) {\n                    _resultsView.close();\n                }\n                editor.displayErrorMessageAtCursor(errorMsg);\n                result.reject();\n            });\n        } else {\n            if(_resultsView) {\n                _resultsView.close();\n            }\n            editor.displayErrorMessageAtCursor(errorMsg);\n            result.reject();\n        }\n\n        return result.promise();\n    }\n\n    /**\n     * @private\n     * Clears any previous search information, removing update listeners and clearing the model.\n     */\n    function _clearSearch() {\n        searchModel.clear();\n    }\n\n    /**\n     * @public\n     * Closes the references panel\n     */\n    function closeReferencesPanel() {\n        if (_resultsView) {\n            _resultsView.close();\n        }\n    }\n\n    function setMenuItemStateForLanguage(languageId) {\n        CommandManager.get(Commands.CMD_FIND_ALL_REFERENCES).setEnabled(false);\n        if (!languageId) {\n            var editor = EditorManager.getActiveEditor();\n            if (editor) {\n                languageId = LanguageManager.getLanguageForPath(editor.document.file._path).getId();\n            }\n        }\n        var enabledProviders = _providerRegistrationHandler.getProvidersForLanguageId(languageId),\n            referencesProvider;\n\n        enabledProviders.some(function (item, index) {\n            if (item.provider.hasReferences()) {\n                referencesProvider = item.provider;\n                return true;\n            }\n        });\n        if (referencesProvider) {\n            CommandManager.get(Commands.CMD_FIND_ALL_REFERENCES).setEnabled(true);\n        }\n\n    }\n\n    MainViewManager.on(\"currentFileChange\", function (event, newFile, newPaneId, oldFile, oldPaneId) {\n        if (!newFile) {\n            CommandManager.get(Commands.CMD_FIND_ALL_REFERENCES).setEnabled(false);\n            return;\n        }\n\n        var newFilePath = newFile.fullPath,\n            newLanguage = LanguageManager.getLanguageForPath(newFilePath),\n            newLanguageId = newLanguage.getId();\n\n        if (newLanguage.isBinary()) {\n            CommandManager.get(Commands.CMD_FIND_ALL_REFERENCES).setEnabled(false);\n            return;\n        }\n\n        setMenuItemStateForLanguage(newLanguageId);\n\n        DocumentManager.getDocumentForPath(newFilePath)\n            .done(function (newDoc) {\n                newDoc.on(\"languageChanged.reference-in-files\", function () {\n                    var changedLanguageId = LanguageManager.getLanguageForPath(newDoc.file.fullPath).getId();\n                    setMenuItemStateForLanguage(changedLanguageId);\n                });\n            });\n\n        if (!oldFile) {\n            return;\n        }\n\n        var oldFilePath = oldFile.fullPath;\n        DocumentManager.getDocumentForPath(oldFilePath)\n            .done(function (oldDoc) {\n                oldDoc.off(\"languageChanged.reference-in-files\");\n            });\n    });\n\n    AppInit.htmlReady(function () {\n        _resultsView = new SearchResultsView(\n            searchModel,\n            \"reference-in-files-results\",\n            \"reference-in-files.results\",\n            \"reference\"\n        );\n        if(_resultsView) {\n            _resultsView\n                .on(\"close\", function () {\n                    _clearSearch();\n                })\n                .on(\"getNextPage\", function () {\n                    if (searchModel.hasResults()) {\n                        _resultsView.showNextPage();\n                    }\n                })\n                .on(\"getLastPage\", function () {\n                    if (searchModel.hasResults()) {\n                        _resultsView.showLastPage();\n                    }\n                });\n        }\n    });\n\n    // Initialize: register listeners\n    ProjectManager.on(\"beforeProjectClose\", function () { if (_resultsView) { _resultsView.close(); } });\n\n    CommandManager.register(Strings.FIND_ALL_REFERENCES, Commands.CMD_FIND_ALL_REFERENCES, _openReferencesPanel);\n    CommandManager.get(Commands.CMD_FIND_ALL_REFERENCES).setEnabled(false);\n\n    exports.registerFindReferencesProvider    = registerFindReferencesProvider;\n    exports.removeFindReferencesProvider      = removeFindReferencesProvider;\n    exports.setMenuItemStateForLanguage       = setMenuItemStateForLanguage;\n    exports.closeReferencesPanel              = closeReferencesPanel;\n});\n"],"file":"FindReferencesManager.js"}