{"version":3,"sources":["editor/Editor.js"],"names":["define","require","exports","module","CommandManager","Commands","CodeMirror","LanguageManager","EventDispatcher","PerfUtils","PreferencesManager","TextRange","TokenUtils","HTMLUtils","MainViewManager","_","IndentHelper","EditorPreferences","ChangeHelper","ErrorPopupHelper","InlineWidgetHelper","registeredGutters","cmOptions","init","CLOSE_BRACKETS","CLOSE_TAGS","DRAG_DROP","HIGHLIGHT_MATCHES","LINEWISE_COPY_CUT","SCROLL_PAST_END","SHOW_CURSOR_SELECT","SHOW_LINE_NUMBERS","SMART_INDENT","SPACE_UNITS","STYLE_ACTIVE_LINE","TAB_SIZE","USE_TAB_CHAR","WORD_WRAP","INDENT_LINE_COMMENT","INPUT_STYLE","LINE_NUMBER_GUTTER","LINE_NUMBER_GUTTER_PRIORITY","CODE_FOLDING_GUTTER_PRIORITY","editorOptions","Object","keys","_duringFocus","BOUNDARY_CHECK_NORMAL","BOUNDARY_IGNORE_TOP","BOUNDARY_BULLSEYE","_copyPos","pos","Pos","line","ch","_checkTopBoundary","options","_checkBottomBoundary","_buildPreferencesContext","fullPath","_buildContext","getLanguageForPath","getId","undefined","_instances","Editor","document","makeMasterEditor","container","range","self","this","isReadOnly","editable","push","addRef","jquery","get","$container","$","addClass","_visibleRange","startLine","endLine","_handleDocumentChange","bind","_handleDocumentDeleted","_handleDocumentLanguageChanged","_doWorkingSetSync","on","mode","_getModeFromDocument","_inlineWidgets","_inlineWidgetQueues","_hideMarks","_lastEditorWidth","_markTypesMap","_$messagePopover","_paneId","_hostEditor","codeMirrorKeyMap","Tab","_handleTabKey","Shift-Tab","Left","instance","_handleSoftTabNavigation","Right","Backspace","Delete","Esc","_instance","canConsumeEscapeKeyEvent","getSelections","length","clearSelection","hasSelection","removeAllInlineWidgets","Home","Cmd-Left","End","Cmd-Right","currentOptions","_currentOptions","zipObject","map","prefName","_getOption","_mouseHandlerOverride","_cm","_repeat","event","ctrlKey","metaKey","setTimeout","execute","NAVIGATE_JUMPTO_DEFINITION","addNew","altKey","toggleClass","Boolean","_codeMirror","autoCloseBrackets","autoCloseTags","coverGutterNextToScrollbar","continueComments","cursorScrollMargin","dragDrop","electricChars","configureMouse","extraKeys","highlightSelectionMatches","indentUnit","indentWithTabs","inputStyle","lineNumbers","lineWiseCopyCut","lineWrapping","matchBrackets","maxScanLineLength","maxScanLines","matchTags","bothTags","scrollPastEnd","showCursorWhenSelecting","smartIndent","styleActiveLine","tabSize","readOnly","_focused","_installEditorListeners","_renderGutters","editor","_handleCursorActivity","domEvent","_handleKeypressEvents","changeList","_handleEditorChange","_toggleMasterEditor","setOption","_duringSync","_resetText","getText","_updateHiddenLines","setCursorPos","_makeEditable","defineProperty","getScrollInfo","top","getRootElement","makeEventDispatcher","prototype","markDeprecated","addHelpers","markPaneId","paneId","_associateEditor","getInlineWidgetsBelowCursor","cursor","getCursorPos","getAllInlineWidgetsForLine","getFocusedInlineWidget","doc","isDirty","addToWorkingSet","file","destroy","trigger","remove","splice","indexOf","releaseRef","off","dispose","_masterEditor","_makeNonEditable","_disassociateEditor","forEach","inlineWidget","_removeInlineWidgetInternal","_updateStyleActiveLine","_handleWhitespaceForElectricChars","selections","lineStr","sel","getLine","end","test","setSelections","keyStr","String","fromCharCode","which","keyCode","getLanguage","getMode","selectAllNoScroll","cm","info","operation","scrollTo","left","execCommand","isTextSubset","mark","clear","_hideLines","lineCount","text","currentText","getValue","textLF","currentTextLF","replace","perfTimerName","markStart","cursorPos","scrollPos","getScrollPos","setValue","refresh","clearHistory","markClean","setScrollPos","x","y","addMeasurement","getFile","expandTabs","getCursor","getColOffset","getEndingCursorPos","lastLine","getRange","column","i","getTabSize","getCharIndexForColumn","lineNum","iCol","center","setCursor","centerOnCursor","setSize","width","height","getViewport","CENTERING_MARGIN","_normalizeRange","anchorPos","headPos","start","reversed","centerOptions","$scrollerElement","editorHeight","getScrollerElement","statusBarHeight","documentCursorPosition","cursorCoords","bottom","screenCursorPosition","Math","min","max","clientHeight","indexFromPos","posFromIndex","index","posWithinRange","endInclusive","somethingSelected","getSelection","primarySel","listSelections","result","anchor","head","primary","convertToLineSelections","defaults","expandEndAtStartOfLine","mergeAdjacent","combinedSelections","prevSel","each","newSel","cloneDeep","selectionForEdit","selectionsToTrack","getSelectedText","allSelections","coordsChar","coordinates","charCoords","getToken","precise","assign","token","getTokenAt","getNextToken","skipWhitespace","next","string","getPreviousToken","prev","execFn","MARK_OPTION_UNDERLINE_ERROR","className","MARK_OPTION_UNDERLINE_WARN","MARK_OPTION_UNDERLINE_INFO","MARK_OPTION_UNDERLINE_SPELLCHECK","MARK_OPTION_HYPERLINK_TEXT","MARK_OPTION_MATCHING_REFS","MARK_OPTION_RENAME_OUTLINE","startStyle","endStyle","clearWhenEmpty","inclusiveLeft","inclusiveRight","markText","markType","cursorFrom","cursorTo","newMark","markToken","setBookmark","findMarks","marks","filter","findMarksAt","getAllMarks","clearAllMarks","setSelection","origin","replaceSelection","replacement","select","replaceRange","from","to","primIndex","toggleOverwrite","state","selectWordAt","word","findWordAt","isLineVisible","coords","scrollInfo","getFirstVisibleLine","getLastVisibleLine","value","collapsed","totalHeight","scrollHeight","getWrapperElement","_getLineSpaceElement","children","adjustScrollPos","heightDelta","getTextHeight","defaultTextHeight","addInlineWidget","removeInlineWidget","removeAllInlineWidgetsForLine","getInlineWidgets","setInlineWidgetHeight","displayErrorMessageAtCursor","getVirtualScrollAreaTop","topPadding","offsetTop","scroller","offset","scrollTop","focus","hasFocus","getViewState","restoreViewState","viewState","selection","handleResize","focusedItem","window","activeElement","restoreFocus","contains","refreshAll","undo","redo","notifyVisibilityChange","show","onParentShown","setVisible","$el","css","isFullyVisible","is","getModeForRange","knownMixed","outerMode","startMode","getModeAt","endMode","name","getOption","getModeForSelection","sels","isMixed","tagInfo","getTagInfo","tokenType","position","ATTR_VALUE","attr","toLowerCase","hasMixedSel","some","rangeMode","getLanguageForSelection","getLanguageForMode","getModeForDocument","_updateOption","oldValue","newValue","_toggleLinePadding","registerGutter","unregisterGutter","updateLayout","forceRefresh","curRoot","curWidth","$editorHolder","editorAreaHt","parent","style","languageId","_filterByLanguages","gutter","languages","_sortByPriority","a","b","priority","_getName","gutters","rootElement","sort","removeClass","setGutterMarker","lineNumber","gutterName","marker","isGutterRegistered","console","warn","getGutterMarker","lineInfo","gutterMarkers","clearGutterMarker","clearGutter","getRegisteredGutters","languageIds","isNaN","gutterExists","forEveryEditor","error","setUseTabChar","context","set","getUseTabChar","setTabSize","setSpaceUnits","getSpaceUnits","setCloseBrackets","getCloseBrackets","setShowLineNumbers","getShowLineNumbers","setShowActiveLine","getShowActiveLine","setWordWrap","getWordWrap","setIndentLineComment","getIndentLineComment","callback","showLinePadding","$holders","$holder","EVENT_BEFORE_CHANGE","EVENT_CHANGE","EVENT_BEFORE_SELECTION_CHANGE","EVENT_CURSOR_ACTIVITY","EVENT_KEY_PRESS","EVENT_KEY_DOWN","EVENT_KEY_UP","EVENT_FOCUS","EVENT_BLUR","EVENT_UPDATE","EVENT_SCROLL","EVENT_VIEW_PORT_CHANGE","EVENT_LOST_CONTENT","EVENT_OPTION_CHANGE"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Editor is a 1-to-1 wrapper for a CodeMirror editor instance. It layers on Brackets-specific\n * functionality and provides APIs that cleanly pass through the bits of CodeMirror that the rest\n * of our codebase may want to interact with. An Editor is always backed by a Document, and stays\n * in sync with its content; because Editor keeps the Document alive, it's important to always\n * destroy() an Editor that's going away so it can release its Document ref.\n *\n * For now, there's a distinction between the \"master\" Editor for a Document - which secretly acts\n * as the Document's internal model of the text state - and the multitude of secondary Editors\n * which, via Document, sync their changes to and from that master.\n *\n * For now, direct access to the underlying CodeMirror object is still possible via `_codeMirror` --\n * but this is considered deprecated and may go away.\n *\n * The Editor object dispatches the following events: (available as `Editor.EVENT_*` constants. see below)\n *    - keydown, keypress, keyup -- When any key event happens in the editor (whether it changes the\n *      text or not). Handlers are passed `(BracketsEvent, Editor, KeyboardEvent)`. The 3nd arg is the\n *      raw DOM event. Note: most listeners will only want to listen for \"keypress\".\n *    - change - Triggered with an array of change objects. Parameters: (editor, changeList)\n *    - beforeChange - (self, changeObj)\n *    - beforeSelectionChange - (selectionObj)\n *    - focus - Fired when an editor is focused\n *    - blur - Fired when an editor loses focused\n *    - update - Will be fired whenever Editor updates its DOM display.\n *    - cursorActivity -- When the user moves the cursor or changes the selection, or an edit occurs.\n *      Note: do not listen to this in order to be generally informed of edits--listen to the\n *      \"change\" event on Document instead.\n *    - scroll -- When the editor is scrolled, either by user action or programmatically.\n *    - viewportChange - (from: number, to: number) Fires whenever the view port of the editor changes\n *      (due to scrolling, editing, or any other factor). The from and to arguments give the new start\n *      and end of the viewport. This is combination with `editorInstance.getViewPort()` can be used to\n *      selectively redraw visual elements in code like syntax analyze only parts of code instead\n *      of the full code everytime.\n *    - lostContent -- When the backing Document changes in such a way that this Editor is no longer\n *      able to display accurate text. This occurs if the Document's file is deleted, or in certain\n *      Document->editor syncing edge cases that we do not yet support (the latter cause will\n *      eventually go away).\n *    - optionChange -- Triggered when an option for the editor is changed. The 2nd arg to the listener\n *      is a string containing the editor option that is changing. The 3rd arg, which can be any\n *      data type, is the new value for the editor option.\n *    - beforeDestroy - Triggered before the object is about to dispose of all its internal state data\n *      so that listeners can cache things like scroll pos, etc...\n *\n * The Editor also dispatches \"change\" events internally, but you should listen for those on\n * Documents, not Editors.\n *\n * To listen for events, do something like this: (see EventDispatcher for details on this pattern)\n *     `editorInstance.on(\"eventname\", handler);`\n */\ndefine(function (require, exports, module) {\n\n\n    let CommandManager     = require(\"command/CommandManager\"),\n        Commands           = require(\"command/Commands\"),\n        CodeMirror         = require(\"thirdparty/CodeMirror/lib/codemirror\"),\n        LanguageManager    = require(\"language/LanguageManager\"),\n        EventDispatcher    = require(\"utils/EventDispatcher\"),\n        PerfUtils          = require(\"utils/PerfUtils\"),\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        TextRange          = require(\"document/TextRange\").TextRange,\n        TokenUtils         = require(\"utils/TokenUtils\"),\n        HTMLUtils          = require(\"language/HTMLUtils\"),\n        MainViewManager    = require(\"view/MainViewManager\"),\n        _                  = require(\"thirdparty/lodash\");\n\n    /** Editor helpers */\n\n    let IndentHelper = require(\"./EditorHelper/IndentHelper\"),\n        EditorPreferences = require(\"./EditorHelper/EditorPreferences\"),\n        ChangeHelper = require(\"./EditorHelper/ChangeHelper\"),\n        ErrorPopupHelper = require(\"./EditorHelper/ErrorPopupHelper\"),\n        InlineWidgetHelper = require(\"./EditorHelper/InlineWidgetHelper\");\n\n    /** Editor preferences */\n\n    /**\n     * A list of gutter name and priorities currently registered for editors.\n     * The line number gutter is defined as { name: LINE_NUMBER_GUTTER, priority: 100 }\n     * @type {Array.<{name: string, priority: number, languageIds: Array}}\n     */\n    let registeredGutters = [];\n\n    let cmOptions         = {};\n\n    EditorPreferences.init(cmOptions);\n\n    const CLOSE_BRACKETS    = EditorPreferences.CLOSE_BRACKETS,\n        CLOSE_TAGS          = EditorPreferences.CLOSE_TAGS,\n        DRAG_DROP           = EditorPreferences.DRAG_DROP,\n        HIGHLIGHT_MATCHES   = EditorPreferences.HIGHLIGHT_MATCHES,\n        LINEWISE_COPY_CUT   = EditorPreferences.LINEWISE_COPY_CUT,\n        SCROLL_PAST_END     = EditorPreferences.SCROLL_PAST_END,\n        SHOW_CURSOR_SELECT  = EditorPreferences.SHOW_CURSOR_SELECT,\n        SHOW_LINE_NUMBERS   = EditorPreferences.SHOW_LINE_NUMBERS,\n        SMART_INDENT        = EditorPreferences.SMART_INDENT,\n        SPACE_UNITS         = EditorPreferences.SPACE_UNITS,\n        STYLE_ACTIVE_LINE   = EditorPreferences.STYLE_ACTIVE_LINE,\n        TAB_SIZE            = EditorPreferences.TAB_SIZE,\n        USE_TAB_CHAR        = EditorPreferences.USE_TAB_CHAR,\n        WORD_WRAP           = EditorPreferences.WORD_WRAP,\n        INDENT_LINE_COMMENT   = EditorPreferences.INDENT_LINE_COMMENT,\n        INPUT_STYLE         = EditorPreferences.INPUT_STYLE;\n\n    const LINE_NUMBER_GUTTER = EditorPreferences.LINE_NUMBER_GUTTER,\n        LINE_NUMBER_GUTTER_PRIORITY     = EditorPreferences.LINE_NUMBER_GUTTER_PRIORITY,\n        CODE_FOLDING_GUTTER_PRIORITY    = EditorPreferences.CODE_FOLDING_GUTTER_PRIORITY;\n\n    let editorOptions = Object.keys(cmOptions);\n\n    /** Editor preferences */\n\n    /**\n     * Guard flag to prevent focus() reentrancy (via blur handlers), even across Editors\n     * @type {boolean}\n     */\n    var _duringFocus = false;\n\n    /**\n     * Constant: ignore upper boundary when centering text\n     * Constant: bulls-eye = strictly centre always\n     * @type {number}\n     */\n    var BOUNDARY_CHECK_NORMAL   = 0,\n        BOUNDARY_IGNORE_TOP     = 1,\n        BOUNDARY_BULLSEYE      = 2;\n\n    /**\n     * @private\n     * Create a copy of the given CodeMirror position\n     * @param {!CodeMirror.Pos} pos\n     * @return {CodeMirror.Pos}\n     */\n    function _copyPos(pos) {\n        return new CodeMirror.Pos(pos.line, pos.ch);\n    }\n\n    /**\n     * Helper functions to check options.\n     * @param {number} options BOUNDARY_CHECK_NORMAL or BOUNDARY_IGNORE_TOP\n     */\n    function _checkTopBoundary(options) {\n        return (options !== BOUNDARY_IGNORE_TOP);\n    }\n\n    function _checkBottomBoundary(options) {\n        return true;\n    }\n\n    /**\n     * Helper function to build preferences context based on the full path of\n     * the file.\n     *\n     * @param {string} fullPath Full path of the file\n     *\n     * @return {*} A context for the specified file name\n     */\n    function _buildPreferencesContext(fullPath) {\n        return PreferencesManager._buildContext(fullPath,\n            fullPath ? LanguageManager.getLanguageForPath(fullPath).getId() : undefined);\n    }\n\n    /**\n     * List of all current (non-destroy()ed) Editor instances. Needed when changing global preferences\n     * that affect all editors, e.g. tabbing or color scheme settings.\n     * @type {Array.<Editor>}\n     */\n    var _instances = [];\n\n    /**\n     * Creates a new CodeMirror editor instance bound to the given Document. The Document need not have\n     * a \"master\" Editor realized yet, even if makeMasterEditor is false; in that case, the first time\n     * an edit occurs we will automatically ask EditorManager to create a \"master\" editor to render the\n     * Document modifiable.\n     *\n     * ALWAYS call destroy() when you are done with an Editor - otherwise it will leak a Document ref.\n     *\n     * @constructor\n     *\n     * @param {!Document} document\n     * @param {!boolean} makeMasterEditor  If true, this Editor will set itself as the (secret) \"master\"\n     *          Editor for the Document. If false, this Editor will attach to the Document as a \"slave\"/\n     *          secondary editor.\n     * @param {!jQueryObject|DomNode} container  Container to add the editor to.\n     * @param {{startLine: number, endLine: number}=} range If specified, range of lines within the document\n     *          to display in this editor. Inclusive.\n     * @param {!Object} options If specified, contains editor options that can be passed to CodeMirror\n     */\n    function Editor(document, makeMasterEditor, container, range, options) {\n        var self = this;\n\n        var isReadOnly = (options && options.isReadOnly) || !document.editable;\n\n        _instances.push(this);\n\n        // Attach to document: add ref & handlers\n        this.document = document;\n        document.addRef();\n\n        if (container.jquery) {\n            // CodeMirror wants a DOM element, not a jQuery wrapper\n            container = container.get(0);\n        }\n\n        let $container = $(container);\n        $container.addClass(\"editor-holder\");\n\n        if (range) {    // attach this first: want range updated before we process a change\n            this._visibleRange = new TextRange(document, range.startLine, range.endLine);\n        }\n\n        // store this-bound version of listeners so we can remove them later\n        this._handleDocumentChange = this._handleDocumentChange.bind(this);\n        this._handleDocumentDeleted = this._handleDocumentDeleted.bind(this);\n        this._handleDocumentLanguageChanged = this._handleDocumentLanguageChanged.bind(this);\n        this._doWorkingSetSync = this._doWorkingSetSync.bind(this);\n        document.on(\"change\", this._handleDocumentChange);\n        document.on(\"deleted\", this._handleDocumentDeleted);\n        document.on(\"languageChanged\", this._handleDocumentLanguageChanged);\n        // To sync working sets if the view is for same doc across panes\n        document.on(\"_dirtyFlagChange\", this._doWorkingSetSync);\n\n        var mode = this._getModeFromDocument();\n\n        // (if makeMasterEditor, we attach the Doc back to ourselves below once we're fully initialized)\n\n        this._inlineWidgets = [];\n        this._inlineWidgetQueues = {};\n        this._hideMarks = [];\n        this._lastEditorWidth = null;\n\n        this._markTypesMap = {};\n\n        this._$messagePopover = null;\n\n        // To track which pane the editor is being attached to if it's a full editor\n        this._paneId = null;\n\n        // To track the parent editor ( host editor at that time of creation) of an inline editor\n        this._hostEditor = null;\n\n        // Editor supplies some standard keyboard behavior extensions of its own\n        var codeMirrorKeyMap = {\n            \"Tab\": function () { self._handleTabKey(); },\n            \"Shift-Tab\": \"indentLess\",\n\n            \"Left\": function (instance) {\n                self._handleSoftTabNavigation(-1, \"moveH\");\n            },\n            \"Right\": function (instance) {\n                self._handleSoftTabNavigation(1, \"moveH\");\n            },\n            \"Backspace\": function (instance) {\n                self._handleSoftTabNavigation(-1, \"deleteH\");\n            },\n            \"Delete\": function (instance) {\n                self._handleSoftTabNavigation(1, \"deleteH\");\n            },\n            \"Esc\": function (_instance) {\n                if(!self.canConsumeEscapeKeyEvent()){\n                    return;\n                }\n                if (self.getSelections().length > 1) { // multi cursor\n                    self.clearSelection();\n                } else if(self.hasSelection()){\n                    self.clearSelection();\n                }else {\n                    self.removeAllInlineWidgets();\n                }\n            },\n            \"Home\": \"goLineLeftSmart\",\n            \"Cmd-Left\": \"goLineLeftSmart\",\n            \"End\": \"goLineRight\",\n            \"Cmd-Right\": \"goLineRight\"\n        };\n\n        var currentOptions = this._currentOptions = _.zipObject(\n            editorOptions,\n            _.map(editorOptions, function (prefName) {\n                return self._getOption(prefName);\n            })\n        );\n\n        //cm: CodeMirror, repeat: \"single\" | \"double\" | \"triple\", event: Event\n        // The function is called when the left mouse button is pressed in codemirror\n        function _mouseHandlerOverride(_cm, _repeat, event) {\n            if(event.ctrlKey || event.metaKey){\n                setTimeout(()=>{\n                    CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION);\n                }, 100);\n            }\n            return {\n                addNew: event.altKey // alt key will init multi cursor instead of ctrl-key\n            };\n        }\n\n        // When panes are created *after* the showLineNumbers option has been turned off\n        //  we need to apply the show-line-padding class or the text will be juxtaposed\n        //  to the edge of the editor which makes it not easy to read.  The code below to handle\n        //  that the option change only applies the class to panes that have already been created\n        // This line ensures that the class is applied to any editor created after the fact\n        $container.toggleClass(\"show-line-padding\", Boolean(!this._getOption(\"showLineNumbers\")));\n\n        // Create the CodeMirror instance\n        // (note: CodeMirror doesn't actually require using 'new', but jslint complains without it)\n        this._codeMirror = new CodeMirror(container, {\n            autoCloseBrackets: currentOptions[CLOSE_BRACKETS],\n            autoCloseTags: currentOptions[CLOSE_TAGS],\n            coverGutterNextToScrollbar: true,\n            continueComments: true,\n            cursorScrollMargin: 3,\n            dragDrop: currentOptions[DRAG_DROP],\n            electricChars: true,\n            configureMouse: _mouseHandlerOverride,\n            extraKeys: codeMirrorKeyMap,\n            highlightSelectionMatches: currentOptions[HIGHLIGHT_MATCHES],\n            indentUnit: currentOptions[USE_TAB_CHAR] ? currentOptions[TAB_SIZE] : currentOptions[SPACE_UNITS],\n            indentWithTabs: currentOptions[USE_TAB_CHAR],\n            inputStyle: currentOptions[INPUT_STYLE],\n            lineNumbers: currentOptions[SHOW_LINE_NUMBERS],\n            lineWiseCopyCut: currentOptions[LINEWISE_COPY_CUT],\n            lineWrapping: currentOptions[WORD_WRAP],\n            matchBrackets: { maxScanLineLength: 50000, maxScanLines: 1000 },\n            matchTags: { bothTags: true },\n            scrollPastEnd: !range && currentOptions[SCROLL_PAST_END],\n            showCursorWhenSelecting: currentOptions[SHOW_CURSOR_SELECT],\n            smartIndent: currentOptions[SMART_INDENT],\n            styleActiveLine: currentOptions[STYLE_ACTIVE_LINE],\n            tabSize: currentOptions[TAB_SIZE],\n            readOnly: isReadOnly\n        });\n\n        // Can't get CodeMirror's focused state without searching for\n        // CodeMirror-focused. Instead, track focus via onFocus and onBlur\n        // options and track state with this._focused\n        this._focused = false;\n\n        this._installEditorListeners();\n\n        this._renderGutters();\n\n        this.on(\"cursorActivity\", function (event, editor) {\n            self._handleCursorActivity(event);\n        });\n        this.on(\"keypress\", function (event, editor, domEvent) {\n            self._handleKeypressEvents(domEvent);\n        });\n        this.on(\"change\", function (event, editor, changeList) {\n            self._handleEditorChange(changeList);\n        });\n        this.on(\"focus\", function (event, editor) {\n            if (self._hostEditor) {\n                // Mark the host editor as the master editor for the hosting document\n                self._hostEditor.document._toggleMasterEditor(self._hostEditor);\n            } else {\n                // Set this full editor as master editor for the document\n                self.document._toggleMasterEditor(self);\n            }\n        });\n\n        // Set code-coloring mode BEFORE populating with text, to avoid a flash of uncolored text\n        this._codeMirror.setOption(\"mode\", mode);\n\n        // Initially populate with text. This will send a spurious change event, so need to make\n        // sure this is understood as a 'sync from document' case, not a genuine edit\n        this._duringSync = true;\n        this._resetText(document.getText());\n        this._duringSync = false;\n\n        if (range) {\n            this._updateHiddenLines();\n            this.setCursorPos(range.startLine, 0);\n        }\n\n        // Now that we're fully initialized, we can point the document back at us if needed\n        if (makeMasterEditor) {\n            document._makeEditable(this);\n        }\n\n        // Add scrollTop property to this object for the scroll shadow code to use\n        Object.defineProperty(this, \"scrollTop\", {\n            get: function () {\n                return this._codeMirror.getScrollInfo().top;\n            }\n        });\n\n        // Add an $el getter for Pane Views\n        Object.defineProperty(this,  \"$el\", {\n            get: function () {\n                return $(this.getRootElement());\n            }\n        });\n    }\n\n    EventDispatcher.makeEventDispatcher(Editor.prototype);\n    EventDispatcher.markDeprecated(Editor.prototype, \"keyEvent\", \"'keydown/press/up'\");\n\n    IndentHelper.addHelpers(Editor);\n    ChangeHelper.addHelpers(Editor);\n    InlineWidgetHelper.addHelpers(Editor);\n\n    Editor.prototype.markPaneId = function (paneId) {\n        this._paneId = paneId;\n\n        // Also add this to the pool of full editors\n        this.document._associateEditor(this);\n\n        // In case this Editor is initialized not as the first full editor for the document\n        // and the document is already dirty and present in another working set, make sure\n        // to add this documents to the new panes working set.\n        this._doWorkingSetSync(null, this.document);\n    };\n\n    /**\n     * Gets the inline widgets below the current cursor position or null.\n     * @return {boolean}\n     */\n    Editor.prototype.getInlineWidgetsBelowCursor = function () {\n        let self = this;\n        let cursor = self.getCursorPos();\n        let line = cursor.line;\n        return  self.getAllInlineWidgetsForLine(line);\n    };\n\n    /**\n     * returns true if the editor can do something an escape key event. Eg. Disable multi cursor escape\n     */\n    Editor.prototype.canConsumeEscapeKeyEvent = function () {\n        let self = this;\n        return (self.getSelections().length > 1) // multi cursor should go away on escape\n            || (self.hasSelection()) // selection should go away on escape\n            || self.getInlineWidgetsBelowCursor() // inline widget is below cursor\n            || self.getFocusedInlineWidget(); // inline widget\n    };\n\n    Editor.prototype._doWorkingSetSync = function (event, doc) {\n        if (doc === this.document && this._paneId && this.document.isDirty) {\n            MainViewManager.addToWorkingSet(this._paneId, this.document.file, -1, false);\n        }\n    };\n\n    /**\n     * Removes this editor from the DOM and detaches from the Document. If this is the \"master\"\n     * Editor that is secretly providing the Document's backing state, then the Document reverts to\n     * a read-only string-backed mode.\n     */\n    Editor.prototype.destroy = function () {\n        this.trigger(\"beforeDestroy\", this);\n\n        // CodeMirror docs for getWrapperElement() say all you have to do is \"Remove this from your\n        // tree to delete an editor instance.\"\n        $(this.getRootElement()).remove();\n\n        _instances.splice(_instances.indexOf(this), 1);\n\n        // Disconnect from Document\n        this.document.releaseRef();\n        this.document.off(\"change\", this._handleDocumentChange);\n        this.document.off(\"deleted\", this._handleDocumentDeleted);\n        this.document.off(\"languageChanged\", this._handleDocumentLanguageChanged);\n        this.document.off(\"_dirtyFlagChange\", this._doWorkingSetSync);\n\n        if (this._visibleRange) {   // TextRange also refs the Document\n            this._visibleRange.dispose();\n        }\n\n        // If we're the Document's master editor, disconnecting from it has special meaning\n        if (this.document._masterEditor === this) {\n            this.document._makeNonEditable();\n        } else {\n            this.document._disassociateEditor(this);\n        }\n\n        // Destroying us destroys any inline widgets we're hosting. Make sure their closeCallbacks\n        // run, at least, since they may also need to release Document refs\n        var self = this;\n        this._inlineWidgets.forEach(function (inlineWidget) {\n            self._removeInlineWidgetInternal(inlineWidget);\n        });\n    };\n\n    /**\n     * @private\n     * Handle any cursor movement in editor, including selecting and unselecting text.\n     * @param {!Event} event\n     */\n    Editor.prototype._handleCursorActivity = function (event) {\n        this._updateStyleActiveLine();\n    };\n\n    /**\n     * @private\n     * Removes any whitespace after one of ]{}) to prevent trailing whitespace when auto-indenting\n     */\n    Editor.prototype._handleWhitespaceForElectricChars = function () {\n        var self        = this,\n            instance    = this._codeMirror,\n            selections,\n            lineStr;\n\n        selections = this.getSelections().map(function (sel) {\n            lineStr = instance.getLine(sel.end.line);\n\n            if (lineStr && !/\\S/.test(lineStr)) {\n                // if the line is all whitespace, move the cursor to the end of the line\n                // before indenting so that embedded whitespace such as indents are not\n                // orphaned to the right of the electric char being inserted\n                sel.end.ch = self.document.getLine(sel.end.line).length;\n            }\n            return sel;\n        });\n        this.setSelections(selections);\n    };\n\n    /**\n     * @private\n     * Handle CodeMirror key events.\n     * @param {!Event} event\n     */\n    Editor.prototype._handleKeypressEvents = function (event) {\n        var keyStr = String.fromCharCode(event.which || event.keyCode);\n\n        if (/[\\]\\{\\}\\)]/.test(keyStr)) {\n            this._handleWhitespaceForElectricChars();\n        }\n    };\n\n    /**\n     * Determine the mode to use from the document's language\n     * Uses \"text/plain\" if the language does not define a mode\n     * @return {string} The mode to use\n     */\n    Editor.prototype._getModeFromDocument = function () {\n        // We'd like undefined/null/\"\" to mean plain text mode. CodeMirror defaults to plaintext for any\n        // unrecognized mode, but it complains on the console in that fallback case: so, convert\n        // here so we're always explicit, avoiding console noise.\n        return this.document.getLanguage().getMode() || \"text/plain\";\n    };\n\n\n    /**\n     * Selects all text and maintains the current scroll position.\n     */\n    Editor.prototype.selectAllNoScroll = function () {\n        var cm = this._codeMirror,\n            info = this._codeMirror.getScrollInfo();\n\n        // Note that we do not have to check for the visible range here. This\n        // concern is handled internally by code mirror.\n        cm.operation(function () {\n            cm.scrollTo(info.left, info.top);\n            cm.execCommand(\"selectAll\");\n        });\n    };\n\n    /**\n     * @return {boolean} True if editor is not showing the entire text of the document (i.e. an inline editor)\n     */\n    Editor.prototype.isTextSubset = function () {\n        return Boolean(this._visibleRange);\n    };\n\n    /**\n     * Ensures that the lines that are actually hidden in the inline editor correspond to\n     * the desired visible range.\n     */\n    Editor.prototype._updateHiddenLines = function () {\n        if (this._visibleRange) {\n            var cm = this._codeMirror,\n                self = this;\n            cm.operation(function () {\n                self._hideMarks.forEach(function (mark) {\n                    if (mark) {\n                        mark.clear();\n                    }\n                });\n                self._hideMarks = [];\n                self._hideMarks.push(self._hideLines(0, self._visibleRange.startLine));\n                self._hideMarks.push(self._hideLines(self._visibleRange.endLine + 1, self.lineCount()));\n            });\n        }\n    };\n\n    /**\n     * Sets the contents of the editor, clears the undo/redo history and marks the document clean. Dispatches a change event.\n     * Semi-private: only Document should call this.\n     * @param {!string} text\n     */\n    Editor.prototype._resetText = function (text) {\n        var currentText = this._codeMirror.getValue();\n\n        // compare with ignoring line-endings, issue #11826\n        var textLF = text ? text.replace(/(\\r\\n|\\r|\\n)/g, \"\\n\") : null;\n        var currentTextLF = currentText ? currentText.replace(/(\\r\\n|\\r|\\n)/g, \"\\n\") : null;\n        if (textLF === currentTextLF) {\n            // there's nothing to reset\n            return;\n        }\n\n        var perfTimerName = PerfUtils.markStart(\"Editor._resetText()\\t\" + (!this.document || this.document.file.fullPath));\n\n        var cursorPos = this.getCursorPos(),\n            scrollPos = this.getScrollPos();\n\n        // This *will* fire a change event, but we clear the undo immediately afterward\n        this._codeMirror.setValue(text);\n        this._codeMirror.refresh();\n\n        // Make sure we can't undo back to the empty state before setValue(), and mark\n        // the document clean.\n        this._codeMirror.clearHistory();\n        this._codeMirror.markClean();\n\n        // restore cursor and scroll positions\n        this.setCursorPos(cursorPos);\n        this.setScrollPos(scrollPos.x, scrollPos.y);\n\n        PerfUtils.addMeasurement(perfTimerName);\n    };\n\n   /**\n    * Gets the file associated with this editor\n    * This is a required Pane-View interface method\n    * @return {!File} the file associated with this editor\n    */\n    Editor.prototype.getFile = function () {\n        return this.document.file;\n    };\n\n    /**\n     * Gets the current cursor position within the editor.\n     *\n     * Cursor positions can be converted to index(0 based character offsets in editor text string)\n     * using `editor.indexFromPos` API.\n     * @param {boolean} [expandTabs]  If true, return the actual visual column number instead of the character offset in\n     *      the \"ch\" property.\n     * @param {string} [which] Optional string indicating which end of the\n     *  selection to return. It may be \"start\", \"end\", \"head\" (the side of the\n     *  selection that moves when you press shift+arrow), or \"anchor\" (the\n     *  fixed side of the selection). Omitting the argument is the same as\n     *  passing \"head\". A {line, ch} object will be returned.)\n     * @return {{line:number, ch:number}}\n     */\n    Editor.prototype.getCursorPos = function (expandTabs, which) {\n        // Translate \"start\" and \"end\" to the official CM names (it actually\n        // supports them as-is, but that isn't documented and we don't want to\n        // rely on it).\n        if (which === \"start\") {\n            which = \"from\";\n        } else if (which === \"end\") {\n            which = \"to\";\n        }\n        var cursor = _copyPos(this._codeMirror.getCursor(which));\n\n        if (expandTabs) {\n            cursor.ch = this.getColOffset(cursor);\n        }\n        return cursor;\n    };\n\n    /**\n     * Gets the cursor position of the last charected in the editor.\n     * @param {boolean} [expandTabs]  If true, return the actual visual column number instead of the character offset in\n     *      the \"ch\" property.\n     * @return {{line:number, ch:number}}\n     */\n    Editor.prototype.getEndingCursorPos = function (expandTabs) {\n        let lastLine = this._codeMirror.lastLine();\n        let cursor = {\n            line: lastLine,\n            ch: this._codeMirror.getLine(lastLine).length\n        };\n\n        if (expandTabs) {\n            cursor.ch = this.getColOffset(cursor);\n        }\n        return cursor;\n    };\n\n    /**\n     * Returns the display column (zero-based) for a given string-based pos. Differs from pos.ch only\n     * when the line contains preceding \\t chars. Result depends on the current tab size setting.\n     * @param {!{line:number, ch:number}} pos\n     * @return {number}\n     */\n    Editor.prototype.getColOffset = function (pos) {\n        var line    = this._codeMirror.getRange({line: pos.line, ch: 0}, pos),\n            tabSize = null,\n            column  = 0,\n            i;\n\n        for (i = 0; i < line.length; i++) {\n            if (line[i] === '\\t') {\n                if (tabSize === null) {\n                    tabSize = Editor.getTabSize();\n                }\n                if (tabSize > 0) {\n                    column += (tabSize - (column % tabSize));\n                }\n            } else {\n                column++;\n            }\n        }\n        return column;\n    };\n\n    /**\n     * Returns the string-based pos for a given display column (zero-based) in given line. Differs from column\n     * only when the line contains preceding \\t chars. Result depends on the current tab size setting.\n     * @param {number} lineNum Line number\n     * @param {number} column Display column number\n     * @return {number}\n     */\n    Editor.prototype.getCharIndexForColumn = function (lineNum, column) {\n        var line    = this._codeMirror.getLine(lineNum),\n            tabSize = null,\n            iCol    = 0,\n            i;\n\n        for (i = 0; iCol < column; i++) {\n            if (line[i] === '\\t') {\n                if (tabSize === null) {\n                    tabSize = Editor.getTabSize();\n                }\n                if (tabSize > 0) {\n                    iCol += (tabSize - (iCol % tabSize));\n                }\n            } else {\n                iCol++;\n            }\n        }\n        return i;\n    };\n\n    /**\n     * Sets the cursor position within the editor. Removes any selection.\n     * @param {number} line  The 0 based line number.\n     * @param {number} ch  The 0 based character position; treated as 0 if unspecified.\n     * @param {boolean=} center  True if the view should be centered on the new cursor position.\n     * @param {boolean=} expandTabs  If true, use the actual visual column number instead of the character offset as\n     *      the \"ch\" parameter.\n     */\n    Editor.prototype.setCursorPos = function (line, ch, center, expandTabs) {\n        if (expandTabs) {\n            ch = this.getColOffset({line: line, ch: ch});\n        }\n        this._codeMirror.setCursor(line, ch);\n        if (center) {\n            this.centerOnCursor();\n        }\n    };\n\n    /**\n     * Set the editor size in pixels or percentage\n     * @param {(number|string)} width\n     * @param {(number|string)} height\n     */\n    Editor.prototype.setSize = function (width, height) {\n        this._codeMirror.setSize(width, height);\n    };\n\n\n    /**\n     * Returns a {from, to} object indicating the start (inclusive) and end (exclusive) of the currently rendered\n     * part of the document. In big documents, when most content is scrolled out of view, Editor will only render\n     * the visible part, and a margin around it. See also the `viewportChange` event fired on the editor.\n     *\n     * This is combination with `viewportChange` event can be used to selectively redraw visual elements in code\n     * like syntax analyze only parts of code instead of the full code everytime.\n     * @return {{from: number, to: number}}\n     */\n    Editor.prototype.getViewport = function () {\n        return this._codeMirror.getViewport();\n    };\n\n    /** @const */\n    var CENTERING_MARGIN = 0.15;\n\n    /**\n     * Scrolls the editor viewport to vertically center the line with the cursor,\n     * but only if the cursor is currently near the edges of the viewport or\n     * entirely outside the viewport.\n     *\n     * This does not alter the horizontal scroll position.\n     *\n     * @param {number} centerOptions Option value, or 0 for no options; one of the BOUNDARY_* constants above.\n     */\n    Editor.prototype.centerOnCursor = function (centerOptions) {\n        let $scrollerElement = $(this.getScrollerElement());\n        let editorHeight = $scrollerElement.height();\n\n        // we need to make adjustments for the statusbar's padding on the bottom and the menu bar on top.\n        let statusBarHeight = $(\"#status-bar\").height();\n\n        let documentCursorPosition = this._codeMirror.cursorCoords(null, \"local\").bottom;\n        let screenCursorPosition = this._codeMirror.cursorCoords(null, \"page\").bottom;\n\n        if(centerOptions === BOUNDARY_BULLSEYE){\n            let pos = documentCursorPosition - editorHeight / 2 + statusBarHeight;\n            this.setScrollPos(null, pos);\n            return;\n        }\n        // If the cursor is already reasonably centered, we won't\n        // make any change. \"Reasonably centered\" is defined as\n        // not being within CENTERING_MARGIN of the top or bottom\n        // of the editor (where CENTERING_MARGIN is a percentage\n        // of the editor height).\n        // For finding the first item (i.e. find while typing), do\n        // not center if hit is in first half of screen because this\n        // appears to be an unnecesary scroll.\n        if ((_checkTopBoundary(centerOptions) && (screenCursorPosition < editorHeight * CENTERING_MARGIN)) ||\n                (_checkBottomBoundary(centerOptions) && (screenCursorPosition > editorHeight * (1 - CENTERING_MARGIN)))) {\n\n            var pos = documentCursorPosition - editorHeight / 2 + statusBarHeight;\n            var info = this._codeMirror.getScrollInfo();\n            pos = Math.min(Math.max(pos, 0), (info.height - info.clientHeight));\n            this.setScrollPos(null, pos);\n        }\n    };\n\n    /**\n     * Given a position, returns its index within the text (assuming \\n newlines)\n     * @param {{line:number, ch:number}} cursorPos\n     * @return {number}\n     */\n    Editor.prototype.indexFromPos = function (cursorPos) {\n        return this._codeMirror.indexFromPos(cursorPos);\n    };\n\n    /**\n     * Given a position, returns its index within the text (assuming \\n newlines)\n     * @param {number} index\n     * @return {{line:number, ch:number}}\n     */\n    Editor.prototype.posFromIndex = function (index) {\n        return this._codeMirror.posFromIndex(index);\n    };\n\n    /**\n     * Returns true if pos is between start and end (INclusive at start; EXclusive at end by default,\n     * but overridable via the endInclusive flag).\n     * @param {{line:number, ch:number}} pos\n     * @param {{line:number, ch:number}} start\n     * @param {{line:number, ch:number}} end\n     * @param {boolean} endInclusive\n     *\n     */\n    Editor.prototype.posWithinRange = function (pos, start, end, endInclusive) {\n        if (start.line <= pos.line && end.line >= pos.line) {\n            if (endInclusive) {\n                return (start.line < pos.line || start.ch <= pos.ch) &&  // inclusive\n                    (end.line > pos.line   || end.ch >= pos.ch);      // inclusive\n            }\n            return (start.line < pos.line || start.ch <= pos.ch) &&  // inclusive\n                    (end.line > pos.line   || end.ch > pos.ch);       // exclusive\n\n\n        }\n        return false;\n    };\n\n    /**\n     * @return {boolean} True if there's a text selection; false if there's just an insertion point\n     */\n    Editor.prototype.hasSelection = function () {\n        return this._codeMirror.somethingSelected();\n    };\n\n    /**\n     * @private\n     * Takes an anchor/head pair and returns a start/end pair where the start is guaranteed to be <= end, and a \"reversed\" flag indicating\n     * if the head is before the anchor.\n     * @param {!{line: number, ch: number}} anchorPos\n     * @param {!{line: number, ch: number}} headPos\n     * @return {!{start:{line:number, ch:number}, end:{line:number, ch:number}}, reversed:boolean} the normalized range with start <= end\n     */\n    function _normalizeRange(anchorPos, headPos) {\n        if (headPos.line < anchorPos.line || (headPos.line === anchorPos.line && headPos.ch < anchorPos.ch)) {\n            return {start: _copyPos(headPos), end: _copyPos(anchorPos), reversed: true};\n        }\n        return {start: _copyPos(anchorPos), end: _copyPos(headPos), reversed: false};\n\n    }\n\n    /**\n     * Gets the current selection; if there is more than one selection, returns the primary selection\n     * (generally the last one made). Start is inclusive, end is exclusive. If there is no selection,\n     * returns the current cursor position as both the start and end of the range (i.e. a selection\n     * of length zero). If `reversed` is set, then the head of the selection (the end of the selection\n     * that would be changed if the user extended the selection) is before the anchor.\n     * @return {{start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean}}\n     */\n    Editor.prototype.getSelection = function () {\n        return _normalizeRange(this.getCursorPos(false, \"anchor\"), this.getCursorPos(false, \"head\"));\n    };\n\n    /**\n     * Returns an array of current selections, nonoverlapping and sorted in document order.\n     * Each selection is a start/end pair, with the start guaranteed to come before the end.\n     * Cursors are represented as a range whose start is equal to the end.\n     * If `reversed` is set, then the head of the selection\n     * (the end of the selection that would be changed if the user extended the selection)\n     * is before the anchor.\n     * If `primary` is set, then that selection is the primary selection.\n     * @return {Array.<{start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean, primary:boolean}>}\n     */\n    Editor.prototype.getSelections = function () {\n        var primarySel = this.getSelection();\n        return _.map(this._codeMirror.listSelections(), function (sel) {\n            var result = _normalizeRange(sel.anchor, sel.head);\n            if (result.start.line === primarySel.start.line && result.start.ch === primarySel.start.ch &&\n                    result.end.line === primarySel.end.line && result.end.ch === primarySel.end.ch) {\n                result.primary = true;\n            } else {\n                result.primary = false;\n            }\n            return result;\n        });\n    };\n\n    /**\n     * Takes the given selections, and expands each selection so it encompasses whole lines. Merges\n     * adjacent line selections together. Keeps track of each original selection associated with a given\n     * line selection (there might be multiple if individual selections were merged into a single line selection).\n     * Useful for doing multiple-selection-aware line edits.\n     *\n     * @param {Array.<{start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean, primary:boolean}>} selections\n     *      The selections to expand.\n     * @param {{expandEndAtStartOfLine: boolean, mergeAdjacent: boolean}} options\n     *      expandEndAtStartOfLine: true if a range selection that ends at the beginning of a line should be expanded\n     *          to encompass the line. Default false.\n     *      mergeAdjacent: true if adjacent line ranges should be merged. Default true.\n     * @return {Array.<{selectionForEdit: {start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean, primary:boolean},\n     *                  selectionsToTrack: Array.<{start:{line:number, ch:number}, end:{line:number, ch:number}, reversed:boolean, primary:boolean}>}>}\n     *      The combined line selections. For each selection, `selectionForEdit` is the line selection, and `selectionsToTrack` is\n     *      the set of original selections that combined to make up the given line selection. Note that the selectionsToTrack will\n     *      include the original objects passed in `selections`, so if it is later mutated the original passed-in selections will be\n     *      mutated as well.\n     */\n    Editor.prototype.convertToLineSelections = function (selections, options) {\n        var self = this;\n        options = options || {};\n        _.defaults(options, { expandEndAtStartOfLine: false, mergeAdjacent: true });\n\n        // Combine adjacent lines with selections so they don't collide with each other, as they would\n        // if we did them individually.\n        var combinedSelections = [], prevSel;\n        _.each(selections, function (sel) {\n            var newSel = _.cloneDeep(sel);\n\n            // Adjust selection to encompass whole lines.\n            newSel.start.ch = 0;\n            // The end of the selection becomes the start of the next line, if it isn't already\n            // or if expandEndAtStartOfLine is set.\n            var hasSelection = (newSel.start.line !== newSel.end.line) || (newSel.start.ch !== newSel.end.ch);\n            if (options.expandEndAtStartOfLine || !hasSelection || newSel.end.ch !== 0) {\n                newSel.end = {line: newSel.end.line + 1, ch: 0};\n            }\n\n            // If the start of the new selection is within the range of the previous (expanded) selection, merge\n            // the two selections together, but keep track of all the original selections that were related to this\n            // selection, so they can be properly adjusted. (We only have to check for the start being inside the previous\n            // range - it can't be before it because the selections started out sorted.)\n            if (prevSel && self.posWithinRange(newSel.start, prevSel.selectionForEdit.start, prevSel.selectionForEdit.end, options.mergeAdjacent)) {\n                prevSel.selectionForEdit.end.line = newSel.end.line;\n                prevSel.selectionsToTrack.push(sel);\n            } else {\n                prevSel = {selectionForEdit: newSel, selectionsToTrack: [sel]};\n                combinedSelections.push(prevSel);\n            }\n        });\n        return combinedSelections;\n    };\n\n    /**\n     * Returns the currently selected text, or \"\" if no selection. Includes \\n if the\n     * selection spans multiple lines (does NOT reflect the Document's line-endings style). By\n     * default, returns only the contents of the primary selection, unless `allSelections` is true.\n     * @param {boolean=} allSelections Whether to return the contents of all selections (separated\n     *     by newlines) instead of just the primary selection. Default false.\n     * @return {!string} The selected text.\n     */\n    Editor.prototype.getSelectedText = function (allSelections) {\n        if (allSelections) {\n            return this._codeMirror.getSelection();\n        }\n        var sel = this.getSelection();\n        return this.document.getRange(sel.start, sel.end);\n\n    };\n\n    /**\n     * Given an {left, top} object (e.g. coordinates of a mouse event) returns the {line, ch} position that\n     * corresponds to it. The optional mode parameter determines relative to what the coordinates are interpreted.\n     *\n     * @param {{left: number, top:number}} coordinates can be obtained from Eg. coordinates of a mouse event\n     * @param {string} [mode] It may be \"window\", \"page\" (the default), or \"local\".\n     * @return {{line:number, ch: number}} for the given coordinates\n     */\n    Editor.prototype.coordsChar = function (coordinates, mode) {\n        return this._codeMirror.coordsChar(coordinates, mode);\n    };\n\n    /**\n     * Returns the position and dimensions of an arbitrary character given a cursor (Eg. from getCursorPos()).\n     * It'll give the size of the whole character, rather than just the position that the cursor would have\n     * when it would sit at that position.\n     *\n     * @param {{line:number, ch: number}} pos A cursor, can be obtained from Eg. getCursorPos()\n     * @param {string} [mode] It may be \"window\", \"page\" (the default), or \"local\".\n     * @return {{left:number, right:number, top:number, bottom:number}} coordinates for the given character position\n     */\n    Editor.prototype.charCoords = function (pos, mode) {\n        return this._codeMirror.charCoords(pos, mode);\n    };\n\n\n    /**\n     * Get the token at the given cursor position, or at the current cursor\n     * if none is given.\n     *\n     * @param {?{line: number, ch: number}} [cursor] - Optional cursor position\n     *      at which to retrieve a token. If not provided, the current position will be used.\n     * @param {boolean} [precise] If given, results in more current results. Suppresses caching.\n     * @return {{end: number, start:number, line: number, string: string, type: string|null}} -\n     * the CodeMirror token at the given cursor position\n     */\n    Editor.prototype.getToken = function (cursor, precise) {\n        let cm = this._codeMirror;\n        cursor = Object.assign({}, cursor || this.getCursorPos());\n\n        let token = TokenUtils.getTokenAt(cm, cursor, precise);\n        token.line = cursor.line;\n        return token;\n    };\n\n    /**\n     * Get the token after the one at the given cursor position\n     *\n     * @param {{line: number, ch: number}} [cursor] - Optional cursor position after\n     *      which a token should be retrieved\n     * @param {boolean} [skipWhitespace] - true if this should skip over whitespace tokens. Default is true.\n     * @param {boolean} [precise] If given, results in more current results. Suppresses caching.\n     * @return {{end: number, start:number, line: number,string: string, type: string}} -\n     * the CodeMirror token after the one at the given cursor position\n     */\n    Editor.prototype.getNextToken = function (cursor, skipWhitespace = true, precise) {\n        cursor = Object.assign({}, cursor || this.getCursorPos());\n        let token   = this.getToken(cursor, precise),\n            next    = token,\n            doc     = this.document;\n        next.line = cursor.line;\n\n        do {\n            if (next.end < doc.getLine(cursor.line).length) {\n                cursor.ch = next.end + 1;\n            } else if (doc.getLine(cursor.line + 1)) {\n                cursor.ch = 0;\n                cursor.line++;\n            } else {\n                next = null;\n                break;\n            }\n            next = this.getToken(cursor, precise);\n            next.line = cursor.line;\n        } while (skipWhitespace && !/\\S/.test(next.string));\n\n        return next;\n    };\n\n    /**\n     * Get the token before the one at the given cursor position\n     *\n     * @param {{line: number, ch: number}} [cursor] - Optional cursor position before\n     *      which a token should be retrieved\n     * @param {boolean} [skipWhitespace] - true if this should skip over whitespace tokens. Default is true.\n     * @param {boolean} [precise] If given, results in more current results. Suppresses caching.\n     * @return {{end: number, start:number, line: number,string: string, type: string}} - the CodeMirror token before\n     * the one at the given cursor position\n     */\n    Editor.prototype.getPreviousToken = function (cursor, skipWhitespace = true, precise) {\n        cursor = Object.assign({}, cursor || this.getCursorPos());\n        let token   = this.getToken(cursor, precise),\n            prev    = token,\n            doc     = this.document;\n        prev.line = cursor.line;\n\n        do {\n            if (prev.start < cursor.ch) {\n                cursor.ch = prev.start;\n            } else if (cursor.line > 0) {\n                cursor.ch = doc.getLine(cursor.line - 1).length;\n                cursor.line--;\n            } else {\n                break;\n            }\n            prev = this.getToken(cursor, precise);\n            prev.line = cursor.line;\n        } while (skipWhitespace && !/\\S/.test(prev.string));\n\n        return prev;\n    };\n\n    /**\n     * Use This if you are making large number of editor changes in a single workflow to improve performance.\n     * The editor internally buffers changes and only updates its DOM structure after it has finished performing\n     * some operation. If you need to perform a lot of operations on a CodeMirror instance, you can call this method\n     * with a function argument. It will call the function, buffering up all changes, and only doing the expensive\n     * update after the function returns. This can be a lot faster. The return value from this method will be the\n     * return value of your function.\n     * @param execFn The function that will be called to make all editor changes.\n     * @return {*}\n     */\n    Editor.prototype.operation = function (execFn) {\n        return this._codeMirror.operation(execFn);\n    };\n\n    const MARK_OPTION_UNDERLINE_ERROR = {\n            className: \"editor-text-fragment-error\"\n        }, MARK_OPTION_UNDERLINE_WARN = {\n            className: \"editor-text-fragment-warn\"\n        }, MARK_OPTION_UNDERLINE_INFO = {\n            className: \"editor-text-fragment-info\"\n        }, MARK_OPTION_UNDERLINE_SPELLCHECK = {\n            className: \"editor-text-fragment-spell-error\"\n        }, MARK_OPTION_HYPERLINK_TEXT = {\n            className: \"editor-text-fragment-hover\"\n        }, MARK_OPTION_MATCHING_REFS = {\n            className: \"editor-text-fragment-matching-refs\"\n        }, MARK_OPTION_RENAME_OUTLINE ={\n            className: \"editor-text-rename-outline\",\n            startStyle: \"editor-text-rename-outline-left\",\n            endStyle: \"editor-text-rename-outline-right\",\n            clearWhenEmpty: false,\n            inclusiveLeft: true,\n            inclusiveRight: true\n        };\n\n    /**\n     * Can be used to mark a range of text with a specific CSS class name. cursorFrom and cursorTo should be {line, ch}\n     * objects. The options parameter is optional.\n     *\n     * @param {string} markType - A String that can be used to label the mark type.\n     * @param {{line: number, ch: number}} cursorFrom - Mark start position\n     * @param {{line: number, ch: number}} cursorTo - Mark end position\n     * @param {Object} [options] - When given, it should be  one of the predefined `Editor.MARK_OPTION_UNDERLINE*` or\n     * it should be an object that may contain the following configuration options:\n     *\n     * @param {string} [options.className] -Assigns a CSS class to the marked stretch of text.\n     * @param {string} [options.css] -A string of CSS to be applied to the covered text. For example \"color: #fe3\".\n     * @param {string} [options.startStyle] -Can be used to specify an extra CSS class to be applied to the leftmost\n     * span that is part of the marker.\n     * @param {string} [options.endStyle] -Equivalent to startStyle, but for the rightmost span.\n     * @param {object} [options.attributes] -When given, add the attributes in the given object to the elements created\n     * for the marked text. Adding class or style attributes this way is not supported.\n     * @param {boolean} [options.inclusiveLeft] - Determines whether text inserted on the left of the marker will end\n     * up inside or outside of it.\n     * @param {boolean} [options.inclusiveRight] - Like inclusiveLeft, but for the right side.\n     * @param {boolean} [options.atomic] -Atomic ranges act as a single unit when cursor movement is concerned—i.e.\n     * it is impossible to place the cursor inside of them. You can control whether the cursor is allowed to be placed\n     * directly before or after them using selectLeft or selectRight. If selectLeft (or right) is not provided, then\n     * inclusiveLeft (or right) will control this behavior.\n     * @param {boolean} [options.selectLeft] -For atomic ranges, determines whether the cursor is allowed to be placed\n     * directly to the left of the range. Has no effect on non-atomic ranges.\n     * @param {boolean} [options.selectRight] - Like selectLeft, but for the right side.\n     * @param {boolean} [options.collapsed] - Collapsed ranges do not show up in the display.\n     * Setting a range to be collapsed will automatically make it atomic.\n     * @param {boolean} [options.clearOnEnter] - When enabled, will cause the mark to clear itself whenever the cursor\n     * enters its range. This is mostly useful for text-replacement widgets that need to 'snap open' when the user\n     * tries to edit them. The \"clear\" event fired on the range handle can be used to be notified when this happens.\n     * @param {boolean} [options.clearWhenEmpty] - Determines whether the mark is automatically cleared when it becomes\n     * empty. Default is true.\n     * @param {Element} [options.replacedWith] - Use a given node to display this range. Implies both collapsed and\n     * atomic. The given DOM node must be an inline element (as opposed to a block element).\n     * @param {boolean} [options.handleMouseEvents] - When replacedWith is given, this determines whether the editor\n     * will capture mouse and drag events occurring in this widget. Default is false—the events will be left alone\n     * for the default browser handler, or specific handlers on the widget, to capture.\n     * @param {boolean} [options.readOnly] - A read-only span can, as long as it is not cleared, not be modified except\n     * by calling setValue to reset the whole document. Note: adding a read-only span currently clears the undo history\n     * of the editor, because existing undo events being partially nullified by read-only spans would corrupt the\n     * history (in the current implementation).\n     * @param {boolean} [options.addToHistory] - When set to true (default is false), adding this marker will create an\n     * event in the undo history that can be individually undone (clearing the marker).\n     *\n     * @return {{clear, find, changed}} TextMarker - The method will return an object(TextMarker) that represents\n     * the marker which exposes three methods:\n     * clear(), to remove the mark, find(), which returns a {from, to} object (both holding document positions),\n     * indicating the current position of the marked range, or undefined if the marker is no longer in the document,\n     * and finally changed(), which you can call if you've done something that might change the size of the marker\n     * (for example changing the content of a replacedWith node), and want to cheaply update the display.\n     *\n     * The Returned TextMarker emits the following events that can be listened with the on and off methods.\n     * @event beforeCursorEnter Fired on TextMarker when the cursor enters the marked range. From this event handler,\n     * the editor state may be inspected but not modified, with the exception that the range on which the event\n     * fires may be cleared.\n     * @event clear (from: {line, ch}, to: {line, ch}) Fired when the range is cleared, either through cursor movement\n     * in combination with clearOnEnter or through a call to its clear() method. Will only be fired once per handle.\n     * Note that deleting the range through text editing does not fire this event, because an undo action might\n     * bring the range back into existence. from and to give the part of the document that the range spanned\n     * when it was cleared.\n     * @event hide Fired when the last part of the marker is removed from the document by editing operations.\n     * @event unhide Fired when, after the marker was removed by editing, a undo operation brought the marker back.\n     */\n    Editor.prototype.markText = function (markType, cursorFrom, cursorTo, options) {\n        let newMark = this._codeMirror.markText(cursorFrom, cursorTo, options);\n        newMark.markType = markType;\n        return newMark;\n    };\n\n    /**\n     * Same as markText, but will apply to the token at the given position or current position\n     * @param {string} markType - A String that can be used to label the mark type.\n     * @param {{line: number, ch: number}} cursor - The position of the token\n     * @param [options] same as markText\n     * @return {Object} TextMarker\n     */\n    Editor.prototype.markToken = function (markType, cursor, options) {\n        let token = this.getToken(cursor);\n        return this.markText(markType, {line: cursor.line, ch: token.start},\n            {line: cursor.line, ch: token.end}, options);\n    };\n\n    /**\n     * Inserts a bookmark, a handle that follows the text around it as it is being edited, at the given position.\n     * Similar to mark text, but for just a point instead of range.\n     * @param {string} markType - A String that can be used to label the mark type.\n     * @param {{line: number, ch: number}} [cursorPos] - Where to place the mark. Optional, if not specified, will\n     * use current pos\n     * @param {Object} [options] - When given, it should be an object that may contain the following\n     * configuration options:\n     * @param {Element} [options.widget] - Can be used to display a DOM node at the current location of the bookmark\n     * (analogous to the replacedWith option to markText).\n     * @param {boolean} [options.insertLeft] - By default, text typed when the cursor is on top of the bookmark will\n     * end up to the right of the bookmark. Set this option to true to make it go to the left instead.\n     * @param {boolean} [options.handleMouseEvents] - As with markText, this determines whether mouse events on the\n     * widget inserted for this bookmark are handled by CodeMirror. The default is false.\n     *\n     * @return {{clear, find}} TextMarker- A bookmark has two methods find() and clear(). `find` returns the current\n     * position of the bookmark, if it is still in the document, and `clear` explicitly removes the bookmark.\n     */\n    Editor.prototype.setBookmark = function (markType, cursorPos, options) {\n        cursorPos = cursorPos || this.getCursorPos();\n        let newMark = this._codeMirror.setBookmark(cursorPos, options);\n        newMark.markType = markType;\n        return newMark;\n    };\n\n    /**\n     * Returns an array of all the bookmarks and marked ranges found between the given positions (non-inclusive).\n     * @param {{line: number, ch: number}} cursorFrom - Mark start position\n     * @param {{line: number, ch: number}} cursorTo - Mark end position\n     * @param {string} [markType] - Optional, if given will only return marks of that type. Else returns everything.\n     * @returns {Array[TextMarker]} TextMarker - A text marker array\n     */\n    Editor.prototype.findMarks = function (cursorFrom, cursorTo, markType) {\n        let marks = this._codeMirror.findMarks(cursorFrom, cursorTo) || [];\n        return marks.filter(function (mark){\n            return markType ? mark.markType === markType : true;\n        });\n    };\n\n    /**\n     * Returns an array of all the bookmarks and marked ranges present at the given position.\n     * @param {{line: number, ch: number}} cursorPos - cursor position\n     * @param {string} [markType] - Optional, if given will only return marks of that type. Else returns everything.\n     * @returns {Array[TextMarker]} TextMarker - A text marker array\n     */\n    Editor.prototype.findMarksAt = function (cursorPos, markType) {\n        let marks = this._codeMirror.findMarksAt(cursorPos) || [];\n        return marks.filter(function (mark){\n            return markType ? mark.markType === markType : true;\n        });\n    };\n\n    /**\n     * Returns an array containing all marked ranges in the document.\n     * @param {string} [markType] - Optional, if given will only return marks of that type. Else returns everything.\n     * @returns {Array[TextMarker]} TextMarker - A text marker array\n     */\n    Editor.prototype.getAllMarks = function (markType) {\n        let marks = this._codeMirror.getAllMarks() || [];\n        return marks.filter(function (mark){\n            return markType ? mark.markType === markType : true;\n        });\n    };\n\n    /**\n     * Clears all mark of the given type. If nothing is given, clears all marks(Don't use this API without types!).\n     * @param {string} [markType] - Optional, if given will only delete marks of that type. Else delete everything.\n     */\n    Editor.prototype.clearAllMarks = function (markType) {\n        let marks = this.getAllMarks(markType);\n        for(let mark of marks){\n            mark.clear();\n        }\n    };\n\n    /**\n     * Sets the current selection. Start is inclusive, end is exclusive. Places the cursor at the\n     * end of the selection range. Optionally centers around the cursor after\n     * making the selection\n     *\n     * @param {{line:number, ch:number}} start\n     * @param {{line:number, ch:number}} [end] If not specified, defaults to start.\n     * @param {boolean} [center] true to center the viewport\n     * @param {number} [centerOptions] Option value, or 0 for no options; one of the BOUNDARY_* constants above.\n     * @param {?string} [origin] An optional string that describes what other selection or edit operations this\n     *      should be merged with for the purposes of undo. See {@link Document#replaceRange} for more details.\n     */\n    Editor.prototype.setSelection = function (start, end, center, centerOptions, origin) {\n        this.setSelections([{start: start, end: end || start}], center, centerOptions, origin);\n    };\n\n    /**\n     * Replace the selection with the given string.\n     * @param {string} replacement the text to replace the current selection\n     * @param {string} [select] The optional select argument can be used to change selection. Passing \"around\"\n     * will cause the new text to be selected, passing \"start\" will collapse the selection to the start\n     * of the inserted text.\n     */\n    Editor.prototype.replaceSelection = function (replacement, select) {\n        this._codeMirror.replaceSelection(replacement, select);\n    };\n\n    /**\n     * Replace the part of the document between from and to with the given string.\n     * @param {string} replacement the text to replace the current selection\n     * @param {{line:number, ch:number}} from the strat position to replace\n     * @param {{line:number, ch:number}} [to] the end position to replace. to can be left off to simply\n     * insert the string at position from.\n     * @param {string} origin When origin is given, it will be passed on to \"change\" events, and its first\n     * letter will be used to determine whether this change can be merged with previous history events\n     * of the inserted text.\n     */\n    Editor.prototype.replaceRange = function (replacement, from, to, origin) {\n        this._codeMirror.replaceRange(replacement, from, to, origin);\n    };\n\n    /**\n     * Clears any active selection if present.\n     */\n    Editor.prototype.clearSelection = function () {\n        let pos = this.getCursorPos();\n        this.setCursorPos(pos.line, pos.ch);\n    };\n\n    /**\n     * Sets a multiple selection, with the \"primary\" selection (the one returned by\n     * getSelection() and getCursorPos()) defaulting to the last if not specified.\n     * Overlapping ranges will be automatically merged, and the selection will be sorted.\n     * Optionally centers around the primary selection after making the selection.\n     * @param {!Array<{start:{line:number, ch:number}, end:{line:number, ch:number}, primary:boolean, reversed: boolean}>} selections\n     *      The selection ranges to set. If the start and end of a range are the same, treated as a cursor.\n     *      If reversed is true, set the anchor of the range to the end instead of the start.\n     *      If primary is true, this is the primary selection. Behavior is undefined if more than\n     *      one selection has primary set to true. If none has primary set to true, the last one is primary.\n     * @param {boolean} center true to center the viewport around the primary selection.\n     * @param {number} centerOptions Option value, or 0 for no options; one of the BOUNDARY_* constants above.\n     * @param {?string} origin An optional string that describes what other selection or edit operations this\n     *      should be merged with for the purposes of undo. See {@link Document#replaceRange} for more details.\n     */\n    Editor.prototype.setSelections = function (selections, center, centerOptions, origin) {\n        var primIndex = selections.length - 1, options;\n        if (origin) {\n            options = { origin: origin };\n        }\n        this._codeMirror.setSelections(_.map(selections, function (sel, index) {\n            if (sel.primary) {\n                primIndex = index;\n            }\n            return { anchor: sel.reversed ? sel.end : sel.start, head: sel.reversed ? sel.start : sel.end };\n        }), primIndex, options);\n        if (center) {\n            this.centerOnCursor(centerOptions);\n        }\n    };\n\n    /**\n     * Sets the editors overwrite mode state. If null is passed, the state is toggled.\n     *\n     * @param {?boolean} start\n     */\n    Editor.prototype.toggleOverwrite = function (state) {\n        this._codeMirror.toggleOverwrite(state);\n    };\n\n    /**\n     * Selects word that the given pos lies within or adjacent to. If pos isn't touching a word\n     * (e.g. within a token like \"//\"), moves the cursor to pos without selecting a range.\n     * @param {!{line:number, ch:number}}\n     */\n    Editor.prototype.selectWordAt = function (pos) {\n        var word = this._codeMirror.findWordAt(pos);\n        this.setSelection(word.anchor, word.head);\n    };\n\n    /**\n     * Gets the total number of lines in the document (includes lines not visible in the viewport)\n     * @return {!number}\n     */\n    Editor.prototype.lineCount = function () {\n        return this._codeMirror.lineCount();\n    };\n\n    /**\n     * Deterines if line is fully visible.\n     * @param {number} zero-based index of the line to test\n     * @return {boolean} true if the line is fully visible, false otherwise\n     */\n    Editor.prototype.isLineVisible = function (line) {\n        var coords = this._codeMirror.charCoords({line: line, ch: 0}, \"local\"),\n            scrollInfo = this._codeMirror.getScrollInfo(),\n            top = scrollInfo.top,\n            bottom = scrollInfo.top + scrollInfo.clientHeight;\n\n        // Check top and bottom and return false for partially visible lines.\n        return (coords.top >= top && coords.bottom <= bottom);\n    };\n\n    /**\n     * Gets the number of the first visible line in the editor.\n     * @return {number} The 0-based index of the first visible line.\n     */\n    Editor.prototype.getFirstVisibleLine = function () {\n        return (this._visibleRange ? this._visibleRange.startLine : 0);\n    };\n\n    /**\n     * Gets the number of the last visible line in the editor.\n     * @return {number} The 0-based index of the last visible line.\n     */\n    Editor.prototype.getLastVisibleLine = function () {\n        return (this._visibleRange ? this._visibleRange.endLine : this.lineCount() - 1);\n    };\n\n    /* Hides the specified line number in the editor\n     * @param {!from} line to start hiding from (inclusive)\n     * @param {!to} line to end hiding at (exclusive)\n     * @return {TextMarker} The CodeMirror mark object that's hiding the lines\n     */\n    Editor.prototype._hideLines = function (from, to) {\n        if (to <= from) {\n            return;\n        }\n\n        // We set clearWhenEmpty: false so that if there's a blank line at the beginning or end of\n        // the document, and that's the only hidden line, we can still actually hide it. Doing so\n        // requires us to create a 0-length marked span, which would ordinarily be cleaned up by CM\n        // if clearWithEmpty is true. See https://groups.google.com/forum/#!topic/codemirror/RB8VNF8ow2w\n        var value = this._codeMirror.markText(\n            {line: from, ch: 0},\n            {line: to - 1, ch: this._codeMirror.getLine(to - 1).length},\n            {collapsed: true, inclusiveLeft: true, inclusiveRight: true, clearWhenEmpty: false}\n        );\n\n        return value;\n    };\n\n    /**\n     * Gets the total height of the document in pixels (not the viewport)\n     * @return {!number} height in pixels\n     */\n    Editor.prototype.totalHeight = function () {\n        return this.getScrollerElement().scrollHeight;\n    };\n\n    /**\n     * Gets the scroller element from the editor.\n     * @return {!HTMLDivElement} scroller\n     */\n    Editor.prototype.getScrollerElement = function () {\n        return this._codeMirror.getScrollerElement();\n    };\n\n    /**\n     * Gets the root DOM node of the editor.\n     * @return {!HTMLDivElement} The editor's root DOM node.\n     */\n    Editor.prototype.getRootElement = function () {\n        return this._codeMirror.getWrapperElement();\n    };\n\n\n    /**\n     * Gets the lineSpace element within the editor (the container around the individual lines of code).\n     * FUTURE: This is fairly CodeMirror-specific. Logic that depends on this may break if we switch\n     * editors.\n     * @return {!HTMLDivElement} The editor's lineSpace element.\n     */\n    Editor.prototype._getLineSpaceElement = function () {\n        return $(\".CodeMirror-lines\", this.getScrollerElement()).children().get(0);\n    };\n\n    /**\n     * Returns the current scroll position of the editor.\n     * @return {{x:number, y:number}} The x,y scroll position in pixels\n     */\n    Editor.prototype.getScrollPos = function () {\n        var scrollInfo = this._codeMirror.getScrollInfo();\n        return { x: scrollInfo.left, y: scrollInfo.top };\n    };\n\n    /**\n     * Restores and adjusts the current scroll position of the editor.\n     * @param {{x:number, y:number}} scrollPos - The x,y scroll position in pixels\n     * @param {!number} heightDelta - The amount of delta H to apply to the scroll position\n     */\n    Editor.prototype.adjustScrollPos = function (scrollPos, heightDelta) {\n        this._codeMirror.scrollTo(scrollPos.x, scrollPos.y + heightDelta);\n    };\n\n    /**\n     * Sets the current scroll position of the editor.\n     * @param {number} x scrollLeft position in pixels\n     * @param {number} y scrollTop position in pixels\n     */\n    Editor.prototype.setScrollPos = function (x, y) {\n        this._codeMirror.scrollTo(x, y);\n    };\n\n    /*\n     * Returns the current text height of the editor.\n     * @return {number} Height of the text in pixels\n     */\n    Editor.prototype.getTextHeight = function () {\n        return this._codeMirror.defaultTextHeight();\n    };\n\n    /**\n     * Adds an inline widget below the given line. If any inline widget was already open for that\n     * line, it is closed without warning.\n     * @param {!{line:number, ch:number}} pos  Position in text to anchor the inline.\n     * @param {!InlineWidget} inlineWidget The widget to add.\n     * @param {boolean=} scrollLineIntoView Scrolls the associated line into view. Default true.\n     * @return {$.Promise} A promise object that is resolved when the widget has been added (but might\n     *     still be animating open). Never rejected.\n     */\n    Editor.prototype.addInlineWidget = InlineWidgetHelper.addInlineWidget;\n\n    /**\n     * Removes all inline widgets\n     */\n    Editor.prototype.removeAllInlineWidgets = InlineWidgetHelper.removeAllInlineWidgets;\n\n    /**\n     * Removes the given inline widget.\n     * @param {number} inlineWidget The widget to remove.\n     * @return {$.Promise} A promise that is resolved when the inline widget is fully closed and removed from the DOM.\n     */\n    Editor.prototype.removeInlineWidget = InlineWidgetHelper.removeInlineWidget;\n\n    /**\n     * Removes all inline widgets for a given line\n     * @param {number} lineNum The line number to modify\n     */\n    Editor.prototype.removeAllInlineWidgetsForLine = InlineWidgetHelper.removeAllInlineWidgetsForLine;\n\n    /**\n     * ****** Update actual public API doc in Editor.js *****\n     * Gets all inline widgets for a given line\n     * @param {number} lineNum The line number to modify\n     */\n    Editor.prototype.getAllInlineWidgetsForLine = InlineWidgetHelper.getAllInlineWidgetsForLine;\n\n    /**\n     * Returns a list of all inline widgets currently open in this editor. Each entry contains the\n     * inline's id, and the data parameter that was passed to addInlineWidget().\n     * @return {!Array.<{id:number, data:Object}>}\n     */\n    Editor.prototype.getInlineWidgets = InlineWidgetHelper.getInlineWidgets;\n\n    /**\n     * Returns the currently focused inline widget, if any.\n     * @return {?InlineWidget}\n     */\n    Editor.prototype.getFocusedInlineWidget = InlineWidgetHelper.getFocusedInlineWidget;\n\n    /**\n     * Sets the height of an inline widget in this editor.\n     * @param {!InlineWidget} inlineWidget The widget whose height should be set.\n     * @param {!number} height The height of the widget.\n     * @param {boolean=} ensureVisible Whether to scroll the entire widget into view. Default false.\n     */\n    Editor.prototype.setInlineWidgetHeight = InlineWidgetHelper.setInlineWidgetHeight;\n\n    /**\n     * Display temporary popover message at current cursor position. Display message above\n     * cursor if space allows, otherwise below.\n     *\n     * @param {string} errorMsg Error message to display\n     * @function\n     */\n    Editor.prototype.displayErrorMessageAtCursor = ErrorPopupHelper.displayErrorMessageAtCursor;\n\n    /**\n     * Returns the offset of the top of the virtual scroll area relative to the browser window (not the editor\n     * itself). Mainly useful for calculations related to scrollIntoView(), where you're starting with the\n     * offset() of a child widget (relative to the browser window) and need to figure out how far down it is from\n     * the top of the virtual scroll area (excluding the top padding).\n     * @return {number}\n     */\n    Editor.prototype.getVirtualScrollAreaTop = function () {\n        var topPadding = this._getLineSpaceElement().offsetTop, // padding within mover\n            scroller = this.getScrollerElement();\n        return $(scroller).offset().top - scroller.scrollTop + topPadding;\n    };\n\n    /** Gives focus to the editor control */\n    Editor.prototype.focus = function () {\n        // Focusing an editor synchronously triggers focus/blur handlers. If a blur handler attemps to focus\n        // another editor, we'll put CM in a bad state (because CM assumes programmatically focusing itself\n        // will always succeed, and if you're in the middle of another focus change that appears to be untrue).\n        // So instead, we simply ignore reentrant focus attempts.\n        // See bug #2951 for an example of this happening and badly hosing things.\n        if (_duringFocus) {\n            return;\n        }\n\n        _duringFocus = true;\n        try {\n            this._codeMirror.focus();\n        } finally {\n            _duringFocus = false;\n        }\n    };\n\n    /** Returns true if the editor has focus */\n    Editor.prototype.hasFocus = function () {\n        return this._focused;\n    };\n\n    /*\n     * @typedef {scrollPos:{x:number, y:number},Array.<{start:{line:number, ch:number},end:{line:number, ch:number}}>} EditorViewState\n     */\n\n    /*\n     * returns the view state for the editor\n     * @return {!EditorViewState}\n     */\n    Editor.prototype.getViewState = function () {\n        return {\n            selections: this.getSelections(),\n            scrollPos: this.getScrollPos()\n        };\n\n    };\n\n    /**\n     * Restores the view state\n     * @param {!EditorViewState} viewState - the view state object to restore\n     */\n    Editor.prototype.restoreViewState = function (viewState) {\n        if (viewState.selection) {\n            // We no longer write out single-selection, but there might be some view state\n            // from an older version.\n            this.setSelection(viewState.selection.start, viewState.selection.end);\n        }\n        if (viewState.selections) {\n            this.setSelections(viewState.selections);\n        }\n        if (viewState.scrollPos) {\n            this.setScrollPos(viewState.scrollPos.x, viewState.scrollPos.y);\n        }\n    };\n\n    /**\n     * Re-renders the editor UI\n     * @param {boolean=} handleResize true if this is in response to resizing the editor. Default false.\n     */\n    Editor.prototype.refresh = function (handleResize) {\n        // If focus is currently in a child of the CodeMirror editor (e.g. in an inline widget), but not in\n        // the CodeMirror input field itself, remember the focused item so we can restore focus after the\n        // refresh (which might cause the widget to be removed from the display list temporarily).\n        var focusedItem = window.document.activeElement,\n            restoreFocus = $.contains(this._codeMirror.getScrollerElement(), focusedItem);\n        this._codeMirror.refresh();\n        if (restoreFocus) {\n            focusedItem.focus();\n        }\n    };\n\n    /**\n     * Re-renders the editor, and all children inline editors.\n     * @param {boolean=} handleResize true if this is in response to resizing the editor. Default false.\n     */\n    Editor.prototype.refreshAll = function (handleResize) {\n        this.refresh(handleResize);\n        this.getInlineWidgets().forEach(function (inlineWidget) {\n            inlineWidget.refresh();\n        });\n    };\n\n    /** Undo the last edit. */\n    Editor.prototype.undo = function () {\n        this._codeMirror.undo();\n    };\n\n    /** Redo the last un-done edit. */\n    Editor.prototype.redo = function () {\n        this._codeMirror.redo();\n    };\n\n    /**\n     * View API Visibility Change Notification handler.  This is also\n     * called by the native \"setVisible\" API which refresh can be optimized\n     * @param {boolean} show true to show the editor, false to hide it\n     * @param {boolean} refresh true (default) to refresh the editor, false to skip refreshing it\n     */\n    Editor.prototype.notifyVisibilityChange = function (show, refresh) {\n        if (show && (refresh || refresh === undefined)) {\n            this.refresh();\n        }\n        if (show) {\n            this._inlineWidgets.forEach(function (inlineWidget) {\n                inlineWidget.onParentShown();\n            });\n        }\n    };\n\n    /**\n     * Shows or hides the editor within its parent. Does not force its ancestors to\n     * become visible.\n     * @param {boolean} show true to show the editor, false to hide it\n     * @param {boolean} refresh true (default) to refresh the editor, false to skip refreshing it\n     */\n    Editor.prototype.setVisible = function (show, refresh) {\n        this.$el.css(\"display\", (show ? \"\" : \"none\"));\n        this.notifyVisibilityChange(show, refresh);\n    };\n\n    /**\n     * Returns true if the editor is fully visible--i.e., is in the DOM, all ancestors are\n     * visible, and has a non-zero width/height.\n     */\n    Editor.prototype.isFullyVisible = function () {\n        return $(this.getRootElement()).is(\":visible\");\n    };\n\n    /**\n     * Gets the syntax-highlighting mode for the given range.\n     * Returns null if the mode at the start of the selection differs from the mode at the end -\n     * an *approximation* of whether the mode is consistent across the whole range (a pattern like\n     * A-B-A would return A as the mode, not null).\n     *\n     * @param {!{line: number, ch: number}} start The start of the range to check.\n     * @param {!{line: number, ch: number}} end The end of the range to check.\n     * @param {boolean=} knownMixed Whether we already know we're in a mixed mode and need to check both\n     *     the start and end.\n     * @return {?(Object|string)} Name of syntax-highlighting mode, or object containing a \"name\" property\n     *     naming the mode along with configuration options required by the mode.\n     * @see {@link LanguageManager::#getLanguageForPath} and {@link LanguageManager::Language#getMode}.\n     */\n    Editor.prototype.getModeForRange = function (start, end, knownMixed) {\n        var outerMode = this._codeMirror.getMode(),\n            startMode = TokenUtils.getModeAt(this._codeMirror, start),\n            endMode = TokenUtils.getModeAt(this._codeMirror, end);\n        if (!knownMixed && outerMode.name === startMode.name) {\n            // Mode does not vary: just use the editor-wide mode name\n            return this._codeMirror.getOption(\"mode\");\n        } else if (!startMode || !endMode || startMode.name !== endMode.name) {\n            return null;\n        }\n        return startMode;\n\n    };\n\n    /**\n     * Gets the syntax-highlighting mode for the current selection or cursor position. (The mode may\n     * vary within one file due to embedded languages, e.g. JS embedded in an HTML script block). See\n     * `getModeForRange()` for how this is determined for a single selection.\n     *\n     * If there are multiple selections, this will return a mode only if all the selections are individually\n     * consistent and resolve to the same mode.\n     *\n     * @return {?(Object|string)} Name of syntax-highlighting mode, or object containing a \"name\" property\n     *     naming the mode along with configuration options required by the mode.\n     * @see {@link LanguageManager::#getLanguageForPath} and {@link LanguageManager::Language#getMode}.\n     */\n    Editor.prototype.getModeForSelection = function () {\n        // Check for mixed mode info\n        var self        = this,\n            sels        = this.getSelections(),\n            primarySel  = this.getSelection(),\n            outerMode   = this._codeMirror.getMode(),\n            startMode   = TokenUtils.getModeAt(this._codeMirror, primarySel.start),\n            isMixed     = (outerMode.name !== startMode.name);\n\n        if (isMixed) {\n            // This is the magic code to let the code view know that we are in 'css' context\n            // if the CodeMirror outermode is 'htmlmixed' and we are in 'style' attributes\n            // value context. This has to be done as CodeMirror doesn't yet think this as 'css'\n            // This magic is executed only when user is having a cursor and not selection\n            // We will enable selection handling one we figure a way out to handle mixed scope selection\n            if (outerMode.name === 'htmlmixed' && primarySel.start.line === primarySel.end.line && primarySel.start.ch === primarySel.end.ch) {\n                var tagInfo = HTMLUtils.getTagInfo(this, primarySel.start, true),\n                    tokenType = tagInfo.position.tokenType;\n\n                if (tokenType === HTMLUtils.ATTR_VALUE && tagInfo.attr.name.toLowerCase() === 'style') {\n                    return 'css';\n                }\n            }\n            // Shortcut the first check to avoid getModeAt(), which can be expensive\n            if (primarySel.start.line !== primarySel.end.line || primarySel.start.ch !== primarySel.end.ch) {\n                var endMode = TokenUtils.getModeAt(this._codeMirror, primarySel.end);\n\n                if (startMode.name !== endMode.name) {\n                    return null;\n                }\n            }\n\n            // If mixed mode, check that mode is the same at start & end of each selection\n            var hasMixedSel = _.some(sels, function (sel) {\n                if (sels === primarySel) {\n                    // We already checked this before, so we know it's not mixed.\n                    return false;\n                }\n\n                var rangeMode = self.getModeForRange(sel.start, sel.end, true);\n                return (!rangeMode || rangeMode.name !== startMode.name);\n            });\n            if (hasMixedSel) {\n                return null;\n            }\n\n            return startMode.name;\n        }\n            // Mode does not vary: just use the editor-wide mode\n        return this._codeMirror.getOption(\"mode\");\n\n    };\n\n    /**\n     * gets the language for the selection. (Javascript selected from an HTML document or CSS selected from an HTML\n     * document, etc...)\n     * @return {!Language}\n     */\n    Editor.prototype.getLanguageForSelection = function () {\n        return this.document.getLanguage().getLanguageForMode(this.getModeForSelection());\n    };\n\n    /**\n     * Gets the syntax-highlighting mode for the document.\n     *\n     * @return {Object|String} Object or Name of syntax-highlighting mode\n     * @see {@link LanguageManager::#getLanguageForPath|LanguageManager.getLanguageForPath} and {@link LanguageManager::Language#getMode|Language.getMode}.\n     */\n    Editor.prototype.getModeForDocument = function () {\n        return this._codeMirror.getOption(\"mode\");\n    };\n\n    /**\n     * The Document we're bound to\n     * @type {!Document}\n     */\n    Editor.prototype.document = null;\n\n\n    /**\n     * The Editor's last known width.\n     * Used in conjunction with updateLayout to recompute the layout\n     * if the parent container changes its size since our last layout update.\n     * @type {?number}\n     */\n    Editor.prototype._lastEditorWidth = null;\n\n\n    /**\n     * If true, we're in the middle of syncing to/from the Document. Used to ignore spurious change\n     * events caused by us (vs. change events caused by others, which we need to pay attention to).\n     * @type {!boolean}\n     */\n    Editor.prototype._duringSync = false;\n\n    /**\n     * @private\n     * NOTE: this is actually \"semi-private\": EditorManager also accesses this field... as well as\n     * a few other modules. However, we should try to gradually move most code away from talking to\n     * CodeMirror directly.\n     * @type {!CodeMirror}\n     */\n    Editor.prototype._codeMirror = null;\n\n    /**\n     * @private\n     * @type {!Array.<{id:number, data:Object}>}\n     */\n    Editor.prototype._inlineWidgets = null;\n\n    /**\n     * @private\n     * @type {?TextRange}\n     */\n    Editor.prototype._visibleRange = null;\n\n    /**\n     * @private\n     * @type {Object}\n     * Promise queues for inline widgets being added to a given line.\n     */\n    Editor.prototype._inlineWidgetQueues = null;\n\n    /**\n     * @private\n     * @type {Array}\n     * A list of objects corresponding to the markers that are hiding lines in the current editor.\n     */\n    Editor.prototype._hideMarks = null;\n\n    /**\n     * @private\n     *\n     * Retrieve the value of the named preference for this document.\n     *\n     * @param {string} prefName Name of preference to retrieve.\n     * @return {*} current value of that pref\n     */\n    Editor.prototype._getOption = function (prefName) {\n        return PreferencesManager.get(prefName, PreferencesManager._buildContext(this.document.file.fullPath, this.document.getLanguage().getId()));\n    };\n\n    /**\n     * @private\n     *\n     * Updates the editor to the current value of prefName for the file being edited.\n     *\n     * @param {string} prefName Name of the preference to visibly update\n     */\n    Editor.prototype._updateOption = function (prefName) {\n        var oldValue = this._currentOptions[prefName],\n            newValue = this._getOption(prefName);\n\n        if (oldValue !== newValue) {\n            this._currentOptions[prefName] = newValue;\n\n            if (prefName === USE_TAB_CHAR) {\n                this._codeMirror.setOption(cmOptions[prefName], newValue);\n                this._codeMirror.setOption(\"indentUnit\", newValue === true ?\n                                           this._currentOptions[TAB_SIZE] :\n                                           this._currentOptions[SPACE_UNITS]\n                                          );\n            } else if (prefName === STYLE_ACTIVE_LINE) {\n                this._updateStyleActiveLine();\n            } else if (prefName === SCROLL_PAST_END && this._visibleRange) {\n                // Do not apply this option to inline editors\n                return;\n            } else if (prefName === SHOW_LINE_NUMBERS) {\n                Editor._toggleLinePadding(!newValue);\n                this._codeMirror.setOption(cmOptions[SHOW_LINE_NUMBERS], newValue);\n                if (newValue) {\n                    Editor.registerGutter(LINE_NUMBER_GUTTER, LINE_NUMBER_GUTTER_PRIORITY);\n                } else {\n                    Editor.unregisterGutter(LINE_NUMBER_GUTTER);\n                }\n                this.refreshAll();\n            } else {\n                this._codeMirror.setOption(cmOptions[prefName], newValue);\n            }\n\n            this.trigger(\"optionChange\", prefName, newValue);\n        }\n    };\n\n    /**\n     * @private\n     *\n     * Used to ensure that \"style active line\" is turned off when there is a selection.\n     */\n    Editor.prototype._updateStyleActiveLine = function () {\n        if (this.hasSelection()) {\n            if (this._codeMirror.getOption(\"styleActiveLine\")) {\n                this._codeMirror.setOption(\"styleActiveLine\", false);\n            }\n        } else {\n            this._codeMirror.setOption(\"styleActiveLine\", this._currentOptions[STYLE_ACTIVE_LINE]);\n        }\n    };\n\n    /**\n     * resizes the editor to fill its parent container\n     * should not be used on inline editors\n     * @param {boolean=} forceRefresh - forces the editor to update its layout\n     *                                   even if it already matches the container's height / width\n     */\n    Editor.prototype.updateLayout = function (forceRefresh) {\n        var curRoot = this.getRootElement(),\n            curWidth = $(curRoot).width(),\n            $editorHolder = this.$el.parent(),\n            editorAreaHt = $editorHolder.height();\n\n        if (!curRoot.style.height || $(curRoot).height() !== editorAreaHt) {\n            // Call setSize() instead of $.height() to allow CodeMirror to\n            // check for options like line wrapping\n            this.setSize(null, editorAreaHt);\n            if (forceRefresh === undefined) {\n                forceRefresh = true;\n            }\n        } else if (curWidth !== this._lastEditorWidth) {\n            if (forceRefresh === undefined) {\n                forceRefresh = true;\n            }\n        }\n        this._lastEditorWidth = curWidth;\n\n        if (forceRefresh) {\n            this.refreshAll(forceRefresh);\n        }\n    };\n\n    /**\n     * Renders all registered gutters\n     * @private\n     */\n    Editor.prototype._renderGutters = function () {\n        var languageId = this.document.getLanguage().getId();\n\n        function _filterByLanguages(gutter) {\n            return !gutter.languages || gutter.languages.indexOf(languageId) > -1;\n        }\n\n        function _sortByPriority(a, b) {\n            return a.priority - b.priority;\n        }\n\n        function _getName(gutter) {\n            return gutter.name;\n        }\n\n        var gutters = registeredGutters.map(_getName),\n            rootElement = this.getRootElement();\n\n        // If the line numbers gutter has not been explicitly registered and the CodeMirror lineNumbes option is\n        // set to true, we explicitly add the line numbers gutter. This case occurs the first time the editor loads\n        // and showLineNumbers is set to true in preferences\n        if (gutters.indexOf(LINE_NUMBER_GUTTER) < 0 && this._codeMirror.getOption(cmOptions[SHOW_LINE_NUMBERS])) {\n            registeredGutters.push({name: LINE_NUMBER_GUTTER, priority: LINE_NUMBER_GUTTER_PRIORITY});\n        }\n\n        gutters = registeredGutters.sort(_sortByPriority)\n            .filter(_filterByLanguages)\n            .map(_getName);\n\n        this._codeMirror.setOption(\"gutters\", gutters);\n        this._codeMirror.refresh();\n\n        if (gutters.indexOf(LINE_NUMBER_GUTTER) < 0) {\n            $(rootElement).addClass(\"linenumber-disabled\");\n        } else {\n            $(rootElement).removeClass(\"linenumber-disabled\");\n        }\n    };\n\n    /**\n     * Sets the marker for the specified gutter on the specified line number\n     * @param   {number}   lineNumber The line number for the inserted gutter marker\n     * @param   {string}   gutterName The name of the gutter\n     * @param   {object}   marker     The dom element representing the marker to the inserted in the gutter\n     */\n    Editor.prototype.setGutterMarker = function (lineNumber, gutterName, marker) {\n        if (!Editor.isGutterRegistered(gutterName)) {\n            console.warn(\"Gutter name must be registered before calling editor.setGutterMarker\");\n            return;\n        }\n\n        this._codeMirror.setGutterMarker(lineNumber, gutterName, marker);\n    };\n\n    /**\n     * Gets the gutter marker of the given name if found on the current line, else returns undefined.\n     * @param   {number}   lineNumber The line number for the inserted gutter marker\n     * @param   {string}   gutterName The name of the gutter\n     */\n    Editor.prototype.getGutterMarker = function (lineNumber, gutterName) {\n        if (!Editor.isGutterRegistered(gutterName)) {\n            console.warn(\"Gutter name must be registered before calling editor.getGutterMarker\");\n            return;\n        }\n        let lineInfo = this._codeMirror.lineInfo(lineNumber);\n        let gutterMarkers = lineInfo && lineInfo.gutterMarkers || {};\n        return gutterMarkers[gutterName];\n    };\n\n    /**\n     * Clears the marker for the specified gutter on the specified line number. Does nothing if there was no marker\n     * on the line.\n     * @param   {number}   lineNumber The line number for the inserted gutter marker\n     * @param   {string}   gutterName The name of the gutter\n     */\n    Editor.prototype.clearGutterMarker = function (lineNumber, gutterName) {\n        this.setGutterMarker(lineNumber, gutterName, null);\n    };\n\n    /**\n     * Clears all marks from the gutter with the specified name.\n     * @param {string} gutterName The name of the gutter to clear.\n     */\n    Editor.prototype.clearGutter = function (gutterName) {\n        if (!Editor.isGutterRegistered(gutterName)) {\n            console.warn(\"Gutter name must be registered before calling editor.clearGutter\");\n            return;\n        }\n        this._codeMirror.clearGutter(gutterName);\n    };\n\n    /**\n     * Returns the list of gutters current registered on all editors.\n     * @return {!Array.<{name: string, priority: number}>}\n     */\n    Editor.getRegisteredGutters = function () {\n        return registeredGutters;\n    };\n\n    /**\n     * Return true if gutter of the given name is registered\n     * @param   {string}   gutterName The name of the gutter\n     * @return {boolean}\n     */\n    Editor.isGutterRegistered = function (gutterName) {\n        return registeredGutters.some(function (gutter) {\n            return gutter.name === gutterName;\n        });\n    };\n\n    /**\n     * Registers the gutter with the specified name at the given priority.\n     * @param {string} name    The name of the gutter.\n     * @param {number} priority  A number denoting the priority of the gutter. Priorities higher than LINE_NUMBER_GUTTER_PRIORITY appear after the line numbers. Priority less than LINE_NUMBER_GUTTER_PRIORITY appear before.\n     * @param {?Array<string>} [languageIds] A list of language ids that this gutter is valid for. If no language ids are passed, then the gutter is valid in all languages.\n     */\n    Editor.registerGutter = function (name, priority, languageIds) {\n        if (isNaN(priority)) {\n            console.warn(\"A non-numeric priority value was passed to registerGutter. The value will default to 0.\");\n            priority = 0;\n        }\n\n        if (!name || typeof name !== \"string\") {\n            console.error(\"The name of the registered gutter must be a string.\");\n            return;\n        }\n\n        var gutter = {name: name, priority: priority, languages: languageIds},\n            gutterExists = registeredGutters.some(function (gutter) {\n                return gutter.name === name;\n            });\n\n        if (!gutterExists) {\n            registeredGutters.push(gutter);\n        }\n\n        Editor.forEveryEditor(function (editor) {\n            editor._renderGutters();\n        });\n    };\n\n    /**\n     * Unregisters the gutter with the specified name and removes it from the UI.\n     * @param {string} name The name of the gutter to be unregistered.\n     */\n    Editor.unregisterGutter = function (name) {\n        var i, gutter;\n        registeredGutters = registeredGutters.filter(function (gutter) {\n            return gutter.name !== name;\n        });\n\n        Editor.forEveryEditor(function (editor) {\n            editor._renderGutters();\n        });\n    };\n\n    // Global settings that affect Editor instances that share the same preference locations\n\n    /**\n     * Sets whether to use tab characters (vs. spaces) when inserting new text.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setUseTabChar = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(USE_TAB_CHAR, value, options);\n    };\n\n    /**\n     * Gets whether the specified or current file uses tab characters (vs. spaces) when inserting new text\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getUseTabChar = function (fullPath) {\n        return PreferencesManager.get(USE_TAB_CHAR, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets tab character width.\n     * Affects any editors that share the same preference location.\n     * @param {number} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setTabSize = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(TAB_SIZE, value, options);\n    };\n\n    /**\n     * Get indent unit\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {number}\n     */\n    Editor.getTabSize = function (fullPath) {\n        return PreferencesManager.get(TAB_SIZE, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets indentation width.\n     * Affects any editors that share the same preference location.\n     * @param {number} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setSpaceUnits = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(SPACE_UNITS, value, options);\n    };\n\n    /**\n     * Get indentation width\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {number}\n     */\n    Editor.getSpaceUnits = function (fullPath) {\n        return PreferencesManager.get(SPACE_UNITS, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets the auto close brackets.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setCloseBrackets = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(CLOSE_BRACKETS, value, options);\n    };\n\n    /**\n     * Gets whether the specified or current file uses auto close brackets\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getCloseBrackets = function (fullPath) {\n        return PreferencesManager.get(CLOSE_BRACKETS, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets show line numbers option.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setShowLineNumbers = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(SHOW_LINE_NUMBERS, value, options);\n    };\n\n    /**\n     * Returns true if show line numbers is enabled for the specified or current file\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getShowLineNumbers = function (fullPath) {\n        return PreferencesManager.get(SHOW_LINE_NUMBERS, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets show active line option.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setShowActiveLine = function (value, fullPath) {\n        return PreferencesManager.set(STYLE_ACTIVE_LINE, value);\n    };\n\n    /**\n     * Returns true if show active line is enabled for the specified or current file\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getShowActiveLine = function (fullPath) {\n        return PreferencesManager.get(STYLE_ACTIVE_LINE, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets word wrap option.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setWordWrap = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(WORD_WRAP, value, options);\n    };\n\n    /**\n     * Returns true if word wrap is enabled for the specified or current file\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getWordWrap = function (fullPath) {\n        return PreferencesManager.get(WORD_WRAP, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Sets indentLineComment option.\n     * Affects any editors that share the same preference location.\n     * @param {boolean} value\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean} true if value was valid\n     */\n    Editor.setIndentLineComment = function (value, fullPath) {\n        var options = fullPath && {context: fullPath};\n        return PreferencesManager.set(INDENT_LINE_COMMENT, value, options);\n    };\n\n    /**\n     * Returns true if indentLineComment is enabled for the specified or current file\n     * @param {string=} fullPath Path to file to get preference for\n     * @return {boolean}\n     */\n    Editor.getIndentLineComment = function (fullPath) {\n        return PreferencesManager.get(INDENT_LINE_COMMENT, _buildPreferencesContext(fullPath));\n    };\n\n    /**\n     * Runs callback for every Editor instance that currently exists\n     * @param {!function(!Editor)} callback\n     */\n    Editor.forEveryEditor = function (callback) {\n        _instances.forEach(callback);\n    };\n\n    /**\n     * @private\n     * Toggles the left padding of all code editors.  Used to provide more\n     * space between the code text and the left edge of the editor when\n     * line numbers are hidden.\n     * @param {boolean} showLinePadding\n     */\n    Editor._toggleLinePadding = function (showLinePadding) {\n        // apply class to all pane DOM nodes\n        var $holders = [];\n        _instances.forEach(function (editor) {\n            var $editorHolder = editor.$el.parent();\n            if ($holders.indexOf($editorHolder) === -1) {\n                $holders.push($editorHolder);\n            }\n        });\n\n        _.each($holders, function ($holder) {\n            $holder.toggleClass(\"show-line-padding\", Boolean(showLinePadding));\n        });\n    };\n\n    Editor.LINE_NUMBER_GUTTER_PRIORITY = LINE_NUMBER_GUTTER_PRIORITY;\n    Editor.CODE_FOLDING_GUTTER_PRIORITY = CODE_FOLDING_GUTTER_PRIORITY;\n\n    /**\n     * Mark options to use with API with Editor.markText or Editor.markToken.\n     */\n    Editor.MARK_OPTION_UNDERLINE_ERROR = MARK_OPTION_UNDERLINE_ERROR;\n    Editor.MARK_OPTION_UNDERLINE_WARN = MARK_OPTION_UNDERLINE_WARN;\n    Editor.MARK_OPTION_UNDERLINE_INFO = MARK_OPTION_UNDERLINE_INFO;\n    Editor.MARK_OPTION_UNDERLINE_SPELLCHECK = MARK_OPTION_UNDERLINE_SPELLCHECK;\n    Editor.MARK_OPTION_HYPERLINK_TEXT = MARK_OPTION_HYPERLINK_TEXT;\n    Editor.MARK_OPTION_MATCHING_REFS = MARK_OPTION_MATCHING_REFS;\n    Editor.MARK_OPTION_RENAME_OUTLINE = MARK_OPTION_RENAME_OUTLINE;\n\n    /**\n     * Each Editor instance object dispatches the following events:\n     *    - keydown, keypress, keyup -- When any key event happens in the editor (whether it changes the\n     *      text or not). Handlers are passed `(BracketsEvent, Editor, KeyboardEvent)`. The 3nd arg is the\n     *      raw DOM event. Note: most listeners will only want to listen for \"keypress\".\n     *    - change - Triggered with an array of change objects. Parameters: (editor, changeList)\n     *    - beforeChange - (self, changeObj)\n     *    - beforeSelectionChange - (selectionObj)\n     *    - focus - Fired when an editor is focused\n     *    - blur - Fired when an editor loses focused\n     *    - update - Will be fired whenever Editor updates its DOM display.\n     *    - cursorActivity -- When the user moves the cursor or changes the selection, or an edit occurs.\n     *      Note: do not listen to this in order to be generally informed of edits--listen to the\n     *      \"change\" event on Document instead.\n     *    - scroll -- When the editor is scrolled, either by user action or programmatically.\n     *    - viewportChange - (from: number, to: number) Fires whenever the view port of the editor changes\n     *      (due to scrolling, editing, or any other factor). The from and to arguments give the new start\n     *      and end of the viewport. This is combination with `editorInstance.getViewPort()` can be used to\n     *      selectively redraw visual elements in code like syntax analyze only parts of code instead\n     *      of the full code everytime.\n     *    - lostContent -- When the backing Document changes in such a way that this Editor is no longer\n     *      able to display accurate text. This occurs if the Document's file is deleted, or in certain\n     *      Document->editor syncing edge cases that we do not yet support (the latter cause will\n     *      eventually go away).\n     *    - optionChange -- Triggered when an option for the editor is changed. The 2nd arg to the listener\n     *      is a string containing the editor option that is changing. The 3rd arg, which can be any\n     *      data type, is the new value for the editor option.\n     *    - beforeDestroy - Triggered before the object is about to dispose of all its internal state data\n     *      so that listeners can cache things like scroll pos, etc...\n     */\n    Editor.EVENT_BEFORE_CHANGE = \"beforeChange\";\n    Editor.EVENT_CHANGE = \"change\";\n    Editor.EVENT_BEFORE_SELECTION_CHANGE = \"beforeSelectionChange\";\n    Editor.EVENT_CURSOR_ACTIVITY = \"cursorActivity\";\n    Editor.EVENT_KEY_PRESS = \"keypress\";\n    Editor.EVENT_KEY_DOWN = \"keydown\";\n    Editor.EVENT_KEY_UP = \"keyup\";\n    Editor.EVENT_FOCUS = \"focus\";\n    Editor.EVENT_BLUR = \"blur\";\n    Editor.EVENT_UPDATE = \"update\";\n    Editor.EVENT_SCROLL = \"scroll\";\n    Editor.EVENT_VIEW_PORT_CHANGE = \"viewportChange\";\n    Editor.EVENT_LOST_CONTENT = \"lostContent\";\n    Editor.EVENT_OPTION_CHANGE = \"optionChange\";\n\n    // Set up listeners for preference changes\n    editorOptions.forEach(function (prefName) {\n        PreferencesManager.on(\"change\", prefName, function () {\n            _instances.forEach(function (editor) {\n                editor._updateOption(prefName);\n            });\n        });\n    });\n\n    // Define public API\n    exports.Editor                  = Editor;\n    exports.BOUNDARY_CHECK_NORMAL   = BOUNDARY_CHECK_NORMAL;\n    exports.BOUNDARY_IGNORE_TOP     = BOUNDARY_IGNORE_TOP;\n    exports.BOUNDARY_BULLSEYE      = BOUNDARY_BULLSEYE;\n});\n"],"file":"Editor.js"}