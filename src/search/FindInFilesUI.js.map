{"version":3,"sources":["search/FindInFilesUI.js"],"names":["define","require","exports","module","AppInit","CommandManager","Commands","Dialogs","DefaultDialogs","EditorManager","WorkspaceManager","FileFilters","FileUtils","FindBar","FindInFiles","FindUtils","InMemoryFile","ProjectManager","SearchResultsView","StatusBar","Strings","StringUtils","Metrics","_","MAX_IN_MEMORY","_resultsView","_findBar","_finishReplaceBatch","searchAndShowResults","queryInfo","scope","filter","replaceText","candidateFilesPromise","doSearchInScope","done","zeroFilesToken","searchModel","hasResults","open","enable","focus","close","showMessage","ZERO_FILES_TO_SEARCH","showError","format","FIND_IN_FILES_ZERO_FILES","labelForScope","showNoResults","hideBusyIndicator","fail","err","console","log","searchAndReplaceResults","_showFindBar","showReplace","notifySearchScopeChanged","canOpenPath","fullPath","execute","FILE_OPEN","CMD_FIND","currentEditor","getActiveEditor","focussedEditor","getFocusedEditor","_$previewEditor","editor","hasFocus","initialQuery","getInitialQuery","multifile","replace","query","initialReplaceText","queryPlaceholder","FIND_QUERY_PLACEHOLDER","scopeLabel","_modalBar","isLockedOpen","isEnabled","$","length","getCandidateFiles","filterPicker","handleQueryChange","getQueryInfo","queryResult","parseQueryInfo","enableReplace","valid","empty","error","startSearch","disableFindBar","showBusyIndicator","queryType","isRegexp","isCaseSensitive","countEvent","EVENT_TYPE","SEARCH","commitPicker","startReplace","getReplaceText","on","e","off","_options","selectNextResult","selectPrevResult","selectNextPage","selectPrevPage","OpenSelectedFile","oldModalBarHeight","height","isDirectory","exclusionsContext","label","promise","createFilterPicker","getRoot","find","append","fullEditor","getCurrentFullEditor","scrollPos","getScrollPos","y","recomputeLayout","_codeMirror","scrollTo","x","model","resultsClone","cloneDeep","results","replacedFiles","Object","keys","path","hasCheckedMatches","processReplace","showModalDialog","DIALOG_ID_INFO","REPLACE_WITHOUT_UNDO_WARNING_TITLE","REPLACE_WITHOUT_UNDO_WARNING","className","DIALOG_BTN_CLASS_NORMAL","id","DIALOG_BTN_CANCEL","text","CANCEL","DIALOG_BTN_CLASS_PRIMARY","DIALOG_BTN_OK","BUTTON_REPLACE_WITHOUT_UNDO","forceFilesOpen","doReplace","errors","message","REPLACE_IN_FILES_ERRORS","makeDialogFileList","map","errorInfo","makeProjectRelativeIfPossible","item","DIALOG_ID_ERROR","REPLACE_IN_FILES_ERRORS_TITLE","always","_showReplaceBar","_showFindBarForSubtree","selectedEntry","getSelectedItem","_showReplaceBarForSubtree","_closeFindBar","_searchIndexingStarted","isIndexingInProgress","showIndexingSpinner","_searchIndexingProgressing","_evt","processed","total","progressMessage","FIND_IN_FILES_INDEXING_PROGRESS","setIndexingMessage","_searchIndexingFinished","hideIndexingSpinner","_defferedSearch","redoInstantSearch","_searchIfRequired","isInstantSearchDisabled","setTimeout","closeResultsPanel","htmlReady","clearSearch","getNextPageofSearchResults","showNextPage","getAllSearchResults","showLastPage","register","CMD_FIND_IN_FILES","CMD_FIND_IN_SUBTREE","CMD_REPLACE_IN_FILES","CMD_REPLACE_IN_SUBTREE","SEARCH_INDEXING_STARTED","SEARCH_INDEXING_PROGRESS","SEARCH_INDEXING_FINISHED","SEARCH_FILE_FILTERS_CHANGED","SEARCH_SCOPE_CHANGED"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*\n * UI and controller logic for find/replace across multiple files within the project.\n *\n * FUTURE:\n *  - Handle matches that span multiple lines\n */\ndefine(function (require, exports, module) {\n\n\n    var AppInit           = require(\"utils/AppInit\"),\n        CommandManager    = require(\"command/CommandManager\"),\n        Commands          = require(\"command/Commands\"),\n        Dialogs           = require(\"widgets/Dialogs\"),\n        DefaultDialogs    = require(\"widgets/DefaultDialogs\"),\n        EditorManager     = require(\"editor/EditorManager\"),\n        WorkspaceManager  = require(\"view/WorkspaceManager\"),\n        FileFilters       = require(\"search/FileFilters\"),\n        FileUtils         = require(\"file/FileUtils\"),\n        FindBar           = require(\"search/FindBar\").FindBar,\n        FindInFiles       = require(\"search/FindInFiles\"),\n        FindUtils         = require(\"search/FindUtils\"),\n        InMemoryFile      = require(\"document/InMemoryFile\"),\n        ProjectManager    = require(\"project/ProjectManager\"),\n        SearchResultsView = require(\"search/SearchResultsView\").SearchResultsView,\n        StatusBar         = require(\"widgets/StatusBar\"),\n        Strings           = require(\"strings\"),\n        StringUtils       = require(\"utils/StringUtils\"),\n        Metrics           = require(\"utils/Metrics\"),\n        _                 = require(\"thirdparty/lodash\");\n\n\n    /** @const Maximum number of files to do replacements in-memory instead of on disk. */\n    var MAX_IN_MEMORY = 20;\n\n    /** @type {SearchResultsView} The results view. Initialized in htmlReady() */\n    var _resultsView = null;\n\n    /** @type {FindBar} Find bar containing the search UI. */\n    var _findBar = null;\n\n    /**\n     * @private\n     * Forward declaration for JSLint.\n     * @type {Function}\n     */\n    var _finishReplaceBatch;\n\n    /**\n     * Does a search in the given scope with the given filter. Shows the result list once the search is complete.\n     * @param {{query: string, caseSensitive: boolean, isRegexp: boolean}} queryInfo Query info object\n     * @param {?Entry} scope Project file/subfolder to search within; else searches whole project.\n     * @param {?string} filter A \"compiled\" filter as returned by FileFilters.compile(), or null for no filter\n     * @param {?string} replaceText If this is a replacement, the text to replace matches with.\n     * @param {?$.Promise} candidateFilesPromise If specified, a promise that should resolve with the same set of files that\n     *      getCandidateFiles(scope) would return.\n     * @return {$.Promise} A promise that's resolved with the search results or rejected when the find competes.\n     */\n    function searchAndShowResults(queryInfo, scope, filter, replaceText, candidateFilesPromise) {\n        return FindInFiles.doSearchInScope(queryInfo, scope, filter, replaceText, candidateFilesPromise)\n            .done(function (zeroFilesToken) {\n                // Done searching all files: show results\n                if (FindInFiles.searchModel.hasResults()) {\n                    _resultsView.open();\n\n                    if (_findBar) {\n                        _findBar.enable(true);\n                        _findBar.focus();\n                    }\n\n                } else {\n                    _resultsView.close();\n\n                    if (_findBar) {\n                        var showMessage = false;\n                        _findBar.enable(true);\n                        if (zeroFilesToken === FindInFiles.ZERO_FILES_TO_SEARCH) {\n                            _findBar.showError(StringUtils.format(Strings.FIND_IN_FILES_ZERO_FILES,\n                                FindUtils.labelForScope(FindInFiles.searchModel.scope)), true);\n                        } else {\n                            showMessage = true;\n                        }\n                        _findBar.showNoResults(true, showMessage);\n                    }\n                }\n\n                StatusBar.hideBusyIndicator();\n            })\n            .fail(function (err) {\n                console.log(\"find in files failed: \", err);\n                StatusBar.hideBusyIndicator();\n            });\n    }\n\n    /**\n     * Does a search in the given scope with the given filter. Replace the result list once the search is complete.\n     * @param {{query: string, caseSensitive: boolean, isRegexp: boolean}} queryInfo Query info object\n     * @param {?Entry} scope Project file/subfolder to search within; else searches whole project.\n     * @param {?string} filter A \"compiled\" filter as returned by FileFilters.compile(), or null for no filter\n     * @param {?string} replaceText If this is a replacement, the text to replace matches with.\n     * @param {?$.Promise} candidateFilesPromise If specified, a promise that should resolve with the same set of files that\n     *      getCandidateFiles(scope) would return.\n     * @return {$.Promise} A promise that's resolved with the search results or rejected when the find competes.\n     */\n    function searchAndReplaceResults(queryInfo, scope, filter, replaceText, candidateFilesPromise) {\n        return FindInFiles.doSearchInScope(queryInfo, scope, filter, replaceText, candidateFilesPromise)\n            .done(function (zeroFilesToken) {\n                // Done searching all files: replace all\n                if (FindInFiles.searchModel.hasResults()) {\n                    _finishReplaceBatch(FindInFiles.searchModel);\n\n                    if (_findBar) {\n                        _findBar.enable(true);\n                        _findBar.focus();\n                    }\n\n                }\n                StatusBar.hideBusyIndicator();\n            })\n            .fail(function (err) {\n                console.log(\"replace all failed: \", err);\n                StatusBar.hideBusyIndicator();\n            });\n    }\n\n    /**\n     * @private\n     * Displays a non-modal embedded dialog above the code mirror editor that allows the user to do\n     * a find operation across all files in the project.\n     * @param {?Entry} scope  Project file/subfolder to search within; else searches whole project.\n     * @param {boolean=} showReplace If true, show the Replace controls.\n     */\n    function _showFindBar(scope, showReplace) {\n        FindUtils.notifySearchScopeChanged();\n        // If the scope is a file with a custom viewer, then we\n        // don't show find in files dialog.\n        if (scope && !EditorManager.canOpenPath(scope.fullPath)) {\n            return;\n        }\n\n        if (scope instanceof InMemoryFile) {\n            CommandManager.execute(Commands.FILE_OPEN, { fullPath: scope.fullPath }).done(function () {\n                CommandManager.execute(Commands.CMD_FIND);\n            });\n            return;\n        }\n\n        // Get initial query/replace text\n        let currentEditor = EditorManager.getActiveEditor();\n        let focussedEditor = EditorManager.getFocusedEditor();\n        if(!focussedEditor && _resultsView._$previewEditor && _resultsView._$previewEditor.editor\n            && _resultsView._$previewEditor.editor.hasFocus()){\n            currentEditor =  _resultsView._$previewEditor.editor;\n        }\n\n        let initialQuery = FindBar.getInitialQuery(_findBar, currentEditor);\n\n        // Close our previous find bar, if any. (The open() of the new _findBar will\n        // take care of closing any other find bar instances.)\n        if (_findBar) {\n            _findBar.close();\n        }\n\n        _findBar = new FindBar({\n            multifile: true,\n            replace: showReplace,\n            initialQuery: initialQuery.query,\n            initialReplaceText: initialQuery.replaceText,\n            queryPlaceholder: Strings.FIND_QUERY_PLACEHOLDER,\n            scopeLabel: FindUtils.labelForScope(scope)\n        });\n        _findBar.open();\n\n        // TODO Should push this state into ModalBar (via a FindBar API) instead of installing a callback like this.\n        // Custom closing behavior: if in the middle of executing search, blur shouldn't close ModalBar yet. And\n        // don't close bar when opening Edit Filter dialog either.\n        _findBar._modalBar.isLockedOpen = function () {\n            // TODO: should have state for whether the search is executing instead of looking at find bar state\n            // TODO: should have API on filterPicker to figure out if dialog is open\n            return !_findBar.isEnabled() || $(\".modal.instance .exclusions-editor\").length > 0;\n        };\n\n        var candidateFilesPromise = FindInFiles.getCandidateFiles(scope),  // used for eventual search, and in exclusions editor UI\n            filterPicker;\n\n        function handleQueryChange() {\n            // Check the query expression on every input event. This way the user is alerted\n            // to any RegEx syntax errors immediately.\n            var queryInfo = _findBar.getQueryInfo(),\n                queryResult = FindUtils.parseQueryInfo(queryInfo);\n\n            // Enable the replace button appropriately.\n            _findBar.enableReplace(queryResult.valid);\n\n            if (queryResult.valid || queryResult.empty) {\n                _findBar.showNoResults(false);\n                _findBar.showError(null);\n            } else {\n                _findBar.showNoResults(true, false);\n                _findBar.showError(queryResult.error);\n            }\n        }\n\n        function startSearch(replaceText) {\n            var queryInfo = _findBar.getQueryInfo(),\n                disableFindBar = (replaceText ? true : false);\n            if (queryInfo && queryInfo.query) {\n                _findBar.enable(!disableFindBar);\n                StatusBar.showBusyIndicator(disableFindBar);\n                let queryType = \"query\";\n                if (queryInfo.isRegexp) {\n                    queryType = queryType + \":regex\";\n                }\n                if (queryInfo.isCaseSensitive) {\n                    queryType = queryType + \":caseSensitive\";\n                }\n                Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, \"findInFiles\", queryType);\n\n                var filter;\n                if (filterPicker) {\n                    filter = FileFilters.commitPicker(filterPicker);\n                } else {\n                    // Single-file scope: don't use any file filters\n                    filter = null;\n                }\n                searchAndShowResults(queryInfo, scope, filter, replaceText, candidateFilesPromise);\n            }\n            return null;\n        }\n\n        function startReplace() {\n            startSearch(_findBar.getReplaceText());\n        }\n\n        _findBar\n            .on(\"doFind.FindInFiles\", function () {\n                // Subtle issue: we can't just pass startSearch directly as the handler, because\n                // we don't want it to get the event object as an argument.\n                startSearch();\n            })\n            .on(\"queryChange.FindInFiles\", handleQueryChange)\n            .on(\"close.FindInFiles\", function (e) {\n                _findBar.off(\".FindInFiles\");\n                _findBar = null;\n            })\n            .on(\"selectNextResult\", function () {\n                if (_findBar && _findBar._options.multifile){\n                    _resultsView.selectNextResult();\n                }\n            })\n            .on(\"selectPrevResult\", function () {\n                if (_findBar && _findBar._options.multifile){\n                    _resultsView.selectPrevResult();\n                }\n            })\n            .on(\"selectNextPage\", function () {\n                if (_findBar && _findBar._options.multifile){\n                    _resultsView.selectNextPage();\n                }\n            })\n            .on(\"selectPrevPage\", function () {\n                if (_findBar && _findBar._options.multifile){\n                    _resultsView.selectPrevPage();\n                }\n            })\n            .on(\"openSelectedFile\", function () {\n                if (_findBar && _findBar._options.multifile){\n                    _resultsView.OpenSelectedFile();\n                }\n            });\n\n        if (showReplace) {\n            // We shouldn't get a \"doReplace\" in this case, since the Replace button\n            // is hidden when we set options.multifile.\n            _findBar.on(\"doReplaceBatch.FindInFiles\", startReplace);\n        }\n\n        var oldModalBarHeight = _findBar._modalBar.height();\n\n        // Show file-exclusion UI *unless* search scope is just a single file\n        if (!scope || scope.isDirectory) {\n            var exclusionsContext = {\n                label: FindUtils.labelForScope(scope),\n                promise: candidateFilesPromise\n            };\n\n            filterPicker = FileFilters.createFilterPicker(exclusionsContext);\n            // TODO: include in FindBar? (and disable it when FindBar is disabled)\n            _findBar._modalBar.getRoot().find(\".scope-group\").append(filterPicker);\n        }\n\n        handleQueryChange();\n        startSearch();\n\n        // Appending FilterPicker and query text can change height of modal bar, so resize editor.\n        // Preserve scroll position of the current full editor across the editor refresh, adjusting\n        // for the height of the modal bar so the code doesn't appear to shift if possible.\n        var fullEditor = EditorManager.getCurrentFullEditor(),\n            scrollPos;\n        if (fullEditor) {\n            scrollPos = fullEditor.getScrollPos();\n            scrollPos.y -= oldModalBarHeight;   // modalbar already showing, adjust for old height\n        }\n        WorkspaceManager.recomputeLayout();\n        if (fullEditor) {\n            fullEditor._codeMirror.scrollTo(scrollPos.x, scrollPos.y + _findBar._modalBar.height());\n        }\n    }\n\n    /**\n     * @private\n     * Finish a replace across files operation when the user clicks \"Replace\" on the results panel.\n     * @param {SearchModel} model The model for the search associated with ths replace.\n     */\n    function _finishReplaceBatch(model) {\n        var replaceText = model.replaceText;\n        if (replaceText === null) {\n            return;\n        }\n\n        // Clone the search results so that they don't get updated in the middle of the replacement.\n        var resultsClone = _.cloneDeep(model.results),\n            replacedFiles = Object.keys(resultsClone).filter(function (path) {\n                return FindUtils.hasCheckedMatches(resultsClone[path]);\n            }),\n            isRegexp = model.queryInfo.isRegexp;\n\n        function processReplace(forceFilesOpen) {\n            StatusBar.showBusyIndicator(true);\n            FindInFiles.doReplace(resultsClone, replaceText, { forceFilesOpen: forceFilesOpen, isRegexp: isRegexp })\n                .fail(function (errors) {\n                    var message = Strings.REPLACE_IN_FILES_ERRORS + FileUtils.makeDialogFileList(\n                            errors.map(function (errorInfo) {\n                                return ProjectManager.makeProjectRelativeIfPossible(errorInfo.item);\n                            })\n                        );\n\n                    Dialogs.showModalDialog(\n                        DefaultDialogs.DIALOG_ID_ERROR,\n                        Strings.REPLACE_IN_FILES_ERRORS_TITLE,\n                        message,\n                        [\n                            {\n                                className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                                id: Dialogs.DIALOG_BTN_OK,\n                                text: Strings.BUTTON_REPLACE_WITHOUT_UNDO\n                            }\n                        ]\n                    );\n                })\n                .always(function () {\n                    StatusBar.hideBusyIndicator();\n                });\n        }\n\n        if (replacedFiles.length <= MAX_IN_MEMORY) {\n            // Just do the replacements in memory.\n            _resultsView.close();\n            processReplace(true);\n        } else {\n            Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_INFO,\n                Strings.REPLACE_WITHOUT_UNDO_WARNING_TITLE,\n                StringUtils.format(Strings.REPLACE_WITHOUT_UNDO_WARNING, MAX_IN_MEMORY),\n                [\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_NORMAL,\n                        id: Dialogs.DIALOG_BTN_CANCEL,\n                        text: Strings.CANCEL\n                    },\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                        id: Dialogs.DIALOG_BTN_OK,\n                        text: Strings.BUTTON_REPLACE_WITHOUT_UNDO\n                    }\n                ]\n            )\n                .done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_OK) {\n                        _resultsView.close();\n                        processReplace(false);\n                    }\n                });\n        }\n    }\n\n    // Command handlers\n\n    /**\n     * @private\n     * Bring up the Find in Files UI with the replace options.\n     */\n    function _showReplaceBar() {\n        FindUtils.notifySearchScopeChanged();\n        _showFindBar(null, true);\n    }\n\n    /**\n     * @private\n     * Search within the file/subtree defined by the sidebar selection\n     */\n    function _showFindBarForSubtree() {\n        FindUtils.notifySearchScopeChanged();\n        var selectedEntry = ProjectManager.getSelectedItem();\n        _showFindBar(selectedEntry);\n    }\n\n    /**\n     * @private\n     * Search within the file/subtree defined by the sidebar selection\n     */\n    function _showReplaceBarForSubtree() {\n        FindUtils.notifySearchScopeChanged();\n        var selectedEntry = ProjectManager.getSelectedItem();\n        _showFindBar(selectedEntry, true);\n    }\n\n    /**\n     * @private\n     * Close the open search bar, if any. For unit tests.\n     */\n    function _closeFindBar() {\n        if (_findBar) {\n            _findBar.close();\n        }\n    }\n\n    /**\n     * When the search indexing is started, we need to show the indexing status on the find bar if present.\n     */\n    function _searchIndexingStarted() {\n        if (_findBar && _findBar._options.multifile && FindUtils.isIndexingInProgress()) {\n            _findBar.showIndexingSpinner();\n        }\n    }\n\n    /**\n     * When the search indexing is started, we need to show the indexing status on the find bar if present.\n     */\n    function _searchIndexingProgressing(_evt, processed, total) {\n        if (_findBar && _findBar._options.multifile && FindUtils.isIndexingInProgress()) {\n            let progressMessage = StringUtils.format(Strings.FIND_IN_FILES_INDEXING_PROGRESS, processed, total);\n            _findBar.setIndexingMessage(progressMessage);\n        }\n    }\n\n    /**\n     * Once the indexing has finished, clear the indexing spinner\n     */\n    function _searchIndexingFinished() {\n        if (_findBar) {\n            _findBar.hideIndexingSpinner();\n        }\n    }\n\n    /**\n     * Issues a search if find bar is visible and is multi file search and not instant search\n     */\n    function _defferedSearch() {\n        if (_findBar && _findBar._options.multifile && !_findBar._options.replace) {\n            _findBar.redoInstantSearch();\n        }\n    }\n\n    /**\n     * Schedules a search on search scope/filter changes. Have to schedule as when we listen to this event, the file filters\n     * might not have been updated yet.\n     */\n    function _searchIfRequired() {\n        if (!FindUtils.isInstantSearchDisabled() && _findBar && _findBar._options.multifile && !_findBar._options.replace) {\n            setTimeout(_defferedSearch, 100);\n        }\n    }\n\n    /**\n    * @public\n    * Closes the search results panel\n    */\n    function closeResultsPanel() {\n        _resultsView.close();\n        _closeFindBar();\n    }\n\n    // Initialize items dependent on HTML DOM\n    AppInit.htmlReady(function () {\n        var model = FindInFiles.searchModel;\n        _resultsView = new SearchResultsView(model, \"find-in-files-results\", \"find-in-files.results\");\n        _resultsView\n            .on(\"replaceBatch\", function () {\n                _finishReplaceBatch(model);\n            })\n            .on(\"close\", function () {\n                FindInFiles.clearSearch();\n            })\n            .on(\"getNextPage\", function () {\n                FindInFiles.getNextPageofSearchResults().done(function () {\n                    if (FindInFiles.searchModel.hasResults()) {\n                        _resultsView.showNextPage();\n                    }\n                });\n            })\n            .on(\"getLastPage\", function () {\n                FindInFiles.getAllSearchResults().done(function () {\n                    if (FindInFiles.searchModel.hasResults()) {\n                        _resultsView.showLastPage();\n                    }\n                });\n            });\n    });\n\n    // Initialize: register listeners\n    ProjectManager.on(\"beforeProjectClose\", function () { _resultsView.close(); });\n\n    // Initialize: command handlers\n    CommandManager.register(Strings.CMD_FIND_IN_FILES,       Commands.CMD_FIND_IN_FILES,       _showFindBar);\n    CommandManager.register(Strings.CMD_FIND_IN_SUBTREE,     Commands.CMD_FIND_IN_SUBTREE,     _showFindBarForSubtree);\n\n    CommandManager.register(Strings.CMD_REPLACE_IN_FILES,    Commands.CMD_REPLACE_IN_FILES,    _showReplaceBar);\n    CommandManager.register(Strings.CMD_REPLACE_IN_SUBTREE,  Commands.CMD_REPLACE_IN_SUBTREE,  _showReplaceBarForSubtree);\n\n    FindUtils.on(FindUtils.SEARCH_INDEXING_STARTED, _searchIndexingStarted);\n    FindUtils.on(FindUtils.SEARCH_INDEXING_PROGRESS, _searchIndexingProgressing);\n    FindUtils.on(FindUtils.SEARCH_INDEXING_FINISHED, _searchIndexingFinished);\n    FindUtils.on(FindUtils.SEARCH_FILE_FILTERS_CHANGED, _searchIfRequired);\n    FindUtils.on(FindUtils.SEARCH_SCOPE_CHANGED, _searchIfRequired);\n\n    // Public exports\n    exports.searchAndShowResults = searchAndShowResults;\n    exports.searchAndReplaceResults = searchAndReplaceResults;\n    exports.closeResultsPanel = closeResultsPanel;\n\n    // For unit testing\n    exports._showFindBar  = _showFindBar;\n    exports._closeFindBar = _closeFindBar;\n});\n"],"file":"FindInFilesUI.js"}