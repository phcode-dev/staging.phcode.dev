{"version":3,"sources":["search/FindBar.js"],"names":["define","require","exports","module","_","Mustache","EventDispatcher","Commands","KeyBindingManager","KeyEvent","ModalBar","PreferencesManager","MainViewManager","Strings","ViewUtils","FindUtils","QuickSearchField","Metrics","_searchBarTemplate","intervalId","lastQueriedText","lastTypedText","lastTypedTextWasRegexp","MAX_HISTORY_RESULTS","PREF_MAX_HISTORY","INSTANT_SEARCH_INTERVAL_MS","FindBar","options","defaults","multifile","replace","queryPlaceholder","initialQuery","initialReplaceText","scopeLabel","this","_options","extend","_closed","_enabled","_updateHistory","whichHistory","searchVal","searchHistory","getViewState","maxCount","get","searchQueryIndex","indexOf","splice","length","pop","unshift","setViewState","makeEventDispatcher","prototype","_addFindBar","findBar","_bars","push","_removeFindBar","pull","_closeFindBars","bars","forEach","bar","close","_modalBar","$","selector","getRoot","_updateSearchBarFromPrefs","toggleClass","_updatePrefsFromSearchBar","isRegexp","is","_addShortcutToTooltip","$elem","commandId","replaceShortcut","getKeyBindingsDisplay","oldTitle","attr","_addElementToSearchHistory","filterVal","open","self","metricType","countEvent","EVENT_TYPE","SEARCH","templateVars","clone","_handleKeydown","e","keyCode","DOM_VK_ESCAPE","stopPropagation","preventDefault","_keydownHookForCtrlSpace","event","ctrlSpaceEvent","ctrlKey","metaKey","DOM_VK_SPACE","showSearchHints","showFilterHints","replaceBatchLabel","BUTTON_REPLACE_ALL_IN_FILES","BUTTON_REPLACE_BATCH","replaceAllLabel","BUTTON_REPLACE_ALL","render","window","document","body","addEventListener","addGlobalKeydownHook","on","removeGlobalKeydownHook","removeEventListener","showError","clearInterval","focusActivePane","trigger","searchField","destroy","filterField","executeSearchIfNeeded","isInstantSearchDisabled","getQueryInfo","query","isWorkerSearchInProgress","setInterval","$root","historyIndex","queryInfo","currentTarget","setTimeout","focus","DOM_VK_RETURN","val","target","focusReplace","shiftKey","DOM_VK_DOWN","DOM_VK_UP","DOM_VK_PAGE_DOWN","DOM_VK_PAGE_UP","CMD_FIND_NEXT","CMD_FIND_PREVIOUS","CMD_REPLACE","DOM_VK_TAB","altKey","id","isIndexingInProgress","showIndexingSpinner","focusQuery","_showHintsInternal","inputElemId","stateVarName","fieldName","dontFilterHistory","_dontFilterHistory","inputField","verticalAdjust","offset","top","outerHeight","maxResults","firstHighlightIndex","resultProvider","asyncResult","Deferred","history","filter","historyItem","toLowerCase","includes","resolve","promise","formatter","item","onCommit","selectedItem","itemIndex","setText","deletedItem","onDismiss","onDelete","deletedIndex","onHighlight","explicit","highlightZeroResults","focusLastActiveElementOnClose","suppressAnimation","isClosed","getOptions","isCaseSensitive","error","isHTML","isFilterError","$findError","$filterError","$error","hide","html","text","show","showFindCount","count","showNoResults","showIndicator","showMessage","$filterInput","$findWhat","removeClass","$borderEl","$msg","getReplaceText","enable","prop","isEnabled","isReplaceEnabled","enableNavigation","enableReplace","_focus","select","setIndexingMessage","FIND_IN_FILES_INDEXING","message","hideIndexingSpinner","addClass","redoInstantSearch","_getInitialQueryFromSelection","editor","selectionText","getSelectedText","split","getInitialQuery","currentFindBar","selection","replaceText","openedFindBar","find","stateManager","definePreference","description","FIND_HISTORY_MAX_COUNT"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*\n * UI for the Find/Replace and Find in Files modal bar.\n */\ndefine(function (require, exports, module) {\n\n\n    const _                  = require(\"thirdparty/lodash\"),\n        Mustache           = require(\"thirdparty/mustache/mustache\"),\n        EventDispatcher    = require(\"utils/EventDispatcher\"),\n        Commands           = require(\"command/Commands\"),\n        KeyBindingManager  = require(\"command/KeyBindingManager\"),\n        KeyEvent           = require(\"utils/KeyEvent\"),\n        ModalBar           = require(\"widgets/ModalBar\").ModalBar,\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        MainViewManager    = require(\"view/MainViewManager\"),\n        Strings            = require(\"strings\"),\n        ViewUtils          = require(\"utils/ViewUtils\"),\n        FindUtils          = require(\"search/FindUtils\"),\n        QuickSearchField   = require(\"search/QuickSearchField\").QuickSearchField,\n        Metrics            = require(\"utils/Metrics\");\n\n    /**\n     * @private\n     * The template we use for all Find bars.\n     * @type {string}\n     */\n    const _searchBarTemplate = require(\"text!htmlContent/findreplace-bar.html\");\n\n    let intervalId = 0,\n        lastQueriedText = \"\",\n        lastTypedText = \"\",\n        lastTypedTextWasRegexp = false;\n    const MAX_HISTORY_RESULTS = 50;\n    const PREF_MAX_HISTORY = \"maxSearchHistory\";\n\n    const INSTANT_SEARCH_INTERVAL_MS = 50;\n\n    /**\n     * @constructor\n     * Find Bar UI component, used for both single- and multi-file find/replace. This doesn't actually\n     * create and add the FindBar to the DOM - for that, call open().\n     *\n     * Dispatches these events:\n     *\n     * - queryChange - when the user types in the input field or sets a query option. Use getQueryInfo()\n     *      to get the current query state.\n     * - doFind - when the user chooses to do a Find Previous or Find Next.\n     *      Parameters are:\n     *          shiftKey - boolean, false for Find Next, true for Find Previous\n     * - doReplace - when the user chooses to do a single replace. Use getReplaceText() to get the current replacement text.\n     * - doReplaceBatch - when the user chooses to initiate a Replace All. Use getReplaceText() to get the current replacement text.\n     * - doReplaceAll - when the user chooses to perform a Replace All. Use getReplaceText() to get the current replacement text.\n     *-  close - when the find bar is closed\n     *\n     * @param {boolean=} options.multifile - true if this is a Find/Replace in Files (changes the behavior of Enter in\n     *      the fields, hides the navigator controls, shows the scope/filter controls, and if in replace mode, hides the\n     *      Replace button (so there's only Replace All)\n     * @param {boolean=} options.replace - true to show the Replace controls - default false\n     * @param {string=}  options.queryPlaceholder - label to show in the Find field - default empty string\n     * @param {string=}  options.initialQuery - query to populate in the Find field on open - default empty string\n     * @param {string=}  scopeLabel - HTML label to show for the scope of the search, expected to be already escaped - default empty string\n     */\n    function FindBar(options) {\n        var defaults = {\n            multifile: false,\n            replace: false,\n            queryPlaceholder: \"\",\n            initialQuery: \"\",\n            initialReplaceText: \"\",\n            scopeLabel: \"\"\n        };\n        this._options = _.extend(defaults, options);\n        this._closed = false;\n        this._enabled = true;\n    }\n    EventDispatcher.makeEventDispatcher(FindBar.prototype);\n\n    /*\n     * Global FindBar functions for making sure only one is open at a time.\n     */\n\n    // TODO: this is temporary - we should do this at the ModalBar level, but can't do that until\n    // we land the simplified Quick Open UI (#7227) that eliminates some asynchronicity in closing\n    // its ModalBar.\n\n    /**\n     * @private\n     * Register a find bar so we can close it later if another one tries to open.\n     * Note that this is a global function, not an instance function.\n     * @param {!FindBar} findBar The find bar to register.\n     */\n    FindBar._addFindBar = function (findBar) {\n        FindBar._bars = FindBar._bars || [];\n        FindBar._bars.push(findBar);\n    };\n\n    /**\n     * @private\n     * Remove a find bar from the list.\n     * Note that this is a global function, not an instance function.\n     * @param {FindBar} findBar The bar to remove.\n     */\n    FindBar._removeFindBar = function (findBar) {\n        if (FindBar._bars) {\n            _.pull(FindBar._bars, findBar);\n        }\n    };\n\n    /**\n     * @private\n     * Close all existing find bars. In theory there should be only one, but since there can be\n     * timing issues due to animation we maintain a list.\n     * Note that this is a global function, not an instance function.\n     */\n    FindBar._closeFindBars = function () {\n        var bars = FindBar._bars;\n        if (bars) {\n            bars.forEach(function (bar) {\n                bar.close(true, false);\n            });\n            bars = [];\n        }\n    };\n\n    /*\n     * Instance properties/functions\n     */\n\n    /**\n     * @private\n     * Options passed into the FindBar.\n     * @type {!{multifile: boolean, replace: boolean, queryPlaceholder: string, initialQuery: string, scopeLabel: string}}\n     */\n    FindBar.prototype._options = null;\n\n    /**\n     * @private\n     * Whether the FindBar has been closed.\n     * @type {boolean}\n     */\n    FindBar.prototype._closed = false;\n\n    /**\n     * @private\n     * Whether the FindBar is currently enabled.\n     * @type {boolean}\n     */\n    FindBar.prototype._enabled = true;\n\n    /**\n     * @private\n     * @type {?ModalBar} Modal bar containing this find bar's UI\n     */\n    FindBar.prototype._modalBar = null;\n\n    /**\n     * @private\n     * Returns the jQuery object for an element in this Find bar.\n     * @param {string} selector The selector for the element.\n     * @return {jQueryObject} The jQuery object for the element, or an empty object if the Find bar isn't yet\n     *      in the DOM or the element doesn't exist.\n     */\n    FindBar.prototype.$ = function (selector) {\n        if (this._modalBar) {\n            return $(selector, this._modalBar.getRoot());\n        }\n        return $();\n\n    };\n\n    // TODO: change IDs to classes\n\n    /**\n     * @private\n     * Set the state of the toggles in the Find bar to the saved prefs state.\n     */\n    FindBar.prototype._updateSearchBarFromPrefs = function () {\n        // Have to make sure we explicitly cast the second parameter to a boolean, because\n        // toggleClass expects literal true/false.\n        this.$(\"#find-case-sensitive\").toggleClass(\"active\", !!PreferencesManager.getViewState(\"caseSensitive\"));\n        this.$(\"#find-regexp\").toggleClass(\"active\", !!PreferencesManager.getViewState(\"regexp\"));\n    };\n\n    /**\n     * @private\n     * Save the prefs state based on the state of the toggles.\n     */\n    FindBar.prototype._updatePrefsFromSearchBar = function () {\n        var isRegexp = this.$(\"#find-regexp\").is(\".active\");\n        PreferencesManager.setViewState(\"caseSensitive\", this.$(\"#find-case-sensitive\").is(\".active\"));\n        PreferencesManager.setViewState(\"regexp\", isRegexp);\n        lastTypedTextWasRegexp = isRegexp;\n    };\n\n    /**\n     * @private\n     * Shows the keyboard shortcut for the given command in the element's tooltip.\n     * @param {jQueryObject} $elem The element to add the shortcut to.\n     * @param {string} commandId The ID for the command whose keyboard shortcut to show.\n     */\n    FindBar.prototype._addShortcutToTooltip = function ($elem, commandId) {\n        const replaceShortcut = KeyBindingManager.getKeyBindingsDisplay(commandId);\n        if (replaceShortcut) {\n            var oldTitle = $elem.attr(\"title\");\n            oldTitle = (oldTitle ? oldTitle + \" \" : \"\");\n            $elem.attr(\"title\", oldTitle + \"(\" + replaceShortcut + \")\");\n        }\n    };\n\n    function _updateHistory(whichHistory, searchVal) {\n        if (searchVal) {\n            let searchHistory = PreferencesManager.getViewState(whichHistory);\n            const maxCount = PreferencesManager.get(PREF_MAX_HISTORY);\n            const searchQueryIndex = searchHistory.indexOf(searchVal);\n            if (searchQueryIndex !== -1) {\n                searchHistory.splice(searchQueryIndex, 1);\n            } else {\n                if (searchHistory.length === maxCount) {\n                    searchHistory.pop();\n                }\n            }\n            searchHistory.unshift(searchVal);\n            PreferencesManager.setViewState(whichHistory, searchHistory);\n        }\n    }\n\n    /**\n     * @private\n     * Adds element to the search history queue.\n     * @param {string} searchVal string that needs to be added to search history.\n     * @param {string} filterVal string that needs to be added to filter  history.\n     */\n    FindBar.prototype._addElementToSearchHistory = function (searchVal, filterVal) {\n        _updateHistory(\"searchHistory\", searchVal);\n        _updateHistory(\"filterHistory\", filterVal);\n    };\n\n    /**\n     * Opens the Find bar, closing any other existing Find bars.\n     */\n    FindBar.prototype.open = function () {\n        var self = this;\n\n        // Normally, creating a new Find bar will simply cause the old one to close\n        // automatically. This can cause timing issues because the focus change might\n        // cause the new one to think it should close, too. So we simply explicitly\n        // close the old Find bar (with no animation) before creating a new one.\n        // TODO: see note above - this will move to ModalBar eventually.\n        FindBar._closeFindBars();\n        let metricType = \"findBar\";\n        if (this._options.multifile) {\n            metricType = \"findInFiles.bar\";\n        }\n        Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, metricType, \"opened\");\n\n        var templateVars = _.clone(this._options);\n        templateVars.Strings = Strings;\n        templateVars.replaceBatchLabel = (templateVars.multifile ? Strings.BUTTON_REPLACE_ALL_IN_FILES : Strings.BUTTON_REPLACE_BATCH);\n        templateVars.replaceAllLabel = Strings.BUTTON_REPLACE_ALL;\n\n        self._addElementToSearchHistory(this._options.initialQuery);\n\n        this._modalBar = new ModalBar(\n            Mustache.render(_searchBarTemplate, templateVars),\n            !!PreferencesManager.get('autoHideSearch')\t\t// 2nd arg = auto-close on Esc/blur\n        );\n\n        // Done this way because ModalBar.js seems to react unreliably when\n        // modifying it to handle the escape key - the findbar wasn't getting\n        // closed as it should, instead persisting in the background\n        function _handleKeydown(e) {\n            if (e.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n                e.stopPropagation();\n                e.preventDefault();\n                self.close();\n            }\n        }\n        window.document.body.addEventListener(\"keydown\", _handleKeydown, true);\n\n        function _keydownHookForCtrlSpace(event) {\n            const ctrlSpaceEvent = (event.ctrlKey === true || event.metaKey === true) &&\n                (event.keyCode === KeyEvent.DOM_VK_SPACE);\n            if(!ctrlSpaceEvent){\n                return;\n            }\n            if($(\"#find-what\").is(\":focus\")){\n                self.showSearchHints();\n                event.stopPropagation();\n                event.preventDefault();\n                return true;\n            }\n            if($(\"#fif-filter-input\").is(\":focus\")){\n                self.showFilterHints();\n                event.stopPropagation();\n                event.preventDefault();\n                return true;\n            }\n            return false;\n        }\n\n        KeyBindingManager.addGlobalKeydownHook(_keydownHookForCtrlSpace);\n\n        // When the ModalBar closes, clean ourselves up.\n        this._modalBar.on(\"close\", function (event) {\n            KeyBindingManager.removeGlobalKeydownHook(_keydownHookForCtrlSpace);\n            window.document.body.removeEventListener(\"keydown\", _handleKeydown, true);\n\n            // Hide error popup, since it hangs down low enough to make the slide-out look awkward\n            self.showError(null);\n            self._modalBar = null;\n            self._closed = true;\n            window.clearInterval(intervalId);\n            intervalId = 0;\n            FindBar._removeFindBar(self);\n            MainViewManager.focusActivePane();\n            self.trigger(\"close\");\n            if (self.searchField) {\n                self.searchField.destroy();\n            }\n            if (self.filterField) {\n                self.filterField.destroy();\n            }\n        });\n\n        FindBar._addFindBar(this);\n\n        let executeSearchIfNeeded = function () {\n            // We only do instant search via worker.\n            if (FindUtils.isInstantSearchDisabled()) {\n                return;\n            }\n            if (self._closed) {\n                return;\n            }\n            if ( self.getQueryInfo().query !== lastQueriedText && !FindUtils.isWorkerSearchInProgress()) {\n                // init Search\n                if (self._options.multifile) {\n                    self.trigger(\"doFind\");\n                    lastQueriedText = self.getQueryInfo().query;\n                }\n            }\n        };\n        if (intervalId === 0) {\n            // we do this so that is the search query changes by any means - by keypress, or programmatically\n            // we do an instant search if the search term changes.\n            intervalId = window.setInterval(executeSearchIfNeeded, INSTANT_SEARCH_INTERVAL_MS);\n        }\n\n        var $root = this._modalBar.getRoot();\n        var historyIndex = 0;\n        $root\n            .on(\"input\", \"#find-what\", function () {\n                self.trigger(\"queryChange\");\n                var queryInfo = self.getQueryInfo();\n                lastTypedText = queryInfo.query;\n                lastTypedTextWasRegexp = queryInfo.isRegexp;\n            })\n            .on(\"click\", \"#find-case-sensitive, #find-regexp\", function (e) {\n                $(e.currentTarget).toggleClass(\"active\");\n                self._updatePrefsFromSearchBar();\n                self.trigger(\"queryChange\");\n                if (self._options.multifile) {  //instant search\n                    self.trigger(\"doFind\");\n                }\n            })\n            .on(\"focusout\", \"#find-what\", function (e) {\n                setTimeout(()=>{\n                    if (self.searchField && !$(\"#find-what\").is(\":focus\")) {\n                        self.searchField.destroy();\n                        self.searchField = null;\n                    }\n                }, 250); // on clicking the item in history popup, commit is called after focusout which\n                // means that if we destroy it here, the commit will never be called. so the delay timer.\n            })\n            .on(\"focusout\", \"#fif-filter-input\", function (e) {\n                setTimeout(()=>{\n                    if (self.filterField && !$(\"#fif-filter-input\").is(\":focus\")) {\n                        self.filterField.destroy();\n                        self.filterField = null;\n                    }\n                }, 250); // on clicking the item in history popup, commit is called after focusout which\n                // means that if we destroy it here, the commit will never be called. so the delay timer.\n            })\n            .on(\"click\", \".search-input-container .dropdown-icon\", function (e) {\n                if (self.searchField) {\n                    self.searchField.destroy();\n                    self.searchField = null;\n                } else {\n                    self.showSearchHints(true);\n                }\n                self.$(\"#find-what\").focus();\n            })\n            .on(\"click\", \".filter-container .filter-dropdown-icon\", function (e) {\n                if (self.filterField) {\n                    self.filterField.destroy();\n                    self.filterField = null;\n                } else {\n                    self.showFilterHints(true);\n                }\n                self.$(\"#fif-filter-input\").focus();\n            })\n            .on(\"keydown\", \"#find-what, #replace-with, #fif-filter-input\", function (e) {\n                if (e.keyCode === KeyEvent.DOM_VK_RETURN) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    self._addElementToSearchHistory(\n                        self.$(\"#find-what\").val(), self.$(\"#fif-filter-input\").val());\n                    if (self._options.multifile) {\n                        if ($(e.target).is(\"#find-what\")) {\n                            if (self._options.replace) {\n                                // Just set focus to the Replace field.\n                                self.focusReplace();\n                            } else {\n                                Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, \"findInFiles.bar\",\n                                    \"returnKey\");\n                                // Trigger a Find (which really means \"Find All\" in this context).\n                                self.trigger(\"openSelectedFile\");\n                            }\n                        } else {\n                            Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, \"replaceBatchInFiles.bar\",\n                                \"returnKey\");\n                            self.trigger(\"doReplaceBatch\");\n                        }\n                    } else {\n                        // In the single file case, we just want to trigger a Find Next (or Find Previous\n                        // if Shift is held down).\n                        self.trigger(\"doFind\", e.shiftKey);\n                    }\n                    historyIndex = 0;\n                } else if (e.keyCode === KeyEvent.DOM_VK_DOWN) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if(self._options.multifile){\n                        self.trigger(\"selectNextResult\");\n                        return;\n                    }\n                    self.trigger(\"doFind\", false);\n                } else if (e.keyCode === KeyEvent.DOM_VK_UP) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if(self._options.multifile){\n                        self.trigger(\"selectPrevResult\");\n                        return;\n                    }\n                    self.trigger(\"doFind\", true);\n                } else if (e.keyCode === KeyEvent.DOM_VK_PAGE_DOWN) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    self.trigger(\"selectNextPage\");\n                } else if (e.keyCode === KeyEvent.DOM_VK_PAGE_UP) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    self.trigger(\"selectPrevPage\");\n                }\n            })\n            .on(\"click\", \".close\", function () {\n                self.close();\n            });\n\n        if (!this._options.multifile) {\n            this._addShortcutToTooltip($(\"#find-next\"), Commands.CMD_FIND_NEXT);\n            this._addShortcutToTooltip($(\"#find-prev\"), Commands.CMD_FIND_PREVIOUS);\n            $root\n                .on(\"click\", \"#find-next\", function (e) {\n                    self.trigger(\"doFind\", false);\n                })\n                .on(\"click\", \"#find-prev\", function (e) {\n                    self.trigger(\"doFind\", true);\n                });\n        }\n\n        if (this._options.replace) {\n            this._addShortcutToTooltip($(\"#replace-yes\"), Commands.CMD_REPLACE);\n            $root\n                .on(\"click\", \"#replace-yes\", function (e) {\n                    self.trigger(\"doReplace\");\n                })\n                .on(\"click\", \"#replace-batch\", function (e) {\n                    self.trigger(\"doReplaceBatch\");\n                })\n                .on(\"click\", \"#replace-all\", function (e) {\n                    self.trigger(\"doReplaceAll\");\n                })\n                // One-off hack to make Find/Replace fields a self-contained tab cycle\n                // TODO: remove once https://trello.com/c/lTSJgOS2 implemented\n                .on(\"keydown\", function (e) {\n                    if (e.keyCode === KeyEvent.DOM_VK_TAB && !e.ctrlKey && !e.metaKey && !e.altKey) {\n                        if (e.target.id === \"replace-with\" && !e.shiftKey) {\n                            self.$(\"#find-what\").focus();\n                            e.preventDefault();\n                        } else if (e.target.id === \"find-what\" && e.shiftKey) {\n                            self.$(\"#replace-with\").focus();\n                            e.preventDefault();\n                        }\n                    }\n                });\n        }\n\n        if (this._options.multifile && FindUtils.isIndexingInProgress()) {\n            this.showIndexingSpinner();\n        }\n\n        // Set up the initial UI state.\n        this._updateSearchBarFromPrefs();\n        this.focusQuery();\n    };\n\n    FindBar.prototype._showHintsInternal = function (inputElemId, stateVarName, fieldName, dontFilterHistory) {\n        const self = this;\n        self._dontFilterHistory = dontFilterHistory;\n        let inputField = self.$(inputElemId);\n        const maxCount = PreferencesManager.get(PREF_MAX_HISTORY);\n        this[fieldName] = new QuickSearchField(inputField, {\n            verticalAdjust: inputField.offset().top > 0 ? 0 : this._modalBar.getRoot().outerHeight(),\n            maxResults: maxCount,\n            firstHighlightIndex: null,\n            resultProvider: function (query) {\n                query = query || \"\";\n                const asyncResult = new $.Deferred();\n                let history = PreferencesManager.getViewState(stateVarName) || [];\n                if(!self._dontFilterHistory){\n                    history = history.filter(historyItem=> {\n                        return historyItem.toLowerCase().includes(query.toLowerCase());\n                    });\n                }\n                self._dontFilterHistory = false;\n                asyncResult.resolve(history);\n                return asyncResult.promise();\n            },\n            formatter: function (item, query) {\n                return \"<li>\" + item + \"</li>\";\n            },\n            onCommit: function (selectedItem, query, itemIndex) {\n                if (selectedItem) {\n                    self.$(inputElemId).val(selectedItem);\n                    self.$(inputElemId).val(selectedItem).trigger('input');\n                } else if (query.length) {\n                    self[fieldName].setText(query);\n                }\n                self.$(inputElemId).focus();\n                self[fieldName].destroy();\n                self[fieldName] = null;\n                // now move the committed item to top of history as its most recent\n                if(itemIndex){\n                    let history = PreferencesManager.getViewState(stateVarName) || [];\n                    let deletedItem = history.splice(itemIndex, 1);\n                    history.unshift(deletedItem[0]);\n                    PreferencesManager.setViewState(stateVarName, history);\n                }\n            },\n            onDismiss: function () {\n                if(self[fieldName]){\n                    self[fieldName].destroy();\n                    self[fieldName] = null;\n                }\n            },\n            onDelete: function (deletedIndex) {\n                let history = PreferencesManager.getViewState(stateVarName) || [];\n                history.splice(deletedIndex, 1);\n                PreferencesManager.setViewState(stateVarName, history);\n            },\n            onHighlight: function (selectedItem, query, explicit) {},\n            highlightZeroResults: false,\n            focusLastActiveElementOnClose: true\n        });\n        this[fieldName].setText(inputField.val());\n    };\n\n    /**\n     * @private\n     * Shows the search History in dropdown.\n     */\n    FindBar.prototype.showSearchHints = function (dontFilterHistory) {\n        return this._showHintsInternal(\"#find-what\", \"searchHistory\", \"searchField\", dontFilterHistory);\n    };\n\n    /**\n     * @private\n     * Shows the filter History in dropdown.\n     */\n    FindBar.prototype.showFilterHints = function (dontFilterHistory) {\n        return this._showHintsInternal(\"#fif-filter-input\", \"filterHistory\", \"filterField\", dontFilterHistory);\n    };\n\n    /**\n     * Closes this Find bar. If already closed, does nothing.\n     * @param {boolean} suppressAnimation If true, don't do the standard closing animation. Default false.\n     */\n    FindBar.prototype.close = function (suppressAnimation) {\n        lastQueriedText = \"\";\n        if (this._modalBar) {\n            this._addElementToSearchHistory($(\"#find-what\").val(), $(\"#fif-filter-input\").val());\n            // 1st arg = restore scroll pos; 2nd arg = no animation, since getting replaced immediately\n            this._modalBar.close(true, !suppressAnimation);\n        }\n    };\n\n    /**\n     * @return {boolean} true if this FindBar has been closed.\n     */\n    FindBar.prototype.isClosed = function () {\n        return this._closed;\n    };\n\n    /**\n     * @return {Object} The options passed into the FindBar.\n     */\n    FindBar.prototype.getOptions = function () {\n        return this._options;\n    };\n\n    /**\n     * Returns the current query and parameters.\n     * @return {{query: string, caseSensitive: boolean, isRegexp: boolean}}\n     */\n    FindBar.prototype.getQueryInfo = function () {\n        return {\n            query: this.$(\"#find-what\").val() || \"\",\n            isCaseSensitive: this.$(\"#find-case-sensitive\").is(\".active\"),\n            isRegexp: this.$(\"#find-regexp\").is(\".active\")\n        };\n    };\n\n    /**\n     * Show or clear an error message related to the query.\n     * @param {?string} error The error message to show, or null to hide the error display.\n     * @param {boolean=} isHTML Whether the error message is HTML that should remain unescaped.\n     * @param {boolean=} isFilterError Whether the error related to file filters\n     */\n    FindBar.prototype.showError = function (error, isHTML, isFilterError) {\n        const $findError = this.$(\".error\"),\n            $filterError = this.$(\".error-filter\");\n        const $error = isFilterError ? $filterError : $findError;\n        $findError.hide();\n        $filterError.hide();\n        if (error) {\n            if (isHTML) {\n                $error.html(error);\n            } else {\n                $error.text(error);\n            }\n            $error.show();\n        }\n    };\n\n    /**\n     * Set the find count.\n     * @param {string} count The find count message to show. Can be the empty string to hide it.\n     */\n    FindBar.prototype.showFindCount = function (count) {\n        this.$(\"#find-counter\").text(count);\n    };\n\n    /**\n     * Show or hide the no-results indicator and optional message. This is also used to\n     * indicate regular expression errors.\n     * @param {boolean} showIndicator\n     * @param {boolean} showMessage\n     */\n    FindBar.prototype.showNoResults = function (showIndicator, showMessage) {\n        const $filterInput = this.$(\"#fif-filter-input\");\n        const $findWhat = this.$(\"#find-what\");\n        $filterInput.removeClass(\"no-results\");\n        $findWhat.removeClass(\"no-results\");\n        let $borderEl = $findWhat;\n        if($filterInput.is(\":focus\")){\n            $borderEl = $filterInput;\n        }\n        ViewUtils.toggleClass($borderEl, \"no-results\", showIndicator);\n\n        var $msg = this.$(\".no-results-message\");\n        if (showMessage) {\n            $msg.show();\n        } else {\n            $msg.hide();\n        }\n    };\n\n    /**\n     * Returns the current replace text.\n     * @return {string}\n     */\n    FindBar.prototype.getReplaceText = function () {\n        return this.$(\"#replace-with\").val() || \"\";\n    };\n\n    /**\n     * Enables or disables the controls in the Find bar. Note that if enable is true, *all* controls will be\n     * re-enabled, even if some were previously disabled using enableNavigation() or enableReplace(), so you\n     * will need to refresh their enable state after calling this.\n     * @param {boolean} enable Whether to enable or disable the controls.\n     */\n    FindBar.prototype.enable = function (enable) {\n        this.$(\"#find-what, #replace-with, #find-prev, #find-next, #find-case-sensitive, #find-regexp\").prop(\"disabled\", !enable);\n        this._enabled = enable;\n    };\n\n    FindBar.prototype.focus = function (enable) {\n        if(!this.$(\"#fif-filter-input\").is(':focus')){\n            // the filter find bar text input already has focus\n            this.$(\"#find-what\").focus();\n        }\n    };\n\n    /**\n     * @return {boolean} true if the FindBar is enabled.\n     */\n    FindBar.prototype.isEnabled = function () {\n        return this._enabled;\n    };\n\n    /**\n     * @return {boolean} true if the Replace button is enabled.\n     */\n    FindBar.prototype.isReplaceEnabled = function () {\n        return this.$(\"#replace-yes\").is(\":enabled\");\n    };\n\n    /**\n     * Enable or disable the navigation controls if present. Note that if the Find bar is currently disabled\n     * (i.e. isEnabled() returns false), this will have no effect.\n     * @param {boolean} enable Whether to enable the controls.\n     */\n    FindBar.prototype.enableNavigation = function (enable) {\n        if (this.isEnabled()) {\n            this.$(\"#find-prev, #find-next\").prop(\"disabled\", !enable);\n        }\n    };\n\n    /**\n     * Enable or disable the replace controls if present. Note that if the Find bar is currently disabled\n     * (i.e. isEnabled() returns false), this will have no effect.\n     * @param {boolean} enable Whether to enable the controls.\n     */\n    FindBar.prototype.enableReplace = function (enable) {\n        if (this.isEnabled) {\n            this.$(\"#replace-yes, #replace-batch, #replace-all\").prop(\"disabled\", !enable);\n        }\n    };\n\n    /**\n     * @private\n     * Focus and select the contents of the given field.\n     * @param {string} selector The selector for the field.\n     */\n    FindBar.prototype._focus = function (selector) {\n        this.$(selector)\n            .focus()\n            .get(0).select();\n    };\n\n    /**\n     * Sets focus to the query field and selects its text.\n     */\n    FindBar.prototype.focusQuery = function () {\n        this._focus(\"#find-what\");\n    };\n\n    /**\n     * Sets focus to the replace field and selects its text.\n     */\n    FindBar.prototype.focusReplace = function () {\n        this._focus(\"#replace-with\");\n    };\n\n    /**\n     * The indexing spinner is usually shown when node is indexing files\n     */\n    FindBar.prototype.showIndexingSpinner = function () {\n        this.$(\"#indexing-spinner\").removeClass(\"forced-hidden\");\n        this.setIndexingMessage(Strings.FIND_IN_FILES_INDEXING);\n    };\n\n    FindBar.prototype.setIndexingMessage = function (message) {\n        this.$(\"#indexing-spinner-message\").text(message);\n    };\n\n    FindBar.prototype.hideIndexingSpinner = function () {\n        this.$(\"#indexing-spinner\").addClass(\"forced-hidden\");\n    };\n\n    /**\n     * Force a search again\n     */\n    FindBar.prototype.redoInstantSearch = function () {\n        this.trigger(\"doFind\");\n    };\n\n    /*\n     * Returns the string used to prepopulate the find bar\n     * @param {!Editor} editor\n     * @return {string} first line of primary selection to populate the find bar\n     */\n    FindBar._getInitialQueryFromSelection = function(editor) {\n        var selectionText = editor.getSelectedText();\n        if (selectionText) {\n            return selectionText\n                .replace(/^\\n*/, \"\") // Trim possible newlines at the very beginning of the selection\n                .split(\"\\n\")[0];\n        }\n        return \"\";\n    };\n\n    /**\n     * Gets you the right query and replace text to prepopulate the Find Bar.\n     * @static\n     * @param {?FindBar} currentFindBar The currently open Find Bar, if any\n     * @param {?Editor} The active editor, if any\n     * @return {query: string, replaceText: string} Query and Replace text to prepopulate the Find Bar with\n     */\n    FindBar.getInitialQuery = function (currentFindBar, editor) {\n        var query,\n            selection = editor ? FindBar._getInitialQueryFromSelection(editor) : \"\",\n            replaceText = \"\";\n\n        if (currentFindBar && !currentFindBar.isClosed()) {\n            // The modalBar was already up. When creating the new modalBar, copy the\n            // current query instead of using the passed-in selected text.\n            var queryInfo = currentFindBar.getQueryInfo();\n            query = (!queryInfo.isRegexp && selection) || queryInfo.query;\n            replaceText = currentFindBar.getReplaceText();\n        } else {\n            var openedFindBar = FindBar._bars && _.find(FindBar._bars,\n                function (bar) {\n                    return !bar.isClosed();\n                }\n            );\n\n            if (openedFindBar) {\n                query = openedFindBar.getQueryInfo().query;\n                replaceText = openedFindBar.getReplaceText();\n            } else if (editor) {\n                query = (!lastTypedTextWasRegexp && selection) || lastQueriedText || lastTypedText;\n            }\n        }\n\n        return {query: query, replaceText: replaceText};\n    };\n\n    PreferencesManager.stateManager.definePreference(\"caseSensitive\", \"boolean\", false);\n    PreferencesManager.stateManager.definePreference(\"regexp\", \"boolean\", false);\n    PreferencesManager.stateManager.definePreference(\"searchHistory\", \"array\", []);\n    PreferencesManager.stateManager.definePreference(\"filterHistory\", \"array\", []);\n    PreferencesManager.definePreference(PREF_MAX_HISTORY, \"number\", MAX_HISTORY_RESULTS, {\n        description: Strings.FIND_HISTORY_MAX_COUNT\n    });\n\n    exports.FindBar = FindBar;\n});\n"],"file":"FindBar.js"}