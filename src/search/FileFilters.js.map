{"version":3,"sources":["search/FileFilters.js"],"names":["define","require","exports","module","_","Mustache","Dialogs","DropdownButton","StringUtils","Strings","PreferencesManager","FindUtils","EditFilterTemplate","FilterNameTemplate","FIRST_FILTER_INDEX","FILTER_NAME_CHARACTER_MAX","_context","_picker","_getCondensedForm","filter","isArray","length","slice","join","format","FILE_FILTER_CLIPPED_SUFFIX","_doPopulate","dropdownItems","NEW_FILE_FILTER","CLEAR_FILE_FILTER","filterSets","get","push","patterns","concat","items","_getFilterIndex","index","findIndex","partial","isEqual","getActiveFilter","activeFilterIndex","getViewState","oldFilter","activeFilter","undefined","name","set","setViewState","_updatePicker","label","setButtonLabel","EXCLUDE_FILE_FILTER","NO_FILE_FILTER","setActiveFilter","console","log","notifyFileFiltersChanged","compile","userFilter","wrappedGlobs","regexStrings","map","glob","substr","lastSeg","lastIndexOf","indexOf","reStr","i","ch","regexEscape","filterPath","compiledFilter","fullPath","re","RegExp","match","filterFileList","files","f","test","getPathsMatchingFilter","filePaths","editFilter","lastFocus","window","document","activeElement","templateVars","instruction","FILE_FILTER_INSTRUCTIONS","brackets","config","glob_help_url","dialog","showModalDialogUsingTemplate","render","$nameField","getElement","find","$editField","$remainingField","getValue","newFilter","val","split","trim","focus","bind","remainingCharacters","$","this","show","text","FILTER_NAME_REMAINING","addClass","removeClass","hide","updatePrimaryButton","done","buttonId","DIALOG_BTN_OK","$fileCount","updateFileCount","promise","filtered","html","FILTER_FILE_COUNT","FILTER_FILE_COUNT_ALL","$primaryBtn","trimmedValue","exclusionNameLength","prop","on","debounce","getPromise","commitPicker","picker","_handleDeleteFilter","e","filterIndex","target","parent","data","stopPropagation","splice","refresh","_handleEditFilter","closeDropdown","_handleListRendered","event","$dropdown","checkedItemIndex","setChecked","createFilterPicker","context","itemRenderer","item","escape","condensedPatterns","filter-name","filter-patterns","$button","itemIndex","showDropdown"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Utilities for managing file-set filters, as used in Find in Files.\n * Includes both UI for selecting/editing filters, as well as the actual file-filtering implementation.\n */\ndefine(function (require, exports, module) {\n\n\n    var _                  = require(\"thirdparty/lodash\"),\n        Mustache           = require(\"thirdparty/mustache/mustache\"),\n        Dialogs            = require(\"widgets/Dialogs\"),\n        DropdownButton     = require(\"widgets/DropdownButton\").DropdownButton,\n        StringUtils        = require(\"utils/StringUtils\"),\n        Strings            = require(\"strings\"),\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        FindUtils          = require(\"search/FindUtils\"),\n        EditFilterTemplate = require(\"text!htmlContent/edit-filter-dialog.html\"),\n        FilterNameTemplate = require(\"text!htmlContent/filter-name.html\");\n\n    /**\n     * Constant: first filter index in the filter dropdown list\n     * @type {number}\n     */\n    var FIRST_FILTER_INDEX = 3;\n\n    /**\n     * Constant: max number of characters for the filter name\n     * @type {number}\n     */\n    var FILTER_NAME_CHARACTER_MAX = 20;\n\n    /**\n     * Context Info on which files the filter will be applied to.\n     * It will be initialized when createFilterPicker is called and if specified, editing UI will\n     * indicate how many files are excluded by the filter. Label should be of the form \"in ...\"\n     * @type {?{label:string, promise:$.Promise}}\n     */\n    var _context = null;\n\n    /**\n     * @type {DropdownButton}\n     */\n    var _picker  = null;\n\n    /**\n     * Get the condensed form of the filter set by joining the first two in the set with\n     * a comma separator and appending a short message with the number of filters being clipped.\n     * @param {Array.<string>} filter\n     * @return {string} Condensed form of filter set if `filter` is a valid array.\n     *                  Otherwise, return an empty string.\n     */\n    function _getCondensedForm(filter) {\n        if (!_.isArray(filter)) {\n            return \"\";\n        }\n\n        // Format filter in condensed form\n        if (filter.length > 2) {\n            return filter.slice(0, 2).join(\", \") + \" \" +\n                   StringUtils.format(Strings.FILE_FILTER_CLIPPED_SUFFIX, filter.length - 2);\n        }\n        return filter.join(\", \");\n    }\n\n    /**\n     * Populate the list of dropdown menu with two filter commands and\n     * the list of saved filter sets.\n     */\n    function _doPopulate() {\n        var dropdownItems = [Strings.NEW_FILE_FILTER, Strings.CLEAR_FILE_FILTER],\n            filterSets = PreferencesManager.get(\"fileFilters\") || [];\n\n        if (filterSets.length) {\n            dropdownItems.push(\"---\");\n\n            // Remove all the empty exclusion sets before concatenating to the dropdownItems.\n            filterSets = filterSets.filter(function (filter) {\n                return (_getCondensedForm(filter.patterns) !== \"\");\n            });\n\n            // FIRST_FILTER_INDEX needs to stay in sync with the number of static items (plus separator)\n            // ie. the number of items populated so far before we concatenate with the actual filter sets.\n            dropdownItems = dropdownItems.concat(filterSets);\n        }\n        _picker.items = dropdownItems;\n    }\n\n    /**\n     * Find the index of a filter set in the list of saved filter sets.\n     * @param {Array.<{name: string, patterns: Array.<string>}>} filterSets\n     * @return {{name: string, patterns: Array.<string>}} filter\n     */\n    function _getFilterIndex(filterSets, filter) {\n        var index = -1;\n\n        if (!filter || !filterSets.length) {\n            return index;\n        }\n\n        return _.findIndex(filterSets, _.partial(_.isEqual, filter));\n    }\n\n    /**\n     * A search filter is an array of one or more glob strings. The filter must be 'compiled' via compile()\n     * before passing to filterPath()/filterFileList().\n     * @return {?{name: string, patterns: Array.<string>}}\n     */\n    function getActiveFilter() {\n        var filterSets        = PreferencesManager.get(\"fileFilters\") || [],\n            activeFilterIndex = PreferencesManager.getViewState(\"activeFileFilter\"),\n            oldFilter         = PreferencesManager.getViewState(\"search.exclusions\") || [],\n            activeFilter      = null;\n\n        if (activeFilterIndex === undefined && oldFilter.length) {\n            activeFilter = { name: \"\", patterns: oldFilter };\n            activeFilterIndex = _getFilterIndex(filterSets, activeFilter);\n\n            // Migrate the old filter into the new filter storage\n            if (activeFilterIndex === -1) {\n                activeFilterIndex = filterSets.length;\n                filterSets.push(activeFilter);\n                PreferencesManager.set(\"fileFilters\", filterSets);\n            }\n            PreferencesManager.setViewState(\"activeFileFilter\", activeFilterIndex);\n        } else if (activeFilterIndex > -1 && activeFilterIndex < filterSets.length) {\n            activeFilter = filterSets[activeFilterIndex];\n        }\n\n        return activeFilter;\n    }\n\n    /**\n     * Update the picker button label with the name/patterns of the selected filter or\n     * No Files Excluded if no filter is selected.\n     */\n    function _updatePicker() {\n        var filter = getActiveFilter();\n        if (filter && filter.patterns.length) {\n            var label = filter.name || _getCondensedForm(filter.patterns);\n            _picker.setButtonLabel(StringUtils.format(Strings.EXCLUDE_FILE_FILTER, label));\n        } else {\n            _picker.setButtonLabel(Strings.NO_FILE_FILTER);\n        }\n    }\n\n    /**\n     * Sets and save the index of the active filter. Automatically set when editFilter() is completed.\n     * If no filter is passed in, then clear the last active filter index by setting it to -1.\n     *\n     * @param {{name: string, patterns: Array.<string>}=} filter\n     * @param {number=} index The index of the filter set in the list of saved filter sets or -1 if it is a new one\n     */\n    function setActiveFilter(filter, index) {\n        var filterSets = PreferencesManager.get(\"fileFilters\") || [];\n\n        if (filter) {\n            if (index === -1) {\n                // Add a new filter set\n                index = filterSets.length;\n                filterSets.push(filter);\n            } else if (index > -1 && index < filterSets.length) {\n                // Update an existing filter set only if the filter set has some changes\n                if (!_.isEqual(filterSets[index], filter)) {\n                    filterSets[index] = filter;\n                }\n            } else {\n                // Should not have been called with an invalid index to the available filter sets.\n                console.log(\"setActiveFilter is called with an invalid index: \" + index);\n                return;\n            }\n\n            PreferencesManager.set(\"fileFilters\", filterSets);\n            PreferencesManager.setViewState(\"activeFileFilter\", index);\n        } else {\n            // Explicitly set to -1 to remove the active file filter\n            PreferencesManager.setViewState(\"activeFileFilter\", -1);\n        }\n        FindUtils.notifyFileFiltersChanged();\n    }\n\n\n    /**\n     * Converts a user-specified filter object (as chosen in picker or retrieved from getFilters()) to a 'compiled' form\n     * that can be used with filterPath()/filterFileList().\n     * @param {!Array.<string>} userFilter\n     * @return {!string} 'compiled' filter that can be passed to filterPath()/filterFileList().\n     */\n    function compile(userFilter) {\n        // Automatically apply ** prefix/suffix to make writing simple substring-match filters more intuitive\n        var wrappedGlobs = userFilter.map(function (glob) {\n            // Automatic \"**\" prefix if not explicitly present\n            if (glob.substr(0, 2) !== \"**\") {\n                glob = \"**\" + glob;\n            }\n            // Automatic \"**\" suffix if not explicitly present and no \".\" in last path segment of filter string\n            if (glob.substr(-2, 2) !== \"**\") {\n                var lastSeg = glob.lastIndexOf(\"/\");\n                if (glob.indexOf(\".\", lastSeg + 1) === -1) {  // if no \"/\" present, this treats whole string as 'last segment'\n                    glob += \"**\";\n                }\n            }\n            return glob;\n        });\n\n        // Convert to regular expression for fast matching\n        var regexStrings = wrappedGlobs.map(function (glob) {\n            var reStr = \"\", i;\n            for (i = 0; i < glob.length; i++) {\n                var ch = glob[i];\n                if (ch === \"*\") {\n                    // Check for `**`\n                    if (glob[i + 1] === \"*\") {\n                        // Special case: `/**/` can collapse - that is, it shouldn't require matching both slashes\n                        if (glob[i + 2] === \"/\" && glob[i - 1] === \"/\") {\n                            reStr += \"(.*/)?\";\n                            i += 2; // skip 2nd * and / after it\n                        } else {\n                            reStr += \".*\";\n                            i++;    // skip 2nd *\n                        }\n                    } else {\n                        // Single `*`\n                        reStr += \"[^/]*\";\n                    }\n                } else if (ch === \"?\") {\n                    reStr += \"[^/]\";  // unlike '?' in regexp, in globs this requires exactly 1 char\n                } else {\n                    // Regular char with no special meaning\n                    reStr += StringUtils.regexEscape(ch);\n                }\n            }\n            return \"^\" + reStr + \"$\";\n        });\n        return regexStrings.join(\"|\");\n    }\n\n\n    /**\n     * Returns false if the given path matches any of the exclusion globs in the given filter. Returns true\n     * if the path does not match any of the globs. If filtering many paths at once, use filterFileList()\n     * for much better performance.\n     *\n     * @param {?string} compiledFilter  'Compiled' filter object as returned by compile(), or null to no-op\n     * @param {!string} fullPath\n     * @return {boolean}\n     */\n    function filterPath(compiledFilter, fullPath) {\n        if (!compiledFilter) {\n            return true;\n        }\n\n        var re = new RegExp(compiledFilter);\n        return !fullPath.match(re);\n    }\n\n    /**\n     * Returns a copy of 'files' filtered to just those that don't match any of the exclusion globs in the filter.\n     *\n     * @param {?string} compiledFilter  'Compiled' filter object as returned by compile(), or null to no-op\n     * @param {!Array.<File>} files\n     * @return {!Array.<File>}\n     */\n    function filterFileList(compiledFilter, files) {\n        if (!compiledFilter) {\n            return files;\n        }\n\n        var re = new RegExp(compiledFilter);\n        return files.filter(function (f) {\n            return !re.test(f.fullPath);\n        });\n    }\n\n    /**\n     * Returns a copy of 'file path' strings that match any of the exclusion globs in the filter.\n     *\n     * @param {?string} compiledFilter  'Compiled' filter object as returned by compile(), or null to no-op\n     * @param {!Array.<string>} An array with a list of full file paths that matches atleast one of the filter.\n     * @return {!Array.<string>}\n     */\n    function getPathsMatchingFilter(compiledFilter, filePaths) {\n        if (!compiledFilter) {\n            return filePaths;\n        }\n\n        var re = new RegExp(compiledFilter);\n        return filePaths.filter(function (f) {\n            return f.match(re);\n        });\n    }\n\n\n    /**\n     * Opens a dialog box to edit the given filter. When editing is finished, the value of getActiveFilter() changes to\n     * reflect the edits. If the dialog was canceled, the preference is left unchanged.\n     * @param {!{name: string, patterns: Array.<string>}} filter\n     * @param {number} index The index of the filter set to be edited or created. The value is -1 if it is for a new one\n     *          to be created.\n     * @return {!$.Promise} Dialog box promise\n     */\n    function editFilter(filter, index) {\n        var lastFocus = window.document.activeElement;\n\n        var templateVars = {\n            instruction: StringUtils.format(Strings.FILE_FILTER_INSTRUCTIONS, brackets.config.glob_help_url),\n            Strings: Strings\n        };\n        var dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(EditFilterTemplate, templateVars)),\n            $nameField = dialog.getElement().find(\".exclusions-name\"),\n            $editField = dialog.getElement().find(\".exclusions-editor\"),\n            $remainingField = dialog.getElement().find(\".exclusions-name-characters-remaining\");\n\n        $nameField.val(filter.name);\n        $editField.val(filter.patterns.join(\"\\n\")).focus();\n\n        function getValue() {\n            var newFilter = $editField.val().split(\"\\n\");\n\n            // Remove blank lines\n            return newFilter.filter(function (glob) {\n                return glob.trim().length;\n            });\n        }\n\n        $nameField.bind('input', function () {\n            var remainingCharacters = FILTER_NAME_CHARACTER_MAX - $(this).val().length;\n            if (remainingCharacters < 0.25*FILTER_NAME_CHARACTER_MAX) {\n                $remainingField.show();\n\n                $remainingField.text(StringUtils.format(\n                    Strings.FILTER_NAME_REMAINING,\n                    remainingCharacters\n                ));\n\n                if (remainingCharacters < 0) {\n                    $remainingField.addClass(\"exclusions-name-characters-limit-reached\");\n                } else {\n                    $remainingField.removeClass(\"exclusions-name-characters-limit-reached\");\n                }\n            }            else {\n                $remainingField.hide();\n            }\n            updatePrimaryButton();\n        });\n\n        dialog.done(function (buttonId) {\n            if (buttonId === Dialogs.DIALOG_BTN_OK) {\n                // Update saved filter preference\n                setActiveFilter({ name: $nameField.val(), patterns: getValue() }, index);\n                _updatePicker();\n                _doPopulate();\n            }\n            lastFocus.focus();  // restore focus to old pos\n        });\n\n        // Code to update the file count readout at bottom of dialog (if context provided)\n        var $fileCount = dialog.getElement().find(\".exclusions-filecount\");\n\n        function updateFileCount() {\n            _context.promise.done(function (files) {\n                var filter = getValue();\n                if (filter.length) {\n                    var filtered = filterFileList(compile(filter), files);\n                    $fileCount.html(StringUtils.format(Strings.FILTER_FILE_COUNT, filtered.length, files.length, _context.label));\n                } else {\n                    $fileCount.html(StringUtils.format(Strings.FILTER_FILE_COUNT_ALL, files.length, _context.label));\n                }\n            });\n        }\n\n        // Code to enable/disable the OK button at the bottom of dialog (whether filter is empty or not)\n        var $primaryBtn = dialog.getElement().find(\".primary\");\n\n        function updatePrimaryButton() {\n            var trimmedValue = $editField.val().trim();\n            var exclusionNameLength = $nameField.val().length;\n\n            $primaryBtn.prop(\"disabled\", !trimmedValue.length || (exclusionNameLength > FILTER_NAME_CHARACTER_MAX));\n        }\n\n        $editField.on(\"input\", updatePrimaryButton);\n        updatePrimaryButton();\n\n        if (_context) {\n            $editField.on(\"input\", _.debounce(updateFileCount, 400));\n            updateFileCount();\n        } else {\n            $fileCount.hide();\n        }\n\n        return dialog.getPromise();\n    }\n\n\n    /**\n     * Marks the filter picker's currently selected item as most-recently used, and returns the corresponding\n     * 'compiled' filter object ready for use with filterPath().\n     * @param {!jQueryObject} picker UI returned from createFilterPicker()\n     * @return {!string} 'compiled' filter that can be passed to filterPath()/filterFileList().\n     */\n    function commitPicker(picker) {\n        var filter = getActiveFilter();\n        return (filter && filter.patterns.length) ? compile(filter.patterns) : \"\";\n    }\n\n    /**\n     * Remove the target item from the filter dropdown list and update dropdown button\n     * and dropdown list UI.\n     * @param {!Event} e Mouse events\n     */\n    function _handleDeleteFilter(e) {\n        // Remove the filter set from the preferences and\n        // clear the active filter set index from view state.\n        var filterSets        = PreferencesManager.get(\"fileFilters\") || [],\n            activeFilterIndex = PreferencesManager.getViewState(\"activeFileFilter\"),\n            filterIndex       = $(e.target).parent().data(\"index\") - FIRST_FILTER_INDEX;\n\n        // Don't let the click bubble upward.\n        e.stopPropagation();\n\n        filterSets.splice(filterIndex, 1);\n        PreferencesManager.set(\"fileFilters\", filterSets);\n\n        if (activeFilterIndex === filterIndex) {\n            // Removing the active filter, so clear the active filter\n            // both in the view state.\n            setActiveFilter(null);\n        } else if (activeFilterIndex > filterIndex) {\n            // Adjust the active filter index after the removal of a filter set before it.\n            --activeFilterIndex;\n            setActiveFilter(filterSets[activeFilterIndex], activeFilterIndex);\n        }\n\n        _updatePicker();\n        _doPopulate();\n        _picker.refresh();\n    }\n\n    /**\n     * Close filter dropdwon list and launch edit filter dialog.\n     * @param {!Event} e Mouse events\n     */\n    function _handleEditFilter(e) {\n        var filterSets  = PreferencesManager.get(\"fileFilters\") || [],\n            filterIndex = $(e.target).parent().data(\"index\") - FIRST_FILTER_INDEX;\n\n        // Don't let the click bubble upward.\n        e.stopPropagation();\n\n        // Close the dropdown first before opening the edit filter dialog\n        // so that it will restore focus to the DOM element that has focus\n        // prior to opening it.\n        _picker.closeDropdown();\n\n        editFilter(filterSets[filterIndex], filterIndex);\n    }\n\n    /**\n     * Set up mouse click event listeners for 'Delete' and 'Edit' buttons\n     * when the dropdown is open. Also set check mark on the active filter.\n     * @param {!Event>} event listRendered event triggered when the dropdown is open\n     * @param {!jQueryObject} $dropdown the jQuery DOM node of the dropdown list\n     */\n    function _handleListRendered(event, $dropdown) {\n        var activeFilterIndex = PreferencesManager.getViewState(\"activeFileFilter\"),\n            checkedItemIndex = (activeFilterIndex > -1) ? (activeFilterIndex + FIRST_FILTER_INDEX) : -1;\n        _picker.setChecked(checkedItemIndex, true);\n\n        $dropdown.find(\".filter-trash-icon\")\n            .on(\"click\", _handleDeleteFilter);\n\n        $dropdown.find(\".filter-edit-icon\")\n            .on(\"click\", _handleEditFilter);\n    }\n\n    /**\n     * Creates a UI element for selecting a filter, populated with a list of recently used filters, an option to\n     * edit the selected filter and another option to create a new filter. The client should call commitDropdown()\n     * when the UI containing the filter picker is confirmed (which updates the MRU order) and then use the\n     * returned filter object as needed.\n     *\n     * @param {?{label:string, promise:$.Promise}} context Info on files that filter will apply to.\n     *      This will be saved as _context for later use in creating a new filter or editing an\n     *      existing filter in Edit Filter dialog.\n     * @return {!jQueryObject} Picker UI. To retrieve the selected value, use commitPicker().\n     */\n    function createFilterPicker(context) {\n\n        function itemRenderer(item, index) {\n            if (index < FIRST_FILTER_INDEX) {\n                // Prefix the two filter commands with 'recent-filter-name' so that\n                // they also get the same margin-left as the actual filters.\n                return \"<span class='recent-filter-name'></span>\" + _.escape(item);\n            }\n\n            var condensedPatterns = _getCondensedForm(item.patterns),\n                templateVars = {\n                    \"filter-name\": _.escape(item.name || condensedPatterns),\n                    \"filter-patterns\": item.name ? \" - \" + _.escape(condensedPatterns) : \"\"\n                };\n\n            return Mustache.render(FilterNameTemplate, templateVars);\n        }\n\n        _context = context;\n        _picker = new DropdownButton(\"\", [], itemRenderer);\n\n        _updatePicker();\n        _doPopulate();\n\n        // Add 'file-filter-picker' to keep some margin space on the left of the button\n        _picker.$button.addClass(\"file-filter-picker no-focus\");\n\n        // Set up mouse click event listeners for 'Delete' and 'Edit' buttons\n        _picker.on(\"listRendered\", _handleListRendered);\n\n        _picker.on(\"select\", function (event, item, itemIndex) {\n            if (itemIndex === 0) {\n                // Close the dropdown first before opening the edit filter dialog\n                // so that it will restore focus to the DOM element that has focus\n                // prior to opening it.\n                _picker.closeDropdown();\n\n                // Create a new filter set\n                editFilter({ name: \"\", patterns: [] }, -1);\n            } else if (itemIndex === 1) {\n                // Uncheck the prior active filter in the dropdown list.\n                _picker.setChecked(itemIndex, false);\n\n                // Clear the active filter\n                setActiveFilter(null);\n                _updatePicker();\n            } else if (itemIndex >= FIRST_FILTER_INDEX && item) {\n                setActiveFilter(item, itemIndex - FIRST_FILTER_INDEX);\n                _picker.setChecked(itemIndex, true);\n                _updatePicker();\n            }\n        });\n\n        return _picker.$button;\n    }\n\n    /**\n     * Allows unit tests to open the file filter dropdown list.\n     */\n    function showDropdown() {\n        if (_picker) {\n            _picker.showDropdown();\n        }\n    }\n\n    /**\n     * Allows unit tests to close the file filter dropdown list.\n     */\n    function closeDropdown() {\n        if (_picker) {\n            _picker.closeDropdown();\n        }\n    }\n\n    // For unit tests only\n    exports.showDropdown       = showDropdown;\n    exports.closeDropdown      = closeDropdown;\n\n    exports.createFilterPicker     = createFilterPicker;\n    exports.commitPicker           = commitPicker;\n    exports.getActiveFilter        = getActiveFilter;\n    exports.setActiveFilter        = setActiveFilter;\n    exports.editFilter             = editFilter;\n    exports.compile                = compile;\n    exports.filterPath             = filterPath;\n    exports.filterFileList         = filterFileList;\n    exports.getPathsMatchingFilter = getPathsMatchingFilter;\n});\n"],"file":"FileFilters.js"}