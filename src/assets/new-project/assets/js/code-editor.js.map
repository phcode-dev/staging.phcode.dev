{"version":3,"sources":["assets/new-project/assets/js/code-editor.js"],"names":["_createRecentProjectCard","fullPath","displayLocation","nodeId","tabIndex","removeBtnDisableStyle","recentProjectListWidth","path","normalize","newProjectExtension","getWelcomeProjectPath","fontWidth","charsToFillFontWidth","document","getElementById","clientWidth","title","length","$","basename","Strings","REMOVE_FROM_RECENT_PROJECTS","_recentProjectMetric","type","Metrics","countEvent","EVENT_TYPE","NEW_PROJECT","getDisplayLocation","projectPath","tauriDir","getTauriDir","startsWith","getTauriPlatformPath","getMountDir","PROJECT_FROM_BROWSER","imageHTML","_updateProjectCards","recentProjectList","empty","recentProjects","recentProjectExtension","getRecentProjects","defaultProjects","getExploreProjectPath","omitProjectsInListing","showRecentProjects","recentProject","endsWith","includes","append","addClass","removeClass","innerHTML","openProject","openProjectWithPath","then","closeDialogue","catch","removeProject","removeFromRecentProject","event","stopPropagation","_showFirstTimeExperience","shownBefore","PhStore","getItem","createNotificationFromTemplate","DEFAULT_PROJECT_NOTIFICATION","allowedPlacements","autoCloseTimeS","dismissOnClick","setItem","_updateDropdown","shouldShowWelcome","style","_attachSettingBtnEventListeners","querySelector","addEventListener","content","this","dropbtn","display","classList","remove","add","showAboutBox","dropdown","contains","target","_openURLInTauri","url","window","top","__TAURI__","Phoenix","app","openURLInDefaultBrowser","initCodeEditor","onclick","openFolder","location","href","SUPPORT_US_OPEN_COLLECTIVE","icons","iconID","getAttribute","newProjectFromURLScreen","getPhoenixAbsURL","NEW_HTML","previewURL"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global path, newProjectExtension, recentProjectExtension, Strings, Metrics,newProjectFromURLScreen\n,getPhoenixAbsURL, createNotificationFromTemplate*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/* jshint ignore:start */\n\nfunction _createRecentProjectCard(fullPath, displayLocation, nodeId, tabIndex) {\n    let removeBtnDisableStyle = \"\";\n    if(path.normalize(fullPath) === path.normalize(newProjectExtension.getWelcomeProjectPath())){\n        removeBtnDisableStyle = \"display: none;\";\n    }\n    let recentProjectListWidth = document.getElementById('recentProjectList').clientWidth;\n    const fontWidth = 6;\n    const charsToFillFontWidth = recentProjectListWidth/fontWidth;\n    // show title only if the path is longer than the inline display location.\n    const title = displayLocation.length < charsToFillFontWidth ? \"\" : displayLocation;\n    return $(`<li onclick=\"openProject('${fullPath}');_recentProjectMetric('open');\" style=\"overflow: hidden\" title=\"${title}\">\n        <a id=\"${nodeId}\" href=\"#\" \n        class=\"d-flex align-items-center justify-content-between tabable\"\n        tabindex=\"${tabIndex}\">\n            <div class=\"project-name\">\n                ${newProjectExtension.path.basename(fullPath)}\n            </div>\n            <button class=\"remove-btn recent-project-remove\" onclick=\"removeProject('${fullPath}');_recentProjectMetric('remove');\"\n            style=\"${removeBtnDisableStyle};\" title=\"${Strings.REMOVE_FROM_RECENT_PROJECTS}\">\n                <i class=\"fa-solid fa-xmark\"></i>\n            </button>\n        </a>\n        <div style=\"overflow: hidden;\">\n            <p class=\"recent-project-metadata\">${displayLocation}</p>\n        </div>\n    </li>`);\n}\n\nfunction _recentProjectMetric(type) {\n    Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"recentProject.btnClick\", type);\n}\n\nfunction getDisplayLocation(projectPath) {\n    const tauriDir = newProjectExtension.getTauriDir();\n    if (projectPath.startsWith(tauriDir)) {\n        return newProjectExtension.getTauriPlatformPath(projectPath);\n    }\n    if (projectPath.startsWith(newProjectExtension.getMountDir())) {\n        return \"\"; // we don't show anything if it's stored on user's hard drive for better ui.\n    }\n    return Strings.PROJECT_FROM_BROWSER;\n}\n\nconst imageHTML = `<img src=\"images/youtube_video.webp\" alt=\"Phoenix Code on YouTube\"\n    title=\"Phoenix Code on YouTube\"\n    style=\"cursor: pointer; width: 100%; height: 100%\"\n    onclick=\"window.parent.brackets.app.openURLInDefaultBrowser('https://www.youtube.com/watch?v=vtks0cus0hA')\"/>`;\n\nfunction _updateProjectCards() {\n    let recentProjectList = $(document.getElementById('recentProjectList'));\n    recentProjectList.empty();\n    let recentProjects = recentProjectExtension.getRecentProjects();\n    let tabIndex = 1;\n    let defaultProjects = [newProjectExtension.getWelcomeProjectPath(), newProjectExtension.getExploreProjectPath()],\n        omitProjectsInListing = [newProjectExtension.getExploreProjectPath()],\n        showRecentProjects = false;\n    for(let recentProject of recentProjects){\n        if(!recentProject.endsWith(\"/\")){\n            recentProject = `${recentProject}/`;\n        }\n        if(!defaultProjects.includes(recentProject)){\n            showRecentProjects = true;\n        }\n        if(!omitProjectsInListing.includes(recentProject)){\n            recentProjectList.append(_createRecentProjectCard(recentProject, getDisplayLocation(recentProject),\n                `recent-prj-list-${tabIndex}`, tabIndex++));\n        }\n    }\n    if(!showRecentProjects){\n        $(\"#recentProjectsContainer\").addClass(\"forced-hidden\");\n        $(\"#noProjectContainer\").removeClass(\"forced-hidden\");\n        document.getElementById(\"YTVideoFrame\").innerHTML = imageHTML;\n    }\n}\n\nfunction openProject(fullPath) {\n    recentProjectExtension.openProjectWithPath(fullPath)\n        .then(()=>{\n            newProjectExtension.closeDialogue();\n        })\n        .catch(()=>{\n            _updateProjectCards();\n        });\n}\n\nfunction removeProject(fullPath) {\n    recentProjectExtension.removeFromRecentProject(fullPath);\n    _updateProjectCards();\n    event.stopPropagation();\n}\n\nfunction _showFirstTimeExperience() {\n    let shownBefore = PhStore.getItem('notification.defaultProject.Shown');\n    if(!shownBefore){\n        createNotificationFromTemplate(Strings.DEFAULT_PROJECT_NOTIFICATION,\n            \"defaultProjectButton\", {\n                allowedPlacements: [\"left\", \"right\"],\n                autoCloseTimeS: 15,\n                dismissOnClick: true\n            });\n        PhStore.setItem('notification.defaultProject.Shown', 'true');\n    }\n}\n\nfunction _updateDropdown() {\n    let shouldShowWelcome = PhStore.getItem(\"new-project.showWelcomeScreen\") || 'Y';\n    if(shouldShowWelcome === 'Y') {\n        document.getElementById(\"showWelcomeIndicator\").style = \"visibility: visible\";\n    } else {\n        document.getElementById(\"showWelcomeIndicator\").style = \"visibility: hidden\";\n    }\n}\n\nfunction _attachSettingBtnEventListeners() {\n    document.querySelector('.dropdown').addEventListener('click', function() {\n        let content = this.querySelector('.dropdown-content');\n        let dropbtn = this.querySelector('.dropbtn');\n        _updateDropdown();\n        if (content.style.display === 'block') {\n            content.style.display = 'none';\n            dropbtn.classList.remove('dropbtnActive');\n        } else {\n            content.style.display = 'block';\n            dropbtn.classList.add('dropbtnActive');\n        }\n    });\n\n    document.getElementById(\"showWelcome\").addEventListener('click', (event)=>{\n        let shouldShowWelcome = PhStore.getItem(\"new-project.showWelcomeScreen\") || 'Y';\n        shouldShowWelcome = shouldShowWelcome === 'Y'? 'N' : 'Y';\n        PhStore.setItem(\"new-project.showWelcomeScreen\", shouldShowWelcome);\n    });\n\n    document.getElementById(\"showAbout\").addEventListener('click', (event)=>{\n        newProjectExtension.showAboutBox();\n    });\n\n    // Event to close dropdown if clicked outside\n    document.addEventListener('click', function(event) {\n        let dropdown = document.querySelector('.dropdown');\n        let content = dropdown.querySelector('.dropdown-content');\n        let dropbtn = dropdown.querySelector('.dropbtn');\n\n        // If the target of the click isn't the dropdown or a descendant of the dropdown\n        if (!dropdown.contains(event.target)) {\n            content.style.display = 'none';\n            dropbtn.classList.remove('dropbtnActive');\n        }\n    });\n}\n\nfunction _openURLInTauri(url) {\n    // in tauri, the <a> tag will not open a browser window. So we have to use phcode apis to do it.\n    // else, the browser itself will open the url. so we dont have to do this in normal browsers.\n    if(window.top.__TAURI__) {\n        window.top.Phoenix.app.openURLInDefaultBrowser(url);\n    }\n}\n\nfunction initCodeEditor() {\n    document.getElementById(\"openFolderBtn\").onclick = function() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"main.Click\", \"open-folder\");\n        newProjectExtension.openFolder();\n    };\n    document.getElementById(\"viewMore\").onclick = function() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"main.Click\", \"viewMore\");\n        window.location.href = 'new-project-more.html';\n    };\n    document.getElementById(\"githubStarsButton\").onclick = function() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"main.Click\", \"githubStars\");\n        _openURLInTauri(\"https://github.com/phcode-dev/phoenix\");\n    };\n    document.getElementById(\"sponsorIcon\").title = Strings.SUPPORT_US_OPEN_COLLECTIVE;\n    const icons = ['githubIcon', 'twitterIcon', 'youtubeIcon', 'sponsorIcon'];\n    for(let iconID of icons) {\n        document.getElementById(iconID).onclick = function() {\n            Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"main.Click\", iconID);\n            _openURLInTauri(document.getElementById(iconID).getAttribute('href'));\n        };\n    }\n    if(window.top.__TAURI__) {\n        // in desktop, we don't show github project option till we have git extension integrated.\n        document.getElementById(\"newGitHubProject\").classList.add(\"forced-hidden\");\n    }\n    document.getElementById(\"newGitHubProject\").onclick = function() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"main.Click\", \"github-project\");\n        window.location.href = 'new-project-github.html';\n    };\n    document.getElementById(\"exploreBtn\").onclick = function() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"main.Click\", \"games\");\n        openProject(newProjectExtension.getExploreProjectPath());\n    };\n    document.getElementById(\"defaultProjectButton\").onclick = function() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"main.Click\", \"default-project\");\n        openProject(newProjectExtension.getWelcomeProjectPath());\n    };\n    document.getElementById(\"newHTMLBtn\").onclick = function() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"main.Click\", \"html5\");\n        newProjectFromURLScreen(getPhoenixAbsURL(\"assets/sample-projects/HTML5.zip\"),\n            \"html project\", Strings.NEW_HTML, {\n            previewURL: `${getPhoenixAbsURL(\"assets/sample-projects/HTML5/index.html\")}`});\n    };\n    _updateProjectCards();\n    _showFirstTimeExperience();\n    $(\"body\").append($(`<script async defer src=\"https://buttons.github.io/buttons.js\"></script>`));\n    _attachSettingBtnEventListeners();\n}\n"],"file":"code-editor.js"}