{"version":3,"sources":["filesystem/File.js"],"names":["define","require","exports","module","FileSystemEntry","File","fullPath","fileSystem","this","_isFile","call","prototype","Object","create","constructor","parentClass","_contents","_encoding","_preserveBOM","_hash","_clearCachedData","apply","read","options","callback","encoding","_stat","watched","_isWatched","stat","_impl","readFile","_path","err","data","preserveBOM","bind","write","undefined","blind","expectedHash","expectedContents","_fileSystem","_beginChange","writeFile","created","_endChange","parent","getDirectoryForPath","parentPath","_handleDirectoryChange","added","removed","_fireChangeEvent"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,gBAAkBH,QAAQ,8BAe9B,SAASI,KAAKC,SAAUC,YACpBC,KAAKC,SAAU,EACfL,gBAAgBM,KAAKF,KAAMF,SAAUC,YAGzCF,KAAKM,UAAYC,OAAOC,OAAOT,gBAAgBO,WAC/CN,KAAKM,UAAUG,YAAcT,KAC7BA,KAAKM,UAAUI,YAAcX,gBAAgBO,UAO7CN,KAAKM,UAAUK,UAAY,KAQ3BX,KAAKM,UAAUM,UAAY,KAO3BZ,KAAKM,UAAUO,cAAe,EAU9Bb,KAAKM,UAAUQ,MAAQ,KAOvBd,KAAKM,UAAUS,iBAAmB,WAC9BhB,gBAAgBO,UAAUS,iBAAiBC,MAAMb,MACjDA,KAAKQ,UAAY,MAWrBX,KAAKM,UAAUW,KAAO,SAAUC,QAASC,UAcrC,GAbyB,mBAAd,UACPA,SAAWD,SACXA,QAAU,IACFE,SAAWjB,KAAKS,WAExBM,QAAQE,WACRF,QAAQE,SAAW,QAOA,OAAnBjB,KAAKQ,WAAsBR,KAAKkB,OAASH,QAAQE,WAAajB,KAAKS,UACnEO,SAAS,KAAMhB,KAAKQ,UAAWR,KAAKS,UAAWT,KAAKkB,WADxD,CAKA,IAAIC,QAAUnB,KAAKoB,aACfD,UACAJ,QAAQM,KAAOrB,KAAKkB,OAGxBlB,KAAKsB,MAAMC,SAASvB,KAAKwB,MAAOT,QAAS,SAAUU,IAAKC,KAAMT,SAAUU,YAAaN,MACjF,GAAII,IAGA,OAFAzB,KAAKY,wBACLI,SAASS,KAKbzB,KAAKW,MAAQU,KAAKV,MAClBX,KAAKS,UAAYQ,SACjBjB,KAAKU,aAAeiB,YAGhBR,UACAnB,KAAKkB,MAAQG,KACbrB,KAAKQ,UAAYkB,MAGrBV,SAASS,IAAKC,KAAMT,SAAUI,OAChCO,KAAK5B,SAYXH,KAAKM,UAAU0B,MAAQ,SAAUH,KAAMX,QAASC,UACrB,mBAAZD,SACPC,SAAWD,QACXA,QAAU,UAEMe,IAAZf,UACAA,QAAU,IAGdC,SAAWA,UAAY,cAItBD,QAAQgB,QACThB,QAAQiB,aAAehC,KAAKW,MAC5BI,QAAQkB,iBAAmBjC,KAAKQ,WAE/BO,QAAQE,WACTF,QAAQE,SAAW,QAEvBF,QAAQY,YAAc3B,KAAKU,aAG3BV,KAAKkC,YAAYC,eAEjBnC,KAAKsB,MAAMc,UAAUpC,KAAKwB,MAAOE,KAAMX,QAAS,SAAUU,IAAKJ,KAAMgB,SACjE,GAAIZ,IAAK,CACLzB,KAAKY,mBACL,IAEI,YADAI,SAASS,KAEX,QAEEzB,KAAKkC,YAAYI,cAazB,GARAtC,KAAKW,MAAQU,KAAKV,MAGdX,KAAKoB,eACLpB,KAAKkB,MAAQG,KACbrB,KAAKQ,UAAYkB,MAGjBW,QAAS,CACT,IAAIE,OAASvC,KAAKkC,YAAYM,oBAAoBxC,KAAKyC,YACvDzC,KAAKkC,YAAYQ,uBAAuBH,OAAQ,SAAUI,MAAOC,SAC7D,IAEI5B,SAAS,KAAMK,MACjB,QACMkB,OAAOnB,cAGPpB,KAAKkC,YAAYW,iBAAiBN,OAAQI,MAAOC,SAIrD5C,KAAKkC,YAAYI,eAEvBV,KAAK5B,YAEP,IAEIgB,SAAS,KAAMK,MACjB,QAEErB,KAAKkC,YAAYW,iBAAiB7C,MAGlCA,KAAKkC,YAAYI,eAG3BV,KAAK5B,QAIXL,OAAOD,QAAUG","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var FileSystemEntry = require(\"filesystem/FileSystemEntry\");\n\n\n    /*\n     * Model for a File.\n     *\n     * This class should *not* be instantiated directly. Use FileSystem.getFileForPath,\n     * FileSystem.resolve, or Directory.getContents to create an instance of this class.\n     *\n     * See the FileSystem class for more details.\n     *\n     * @constructor\n     * @param {!string} fullPath The full path for this File.\n     * @param {!FileSystem} fileSystem The file system associated with this File.\n     */\n    function File(fullPath, fileSystem) {\n        this._isFile = true;\n        FileSystemEntry.call(this, fullPath, fileSystem);\n    }\n\n    File.prototype = Object.create(FileSystemEntry.prototype);\n    File.prototype.constructor = File;\n    File.prototype.parentClass = FileSystemEntry.prototype;\n\n    /**\n     * Cached contents of this file. This value is nullable but should NOT be undefined.\n     * @private\n     * @type {?string}\n     */\n    File.prototype._contents = null;\n\n\n    /**\n     * Encoding detected by brackets-shell\n     * @private\n     * @type {?string}\n     */\n    File.prototype._encoding = null;\n\n    /**\n     * BOM detected by brackets-shell\n     * @private\n     * @type {?bool}\n     */\n    File.prototype._preserveBOM = false;\n\n    /**\n     * Consistency hash for this file. Reads and writes update this value, and\n     * writes confirm the hash before overwriting existing files. The type of\n     * this object is dependent on the FileSystemImpl; the only constraint is\n     * that === can be used as an equality relation on hashes.\n     * @private\n     * @type {?object}\n     */\n    File.prototype._hash = null;\n\n    /**\n     * Clear any cached data for this file. Note that this explicitly does NOT\n     * clear the file's hash.\n     * @private\n     */\n    File.prototype._clearCachedData = function () {\n        FileSystemEntry.prototype._clearCachedData.apply(this);\n        this._contents = null;\n    };\n\n    /**\n     * Read a file.\n     *\n     * @param {Object=} options properties {encoding: 'one of format supported here:\n     * https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/encoding'}\n     * @param {function (?string, string=, FileSystemStats=)} callback Callback that is passed the\n     *              FileSystemError string or the file's contents and its stats.\n     */\n    File.prototype.read = function (options, callback) {\n        if (typeof (options) === \"function\") {\n            callback = options;\n            options = {};\n            options.encoding = this._encoding;\n        }\n        if(!options.encoding){\n            options.encoding = \"utf8\";\n        }\n\n        // We don't need to check isWatched() here because contents are only saved\n        // for watched files. Note that we need to explicitly test this._contents\n        // for a default value; otherwise it could be the empty string, which is\n        // falsey.\n        if (this._contents !== null && this._stat && options.encoding === this._encoding) {\n            callback(null, this._contents, this._encoding, this._stat);\n            return;\n        }\n\n        var watched = this._isWatched();\n        if (watched) {\n            options.stat = this._stat;\n        }\n\n        this._impl.readFile(this._path, options, function (err, data, encoding, preserveBOM, stat) {\n            if (err) {\n                this._clearCachedData();\n                callback(err);\n                return;\n            }\n\n            // Always store the hash\n            this._hash = stat._hash;\n            this._encoding = encoding;\n            this._preserveBOM = preserveBOM;\n\n            // Only cache data for watched files\n            if (watched) {\n                this._stat = stat;\n                this._contents = data;\n            }\n\n            callback(err, data, encoding, stat);\n        }.bind(this));\n    };\n\n    /**\n     * Write a file.\n     *\n     * @param {string} data Data to write.\n     * @param {Object=} options properties {encoding: 'one of format supported here:\n     * https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder/encoding'}\n     * @param {function (?string, FileSystemStats=)=} callback Callback that is passed the\n     *              FileSystemError string or the file's new stats.\n     */\n    File.prototype.write = function (data, options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        } else {\n            if (options === undefined) {\n                options = {};\n            }\n\n            callback = callback || function () {};\n        }\n\n        // Request a consistency check if the write is not blind\n        if (!options.blind) {\n            options.expectedHash = this._hash;\n            options.expectedContents = this._contents;\n        }\n        if (!options.encoding) {\n            options.encoding = \"utf8\";\n        }\n        options.preserveBOM = this._preserveBOM;\n\n        // Block external change events until after the write has finished\n        this._fileSystem._beginChange();\n\n        this._impl.writeFile(this._path, data, options, function (err, stat, created) {\n            if (err) {\n                this._clearCachedData();\n                try {\n                    callback(err);\n                    return;\n                } finally {\n                    // Always unblock external change events\n                    this._fileSystem._endChange();\n                }\n            }\n\n            // Always store the hash\n            this._hash = stat._hash;\n\n            // Only cache data for watched files\n            if (this._isWatched()) {\n                this._stat = stat;\n                this._contents = data;\n            }\n\n            if (created) {\n                var parent = this._fileSystem.getDirectoryForPath(this.parentPath);\n                this._fileSystem._handleDirectoryChange(parent, function (added, removed) {\n                    try {\n                        // Notify the caller\n                        callback(null, stat);\n                    } finally {\n                        if (parent._isWatched()) {\n                            // If the write succeeded and the parent directory is watched,\n                            // fire a synthetic change event\n                            this._fileSystem._fireChangeEvent(parent, added, removed);\n\n                        }\n                        // Always unblock external change events\n                        this._fileSystem._endChange();\n                    }\n                }.bind(this));\n            } else {\n                try {\n                    // Notify the caller\n                    callback(null, stat);\n                } finally {\n                    // existing file modified\n                    this._fileSystem._fireChangeEvent(this);\n\n                    // Always unblock external change events\n                    this._fileSystem._endChange();\n                }\n            }\n        }.bind(this));\n    };\n\n    // Export this class\n    module.exports = File;\n});\n"],"file":"File.js"}