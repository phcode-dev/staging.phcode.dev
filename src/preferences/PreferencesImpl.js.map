{"version":3,"sources":["preferences/PreferencesImpl.js"],"names":["define","require","exports","module","PreferencesBase","Async","FileSystem","SETTINGS_FILENAME","SETTINGS_FILENAME_BRACKETS","STATE_FILENAME","userPrefFile","path","normalize","brackets","app","getApplicationSupportDirectory","_prefManagerReadyDeferred","$","Deferred","userScopeCorrupt","isUserScopeCorrupt","_addScopePromises","manager","PreferencesSystem","pauseChangeEvents","projectStorage","FileStorage","undefined","projectScope","Scope","projectPathLayer","PathLayer","projectLanguageLayer","LanguageLayer","addLayer","userStorage","userScope","userLanguageLayer","userScopeLoading","addScope","_reloadUserPrefs","rootDir","prefsDir","indexOf","fullPath","fileChanged","push","fail","err","MemoryStorage","before","name","always","waitForAll","resolve","managerReady","promise","reloadUserPrefs"],"mappings":"AA2BAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,MAAMC,gBAAkBH,QAAQ,qBAC5BI,MAAkBJ,QAAQ,eAC1BK,WAAkBL,QAAQ,yBAG1BM,kBAAoB,cACpBC,2BAA6B,gBAC7BC,eAAoB,aAGpBC,aAAeC,KAAKC,UAAUC,SAASC,IAAIC,iCAAmC,gBAOlF,IAAIC,0BAA4B,IAAIC,EAAEC,SAKlCC,kBAAmB,EAEvB,SAASC,qBACL,OAAOD,iBAQX,IAAIE,kBAAoB,GAEpBC,QAAU,IAAIlB,gBAAgBmB,kBAClCD,QAAQE,oBAGR,IAAIC,eAA0B,IAAIrB,gBAAgBsB,iBAAYC,GAAW,GACrEC,aAA0B,IAAIxB,gBAAgByB,MAAMJ,gBACpDK,iBAA0B,IAAI1B,gBAAgB2B,UAC9CC,qBAA0B,IAAI5B,gBAAgB6B,cAElDL,aAAaM,SAASJ,kBACtBF,aAAaM,SAASF,sBAGtB,IAAIG,YAA0B,IAAI/B,gBAAgBsB,YAAYhB,cAAc,GACxE0B,UAA0B,IAAIhC,gBAAgByB,MAAMM,aACpDE,kBAA0B,IAAIjC,gBAAgB6B,cAElDG,UAAUF,SAASG,mBAEnB,IAAIC,iBAAmBhB,QAAQiB,SAAS,OAAQH,WAgChD,SAASI,iBAAiBC,SACtB,IAAIC,SACuC,IAD5B/B,KAAKC,UAAUC,SAASC,IAAIC,iCAAmC,KACjE4B,QAAQF,QAAQG,WACzBtB,QAAQuB,YAAYnC,cAjC5BW,kBAAkByB,KAAKR,kBAGvBA,iBACKS,KAAK,SAAUC,KACZ3B,kBAAkByB,KAAKxB,QAAQiB,SAAS,OAAQ,IAAInC,gBAAgB6C,cAAiB,CACjFC,OAAQ,aAGRF,IAAIG,MAAqB,iBAAbH,IAAIG,OAChBhC,kBAAmB,KAG1BiC,OAAO,WACJ/B,kBAAkByB,KAAKxB,QAAQiB,SAAS,UAAWX,aAAc,CAC7DsB,OAAQ,UAIZ7B,kBAAkByB,KAAKxB,QAAQiB,SAAS,UAAW,IAAInC,gBAAgB6C,gBAEvE5C,MAAMgD,WAAWhC,mBACZ+B,OAAO,WACJpC,0BAA0BsC,cAe1CpD,QAAQoB,QAAsBA,QAC9BpB,QAAQuB,eAAsBA,eAC9BvB,QAAQ4B,iBAAsBA,iBAC9B5B,QAAQoC,iBAAsBA,iBAC9BpC,QAAQQ,aAAsBA,aAC9BR,QAAQkB,mBAAsBA,mBAC9BlB,QAAQqD,aAAsBvC,0BAA0BwC,UACxDtD,QAAQuD,gBAAsBjB,iBAC9BtC,QAAQO,eA/FgB,aAgGxBP,QAAQK,kBAlGgB,cAmGxBL,QAAQM,2BAlGyB","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals path*/\n\n/**\n * Generates the fully configured preferences systems used throughout Brackets. This is intended\n * to be essentially private implementation that can be overridden for tests.\n */\ndefine(function (require, exports, module) {\n\n\n    const PreferencesBase = require(\"./PreferencesBase\"),\n        Async           = require(\"utils/Async\"),\n        FileSystem      = require(\"filesystem/FileSystem\"),\n\n        // The SETTINGS_FILENAME is used with a preceding \".\" within user projects\n        SETTINGS_FILENAME = \"phcode.json\",\n        SETTINGS_FILENAME_BRACKETS = \"brackets.json\",\n        STATE_FILENAME    = \"state.json\",\n\n        // User-level preferences\n        userPrefFile = path.normalize(brackets.app.getApplicationSupportDirectory() + \"/\" + SETTINGS_FILENAME);\n\n    /**\n     * A deferred object which is used to indicate PreferenceManager readiness during the start-up.\n     * @private\n     * @type {$.Deferred}\n     */\n    var _prefManagerReadyDeferred = new $.Deferred();\n\n    /**\n     * A boolean property indicating if the user scope configuration file is malformed.\n     */\n    var userScopeCorrupt = false;\n\n    function isUserScopeCorrupt() {\n        return userScopeCorrupt;\n    }\n\n    /**\n     * Promises to add scopes. Used at init time only.\n     * @private\n     * @type {Array.<$.Promise>}\n     */\n    var _addScopePromises = [];\n\n    var manager = new PreferencesBase.PreferencesSystem();\n    manager.pauseChangeEvents();\n\n    // Create a Project scope\n    var projectStorage          = new PreferencesBase.FileStorage(undefined, true),\n        projectScope            = new PreferencesBase.Scope(projectStorage),\n        projectPathLayer        = new PreferencesBase.PathLayer(),\n        projectLanguageLayer    = new PreferencesBase.LanguageLayer();\n\n    projectScope.addLayer(projectPathLayer);\n    projectScope.addLayer(projectLanguageLayer);\n\n    // Create a User scope\n    var userStorage             = new PreferencesBase.FileStorage(userPrefFile, true),\n        userScope               = new PreferencesBase.Scope(userStorage),\n        userLanguageLayer       = new PreferencesBase.LanguageLayer();\n\n    userScope.addLayer(userLanguageLayer);\n\n    var userScopeLoading = manager.addScope(\"user\", userScope);\n\n    _addScopePromises.push(userScopeLoading);\n\n    // Set up the .phcode.json file handling\n    userScopeLoading\n        .fail(function (err) {\n            _addScopePromises.push(manager.addScope(\"user\", new PreferencesBase.MemoryStorage(), {\n                before: \"default\"\n            }));\n\n            if (err.name && err.name === \"ParsingError\") {\n                userScopeCorrupt = true;\n            }\n        })\n        .always(function () {\n            _addScopePromises.push(manager.addScope(\"project\", projectScope, {\n                before: \"user\"\n            }));\n\n            // Session Scope is for storing prefs in memory only but with the highest precedence.\n            _addScopePromises.push(manager.addScope(\"session\", new PreferencesBase.MemoryStorage()));\n\n            Async.waitForAll(_addScopePromises)\n                .always(function () {\n                    _prefManagerReadyDeferred.resolve();\n                });\n        });\n\n\n    // Listen for times where we might be unwatching a root that contains one of the user-level prefs files,\n    // and force a re-read of the file in order to ensure we can write to it later (see #7300).\n    function _reloadUserPrefs(rootDir) {\n        var prefsDir = path.normalize(brackets.app.getApplicationSupportDirectory() + \"/\");\n        if (prefsDir.indexOf(rootDir.fullPath) === 0) {\n            manager.fileChanged(userPrefFile);\n        }\n    }\n\n    // Semi-Public API. Use this at your own risk. The public API is in PreferencesManager.\n    exports.manager             = manager;\n    exports.projectStorage      = projectStorage;\n    exports.projectPathLayer    = projectPathLayer;\n    exports.userScopeLoading    = userScopeLoading;\n    exports.userPrefFile        = userPrefFile;\n    exports.isUserScopeCorrupt  = isUserScopeCorrupt;\n    exports.managerReady        = _prefManagerReadyDeferred.promise();\n    exports.reloadUserPrefs     = _reloadUserPrefs;\n    exports.STATE_FILENAME      = STATE_FILENAME;\n    exports.SETTINGS_FILENAME   = SETTINGS_FILENAME;\n    exports.SETTINGS_FILENAME_BRACKETS = SETTINGS_FILENAME_BRACKETS;\n});\n"],"file":"PreferencesImpl.js"}