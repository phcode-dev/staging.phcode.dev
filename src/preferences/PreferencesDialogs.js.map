{"version":3,"sources":["preferences/PreferencesDialogs.js"],"names":["define","require","exports","module","Dialogs","ProjectManager","StringUtils","Strings","SettingsDialogTemplate","Mustache","PathUtils","Metrics","_validateBaseUrl","url","result","obj","parseUrl","href","search","format","BASEURL_ERROR_INVALID_PROTOCOL","substring","indexOf","BASEURL_ERROR_SEARCH_DISALLOWED","hash","BASEURL_ERROR_HASH_DISALLOWED","index","BASEURL_ERROR_INVALID_CHAR","BASEURL_ERROR_UNKNOWN_ERROR","showProjectPreferencesDialog","baseUrl","errorMessage","$baseUrlControl","dialog","projectName","projectRoot","getProjectRoot","title","name","templateVars","PROJECT_SETTINGS_TITLE","showModalDialogUsingTemplate","render","done","id","DIALOG_BTN_OK","baseUrlValue","val","countEvent","EVENT_TYPE","UI_DIALOG","setBaseUrl","getElement","find","focus"],"mappings":"AAyBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,QAAyBH,QAAQ,mBACjCI,eAAyBJ,QAAQ,0BACjCK,YAAyBL,QAAQ,qBACjCM,QAAyBN,QAAQ,WACjCO,uBAAyBP,QAAQ,iDACjCQ,SAAyBR,QAAQ,gCACjCS,UAAyBT,QAAQ,oCACjCU,QAAyBV,QAAQ,iBAOrC,SAASW,iBAAiBC,KACtB,IAAIC,OAAS,GAEb,GAAY,KAARD,IACA,OAAOC,OAGX,IAAIC,IAAML,UAAUM,SAASH,KAC7B,GAAKE,IAEE,GAA+C,IAA3CA,IAAIE,KAAKC,OAAO,uBACvBJ,OAASR,YAAYa,OAAOZ,QAAQa,+BAAgCL,IAAIE,KAAKI,UAAU,EAAGN,IAAIE,KAAKK,QAAQ,aACxG,GAAmB,KAAfP,IAAIG,OACXJ,OAASR,YAAYa,OAAOZ,QAAQgB,gCAAiCR,IAAIG,aACtE,GAAiB,KAAbH,IAAIS,KACXV,OAASR,YAAYa,OAAOZ,QAAQkB,8BAA+BV,IAAIS,UACpE,CACH,IAAIE,MAAQb,IAAIK,OAAO,0BACR,IAAXQ,QACAZ,OAASR,YAAYa,OAAOZ,QAAQoB,2BAA4Bd,IAAIa,cAVxEZ,OAASP,QAAQqB,4BAcrB,OAAOd,OAUX,SAASe,6BAA6BC,QAASC,cAC3C,IAAIC,gBACAC,OAGAC,YAAc,GACdC,YAAc9B,eAAe+B,iBAC7BC,MACAF,cACAD,YAAcC,YAAYG,MAI9B,IAAIC,aAAe,CACfF,MAHJA,MAAQ/B,YAAYa,OAAOZ,QAAQiC,uBAAwBN,aAIvDJ,QAASA,QACTC,aAAcA,aACdxB,QAASA,SA4Bb,OAzBA0B,OAAS7B,QAAQqC,6BAA6BhC,SAASiC,OAAOlC,uBAAwB+B,gBAE/EI,KAAK,SAAUC,IAClB,GAAIA,KAAOxC,QAAQyC,cAAe,CAC9B,IAAIC,aAAed,gBAAgBe,MAC/BjC,OAASF,iBAAiBkC,cACf,KAAXhC,QAEAH,QAAQqC,WACJrC,QAAQsC,WAAWC,UACnB,kBACA,eAEJ7C,eAAe8C,WAAWL,eAG1BjB,6BAA6BiB,aAAchC,YAMvDkB,gBAAkBC,OAAOmB,aAAaC,KAAK,SAC3BC,QAETrB,OAIX/B,QAAQU,iBAAkCA,iBAE1CV,QAAQ2B,6BAAkCA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * PreferencesDialogs\n *\n */\ndefine(function (require, exports, module) {\n\n\n    var Dialogs                = require(\"widgets/Dialogs\"),\n        ProjectManager         = require(\"project/ProjectManager\"),\n        StringUtils            = require(\"utils/StringUtils\"),\n        Strings                = require(\"strings\"),\n        SettingsDialogTemplate = require(\"text!htmlContent/project-settings-dialog.html\"),\n        Mustache               = require(\"thirdparty/mustache/mustache\"),\n        PathUtils              = require(\"thirdparty/path-utils/path-utils\"),\n        Metrics                = require(\"utils/Metrics\");\n\n    /**\n     * Validate that text string is a valid base url which should map to a server folder\n     * @param {string} url\n     * @return {string} Empty string if valid, otherwise error string\n     */\n    function _validateBaseUrl(url) {\n        var result = \"\";\n        // Empty url means \"no server mapping; use file directly\"\n        if (url === \"\") {\n            return result;\n        }\n\n        var obj = PathUtils.parseUrl(url);\n        if (!obj) {\n            result = Strings.BASEURL_ERROR_UNKNOWN_ERROR;\n        } else if (obj.href.search(/^(http|https):\\/\\//i) !== 0) {\n            result = StringUtils.format(Strings.BASEURL_ERROR_INVALID_PROTOCOL, obj.href.substring(0, obj.href.indexOf(\"//\")));\n        } else if (obj.search !== \"\") {\n            result = StringUtils.format(Strings.BASEURL_ERROR_SEARCH_DISALLOWED, obj.search);\n        } else if (obj.hash !== \"\") {\n            result = StringUtils.format(Strings.BASEURL_ERROR_HASH_DISALLOWED, obj.hash);\n        } else {\n            var index = url.search(/[ \\^\\[\\]\\{\\}<>\\\\\"\\?]+/);\n            if (index !== -1) {\n                result = StringUtils.format(Strings.BASEURL_ERROR_INVALID_CHAR, url[index]);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Show a dialog that shows the project preferences\n     * @param {string} baseUrl Initial value\n     * @param {string} errorMessage Error to display\n     * @return {Dialog} A Dialog object with an internal promise that will be resolved with the ID\n     *      of the clicked button when the dialog is dismissed. Never rejected.\n     */\n    function showProjectPreferencesDialog(baseUrl, errorMessage) {\n        var $baseUrlControl,\n            dialog;\n\n        // Title\n        var projectName = \"\",\n            projectRoot = ProjectManager.getProjectRoot(),\n            title;\n        if (projectRoot) {\n            projectName = projectRoot.name;\n        }\n        title = StringUtils.format(Strings.PROJECT_SETTINGS_TITLE, projectName);\n\n        var templateVars = {\n            title: title,\n            baseUrl: baseUrl,\n            errorMessage: errorMessage,\n            Strings: Strings\n        };\n\n        dialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(SettingsDialogTemplate, templateVars));\n\n        dialog.done(function (id) {\n            if (id === Dialogs.DIALOG_BTN_OK) {\n                var baseUrlValue = $baseUrlControl.val();\n                var result = _validateBaseUrl(baseUrlValue);\n                if (result === \"\") {\n                    // Send analytics data when url is set in project settings\n                    Metrics.countEvent(\n                        Metrics.EVENT_TYPE.UI_DIALOG,\n                        \"projectSettings\",\n                        \"Livepreview\"\n                    );\n                    ProjectManager.setBaseUrl(baseUrlValue);\n                } else {\n                    // Re-invoke dialog with result (error message)\n                    showProjectPreferencesDialog(baseUrlValue, result);\n                }\n            }\n        });\n\n        // Give focus to first control\n        $baseUrlControl = dialog.getElement().find(\".url\");\n        $baseUrlControl.focus();\n\n        return dialog;\n    }\n\n    // For unit testing\n    exports._validateBaseUrl                = _validateBaseUrl;\n\n    exports.showProjectPreferencesDialog    = showProjectPreferencesDialog;\n});\n"],"file":"PreferencesDialogs.js"}