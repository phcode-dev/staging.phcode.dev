{"version":3,"sources":["phoenix/shell.js"],"names":["initVFS","ERR_CODES","MAX_ALLOWED_TAURI_WINDOWS","CLI_ARGS_QUERY_PARAM","cliArgs","singleInstanceCLIHandler","PHOENIX_WINDOW_PREFIX","PHOENIX_EXTENSION_WINDOW_PREFIX","async","_getTauriWindowLabel","prefix","tauriWindowLabels","window","__TAURI__","invoke","windowLabels","label","startsWith","i","windowLabel","Error","openURLInPhoenixWindow","url","windowTitle","fullscreen","resizable","height","minHeight","width","minWidth","acceptFirstMouse","preferTabs","_prefixPvt","defaultHeight","defaultWidth","tauriWindow","WebviewWindow","title","undefined","isTauriWindow","features","nativeWindow","open","Phoenix","app","getNodeState","cbfn","toggleDevtools","browser","isTauri","closeWindow","getCurrent","close","focusWindow","Promise","reject","setAlwaysOnTop","setFocus","clipboardReadText","clipboard","readText","navigator","getCommandLineArgs","resolve","phoenixURL","URL","location","href","cliQueryParam","searchParams","get","JSON","parse","decodeURIComponent","then","args","finally","setSingleInstanceCLIArgsHandler","handlerFn","event","listen","payload","cwd","receivedEvent","console","log","fileURL","fileURLArray","tauri","eventToUse","push","replace","fileUrlEntry","filesURLList","length","isPrimaryDesktopPhoenixWindow","isPrimary","emit","clipboardReadFiles","files","vfsPaths","platformPath","VFS","getTauriVirtualPath","catch","copyToClipboard","textToCopy","writeText","textArea","document","createElement","value","body","appendChild","select","execCommand","removeChild","isFullscreen","appWindow","fullscreenElement","setFullscreen","enable","documentElement","requestFullscreen","exitFullscreen","getDisplayLocation","fullVFSPath","getTauriDir","fs","getTauriPlatformPath","getMountDir","Strings","STORED_IN_YOUR_BROWSER","getDisplayPath","fullOrRelativeVFSPath","setWindowTitle","setTitle","getWindowTitle","openPathInFileBrowser","toLowerCase","path","openURLInDefaultBrowser","tabIdentifier","shell","error","currentWindowLabel","allTauriWindowsLabels","includes","tauriWindowLabel","openNewPhoenixEditorWindow","preferredWidth","preferredHeight","_cliArgsArray","cliVal","encodeURIComponent","stringify","set","delete","zoomWebView","scaleFactor","getApplicationSupportDirectory","getAppSupportDir","getExtensionsDirectory","getExtensionDir","getUserDocumentsDirectory","getUserProjectsDirectory","getTempDirectory","getTempDir","getTimeSinceStartup","Date","now","startTime","language","appshell"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/*global Phoenix*/\n\n\n/** Setup phoenix shell components\n *\n * This module should be functionally as light weight as possible with minimal deps as it is a shell component.\n * **/\nimport initVFS from \"./init_vfs.js\";\nimport ERR_CODES from \"./errno.js\";\n\ninitVFS();\n\n// We can only have a maximum of 30 windows that have access to tauri apis\n// This limit is set in file `tauri.conf.json` in phoenix-desktop repo at json paths\n// this limit is there due to our use of phtauri:// custom protocol.\n// /tauri/security/dangerousRemoteDomainIpcAccess/0/windows and\n// /tauri/security/dangerousRemoteDomainIpcAccess/1/windows\nconst MAX_ALLOWED_TAURI_WINDOWS = 30;\nconst CLI_ARGS_QUERY_PARAM = 'CLI_ARGS';\nlet cliArgs, singleInstanceCLIHandler;\nconst PHOENIX_WINDOW_PREFIX = 'phcode-';\nconst PHOENIX_EXTENSION_WINDOW_PREFIX = 'extn-';\n\nasync function _getTauriWindowLabel(prefix) {\n    // cannot use tauri sync api here as it returns stale window list window.__TAURI__.window.getAll();\n    const tauriWindowLabels = await window.__TAURI__.invoke('_get_window_labels');\n    const windowLabels = {};\n    for(let label of tauriWindowLabels) {\n        if(label.startsWith(prefix)){\n            windowLabels[label]=true;\n        }\n    }\n    for(let i=1; i<=MAX_ALLOWED_TAURI_WINDOWS; i++){\n        const windowLabel = `${prefix}${i}`;\n        if(!windowLabels[windowLabel]){\n            return windowLabel;\n        }\n    }\n    throw new Error(\"Could not get a free window label to create tauri window\");\n}\n\nasync function openURLInPhoenixWindow(url, {\n    windowTitle, fullscreen, resizable,\n    height, minHeight, width, minWidth, acceptFirstMouse, preferTabs, _prefixPvt = PHOENIX_EXTENSION_WINDOW_PREFIX\n} = {}){\n    const defaultHeight = 900, defaultWidth = 1366;\n    if(window.__TAURI__){\n        const windowLabel = await _getTauriWindowLabel(_prefixPvt);\n        const tauriWindow = new window.__TAURI__.window.WebviewWindow(windowLabel, {\n            url,\n            title: windowTitle || windowLabel || url,\n            fullscreen,\n            resizable: resizable === undefined ? true : resizable,\n            height: height || defaultHeight,\n            minHeight: minHeight || 600,\n            width: width || defaultWidth,\n            minWidth: minWidth || 800,\n            acceptFirstMouse: acceptFirstMouse === undefined ? true : acceptFirstMouse\n        });\n        tauriWindow.isTauriWindow = true;\n        return tauriWindow;\n    }\n    let features = 'toolbar=no,location=no, status=no, menubar=no, scrollbars=yes';\n    features = `${features}, width=${width||defaultWidth}, height=${height||defaultHeight}`;\n    if(resizable === undefined || resizable){\n        features = features + \", resizable=yes\";\n    }\n    if(preferTabs) {\n        features = \"\";\n    }\n    const nativeWindow = window.open(url, '_blank', features);\n    nativeWindow.isTauriWindow = false;\n    return nativeWindow;\n}\n\nPhoenix.app = {\n    getNodeState: function (cbfn){\n        cbfn(new Error('Node cannot be run in phoenix browser mode'));\n    },\n    toggleDevtools: async function () {\n        if(!Phoenix.browser.isTauri){\n            throw new Error(\"toggle_devtools is not supported in browsers\");\n        }\n        return window.__TAURI__.invoke(\"toggle_devtools\", {});\n    },\n    closeWindow: function () {\n        if(!Phoenix.browser.isTauri){\n            throw new Error(\"closeWindow is not supported in browsers\");\n        }\n        window.__TAURI__.window.getCurrent().close();\n    },\n    focusWindow: function () {\n        if(!Phoenix.browser.isTauri){\n            return Promise.reject(new Error(\"focusWindow is not supported in browsers\"));\n        }\n        window.__TAURI__.window.getCurrent().setAlwaysOnTop(true);\n        window.__TAURI__.window.getCurrent().setFocus();\n        window.__TAURI__.window.getCurrent().setAlwaysOnTop(false);\n    },\n    clipboardReadText: function () {\n        if(Phoenix.browser.isTauri){\n            return window.__TAURI__.clipboard.readText();\n        } else if(window.navigator && window.navigator.clipboard){\n            return window.navigator.clipboard.readText();\n        }\n        return Promise.reject(new Error(\"clipboardReadText: Not supported.\"));\n    },\n    /**\n     * Gets the commandline argument in desktop builds and null in browser builds.\n     * @return {Promise<string[]|null>}\n     */\n    getCommandLineArgs: function () {\n        return new Promise((resolve)=>{\n            if(!Phoenix.browser.isTauri){\n                resolve(null);\n                return;\n            }\n            const phoenixURL = new URL(location.href);\n            const cliQueryParam = phoenixURL.searchParams.get(CLI_ARGS_QUERY_PARAM);\n            if(cliQueryParam){\n                // the cli passed in through the url takes highest precedence as we have a single tauri instance,\n                // new windows will be spawned with the cli query param url.\n                cliArgs = JSON.parse(decodeURIComponent(cliQueryParam));\n            }\n            if(cliArgs){\n                resolve(cliArgs);\n                return;\n            }\n            cliArgs = null;\n            window.__TAURI__.invoke('_get_commandline_args')\n                .then(args=>{\n                    cliArgs = args;\n                })\n                .finally(()=>{\n                    resolve(cliArgs);\n                });\n        });\n    },\n    /**\n     * Only a single instance of the app will be present at any time. When another instacne is opened from either cli or\n     * double clicking a file in file explorer in os, the handler will be called with the command line args with the\n     * file that was double-clicked (or folder using open with) in os file explorer/cli.\n     * @param {function([string]cliArgs, cwd)} handlerFn - the handler function will receive two args on callback, the cliArgs\n     *  of the other phoenix process that was invoked to open the file and its current working dir. cwd may be null\n     * @return {*}\n     */\n    setSingleInstanceCLIArgsHandler: function (handlerFn) {\n        if(singleInstanceCLIHandler){\n            throw new Error(\"A single instance handler is already registered!\");\n        }\n        if(handlerFn){\n            singleInstanceCLIHandler = handlerFn;\n        }\n        if(Phoenix.browser.isTauri){\n            window.__TAURI__.event.listen(\"single-instance\", ({payload})=> {\n                handlerFn(payload.args, payload.cwd);\n            });\n            window.__TAURI__.event.listen(\"scheme-request-received\", (receivedEvent)=> {\n                // this is for mac-os open with processing from finder.\n                console.log(\"Macos received Event from OS:\", receivedEvent);\n                const fileURL = receivedEvent.payload;\n                const fileURLArray = receivedEvent.payload.fileURLArray;\n                window.__TAURI__.tauri.invoke(\"get_mac_deep_link_requests\");// this will clear the cached queue in shell\n                const eventToUse = [\"macOSEvent\"];\n                if(typeof fileURL === 'string'){\n                    eventToUse.push(fileURL.replace(\"file://\", \"\"));\n                } else if(fileURLArray){\n                    for(let fileUrlEntry of fileURLArray){\n                        eventToUse.push(fileUrlEntry.replace(\"file://\", \"\"));\n                    }\n                }\n                handlerFn(eventToUse, \"\");\n            });\n            window.__TAURI__.tauri.invoke(\"get_mac_deep_link_requests\").then(filesURLList=>{\n                if(!filesURLList.length){\n                    return;\n                }\n                // this is special handling for open with to work from mac finder. Mac will raise and event which will\n                // be buffered in the shell till the app reads the opened file list. Once read, the file list will be\n                // emptied in shell and no other instances will get the data, so we have to process it here.\n                Phoenix.app.isPrimaryDesktopPhoenixWindow().then(isPrimary=>{\n                    if(isPrimary){\n                        const eventToUse = [\"macOSEvent\"];\n                        for(let fileUrlEntry of filesURLList){\n                            eventToUse.push(fileUrlEntry.replace(\"file://\", \"\"));\n                        }\n                        handlerFn(eventToUse, \"\");\n                        return;\n                    }\n                    window.__TAURI__.event.emit('scheme-request-received', {fileURLArray: filesURLList});\n                });\n            });\n        }\n    },\n    clipboardReadFiles: function () {\n        return new Promise((resolve, reject)=>{\n            if(Phoenix.browser.isTauri){\n                window.__TAURI__.tauri.invoke('_get_clipboard_files')\n                    .then(files =>{\n                        if(!files){\n                            resolve(files);\n                            return;\n                        }\n                        const vfsPaths = [];\n                        for(let platformPath of files) {\n                            vfsPaths.push(Phoenix.VFS.getTauriVirtualPath(platformPath));\n                        }\n                        resolve(vfsPaths);\n                    }).catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n    copyToClipboard: function (textToCopy) {\n        if(Phoenix.browser.isTauri){\n            return window.__TAURI__.clipboard.writeText(textToCopy);\n        } else if(window.navigator && window.navigator.clipboard){\n            return window.navigator.clipboard.writeText(textToCopy);\n        }\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = textToCopy;\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(textArea);\n        return Promise.resolve();\n    },\n    isFullscreen: function () {\n        if(!Phoenix.browser.isTauri) {\n            // use browser full screen api in browsers.\n            return Promise.resolve(!!document.fullscreenElement);\n        }\n        return window.__TAURI__.window.appWindow.isFullscreen();\n    },\n    setFullscreen: function (enable) {\n        if(!Phoenix.browser.isTauri) {\n            // use browser full screen api in browsers.\n            if (enable) {\n                return document.documentElement.requestFullscreen();\n            } else if (document.exitFullscreen) {\n                return  document.exitFullscreen();\n            } else {\n                return Promise.resolve();\n            }\n        }\n        return window.__TAURI__.window.appWindow.setFullscreen(enable);\n    },\n    getDisplayLocation: function (fullVFSPath) {\n        // reruns a user-friendly location that can be shown to the user to make some sense of the virtual file path.\n        // The returned path may not be an actual path if it is not resolvable to a platform path, but a text indicating\n        // its location. Eg: \"Stored in Your Browser\"\n        if (fullVFSPath.startsWith(Phoenix.VFS.getTauriDir())) {\n            return Phoenix.fs.getTauriPlatformPath(fullVFSPath);\n        }\n        if (fullVFSPath.startsWith(Phoenix.VFS.getMountDir())) {\n            return fullVFSPath.replace(Phoenix.VFS.getMountDir(), \"\");\n        }\n        return window.Strings.STORED_IN_YOUR_BROWSER;\n    },\n    getDisplayPath: function (fullOrRelativeVFSPath) {\n        if(!fullOrRelativeVFSPath){\n            return \"\";\n        }\n        // reruns a path that can be shown to the user to make some sense of the virtual file path.\n        // The returned path is platform path for tauri,\n        // a relative path of the form (folder/file.txt) starting with opened folder name for fs access- /mnt/paths\n        // or virtual path if we cant figure out a tauri/fs access path\n        if (fullOrRelativeVFSPath.startsWith(Phoenix.VFS.getTauriDir())) {\n            return Phoenix.fs.getTauriPlatformPath(fullOrRelativeVFSPath);\n        }\n        if (fullOrRelativeVFSPath.startsWith(Phoenix.VFS.getMountDir())) {\n            return fullOrRelativeVFSPath.replace(Phoenix.VFS.getMountDir(), \"\");\n        }\n        return fullOrRelativeVFSPath;\n    },\n    setWindowTitle: async function (title) {\n        window.document.title = title;\n        if(Phoenix.browser.isTauri) {\n            await window.__TAURI__.window.appWindow.setTitle(title);\n        }\n    },\n    getWindowTitle: async function () {\n        if(Phoenix.browser.isTauri) {\n            return window.__TAURI__.window.appWindow.title();\n        }\n        return window.document.title;\n    },\n    openPathInFileBrowser: function (fullVFSPath){\n        return new Promise((resolve, reject)=>{\n            if(!window.__TAURI__ ||\n                !fullVFSPath.startsWith(Phoenix.VFS.getTauriDir())) {\n                reject(\"openPathInFileBrowser is only currently supported in Native builds for tauri paths!\");\n                return;\n            }\n            if(fullVFSPath.toLowerCase().startsWith(\"http://\")\n                || fullVFSPath.toLowerCase().startsWith(\"https://\")\n                || fullVFSPath.toLowerCase().startsWith(\"file://\")) {\n                reject(\"Please use openPathInFileBrowser API to open URLs\");\n                return;\n            }\n            const platformPath = Phoenix.fs.getTauriPlatformPath(fullVFSPath);\n            window.__TAURI__.tauri\n                .invoke('show_in_folder', {path: platformPath})\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n    openURLInDefaultBrowser: function (url, tabIdentifier='_blank'){\n        return new Promise((resolve, reject)=>{\n            if(!window.__TAURI__) {\n                resolve(window.open(url, tabIdentifier, 'noopener,noreferrer'));\n                return;\n            }\n            if( !(url.toLowerCase().startsWith(\"http://\") || url.toLowerCase().startsWith(\"https://\")) ) {\n                reject(\"openURLInDefaultBrowser: URL should be http or https, but was \" + url);\n                return;\n            }\n            window.__TAURI__.shell.open(url)\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n    /**\n     * In a multi window setup in desktop, we operate in tauri single window mode. So there may be multiple windows\n     * for different phoenix editors, but only a single tauri process. One of them is a leader who gets to do special\n     * duties like opening a `new window` instance/ anything that needs a single responsibility. Note that the leader\n     * will cycle though as new windows comes and goes. Usually the leader is a phoenix window with the lowest\n     * tauri window label.\n     * @return {Promise<boolean>}\n     */\n    isPrimaryDesktopPhoenixWindow: async function () {\n        if(!Phoenix.browser.isTauri) {\n            // there is no primary window concept in browsers. all are primary for now.\n            console.error(\"isPrimaryDesktopPhoenixWindow is not supported in browsers!\");\n            return true;\n        }\n        const currentWindowLabel = window.__TAURI__.window.getCurrent().label;\n        if(currentWindowLabel === 'main'){\n            // main window if there will be the primary\n            return true;\n        }\n        const allTauriWindowsLabels  = await window.__TAURI__.invoke('_get_window_labels');\n        if(allTauriWindowsLabels.includes('main')){\n            // we are not main and there is a main window in tauri windows\n            return false;\n        }\n        // the main window has been closed and some other window is the primary now.\n        // the one with the lowest label is primary\n        for(let tauriWindowLabel of allTauriWindowsLabels){\n            if(tauriWindowLabel && tauriWindowLabel.startsWith(PHOENIX_WINDOW_PREFIX) &&\n                currentWindowLabel !== tauriWindowLabel && currentWindowLabel > tauriWindowLabel) {\n                return false;\n            }\n        }\n        return true;\n    },\n    openNewPhoenixEditorWindow: async function (preferredWidth, preferredHeight, _cliArgsArray) {\n        const phoenixURL = new URL(location.href);\n        if(_cliArgsArray){\n            const cliVal = encodeURIComponent(JSON.stringify(_cliArgsArray));\n            phoenixURL.searchParams.set(CLI_ARGS_QUERY_PARAM, cliVal);\n        } else {\n            phoenixURL.searchParams.delete(CLI_ARGS_QUERY_PARAM);\n        }\n        await openURLInPhoenixWindow(phoenixURL.href, {\n            width: preferredWidth,\n            height: preferredHeight,\n            preferTabs: true,\n            _prefixPvt: PHOENIX_WINDOW_PREFIX\n        });\n    },\n    openURLInPhoenixWindow: openURLInPhoenixWindow,\n    zoomWebView: function (scaleFactor = 1) {\n        if(!Phoenix.browser.isTauri){\n            throw new Error(\"zoomWebView is not supported in browsers\");\n        }\n        if(scaleFactor < .1 || scaleFactor > 2) {\n            throw new Error(\"zoomWebView scale factor should be between .1 and 2\");\n        }\n        return window.__TAURI__.tauri.invoke(\"zoom_window\", {scaleFactor: scaleFactor});\n    },\n    getApplicationSupportDirectory: Phoenix.VFS.getAppSupportDir,\n    getExtensionsDirectory: Phoenix.VFS.getExtensionDir,\n    getUserDocumentsDirectory: Phoenix.VFS.getUserDocumentsDirectory,\n    getUserProjectsDirectory: Phoenix.VFS.getUserProjectsDirectory,\n    getTempDirectory: Phoenix.VFS.getTempDir,\n    ERR_CODES: ERR_CODES,\n    getTimeSinceStartup: function () {\n        return Date.now() - Phoenix.startTime; // milliseconds elapsed since app start\n    },\n    language: navigator.language\n};\n\nif(!window.appshell){\n    window.appshell = Phoenix;\n}\n"],"file":"shell.js"}