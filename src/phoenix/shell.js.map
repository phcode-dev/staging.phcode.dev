{"version":3,"sources":["phoenix/shell.js"],"names":["initVFS","ERR_CODES","MAX_ALLOWED_TAURI_WINDOWS","CLI_ARGS_QUERY_PARAM","CLI_CWD_QUERY_PARAM","cliArgs","cliCWD","singleInstanceCLIHandler","quitTimeAppUpdateHandler","PHOENIX_WINDOW_PREFIX","PHOENIX_EXTENSION_WINDOW_PREFIX","async","_getTauriWindowLabel","prefix","tauriWindowLabels","window","__TAURI__","invoke","windowLabels","label","startsWith","i","windowLabel","Error","openURLInPhoenixWindow","url","windowTitle","fullscreen","resizable","height","minHeight","width","minWidth","acceptFirstMouse","preferTabs","_prefixPvt","defaultHeight","defaultWidth","tauriWindow","WebviewWindow","title","undefined","isTauriWindow","features","nativeWindow","open","Phoenix","app","getNodeState","cbfn","registerQuitTimeAppUpdateHandler","handler","browser","isTauri","toggleDevtools","closeWindow","forceClose","instanceCount","extensionWindowCount","getPhoenixInstanceCount","allTauriWindowsLabels","tauriWindowLabel","e","console","error","getCurrent","close","process","exit","focusWindow","Promise","reject","setAlwaysOnTop","setFocus","clipboardReadText","clipboard","readText","navigator","getCommandLineArgs","phoenixURL","URL","location","href","cliQueryParam","searchParams","get","JSON","parse","decodeURIComponent","cliCWDQueryParam","cwd","args","setSingleInstanceCLIArgsHandler","handlerFn","event","listen","payload","receivedEvent","log","fileURL","fileURLArray","tauri","eventToUse","push","replace","fileUrlEntry","then","filesURLList","length","isPrimaryDesktopPhoenixWindow","isPrimary","emit","clipboardReadFiles","resolve","files","vfsPaths","platformPath","VFS","getTauriVirtualPath","catch","copyToClipboard","textToCopy","writeText","textArea","document","createElement","value","body","appendChild","select","execCommand","removeChild","isFullscreen","appWindow","fullscreenElement","setFullscreen","enable","documentElement","requestFullscreen","exitFullscreen","getDisplayLocation","fullVFSPath","getTauriDir","fs","getTauriPlatformPath","getMountDir","Strings","STORED_IN_YOUR_BROWSER","getDisplayPath","fullOrRelativeVFSPath","setWindowTitle","setTitle","getWindowTitle","openPathInFileBrowser","toLowerCase","path","openURLInDefaultBrowser","tabIdentifier","shell","currentWindowLabel","includes","windowCount","getPlatformArch","os","arch","openNewPhoenixEditorWindow","preferredWidth","preferredHeight","_cliArgsArray","_cwd","cliVal","encodeURIComponent","stringify","set","delete","zoomWebView","scaleFactor","getApplicationSupportDirectory","getAppSupportDir","getExtensionsDirectory","getExtensionDir","getUserDocumentsDirectory","getUserProjectsDirectory","getTempDirectory","getTempDir","getTimeSinceStartup","Date","now","startTime","language","appshell"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/*global Phoenix*/\n\n\n/** Setup phoenix shell components\n *\n * This module should be functionally as light weight as possible with minimal deps as it is a shell component.\n * **/\nimport initVFS from \"./init_vfs.js\";\nimport ERR_CODES from \"./errno.js\";\n\ninitVFS();\n\n// We can only have a maximum of 30 windows that have access to tauri apis\n// This limit is set in file `tauri.conf.json` in phoenix-desktop repo at json paths\n// this limit is there due to our use of phtauri:// custom protocol.\n// /tauri/security/dangerousRemoteDomainIpcAccess/0/windows and\n// /tauri/security/dangerousRemoteDomainIpcAccess/1/windows\nconst MAX_ALLOWED_TAURI_WINDOWS = 30;\nconst CLI_ARGS_QUERY_PARAM = 'CLI_ARGS';\nconst CLI_CWD_QUERY_PARAM = 'CLI_CWD';\nlet cliArgs, cliCWD, singleInstanceCLIHandler, quitTimeAppUpdateHandler;\nconst PHOENIX_WINDOW_PREFIX = 'phcode-';\nconst PHOENIX_EXTENSION_WINDOW_PREFIX = 'extn-';\n\nasync function _getTauriWindowLabel(prefix) {\n    // cannot use tauri sync api here as it returns stale window list window.__TAURI__.window.getAll();\n    const tauriWindowLabels = await window.__TAURI__.invoke('_get_window_labels');\n    const windowLabels = {};\n    for(let label of tauriWindowLabels) {\n        if(label.startsWith(prefix)){\n            windowLabels[label]=true;\n        }\n    }\n    for(let i=1; i<=MAX_ALLOWED_TAURI_WINDOWS; i++){\n        const windowLabel = `${prefix}${i}`;\n        if(!windowLabels[windowLabel]){\n            return windowLabel;\n        }\n    }\n    throw new Error(\"Could not get a free window label to create tauri window\");\n}\n\nasync function openURLInPhoenixWindow(url, {\n    windowTitle, fullscreen, resizable,\n    height, minHeight, width, minWidth, acceptFirstMouse, preferTabs, _prefixPvt = PHOENIX_EXTENSION_WINDOW_PREFIX\n} = {}){\n    const defaultHeight = 900, defaultWidth = 1366;\n    if(window.__TAURI__){\n        const windowLabel = await _getTauriWindowLabel(_prefixPvt);\n        const tauriWindow = new window.__TAURI__.window.WebviewWindow(windowLabel, {\n            url,\n            title: windowTitle || windowLabel || url,\n            fullscreen,\n            resizable: resizable === undefined ? true : resizable,\n            height: height || defaultHeight,\n            minHeight: minHeight || 600,\n            width: width || defaultWidth,\n            minWidth: minWidth || 800,\n            acceptFirstMouse: acceptFirstMouse === undefined ? true : acceptFirstMouse\n        });\n        tauriWindow.isTauriWindow = true;\n        return tauriWindow;\n    }\n    let features = 'toolbar=no,location=no, status=no, menubar=no, scrollbars=yes';\n    features = `${features}, width=${width||defaultWidth}, height=${height||defaultHeight}`;\n    if(resizable === undefined || resizable){\n        features = features + \", resizable=yes\";\n    }\n    if(preferTabs) {\n        features = \"\";\n    }\n    const nativeWindow = window.open(url, '_blank', features);\n    nativeWindow.isTauriWindow = false;\n    return nativeWindow;\n}\n\nPhoenix.app = {\n    getNodeState: function (cbfn){\n        cbfn(new Error('Node cannot be run in phoenix browser mode'));\n    },\n    registerQuitTimeAppUpdateHandler: function (handler) {\n        if(!Phoenix.browser.isTauri){\n            throw new Error(\"registerQuitTimeAppUpdateHandler is not supported in browsers\");\n        }\n        quitTimeAppUpdateHandler = handler;\n    },\n    toggleDevtools: async function () {\n        if(!Phoenix.browser.isTauri){\n            throw new Error(\"toggle_devtools is not supported in browsers\");\n        }\n        return window.__TAURI__.invoke(\"toggle_devtools\", {});\n    },\n    closeWindow: async function (forceClose) {\n        if(!Phoenix.browser.isTauri){\n            throw new Error(\"closeWindow is not supported in browsers\");\n        }\n        let instanceCount = 0;\n        let extensionWindowCount = 0;\n        try{\n            instanceCount = await Phoenix.app.getPhoenixInstanceCount();\n            const allTauriWindowsLabels  = await window.__TAURI__.invoke('_get_window_labels');\n            for(let tauriWindowLabel of allTauriWindowsLabels){\n                if(tauriWindowLabel && tauriWindowLabel.startsWith(PHOENIX_EXTENSION_WINDOW_PREFIX)) {\n                    extensionWindowCount ++;\n                }\n            }\n        } catch (e) {\n            console.error(\"Ignoring Error while Phoenix.app.closeWindow: \", e);\n        }\n        if(instanceCount === 1 && !extensionWindowCount) {\n            // we are the only window, so use process quit as in some os, hidden tauri windows will prevent app quit.\n            if(!forceClose && quitTimeAppUpdateHandler){\n                try{\n                    await quitTimeAppUpdateHandler();\n                }catch (e) {\n                    // we never fail the quit loop, ele the window ill never go away.\n                    console.error(e);\n                }\n            }\n            window.__TAURI__.process.exit(0);\n            return;\n        }\n        window.__TAURI__.window.getCurrent().close();\n    },\n    focusWindow: function () {\n        if(!Phoenix.browser.isTauri){\n            return Promise.reject(new Error(\"focusWindow is not supported in browsers\"));\n        }\n        window.__TAURI__.window.getCurrent().setAlwaysOnTop(true);\n        window.__TAURI__.window.getCurrent().setFocus();\n        window.__TAURI__.window.getCurrent().setAlwaysOnTop(false);\n    },\n    clipboardReadText: function () {\n        if(Phoenix.browser.isTauri){\n            return window.__TAURI__.clipboard.readText();\n        } else if(window.navigator && window.navigator.clipboard){\n            return window.navigator.clipboard.readText();\n        }\n        return Promise.reject(new Error(\"clipboardReadText: Not supported.\"));\n    },\n    /**\n     * Gets the commandline argument in desktop builds and null in browser builds.\n     * Will always return CLI of the current process only.\n     * @return {Promise<{cwd:string,args:string[]}|null>}\n     */\n    getCommandLineArgs: async function () {\n        if(!Phoenix.browser.isTauri){\n            return null;\n        }\n        const phoenixURL = new URL(location.href);\n        const cliQueryParam = phoenixURL.searchParams.get(CLI_ARGS_QUERY_PARAM);\n        // the cli passed in through the url takes highest precedence as we have a single tauri instance,\n        // new windows will be spawned with the cli query param url. Eg. (File>new window, or double clicking\n        // phoenix icon or launching phoenix with cli args) while another phoenix window is open.\n        // So only the first window to open will have the original cli query param, every other window will have\n        // it override with query params.\n        if(cliQueryParam){\n            cliArgs = JSON.parse(decodeURIComponent(cliQueryParam));\n        }\n        const cliCWDQueryParam = phoenixURL.searchParams.get(CLI_CWD_QUERY_PARAM);\n        if(cliCWDQueryParam){\n            cliCWD = JSON.parse(decodeURIComponent(cliCWDQueryParam));\n        }\n        if(cliArgs){\n            return {\n                cwd: cliCWD,\n                args: cliArgs\n            };\n        }\n        cliArgs = null;\n        cliCWD = await window.__TAURI__.invoke(\"get_current_working_dir\");\n        cliArgs = await window.__TAURI__.invoke('_get_commandline_args');\n        return {\n            cwd: cliCWD,\n            args: cliArgs\n        };\n    },\n    /**\n     * Only a single instance of the app will be present at any time. When another instacne is opened from either cli or\n     * double clicking a file in file explorer in os, the handler will be called with the command line args with the\n     * file that was double-clicked (or folder using open with) in os file explorer/cli.\n     * @param {function([string]cliArgs, cwd)} handlerFn - the handler function will receive two args on callback, the cliArgs\n     *  of the other phoenix process that was invoked to open the file and its current working dir. cwd may be null\n     * @return {*}\n     */\n    setSingleInstanceCLIArgsHandler: function (handlerFn) {\n        if(singleInstanceCLIHandler){\n            throw new Error(\"A single instance handler is already registered!\");\n        }\n        if(handlerFn){\n            singleInstanceCLIHandler = handlerFn;\n        }\n        if(Phoenix.browser.isTauri){\n            window.__TAURI__.event.listen(\"single-instance\", ({payload})=> {\n                handlerFn(payload.args, payload.cwd);\n            });\n            window.__TAURI__.event.listen(\"scheme-request-received\", (receivedEvent)=> {\n                // this is for mac-os open with processing from finder.\n                console.log(\"Macos received Event from OS:\", receivedEvent);\n                const fileURL = receivedEvent.payload;\n                const fileURLArray = receivedEvent.payload.fileURLArray;\n                window.__TAURI__.tauri.invoke(\"get_mac_deep_link_requests\");// this will clear the cached queue in shell\n                const eventToUse = [\"macOSEvent\"];\n                if(typeof fileURL === 'string'){\n                    eventToUse.push(fileURL.replace(\"file://\", \"\"));\n                } else if(fileURLArray){\n                    for(let fileUrlEntry of fileURLArray){\n                        eventToUse.push(fileUrlEntry.replace(\"file://\", \"\"));\n                    }\n                }\n                handlerFn(eventToUse, \"\");\n            });\n            window.__TAURI__.tauri.invoke(\"get_mac_deep_link_requests\").then(filesURLList=>{\n                if(!filesURLList.length){\n                    return;\n                }\n                // this is special handling for open with to work from mac finder. Mac will raise and event which will\n                // be buffered in the shell till the app reads the opened file list. Once read, the file list will be\n                // emptied in shell and no other instances will get the data, so we have to process it here.\n                Phoenix.app.isPrimaryDesktopPhoenixWindow().then(isPrimary=>{\n                    if(isPrimary){\n                        const eventToUse = [\"macOSEvent\"];\n                        for(let fileUrlEntry of filesURLList){\n                            eventToUse.push(fileUrlEntry.replace(\"file://\", \"\"));\n                        }\n                        handlerFn(eventToUse, \"\");\n                        return;\n                    }\n                    window.__TAURI__.event.emit('scheme-request-received', {fileURLArray: filesURLList});\n                });\n            });\n        }\n    },\n    clipboardReadFiles: function () {\n        return new Promise((resolve, reject)=>{\n            if(Phoenix.browser.isTauri){\n                window.__TAURI__.tauri.invoke('_get_clipboard_files')\n                    .then(files =>{\n                        if(!files){\n                            resolve(files);\n                            return;\n                        }\n                        const vfsPaths = [];\n                        for(let platformPath of files) {\n                            vfsPaths.push(Phoenix.VFS.getTauriVirtualPath(platformPath));\n                        }\n                        resolve(vfsPaths);\n                    }).catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n    copyToClipboard: function (textToCopy) {\n        if(Phoenix.browser.isTauri){\n            return window.__TAURI__.clipboard.writeText(textToCopy);\n        } else if(window.navigator && window.navigator.clipboard){\n            return window.navigator.clipboard.writeText(textToCopy);\n        }\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = textToCopy;\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(textArea);\n        return Promise.resolve();\n    },\n    isFullscreen: function () {\n        if(!Phoenix.browser.isTauri) {\n            // use browser full screen api in browsers.\n            return Promise.resolve(!!document.fullscreenElement);\n        }\n        return window.__TAURI__.window.appWindow.isFullscreen();\n    },\n    setFullscreen: function (enable) {\n        if(!Phoenix.browser.isTauri) {\n            // use browser full screen api in browsers.\n            if (enable) {\n                return document.documentElement.requestFullscreen();\n            } else if (document.exitFullscreen) {\n                return  document.exitFullscreen();\n            } else {\n                return Promise.resolve();\n            }\n        }\n        return window.__TAURI__.window.appWindow.setFullscreen(enable);\n    },\n    getDisplayLocation: function (fullVFSPath) {\n        // reruns a user-friendly location that can be shown to the user to make some sense of the virtual file path.\n        // The returned path may not be an actual path if it is not resolvable to a platform path, but a text indicating\n        // its location. Eg: \"Stored in Your Browser\"\n        if (fullVFSPath.startsWith(Phoenix.VFS.getTauriDir())) {\n            return Phoenix.fs.getTauriPlatformPath(fullVFSPath);\n        }\n        if (fullVFSPath.startsWith(Phoenix.VFS.getMountDir())) {\n            return fullVFSPath.replace(Phoenix.VFS.getMountDir(), \"\");\n        }\n        return window.Strings.STORED_IN_YOUR_BROWSER;\n    },\n    getDisplayPath: function (fullOrRelativeVFSPath) {\n        if(!fullOrRelativeVFSPath){\n            return \"\";\n        }\n        // reruns a path that can be shown to the user to make some sense of the virtual file path.\n        // The returned path is platform path for tauri,\n        // a relative path of the form (folder/file.txt) starting with opened folder name for fs access- /mnt/paths\n        // or virtual path if we cant figure out a tauri/fs access path\n        if (fullOrRelativeVFSPath.startsWith(Phoenix.VFS.getTauriDir())) {\n            return Phoenix.fs.getTauriPlatformPath(fullOrRelativeVFSPath);\n        }\n        if (fullOrRelativeVFSPath.startsWith(Phoenix.VFS.getMountDir())) {\n            return fullOrRelativeVFSPath.replace(Phoenix.VFS.getMountDir(), \"\");\n        }\n        return fullOrRelativeVFSPath;\n    },\n    setWindowTitle: async function (title) {\n        window.document.title = title;\n        if(Phoenix.browser.isTauri) {\n            await window.__TAURI__.window.appWindow.setTitle(title);\n        }\n    },\n    getWindowTitle: async function () {\n        if(Phoenix.browser.isTauri) {\n            return window.__TAURI__.window.appWindow.title();\n        }\n        return window.document.title;\n    },\n    openPathInFileBrowser: function (fullVFSPath){\n        return new Promise((resolve, reject)=>{\n            if(!window.__TAURI__ ||\n                !fullVFSPath.startsWith(Phoenix.VFS.getTauriDir())) {\n                reject(\"openPathInFileBrowser is only currently supported in Native builds for tauri paths!\");\n                return;\n            }\n            if(fullVFSPath.toLowerCase().startsWith(\"http://\")\n                || fullVFSPath.toLowerCase().startsWith(\"https://\")\n                || fullVFSPath.toLowerCase().startsWith(\"file://\")) {\n                reject(\"Please use openPathInFileBrowser API to open URLs\");\n                return;\n            }\n            const platformPath = Phoenix.fs.getTauriPlatformPath(fullVFSPath);\n            window.__TAURI__.tauri\n                .invoke('show_in_folder', {path: platformPath})\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n    openURLInDefaultBrowser: function (url, tabIdentifier='_blank'){\n        return new Promise((resolve, reject)=>{\n            if(!window.__TAURI__) {\n                resolve(window.open(url, tabIdentifier, 'noopener,noreferrer'));\n                return;\n            }\n            if( !(url.toLowerCase().startsWith(\"http://\") || url.toLowerCase().startsWith(\"https://\")) ) {\n                reject(\"openURLInDefaultBrowser: URL should be http or https, but was \" + url);\n                return;\n            }\n            window.__TAURI__.shell.open(url)\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n    /**\n     * In a multi window setup in desktop, we operate in tauri single window mode. So there may be multiple windows\n     * for different phoenix editors, but only a single tauri process. One of them is a leader who gets to do special\n     * duties like opening a `new window` instance/ anything that needs a single responsibility. Note that the leader\n     * will cycle though as new windows comes and goes. Usually the leader is a phoenix window with the lowest\n     * tauri window label.\n     * @return {Promise<boolean>}\n     */\n    isPrimaryDesktopPhoenixWindow: async function () {\n        if(!Phoenix.browser.isTauri) {\n            // there is no primary window concept in browsers. all are primary for now.\n            console.error(\"isPrimaryDesktopPhoenixWindow is not supported in browsers!\");\n            return true;\n        }\n        const currentWindowLabel = window.__TAURI__.window.getCurrent().label;\n        if(currentWindowLabel === 'main'){\n            // main window if there will be the primary\n            return true;\n        }\n        const allTauriWindowsLabels  = await window.__TAURI__.invoke('_get_window_labels');\n        if(allTauriWindowsLabels.includes('main')){\n            // we are not main and there is a main window in tauri windows\n            return false;\n        }\n        // the main window has been closed and some other window is the primary now.\n        // the one with the lowest label is primary\n        for(let tauriWindowLabel of allTauriWindowsLabels){\n            if(tauriWindowLabel && tauriWindowLabel.startsWith(PHOENIX_WINDOW_PREFIX) &&\n                currentWindowLabel !== tauriWindowLabel && currentWindowLabel > tauriWindowLabel) {\n                return false;\n            }\n        }\n        return true;\n    },\n    /**\n     * Gets the number of phoenix windows open.\n     * @return {Promise<number>}\n     */\n    getPhoenixInstanceCount: async function () {\n        if(!Phoenix.browser.isTauri) {\n            // there is no primary window concept in browsers. all are primary for now.\n            console.error(\"getPhoenixInstanceCount is not supported in browsers!\");\n            return true;\n        }\n        let windowCount = 0;\n        const allTauriWindowsLabels  = await window.__TAURI__.invoke('_get_window_labels');\n        for(let tauriWindowLabel of allTauriWindowsLabels){\n            if(tauriWindowLabel && (tauriWindowLabel.startsWith(PHOENIX_WINDOW_PREFIX) || tauriWindowLabel === 'main')) {\n                windowCount ++;\n            }\n        }\n        return windowCount;\n    },\n    /**\n     * Returns the operating system CPU architecture for which the tauri app was compiled. Possible values are\n     * 'x86', 'x86_64', 'arm', 'aarch64', 'mips', 'mips64', 'powerpc', 'powerpc64', 'riscv64', 's390x', 'sparc64'.\n     * @return {Promise<string>}\n     */\n    getPlatformArch: async function () {\n        if(!Phoenix.browser.isTauri) {\n            // there is no primary window concept in browsers. all are primary for now.\n            console.error(\"getPlatformArch is not supported in browsers!\");\n            return true;\n        }\n        return window.__TAURI__.os.arch();\n    },\n    openNewPhoenixEditorWindow: async function (preferredWidth, preferredHeight, _cliArgsArray, _cwd) {\n        const phoenixURL = new URL(location.href);\n        if(_cliArgsArray){\n            const cliVal = encodeURIComponent(JSON.stringify(_cliArgsArray));\n            phoenixURL.searchParams.set(CLI_ARGS_QUERY_PARAM, cliVal);\n        } else {\n            phoenixURL.searchParams.delete(CLI_ARGS_QUERY_PARAM);\n        }\n        if(_cwd){\n            const cliVal = encodeURIComponent(JSON.stringify(_cwd));\n            phoenixURL.searchParams.set(CLI_CWD_QUERY_PARAM, cliVal);\n        } else {\n            phoenixURL.searchParams.delete(CLI_CWD_QUERY_PARAM);\n        }\n        await openURLInPhoenixWindow(phoenixURL.href, {\n            width: preferredWidth,\n            height: preferredHeight,\n            preferTabs: true,\n            _prefixPvt: PHOENIX_WINDOW_PREFIX\n        });\n    },\n    openURLInPhoenixWindow: openURLInPhoenixWindow,\n    zoomWebView: function (scaleFactor = 1) {\n        if(!Phoenix.browser.isTauri){\n            throw new Error(\"zoomWebView is not supported in browsers\");\n        }\n        if(scaleFactor < .1 || scaleFactor > 2) {\n            throw new Error(\"zoomWebView scale factor should be between .1 and 2\");\n        }\n        return window.__TAURI__.tauri.invoke(\"zoom_window\", {scaleFactor: scaleFactor});\n    },\n    getApplicationSupportDirectory: Phoenix.VFS.getAppSupportDir,\n    getExtensionsDirectory: Phoenix.VFS.getExtensionDir,\n    getUserDocumentsDirectory: Phoenix.VFS.getUserDocumentsDirectory,\n    getUserProjectsDirectory: Phoenix.VFS.getUserProjectsDirectory,\n    getTempDirectory: Phoenix.VFS.getTempDir,\n    ERR_CODES: ERR_CODES,\n    getTimeSinceStartup: function () {\n        return Date.now() - Phoenix.startTime; // milliseconds elapsed since app start\n    },\n    language: navigator.language\n};\n\nif(!window.appshell){\n    window.appshell = Phoenix;\n}\n"],"file":"shell.js"}