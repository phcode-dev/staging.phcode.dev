{"version":3,"sources":["phoenix/virtual-server-loader.js"],"names":["Workbox","_getBaseURL","baseURL","window","location","href","indexOf","substring","lastIndexOf","endsWith","getRoute","_isServiceWorkerLoaderPage","indexUrl","origin","baseUrl","devURL","async","shouldUpdate","fsServerUrl","navigator","console","log","wb","logToConsolePref","updateViaCache","_refreshCache","messageSW","type","then","msg","catch","err","error","serverReady","serverInstall","showSkipWaitingPrompt","event","updateAccepted","messageSkipWaiting","addEventListener","controlling","isUpdate","register"],"mappings":"OA8BQA,YAAc,oFAEtB,SAASC,cACL,IAAIC,QAAUC,OAAOC,SAASC,KAa9B,OAZGD,SAASC,KAAKC,QAAS,MAAM,IAC5BJ,QAAUE,SAASC,KAAKE,UAAW,EAAGH,SAASC,KAAKC,QAAS,OAE9DF,SAASC,KAAKC,QAAS,MAAM,IAC5BJ,QAAUA,QAAQK,UAAW,EAAGL,QAAQI,QAAS,OAElDF,SAASC,KAAKC,QAAS,MAAM,IAC5BJ,QAAUA,QAAQK,UAAW,EAAGL,QAAQM,YAAa,OAErDN,QAAQO,SAAS,OACjBP,SAAoB,KAEjBA,QAGX,SAASQ,WACL,MAAO,cAKX,SAASC,6BAEL,IAAIC,YAAcR,SAASS,oBACvBC,WAAaV,SAASS,UACtBE,OAAS,6BACb,OAAQX,SAASC,OAASS,SAAWV,SAASC,OAASO,UAAYR,SAASC,OAASU,OAGzFC,eAAeC,eAEX,OAAO,EAMX,GAlBAd,OAAOe,YAAcjB,cAAgBS,WAAa,IAkB9CC,8BAAgC,kBAAmBQ,UAAW,CAC9DC,QAAQC,IAAI,+CAAgDlB,OAAOC,SAASC,MAC5E,MAAMiB,GAAK,IAAItB,wCAAoE,SAA5BG,OAAOoB,0BAAqCb,aAAc,CAE7Gc,eAAgB,SAGpB,SAASC,gBACLL,QAAQC,IAAI,mDACZC,GAAGI,UAAU,CACTC,KAAM,kBACPC,KAAMC,MACLT,QAAQC,IAAI,0BAA2BQ,OACxCC,MAAMC,MACLX,QAAQY,MAAM,8DAA+DD,OAIrF,SAASE,cACLb,QAAQC,IAAI,wCACZC,GAAGI,UAAU,CACTC,KAAM,oBACPC,KAAMV,cACLE,QAAQC,oFAAoFH,iBAC7FY,MAAMC,MACLX,QAAQY,MAAM,4DAA6DD,OAE/EN,gBAGJ,SAASS,gBACLd,QAAQC,IAAI,uDAGhB,MAAMc,sBAAwBnB,MAAOoB,QAcjC,MAAMC,qBAAuBpB,eAEzBoB,gBACAf,GAAGgB,sBAMXhB,GAAGiB,iBAAiB,UAAYH,QAC5BhB,QAAQC,IAAI,iGACZc,sBAAsBC,SAG1Bd,GAAGkB,YAAYZ,KAAKK,aAGpBX,GAAGiB,iBAAiB,YAAcH,QAC1BA,MAAMK,UACNP,kBAIRZ,GAAGoB","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n\n\n/** Sets up a web server for the local phoenix virtual file system root.\n * Based on https://github.com/humphd/nohost\n *\n * This module should be functionally as light weight as possible with minimal deps as it is a shell component.\n * **/\n\n\nimport {Workbox} from 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-window.prod.mjs';\n\nfunction _getBaseURL() {\n    let baseURL = window.location.href;\n    if(location.href.indexOf( \"?\")>-1){\n        baseURL = location.href.substring( 0, location.href.indexOf( \"?\")); // remove query string params\n    }\n    if(location.href.indexOf( \"#\")>-1){\n        baseURL = baseURL.substring( 0, baseURL.indexOf( \"#\")); // remove hrefs in page\n    }\n    if(location.href.indexOf( \"/\")>-1){\n        baseURL = baseURL.substring( 0, baseURL.lastIndexOf( \"/\"));\n    }\n    if(!baseURL.endsWith('/')){\n        baseURL = baseURL + '/';\n    }\n    return baseURL;\n}\n\nfunction getRoute(){\n    return `phoenix/vfs`;\n}\n\nwindow.fsServerUrl = _getBaseURL() + getRoute() + \"/\";\n\nfunction _isServiceWorkerLoaderPage() {\n    // only http(s)://x.y.z/ or http(s)://x.y.z/index.html can load service worker, or localhost/src for dev builds\n    let indexUrl = `${location.origin}/index.html`,\n        baseUrl = `${location.origin}/`,\n        devURL = 'http://localhost:8000/src/';\n    return (location.href === baseUrl || location.href === indexUrl || location.href === devURL);\n}\n\nasync function shouldUpdate() {\n    // service workers are always updated in phoenix instantly.\n    return true;\n}\n\n/**\n * Register Phoenix PWA and nohost web server service worker, passing `route` or other options.\n */\nif (_isServiceWorkerLoaderPage() && 'serviceWorker' in navigator) {\n    console.log(\"Service worker loader: Loading  from page...\", window.location.href);\n    const wb = new Workbox(`virtual-server-main.js?debug=${window.logToConsolePref === 'true'}&route=${getRoute()}`, {\n        // https://developer.chrome.com/blog/fresher-sw/#updateviacache\n        updateViaCache: 'none'\n    });\n\n    function _refreshCache() {\n        console.log(`Service worker loader: triggering REFRESH_CACHE`);\n        wb.messageSW({\n            type: 'REFRESH_CACHE'\n        }).then((msg)=>{\n            console.log(`Service worker loader: `, msg);\n        }).catch(err=>{\n            console.error(\"Service worker loader: Error while triggering cache refresh\", err);\n        });\n    }\n\n    function serverReady() {\n        console.log('Service worker loader: Server ready.');\n        wb.messageSW({\n            type: 'GET_SW_BASE_URL'\n        }).then((fsServerUrl)=>{\n            console.log(`Service worker loader: Server ready! Service worker initialised at base url: ${fsServerUrl}`);\n        }).catch(err=>{\n            console.error(\"Service worker loader: Error while init of service worker\", err);\n        });\n        _refreshCache();\n    }\n\n    function serverInstall() {\n        console.log('Service worker loader: Web server Worker installed.');\n    }\n\n    const showSkipWaitingPrompt = async (event) => {\n        // Assuming the user accepted the update, set up a listener\n        // that will reload the page as soon as the previously waiting\n        // service worker has taken control.\n\n        // When `event.wasWaitingBeforeRegister` is true, a previously\n        // updated service worker is still waiting.\n        // You may want to customize the UI prompt accordingly.\n\n        // This code assumes your app has a promptForUpdate() method,\n        // which returns true if the user wants to update.\n        // Implementing this is app-specific; some examples are:\n        // https://open-ui.org/components/alert.research or\n        // https://open-ui.org/components/toast.research\n        const updateAccepted = await shouldUpdate();\n\n        if (updateAccepted) {\n            wb.messageSkipWaiting();\n        }\n    };\n\n    // Add an event listener to detect when the registered\n    // service worker has installed but is waiting to activate.\n    wb.addEventListener('waiting', (event) => {\n        console.log(\"Service worker loader: A new service worker is pending load. Trying to update the worker now.\");\n        showSkipWaitingPrompt(event);\n    });\n\n    wb.controlling.then(serverReady);\n\n    // Deal with first-run install, if necessary\n    wb.addEventListener('installed', (event) => {\n        if(!event.isUpdate) {\n            serverInstall();\n        }\n    });\n\n    wb.register();\n}\n"],"file":"virtual-server-loader.js"}