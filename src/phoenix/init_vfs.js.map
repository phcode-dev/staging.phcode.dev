{"version":3,"sources":["phoenix/init_vfs.js"],"names":["_setupVFS","fsLib","pathLib","Phoenix","VFS","getRootDir","getMountDir","getAppSupportDir","getExtensionDir","getLocalDir","getTrashDir","getDefaultProjectDir","getUserDocumentsDirectory","ensureExistsDir","path","cb","exists","fs","mkdirs","err","code","ensureExistsDirAsync","async","Promise","resolve","reject","stat","stats","existsAsync","getFsEncoding","_getFsEncoding","encoding","encodingStr","toLowerCase","_SAMPLE_HTML","_tryCreateDefaultProject","projectDir","logger","reportError","indexFile","normalize","writeFile","_createAppDirs","all","_FS_ERROR_MESSAGE","initVFS","window","alert","Error","_phoenixfsAppDirsCreatePromise"],"mappings":"AAiCA,SAASA,UAAUC,MAAOC,SA6DtB,OA5DAC,QAAQC,IAAM,CACVC,WAAY,IAAM,OAClBC,YAAa,IAAM,QACnBC,iBAAkB,IAAM,WACxBC,gBAAiB,IAAM,sBACvBC,YAAa,IAAM,aACnBC,YAAa,IAAM,aACnBC,qBAAsB,IAAM,6BAC5BC,0BAA2B,IAAM,uBACjCC,gBAAiB,SAAUC,KAAMC,IAC7BZ,QAAQC,IAAIY,OAAOF,KAAOE,SAInBA,OACCD,KAGJE,GAAGC,OAAOJ,KAAM,KAAK,EAAM,SAASK,KAC5BA,KAAoB,WAAbA,IAAIC,MACXL,GAAGI,KAEPJ,UAIZM,qBAAsBC,eAAgBR,MAClC,OAAO,IAAIS,QAAQ,CAACC,QAASC,UACzBtB,QAAQC,IAAIS,gBAAgBC,KAAOK,MAC5BA,IACCM,OAAON,KAEPK,eAKhBR,OAAQ,SAAUF,KAAMC,IACpBE,GAAGS,KAAKZ,KAAM,SAAUK,IAAKQ,OAErBZ,MADAY,OAAUR,SAOtBS,YAAaN,eAAgBR,MACzB,OAAO,IAAIS,QAASC,UAChBrB,QAAQC,IAAIY,OAAOF,KAAOE,SACtBQ,QAAQR,aAIpBC,GAAIhB,MACJa,KAAMZ,QACN2B,cAAeC,gBAEnB3B,QAAQc,GAAKhB,MACbE,QAAQW,KAAOZ,QAERC,QAAQC,IAGnB,MAAM0B,eAAiB,SAAUC,UAC7B,MAAMC,YAAcD,SAASE,cAC7B,OAAQD,aACR,IAAK,OACL,IAAK,QACD,MAAO,OACX,IAAK,QACD,MAAO,QACX,IAAK,MACD,MAAO,MACX,IAAK,OACL,IAAK,QACD,MAAO,OACX,IAAK,UACL,IAAK,WACD,MAAO,UACX,IAAK,SACD,MAAO,SACX,IAAK,SACD,MAAO,SACX,IAAK,YACD,MAAO,YAEX,OAAOD,UAGLG,aAAe,uOAarB,SAASC,2BAGL,OAAO,IAAIZ,QAASC,UAChB,IAAIY,WAAajC,QAAQC,IAAIO,uBAC7BR,QAAQC,IAAIY,OAAOoB,WAAapB,SACxBA,OAWJQ,UAVIrB,QAAQC,IAAIS,gBAAgBuB,WAAajB,MAClCA,KACCkB,OAAOC,YAAYnB,IAAK,kCAE5B,IAAIoB,UAAYpC,QAAQC,IAAIU,KAAK0B,aAAaJ,yBAC9CjC,QAAQC,IAAIa,GAAGwB,UAAUF,UAAWL,aAAc,QAClDV,gBASpB,MAAMkB,eAAiB,WAEnB,OAAOnB,QAAQoB,IAAI,CACfxC,QAAQC,IAAIiB,qBAAqBlB,QAAQC,IAAIC,cAC7CF,QAAQC,IAAIiB,qBAAqBlB,QAAQC,IAAIG,oBAC7CJ,QAAQC,IAAIiB,qBAAqBlB,QAAQC,IAAIK,eAC7CN,QAAQC,IAAIiB,qBAAqBlB,QAAQC,IAAIM,eAC7CP,QAAQC,IAAIiB,qBAAqBlB,QAAQC,IAAII,mBAC7CL,QAAQC,IAAIiB,qBAAqBlB,QAAQC,IAAII,kBAAkB,QAC/DL,QAAQC,IAAIiB,qBAAqBlB,QAAQC,IAAII,kBAAkB,OAC/D2B,8BAKFS,kBAAoB,wFACX,SAASC,UACpB,IAAIC,OAAO7B,KAAO6B,OAAOhC,OAASgC,OAAO3C,QAErC,MADA2C,OAAOC,MAAMH,mBACP,IAAII,MAAMJ,mBAGpB5C,UAAU8C,OAAO7B,GAAI6B,OAAOhC,MAC5BgC,OAAOG,+BAAiCP","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Acknowledgements: https://github.com/bpedro/node-fs\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*global fs, Phoenix, logger*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n\n/** Setup virtual file system. This happens before any code of phoenix is loaded.\n * The virtual file system is rooted at /\n * Application support folder that stores app data is /app/\n * Local user storage space is mounted at path /local/\n * Trash storage space is mounted at path /trash/\n *\n * This module should be functionally as light weight as possible with minimal deps as it is a shell component.\n * **/\n\nfunction _setupVFS(fsLib, pathLib){\n    Phoenix.VFS = {\n        getRootDir: () => '/fs/',\n        getMountDir: () => '/mnt/',\n        getAppSupportDir: () => '/fs/app/',\n        getExtensionDir: () => '/fs/app/extensions/',\n        getLocalDir: () => '/fs/local/',\n        getTrashDir: () => '/fs/trash/',\n        getDefaultProjectDir: () => '/fs/local/default project/',\n        getUserDocumentsDirectory: () => '/fs/local/Documents/',\n        ensureExistsDir: function (path, cb) {\n            Phoenix.VFS.exists(path, (exists) =>{\n                // We have to do the exists check explicitly here instead of only using fs.mkdir call check EEXIST code\n                // as trying to call mkdir on `/mnt/someFolder` will throw an error even if the mount point exists.\n                // mount points can only be created by the mount call.\n                if(exists){\n                    cb();\n                    return;\n                }\n                fs.mkdirs(path, 777, true, function(err) {\n                    if (err && err.code !== 'EEXIST') {\n                        cb(err);\n                    }\n                    cb();\n                });\n            });\n        },\n        ensureExistsDirAsync: async function (path) {\n            return new Promise((resolve, reject)=>{\n                Phoenix.VFS.ensureExistsDir(path, (err) =>{\n                    if(err){\n                        reject(err);\n                    } else {\n                        resolve();\n                    }\n                });\n            });\n        },\n        exists: function (path, cb) {\n            fs.stat(path, function (err, stats){\n                if (stats && !err) {\n                    cb(true);\n                } else {\n                    cb(false);\n                }\n            });\n        },\n        existsAsync: async function (path) {\n            return new Promise((resolve)=>{\n                Phoenix.VFS.exists(path, (exists) =>{\n                    resolve(exists);\n                });\n            });\n        },\n        fs: fsLib,\n        path: pathLib,\n        getFsEncoding: _getFsEncoding\n    };\n    Phoenix.fs = fsLib;\n    Phoenix.path = pathLib;\n\n    return Phoenix.VFS;\n}\n\nconst _getFsEncoding = function (encoding){\n    const encodingStr = encoding.toLowerCase();\n    switch (encodingStr){\n    case \"utf8\":\n    case \"utf-8\":\n        return \"utf8\";\n    case \"ascii\":\n        return \"ascii\";\n    case \"hex\":\n        return \"hex\";\n    case \"ucs2\":\n    case \"ucs-2\":\n        return \"ucs2\";\n    case \"utf16le\":\n    case \"utf-16le\":\n        return \"utf16le\";\n    case \"binary\":\n        return \"binary\";\n    case \"latin1\":\n        return \"latin1\";\n    case \"ISO8859-1\":\n        return \"ISO8859-1\";\n    }\n    return encoding;\n};\n\nconst _SAMPLE_HTML = `<!DOCTYPE html>\n<html>\n    <head>\n        <title>Phoenix Editor for the web</title>\n    </head>\n \n    <body>\n        <h1>Welcome to Phoenix</h1>\n        <p> Modern, Open-source, IDE For The Web.</p>\n    </body>\n</html>`;\n\n// always resolves even if error\nfunction _tryCreateDefaultProject() {\n    // Create phoenix app dirs\n    // Create Phoenix default project if it doesnt exist\n    return new Promise((resolve)=>{\n        let projectDir = Phoenix.VFS.getDefaultProjectDir();\n        Phoenix.VFS.exists(projectDir, (exists)=>{\n            if(!exists){\n                Phoenix.VFS.ensureExistsDir(projectDir, (err)=>{\n                    if(err){\n                        logger.reportError(err, \"Error creating default project\");\n                    }\n                    let indexFile = Phoenix.VFS.path.normalize(`${projectDir}/index.html`);\n                    Phoenix.VFS.fs.writeFile(indexFile, _SAMPLE_HTML, 'utf8');\n                    resolve();\n                });\n                return;\n            }\n            resolve();\n        });\n    });\n}\n\nconst _createAppDirs = function () {\n    // Create phoenix app dirs\n    return Promise.all([\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getRootDir()),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getAppSupportDir()),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getLocalDir()),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getTrashDir()),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getExtensionDir()),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getExtensionDir()+\"user\"),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getExtensionDir()+\"dev\"),\n        _tryCreateDefaultProject()\n    ]);\n};\n\n\nconst _FS_ERROR_MESSAGE = 'Oops. Phoenix could not be started due to missing file system library.';\nexport default function initVFS() {\n    if(!window.fs || !window.path || !window.Phoenix){\n        window.alert(_FS_ERROR_MESSAGE);\n        throw new Error(_FS_ERROR_MESSAGE);\n    }\n\n    _setupVFS(window.fs, window.path);\n    window._phoenixfsAppDirsCreatePromise = _createAppDirs();\n}\n\n"],"file":"init_vfs.js"}