{"version":3,"sources":["thirdparty/CodeMirror/mode/sass/sass.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","cssMode","mimeModes","propertyKeywords","colorKeywords","valueKeywords","fontProperties","tokenRegexp","words","RegExp","join","keywords","keywordsRegexp","operators","opRegexp","pseudoElementsRegexp","word","isEndLine","stream","peek","match","urlTokens","state","ch","next","tokenizer","tokenBase","eatSpace","buildStringTokenizer","comment","indentation","multiLine","sol","skipTo","skipToEnd","quote","greedy","stringTokenizer","nextChar","peekChar","previousChar","string","charAt","pos","endingString","cursorHalf","buildInterpolationTokenizer","currentTokenizer","indent","indentCount","lastScopeOffset","currentOffset","scopes","offset","indentUnit","unshift","dedent","length","shift","eatWhile","current","toLowerCase","hasOwnProperty","prevProp","prop","tokenLexer","style","startOfToken","withCurrentIndent","newScopes","i","scope","push","startState","type","definedVars","definedMixins","token","lastToken","content","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../css/css\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../css/css\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sass\", function(config) {\n  var cssMode = CodeMirror.mimeModes[\"text/css\"];\n  var propertyKeywords = cssMode.propertyKeywords || {},\n      colorKeywords = cssMode.colorKeywords || {},\n      valueKeywords = cssMode.valueKeywords || {},\n      fontProperties = cssMode.fontProperties || {};\n\n  function tokenRegexp(words) {\n    return new RegExp(\"^\" + words.join(\"|\"));\n  }\n\n  var keywords = [\"true\", \"false\", \"null\", \"auto\"];\n  var keywordsRegexp = new RegExp(\"^\" + keywords.join(\"|\"));\n\n  var operators = [\"\\\\(\", \"\\\\)\", \"=\", \">\", \"<\", \"==\", \">=\", \"<=\", \"\\\\+\", \"-\",\n                   \"\\\\!=\", \"/\", \"\\\\*\", \"%\", \"and\", \"or\", \"not\", \";\",\"\\\\{\",\"\\\\}\",\":\"];\n  var opRegexp = tokenRegexp(operators);\n\n  var pseudoElementsRegexp = /^::?[a-zA-Z_][\\w\\-]*/;\n\n  var word;\n\n  function isEndLine(stream) {\n    return !stream.peek() || stream.match(/\\s+$/, false);\n  }\n\n  function urlTokens(stream, state) {\n    var ch = stream.peek();\n\n    if (ch === \")\") {\n      stream.next();\n      state.tokenizer = tokenBase;\n      return \"operator\";\n    } else if (ch === \"(\") {\n      stream.next();\n      stream.eatSpace();\n\n      return \"operator\";\n    } else if (ch === \"'\" || ch === '\"') {\n      state.tokenizer = buildStringTokenizer(stream.next());\n      return \"string\";\n    } else {\n      state.tokenizer = buildStringTokenizer(\")\", false);\n      return \"string\";\n    }\n  }\n  function comment(indentation, multiLine) {\n    return function(stream, state) {\n      if (stream.sol() && stream.indentation() <= indentation) {\n        state.tokenizer = tokenBase;\n        return tokenBase(stream, state);\n      }\n\n      if (multiLine && stream.skipTo(\"*/\")) {\n        stream.next();\n        stream.next();\n        state.tokenizer = tokenBase;\n      } else {\n        stream.skipToEnd();\n      }\n\n      return \"comment\";\n    };\n  }\n\n  function buildStringTokenizer(quote, greedy) {\n    if (greedy == null) { greedy = true; }\n\n    function stringTokenizer(stream, state) {\n      var nextChar = stream.next();\n      var peekChar = stream.peek();\n      var previousChar = stream.string.charAt(stream.pos-2);\n\n      var endingString = ((nextChar !== \"\\\\\" && peekChar === quote) || (nextChar === quote && previousChar !== \"\\\\\"));\n\n      if (endingString) {\n        if (nextChar !== quote && greedy) { stream.next(); }\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        state.tokenizer = tokenBase;\n        return \"string\";\n      } else if (nextChar === \"#\" && peekChar === \"{\") {\n        state.tokenizer = buildInterpolationTokenizer(stringTokenizer);\n        stream.next();\n        return \"operator\";\n      } else {\n        return \"string\";\n      }\n    }\n\n    return stringTokenizer;\n  }\n\n  function buildInterpolationTokenizer(currentTokenizer) {\n    return function(stream, state) {\n      if (stream.peek() === \"}\") {\n        stream.next();\n        state.tokenizer = currentTokenizer;\n        return \"operator\";\n      } else {\n        return tokenBase(stream, state);\n      }\n    };\n  }\n\n  function indent(state) {\n    if (state.indentCount == 0) {\n      state.indentCount++;\n      var lastScopeOffset = state.scopes[0].offset;\n      var currentOffset = lastScopeOffset + config.indentUnit;\n      state.scopes.unshift({ offset:currentOffset });\n    }\n  }\n\n  function dedent(state) {\n    if (state.scopes.length == 1) return;\n\n    state.scopes.shift();\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek();\n\n    // Comment\n    if (stream.match(\"/*\")) {\n      state.tokenizer = comment(stream.indentation(), true);\n      return state.tokenizer(stream, state);\n    }\n    if (stream.match(\"//\")) {\n      state.tokenizer = comment(stream.indentation(), false);\n      return state.tokenizer(stream, state);\n    }\n\n    // Interpolation\n    if (stream.match(\"#{\")) {\n      state.tokenizer = buildInterpolationTokenizer(tokenBase);\n      return \"operator\";\n    }\n\n    // Strings\n    if (ch === '\"' || ch === \"'\") {\n      stream.next();\n      state.tokenizer = buildStringTokenizer(ch);\n      return \"string\";\n    }\n\n    if(!state.cursorHalf){// state.cursorHalf === 0\n    // first half i.e. before : for key-value pairs\n    // including selectors\n\n      if (ch === \"-\") {\n        if (stream.match(/^-\\w+-/)) {\n          return \"meta\";\n        }\n      }\n\n      if (ch === \".\") {\n        stream.next();\n        if (stream.match(/^[\\w-]+/)) {\n          indent(state);\n          return \"qualifier\";\n        } else if (stream.peek() === \"#\") {\n          indent(state);\n          return \"tag\";\n        }\n      }\n\n      if (ch === \"#\") {\n        stream.next();\n        // ID selectors\n        if (stream.match(/^[\\w-]+/)) {\n          indent(state);\n          return \"builtin\";\n        }\n        if (stream.peek() === \"#\") {\n          indent(state);\n          return \"tag\";\n        }\n      }\n\n      // Variables\n      if (ch === \"$\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        return \"variable-2\";\n      }\n\n      // Numbers\n      if (stream.match(/^-?[0-9\\.]+/))\n        return \"number\";\n\n      // Units\n      if (stream.match(/^(px|em|in)\\b/))\n        return \"unit\";\n\n      if (stream.match(keywordsRegexp))\n        return \"keyword\";\n\n      if (stream.match(/^url/) && stream.peek() === \"(\") {\n        state.tokenizer = urlTokens;\n        return \"atom\";\n      }\n\n      if (ch === \"=\") {\n        // Match shortcut mixin definition\n        if (stream.match(/^=[\\w-]+/)) {\n          indent(state);\n          return \"meta\";\n        }\n      }\n\n      if (ch === \"+\") {\n        // Match shortcut mixin definition\n        if (stream.match(/^\\+[\\w-]+/)){\n          return \"variable-3\";\n        }\n      }\n\n      if(ch === \"@\"){\n        if(stream.match('@extend')){\n          if(!stream.match(/\\s*[\\w]/))\n            dedent(state);\n        }\n      }\n\n\n      // Indent Directives\n      if (stream.match(/^@(else if|if|media|else|for|each|while|mixin|function)/)) {\n        indent(state);\n        return \"def\";\n      }\n\n      // Other Directives\n      if (ch === \"@\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        return \"def\";\n      }\n\n      if (stream.eatWhile(/[\\w-]/)){\n        if(stream.match(/ *: *[\\w-\\+\\$#!\\(\"']/,false)){\n          word = stream.current().toLowerCase();\n          var prop = state.prevProp + \"-\" + word;\n          if (propertyKeywords.hasOwnProperty(prop)) {\n            return \"property\";\n          } else if (propertyKeywords.hasOwnProperty(word)) {\n            state.prevProp = word;\n            return \"property\";\n          } else if (fontProperties.hasOwnProperty(word)) {\n            return \"property\";\n          }\n          return \"tag\";\n        }\n        else if(stream.match(/ *:/,false)){\n          indent(state);\n          state.cursorHalf = 1;\n          state.prevProp = stream.current().toLowerCase();\n          return \"property\";\n        }\n        else if(stream.match(/ *,/,false)){\n          return \"tag\";\n        }\n        else{\n          indent(state);\n          return \"tag\";\n        }\n      }\n\n      if(ch === \":\"){\n        if (stream.match(pseudoElementsRegexp)){ // could be a pseudo-element\n          return \"variable-3\";\n        }\n        stream.next();\n        state.cursorHalf=1;\n        return \"operator\";\n      }\n\n    } // cursorHalf===0 ends here\n    else{\n\n      if (ch === \"#\") {\n        stream.next();\n        // Hex numbers\n        if (stream.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)){\n          if (isEndLine(stream)) {\n            state.cursorHalf = 0;\n          }\n          return \"number\";\n        }\n      }\n\n      // Numbers\n      if (stream.match(/^-?[0-9\\.]+/)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"number\";\n      }\n\n      // Units\n      if (stream.match(/^(px|em|in)\\b/)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"unit\";\n      }\n\n      if (stream.match(keywordsRegexp)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"keyword\";\n      }\n\n      if (stream.match(/^url/) && stream.peek() === \"(\") {\n        state.tokenizer = urlTokens;\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"atom\";\n      }\n\n      // Variables\n      if (ch === \"$\") {\n        stream.next();\n        stream.eatWhile(/[\\w-]/);\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"variable-2\";\n      }\n\n      // bang character for !important, !default, etc.\n      if (ch === \"!\") {\n        stream.next();\n        state.cursorHalf = 0;\n        return stream.match(/^[\\w]+/) ? \"keyword\": \"operator\";\n      }\n\n      if (stream.match(opRegexp)){\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        return \"operator\";\n      }\n\n      // attributes\n      if (stream.eatWhile(/[\\w-]/)) {\n        if (isEndLine(stream)) {\n          state.cursorHalf = 0;\n        }\n        word = stream.current().toLowerCase();\n        if (valueKeywords.hasOwnProperty(word)) {\n          return \"atom\";\n        } else if (colorKeywords.hasOwnProperty(word)) {\n          return \"keyword\";\n        } else if (propertyKeywords.hasOwnProperty(word)) {\n          state.prevProp = stream.current().toLowerCase();\n          return \"property\";\n        } else {\n          return \"tag\";\n        }\n      }\n\n      //stream.eatSpace();\n      if (isEndLine(stream)) {\n        state.cursorHalf = 0;\n        return null;\n      }\n\n    } // else ends here\n\n    if (stream.match(opRegexp))\n      return \"operator\";\n\n    // If we haven't returned by now, we move 1 character\n    // and return an error\n    stream.next();\n    return null;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) state.indentCount = 0;\n    var style = state.tokenizer(stream, state);\n    var current = stream.current();\n\n    if (current === \"@return\" || current === \"}\"){\n      dedent(state);\n    }\n\n    if (style !== null) {\n      var startOfToken = stream.pos - current.length;\n\n      var withCurrentIndent = startOfToken + (config.indentUnit * state.indentCount);\n\n      var newScopes = [];\n\n      for (var i = 0; i < state.scopes.length; i++) {\n        var scope = state.scopes[i];\n\n        if (scope.offset <= withCurrentIndent)\n          newScopes.push(scope);\n      }\n\n      state.scopes = newScopes;\n    }\n\n\n    return style;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenizer: tokenBase,\n        scopes: [{offset: 0, type: \"sass\"}],\n        indentCount: 0,\n        cursorHalf: 0,  // cursor half tells us if cursor lies after (1)\n                        // or before (0) colon (well... more or less)\n        definedVars: [],\n        definedMixins: []\n      };\n    },\n    token: function(stream, state) {\n      var style = tokenLexer(stream, state);\n\n      state.lastToken = { style: style, content: stream.current() };\n\n      return style;\n    },\n\n    indent: function(state) {\n      return state.scopes[0].offset;\n    },\n\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"indent\"\n  };\n}, \"css\");\n\nCodeMirror.defineMIME(\"text/x-sass\", \"sass\");\n\n});\n"],"file":"sass.js"}