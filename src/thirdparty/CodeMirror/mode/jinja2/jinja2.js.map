{"version":3,"sources":["thirdparty/CodeMirror/mode/jinja2/jinja2.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","operator","sign","atom","number","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","eat","sol","RegExp","join","startState","tokenize","token","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACV,aAEAA,WAAWC,WAAW,SAAU,WAC9B,IAAIC,SAAW,CAAC,MAAO,KAAM,QAAS,WAAY,KAAM,QAAS,QAAS,OAAQ,OAChF,UAAW,SAAU,YAAa,UAAW,MAC7C,SAAU,KAAM,QAAS,YAAa,eACtC,UAAW,aAAc,aACzB,gBAAiB,KAAM,UAAW,OAAQ,MAAO,MAAO,KACxD,SAAU,UAAW,WAAY,YACjC,eAAgB,MAAO,cAAe,YACtC,aAAc,eAAgB,gBAC9B,YAAa,aAAc,cAC3B,eAAgB,aAAc,MAAO,OAAQ,UAC7C,uBAAwB,QAAS,WAAY,OAAQ,aACrD,gBAAiB,0BACjB,4BAA6B,UAC/BC,SAAW,oBACXC,KAAO,aACPC,KAAO,CAAC,OAAQ,SAChBC,OAAS,6BAKT,SAASC,UAAWC,OAAQC,OAC1B,IAAIC,GAAKF,OAAOG,OAGhB,GAAIF,MAAMG,UAOR,OANIJ,OAAOK,OAAO,OAGhBL,OAAOM,SAAS,QAChBL,MAAMG,WAAY,GAHlBJ,OAAOO,YAKF,UAEF,GAAIN,MAAMO,MAAO,CAEtB,GAAGP,MAAMN,SAAU,CAEjB,GADAM,MAAMN,UAAW,EACdK,OAAOS,MAAMZ,MACd,MAAO,OAET,GAAGG,OAAOS,MAAMX,QACd,MAAO,SAIX,GAAGG,MAAML,KAAM,CAEb,GADAK,MAAML,MAAO,EACVI,OAAOS,MAAMZ,MACd,MAAO,OAET,GAAGG,OAAOS,MAAMX,QACd,MAAO,SAIX,GAAGG,MAAMS,SAKP,OAJGR,IAAMD,MAAMS,WACbT,MAAMS,UAAW,GAEnBV,OAAOW,OACA,SACF,GAAS,KAANT,IAAmB,KAANA,GAGrB,OAFAD,MAAMS,SAAWR,GACjBF,OAAOW,OACA,SACF,GAAGX,OAAOS,MAAMR,MAAMO,MAAQ,MAAQR,OAAOY,IAAI,MAAQZ,OAAOS,MAAMR,MAAMO,MAAQ,KAEzF,OADAP,MAAMO,OAAQ,EACP,MACF,GAAGR,OAAOS,MAAMd,UAErB,OADAM,MAAMN,UAAW,EACV,WACF,GAAGK,OAAOS,MAAMb,MACrBK,MAAML,MAAO,OAEb,GAAGI,OAAOY,IAAI,MAAQZ,OAAOa,MAAO,CAClC,GAAGb,OAAOS,MAAMf,UACd,MAAO,UAET,GAAGM,OAAOS,MAAMZ,MACd,MAAO,OAET,GAAGG,OAAOS,MAAMX,QACd,MAAO,SAENE,OAAOa,OACRb,OAAOW,YAGTX,OAAOW,OAIX,MAAO,WACF,GAAIX,OAAOY,IAAI,KAAM,CAC1B,GAAIZ,OAAOY,IAAI,KAQb,OAPAX,MAAMG,WAAY,EACdJ,OAAOK,OAAO,OAGhBL,OAAOM,SAAS,QAChBL,MAAMG,WAAY,GAHlBJ,OAAOO,YAKF,UAEF,GAAIL,GAAKF,OAAOY,IAAI,QAOzB,OALAX,MAAMO,MAAQN,GACL,KAANA,KACDD,MAAMO,MAAQ,KAEhBR,OAAOY,IAAI,KACJ,MAGXZ,OAAOW,OAGT,OApGAjB,SAAW,IAAIoB,OAAO,KAAOpB,SAASqB,KAAK,OAAS,SACpDlB,KAAO,IAAIiB,OAAO,KAAOjB,KAAKkB,KAAK,OAAS,SAmGrC,CACLC,WAAY,WACV,MAAO,CAACC,SAAUlB,YAEpBmB,MAAO,SAAUlB,OAAQC,OACvB,OAAOA,MAAMgB,SAASjB,OAAQC,QAEhCkB,kBAAmB,KACnBC,gBAAiB,QAIrB5B,WAAW6B,WAAW,cAAe","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function() {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n      \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\",\n      \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n      \"ifequal\", \"endifequal\", \"ifnotequal\",\n      \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n      \"parsed\", \"regroup\", \"reversed\", \"spaceless\",\n      \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n      \"closeblock\", \"openvariable\", \"closevariable\",\n      \"openbrace\", \"closebrace\", \"opencomment\",\n      \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n      \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n      \"endblocktrans\", \"get_available_languages\",\n      \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if(!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if(state.operator) {\n          state.operator = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if(state.sign) {\n          state.sign = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if(state.instring) {\n          if(ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if(ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if(stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if(stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if(stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if(stream.eat(\" \") || stream.sol()) {\n            if(stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if(stream.match(atom)) {\n              return \"atom\";\n            }\n            if(stream.match(number)) {\n              return \"number\";\n            }\n            if(stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if(!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if(ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/jinja2\", \"jinja2\");\n});\n"],"file":"jinja2.js"}