{"version":3,"sources":["thirdparty/CodeMirror/mode/dockerfile/dockerfile.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","from","fromRegex","RegExp","shells","shellsAsArrayRegex","join","expose","exposeRegex","others","instructions","instructionRegex","concat","instructionOnlyLine","instructionWithArguments","defineSimpleMode","start","regex","sol","token","next","single","pop","double","array","arguments","push","meta","lineComment","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,wBAAyBA,QAAQ,4BACrB,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,uBAAwB,2BAA4BJ,KAE5DA,IAAIM,YANR,CAOG,SAASA,YACV,aAEA,IAAIC,KAAO,OACPC,UAAY,IAAIC,OAAO,cAAgBF,KAAO,OAAQ,KAEtDG,OAAS,CAAC,MAAO,MAAO,aAAc,SACtCC,mBAAqB,IAAIF,OAAO,WAAaC,OAAOE,KAAK,KAAO,aAAc,KAE9EC,OAAS,SACTC,YAAc,IAAIL,OAAO,WAAaI,OAAS,UAAW,KAE1DE,OAAS,CACX,MAAO,OAAQ,aAAc,QAAS,MACtC,MAAO,OAAQ,SAAU,OACzB,UAAW,UAAW,aAAc,cAAe,SAIjDC,aACAC,iBAAmB,IADJ,CAACV,KAAMM,QAAQK,OAAOR,QAAQQ,OAAOH,QACdH,KAAK,KAAO,IAClDO,oBAAsB,IAAIV,OAAO,UAAYQ,iBAAmB,gBAAiB,KACjFG,yBAA2B,IAAIX,OAAO,UAAYQ,iBAAmB,SAAU,KAEnFX,WAAWe,iBAAiB,aAAc,CACxCC,MAAO,CAEL,CACEC,MAAO,WACPC,KAAK,EACLC,MAAO,WAET,CACEF,MAAOf,UACPiB,MAAO,CAAC,KAAM,WACdD,KAAK,EACLE,KAAM,QAGR,CACEH,MAAOJ,oBACPM,MAAO,CAAC,KAAM,UAAW,KAAM,SAC/BD,KAAK,GAEP,CACED,MAAOZ,mBACPc,MAAO,CAAC,KAAM,UAAW,MACzBD,KAAK,EACLE,KAAM,SAER,CACEH,MAAOT,YACPW,MAAO,CAAC,KAAM,UAAW,MACzBD,KAAK,EACLE,KAAM,UAGR,CACEH,MAAOH,yBACPK,MAAO,CAAC,KAAM,UAAW,MACzBD,KAAK,EACLE,KAAM,aAER,CACEH,MAAO,IACPE,MAAO,OAGXlB,KAAM,CACJ,CACEgB,MAAO,OACPE,MAAO,KACPC,KAAM,SAER,CAEEH,MAAO,cACPE,MAAO,CAAC,KAAM,SACdC,KAAM,SAER,CACEH,MAAO,mBACPE,MAAO,CAAC,KAAM,WACdC,KAAM,SAGR,CACED,MAAO,KACPC,KAAM,UAGVC,OAAQ,CACN,CACEJ,MAAO,iBACPE,MAAO,UAET,CACEF,MAAO,IACPE,MAAO,SACPG,KAAK,IAGTC,OAAQ,CACN,CACEN,MAAO,iBACPE,MAAO,UAET,CACEF,MAAO,IACPE,MAAO,SACPG,KAAK,IAGTE,MAAO,CACL,CACEP,MAAO,KACPE,MAAO,KACPC,KAAM,SAER,CACEH,MAAO,qBACPE,MAAO,WAGXZ,OAAQ,CACN,CACEU,MAAO,OACPE,MAAO,SACPC,KAAM,SAER,CACEH,MAAO,UACPE,MAAO,KACPC,KAAM,SAER,CACEH,MAAO,MACPE,MAAO,UAET,CACEF,MAAO,SACPE,MAAO,MAGT,CACEA,MAAO,KACPC,KAAM,UAGVK,UAAW,CACT,CACER,MAAO,WACPC,KAAK,EACLC,MAAO,WAET,CACEF,MAAO,sBACPE,MAAO,SACPC,KAAM,SAER,CACEH,MAAO,IACPE,MAAO,SACPO,KAAM,UAER,CACET,MAAO,sBACPE,MAAO,SACPC,KAAM,SAER,CACEH,MAAO,IACPE,MAAO,SACPO,KAAM,UAER,CACET,MAAO,gBACPE,MAAO,MAET,CACEF,MAAO,WACPE,MAAO,KACPC,KAAM,SAER,CACEH,MAAO,UACPE,MAAO,MAGT,CACEA,MAAO,KACPC,KAAM,UAGVO,KAAM,CACJC,YAAa,OAIjB5B,WAAW6B,WAAW,oBAAqB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var from = \"from\";\n  var fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\n  var shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\n  var shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\n  var expose = \"expose\";\n  var exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\n  var others = [\n    \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n    \"add\", \"copy\", \"volume\", \"user\",\n    \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n  ];\n\n  // Collect all Dockerfile directives\n  var instructions = [from, expose].concat(shells).concat(others),\n      instructionRegex = \"(\" + instructions.join('|') + \")\",\n      instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n      instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\n  CodeMirror.defineSimpleMode(\"dockerfile\", {\n    start: [\n      // Block comment: This is a line starting with a comment\n      {\n        regex: /^\\s*#.*$/,\n        sol: true,\n        token: \"comment\"\n      },\n      {\n        regex: fromRegex,\n        token: [null, \"keyword\"],\n        sol: true,\n        next: \"from\"\n      },\n      // Highlight an instruction without any arguments (for convenience)\n      {\n        regex: instructionOnlyLine,\n        token: [null, \"keyword\", null, \"error\"],\n        sol: true\n      },\n      {\n        regex: shellsAsArrayRegex,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"array\"\n      },\n      {\n        regex: exposeRegex,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"expose\"\n      },\n      // Highlight an instruction followed by arguments\n      {\n        regex: instructionWithArguments,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"arguments\"\n      },\n      {\n        regex: /./,\n        token: null\n      }\n    ],\n    from: [\n      {\n        regex: /\\s*$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        // Line comment without instruction arguments is an error\n        regex: /(\\s*)(#.*)$/,\n        token: [null, \"error\"],\n        next: \"start\"\n      },\n      {\n        regex: /(\\s*\\S+\\s+)(as)/i,\n        token: [null, \"keyword\"],\n        next: \"start\"\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    single: [\n      {\n        regex: /(?:[^\\\\']|\\\\.)/,\n        token: \"string\"\n      },\n      {\n        regex: /'/,\n        token: \"string\",\n        pop: true\n      }\n    ],\n    double: [\n      {\n        regex: /(?:[^\\\\\"]|\\\\.)/,\n        token: \"string\"\n      },\n      {\n        regex: /\"/,\n        token: \"string\",\n        pop: true\n      }\n    ],\n    array: [\n      {\n        regex: /\\]/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n        token: \"string\"\n      }\n    ],\n    expose: [\n      {\n        regex: /\\d+$/,\n        token: \"number\",\n        next: \"start\"\n      },\n      {\n        regex: /[^\\d]+$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /\\d+/,\n        token: \"number\"\n      },\n      {\n        regex: /[^\\d]+/,\n        token: null\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    arguments: [\n      {\n        regex: /^\\s*#.*$/,\n        sol: true,\n        token: \"comment\"\n      },\n      {\n        regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n        token: \"string\",\n        next: \"start\"\n      },\n      {\n        regex: /\"/,\n        token: \"string\",\n        push: \"double\"\n      },\n      {\n        regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n        token: \"string\",\n        next: \"start\"\n      },\n      {\n        regex: /'/,\n        token: \"string\",\n        push: \"single\"\n      },\n      {\n        regex: /[^#\"']+[\\\\`]$/,\n        token: null\n      },\n      {\n        regex: /[^#\"']+$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /[^#\"']+/,\n        token: null\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    meta: {\n      lineComment: \"#\"\n    }\n  });\n\n  CodeMirror.defineMIME(\"text/x-dockerfile\", \"dockerfile\");\n});\n"],"file":"dockerfile.js"}