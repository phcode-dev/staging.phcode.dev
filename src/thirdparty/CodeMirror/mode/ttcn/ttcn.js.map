{"version":3,"sources":["thirdparty/CodeMirror/mode/ttcn/ttcn.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","words","str","obj","split","i","length","def","mimes","mode","add","prop","hasOwnProperty","push","keywords","builtin","timerOps","portOps","helperType","registerHelper","defineMIME","defineMode","config","parserConfig","indentUnit","configOps","verdictOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","types","visibilityModifiers","templateMatch","multiLineStrings","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","skipToEnd","eatWhile","eat","tokenComment","match","cur","current","propertyIsEnumerable","quote","escaped","end","afterQuote","peek","toLowerCase","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","blockCommentStart","blockCommentEnd","lineComment","fold","name"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        timerOps = parserConfig.timerOps || {},\n        portOps  = parserConfig.portOps || {},\n        configOps = parserConfig.configOps || {},\n        verdictOps = parserConfig.verdictOps || {},\n        sutOps = parserConfig.sutOps || {},\n        functionOps = parserConfig.functionOps || {},\n\n        verdictConsts = parserConfig.verdictConsts || {},\n        booleanConsts = parserConfig.booleanConsts || {},\n        otherConsts   = parserConfig.otherConsts || {},\n\n        types = parserConfig.types || {},\n        visibilityModifiers = parserConfig.visibilityModifiers || {},\n        templateMatch = parserConfig.templateMatch || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[+\\-*&@=<>!\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\"){\n        stream.skipToEnd();\n        return \"atom preprocessor\";\n      }\n      if (ch == \"%\"){\n        stream.eatWhile(/\\b/);\n        return \"atom ttcn3Macros\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (isOperatorChar.test(ch)) {\n        if(ch == \"@\"){\n          if(stream.match(\"try\") || stream.match(\"catch\")\n              || stream.match(\"lazy\")){\n            return \"keyword\";\n          }\n        }\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n\n      if (timerOps.propertyIsEnumerable(cur)) return \"def timerOps\";\n      if (configOps.propertyIsEnumerable(cur)) return \"def configOps\";\n      if (verdictOps.propertyIsEnumerable(cur)) return \"def verdictOps\";\n      if (portOps.propertyIsEnumerable(cur)) return \"def portOps\";\n      if (sutOps.propertyIsEnumerable(cur)) return \"def sutOps\";\n      if (functionOps.propertyIsEnumerable(cur)) return \"def functionOps\";\n\n      if (verdictConsts.propertyIsEnumerable(cur)) return \"string verdictConsts\";\n      if (booleanConsts.propertyIsEnumerable(cur)) return \"string booleanConsts\";\n      if (otherConsts.propertyIsEnumerable(cur)) return \"string otherConsts\";\n\n      if (types.propertyIsEnumerable(cur)) return \"builtin types\";\n      if (visibilityModifiers.propertyIsEnumerable(cur))\n        return \"builtin visibilityModifiers\";\n      if (templateMatch.propertyIsEnumerable(cur)) return \"atom templateMatch\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterQuote = stream.peek();\n            //look if the character after the quote is like the B in '10100010'B\n            if (afterQuote){\n              afterQuote = afterQuote.toLowerCase();\n              if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements &&\n            (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n            (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n\n        return style;\n      },\n\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.timerOps);\n    add(mode.portOps);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-ttcn\", \"text/x-ttcn3\", \"text/x-ttcnpp\"], {\n    name: \"ttcn\",\n    keywords: words(\"activate address alive all alt altstep and and4b any\" +\n    \" break case component const continue control deactivate\" +\n    \" display do else encode enumerated except exception\" +\n    \" execute extends extension external for from function\" +\n    \" goto group if import in infinity inout interleave\" +\n    \" label language length log match message mixed mod\" +\n    \" modifies module modulepar mtc noblock not not4b nowait\" +\n    \" of on optional or or4b out override param pattern port\" +\n    \" procedure record recursive rem repeat return runs select\" +\n    \" self sender set signature system template testcase to\" +\n    \" type union value valueof var variant while with xor xor4b\"),\n    builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\n    \" decomp decvalue float2int float2str hex2bit hex2int\" +\n    \" hex2oct hex2str int2bit int2char int2float int2hex\" +\n    \" int2oct int2str int2unichar isbound ischosen ispresent\" +\n    \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\n    \" oct2str regexp replace rnd sizeof str2bit str2float\" +\n    \" str2hex str2int str2oct substr unichar2int unichar2char\" +\n    \" enum2int\"),\n    types: words(\"anytype bitstring boolean char charstring default float\" +\n    \" hexstring integer objid octetstring universal verdicttype timer\"),\n    timerOps: words(\"read running start stop timeout\"),\n    portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\n    \" reply send trigger\"),\n    configOps: words(\"create connect disconnect done kill killed map unmap\"),\n    verdictOps: words(\"getverdict setverdict\"),\n    sutOps: words(\"action\"),\n    functionOps: words(\"apply derefers refers\"),\n\n    verdictConsts: words(\"error fail inconc none pass\"),\n    booleanConsts: words(\"true false\"),\n    otherConsts: words(\"null NULL omit\"),\n\n    visibilityModifiers: words(\"private public friend\"),\n    templateMatch: words(\"complement ifpresent subset superset permutation\"),\n    multiLineStrings: true\n  });\n});\n"],"file":"ttcn.js"}