{"version":3,"sources":["thirdparty/CodeMirror/mode/shell/shell.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","style","dict","i","length","commonAtoms","commonKeywords","commonCommands","tokenBase","stream","state","eatSpace","sol","ch","next","tokens","unshift","tokenString","tokenize","eat","skipToEnd","tokenDollar","eatWhile","match","heredoc","tokenHeredoc","test","eol","peek","cur","current","hasOwnProperty","quote","close","escaped","shift","backUp","tokenStringStart","registerHelper","concat","delim","string","startState","token","closeBrackets","lineComment","fold","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,QAAS,WAE7B,IAAIC,MAAQ,GACZ,SAASJ,OAAOK,MAAOC,MACrB,IAAI,IAAIC,EAAI,EAAGA,EAAID,KAAKE,OAAQD,IAC9BH,MAAME,KAAKC,IAAMF,MAIrB,IAAII,YAAc,CAAC,OAAQ,SACvBC,eAAiB,CAAC,KAAM,OAAQ,KAAM,OAAQ,OAAQ,QAAS,QAAS,MAAO,KAAM,OAAQ,KAC/F,MAAO,MAAO,OAAQ,OAAQ,MAAO,QAAS,SAAU,YACtDC,eAAiB,CAAC,KAAM,MAAO,OAAQ,OAAQ,MAAO,KAAM,KAAM,QAAS,QAAS,SAAU,QAChG,KAAM,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,MAAO,MAAO,MAAO,OAAQ,KAAM,OAAQ,UAChG,KAAM,KAAM,OAAQ,QAAS,UAAW,KAAM,KAAM,KAAM,OAAQ,MAAO,OAAQ,KAAM,UAAW,KAClG,QAAS,MAAO,UAAW,KAAM,QAAS,QAAS,SAAU,OAAQ,QAAS,MAAO,QAAS,OAC9F,KAAM,OAAQ,MAAO,MAAO,SAAU,MAAO,QAAS,KAAM,MAAO,OAAQ,KAAM,OAAQ,MAAO,QAChG,MAAO,OAQT,SAASC,UAAUC,OAAQC,OACzB,GAAID,OAAOE,WAAY,OAAO,KAE9B,IAAIC,IAAMH,OAAOG,MACbC,GAAKJ,OAAOK,OAEhB,GAAW,OAAPD,GAEF,OADAJ,OAAOK,OACA,KAET,GAAW,MAAPD,IAAsB,MAAPA,IAAqB,MAAPA,GAE/B,OADAH,MAAMK,OAAOC,QAAQC,YAAYJ,GAAW,MAAPA,GAAa,QAAU,WACrDK,SAAST,OAAQC,OAE1B,GAAW,MAAPG,GACF,OAAID,KAAOH,OAAOU,IAAI,MACpBV,OAAOW,YACA,SAETX,OAAOW,YACA,WAET,GAAW,MAAPP,GAEF,OADAH,MAAMK,OAAOC,QAAQK,aACdH,SAAST,OAAQC,OAE1B,GAAW,MAAPG,IAAqB,MAAPA,GAChB,MAAO,WAET,GAAW,MAAPA,GAGF,OAFAJ,OAAOU,IAAI,KACXV,OAAOa,SAAS,MACT,YAET,GAAU,KAANT,GAAW,CACb,GAAIJ,OAAOc,MAAM,MAAO,MAAO,WAC/B,IAAIC,QAAUf,OAAOc,MAAM,6BAC3B,GAAIC,QAEF,OADAd,MAAMK,OAAOC,QAAQS,aAAaD,QAAQ,KACnC,WAGX,GAAI,KAAKE,KAAKb,MACZJ,OAAOa,SAAS,MACbb,OAAOkB,QAAU,KAAKD,KAAKjB,OAAOmB,SACnC,MAAO,SAGXnB,OAAOa,SAAS,SAChB,IAAIO,IAAMpB,OAAOqB,UACjB,MAAsB,MAAlBrB,OAAOmB,QAAkB,MAAMF,KAAKG,KAAa,MAC9C7B,MAAM+B,eAAeF,KAAO7B,MAAM6B,KAAO,KAGlD,SAASZ,YAAYe,MAAO/B,OAC1B,IAAIgC,MAAiB,KAATD,MAAe,IAAe,KAATA,MAAe,IAAMA,MACtD,OAAO,SAASvB,OAAQC,OAEtB,IADA,IAAII,KAAMoB,SAAU,EACa,OAAzBpB,KAAOL,OAAOK,SAAiB,CACrC,GAAIA,OAASmB,QAAUC,QAAS,CAC9BxB,MAAMK,OAAOoB,QACb,MACK,GAAa,MAATrB,OAAiBoB,SAAqB,MAAVF,OAAiBvB,OAAOmB,QAAUK,MAAO,CAC9EC,SAAU,EACVzB,OAAO2B,OAAO,GACd1B,MAAMK,OAAOC,QAAQK,aACrB,MACK,IAAKa,SAAWF,QAAUC,OAASnB,OAASkB,MAEjD,OADAtB,MAAMK,OAAOC,QAAQC,YAAYe,MAAO/B,QACjCiB,SAAST,OAAQC,OACnB,IAAKwB,SAAW,OAAOR,KAAKZ,QAAU,OAAOY,KAAKM,OAAQ,CAC/DtB,MAAMK,OAAOC,QAAQqB,iBAAiBvB,KAAM,WAC5CL,OAAO2B,OAAO,GACd,MAEFF,SAAWA,SAAoB,OAATpB,KAExB,OAAOb,OAIX,SAASoC,iBAAiBL,MAAO/B,OAC/B,OAAO,SAASQ,OAAQC,OAGtB,OAFAA,MAAMK,OAAO,GAAKE,YAAYe,MAAO/B,OACrCQ,OAAOK,OACAI,SAAST,OAAQC,QA3F5BZ,WAAWwC,eAAe,YAAa,QAASjC,YAAYkC,OAAOjC,eAAgBC,iBAEnFX,OAAO,OAAQS,aACfT,OAAO,UAAWU,gBAClBV,OAAO,UAAWW,gBA2FlB,IAAIc,YAAc,SAASZ,OAAQC,OAC7BA,MAAMK,OAAOX,OAAS,GAAGK,OAAOU,IAAI,KACxC,IAAIN,GAAKJ,OAAOK,OAChB,MAAI,SAASY,KAAKb,KAChBH,MAAMK,OAAO,GAAKE,YAAYJ,GAAU,KAANA,GAAY,QAAgB,KAANA,GAAY,MAAQ,UACrEK,SAAST,OAAQC,SAErB,KAAKgB,KAAKb,KAAKJ,OAAOa,SAAS,MACpCZ,MAAMK,OAAOoB,QACN,QAGT,SAASV,aAAae,OACpB,OAAO,SAAS/B,OAAQC,OAGtB,OAFID,OAAOG,OAASH,OAAOgC,QAAUD,OAAO9B,MAAMK,OAAOoB,QACzD1B,OAAOW,YACA,YAIX,SAASF,SAAST,OAAQC,OACxB,OAAQA,MAAMK,OAAO,IAAMP,WAAYC,OAAQC,OAGjD,MAAO,CACLgC,WAAY,WAAY,MAAO,CAAC3B,OAAO,KACvC4B,MAAO,SAASlC,OAAQC,OACtB,OAAOQ,SAAST,OAAQC,QAE1BkC,cAAe,iBACfC,YAAa,IACbC,KAAM,WAIVhD,WAAWiD,WAAW,YAAa,SAGnCjD,WAAWiD,WAAW,mBAAoB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('shell', function() {\n\n  var words = {};\n  function define(style, dict) {\n    for(var i = 0; i < dict.length; i++) {\n      words[dict[i]] = style;\n    }\n  };\n\n  var commonAtoms = [\"true\", \"false\"];\n  var commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\",\n    \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\n  var commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\",\n    \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\",\n    \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\",\n    \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\",\n    \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\",\n    \"yes\", \"zsh\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"shell\", commonAtoms.concat(commonKeywords, commonCommands));\n\n  define('atom', commonAtoms);\n  define('keyword', commonKeywords);\n  define('builtin', commonCommands);\n\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) return null;\n\n    var sol = stream.sol();\n    var ch = stream.next();\n\n    if (ch === '\\\\') {\n      stream.next();\n      return null;\n    }\n    if (ch === '\\'' || ch === '\"' || ch === '`') {\n      state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n      return tokenize(stream, state);\n    }\n    if (ch === '#') {\n      if (sol && stream.eat('!')) {\n        stream.skipToEnd();\n        return 'meta'; // 'comment'?\n      }\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (ch === '$') {\n      state.tokens.unshift(tokenDollar);\n      return tokenize(stream, state);\n    }\n    if (ch === '+' || ch === '=') {\n      return 'operator';\n    }\n    if (ch === '-') {\n      stream.eat('-');\n      stream.eatWhile(/\\w/);\n      return 'attribute';\n    }\n    if (ch == \"<\") {\n      if (stream.match(\"<<\")) return \"operator\"\n      var heredoc = stream.match(/^<-?\\s*['\"]?([^'\"]*)['\"]?/)\n      if (heredoc) {\n        state.tokens.unshift(tokenHeredoc(heredoc[1]))\n        return 'string-2'\n      }\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/\\d/);\n      if(stream.eol() || !/\\w/.test(stream.peek())) {\n        return 'number';\n      }\n    }\n    stream.eatWhile(/[\\w-]/);\n    var cur = stream.current();\n    if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n    return words.hasOwnProperty(cur) ? words[cur] : null;\n  }\n\n  function tokenString(quote, style) {\n    var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote\n    return function(stream, state) {\n      var next, escaped = false;\n      while ((next = stream.next()) != null) {\n        if (next === close && !escaped) {\n          state.tokens.shift();\n          break;\n        } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n          escaped = true;\n          stream.backUp(1);\n          state.tokens.unshift(tokenDollar);\n          break;\n        } else if (!escaped && quote !== close && next === quote) {\n          state.tokens.unshift(tokenString(quote, style))\n          return tokenize(stream, state)\n        } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n          state.tokens.unshift(tokenStringStart(next, \"string\"));\n          stream.backUp(1);\n          break;\n        }\n        escaped = !escaped && next === '\\\\';\n      }\n      return style;\n    };\n  };\n\n  function tokenStringStart(quote, style) {\n    return function(stream, state) {\n      state.tokens[0] = tokenString(quote, style)\n      stream.next()\n      return tokenize(stream, state)\n    }\n  }\n\n  var tokenDollar = function(stream, state) {\n    if (state.tokens.length > 1) stream.eat('$');\n    var ch = stream.next()\n    if (/['\"({]/.test(ch)) {\n      state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n      return tokenize(stream, state);\n    }\n    if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n    state.tokens.shift();\n    return 'def';\n  };\n\n  function tokenHeredoc(delim) {\n    return function(stream, state) {\n      if (stream.sol() && stream.string == delim) state.tokens.shift()\n      stream.skipToEnd()\n      return \"string-2\"\n    }\n  }\n\n  function tokenize(stream, state) {\n    return (state.tokens[0] || tokenBase) (stream, state);\n  };\n\n  return {\n    startState: function() {return {tokens:[]};},\n    token: function(stream, state) {\n      return tokenize(stream, state);\n    },\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    lineComment: '#',\n    fold: \"brace\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-sh', 'shell');\n// Apache uses a slightly different Media Type for Shell scripts\n// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\nCodeMirror.defineMIME('application/x-sh', 'shell');\n\n});\n"],"file":"shell.js"}