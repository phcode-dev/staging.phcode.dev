{"version":3,"sources":["thirdparty/CodeMirror/mode/d/d.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","indentUnit","statementIndentUnit","keywords","builtin","blockKeywords","atoms","hooks","multiLineStrings","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","result","tokenize","tokenString","test","eatWhile","eat","tokenNestedComment","tokenComment","skipToEnd","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","Pass","firstChar","charAt","closing","electricChars","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","defineMIME","name","@","_state"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"d\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      keywords = parserConfig.keywords || {},\n      builtin = parserConfig.builtin || {},\n      blockKeywords = parserConfig.blockKeywords || {},\n      atoms = parserConfig.atoms || {},\n      hooks = parserConfig.hooks || {},\n      multiLineStrings = parserConfig.multiLineStrings;\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"+\")) {\n        state.tokenize = tokenNestedComment;\n        return tokenNestedComment(stream, state);\n      }\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    if (builtin.propertyIsEnumerable(cur)) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenNestedComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"+\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    blockCommentContinue: \" * \",\n    lineComment: \"//\",\n    fold: \"brace\"\n  };\n});\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var blockKeywords = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" +\n                      \"out scope struct switch try union unittest version while with\";\n\n  CodeMirror.defineMIME(\"text/x-d\", {\n    name: \"d\",\n    keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" +\n                    \"debug default delegate delete deprecated export extern final finally function goto immutable \" +\n                    \"import inout invariant is lazy macro module new nothrow override package pragma private \" +\n                    \"protected public pure ref return shared short static super synchronized template this \" +\n                    \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" +\n                    blockKeywords),\n    blockKeywords: words(blockKeywords),\n    builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" +\n                   \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n    atoms: words(\"exit failure success true false null\"),\n    hooks: {\n      \"@\": function(stream, _state) {\n        stream.eatWhile(/[\\w\\$_]/);\n        return \"meta\";\n      }\n    }\n  });\n\n});\n"],"file":"d.js"}