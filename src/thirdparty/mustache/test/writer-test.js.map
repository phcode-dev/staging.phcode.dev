{"version":3,"sources":["thirdparty/mustache/test/writer-test.js"],"names":["require","Writer","Mustache","describe","writer","beforeEach","it","partial","result","render","name","assert","equal","template","tokens","parse","compileTokens"],"mappings":"AAAAA,QAAQ,YACR,IAAIC,OAASC,SAASD,OAEtBE,SAAS,wBAAyB,WAChC,IAAIC,OACJC,WAAW,WACTD,OAAS,IAAIH,SAGfK,GAAG,2BAA4B,WAC7B,IAAIC,QAAU,8BACVC,OAASJ,OAAOK,OAAO,eAAgB,GAAI,SAAUC,MAEvD,OADAC,OAAOC,MAAMF,KAAM,WACZH,UAGTI,OAAOC,MAAMJ,OAAQD,WAGvBD,GAAG,uCAAwC,WACzC,IAAIE,OAASJ,OAAOK,OAAO,eAAgB,GAAI,CAC7CF,QAAS,gBAGXI,OAAOC,MAAMJ,OAAQ,eAErBA,OAASJ,OAAOK,OAAO,eAAgB,GAAI,CACzCF,QAAS,gBAGXI,OAAOC,MAAMJ,OAAQ,iBAGvBF,GAAG,iCAAkC,WACnC,IAAIO,SAAW,kBACXC,OAASZ,SAASa,MAAMF,UACxBJ,OAEAD,OAFSJ,OAAOY,cAAcF,OAAQD,SAE7BJ,CAAO,CAAEC,KAAM,YAE5BC,OAAOC,MAAMJ,OAAQ","sourcesContent":["require('./helper');\nvar Writer = Mustache.Writer;\n\ndescribe('A new Mustache.Writer', function () {\n  var writer;\n  beforeEach(function () {\n    writer = new Writer;\n  });\n\n  it('loads partials correctly', function () {\n    var partial = 'The content of the partial.';\n    var result = writer.render('{{>partial}}', {}, function (name) {\n      assert.equal(name, 'partial');\n      return partial;\n    });\n\n    assert.equal(result, partial);\n  });\n\n  it('caches partials by content, not name', function () {\n    var result = writer.render('{{>partial}}', {}, {\n      partial: 'partial one'\n    });\n\n    assert.equal(result, 'partial one');\n\n    result = writer.render('{{>partial}}', {}, {\n      partial: 'partial two'\n    });\n\n    assert.equal(result, 'partial two');\n  });\n\n  it('can compile an array of tokens', function () {\n    var template = 'Hello {{name}}!';\n    var tokens = Mustache.parse(template);\n    var render = writer.compileTokens(tokens, template);\n\n    var result = render({ name: 'Michael' });\n\n    assert.equal(result, 'Hello Michael!');\n  });\n});\n"],"file":"writer-test.js"}