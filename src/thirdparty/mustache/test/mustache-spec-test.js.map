{"version":3,"sources":["thirdparty/mustache/test/mustache-spec-test.js"],"names":["require","fs","path","specsDir","join","__dirname","skipTests","comments","delimiters","inverted","partials","sections","~lambdas","noSkip","process","env","NOSKIP","fileToRun","TEST","specFiles","existsDir","statSync","isDirectory","x","getSpecs","specArea","JSON","parse","readFileSync","readdirSync","filter","file","test","map","basename","replace","sort","describe","beforeEach","Mustache","clearCache","forEach","specs","tests","it_","indexOf","name","it","skip","desc","data","lambda","__tag__","eval","js","output","render","template","assert","equal","expected"],"mappings":"AAAAA,QAAQ,YAER,IAAIC,GAAKD,QAAQ,MACbE,KAAOF,QAAQ,QACfG,SAAWD,KAAKE,KAAKC,UAAW,cAEhCC,UAAY,CACdC,SAAU,CACR,8BAEFC,WAAY,CACV,8BAEFC,SAAU,CACR,8BAEFC,SAAU,CACR,mCACA,6BACA,0BAEFC,SAAU,CACR,8BAEFC,WAAY,CACV,gBACA,4BACA,uCACA,iCACA,WACA,sBACA,mCAMAC,OAASC,QAAQC,IAAIC,OAIrBC,UAAYH,QAAQC,IAAIG,KAWxBC,UARJ,SAASC,UAAUlB,MACjB,IACE,OAAOD,GAAGoB,SAASnB,MAAMoB,cACzB,MAAOC,GACP,OAAO,GAiBX,SAASC,SAASC,UAChB,OAAOC,KAAKC,MAAM1B,GAAG2B,aAAa1B,KAAKE,KAAKD,SAAUsB,SAAW,SAAe,SAZhFN,UADEF,UACU,CAACA,WACJG,UAAUjB,UACPF,GAAG4B,YAAY1B,UAAU2B,OAAO,SAAUC,MACpD,MAAO,UAAYC,KAAKD,QACvBE,IAAI,SAAUF,MACf,OAAO7B,KAAKgC,SAASH,MAAMI,QAAQ,UAAW,MAC7CC,OAES,GAOdC,SAAS,2BAA4B,WACnCC,WAAW,WACTC,SAASC,eAGXrB,UAAUsB,QAAQ,SAAShB,UACzBY,SAAS,KAAOZ,SAAW,IAAK,WAC9B,IAAIiB,MAAQlB,SAASC,UACrBiB,MAAMC,MAAMF,QAAQ,SAAST,MAC3B,IAAIY,KAAQ/B,QAAUP,UAAUmB,WAAanB,UAAUmB,UAAUoB,QAAQb,KAAKc,OAAS,EAAKC,GAAGC,KAAOD,GACtGH,IAAIZ,KAAKc,KAAO,MAAQd,KAAKiB,KAAM,WAC7BjB,KAAKkB,KAAKC,QAAuC,SAA7BnB,KAAKkB,KAAKC,OAAOC,UACvCpB,KAAKkB,KAAKC,OAASE,KAAK,wBAA0BrB,KAAKkB,KAAKC,OAAOG,GAAK,SAC1E,IAAIC,OAAShB,SAASiB,OAAOxB,KAAKyB,SAAUzB,KAAKkB,KAAMlB,KAAKtB,UAC5DgD,OAAOC,MAAMJ,OAAQvB,KAAK4B","sourcesContent":["require('./helper');\n\nvar fs = require('fs');\nvar path = require('path');\nvar specsDir = path.join(__dirname, 'spec/specs');\n\nvar skipTests = {\n  comments: [\n    'Standalone Without Newline'\n  ],\n  delimiters: [\n    'Standalone Without Newline'\n  ],\n  inverted: [\n    'Standalone Without Newline'\n  ],\n  partials: [\n    'Standalone Without Previous Line',\n    'Standalone Without Newline',\n    'Standalone Indentation'\n  ],\n  sections: [\n    'Standalone Without Newline'\n  ],\n  '~lambdas': [\n    'Interpolation',\n    'Interpolation - Expansion',\n    'Interpolation - Alternate Delimiters',\n    'Interpolation - Multiple Calls',\n    'Escaping',\n    'Section - Expansion',\n    'Section - Alternate Delimiters'\n  ]\n};\n\n// You can run the skiped tests by setting the NOSKIP environment variable to\n// true (e.g. NOSKIP=true mocha test/mustache-spec-test.js)\nvar noSkip = process.env.NOSKIP;\n\n// You can put the name of a specific test file to run in the TEST environment\n// variable (e.g. TEST=interpolation mocha test/mustache-spec-test.js)\nvar fileToRun = process.env.TEST;\n\n// Mustache should work on node 0.6 that doesn't have fs.exisisSync\nfunction existsDir(path) {\n  try {\n    return fs.statSync(path).isDirectory();\n  } catch (x) {\n    return false;\n  }\n}\n\nvar specFiles;\nif (fileToRun) {\n  specFiles = [fileToRun];\n} else if (existsDir(specsDir)) {\n  specFiles = fs.readdirSync(specsDir).filter(function (file) {\n    return (/\\.json$/).test(file);\n  }).map(function (file) {\n    return path.basename(file).replace(/\\.json$/, '');\n  }).sort();\n} else {\n  specFiles = [];\n}\n\nfunction getSpecs(specArea) {\n  return JSON.parse(fs.readFileSync(path.join(specsDir, specArea + '.' + 'json'), 'utf8'));\n}\n\ndescribe('Mustache spec compliance', function() {\n  beforeEach(function () {\n    Mustache.clearCache();\n  });\n\n  specFiles.forEach(function(specArea) {\n    describe('- ' + specArea + ':', function() {\n      var specs = getSpecs(specArea);\n      specs.tests.forEach(function(test) {\n        var it_ = (!noSkip && skipTests[specArea] && skipTests[specArea].indexOf(test.name) >= 0) ? it.skip : it;\n        it_(test.name + ' - ' + test.desc, function() {\n          if (test.data.lambda && test.data.lambda.__tag__ === 'code')\n            test.data.lambda = eval('(function() { return ' + test.data.lambda.js + '; })');\n          var output = Mustache.render(test.template, test.data, test.partials);\n          assert.equal(output, test.expected);\n        });\n      });\n    });\n  });\n});"],"file":"mustache-spec-test.js"}