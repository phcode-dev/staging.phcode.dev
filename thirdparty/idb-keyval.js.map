{"version":3,"sources":["thirdparty/idb-keyval.js"],"names":["promisifyRequest","request","Promise","resolve","reject","oncomplete","onsuccess","result","onabort","onerror","error","createStore","dbName","storeName","indexedDB","open","onupgradeneeded","createObjectStore","dbp","txMode","callback","then","db","transaction","objectStore","defaultGetStoreFunc","defaultGetStore","get","key","customStore","store","set","value","put","setMany","entries","forEach","entry","getMany","keys","all","map","update","updater","this","err","del","delete","delMany","clear","eachCursor","openCursor","continue","getAllKeys","items","cursor","push","values","getAll","i"],"mappings":"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","sourcesContent":["function promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic â€“ if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function () {\n        if (!this.result)\n            return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll()),\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\n        }\n        const items = [];\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\n    });\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n"],"file":"idb-keyval.js"}