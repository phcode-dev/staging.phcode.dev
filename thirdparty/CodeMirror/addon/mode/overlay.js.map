{"version":3,"sources":["thirdparty/CodeMirror/addon/mode/overlay.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","overlayMode","base","overlay","combine","startState","basePos","baseCur","overlayPos","overlayCur","streamSeen","copyState","state","token","stream","Math","min","start","pos","combineTokens","indent","textAfter","line","electricChars","innerMode","mode","blankLine","baseToken","overlayToken"],"mappings":"CAYA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,YAAc,SAASC,KAAMC,QAASC,SAC/C,MAAO,CACLC,WAAY,WACV,MAAO,CACLH,KAAMF,WAAWK,WAAWH,MAC5BC,QAASH,WAAWK,WAAWF,SAC/BG,QAAS,EAAGC,QAAS,KACrBC,WAAY,EAAGC,WAAY,KAC3BC,WAAY,OAGhBC,UAAW,SAASC,OAClB,MAAO,CACLV,KAAMF,WAAWW,UAAUT,KAAMU,MAAMV,MACvCC,QAASH,WAAWW,UAAUR,QAASS,MAAMT,SAC7CG,QAASM,MAAMN,QAASC,QAAS,KACjCC,WAAYI,MAAMJ,WAAYC,WAAY,OAI9CI,MAAO,SAASC,OAAQF,OAoBtB,OAnBIE,QAAUF,MAAMF,YAChBK,KAAKC,IAAIJ,MAAMN,QAASM,MAAMJ,YAAcM,OAAOG,SACrDL,MAAMF,WAAaI,OACnBF,MAAMN,QAAUM,MAAMJ,WAAaM,OAAOG,OAGxCH,OAAOG,OAASL,MAAMN,UACxBM,MAAML,QAAUL,KAAKW,MAAMC,OAAQF,MAAMV,MACzCU,MAAMN,QAAUQ,OAAOI,KAErBJ,OAAOG,OAASL,MAAMJ,aACxBM,OAAOI,IAAMJ,OAAOG,MACpBL,MAAMH,WAAaN,QAAQU,MAAMC,OAAQF,MAAMT,SAC/CS,MAAMJ,WAAaM,OAAOI,KAE5BJ,OAAOI,IAAMH,KAAKC,IAAIJ,MAAMN,QAASM,MAAMJ,YAInB,MAApBI,MAAMH,WAA2BG,MAAML,QACjB,MAAjBK,MAAML,SACNK,MAAMT,QAAQgB,eACdf,SAA0C,MAA/BQ,MAAMT,QAAQgB,cACzBP,MAAML,QAAU,IAAMK,MAAMH,WACzBG,MAAMH,YAGpBW,OAAQlB,KAAKkB,QAAU,SAASR,MAAOS,UAAWC,MAChD,OAAOpB,KAAKkB,OAAOR,MAAMV,KAAMmB,UAAWC,OAE5CC,cAAerB,KAAKqB,cAEpBC,UAAW,SAASZ,OAAS,MAAO,CAACA,MAAOA,MAAMV,KAAMuB,KAAMvB,OAE9DwB,UAAW,SAASd,OAClB,IAAIe,UAAWC,aAIf,OAHI1B,KAAKwB,YAAWC,UAAYzB,KAAKwB,UAAUd,MAAMV,OACjDC,QAAQuB,YAAWE,aAAezB,QAAQuB,UAAUd,MAAMT,UAEvC,MAAhByB,aACLD,UACCvB,SAAwB,MAAbuB,UAAoBA,UAAY,IAAMC,aAAeA","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.overlayMode = function(base, overlay, combine) {\n  return {\n    startState: function() {\n      return {\n        base: CodeMirror.startState(base),\n        overlay: CodeMirror.startState(overlay),\n        basePos: 0, baseCur: null,\n        overlayPos: 0, overlayCur: null,\n        streamSeen: null\n      };\n    },\n    copyState: function(state) {\n      return {\n        base: CodeMirror.copyState(base, state.base),\n        overlay: CodeMirror.copyState(overlay, state.overlay),\n        basePos: state.basePos, baseCur: null,\n        overlayPos: state.overlayPos, overlayCur: null\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream != state.streamSeen ||\n          Math.min(state.basePos, state.overlayPos) < stream.start) {\n        state.streamSeen = stream;\n        state.basePos = state.overlayPos = stream.start;\n      }\n\n      if (stream.start == state.basePos) {\n        state.baseCur = base.token(stream, state.base);\n        state.basePos = stream.pos;\n      }\n      if (stream.start == state.overlayPos) {\n        stream.pos = stream.start;\n        state.overlayCur = overlay.token(stream, state.overlay);\n        state.overlayPos = stream.pos;\n      }\n      stream.pos = Math.min(state.basePos, state.overlayPos);\n\n      // state.overlay.combineTokens always takes precedence over combine,\n      // unless set to null\n      if (state.overlayCur == null) return state.baseCur;\n      else if (state.baseCur != null &&\n               state.overlay.combineTokens ||\n               combine && state.overlay.combineTokens == null)\n        return state.baseCur + \" \" + state.overlayCur;\n      else return state.overlayCur;\n    },\n\n    indent: base.indent && function(state, textAfter, line) {\n      return base.indent(state.base, textAfter, line);\n    },\n    electricChars: base.electricChars,\n\n    innerMode: function(state) { return {state: state.base, mode: base}; },\n\n    blankLine: function(state) {\n      var baseToken, overlayToken;\n      if (base.blankLine) baseToken = base.blankLine(state.base);\n      if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n\n      return overlayToken == null ?\n        baseToken :\n        (combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken);\n    }\n  };\n};\n\n});\n"],"file":"overlay.js"}