{"version":3,"sources":["thirdparty/CodeMirror/mode/solr/solr.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","isStringChar","isOperatorChar","isOperatorString","isNumber","word","parseFloat","toString","tokenString","quote","stream","state","escaped","next","tokenize","tokenBase","tokenOperator","operator","style","eat","tokenWord","ch","peek","match","test","startState","token","eatSpace","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,OAAQ,WAG5B,IAAIC,aAAe,4CACfC,eAAiB,uBACjBC,iBAAmB,qBAEvB,SAASC,SAASC,MAChB,OAAOC,WAAWD,MAAME,aAAeF,KAGzC,SAASG,YAAYC,OACnB,OAAO,SAASC,OAAQC,OAEtB,IADA,IAAIC,SAAU,EAAOC,KACY,OAAzBA,KAAOH,OAAOG,UAChBA,MAAQJ,OAAUG,UACtBA,SAAWA,SAAmB,MAARC,KAIxB,OADKD,UAASD,MAAMG,SAAWC,WACxB,UAIX,SAASC,cAAcC,UACrB,OAAO,SAASP,OAAQC,OACtB,IAAIO,MAAQ,WAaZ,MAZgB,KAAZD,SACFC,OAAS,YACU,KAAZD,SACPC,OAAS,YACU,KAAZD,SACPP,OAAOS,IAAI,MACQ,KAAZF,SACPP,OAAOS,IAAI,MACQ,KAAZF,WACPC,OAAS,UAEXP,MAAMG,SAAWC,UACVG,OAIX,SAASE,UAAUC,IACjB,OAAO,SAASX,OAAQC,OAEtB,IADA,IAAIN,KAAOgB,IACHA,GAAKX,OAAOY,SAAqC,MAA1BD,GAAGE,MAAMtB,eACtCI,MAAQK,OAAOG,OAIjB,OADAF,MAAMG,SAAWC,UACbZ,iBAAiBqB,KAAKnB,MACjB,WACAD,SAASC,MACT,SACiB,KAAjBK,OAAOY,OACP,QAEA,UAIb,SAASP,UAAUL,OAAQC,OACzB,IAAIU,GAAKX,OAAOG,OAQhB,MAPU,KAANQ,GACFV,MAAMG,SAAWN,YAAYa,IACtBnB,eAAesB,KAAKH,IAC3BV,MAAMG,SAAWE,cAAcK,IACxBpB,aAAauB,KAAKH,MACzBV,MAAMG,SAAWM,UAAUC,KAErBV,MAAMG,UAAYC,UAAaJ,MAAMG,SAASJ,OAAQC,OAAS,KAGzE,MAAO,CACLc,WAAY,WACV,MAAO,CACLX,SAAUC,YAIdW,MAAO,SAAShB,OAAQC,OACtB,OAAID,OAAOiB,WAAmB,KACvBhB,MAAMG,SAASJ,OAAQC,WAKpCZ,WAAW6B,WAAW,cAAe","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"solr\", function() {\n  \"use strict\";\n\n  var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\n  var isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\n  var isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\n  function isNumber(word) {\n    return parseFloat(word).toString() === word;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenOperator(operator) {\n    return function(stream, state) {\n      var style = \"operator\";\n      if (operator == \"+\")\n        style += \" positive\";\n      else if (operator == \"-\")\n        style += \" negative\";\n      else if (operator == \"|\")\n        stream.eat(/\\|/);\n      else if (operator == \"&\")\n        stream.eat(/\\&/);\n      else if (operator == \"^\")\n        style += \" boost\";\n\n      state.tokenize = tokenBase;\n      return style;\n    };\n  }\n\n  function tokenWord(ch) {\n    return function(stream, state) {\n      var word = ch;\n      while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n        word += stream.next();\n      }\n\n      state.tokenize = tokenBase;\n      if (isOperatorString.test(word))\n        return \"operator\";\n      else if (isNumber(word))\n        return \"number\";\n      else if (stream.peek() == \":\")\n        return \"field\";\n      else\n        return \"string\";\n    };\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"')\n      state.tokenize = tokenString(ch);\n    else if (isOperatorChar.test(ch))\n      state.tokenize = tokenOperator(ch);\n    else if (isStringChar.test(ch))\n      state.tokenize = tokenWord(ch);\n\n    return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-solr\", \"solr\");\n\n});\n"],"file":"solr.js"}