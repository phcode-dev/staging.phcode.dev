{"version":3,"sources":["thirdparty/CodeMirror/mode/yaml/yaml.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","cons","keywordRegex","RegExp","join","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","lineComment","fold","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,OAAQ,WAE5B,IAAIC,KACAC,aAAe,IAAIC,OAAO,QADnB,CAAC,OAAQ,QAAS,KAAM,MAAO,MAAO,MACNC,KAAK,OAAO,MAAO,KAE9D,MAAO,CACLC,MAAO,SAASC,OAAQC,OACtB,IAAIC,GAAKF,OAAOG,OACZC,IAAMH,MAAMI,QAGhB,GAFAJ,MAAMI,SAAU,EAEN,KAANH,KAA4B,GAAdF,OAAOM,KAAY,KAAKC,KAAKP,OAAOQ,OAAOC,OAAOT,OAAOM,IAAM,KAE/E,OADAN,OAAOU,YACA,UAGT,GAAIV,OAAOW,MAAM,oCACf,MAAO,SAET,GAAIV,MAAMW,SAAWZ,OAAOa,cAAgBZ,MAAMa,OAC5B,OAApBd,OAAOU,YAAoB,SAE7B,GADWT,MAAMW,UAAWX,MAAMW,SAAU,GACxCZ,OAAOe,MAAO,CAKhB,GAJAd,MAAMa,OAAS,EACfb,MAAMe,MAAO,EACbf,MAAMgB,WAAY,EAEfjB,OAAOW,MAAM,OAAU,MAAO,MAEjC,GAAIX,OAAOW,MAAM,OAAU,MAAO,MAElC,GAAIX,OAAOW,MAAM,WAAc,MAAO,OAGxC,GAAIX,OAAOW,MAAM,kBASf,MARU,KAANT,GACFD,MAAMiB,cACO,KAANhB,GACPD,MAAMiB,cACO,KAANhB,GACPD,MAAMkB,aAENlB,MAAMkB,aACD,OAIT,GAAIlB,MAAMkB,WAAa,IAAMf,KAAa,KAANF,GAElC,OADAF,OAAOoB,OACA,OAGT,GAAInB,MAAMiB,YAAc,IAAMd,KAAa,KAANF,GAKnC,OAJAD,MAAMa,OAAS,EACfb,MAAMe,MAAO,EACbf,MAAMgB,WAAY,EAClBjB,OAAOoB,OACA,OAIT,GAAInB,MAAMgB,UAAW,CAEnB,GAAIjB,OAAOW,MAAM,kBAA2C,OAAtBV,MAAMW,SAAU,EAAa,OAEnE,GAAIZ,OAAOW,MAAM,+BAAkC,MAAO,aAE1D,GAAyB,GAArBV,MAAMiB,aAAoBlB,OAAOW,MAAM,wBAA2B,MAAO,SAC7E,GAAIV,MAAMiB,YAAc,GAAKlB,OAAOW,MAAM,gCAAmC,MAAO,SAEpF,GAAIX,OAAOW,MAAMf,cAAiB,MAAO,UAI3C,OAAKK,MAAMe,MAAQhB,OAAOW,MAAM,kFAC9BV,MAAMe,MAAO,EACbf,MAAMa,OAASd,OAAOa,cACf,QAELZ,MAAMe,MAAQhB,OAAOW,MAAM,UAAYV,MAAMgB,WAAY,EAAa,SAG1EhB,MAAMgB,WAAY,EAClBhB,MAAMI,QAAiB,MAANH,GACjBF,OAAOoB,OACA,OAETC,WAAY,WACV,MAAO,CACLL,MAAM,EACNC,WAAW,EACXH,OAAQ,EACRI,YAAa,EACbC,WAAY,EACZP,SAAS,EACTP,SAAS,IAGbiB,YAAa,IACbC,KAAM,YAIV9B,WAAW+B,WAAW,cAAe,QACrC/B,WAAW+B,WAAW,YAAa","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"yaml\", function() {\n\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\n  return {\n    token: function(stream, state) {\n      var ch = stream.peek();\n      var esc = state.escaped;\n      state.escaped = false;\n      /* comments */\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n        return \"string\";\n\n      if (state.literal && stream.indentation() > state.keyCol) {\n        stream.skipToEnd(); return \"string\";\n      } else if (state.literal) { state.literal = false; }\n      if (stream.sol()) {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        /* document start */\n        if(stream.match('---')) { return \"def\"; }\n        /* document end */\n        if (stream.match('...')) { return \"def\"; }\n        /* array list item */\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\n      }\n      /* inline pairs/lists */\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n        if (ch == '{')\n          state.inlinePairs++;\n        else if (ch == '}')\n          state.inlinePairs--;\n        else if (ch == '[')\n          state.inlineList++;\n        else\n          state.inlineList--;\n        return 'meta';\n      }\n\n      /* list separator */\n      if (state.inlineList > 0 && !esc && ch == ',') {\n        stream.next();\n        return 'meta';\n      }\n      /* pairs separator */\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        stream.next();\n        return 'meta';\n      }\n\n      /* start of value of a pair */\n      if (state.pairStart) {\n        /* block literals */\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n        /* references */\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\n        /* numbers */\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n        /* keywords */\n        if (stream.match(keywordRegex)) { return 'keyword'; }\n      }\n\n      /* pairs (associative arrays) -> key */\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n        state.pair = true;\n        state.keyCol = stream.indentation();\n        return \"atom\";\n      }\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n      /* nothing found, continue */\n      state.pairStart = false;\n      state.escaped = (ch == '\\\\');\n      stream.next();\n      return null;\n    },\n    startState: function() {\n      return {\n        pair: false,\n        pairStart: false,\n        keyCol: 0,\n        inlinePairs: 0,\n        inlineList: 0,\n        literal: false,\n        escaped: false\n      };\n    },\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\nCodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n\n});\n"],"file":"yaml.js"}