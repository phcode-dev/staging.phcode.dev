{"version":3,"sources":["thirdparty/CodeMirror/mode/fcl/fcl.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","keywords","term","method","accu","rule","then","is","and","or","if","default","start_blocks","var_input","var_output","fuzzify","defuzzify","function_block","ruleblock","end_blocks","end_ruleblock","end_defuzzify","end_function_block","end_fuzzify","end_var","atoms","true","false","nan","real","min","max","cog","cogs","isOperatorChar","tokenBase","stream","state","ch","next","test","match","eat","tokenize","tokenComment","skipToEnd","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","closing","electricChars","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"fcl\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n      \"term\": true,\n      \"method\": true, \"accu\": true,\n      \"rule\": true, \"then\": true, \"is\": true, \"and\": true, \"or\": true,\n      \"if\": true, \"default\": true\n  };\n\n  var start_blocks = {\n      \"var_input\": true,\n      \"var_output\": true,\n      \"fuzzify\": true,\n      \"defuzzify\": true,\n      \"function_block\": true,\n      \"ruleblock\": true\n  };\n\n  var end_blocks = {\n      \"end_ruleblock\": true,\n      \"end_defuzzify\": true,\n      \"end_function_block\": true,\n      \"end_fuzzify\": true,\n      \"end_var\": true\n  };\n\n  var atoms = {\n      \"true\": true, \"false\": true, \"nan\": true,\n      \"real\": true, \"min\": true, \"max\": true, \"cog\": true, \"cogs\": true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n\n    if (ch == \"/\" || ch == \"(\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n\n    var cur = stream.current().toLowerCase();\n    if (keywords.propertyIsEnumerable(cur) ||\n        start_blocks.propertyIsEnumerable(cur) ||\n        end_blocks.propertyIsEnumerable(cur)) {\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \"end_block\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n            if (ctx.align == null) ctx.align = false;\n            state.indented = stream.indentation();\n            state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        var cur = stream.current().toLowerCase();\n\n        if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");\n        else if (end_blocks.propertyIsEnumerable(cur))  popContext(state);\n\n        state.startOfLine = false;\n        return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n      var ctx = state.context;\n\n      var closing = end_blocks.propertyIsEnumerable(textAfter);\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"ryk\",\n    fold: \"brace\",\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-fcl\", \"fcl\");\n});\n"],"file":"fcl.js"}