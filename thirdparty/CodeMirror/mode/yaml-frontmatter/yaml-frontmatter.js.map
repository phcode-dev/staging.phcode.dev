{"version":3,"sources":["thirdparty/CodeMirror/mode/yaml-frontmatter/yaml-frontmatter.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","START","FRONTMATTER","BODY","defineMode","config","parserConfig","yamlMode","getMode","innerMode","base","localMode","state","mode","yaml","inner","startState","copyState","token","stream","match","end","sol","style","indent","a","b","m","Pass","blankLine"],"mappings":"CAGA,SAAWA,KACa,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,wBAAyBA,QAAQ,iBACrB,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,uBAAwB,gBAAiBJ,KAEjDA,IAAIM,YANR,CAOG,SAAUA,YAEX,IAAIC,MAAQ,EAAGC,YAAc,EAAGC,KAAO,EAGvCH,WAAWI,WAAW,mBAAoB,SAAUC,OAAQC,cAC1D,IAAIC,SAAWP,WAAWQ,QAAQH,OAAQ,QACtCI,UAAYT,WAAWQ,QAAQH,OAAQC,cAAgBA,aAAaI,MAAQ,OAEhF,SAASC,UAAUC,OACjB,OAAOA,MAAMA,OAASV,YAAc,CAACW,KAAMN,SAAUK,MAAOA,MAAME,MAAQ,CAACD,KAAMJ,UAAWG,MAAOA,MAAMG,OAG3G,MAAO,CACLC,WAAY,WACV,MAAO,CACLJ,MAdI,EAeJE,KAAM,KACNC,MAAOf,WAAWgB,WAAWP,aAGjCQ,UAAW,SAAUL,OACnB,MAAO,CACLA,MAAOA,MAAMA,MACbE,KAAMF,MAAME,MAAQd,WAAWiB,UAAUV,SAAUK,MAAME,MACzDC,MAAOf,WAAWiB,UAAUR,UAAWG,MAAMG,SAGjDG,MAAO,SAAUC,OAAQP,OACvB,GA3BM,GA2BFA,MAAMA,MACR,OAAIO,OAAOC,MAAM,OAAO,IACtBR,MAAMA,MAAQV,YACdU,MAAME,KAAOd,WAAWgB,WAAWT,UAC5BA,SAASW,MAAMC,OAAQP,MAAME,QAEpCF,MAAMA,MAjCuB,EAkCtBH,UAAUS,MAAMC,OAAQP,MAAMG,QAElC,GAAIH,MAAMA,OAASV,YAAa,CACrC,IAAImB,IAAMF,OAAOG,OAASH,OAAOC,MAAM,gBAAgB,GACnDG,MAAQhB,SAASW,MAAMC,OAAQP,MAAME,MAKzC,OAJIO,MACFT,MAAMA,MAxCuB,EAyC7BA,MAAME,KAAO,MAERS,MAEP,OAAOd,UAAUS,MAAMC,OAAQP,MAAMG,QAGzCN,UAAWE,UACXa,OAAQ,SAASZ,MAAOa,EAAGC,GACzB,IAAIC,EAAIhB,UAAUC,OAClB,OAAOe,EAAEd,KAAKW,OAASG,EAAEd,KAAKW,OAAOG,EAAEf,MAAOa,EAAGC,GAAK1B,WAAW4B,MAEnEC,UAAW,SAAUjB,OACnB,IAAIe,EAAIhB,UAAUC,OAClB,GAAIe,EAAEd,KAAKgB,UAAW,OAAOF,EAAEd,KAAKgB,UAAUF,EAAEf","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../yaml/yaml\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../yaml/yaml\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n\n  var START = 0, FRONTMATTER = 1, BODY = 2\n\n  // a mixed mode for Markdown text with an optional YAML front matter\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\")\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\")\n\n    function localMode(state) {\n      return state.state == FRONTMATTER ? {mode: yamlMode, state: state.yaml} : {mode: innerMode, state: state.inner}\n    }\n\n    return {\n      startState: function () {\n        return {\n          state: START,\n          yaml: null,\n          inner: CodeMirror.startState(innerMode)\n        }\n      },\n      copyState: function (state) {\n        return {\n          state: state.state,\n          yaml: state.yaml && CodeMirror.copyState(yamlMode, state.yaml),\n          inner: CodeMirror.copyState(innerMode, state.inner)\n        }\n      },\n      token: function (stream, state) {\n        if (state.state == START) {\n          if (stream.match('---', false)) {\n            state.state = FRONTMATTER\n            state.yaml = CodeMirror.startState(yamlMode)\n            return yamlMode.token(stream, state.yaml)\n          } else {\n            state.state = BODY\n            return innerMode.token(stream, state.inner)\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/(---|\\.\\.\\.)/, false)\n          var style = yamlMode.token(stream, state.yaml)\n          if (end) {\n            state.state = BODY\n            state.yaml = null\n          }\n          return style\n        } else {\n          return innerMode.token(stream, state.inner)\n        }\n      },\n      innerMode: localMode,\n      indent: function(state, a, b) {\n        var m = localMode(state)\n        return m.mode.indent ? m.mode.indent(m.state, a, b) : CodeMirror.Pass\n      },\n      blankLine: function (state) {\n        var m = localMode(state)\n        if (m.mode.blankLine) return m.mode.blankLine(m.state)\n      }\n    }\n  })\n});\n"],"file":"yaml-frontmatter.js"}