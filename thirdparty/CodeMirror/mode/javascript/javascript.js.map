{"version":3,"sources":["thirdparty/CodeMirror/mode/javascript/javascript.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","trackScope","isTS","typescript","wordRE","wordCharacters","keywords","kw","type","style","A","B","C","D","operator","atom","if","while","with","else","do","try","finally","return","break","continue","new","delete","void","throw","debugger","var","const","let","function","catch","for","switch","case","default","in","typeof","instanceof","true","false","null","undefined","NaN","Infinity","this","class","super","yield","export","import","extends","await","isOperatorChar","isJsonldKeyword","content","readRegexp","stream","escaped","next","inSet","ret","tp","cont","tokenBase","state","ch","tokenize","tokenString","match","test","eat","tokenComment","skipToEnd","expressionAllowed","current","tokenQuasi","peek","eatWhile","string","slice","start","lexical","word","lastType","propertyIsEnumerable","quote","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","indexOf","m","exec","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","number","variable","regexp","jsonld-keyword","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","cx","context","vars","parseJS","cc","marked","hasOwnProperty","combinator","length","pop","expression","statement","lex","pass","i","arguments","push","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","value","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","targetNoComma","target","maybeTypeArgs","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprops","typearg","maybeReturnType","quasiType","typeprop","functiondecl","continueQuasiType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","isContinuedStatement","textAfter","startState","basecolumn","token","sol","indentation","eatSpace","Pass","firstChar","top","c","closing","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","StringStream","registerHelper","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var trackScope = parserConfig.trackScope !== false\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    if (!trackScope) return false\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (!trackScope) return\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") { return pass(quasiType, afterType); }\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\") return cont(classfield)\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null))\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"file":"javascript.js"}