{"version":3,"sources":["thirdparty/CodeMirror/mode/tiddlywiki/tiddlywiki.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","textwords","keywords","allTags","closeAll","list","newJournal","newTiddler","permaview","saveChanges","search","slider","tabs","tag","tagging","tags","tiddler","timeline","today","version","option","with","filter","isSpaceName","reHR","reWikiCommentStart","reWikiCommentStop","reBlockQuote","reJsCodeStart","reJsCodeStop","reXmlCodeStart","reXmlCodeStop","reCodeBlockStart","reCodeBlockStop","reUntilCodeStop","chain","stream","state","f","tokenize","tokenBase","sol","ch","peek","block","test","match","twTokenCode","next","skipToEnd","eatWhile","eat","twTokenComment","twTokenEm","twTokenUnderline","twTokenStrike","twTokenStrong","twTokenMacro","propertyIsEnumerable","current","maybeEnd","sb","startState","token","eatSpace","style","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/***\n    |''Name''|tiddlywiki.js|\n    |''Description''|Enables TiddlyWikiy syntax highlighting using CodeMirror|\n    |''Author''|PMario|\n    |''Version''|0.1.7|\n    |''Status''|''stable''|\n    |''Source''|[[GitHub|https://github.com/pmario/CodeMirror2/blob/tw-syntax/mode/tiddlywiki]]|\n    |''Documentation''|https://codemirror.tiddlyspace.com/|\n    |''License''|[[MIT License|http://www.opensource.org/licenses/mit-license.php]]|\n    |''CoreVersion''|2.5.0|\n    |''Requires''|codemirror.js|\n    |''Keywords''|syntax highlighting color code mirror codemirror|\n    ! Info\n    CoreVersion parameter is needed for TiddlyWiki only!\n***/\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"tiddlywiki\", function () {\n  // Tokenizer\n  var textwords = {};\n\n  var keywords = {\n    \"allTags\": true, \"closeAll\": true, \"list\": true,\n    \"newJournal\": true, \"newTiddler\": true,\n    \"permaview\": true, \"saveChanges\": true,\n    \"search\": true, \"slider\": true, \"tabs\": true,\n    \"tag\": true, \"tagging\": true, \"tags\": true,\n    \"tiddler\": true, \"timeline\": true,\n    \"today\": true, \"version\": true, \"option\": true,\n    \"with\": true, \"filter\": true\n  };\n\n  var isSpaceName = /[\\w_\\-]/i,\n      reHR = /^\\-\\-\\-\\-+$/,                                 // <hr>\n      reWikiCommentStart = /^\\/\\*\\*\\*$/,            // /***\n      reWikiCommentStop = /^\\*\\*\\*\\/$/,             // ***/\n      reBlockQuote = /^<<<$/,\n\n      reJsCodeStart = /^\\/\\/\\{\\{\\{$/,                       // //{{{ js block start\n      reJsCodeStop = /^\\/\\/\\}\\}\\}$/,                        // //}}} js stop\n      reXmlCodeStart = /^<!--\\{\\{\\{-->$/,           // xml block start\n      reXmlCodeStop = /^<!--\\}\\}\\}-->$/,            // xml stop\n\n      reCodeBlockStart = /^\\{\\{\\{$/,                        // {{{ TW text div block start\n      reCodeBlockStop = /^\\}\\}\\}$/,                 // }}} TW text stop\n\n      reUntilCodeStop = /.*?\\}\\}\\}/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    var sol = stream.sol(), ch = stream.peek();\n\n    state.block = false;        // indicates the start of a code block.\n\n    // check start of  blocks\n    if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n      if (stream.match(reCodeBlockStart)) {\n        state.block = true;\n        return chain(stream, state, twTokenCode);\n      }\n      if (stream.match(reBlockQuote))\n        return 'quote';\n      if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))\n        return 'comment';\n      if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))\n        return 'comment';\n      if (stream.match(reHR))\n        return 'hr';\n    }\n\n    stream.next();\n    if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n      if (ch == \"!\") { // tw header\n        stream.skipToEnd();\n        return \"header\";\n      }\n      if (ch == \"*\") { // tw list\n        stream.eatWhile('*');\n        return \"comment\";\n      }\n      if (ch == \"#\") { // tw numbered list\n        stream.eatWhile('#');\n        return \"comment\";\n      }\n      if (ch == \";\") { // definition list, term\n        stream.eatWhile(';');\n        return \"comment\";\n      }\n      if (ch == \":\") { // definition list, description\n        stream.eatWhile(':');\n        return \"comment\";\n      }\n      if (ch == \">\") { // single line quote\n        stream.eatWhile(\">\");\n        return \"quote\";\n      }\n      if (ch == '|')\n        return 'header';\n    }\n\n    if (ch == '{' && stream.match('{{'))\n      return chain(stream, state, twTokenCode);\n\n    // rudimentary html:// file:// link matching. TW knows much more ...\n    if (/[hf]/i.test(ch) &&\n        /[ti]/i.test(stream.peek()) &&\n        stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i))\n      return \"link\";\n\n    // just a little string indicator, don't want to have the whole string covered\n    if (ch == '\"')\n      return 'string';\n\n    if (ch == '~')    // _no_ CamelCase indicator should be bold\n      return 'brace';\n\n    if (/[\\[\\]]/.test(ch) && stream.match(ch)) // check for [[..]]\n      return 'brace';\n\n    if (ch == \"@\") {    // check for space link. TODO fix @@...@@ highlighting\n      stream.eatWhile(isSpaceName);\n      return \"link\";\n    }\n\n    if (/\\d/.test(ch)) {        // numbers\n      stream.eatWhile(/\\d/);\n      return \"number\";\n    }\n\n    if (ch == \"/\") { // tw invisible comment\n      if (stream.eat(\"%\")) {\n        return chain(stream, state, twTokenComment);\n      } else if (stream.eat(\"/\")) { //\n        return chain(stream, state, twTokenEm);\n      }\n    }\n\n    if (ch == \"_\" && stream.eat(\"_\")) // tw underline\n        return chain(stream, state, twTokenUnderline);\n\n    // strikethrough and mdash handling\n    if (ch == \"-\" && stream.eat(\"-\")) {\n      // if strikethrough looks ugly, change CSS.\n      if (stream.peek() != ' ')\n        return chain(stream, state, twTokenStrike);\n      // mdash\n      if (stream.peek() == ' ')\n        return 'brace';\n    }\n\n    if (ch == \"'\" && stream.eat(\"'\")) // tw bold\n      return chain(stream, state, twTokenStrong);\n\n    if (ch == \"<\" && stream.eat(\"<\")) // tw macro\n      return chain(stream, state, twTokenMacro);\n\n    // core macro handling\n    stream.eatWhile(/[\\w\\$_]/);\n    return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\n  }\n\n  // tw invisible comment\n  function twTokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"%\");\n    }\n    return \"comment\";\n  }\n\n  // tw strong / bold\n  function twTokenStrong(stream, state) {\n    var maybeEnd = false,\n    ch;\n    while (ch = stream.next()) {\n      if (ch == \"'\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"'\");\n    }\n    return \"strong\";\n  }\n\n  // tw code\n  function twTokenCode(stream, state) {\n    var sb = state.block;\n\n    if (sb && stream.current()) {\n      return \"comment\";\n    }\n\n    if (!sb && stream.match(reUntilCodeStop)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n\n    if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n\n    stream.next();\n    return \"comment\";\n  }\n\n  // tw em / italic\n  function twTokenEm(stream, state) {\n    var maybeEnd = false,\n    ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"/\");\n    }\n    return \"em\";\n  }\n\n  // tw underlined text\n  function twTokenUnderline(stream, state) {\n    var maybeEnd = false,\n    ch;\n    while (ch = stream.next()) {\n      if (ch == \"_\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"_\");\n    }\n    return \"underlined\";\n  }\n\n  // tw strike through text looks ugly\n  // change CSS if needed\n  function twTokenStrike(stream, state) {\n    var maybeEnd = false, ch;\n\n    while (ch = stream.next()) {\n      if (ch == \"-\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"-\");\n    }\n    return \"strikethrough\";\n  }\n\n  // macro\n  function twTokenMacro(stream, state) {\n    if (stream.current() == '<<') {\n      return 'macro';\n    }\n\n    var ch = stream.next();\n    if (!ch) {\n      state.tokenize = tokenBase;\n      return null;\n    }\n    if (ch == \">\") {\n      if (stream.peek() == '>') {\n        stream.next();\n        state.tokenize = tokenBase;\n        return \"macro\";\n      }\n    }\n\n    stream.eatWhile(/[\\w\\$_]/);\n    return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null\n  }\n\n  // Interface\n  return {\n    startState: function () {\n      return {tokenize: tokenBase};\n    },\n\n    token: function (stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-tiddlywiki\", \"tiddlywiki\");\n});\n"],"file":"tiddlywiki.js"}