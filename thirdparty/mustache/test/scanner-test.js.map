{"version":3,"sources":["thirdparty/mustache/test/scanner-test.js"],"names":["require","Scanner","Mustache","describe","it","scanner","assert","eos","beforeEach","match","scan","equal","string","pos","scanUntil"],"mappings":"AAAAA,QAAQ,YACR,IAAIC,QAAUC,SAASD,QAEvBE,SAAS,yBAA0B,WACjCA,SAAS,sBAAuB,WAC9BC,GAAG,gBAAiB,WAClB,IAAIC,QAAU,IAAIJ,QAAQ,IAC1BK,OAAOD,QAAQE,WAInBJ,SAAS,yBAA0B,WACjC,IAAIE,QACJG,WAAW,WACTH,QAAU,IAAIJ,QAAQ,WAGxBE,SAAS,OAAQ,WACfA,SAAS,4CAA6C,WACpDC,GAAG,4BAA6B,WAC9B,IAAIK,MAAQJ,QAAQK,KAAK,SACzBJ,OAAOK,MAAMF,MAAOJ,QAAQO,QAC5BN,OAAOD,QAAQE,WAInBJ,SAAS,qCAAsC,WAC7CC,GAAG,iDAAkD,WACnD,IAAIK,MAAQJ,QAAQK,KAAK,KACzBJ,OAAOK,MAAMF,MAAO,KACpBH,OAAOK,MAAMN,QAAQQ,IAAK,OAI9BV,SAAS,qDAAsD,WAC7DC,GAAG,2BAA4B,WAC7B,IAAIK,MAAQJ,QAAQK,KAAK,KACzBJ,OAAOK,MAAMF,MAAO,IACpBH,OAAOK,MAAMN,QAAQQ,IAAK,OAI9BV,SAAS,iCAAkC,WACzCC,GAAG,2BAA4B,WAC7B,IAAIK,MAAQJ,QAAQK,KAAK,KACzBJ,OAAOK,MAAMF,MAAO,IACpBH,OAAOK,MAAMN,QAAQQ,IAAK,SAKhCV,SAAS,YAAa,WACpBA,SAAS,qCAAsC,WAC7CC,GAAG,2BAA4B,WAC7B,IAAIK,MAAQJ,QAAQS,UAAU,KAC9BR,OAAOK,MAAMF,MAAO,IACpBH,OAAOK,MAAMN,QAAQQ,IAAK,OAI9BV,SAAS,qDAAsD,WAC7DC,GAAG,sCAAuC,WACxC,IAAIK,MAAQJ,QAAQS,UAAU,KAC9BR,OAAOK,MAAMF,MAAO,MACpBH,OAAOK,MAAMN,QAAQQ,IAAK,OAI9BV,SAAS,iCAAkC,WACzCC,GAAG,4BAA6B,WAC9B,IAAIK,MAAQJ,QAAQS,UAAU,KAC9BR,OAAOK,MAAMF,MAAOJ,QAAQO,QAC5BN,OAAOD,QAAQE","sourcesContent":["require('./helper');\nvar Scanner = Mustache.Scanner;\n\ndescribe('A new Mustache.Scanner', function () {\n  describe('for an empty string', function () {\n    it('is at the end', function () {\n      var scanner = new Scanner('');\n      assert(scanner.eos());\n    });\n  });\n\n  describe('for a non-empty string', function () {\n    var scanner;\n    beforeEach(function () {\n      scanner = new Scanner('a b c');\n    });\n\n    describe('scan', function () {\n      describe('when the RegExp matches the entire string', function () {\n        it('returns the entire string', function () {\n          var match = scanner.scan(/a b c/);\n          assert.equal(match, scanner.string);\n          assert(scanner.eos());\n        });\n      });\n\n      describe('when the RegExp matches at index 0', function () {\n        it('returns the portion of the string that matched', function () {\n          var match = scanner.scan(/a/);\n          assert.equal(match, 'a');\n          assert.equal(scanner.pos, 1);\n        });\n      });\n\n      describe('when the RegExp matches at some index other than 0', function () {\n        it('returns the empty string', function () {\n          var match = scanner.scan(/b/);\n          assert.equal(match, '');\n          assert.equal(scanner.pos, 0);\n        });\n      });\n\n      describe('when the RegExp does not match', function () {\n        it('returns the empty string', function () {\n          var match = scanner.scan(/z/);\n          assert.equal(match, '');\n          assert.equal(scanner.pos, 0);\n        });\n      });\n    }); // scan\n\n    describe('scanUntil', function () {\n      describe('when the RegExp matches at index 0', function () {\n        it('returns the empty string', function () {\n          var match = scanner.scanUntil(/a/);\n          assert.equal(match, '');\n          assert.equal(scanner.pos, 0);\n        });\n      });\n\n      describe('when the RegExp matches at some index other than 0', function () {\n        it('returns the string up to that index', function () {\n          var match = scanner.scanUntil(/b/);\n          assert.equal(match, 'a ');\n          assert.equal(scanner.pos, 2);\n        });\n      });\n\n      describe('when the RegExp does not match', function () {\n        it('returns the entire string', function () {\n          var match = scanner.scanUntil(/z/);\n          assert.equal(match, scanner.string);\n          assert(scanner.eos());\n        });\n      });\n    }); // scanUntil\n  }); // for a non-empty string\n});\n"],"file":"scanner-test.js"}