{"version":3,"sources":["thirdparty/mustache/test/render-test.js"],"names":["require","fs","path","_files","join","__dirname","getContents","testName","ext","readFileSync","getView","view","Error","eval","getPartial","e","getTest","test","template","partial","expect","testToRun","process","env","TEST","testNames","readdirSync","filter","file","map","basename","replace","describe","beforeEach","Mustache","clearCache","forEach","it","output","render","assert","equal"],"mappings":"AAAAA,QAAQ,YAER,IAAIC,GAAKD,QAAQ,MACbE,KAAOF,QAAQ,QACfG,OAASD,KAAKE,KAAKC,UAAW,UAElC,SAASC,YAAYC,SAAUC,KAC7B,OAAOP,GAAGQ,aAAaP,KAAKE,KAAKD,OAAQI,SAAW,IAAMC,KAAM,QAGlE,SAASE,QAAQH,UACf,IAAII,KAAOL,YAAYC,SAAU,MACjC,IAAKI,KAAM,MAAM,IAAIC,MAAM,8BAAgCL,SAAW,KACtE,OAAOM,KAAKF,MAGd,SAASG,WAAWP,UAClB,IACE,OAAOD,YAAYC,SAAU,WAC7B,MAAOQ,KAKX,SAASC,QAAQT,UACf,IAAIU,KAAO,GAKX,OAJAA,KAAKN,KAAOD,QAAQH,UACpBU,KAAKC,SAAWZ,YAAYC,SAAU,YACtCU,KAAKE,QAAUL,WAAWP,UAC1BU,KAAKG,OAASd,YAAYC,SAAU,OAC7BU,KAKT,IAAII,UAAYC,QAAQC,IAAIC,KAExBC,UAEFA,UADEJ,UACU,CAACA,WAEDpB,GAAGyB,YAAYvB,QAAQwB,OAAO,SAAUC,MAClD,MAAO,QAAUX,KAAKW,QACrBC,IAAI,SAAUD,MACf,OAAO1B,KAAK4B,SAASF,MAAMG,QAAQ,QAAS,MAIhDC,SAAS,kBAAmB,WAC1BC,WAAW,WACTC,SAASC,eAGXV,UAAUW,QAAQ,SAAU7B,UAC1B,IAAIU,KAAOD,QAAQT,UAEnB8B,GAAG,uBAAyB9B,SAAU,WACpC,IAAI+B,OAEFA,OADErB,KAAKE,QACEe,SAASK,OAAOtB,KAAKC,SAAUD,KAAKN,KAAM,CAAEQ,QAASF,KAAKE,UAE1De,SAASK,OAAOtB,KAAKC,SAAUD,KAAKN,MAG/C6B,OAAOC,MAAMH,OAAQrB,KAAKG","sourcesContent":["require('./helper');\n\nvar fs = require('fs');\nvar path = require('path');\nvar _files = path.join(__dirname, '_files');\n\nfunction getContents(testName, ext) {\n  return fs.readFileSync(path.join(_files, testName + '.' + ext), 'utf8');\n}\n\nfunction getView(testName) {\n  var view = getContents(testName, 'js');\n  if (!view) throw new Error('Cannot find view for test \"' + testName + '\"');\n  return eval(view);\n}\n\nfunction getPartial(testName) {\n  try {\n    return getContents(testName, 'partial');\n  } catch (e) {\n    // No big deal. Not all tests need to test partial support.\n  }\n}\n\nfunction getTest(testName) {\n  var test = {};\n  test.view = getView(testName);\n  test.template = getContents(testName, 'mustache');\n  test.partial = getPartial(testName);\n  test.expect = getContents(testName, 'txt');\n  return test;\n}\n\n// You can put the name of a specific test to run in the TEST environment\n// variable (e.g. TEST=backslashes vows test/render-test.js)\nvar testToRun = process.env.TEST;\n\nvar testNames;\nif (testToRun) {\n  testNames = [testToRun];\n} else {\n  testNames = fs.readdirSync(_files).filter(function (file) {\n    return (/\\.js$/).test(file);\n  }).map(function (file) {\n    return path.basename(file).replace(/\\.js$/, '');\n  });\n}\n\ndescribe('Mustache.render', function () {\n  beforeEach(function () {\n    Mustache.clearCache();\n  });\n\n  testNames.forEach(function (testName) {\n    var test = getTest(testName);\n\n    it('knows how to render ' + testName, function () {\n      var output;\n      if (test.partial) {\n        output = Mustache.render(test.template, test.view, { partial: test.partial });\n      } else {\n        output = Mustache.render(test.template, test.view);\n      }\n\n      assert.equal(output, test.expect);\n    });\n  });\n});\n"],"file":"render-test.js"}