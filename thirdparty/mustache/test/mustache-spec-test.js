require("./helper");var fs=require("fs"),path=require("path"),specsDir=path.join(__dirname,"spec/specs"),skipTests={comments:["Standalone Without Newline"],delimiters:["Standalone Without Newline"],inverted:["Standalone Without Newline"],partials:["Standalone Without Previous Line","Standalone Without Newline","Standalone Indentation"],sections:["Standalone Without Newline"],"~lambdas":["Interpolation","Interpolation - Expansion","Interpolation - Alternate Delimiters","Interpolation - Multiple Calls","Escaping","Section - Expansion","Section - Alternate Delimiters"]},noSkip=process.env.NOSKIP,fileToRun=process.env.TEST,specFiles;function existsDir(path){try{return fs.statSync(path).isDirectory()}catch(x){return!1}}function getSpecs(specArea){return JSON.parse(fs.readFileSync(path.join(specsDir,specArea+".json"),"utf8"))}specFiles=fileToRun?[fileToRun]:existsDir(specsDir)?fs.readdirSync(specsDir).filter(function(file){return/\.json$/.test(file)}).map(function(file){return path.basename(file).replace(/\.json$/,"")}).sort():[],describe("Mustache spec compliance",function(){beforeEach(function(){Mustache.clearCache()}),specFiles.forEach(function(specArea){describe("- "+specArea+":",function(){var specs=getSpecs(specArea);specs.tests.forEach(function(test){var it_=!noSkip&&skipTests[specArea]&&skipTests[specArea].indexOf(test.name)>=0?it.skip:it;it_(test.name+" - "+test.desc,function(){test.data.lambda&&"code"===test.data.lambda.__tag__&&(test.data.lambda=eval("(function() { return "+test.data.lambda.js+"; })"));var output=Mustache.render(test.template,test.data,test.partials);assert.equal(output,test.expected)})})})})});
//# sourceMappingURL=mustache-spec-test.js.map
