{"version":3,"sources":["language/CodeInspection.js"],"names":["define","require","exports","module","_","Commands","WorkspaceManager","CommandManager","DocumentManager","EditorManager","MainViewManager","LanguageManager","PreferencesManager","PerfUtils","Strings","StringUtils","AppInit","StatusBar","Async","PanelTemplate","ResultsTemplate","Mustache","INDICATOR_ID","Type","ERROR","WARNING","META","PREF_ENABLED","PREF_COLLAPSED","PREF_ASYNC_TIMEOUT","PREF_PREFER_PROVIDERS","PREF_PREFERRED_ONLY","prefs","getExtensionPrefs","_enabled","_collapsed","$problemsPanel","problemsPanel","$problemsPanelTable","_gotoEnabled","_providers","_hasErrors","_currentPromise","setGotoEnabled","gotoEnabled","get","NAVIGATE_GOTO_FIRST_PROBLEM","setEnabled","_unregisterAll","getProvidersForPath","filePath","language","getLanguageForPath","getId","context","_buildContext","installedProviders","getProvidersForLanguageId","preferredProviders","prefPreferredProviderNames","prefPreferredOnly","providers","length","reduce","result","key","provider","find","name","push","union","getProviderIDsForLanguage","languageId","map","inspectFile","file","providerList","response","$","Deferred","results","fullPath","getDocumentText","done","fileText","perfTimerInspector","markStart","masterPromise","doInParallel","perfTimerProvider","runPromise","scanResult","scanFileAsync","window","setTimeout","errTimeout","pos","line","col","message","format","LINTER_TIMED_OUT","type","resolve","errors","addMeasurement","fail","err","finalizeMeasurement","errError","LINTER_FAILED","console","error","scanFile","promise","then","sort","a","b","indexOf","reject","updatePanelTitleAndStatusBar","numProblems","providersReportingProblems","aborted","tooltip","hide","removeClass","MULTIPLE_ERRORS","SINGLE_ERROR","show","ERRORS_PANEL_TITLE_MULTIPLE","text","STATUSBAR_CODE_INSPECTION_TOOLTIP","updateIndicator","run","LINT_DISABLED","currentDoc","getCurrentDocument","allErrors","html","this","item","Boolean","NO_ERRORS_MULTIPLE_PROVIDER","NO_ERRORS","perfTimerDOM","forEach","inspectionResult","isExpanded","isNaN","undefined","codeSnippet","getLine","friendlyLine","substr","display","providerName","render","reportList","empty","append","scrollTop","NO_LINT_AVAILABLE","getName","NOTHING_TO_LINT","register","indexOfProvider","findIndex","entry","splice","concat","updateListeners","on","event","document","off","toggleEnabled","enabled","doNotSave","VIEW_TOGGLE_INSPECTION","setChecked","set","save","toggleCollapsed","collapsed","handleGotoFirstProblem","first","trigger","CMD_VIEW_TOGGLE_INSPECTION","CMD_GOTO_FIRST_PROBLEM","definePreference","brackets","config","description","DESCRIPTION_LINTING_ENABLED","e","data","DESCRIPTION_LINTING_COLLAPSED","DESCRIPTION_ASYNC_TIMEOUT","DESCRIPTION_LINTING_PREFER","valueType","DESCRIPTION_USE_PREFERED_ONLY","htmlReady","panelHtml","$selectedRow","createBottomPanel","currentTarget","addClass","hasClass","$triangle","nextUntil","toggleClass","val","lineTd","parseInt","character","editor","getCurrentFullEditor","setCursorPos","focusActivePane","click","statusIconHtml","addIndicator","_PREF_ASYNC_TIMEOUT","_PREF_PREFER_PROVIDERS","_PREF_PREFERRED_ONLY","requestRun"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Manages linters and other code inspections on a per-language basis. Provides a UI and status indicator for\n * the resulting errors/warnings.\n *\n * Currently, inspection providers are only invoked on the current file and only when it is opened, switched to,\n * or saved. But in the future, inspectors may be invoked as part of a global scan, at intervals while typing, etc.\n * Currently, results are only displayed in a bottom panel list and in a status bar icon. But in the future,\n * results may also be displayed inline in the editor (as gutter markers, squiggly underlines, etc.).\n * In the future, support may also be added for error/warning providers that cannot process a single file at a time\n * (e.g. a full-project compiler).\n */\ndefine(function (require, exports, module) {\n\n\n    var _ = require(\"thirdparty/lodash\");\n\n    // Load dependent modules\n    var Commands                = require(\"command/Commands\"),\n        WorkspaceManager        = require(\"view/WorkspaceManager\"),\n        CommandManager          = require(\"command/CommandManager\"),\n        DocumentManager         = require(\"document/DocumentManager\"),\n        EditorManager           = require(\"editor/EditorManager\"),\n        MainViewManager         = require(\"view/MainViewManager\"),\n        LanguageManager         = require(\"language/LanguageManager\"),\n        PreferencesManager      = require(\"preferences/PreferencesManager\"),\n        PerfUtils               = require(\"utils/PerfUtils\"),\n        Strings                 = require(\"strings\"),\n        StringUtils             = require(\"utils/StringUtils\"),\n        AppInit                 = require(\"utils/AppInit\"),\n        StatusBar               = require(\"widgets/StatusBar\"),\n        Async                   = require(\"utils/Async\"),\n        PanelTemplate           = require(\"text!htmlContent/problems-panel.html\"),\n        ResultsTemplate         = require(\"text!htmlContent/problems-panel-table.html\"),\n        Mustache                = require(\"thirdparty/mustache/mustache\");\n\n    var INDICATOR_ID = \"status-inspection\";\n\n    /** Values for problem's 'type' property */\n    var Type = {\n        /** Unambiguous error, such as a syntax error */\n        ERROR: \"problem_type_error\",\n        /** Maintainability issue, probable error / bad smell, etc. */\n        WARNING: \"problem_type_warning\",\n        /** Inspector unable to continue, code too complex for static analysis, etc. Not counted in error/warning tally. */\n        META: \"problem_type_meta\"\n    };\n\n    /**\n     * Constants for the preferences defined in this file.\n     */\n    var PREF_ENABLED            = \"enabled\",\n        PREF_COLLAPSED          = \"collapsed\",\n        PREF_ASYNC_TIMEOUT      = \"asyncTimeout\",\n        PREF_PREFER_PROVIDERS   = \"prefer\",\n        PREF_PREFERRED_ONLY     = \"usePreferredOnly\";\n\n    var prefs = PreferencesManager.getExtensionPrefs(\"linting\");\n\n    /**\n     * When disabled, the errors panel is closed and the status bar icon is grayed out.\n     * Takes precedence over _collapsed.\n     * @private\n     * @type {boolean}\n     */\n    var _enabled = false;\n\n    /**\n     * When collapsed, the errors panel is closed but the status bar icon is kept up to date.\n     * @private\n     * @type {boolean}\n     */\n    var _collapsed = false;\n\n    /**\n     * @private\n     * @type {$.Element}\n     */\n    var $problemsPanel;\n\n    /**\n     * @private the panelView\n     * @type {Panel}\n     */\n    var problemsPanel;\n\n    /**\n     * @private\n     * @type {$.Element}\n     */\n    var $problemsPanelTable;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    var _gotoEnabled = false;\n\n    /**\n     * @private\n     * @type {{languageId:string, Array.<{name:string, scanFileAsync:?function(string, string):!{$.Promise}, scanFile:?function(string, string):Object}>}}\n     */\n    var _providers = {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    var _hasErrors;\n\n    /**\n     * Promise of the returned by the last call to inspectFile or null if linting is disabled. Used to prevent any stale promises\n     * to cause updates of the UI.\n     *\n     * @private\n     * @type {$.Promise}\n     */\n    var _currentPromise = null;\n\n    /**\n     * Enable or disable the \"Go to First Error\" command\n     * @param {boolean} gotoEnabled Whether it is enabled.\n     */\n    function setGotoEnabled(gotoEnabled) {\n        CommandManager.get(Commands.NAVIGATE_GOTO_FIRST_PROBLEM).setEnabled(gotoEnabled);\n        _gotoEnabled = gotoEnabled;\n    }\n\n    function _unregisterAll() {\n        _providers = {};\n    }\n\n    /**\n     * Returns a list of provider for given file path, if available.\n     * Decision is made depending on the file extension.\n     *\n     * @param {!string} filePath\n     * @return {Array.<{name:string, scanFileAsync:?function(string, string):!{$.Promise}, scanFile:?function(string, string):?{errors:!Array, aborted:boolean}}>}\n     */\n    function getProvidersForPath(filePath) {\n        var language            = LanguageManager.getLanguageForPath(filePath).getId(),\n            context             = PreferencesManager._buildContext(filePath, language),\n            installedProviders  = getProvidersForLanguageId(language),\n            preferredProviders,\n\n            prefPreferredProviderNames  = prefs.get(PREF_PREFER_PROVIDERS, context),\n            prefPreferredOnly           = prefs.get(PREF_PREFERRED_ONLY, context),\n\n            providers;\n\n        if (prefPreferredProviderNames && prefPreferredProviderNames.length) {\n            if (typeof prefPreferredProviderNames === \"string\") {\n                prefPreferredProviderNames = [prefPreferredProviderNames];\n            }\n            preferredProviders = prefPreferredProviderNames.reduce(function (result, key) {\n                var provider = _.find(installedProviders, {name: key});\n                if (provider) {\n                    result.push(provider);\n                }\n                return result;\n            }, []);\n            if (prefPreferredOnly) {\n                providers = preferredProviders;\n            } else {\n                providers = _.union(preferredProviders, installedProviders);\n            }\n        } else {\n            providers = installedProviders;\n        }\n        return providers;\n    }\n\n    /**\n     * Returns an array of the IDs of providers registered for a specific language\n     *\n     * @param {!string} languageId\n     * @return {Array.<string>} Names of registered providers.\n     */\n    function getProviderIDsForLanguage(languageId) {\n        if (!_providers[languageId]) {\n            return [];\n        }\n        return _providers[languageId].map(function (provider) {\n            return provider.name;\n        });\n    }\n\n    /**\n     * Runs a file inspection over passed file. Uses the given list of providers if specified, otherwise uses\n     * the set of providers that are registered for the file's language.\n     * This method doesn't update the Brackets UI, just provides inspection results.\n     * These results will reflect any unsaved changes present in the file if currently open.\n     *\n     * The Promise yields an array of provider-result pair objects (the result is the return value of the\n     * provider's scanFile() - see register() for details). The result object may be null if there were no\n     * errors from that provider.\n     * If there are no providers registered for this file, the Promise yields null instead.\n     *\n     * @param {!File} file File that will be inspected for errors.\n     * @param {?Array.<{name:string, scanFileAsync:?function(string, string):!{$.Promise}, scanFile:?function(string, string):?{errors:!Array, aborted:boolean}}>} providerList\n     * @return {$.Promise} a jQuery promise that will be resolved with ?Array.<{provider:Object, result: ?{errors:!Array, aborted:boolean}}>\n     */\n    function inspectFile(file, providerList) {\n        var response = new $.Deferred(),\n            results = [];\n\n        providerList = providerList || getProvidersForPath(file.fullPath);\n\n        if (!providerList.length) {\n            response.resolve(null);\n            return response.promise();\n        }\n\n        DocumentManager.getDocumentText(file)\n            .done(function (fileText) {\n                var perfTimerInspector = PerfUtils.markStart(\"CodeInspection:\\t\" + file.fullPath),\n                    masterPromise;\n\n                masterPromise = Async.doInParallel(providerList, function (provider) {\n                    var perfTimerProvider = PerfUtils.markStart(\"CodeInspection '\" + provider.name + \"':\\t\" + file.fullPath),\n                        runPromise = new $.Deferred();\n\n                    runPromise.done(function (scanResult) {\n                        results.push({provider: provider, result: scanResult});\n                    });\n\n                    if (provider.scanFileAsync) {\n                        window.setTimeout(function () {\n                            // timeout error\n                            var errTimeout = {\n                                pos: { line: -1, col: 0},\n                                message: StringUtils.format(Strings.LINTER_TIMED_OUT, provider.name, prefs.get(PREF_ASYNC_TIMEOUT)),\n                                type: Type.ERROR\n                            };\n                            runPromise.resolve({errors: [errTimeout]});\n                        }, prefs.get(PREF_ASYNC_TIMEOUT));\n                        provider.scanFileAsync(fileText, file.fullPath)\n                            .done(function (scanResult) {\n                                PerfUtils.addMeasurement(perfTimerProvider);\n                                runPromise.resolve(scanResult);\n                            })\n                            .fail(function (err) {\n                                PerfUtils.finalizeMeasurement(perfTimerProvider);\n                                var errError = {\n                                    pos: {line: -1, col: 0},\n                                    message: StringUtils.format(Strings.LINTER_FAILED, provider.name, err),\n                                    type: Type.ERROR\n                                };\n                                console.error(\"[CodeInspection] Provider \" + provider.name + \" (async) failed: \" + err);\n                                runPromise.resolve({errors: [errError]});\n                            });\n                    } else {\n                        try {\n                            var scanResult = provider.scanFile(fileText, file.fullPath);\n                            PerfUtils.addMeasurement(perfTimerProvider);\n                            runPromise.resolve(scanResult);\n                        } catch (err) {\n                            PerfUtils.finalizeMeasurement(perfTimerProvider);\n                            var errError = {\n                                pos: {line: -1, col: 0},\n                                message: StringUtils.format(Strings.LINTER_FAILED, provider.name, err),\n                                type: Type.ERROR\n                            };\n                            console.error(\"[CodeInspection] Provider \" + provider.name + \" (sync) threw an error: \" + err);\n                            runPromise.resolve({errors: [errError]});\n                        }\n                    }\n                    return runPromise.promise();\n\n                }, false);\n\n                masterPromise.then(function () {\n                    // sync async may have pushed results in different order, restore the original order\n                    results.sort(function (a, b) {\n                        return providerList.indexOf(a.provider) - providerList.indexOf(b.provider);\n                    });\n                    PerfUtils.addMeasurement(perfTimerInspector);\n                    response.resolve(results);\n                });\n\n            })\n            .fail(function (err) {\n                console.error(\"[CodeInspection] Could not read file for inspection: \" + file.fullPath);\n                response.reject(err);\n            });\n\n        return response.promise();\n    }\n\n    /**\n     * Update the title of the problem panel and the tooltip of the status bar icon. The title and the tooltip will\n     * change based on the number of problems reported and how many provider reported problems.\n     *\n     * @param {Number} numProblems - total number of problems across all providers\n     * @param {Array.<{name:string, scanFileAsync:?function(string, string):!{$.Promise}, scanFile:?function(string, string):Object}>} providersReportingProblems - providers that reported problems\n     * @param {boolean} aborted - true if any provider returned a result with the 'aborted' flag set\n     */\n    function updatePanelTitleAndStatusBar(numProblems, providersReportingProblems, aborted) {\n        var message, tooltip;\n\n        if (providersReportingProblems.length === 1) {\n            // don't show a header if there is only one provider available for this file type\n            $problemsPanelTable.find(\".inspector-section\").hide();\n            $problemsPanelTable.find(\"tr\").removeClass(\"forced-hidden\");\n\n            if (numProblems === 1 && !aborted) {\n                message = StringUtils.format(Strings.SINGLE_ERROR, providersReportingProblems[0].name);\n            } else {\n                if (aborted) {\n                    numProblems += \"+\";\n                }\n\n                message = StringUtils.format(Strings.MULTIPLE_ERRORS, providersReportingProblems[0].name, numProblems);\n            }\n        } else if (providersReportingProblems.length > 1) {\n            $problemsPanelTable.find(\".inspector-section\").show();\n\n            if (aborted) {\n                numProblems += \"+\";\n            }\n\n            message = StringUtils.format(Strings.ERRORS_PANEL_TITLE_MULTIPLE, numProblems);\n        } else {\n            return;\n        }\n\n        $problemsPanel.find(\".title\").text(message);\n        tooltip = StringUtils.format(Strings.STATUSBAR_CODE_INSPECTION_TOOLTIP, message);\n        StatusBar.updateIndicator(INDICATOR_ID, true, \"inspection-errors\", tooltip);\n    }\n\n    /**\n     * Run inspector applicable to current document. Updates status bar indicator and refreshes error list in\n     * bottom panel. Does not run if inspection is disabled or if a providerName is given and does not\n     * match the current doc's provider name.\n     *\n     * @param {?string} providerName name of the provider that is requesting a run\n     */\n    function run() {\n        if (!_enabled) {\n            _hasErrors = false;\n            _currentPromise = null;\n            problemsPanel.hide();\n            StatusBar.updateIndicator(INDICATOR_ID, true, \"inspection-disabled\", Strings.LINT_DISABLED);\n            setGotoEnabled(false);\n            return;\n        }\n\n        var currentDoc = DocumentManager.getCurrentDocument(),\n            providerList = currentDoc && getProvidersForPath(currentDoc.file.fullPath);\n\n        if (providerList && providerList.length) {\n            var numProblems = 0;\n            var aborted = false;\n            var allErrors = [];\n            var html;\n            var providersReportingProblems = [];\n\n            // run all the providers registered for this file type\n            (_currentPromise = inspectFile(currentDoc.file, providerList)).then(function (results) {\n                // check if promise has not changed while inspectFile was running\n                if (this !== _currentPromise) {\n                    return;\n                }\n\n                // how many errors in total?\n                var errors = results.reduce(function (a, item) { return a + (item.result ? item.result.errors.length : 0); }, 0);\n\n                _hasErrors = Boolean(errors);\n\n                if (!errors) {\n                    problemsPanel.hide();\n\n                    var message = Strings.NO_ERRORS_MULTIPLE_PROVIDER;\n                    if (providerList.length === 1) {\n                        message = StringUtils.format(Strings.NO_ERRORS, providerList[0].name);\n                    }\n\n                    StatusBar.updateIndicator(INDICATOR_ID, true, \"inspection-valid\", message);\n\n                    setGotoEnabled(false);\n                    return;\n                }\n\n                var perfTimerDOM = PerfUtils.markStart(\"ProblemsPanel render:\\t\" + currentDoc.file.fullPath);\n\n                // Augment error objects with additional fields needed by Mustache template\n                results.forEach(function (inspectionResult) {\n                    var provider = inspectionResult.provider;\n                    var isExpanded = prefs.get(provider.name + \".collapsed\") !== false;\n\n                    if (inspectionResult.result) {\n                        inspectionResult.result.errors.forEach(function (error) {\n                            // some inspectors don't always provide a line number or report a negative line number\n                            if (!isNaN(error.pos.line) &&\n                                    (error.pos.line + 1) > 0 &&\n                                    (error.codeSnippet = currentDoc.getLine(error.pos.line)) !== undefined) {\n                                error.friendlyLine = error.pos.line + 1;\n                                error.codeSnippet = error.codeSnippet.substr(0, 175);  // limit snippet width\n                            }\n\n                            if (error.type !== Type.META) {\n                                numProblems++;\n                            }\n\n                            // Hide the errors when the provider is collapsed.\n                            error.display = isExpanded ? \"\" : \"forced-hidden\";\n                        });\n\n                        // if the code inspector was unable to process the whole file, we keep track to show a different status\n                        if (inspectionResult.result.aborted) {\n                            aborted = true;\n                        }\n\n                        if (inspectionResult.result.errors.length) {\n                            allErrors.push({\n                                isExpanded: isExpanded,\n                                providerName: provider.name,\n                                results: inspectionResult.result.errors\n                            });\n\n                            providersReportingProblems.push(provider);\n                        }\n                    }\n                });\n\n                // Update results table\n                html = Mustache.render(ResultsTemplate, {reportList: allErrors});\n\n                $problemsPanelTable\n                    .empty()\n                    .append(html)\n                    .scrollTop(0);  // otherwise scroll pos from previous contents is remembered\n\n                if (!_collapsed) {\n                    problemsPanel.show();\n                }\n\n                updatePanelTitleAndStatusBar(numProblems, providersReportingProblems, aborted);\n                setGotoEnabled(true);\n\n                PerfUtils.addMeasurement(perfTimerDOM);\n            });\n\n        } else {\n            // No provider for current file\n            _hasErrors = false;\n            _currentPromise = null;\n            if(problemsPanel){\n                problemsPanel.hide();\n            }\n            var language = currentDoc && LanguageManager.getLanguageForPath(currentDoc.file.fullPath);\n            if (language) {\n                StatusBar.updateIndicator(INDICATOR_ID, true, \"inspection-disabled\", StringUtils.format(Strings.NO_LINT_AVAILABLE, language.getName()));\n            } else {\n                StatusBar.updateIndicator(INDICATOR_ID, true, \"inspection-disabled\", Strings.NOTHING_TO_LINT);\n            }\n            setGotoEnabled(false);\n        }\n    }\n\n    /**\n     * The provider is passed the text of the file and its fullPath. Providers should not assume\n     * that the file is open (i.e. DocumentManager.getOpenDocumentForPath() may return null) or\n     * that the file on disk matches the text given (file may have unsaved changes).\n     *\n     * Registering any provider for the \"javascript\" language automatically unregisters the built-in\n     * Brackets JSLint provider. This is a temporary convenience until UI exists for disabling\n     * registered providers.\n     *\n     * Providers implement scanFile() if results are available synchronously, or scanFileAsync() if results\n     * may require an async wait (if both are implemented, scanFile() is ignored). scanFileAsync() returns\n     * a {$.Promise} object resolved with the same type of value as scanFile() is expected to return.\n     * Rejecting the promise is treated as an internal error in the provider.\n     *\n     * @param {string} languageId\n     * @param {{name:string, scanFileAsync:?function(string, string):!{$.Promise},\n     *         scanFile:?function(string, string):?{errors:!Array, aborted:boolean}}} provider\n     *\n     * Each error is: { pos:{line,ch}, endPos:?{line,ch}, message:string, type:?Type }\n     * If type is unspecified, Type.WARNING is assumed.\n     * If no errors found, return either null or an object with a zero-length `errors` array.\n     */\n    function register(languageId, provider) {\n        if (!_providers[languageId]) {\n            _providers[languageId] = [];\n        } else {\n            // Check if provider with same name exists for the given language\n            // If yes, remove the provider before inserting the most recently loaded one\n            var indexOfProvider = _.findIndex(_providers[languageId], function(entry) { return entry.name === provider.name; });\n            if (indexOfProvider !== -1) {\n                _providers[languageId].splice(indexOfProvider, 1);\n            }\n        }\n\n        _providers[languageId].push(provider);\n\n        run();  // in case a file of this type is open currently\n    }\n\n    /**\n     * Returns a list of providers registered for given languageId through register function\n     */\n    function getProvidersForLanguageId(languageId) {\n        var result = [];\n        if (_providers[languageId]) {\n            result = result.concat(_providers[languageId]);\n        }\n        if (_providers['*']) {\n            result = result.concat(_providers['*']);\n        }\n        return result;\n    }\n\n    /**\n     * Update DocumentManager listeners.\n     */\n    function updateListeners() {\n        if (_enabled) {\n            // register our event listeners\n            MainViewManager\n                .on(\"currentFileChange.codeInspection\", function () {\n                    run();\n                });\n            DocumentManager\n                .on(\"currentDocumentLanguageChanged.codeInspection\", function () {\n                    run();\n                })\n                .on(\"documentSaved.codeInspection documentRefreshed.codeInspection\", function (event, document) {\n                    if (document === DocumentManager.getCurrentDocument()) {\n                        run();\n                    }\n                });\n        } else {\n            DocumentManager.off(\".codeInspection\");\n            MainViewManager.off(\".codeInspection\");\n        }\n    }\n\n    /**\n     * Enable or disable all inspection.\n     * @param {?boolean} enabled Enabled state. If omitted, the state is toggled.\n     * @param {?boolean} doNotSave true if the preference should not be saved to user settings. This is generally for events triggered by project-level settings.\n     */\n    function toggleEnabled(enabled, doNotSave) {\n        if (enabled === undefined) {\n            enabled = !_enabled;\n        }\n\n        // Take no action when there is no change.\n        if (enabled === _enabled) {\n            return;\n        }\n\n        _enabled = enabled;\n\n        CommandManager.get(Commands.VIEW_TOGGLE_INSPECTION).setChecked(_enabled);\n        updateListeners();\n        if (!doNotSave) {\n            prefs.set(PREF_ENABLED, _enabled);\n            prefs.save();\n        }\n\n        // run immediately\n        run();\n    }\n\n    /**\n     * Toggle the collapsed state for the panel. This explicitly collapses the panel (as opposed to\n     * the auto collapse due to files with no errors & filetypes with no provider). When explicitly\n     * collapsed, the panel will not reopen automatically on switch files or save.\n     *\n     * @param {?boolean} collapsed Collapsed state. If omitted, the state is toggled.\n     * @param {?boolean} doNotSave true if the preference should not be saved to user settings. This is generally for events triggered by project-level settings.\n     */\n    function toggleCollapsed(collapsed, doNotSave) {\n        if (collapsed === undefined) {\n            collapsed = !_collapsed;\n        }\n\n        if (collapsed === _collapsed) {\n            return;\n        }\n\n        _collapsed = collapsed;\n        if (!doNotSave) {\n            prefs.set(PREF_COLLAPSED, _collapsed);\n            prefs.save();\n        }\n\n        if (_collapsed) {\n            problemsPanel.hide();\n        } else {\n            if (_hasErrors) {\n                problemsPanel.show();\n            }\n        }\n    }\n\n    /** Command to go to the first Problem */\n    function handleGotoFirstProblem() {\n        run();\n        if (_gotoEnabled) {\n            $problemsPanel.find(\"tr:not(.inspector-section)\").first().trigger(\"click\");\n        }\n    }\n\n    // Register command handlers\n    CommandManager.register(Strings.CMD_VIEW_TOGGLE_INSPECTION, Commands.VIEW_TOGGLE_INSPECTION,        toggleEnabled);\n    CommandManager.register(Strings.CMD_GOTO_FIRST_PROBLEM,     Commands.NAVIGATE_GOTO_FIRST_PROBLEM,   handleGotoFirstProblem);\n\n    // Register preferences\n    prefs.definePreference(PREF_ENABLED, \"boolean\", brackets.config[\"linting.enabled_by_default\"], {\n        description: Strings.DESCRIPTION_LINTING_ENABLED\n    })\n        .on(\"change\", function (e, data) {\n            toggleEnabled(prefs.get(PREF_ENABLED), true);\n        });\n\n    prefs.definePreference(PREF_COLLAPSED, \"boolean\", false, {\n        description: Strings.DESCRIPTION_LINTING_COLLAPSED\n    })\n        .on(\"change\", function (e, data) {\n            toggleCollapsed(prefs.get(PREF_COLLAPSED), true);\n        });\n\n    prefs.definePreference(PREF_ASYNC_TIMEOUT, \"number\", 10000, {\n        description: Strings.DESCRIPTION_ASYNC_TIMEOUT\n    });\n\n    prefs.definePreference(PREF_PREFER_PROVIDERS, \"array\", [], {\n        description: Strings.DESCRIPTION_LINTING_PREFER,\n        valueType: \"string\"\n    });\n\n    prefs.definePreference(PREF_PREFERRED_ONLY, \"boolean\", false, {\n        description: Strings.DESCRIPTION_USE_PREFERED_ONLY\n    });\n\n    // Initialize items dependent on HTML DOM\n    AppInit.htmlReady(function () {\n        // Create bottom panel to list error details\n        var panelHtml = Mustache.render(PanelTemplate, Strings);\n        problemsPanel = WorkspaceManager.createBottomPanel(\"errors\", $(panelHtml), 100);\n        $problemsPanel = $(\"#problems-panel\");\n\n        var $selectedRow;\n        $problemsPanelTable = $problemsPanel.find(\".table-container\")\n            .on(\"click\", \"tr\", function (e) {\n                if ($selectedRow) {\n                    $selectedRow.removeClass(\"selected\");\n                }\n\n                $selectedRow  = $(e.currentTarget);\n                $selectedRow.addClass(\"selected\");\n\n                // This is a inspector title row, expand/collapse on click\n                if ($selectedRow.hasClass(\"inspector-section\")) {\n                    var $triangle = $(\".disclosure-triangle\", $selectedRow);\n                    var isExpanded = $triangle.hasClass(\"expanded\");\n\n                    // Clicking the inspector title section header collapses/expands result rows\n                    if (isExpanded) {\n                        $selectedRow.nextUntil(\".inspector-section\").addClass(\"forced-hidden\");\n                    } else {\n                        $selectedRow.nextUntil(\".inspector-section\").removeClass(\"forced-hidden\");\n                    }\n                    $triangle.toggleClass(\"expanded\");\n\n                    var providerName = $selectedRow.find(\"input[type='hidden']\").val();\n                    prefs.set(providerName + \".collapsed\", !isExpanded);\n                    prefs.save();\n                } else {\n                    // This is a problem marker row, show the result on click\n                    // Grab the required position data\n                    var lineTd    = $selectedRow.find(\".line-number\");\n                    var line      = parseInt(lineTd.text(), 10) - 1;  // convert friendlyLine back to pos.line\n                    // if there is no line number available, don't do anything\n                    if (!isNaN(line)) {\n                        var character = lineTd.data(\"character\");\n\n                        var editor = EditorManager.getCurrentFullEditor();\n                        editor.setCursorPos(line, character, true);\n                        MainViewManager.focusActivePane();\n                    }\n                }\n            });\n\n        $(\"#problems-panel .close\").click(function () {\n            toggleCollapsed(true);\n            MainViewManager.focusActivePane();\n        });\n\n        // Status bar indicator - icon & tooltip updated by run()\n        var statusIconHtml = Mustache.render(\"<div id=\\\"status-inspection\\\">&nbsp;</div>\", Strings);\n        StatusBar.addIndicator(INDICATOR_ID, $(statusIconHtml), true, \"\", \"\", \"status-indent\");\n\n        $(\"#status-inspection\").click(function () {\n            // Clicking indicator toggles error panel, if any errors in current file\n            if (_hasErrors) {\n                toggleCollapsed();\n            }\n        });\n\n        // Set initial UI state\n        toggleEnabled(prefs.get(PREF_ENABLED), true);\n        toggleCollapsed(prefs.get(PREF_COLLAPSED), true);\n    });\n\n    // Testing\n    exports._unregisterAll          = _unregisterAll;\n    exports._PREF_ASYNC_TIMEOUT     = PREF_ASYNC_TIMEOUT;\n    exports._PREF_PREFER_PROVIDERS  = PREF_PREFER_PROVIDERS;\n    exports._PREF_PREFERRED_ONLY    = PREF_PREFERRED_ONLY;\n\n    // Public API\n    exports.register                    = register;\n    exports.Type                        = Type;\n    exports.toggleEnabled               = toggleEnabled;\n    exports.inspectFile                 = inspectFile;\n    exports.requestRun                  = run;\n    exports.getProvidersForPath         = getProvidersForPath;\n    exports.getProviderIDsForLanguage   = getProviderIDsForLanguage;\n});\n"],"file":"CodeInspection.js"}