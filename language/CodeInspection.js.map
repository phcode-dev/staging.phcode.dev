{"version":3,"sources":["language/CodeInspection.js"],"names":["define","require","exports","module","_","Commands","WorkspaceManager","CommandManager","DocumentManager","EditorManager","Editor","MainViewManager","LanguageManager","PreferencesManager","PerfUtils","Strings","StringUtils","AppInit","StatusBar","Async","PanelTemplate","ResultsTemplate","Mustache","INDICATOR_ID","Type","ERROR","WARNING","META","_getIconClassForType","type","CSS_TEXT_UNDERLINE_CLASS_ERROR","CSS_TEXT_UNDERLINE_CLASS_WARN","CSS_TEXT_UNDERLINE_CLASS_INFO","CODE_MARK_TYPE_INSPECTOR","PREF_ENABLED","PREF_COLLAPSED","PREF_ASYNC_TIMEOUT","PREF_PREFER_PROVIDERS","PREF_PREFERRED_ONLY","prefs","getExtensionPrefs","_enabled","_collapsed","$problemsPanel","problemsPanel","$problemsPanelTable","_gotoEnabled","_providers","_hasErrors","_currentPromise","setGotoEnabled","gotoEnabled","get","NAVIGATE_GOTO_FIRST_PROBLEM","setEnabled","_unregisterAll","getProvidersForPath","filePath","language","getLanguageForPath","getId","context","_buildContext","installedProviders","getProvidersForLanguageId","preferredProviders","prefPreferredProviderNames","prefPreferredOnly","providers","length","reduce","result","key","provider","find","name","push","union","getProviderIDsForLanguage","languageId","map","inspectFile","file","providerList","response","$","Deferred","results","fullPath","getDocumentText","done","fileText","perfTimerInspector","markStart","masterPromise","doInParallel","perfTimerProvider","runPromise","scanResult","scanFileAsync","window","setTimeout","errTimeout","pos","line","col","message","format","LINTER_TIMED_OUT","resolve","errors","jsPromise","then","addMeasurement","catch","err","finalizeMeasurement","errError","LINTER_FAILED","console","error","stack","scanFile","promise","sort","a","b","indexOf","fail","reject","updatePanelTitleAndStatusBar","numProblems","providersReportingProblems","aborted","tooltip","hide","removeClass","MULTIPLE_ERRORS","SINGLE_ERROR","show","ERRORS_PANEL_TITLE_MULTIPLE","text","STATUSBAR_CODE_INSPECTION_TOOLTIP","updateIndicator","_getCSSClass","_getCSSClassPriority","cssClass","_shouldMarkTokenAtPosition","editor","isNaN","ch","warn","markings","findMarksAt","classToApply","classToApplyPriority","shouldMark","mark","classPriority","className","clear","_updateGutterMarks","gutterErrorMessages","clearGutter","DEBUG_INFO_GUTTER","lineno","Object","keys","gutterMessage","prev","current","$marker","attr","addClass","click","setCursorPos","html","setGutterMarker","_updateEditorMarks","resultProviderEntries","getCurrentFullEditor","operation","clearAllMarks","resultProvider","markToken","run","LINT_DISABLED","currentDoc","getCurrentDocument","allErrors","empty","this","item","Boolean","NO_ERRORS_MULTIPLE_PROVIDER","NO_ERRORS","perfTimerDOM","forEach","inspectionResult","isExpanded","undefined","codeSnippet","getLine","friendlyLine","substr","iconClass","display","providerName","render","reportList","append","scrollTop","NO_LINT_AVAILABLE","getName","NOTHING_TO_LINT","register","indexOfProvider","findIndex","entry","splice","concat","updateListeners","on","event","document","off","toggleEnabled","enabled","doNotSave","VIEW_TOGGLE_INSPECTION","setChecked","set","save","toggleCollapsed","collapsed","handleGotoFirstProblem","first","trigger","CMD_VIEW_TOGGLE_INSPECTION","CMD_GOTO_FIRST_PROBLEM","definePreference","brackets","config","description","DESCRIPTION_LINTING_ENABLED","e","data","DESCRIPTION_LINTING_COLLAPSED","DESCRIPTION_ASYNC_TIMEOUT","DESCRIPTION_LINTING_PREFER","valueType","DESCRIPTION_USE_PREFERED_ONLY","htmlReady","panelHtml","$selectedRow","createBottomPanel","currentTarget","hasClass","$triangle","nextUntil","toggleClass","val","lineTd","parseInt","character","focusActivePane","statusIconHtml","addIndicator","_PREF_ASYNC_TIMEOUT","_PREF_PREFER_PROVIDERS","_PREF_PREFERRED_ONLY","requestRun"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global jsPromise*/\n\n/**\n * Manages linters and other code inspections on a per-language basis. Provides a UI and status indicator for\n * the resulting errors/warnings.\n *\n * Currently, inspection providers are only invoked on the current file and only when it is opened, switched to,\n * or saved. But in the future, inspectors may be invoked as part of a global scan, at intervals while typing, etc.\n * Currently, results are only displayed in a bottom panel list and in a status bar icon. But in the future,\n * results may also be displayed inline in the editor (as gutter markers, etc.).\n * In the future, support may also be added for error/warning providers that cannot process a single file at a time\n * (e.g. a full-project compiler).\n */\ndefine(function (require, exports, module) {\n\n\n    const _ = require(\"thirdparty/lodash\");\n\n    // Load dependent modules\n    const Commands                = require(\"command/Commands\"),\n        WorkspaceManager        = require(\"view/WorkspaceManager\"),\n        CommandManager          = require(\"command/CommandManager\"),\n        DocumentManager         = require(\"document/DocumentManager\"),\n        EditorManager           = require(\"editor/EditorManager\"),\n        Editor                  = require(\"editor/Editor\").Editor,\n        MainViewManager         = require(\"view/MainViewManager\"),\n        LanguageManager         = require(\"language/LanguageManager\"),\n        PreferencesManager      = require(\"preferences/PreferencesManager\"),\n        PerfUtils               = require(\"utils/PerfUtils\"),\n        Strings                 = require(\"strings\"),\n        StringUtils             = require(\"utils/StringUtils\"),\n        AppInit                 = require(\"utils/AppInit\"),\n        StatusBar               = require(\"widgets/StatusBar\"),\n        Async                   = require(\"utils/Async\"),\n        PanelTemplate           = require(\"text!htmlContent/problems-panel.html\"),\n        ResultsTemplate         = require(\"text!htmlContent/problems-panel-table.html\"),\n        Mustache                = require(\"thirdparty/mustache/mustache\");\n\n    const INDICATOR_ID = \"status-inspection\";\n\n    /** Values for problem's 'type' property */\n    const Type = {\n        /** Unambiguous error, such as a syntax error */\n        ERROR: \"error\",\n        /** Maintainability issue, probable error / bad smell, etc. */\n        WARNING: \"warning\",\n        /** Inspector unable to continue, code too complex for static analysis, etc. Not counted in err/warn tally. */\n        META: \"meta\"\n    };\n\n    function _getIconClassForType(type) {\n        switch (type) {\n        case Type.ERROR: return \"line-icon-problem_type_error fa-solid fa-times-circle\";\n        case Type.WARNING: return \"line-icon-problem_type_warning fa-solid fa-exclamation-triangle\";\n        case Type.META: return \"line-icon-problem_type_meta fa-solid fa-info\";\n        default: return \"line-icon-problem_type_meta fa-solid fa-info\";\n        }\n    }\n\n    const CSS_TEXT_UNDERLINE_CLASS_ERROR = \"editor-text-fragment-error\",\n        CSS_TEXT_UNDERLINE_CLASS_WARN = \"editor-text-fragment-warn\",\n        CSS_TEXT_UNDERLINE_CLASS_INFO = \"editor-text-fragment-info\";\n\n    const CODE_MARK_TYPE_INSPECTOR = \"codeInspector\";\n\n    /**\n     * Constants for the preferences defined in this file.\n     */\n    const PREF_ENABLED            = \"enabled\",\n        PREF_COLLAPSED          = \"collapsed\",\n        PREF_ASYNC_TIMEOUT      = \"asyncTimeout\",\n        PREF_PREFER_PROVIDERS   = \"prefer\",\n        PREF_PREFERRED_ONLY     = \"usePreferredOnly\";\n\n    const prefs = PreferencesManager.getExtensionPrefs(\"linting\");\n\n    /**\n     * When disabled, the errors panel is closed and the status bar icon is grayed out.\n     * Takes precedence over _collapsed.\n     * @private\n     * @type {boolean}\n     */\n    var _enabled = false;\n\n    /**\n     * When collapsed, the errors panel is closed but the status bar icon is kept up to date.\n     * @private\n     * @type {boolean}\n     */\n    var _collapsed = false;\n\n    /**\n     * @private\n     * @type {$.Element}\n     */\n    var $problemsPanel;\n\n    /**\n     * @private the panelView\n     * @type {Panel}\n     */\n    var problemsPanel;\n\n    /**\n     * @private\n     * @type {$.Element}\n     */\n    var $problemsPanelTable;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    var _gotoEnabled = false;\n\n    /**\n     * @private\n     * @type {{languageId:string, Array.<{name:string, scanFileAsync:?function(string, string):!{$.Promise}, scanFile:?function(string, string):Object}>}}\n     */\n    var _providers = {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    var _hasErrors;\n\n    /**\n     * Promise of the returned by the last call to inspectFile or null if linting is disabled. Used to prevent any stale promises\n     * to cause updates of the UI.\n     *\n     * @private\n     * @type {$.Promise}\n     */\n    var _currentPromise = null;\n\n    /**\n     * Enable or disable the \"Go to First Error\" command\n     * @param {boolean} gotoEnabled Whether it is enabled.\n     */\n    function setGotoEnabled(gotoEnabled) {\n        CommandManager.get(Commands.NAVIGATE_GOTO_FIRST_PROBLEM).setEnabled(gotoEnabled);\n        _gotoEnabled = gotoEnabled;\n    }\n\n    function _unregisterAll() {\n        _providers = {};\n    }\n\n    /**\n     * Returns a list of provider for given file path, if available.\n     * Decision is made depending on the file extension.\n     *\n     * @param {!string} filePath\n     * @return {Array.<{name:string, scanFileAsync:?function(string, string):!{$.Promise}, scanFile:?function(string, string):?{errors:!Array, aborted:boolean}}>}\n     */\n    function getProvidersForPath(filePath) {\n        var language            = LanguageManager.getLanguageForPath(filePath).getId(),\n            context             = PreferencesManager._buildContext(filePath, language),\n            installedProviders  = getProvidersForLanguageId(language),\n            preferredProviders,\n\n            prefPreferredProviderNames  = prefs.get(PREF_PREFER_PROVIDERS, context),\n            prefPreferredOnly           = prefs.get(PREF_PREFERRED_ONLY, context),\n\n            providers;\n\n        if (prefPreferredProviderNames && prefPreferredProviderNames.length) {\n            if (typeof prefPreferredProviderNames === \"string\") {\n                prefPreferredProviderNames = [prefPreferredProviderNames];\n            }\n            preferredProviders = prefPreferredProviderNames.reduce(function (result, key) {\n                var provider = _.find(installedProviders, {name: key});\n                if (provider) {\n                    result.push(provider);\n                }\n                return result;\n            }, []);\n            if (prefPreferredOnly) {\n                providers = preferredProviders;\n            } else {\n                providers = _.union(preferredProviders, installedProviders);\n            }\n        } else {\n            providers = installedProviders;\n        }\n        return providers;\n    }\n\n    /**\n     * Returns an array of the IDs of providers registered for a specific language\n     *\n     * @param {!string} languageId\n     * @return {Array.<string>} Names of registered providers.\n     */\n    function getProviderIDsForLanguage(languageId) {\n        if (!_providers[languageId]) {\n            return [];\n        }\n        return _providers[languageId].map(function (provider) {\n            return provider.name;\n        });\n    }\n\n    /**\n     * Runs a file inspection over passed file. Uses the given list of providers if specified, otherwise uses\n     * the set of providers that are registered for the file's language.\n     * This method doesn't update the Brackets UI, just provides inspection results.\n     * These results will reflect any unsaved changes present in the file if currently open.\n     *\n     * The Promise yields an array of provider-result pair objects (the result is the return value of the\n     * provider's scanFile() - see register() for details). The result object may be null if there were no\n     * errors from that provider.\n     * If there are no providers registered for this file, the Promise yields null instead.\n     *\n     * @param {!File} file File that will be inspected for errors.\n     * @param {?Array.<{name:string, scanFileAsync:?function(string, string):!{$.Promise}, scanFile:?function(string, string):?{errors:!Array, aborted:boolean}}>} providerList\n     * @return {$.Promise} a jQuery promise that will be resolved with ?Array.<{provider:Object, result: ?{errors:!Array, aborted:boolean}}>\n     */\n    function inspectFile(file, providerList) {\n        var response = new $.Deferred(),\n            results = [];\n\n        providerList = providerList || getProvidersForPath(file.fullPath);\n\n        if (!providerList.length) {\n            response.resolve(null);\n            return response.promise();\n        }\n\n        DocumentManager.getDocumentText(file)\n            .done(function (fileText) {\n                var perfTimerInspector = PerfUtils.markStart(\"CodeInspection:\\t\" + file.fullPath),\n                    masterPromise;\n\n                masterPromise = Async.doInParallel(providerList, function (provider) {\n                    var perfTimerProvider = PerfUtils.markStart(\"CodeInspection '\" + provider.name + \"':\\t\" + file.fullPath),\n                        runPromise = new $.Deferred();\n\n                    runPromise.done(function (scanResult) {\n                        results.push({provider: provider, result: scanResult});\n                    });\n\n                    if (provider.scanFileAsync) {\n                        window.setTimeout(function () {\n                            // timeout error\n                            var errTimeout = {\n                                pos: { line: -1, col: 0},\n                                message: StringUtils.format(Strings.LINTER_TIMED_OUT, provider.name, prefs.get(PREF_ASYNC_TIMEOUT)),\n                                type: Type.ERROR\n                            };\n                            runPromise.resolve({errors: [errTimeout]});\n                        }, prefs.get(PREF_ASYNC_TIMEOUT));\n                        jsPromise(provider.scanFileAsync(fileText, file.fullPath))\n                            .then(function (scanResult) {\n                                PerfUtils.addMeasurement(perfTimerProvider);\n                                runPromise.resolve(scanResult);\n                            })\n                            .catch(function (err) {\n                                PerfUtils.finalizeMeasurement(perfTimerProvider);\n                                var errError = {\n                                    pos: {line: -1, col: 0},\n                                    message: StringUtils.format(Strings.LINTER_FAILED, provider.name, err),\n                                    type: Type.ERROR\n                                };\n                                console.error(\"[CodeInspection] Provider \" + provider.name + \" (async) failed: \" + err.stack);\n                                runPromise.resolve({errors: [errError]});\n                            });\n                    } else {\n                        try {\n                            var scanResult = provider.scanFile(fileText, file.fullPath);\n                            PerfUtils.addMeasurement(perfTimerProvider);\n                            runPromise.resolve(scanResult);\n                        } catch (err) {\n                            PerfUtils.finalizeMeasurement(perfTimerProvider);\n                            var errError = {\n                                pos: {line: -1, col: 0},\n                                message: StringUtils.format(Strings.LINTER_FAILED, provider.name, err),\n                                type: Type.ERROR\n                            };\n                            console.error(\"[CodeInspection] Provider \" + provider.name + \" (sync) threw an error: \" + err.stack);\n                            runPromise.resolve({errors: [errError]});\n                        }\n                    }\n                    return runPromise.promise();\n\n                }, false);\n\n                masterPromise.then(function () {\n                    // sync async may have pushed results in different order, restore the original order\n                    results.sort(function (a, b) {\n                        return providerList.indexOf(a.provider) - providerList.indexOf(b.provider);\n                    });\n                    PerfUtils.addMeasurement(perfTimerInspector);\n                    response.resolve(results);\n                });\n\n            })\n            .fail(function (err) {\n                console.error(\"[CodeInspection] Could not read file for inspection: \" + file.fullPath);\n                response.reject(err);\n            });\n\n        return response.promise();\n    }\n\n    /**\n     * Update the title of the problem panel and the tooltip of the status bar icon. The title and the tooltip will\n     * change based on the number of problems reported and how many provider reported problems.\n     *\n     * @param {Number} numProblems - total number of problems across all providers\n     * @param {Array.<{name:string, scanFileAsync:?function(string, string):!{$.Promise}, scanFile:?function(string, string):Object}>} providersReportingProblems - providers that reported problems\n     * @param {boolean} aborted - true if any provider returned a result with the 'aborted' flag set\n     */\n    function updatePanelTitleAndStatusBar(numProblems, providersReportingProblems, aborted) {\n        var message, tooltip;\n\n        if (providersReportingProblems.length === 1) {\n            // don't show a header if there is only one provider available for this file type\n            $problemsPanelTable.find(\".inspector-section\").hide();\n            $problemsPanelTable.find(\"tr\").removeClass(\"forced-hidden\");\n\n            if (numProblems === 1 && !aborted) {\n                message = StringUtils.format(Strings.SINGLE_ERROR, providersReportingProblems[0].name);\n            } else {\n                if (aborted) {\n                    numProblems += \"+\";\n                }\n\n                message = StringUtils.format(Strings.MULTIPLE_ERRORS, providersReportingProblems[0].name, numProblems);\n            }\n        } else if (providersReportingProblems.length > 1) {\n            $problemsPanelTable.find(\".inspector-section\").show();\n\n            if (aborted) {\n                numProblems += \"+\";\n            }\n\n            message = StringUtils.format(Strings.ERRORS_PANEL_TITLE_MULTIPLE, numProblems);\n        } else {\n            return;\n        }\n\n        $problemsPanel.find(\".title\").text(message);\n        tooltip = StringUtils.format(Strings.STATUSBAR_CODE_INSPECTION_TOOLTIP, message);\n        StatusBar.updateIndicator(INDICATOR_ID, true, \"inspection-errors\", tooltip);\n    }\n\n    function _getCSSClass(error){\n        switch (error.type) {\n        case Type.ERROR: return CSS_TEXT_UNDERLINE_CLASS_ERROR;\n        case Type.WARNING: return CSS_TEXT_UNDERLINE_CLASS_WARN;\n        case Type.META: return CSS_TEXT_UNDERLINE_CLASS_INFO;\n        }\n    }\n\n    function _getCSSClassPriority(cssClass){\n        switch (cssClass) {\n        case CSS_TEXT_UNDERLINE_CLASS_ERROR: return 3;\n        case CSS_TEXT_UNDERLINE_CLASS_WARN: return 2;\n        case CSS_TEXT_UNDERLINE_CLASS_INFO: return 1;\n        }\n    }\n\n    function _shouldMarkTokenAtPosition(editor, error) {\n        if(isNaN(error.pos.line) || isNaN(error.pos.ch) || error.pos.line < 0 || error.pos.ch < 0){\n            console.warn(\"CodeInspector: Invalid error position: \", error);\n            return false;\n        }\n        // now we only apply a style if there is not already a higher priority style applied to it.\n        // Ie. If an error style is applied, we don't apply an info style over it as error takes precedence.\n        let markings = editor.findMarksAt(error.pos, CODE_MARK_TYPE_INSPECTOR);\n        let classToApply = _getCSSClass(error);\n        let classToApplyPriority = _getCSSClassPriority(classToApply);\n        let shouldMark = true;\n        for(let mark of markings){\n            let classPriority = _getCSSClassPriority(mark.className);\n            if(classPriority<classToApplyPriority){\n                mark.clear();\n            } else {\n                // there's something with a higher priority marking the token\n                shouldMark = false;\n            }\n        }\n        return shouldMark;\n    }\n\n    function _updateGutterMarks(editor, gutterErrorMessages) {\n        editor.clearGutter(Editor.DEBUG_INFO_GUTTER);\n        // add gutter icons\n        for(let lineno of Object.keys(gutterErrorMessages)){\n            let gutterMessage = gutterErrorMessages[lineno].reduce((prev, current)=>{\n                return {message: `${prev.message}\\n${current.message}`};\n            }, {message: ''});\n            let type = gutterErrorMessages[lineno][0].type,\n                line = gutterErrorMessages[lineno][0].line,\n                ch = gutterErrorMessages[lineno][0].ch;\n            let $marker = $('<div><span>')\n                .attr('title', gutterMessage.message)\n                .addClass(Editor.DEBUG_INFO_GUTTER);\n            $marker.click(function (){\n               editor.setCursorPos(line, ch);\n            });\n            $marker.find('span')\n                .addClass(_getIconClassForType(type))\n                .addClass(\"brackets-inspection-gutter-marker\")\n                .html('&nbsp;');\n            editor.setGutterMarker(line, Editor.DEBUG_INFO_GUTTER, $marker[0]);\n        }\n    }\n\n    /**\n     * Adds gutter icons and squiggly lines under err/warn/info to editor after lint.\n     * @param resultProviderEntries\n     * @private\n     */\n    function _updateEditorMarks(resultProviderEntries) {\n        let editor = EditorManager.getCurrentFullEditor();\n        editor.operation(function () {\n            editor.clearAllMarks(CODE_MARK_TYPE_INSPECTOR);\n            let gutterErrorMessages = {};\n            if(editor && resultProviderEntries && resultProviderEntries.length){\n                for(let resultProvider of resultProviderEntries){\n                    let errors = (resultProvider.result && resultProvider.result.errors) || [];\n                    for(let error of errors){\n                        // todo: add error.message on hover\n                        if(!_shouldMarkTokenAtPosition(editor, error)){\n                            continue;\n                        }\n                        // add squiggly lines\n                        editor.markToken(CODE_MARK_TYPE_INSPECTOR, error.pos, {\n                            className: _getCSSClass(error)\n                        });\n                        let line = error.pos.line || 0;\n                        let ch = error.pos.ch || 0;\n                        let gutterMessage = gutterErrorMessages[line] || [];\n                        gutterMessage.push({message: error.message, type: error.type, line, ch});\n                        gutterErrorMessages[line] = gutterMessage;\n                    }\n                }\n                _updateGutterMarks(editor, gutterErrorMessages);\n            }\n        });\n    }\n\n    /**\n     * Run inspector applicable to current document. Updates status bar indicator and refreshes error list in\n     * bottom panel. Does not run if inspection is disabled or if a providerName is given and does not\n     * match the current doc's provider name.\n     *\n     * @param {?string} providerName name of the provider that is requesting a run\n     */\n    function run() {\n        if (!_enabled) {\n            _hasErrors = false;\n            _currentPromise = null;\n            problemsPanel.hide();\n            StatusBar.updateIndicator(INDICATOR_ID, true, \"inspection-disabled\", Strings.LINT_DISABLED);\n            setGotoEnabled(false);\n            return;\n        }\n\n        var currentDoc = DocumentManager.getCurrentDocument(),\n            providerList = currentDoc && getProvidersForPath(currentDoc.file.fullPath);\n\n        if (providerList && providerList.length) {\n            var numProblems = 0;\n            var aborted = false;\n            var allErrors = [];\n            var html;\n            var providersReportingProblems = [];\n            $problemsPanelTable.empty();\n\n            // run all the providers registered for this file type\n            (_currentPromise = inspectFile(currentDoc.file, providerList)).then(function (results) {\n                _updateEditorMarks(results);\n                // check if promise has not changed while inspectFile was running\n                if (this !== _currentPromise) {\n                    return;\n                }\n\n                // how many errors in total?\n                var errors = results.reduce(function (a, item) { return a + (item.result ? item.result.errors.length : 0); }, 0);\n\n                _hasErrors = Boolean(errors);\n\n                if (!errors) {\n                    problemsPanel.hide();\n\n                    var message = Strings.NO_ERRORS_MULTIPLE_PROVIDER;\n                    if (providerList.length === 1) {\n                        message = StringUtils.format(Strings.NO_ERRORS, providerList[0].name);\n                    }\n\n                    StatusBar.updateIndicator(INDICATOR_ID, true, \"inspection-valid\", message);\n\n                    setGotoEnabled(false);\n                    return;\n                }\n\n                var perfTimerDOM = PerfUtils.markStart(\"ProblemsPanel render:\\t\" + currentDoc.file.fullPath);\n\n                // Augment error objects with additional fields needed by Mustache template\n                results.forEach(function (inspectionResult) {\n                    var provider = inspectionResult.provider;\n                    var isExpanded = prefs.get(provider.name + \".collapsed\") !== false;\n\n                    if (inspectionResult.result) {\n                        inspectionResult.result.errors.forEach(function (error) {\n                            // some inspectors don't always provide a line number or report a negative line number\n                            if (!isNaN(error.pos.line) &&\n                                    (error.pos.line + 1) > 0 &&\n                                    (error.codeSnippet = currentDoc.getLine(error.pos.line)) !== undefined) {\n                                error.friendlyLine = error.pos.line + 1;\n                                error.codeSnippet = error.codeSnippet.substr(0, 175);  // limit snippet width\n                            }\n\n                            if (error.type !== Type.META) {\n                                numProblems++;\n                            }\n\n                            error.iconClass = _getIconClassForType(error.type);\n\n                            // Hide the errors when the provider is collapsed.\n                            error.display = isExpanded ? \"\" : \"forced-hidden\";\n                        });\n\n                        // if the code inspector was unable to process the whole file, we keep track to show a different status\n                        if (inspectionResult.result.aborted) {\n                            aborted = true;\n                        }\n\n                        if (inspectionResult.result.errors.length) {\n                            allErrors.push({\n                                isExpanded: isExpanded,\n                                providerName: provider.name,\n                                results: inspectionResult.result.errors\n                            });\n\n                            providersReportingProblems.push(provider);\n                        }\n                    }\n                });\n\n                // Update results table\n                html = Mustache.render(ResultsTemplate, {reportList: allErrors});\n\n                $problemsPanelTable\n                    .empty()\n                    .append(html)\n                    .scrollTop(0);  // otherwise scroll pos from previous contents is remembered\n\n                if (!_collapsed) {\n                    problemsPanel.show();\n                }\n\n                updatePanelTitleAndStatusBar(numProblems, providersReportingProblems, aborted);\n                setGotoEnabled(true);\n\n                PerfUtils.addMeasurement(perfTimerDOM);\n            });\n\n        } else {\n            // No provider for current file\n            _hasErrors = false;\n            _currentPromise = null;\n            if(problemsPanel){\n                problemsPanel.hide();\n            }\n            var language = currentDoc && LanguageManager.getLanguageForPath(currentDoc.file.fullPath);\n            if (language) {\n                StatusBar.updateIndicator(INDICATOR_ID, true, \"inspection-disabled\", StringUtils.format(Strings.NO_LINT_AVAILABLE, language.getName()));\n            } else {\n                StatusBar.updateIndicator(INDICATOR_ID, true, \"inspection-disabled\", Strings.NOTHING_TO_LINT);\n            }\n            setGotoEnabled(false);\n        }\n    }\n\n    /**\n     * The provider is passed the text of the file and its fullPath. Providers should not assume\n     * that the file is open (i.e. DocumentManager.getOpenDocumentForPath() may return null) or\n     * that the file on disk matches the text given (file may have unsaved changes).\n     *\n     * Registering any provider for the \"javascript\" language automatically unregisters the built-in\n     * Brackets JSLint provider. This is a temporary convenience until UI exists for disabling\n     * registered providers.\n     *\n     * Providers implement scanFile() if results are available synchronously, or scanFileAsync() if results\n     * may require an async wait (if both are implemented, scanFile() is ignored). scanFileAsync() returns\n     * a {$.Promise} object resolved with the same type of value as scanFile() is expected to return.\n     * Rejecting the promise is treated as an internal error in the provider.\n     *\n     * @param {string} languageId\n     * @param {{name:string, scanFileAsync:?function(string, string):!{$.Promise},\n     *         scanFile:?function(string, string):?{errors:!Array, aborted:boolean}}} provider\n     *\n     * Each error is: { pos:{line,ch}, endPos:?{line,ch}, message:string, type:?Type }\n     * If type is unspecified, Type.WARNING is assumed.\n     * If no errors found, return either null or an object with a zero-length `errors` array.\n     */\n    function register(languageId, provider) {\n        if (!_providers[languageId]) {\n            _providers[languageId] = [];\n        } else {\n            // Check if provider with same name exists for the given language\n            // If yes, remove the provider before inserting the most recently loaded one\n            var indexOfProvider = _.findIndex(_providers[languageId], function(entry) { return entry.name === provider.name; });\n            if (indexOfProvider !== -1) {\n                _providers[languageId].splice(indexOfProvider, 1);\n            }\n        }\n\n        _providers[languageId].push(provider);\n\n        run();  // in case a file of this type is open currently\n    }\n\n    /**\n     * Returns a list of providers registered for given languageId through register function\n     */\n    function getProvidersForLanguageId(languageId) {\n        var result = [];\n        if (_providers[languageId]) {\n            result = result.concat(_providers[languageId]);\n        }\n        if (_providers['*']) {\n            result = result.concat(_providers['*']);\n        }\n        return result;\n    }\n\n    /**\n     * Update DocumentManager listeners.\n     */\n    function updateListeners() {\n        if (_enabled) {\n            // register our event listeners\n            MainViewManager\n                .on(\"currentFileChange.codeInspection\", function () {\n                    run();\n                });\n            DocumentManager\n                .on(\"currentDocumentLanguageChanged.codeInspection\", function () {\n                    run();\n                })\n                .on(\"documentSaved.codeInspection documentRefreshed.codeInspection\", function (event, document) {\n                    if (document === DocumentManager.getCurrentDocument()) {\n                        run();\n                    }\n                });\n        } else {\n            DocumentManager.off(\".codeInspection\");\n            MainViewManager.off(\".codeInspection\");\n        }\n    }\n\n    /**\n     * Enable or disable all inspection.\n     * @param {?boolean} enabled Enabled state. If omitted, the state is toggled.\n     * @param {?boolean} doNotSave true if the preference should not be saved to user settings. This is generally for events triggered by project-level settings.\n     */\n    function toggleEnabled(enabled, doNotSave) {\n        if (enabled === undefined) {\n            enabled = !_enabled;\n        }\n\n        // Take no action when there is no change.\n        if (enabled === _enabled) {\n            return;\n        }\n\n        _enabled = enabled;\n\n        CommandManager.get(Commands.VIEW_TOGGLE_INSPECTION).setChecked(_enabled);\n        updateListeners();\n        if (!doNotSave) {\n            prefs.set(PREF_ENABLED, _enabled);\n            prefs.save();\n        }\n\n        // run immediately\n        run();\n    }\n\n    /**\n     * Toggle the collapsed state for the panel. This explicitly collapses the panel (as opposed to\n     * the auto collapse due to files with no errors & filetypes with no provider). When explicitly\n     * collapsed, the panel will not reopen automatically on switch files or save.\n     *\n     * @param {?boolean} collapsed Collapsed state. If omitted, the state is toggled.\n     * @param {?boolean} doNotSave true if the preference should not be saved to user settings. This is generally for events triggered by project-level settings.\n     */\n    function toggleCollapsed(collapsed, doNotSave) {\n        if (collapsed === undefined) {\n            collapsed = !_collapsed;\n        }\n\n        if (collapsed === _collapsed) {\n            return;\n        }\n\n        _collapsed = collapsed;\n        if (!doNotSave) {\n            prefs.set(PREF_COLLAPSED, _collapsed);\n            prefs.save();\n        }\n\n        if (_collapsed) {\n            problemsPanel.hide();\n        } else {\n            if (_hasErrors) {\n                problemsPanel.show();\n            }\n        }\n    }\n\n    /** Command to go to the first Problem */\n    function handleGotoFirstProblem() {\n        run();\n        if (_gotoEnabled) {\n            $problemsPanel.find(\"tr:not(.inspector-section)\").first().trigger(\"click\");\n        }\n    }\n\n    // Register command handlers\n    CommandManager.register(Strings.CMD_VIEW_TOGGLE_INSPECTION, Commands.VIEW_TOGGLE_INSPECTION,        toggleEnabled);\n    CommandManager.register(Strings.CMD_GOTO_FIRST_PROBLEM,     Commands.NAVIGATE_GOTO_FIRST_PROBLEM,   handleGotoFirstProblem);\n\n    // Register preferences\n    prefs.definePreference(PREF_ENABLED, \"boolean\", brackets.config[\"linting.enabled_by_default\"], {\n        description: Strings.DESCRIPTION_LINTING_ENABLED\n    })\n        .on(\"change\", function (e, data) {\n            toggleEnabled(prefs.get(PREF_ENABLED), true);\n        });\n\n    prefs.definePreference(PREF_COLLAPSED, \"boolean\", false, {\n        description: Strings.DESCRIPTION_LINTING_COLLAPSED\n    })\n        .on(\"change\", function (e, data) {\n            toggleCollapsed(prefs.get(PREF_COLLAPSED), true);\n        });\n\n    prefs.definePreference(PREF_ASYNC_TIMEOUT, \"number\", 10000, {\n        description: Strings.DESCRIPTION_ASYNC_TIMEOUT\n    });\n\n    prefs.definePreference(PREF_PREFER_PROVIDERS, \"array\", [], {\n        description: Strings.DESCRIPTION_LINTING_PREFER,\n        valueType: \"string\"\n    });\n\n    prefs.definePreference(PREF_PREFERRED_ONLY, \"boolean\", false, {\n        description: Strings.DESCRIPTION_USE_PREFERED_ONLY\n    });\n\n    // Initialize items dependent on HTML DOM\n    AppInit.htmlReady(function () {\n        // Create bottom panel to list error details\n        var panelHtml = Mustache.render(PanelTemplate, Strings);\n        problemsPanel = WorkspaceManager.createBottomPanel(\"errors\", $(panelHtml), 100);\n        $problemsPanel = $(\"#problems-panel\");\n\n        var $selectedRow;\n        $problemsPanelTable = $problemsPanel.find(\".table-container\")\n            .on(\"click\", \"tr\", function (e) {\n                if ($selectedRow) {\n                    $selectedRow.removeClass(\"selected\");\n                }\n\n                $selectedRow  = $(e.currentTarget);\n                $selectedRow.addClass(\"selected\");\n\n                // This is a inspector title row, expand/collapse on click\n                if ($selectedRow.hasClass(\"inspector-section\")) {\n                    var $triangle = $(\".disclosure-triangle\", $selectedRow);\n                    var isExpanded = $triangle.hasClass(\"expanded\");\n\n                    // Clicking the inspector title section header collapses/expands result rows\n                    if (isExpanded) {\n                        $selectedRow.nextUntil(\".inspector-section\").addClass(\"forced-hidden\");\n                    } else {\n                        $selectedRow.nextUntil(\".inspector-section\").removeClass(\"forced-hidden\");\n                    }\n                    $triangle.toggleClass(\"expanded\");\n\n                    var providerName = $selectedRow.find(\"input[type='hidden']\").val();\n                    prefs.set(providerName + \".collapsed\", !isExpanded);\n                    prefs.save();\n                } else {\n                    // This is a problem marker row, show the result on click\n                    // Grab the required position data\n                    var lineTd    = $selectedRow.find(\".line-number\");\n                    var line      = parseInt(lineTd.text(), 10) - 1;  // convert friendlyLine back to pos.line\n                    // if there is no line number available, don't do anything\n                    if (!isNaN(line)) {\n                        var character = lineTd.data(\"character\");\n\n                        var editor = EditorManager.getCurrentFullEditor();\n                        editor.setCursorPos(line, character, true);\n                        MainViewManager.focusActivePane();\n                    }\n                }\n            });\n\n        $(\"#problems-panel .close\").click(function () {\n            toggleCollapsed(true);\n            MainViewManager.focusActivePane();\n        });\n\n        // Status bar indicator - icon & tooltip updated by run()\n        var statusIconHtml = Mustache.render(\"<div id=\\\"status-inspection\\\">&nbsp;</div>\", Strings);\n        StatusBar.addIndicator(INDICATOR_ID, $(statusIconHtml), true, \"\", \"\", \"status-indent\");\n\n        $(\"#status-inspection\").click(function () {\n            // Clicking indicator toggles error panel, if any errors in current file\n            if (_hasErrors) {\n                toggleCollapsed();\n            }\n        });\n\n        // Set initial UI state\n        toggleEnabled(prefs.get(PREF_ENABLED), true);\n        toggleCollapsed(prefs.get(PREF_COLLAPSED), true);\n    });\n\n    // Testing\n    exports._unregisterAll          = _unregisterAll;\n    exports._PREF_ASYNC_TIMEOUT     = PREF_ASYNC_TIMEOUT;\n    exports._PREF_PREFER_PROVIDERS  = PREF_PREFER_PROVIDERS;\n    exports._PREF_PREFERRED_ONLY    = PREF_PREFERRED_ONLY;\n\n    // Public API\n    exports.register                    = register;\n    exports.Type                        = Type;\n    exports.toggleEnabled               = toggleEnabled;\n    exports.inspectFile                 = inspectFile;\n    exports.requestRun                  = run;\n    exports.getProvidersForPath         = getProvidersForPath;\n    exports.getProviderIDsForLanguage   = getProviderIDsForLanguage;\n});\n"],"file":"CodeInspection.js"}