{"version":3,"sources":["editor/EditorHelper/ChangeHelper.js"],"names":["define","require","exports","module","CodeMirror","Menus","_applyChanges","changeList","self","this","_visibleRange","startLine","endLine","cm","_codeMirror","operation","change","newText","i","length","text","join","from","to","replaceRange","origin","console","error","setValue","_updateHiddenLines","trigger","_handleEditorChange","_duringSync","document","_ensureMasterEditor","_masterEditor","_handleDocumentChange","event","doc","_handleDocumentDeleted","_handleDocumentLanguageChanged","setOption","_getModeFromDocument","_installEditorListeners","_onKeyEvent","instance","type","defaultPrevented","on","changeObj","selectionObj","isFullyVisible","closeAll","_focused","newstate","files","dataTransfer","preventDefault","line","elt","charWidth","defaultCharWidth","off","countColumn","getOption","style","textIndent","paddingLeft","addHelpers","Editor","prototype"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * self program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * self program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with self program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Editor instance helpers change handling. Only to be used from Editor.js.\n */\n\ndefine(function (require, exports, module) {\n\n    const CodeMirror = require(\"thirdparty/CodeMirror/lib/codemirror\"),\n        Menus = require(\"command/Menus\");\n\n    function _applyChanges(changeList) {\n        // eslint-disable-next-line no-invalid-this\n        let self = this;\n        // _visibleRange has already updated via its own Document listener. See if self change caused\n        // it to lose sync. If so, our whole view is stale - signal our owner to close us.\n        if (self._visibleRange) {\n            if (self._visibleRange.startLine === null || self._visibleRange.endLine === null) {\n                self.trigger(\"lostContent\");\n                return;\n            }\n        }\n\n        // Apply text changes to CodeMirror editor\n        var cm = self._codeMirror;\n        cm.operation(function () {\n            var change, newText, i;\n            for (i = 0; i < changeList.length; i++) {\n                change = changeList[i];\n                newText = change.text.join('\\n');\n                if (!change.from || !change.to) {\n                    if (change.from || change.to) {\n                        console.error(\"Change record received with only one end undefined--replacing entire text\");\n                    }\n                    cm.setValue(newText);\n                } else {\n                    cm.replaceRange(newText, change.from, change.to, change.origin);\n                }\n\n            }\n        });\n\n        // The update above may have inserted new lines - must hide any that fall outside our range\n        self._updateHiddenLines();\n    }\n\n    /**\n     * Responds to changes in the CodeMirror editor's text, syncing the changes to the Document.\n     * There are several cases where we want to ignore a CodeMirror change:\n     *  - if we're the master editor, editor changes can be ignored because Document is already listening\n     *    for our changes\n     *  - if we're a secondary editor, editor changes should be ignored if they were caused by us reacting\n     *    to a Document change\n     */\n    function _handleEditorChange(changeList) {\n        // eslint-disable-next-line no-invalid-this\n        let self = this;\n        // we're currently syncing from the Document, so don't echo back TO the Document\n        if (self._duringSync) {\n            return;\n        }\n\n        // Secondary editor: force creation of \"master\" editor backing the model, if doesn't exist yet\n        self.document._ensureMasterEditor();\n\n        if (self.document._masterEditor !== self) {\n            // Secondary editor:\n            // we're not the ground truth; if we got here, self was a real editor change (not a\n            // sync from the real ground truth), so we need to sync from us into the document\n            // (which will directly push the change into the master editor).\n            // FUTURE: Technically we should add a replaceRange() method to Document and go through\n            // that instead of talking to its master editor directly. It's not clear yet exactly\n            // what the right Document API would be, though.\n            self._duringSync = true;\n            self.document._masterEditor._applyChanges(changeList);\n            self._duringSync = false;\n\n            // Update which lines are hidden inside our editor, since we're not going to go through\n            // _applyChanges() in our own editor.\n            self._updateHiddenLines();\n        }\n        // Else, Master editor:\n        // we're the ground truth; nothing else to do, since Document listens directly to us\n        // note: self change might have been a real edit made by the user, OR self might have\n        // been a change synced from another editor\n\n        // The \"editorChange\" event is mostly for the use of the CodeHintManager.\n        // It differs from the normal \"change\" event, that it's actually publicly usable,\n        // whereas the \"change\" event should be listened to on the document. Also the\n        // Editor dispatches a change event before self event is dispatched, because\n        // CodeHintManager needs to hook in here when other things are already done.\n        self.trigger(\"editorChange\", self, changeList);\n    }\n\n    /**\n     * Responds to changes in the Document's text, syncing the changes into our CodeMirror instance.\n     * There are several cases where we want to ignore a Document change:\n     *  - if we're the master editor, Document changes should be ignored because we already have the right\n     *    text (either the change originated with us, or it has already been set into us by Document)\n     *  - if we're a secondary editor, Document changes should be ignored if they were caused by us sending\n     *    the document an editor change that originated with us\n     */\n    function _handleDocumentChange(event, doc, changeList) {\n        // eslint-disable-next-line no-invalid-this\n        let self = this;\n        // we're currently syncing to the Document, so don't echo back FROM the Document\n        if (self._duringSync) {\n            return;\n        }\n\n        if (self.document._masterEditor !== self) {\n            // Secondary editor:\n            // we're not the ground truth; and if we got here, self was a Document change that\n            // didn't come from us (e.g. a sync from another editor, a direct programmatic change\n            // to the document, or a sync from external disk changes)... so sync from the Document\n            self._duringSync = true;\n            self._applyChanges(changeList);\n            self._duringSync = false;\n        }\n        // Else, Master editor:\n        // we're the ground truth; nothing to do since Document change is just echoing our\n        // editor changes\n    }\n\n    /**\n     * Responds to the Document's underlying file being deleted. The Document is now basically dead,\n     * so we must close.\n     */\n    function _handleDocumentDeleted(event) {\n        // Pass the delete event along as the cause (needed in MultiRangeInlineEditor)\n        self.trigger(\"lostContent\", event);\n    }\n\n    /**\n     * Responds to language changes, for instance when the file extension is changed.\n     */\n    function _handleDocumentLanguageChanged(event) {\n        // eslint-disable-next-line no-invalid-this\n        let self = this;\n        self._codeMirror.setOption(\"mode\", self._getModeFromDocument());\n    }\n\n\n    /**\n     * Install event handlers on the CodeMirror instance, translating them into\n     * jQuery events on the Editor instance.\n     */\n    function _installEditorListeners() {\n        // eslint-disable-next-line no-invalid-this\n        let self = this;\n\n        // Redispatch these CodeMirror key events as Editor events\n        function _onKeyEvent(instance, event) {\n            self.trigger(\"keyEvent\", self, event);  // deprecated\n            self.trigger(event.type, self, event);\n            return event.defaultPrevented;   // false tells CodeMirror we didn't eat the event\n        }\n        self._codeMirror.on(\"keydown\",  _onKeyEvent);\n        self._codeMirror.on(\"keypress\", _onKeyEvent);\n        self._codeMirror.on(\"keyup\",    _onKeyEvent);\n\n        // FUTURE: if self list grows longer, consider making self a more generic mapping\n        // NOTE: change is a \"private\" event--others shouldn't listen to it on Editor, only on\n        // Document\n        // Also, note that we use the new \"changes\" event in v4, which provides an array of\n        // change objects. Our own event is still called just \"change\".\n        self._codeMirror.on(\"changes\", function (instance, changeList) {\n            self.trigger(\"change\", self, changeList);\n        });\n        self._codeMirror.on(\"beforeChange\", function (instance, changeObj) {\n            self.trigger(\"beforeChange\", self, changeObj);\n        });\n        self._codeMirror.on(\"cursorActivity\", function (instance) {\n            self.trigger(\"cursorActivity\", self);\n        });\n        self._codeMirror.on(\"beforeSelectionChange\", function (instance, selectionObj) {\n            self.trigger(\"beforeSelectionChange\", selectionObj);\n        });\n        self._codeMirror.on(\"scroll\", function (instance) {\n            // If self editor is visible, close all dropdowns on scroll.\n            // (We don't want to do self if we're just scrolling in a non-visible editor\n            // in response to some document change event.)\n            if (self.isFullyVisible()) {\n                Menus.closeAll();\n            }\n\n            self.trigger(\"scroll\", self);\n        });\n\n        // Convert CodeMirror onFocus events to EditorManager activeEditorChanged\n        self._codeMirror.on(\"focus\", function () {\n            self._focused = true;\n            self.trigger(\"focus\", self);\n\n        });\n\n        self._codeMirror.on(\"blur\", function () {\n            self._focused = false;\n            self.trigger(\"blur\", self);\n        });\n\n        self._codeMirror.on(\"update\", function (instance) {\n            self.trigger(\"update\", self);\n        });\n        self._codeMirror.on(\"overwriteToggle\", function (instance, newstate) {\n            self.trigger(\"overwriteToggle\", self, newstate);\n        });\n\n        // Disable CodeMirror's drop handling if a file/folder is dropped\n        self._codeMirror.on(\"drop\", function (cm, event) {\n            var files = event.dataTransfer.files;\n            if (files && files.length) {\n                event.preventDefault();\n            }\n        });\n        // For word wrap. Code adapted from https://codemirror.net/demo/indentwrap.html#\n        self._codeMirror.on(\"renderLine\", function (cm, line, elt) {\n            var charWidth = self._codeMirror.defaultCharWidth();\n            var off = CodeMirror.countColumn(line.text, null, cm.getOption(\"tabSize\")) * charWidth;\n            elt.style.textIndent = \"-\" + off + \"px\";\n            elt.style.paddingLeft = off + \"px\";\n        });\n    }\n\n    /**\n     * add required helpers to editor\n     * @param Editor\n     */\n    function addHelpers(Editor) {\n        // only private Editor APIs should be assigned below. Public APIs should be updated in Editor.js only.\n        Editor.prototype._applyChanges = _applyChanges;\n        Editor.prototype._handleEditorChange = _handleEditorChange;\n        Editor.prototype._handleDocumentChange = _handleDocumentChange;\n        Editor.prototype._handleDocumentDeleted = _handleDocumentDeleted;\n        Editor.prototype._handleDocumentLanguageChanged = _handleDocumentLanguageChanged;\n        Editor.prototype._installEditorListeners = _installEditorListeners;\n    }\n\n    exports.addHelpers =addHelpers;\n});\n"],"file":"ChangeHelper.js"}