{"version":3,"sources":["editor/EditorStatusBar.js"],"names":["define","require","exports","module","_","AnimationUtils","AppInit","DropdownButton","EditorManager","MainViewManager","Editor","KeyEvent","LanguageManager","PreferencesManager","StatusBar","Strings","FileUtils","InMemoryFile","Dialogs","DefaultDialogs","ProjectManager","Async","FileSystem","CommandManager","Commands","DocumentManager","StringUtils","Metrics","SupportedEncodingsText","SupportedEncodings","JSON","parse","languageSelect","encodingSelect","$cursorInfo","$fileInfo","$indentType","$indentWidthLabel","$indentWidthInput","$statusOverwrite","LANGUAGE_SET_AS_DEFAULT","_formatCountable","number","singularStr","pluralStr","format","_updateLanguageInfo","editor","doc","lang","document","getLanguage","$button","text","getName","_updateEncodingInfo","file","_encoding","_updateFileInfo","lines","lineCount","STATUSBAR_LINE_COUNT_SINGULAR","STATUSBAR_LINE_COUNT_PLURAL","_updateIndentType","fullPath","indentWithTabs","getUseTabChar","STATUSBAR_TAB_SIZE","STATUSBAR_SPACES","attr","STATUSBAR_INDENT_TOOLTIP_SPACES","STATUSBAR_INDENT_TOOLTIP_TABS","STATUSBAR_INDENT_SIZE_TOOLTIP_TABS","STATUSBAR_INDENT_SIZE_TOOLTIP_SPACES","_getIndentSize","getTabSize","getSpaceUnits","_updateIndentSize","size","val","_toggleIndentType","current","getActiveEditor","setUseTabChar","_updateCursorInfo","event","cursor","getCursorPos","cursorStr","STATUSBAR_CURSOR_POSITION","line","ch","sels","getSelections","selStr","length","countEvent","EVENT_TYPE","EDITOR","STATUSBAR_SELECTION_MULTIPLE","hasSelection","sel","start","end","STATUSBAR_SELECTION_LINE_SINGULAR","STATUSBAR_SELECTION_LINE_PLURAL","cols","getColOffset","STATUSBAR_SELECTION_CH_SINGULAR","STATUSBAR_SELECTION_CH_PLURAL","_changeIndentWidth","value","removeClass","addClass","off","focusActivePane","valInt","parseInt","setTabSize","setSpaceUnits","_updateOverwriteLabel","newstate","doNotAnimate","STATUSBAR_OVERWRITE","STATUSBAR_INSERT","animateUsingClass","_updateEditorOverwriteMode","_codeMirror","state","overwrite","toggleOverwrite","_initOverwriteMode","currentEditor","STATUSBAR_INSOVR_TOOLTIP","_onActiveEditorChange","previous","releaseRef","showAllPanes","on","window","setTimeout","addRef","hideAllPanes","_populateLanguageDropdown","languages","values","getLanguages","filter","language","isBinary","sort","a","b","toLowerCase","localeCompare","items","unshift","_changeEncodingAndReloadDoc","promise","reload","done","readTimestamp","projectRoot","context","location","scope","layer","layerID","getProjectRoot","encoding","getViewState","setViewState","fail","error","console","log","_populateEncodingDropdown","_init","$","item","index","defaultLang","getLanguageForPath","label","html","escape","STATUSBAR_SET_DEFAULT_LANG","getCompoundFileExtension","enabled","STATUSBAR_DEFAULT_LANG","dropdownExtraClasses","append","STATUSBAR_LANG_TOOLTIP","STATUSBAR_ENCODING_TOOLTIP","focus","keyCode","DOM_VK_RETURN","blur","DOM_VK_ESCAPE","select","e","fileType","filelanguageName","_name","fileExtensionMap","get","getId","set","setLanguageOverrideForPath","originalPath","originalEncoding","isDirty","execute","FILE_SAVE_AS","getCurrentDocument","_checkFileExistance","filePath","deferred","Deferred","fileEntry","getFileForPath","exists","err","resolve","reject","doSequentially","Object","keys","always","htmlReady","appReady","show"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Manages parts of the status bar related to the current editor's state.\n */\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var _                    = require(\"thirdparty/lodash\"),\n        AnimationUtils       = require(\"utils/AnimationUtils\"),\n        AppInit              = require(\"utils/AppInit\"),\n        DropdownButton       = require(\"widgets/DropdownButton\").DropdownButton,\n        EditorManager        = require(\"editor/EditorManager\"),\n        MainViewManager      = require(\"view/MainViewManager\"),\n        Editor               = require(\"editor/Editor\").Editor,\n        KeyEvent             = require(\"utils/KeyEvent\"),\n        LanguageManager      = require(\"language/LanguageManager\"),\n        PreferencesManager   = require(\"preferences/PreferencesManager\"),\n        StatusBar            = require(\"widgets/StatusBar\"),\n        Strings              = require(\"strings\"),\n        FileUtils            = require(\"file/FileUtils\"),\n        InMemoryFile         = require(\"document/InMemoryFile\"),\n        Dialogs              = require(\"widgets/Dialogs\"),\n        DefaultDialogs       = require(\"widgets/DefaultDialogs\"),\n        ProjectManager       = require(\"project/ProjectManager\"),\n        Async                = require(\"utils/Async\"),\n        FileSystem           = require(\"filesystem/FileSystem\"),\n        CommandManager       = require(\"command/CommandManager\"),\n        Commands             = require(\"command/Commands\"),\n        DocumentManager      = require(\"document/DocumentManager\"),\n        StringUtils          = require(\"utils/StringUtils\"),\n        Metrics              = require(\"utils/Metrics\");\n\n    var SupportedEncodingsText = require(\"text!supported-encodings.json\"),\n        SupportedEncodings = JSON.parse(SupportedEncodingsText);\n\n    /* StatusBar indicators */\n    var languageSelect, // this is a DropdownButton instance\n        encodingSelect, // this is a DropdownButton instance\n        $cursorInfo,\n        $fileInfo,\n        $indentType,\n        $indentWidthLabel,\n        $indentWidthInput,\n        $statusOverwrite;\n\n    /** Special list item for the 'set as default' gesture in language switcher dropdown */\n    var LANGUAGE_SET_AS_DEFAULT = {};\n\n\n    /**\n     * Determine string based on count\n     * @param {number} number Count\n     * @param {string} singularStr Singular string\n     * @param {string} pluralStr Plural string\n     * @return {string} Proper string to use for count\n     */\n    function _formatCountable(number, singularStr, pluralStr) {\n        return StringUtils.format(number > 1 ? pluralStr : singularStr, number);\n    }\n\n    /**\n     * Update file mode\n     * @param {Editor} editor Current editor\n     */\n    function _updateLanguageInfo(editor) {\n        var doc = editor.document,\n            lang = doc.getLanguage();\n\n        // Show the current language as button title\n        languageSelect.$button.text(lang.getName());\n    }\n\n    /**\n     * Update encoding\n     * @param {Editor} editor Current editor\n     */\n    function _updateEncodingInfo(editor) {\n        var doc = editor.document;\n\n        // Show the current encoding as button title\n        if (!doc.file._encoding) {\n            doc.file._encoding = \"utf8\";\n        }\n        encodingSelect.$button.text(doc.file._encoding);\n    }\n\n    /**\n     * Update file information\n     * @param {Editor} editor Current editor\n     */\n    function _updateFileInfo(editor) {\n        var lines = editor.lineCount();\n        $fileInfo.text(_formatCountable(lines, Strings.STATUSBAR_LINE_COUNT_SINGULAR, Strings.STATUSBAR_LINE_COUNT_PLURAL));\n    }\n\n    /**\n     * Update indent type and size\n     * @param {string} fullPath Path to file in current editor\n     */\n    function _updateIndentType(fullPath) {\n        var indentWithTabs = Editor.getUseTabChar(fullPath);\n        $indentType.text(indentWithTabs ? Strings.STATUSBAR_TAB_SIZE : Strings.STATUSBAR_SPACES);\n        $indentType.attr(\"title\", indentWithTabs ? Strings.STATUSBAR_INDENT_TOOLTIP_SPACES : Strings.STATUSBAR_INDENT_TOOLTIP_TABS);\n        $indentWidthLabel.attr(\"title\", indentWithTabs ? Strings.STATUSBAR_INDENT_SIZE_TOOLTIP_TABS : Strings.STATUSBAR_INDENT_SIZE_TOOLTIP_SPACES);\n    }\n\n    /**\n     * Get indent size based on type\n     * @param {string} fullPath Path to file in current editor\n     * @return {number} Indent size\n     */\n    function _getIndentSize(fullPath) {\n        return Editor.getUseTabChar(fullPath) ? Editor.getTabSize(fullPath) : Editor.getSpaceUnits(fullPath);\n    }\n\n    /**\n     * Update indent size\n     * @param {string} fullPath Path to file in current editor\n     */\n    function _updateIndentSize(fullPath) {\n        var size = _getIndentSize(fullPath);\n        $indentWidthLabel.text(size);\n        $indentWidthInput.val(size);\n    }\n\n    /**\n     * Toggle indent type\n     */\n    function _toggleIndentType() {\n        var current = EditorManager.getActiveEditor(),\n            fullPath = current && current.document.file.fullPath;\n\n        Editor.setUseTabChar(!Editor.getUseTabChar(fullPath), fullPath);\n        _updateIndentType(fullPath);\n        _updateIndentSize(fullPath);\n    }\n\n    /**\n     * Update cursor(s)/selection(s) information\n     * @param {Event} event (unused)\n     * @param {Editor} editor Current editor\n     */\n    function _updateCursorInfo(event, editor) {\n        editor = editor || EditorManager.getActiveEditor();\n\n        // compute columns, account for tab size\n        var cursor = editor.getCursorPos(true);\n\n        var cursorStr = StringUtils.format(Strings.STATUSBAR_CURSOR_POSITION, cursor.line + 1, cursor.ch + 1);\n\n        var sels = editor.getSelections(),\n            selStr = \"\";\n\n        if (sels.length > 1) {\n            //Send analytics data for multicursor use\n            Metrics.countEvent(\n                Metrics.EVENT_TYPE.EDITOR,\n                \"multiCursor\",\n                \"usage\"\n            );\n            selStr = StringUtils.format(Strings.STATUSBAR_SELECTION_MULTIPLE, sels.length);\n        } else if (editor.hasSelection()) {\n            var sel = sels[0];\n            if (sel.start.line !== sel.end.line) {\n                var lines = sel.end.line - sel.start.line + 1;\n                if (sel.end.ch === 0) {\n                    lines--;  // end line is exclusive if ch is 0, inclusive otherwise\n                }\n                selStr = _formatCountable(lines, Strings.STATUSBAR_SELECTION_LINE_SINGULAR, Strings.STATUSBAR_SELECTION_LINE_PLURAL);\n            } else {\n                var cols = editor.getColOffset(sel.end) - editor.getColOffset(sel.start);  // end ch is exclusive always\n                selStr = _formatCountable(cols, Strings.STATUSBAR_SELECTION_CH_SINGULAR, Strings.STATUSBAR_SELECTION_CH_PLURAL);\n            }\n        }\n        $cursorInfo.text(cursorStr + selStr);\n    }\n\n    /**\n     * Change indent size\n     * @param {string} fullPath Path to file in current editor\n     * @param {string} value Size entered into status bar\n     */\n    function _changeIndentWidth(fullPath, value) {\n        $indentWidthLabel.removeClass(\"hidden\");\n        $indentWidthInput.addClass(\"hidden\");\n\n        // remove all event handlers from the input field\n        $indentWidthInput.off(\"blur keyup\");\n\n        // restore focus to the editor\n        MainViewManager.focusActivePane();\n\n        var valInt = parseInt(value, 10);\n        if (Editor.getUseTabChar(fullPath)) {\n            if (!Editor.setTabSize(valInt, fullPath)) {\n                return;     // validation failed\n            }\n        } else {\n            if (!Editor.setSpaceUnits(valInt, fullPath)) {\n                return;     // validation failed\n            }\n        }\n\n        // update indicator\n        _updateIndentSize(fullPath);\n\n        // column position may change when tab size changes\n        _updateCursorInfo();\n    }\n\n    /**\n     * Update insert/overwrite label\n     * @param {Event} event (unused)\n     * @param {Editor} editor Current editor\n     * @param {string} newstate New overwrite state\n     * @param {boolean=} doNotAnimate True if state should not be animated\n     */\n    function _updateOverwriteLabel(event, editor, newstate, doNotAnimate) {\n        if ($statusOverwrite.text() === (newstate ? Strings.STATUSBAR_OVERWRITE : Strings.STATUSBAR_INSERT)) {\n            // label already up-to-date\n            return;\n        }\n\n        $statusOverwrite.text(newstate ? Strings.STATUSBAR_OVERWRITE : Strings.STATUSBAR_INSERT);\n\n        if (!doNotAnimate) {\n            AnimationUtils.animateUsingClass($statusOverwrite[0], \"flash\", 1500);\n        }\n    }\n\n    /**\n     * Update insert/overwrite indicator\n     * @param {Event} event (unused)\n     */\n    function _updateEditorOverwriteMode(event) {\n        var editor = EditorManager.getActiveEditor(),\n            newstate = !editor._codeMirror.state.overwrite;\n\n        // update label with no transition\n        _updateOverwriteLabel(event, editor, newstate, true);\n        editor.toggleOverwrite(newstate);\n    }\n\n    /**\n     * Initialize insert/overwrite indicator\n     * @param {Editor} currentEditor Current editor\n     */\n    function _initOverwriteMode(currentEditor) {\n        currentEditor.toggleOverwrite($statusOverwrite.text() === Strings.STATUSBAR_OVERWRITE);\n        $statusOverwrite.attr(\"title\", Strings.STATUSBAR_INSOVR_TOOLTIP);\n    }\n\n    /**\n     * Handle active editor change event\n     * @param {Event} event (unused)\n     * @param {Editor} current Current editor\n     * @param {Editor} previous Previous editor\n     */\n    function _onActiveEditorChange(event, current, previous) {\n        if (previous) {\n            previous.off(\".statusbar\");\n            previous.document.off(\".statusbar\");\n            previous.document.releaseRef();\n        }\n\n        if (!current) {\n            StatusBar.hideAllPanes();\n        } else {\n            var fullPath = current.document.file.fullPath;\n            StatusBar.showAllPanes();\n\n            current.on(\"cursorActivity.statusbar\", _updateCursorInfo);\n            current.on(\"optionChange.statusbar\", function () {\n                _updateIndentType(fullPath);\n                _updateIndentSize(fullPath);\n            });\n            current.on(\"change.statusbar\", function () {\n                // async update to keep typing speed smooth\n                window.setTimeout(function () { _updateFileInfo(current); }, 0);\n            });\n            current.on(\"overwriteToggle.statusbar\", _updateOverwriteLabel);\n\n            current.document.addRef();\n            current.document.on(\"languageChanged.statusbar\", function () {\n                _updateLanguageInfo(current);\n            });\n\n            _updateCursorInfo(null, current);\n            _updateLanguageInfo(current);\n            _updateEncodingInfo(current);\n            _updateFileInfo(current);\n            _initOverwriteMode(current);\n            _updateIndentType(fullPath);\n            _updateIndentSize(fullPath);\n        }\n    }\n\n    /**\n     * Populate the languageSelect DropdownButton's menu with all registered Languages\n     */\n    function _populateLanguageDropdown() {\n        // Get all non-binary languages\n        var languages = _.values(LanguageManager.getLanguages()).filter(function (language) {\n            return !language.isBinary();\n        });\n\n        // sort dropdown alphabetically\n        languages.sort(function (a, b) {\n            return a.getName().toLowerCase().localeCompare(b.getName().toLowerCase());\n        });\n\n        languageSelect.items = languages;\n\n        // Add option to top of menu for persisting the override\n        languageSelect.items.unshift(\"---\");\n        languageSelect.items.unshift(LANGUAGE_SET_AS_DEFAULT);\n    }\n\n    /**\n     * Change the encoding and reload the current document.\n     * If passed then save the preferred encoding in state.\n     */\n    function _changeEncodingAndReloadDoc(document) {\n        var promise = document.reload();\n        promise.done(function (text, readTimestamp) {\n            encodingSelect.$button.text(document.file._encoding);\n            // Store the preferred encoding in the state\n            var projectRoot = ProjectManager.getProjectRoot(),\n                context = {\n                    location: {\n                        scope: \"user\",\n                        layer: \"project\",\n                        layerID: projectRoot.fullPath\n                    }\n                };\n            var encoding = PreferencesManager.getViewState(\"encoding\", context);\n            encoding[document.file.fullPath] = document.file._encoding;\n            PreferencesManager.setViewState(\"encoding\", encoding, context);\n        });\n        promise.fail(function (error) {\n            console.log(\"Error reloading contents of \" + document.file.fullPath, error);\n        });\n    }\n\n\n    /**\n     * Populate the encodingSelect DropdownButton's menu with all registered encodings\n     */\n    function _populateEncodingDropdown() {\n        encodingSelect.items = SupportedEncodings;\n    }\n\n    /**\n     * Initialize\n     */\n    function _init() {\n\n        $cursorInfo         = $(\"#status-cursor\");\n        $fileInfo           = $(\"#status-file\");\n        $indentType         = $(\"#indent-type\");\n        $indentWidthLabel   = $(\"#indent-width-label\");\n        $indentWidthInput   = $(\"#indent-width-input\");\n        $statusOverwrite    = $(\"#status-overwrite\");\n\n        languageSelect      = new DropdownButton(\"\", [], function (item, index) {\n            var document = EditorManager.getActiveEditor().document,\n                defaultLang = LanguageManager.getLanguageForPath(document.file.fullPath, true);\n\n            if (item === LANGUAGE_SET_AS_DEFAULT) {\n                var label = _.escape(StringUtils.format(Strings.STATUSBAR_SET_DEFAULT_LANG, LanguageManager.getCompoundFileExtension(document.file.fullPath)));\n                return { html: label, enabled: document.getLanguage() !== defaultLang };\n            }\n\n            var html = _.escape(item.getName());\n\n            // Show indicators for currently selected & default languages for the current file\n            if (item === defaultLang) {\n                html += \" <span class='default-language'>\" + Strings.STATUSBAR_DEFAULT_LANG + \"</span>\";\n            }\n            if (item === document.getLanguage()) {\n                html = \"<span class='checked-language'></span>\" + html;\n            }\n            return html;\n        });\n\n        languageSelect.dropdownExtraClasses = \"dropdown-status-bar\";\n        languageSelect.$button.addClass(\"btn-status-bar\");\n        $(\"#status-language\").append(languageSelect.$button);\n        languageSelect.$button.attr(\"title\", Strings.STATUSBAR_LANG_TOOLTIP);\n\n\n        encodingSelect = new DropdownButton(\"\", [], function (item, index) {\n            var document = EditorManager.getActiveEditor().document;\n            var html = _.escape(item);\n\n            // Show indicators for currently selected & default languages for the current file\n            if (item === \"utf8\") {\n                html += \" <span class='default-language'>\" + Strings.STATUSBAR_DEFAULT_LANG + \"</span>\";\n            }\n            if (item === document.file._encoding) {\n                html = \"<span class='checked-language'></span>\" + html;\n            }\n            return html;\n        });\n\n        encodingSelect.dropdownExtraClasses = \"dropdown-status-bar\";\n        encodingSelect.$button.addClass(\"btn-status-bar\");\n        $(\"#status-encoding\").append(encodingSelect.$button);\n        encodingSelect.$button.attr(\"title\", Strings.STATUSBAR_ENCODING_TOOLTIP);\n\n\n        // indentation event handlers\n        $indentType.on(\"click\", _toggleIndentType);\n        $indentWidthLabel\n            .on(\"click\", function () {\n                // update the input value before displaying\n                var fullPath = EditorManager.getActiveEditor().document.file.fullPath;\n                $indentWidthInput.val(_getIndentSize(fullPath));\n\n                $indentWidthLabel.addClass(\"hidden\");\n                $indentWidthInput.removeClass(\"hidden\");\n                $indentWidthInput.focus();\n\n                $indentWidthInput\n                    .on(\"blur\", function () {\n                        _changeIndentWidth(fullPath, $indentWidthInput.val());\n                    })\n                    .on(\"keyup\", function (event) {\n                        if (event.keyCode === KeyEvent.DOM_VK_RETURN) {\n                            $indentWidthInput.blur();\n                        } else if (event.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n                            _changeIndentWidth(fullPath, false);\n                        }\n                    });\n            });\n\n        $indentWidthInput.focus(function () { $indentWidthInput.select(); });\n\n        // Language select change handler\n        languageSelect.on(\"select\", function (e, lang) {\n            var document = EditorManager.getActiveEditor().document,\n                fullPath = document.file.fullPath;\n\n            var fileType = (document.file instanceof InMemoryFile) ? \"newFile\" : \"existingFile\",\n                filelanguageName = lang ? lang._name : \"\";\n\n            Metrics.countEvent(\n                Metrics.EVENT_TYPE.EDITOR,\n                \"languageChange\",\n                `${filelanguageName.toLowerCase()}-${fileType}`\n            );\n\n            if (lang === LANGUAGE_SET_AS_DEFAULT) {\n                // Set file's current language in preferences as a file extension override (only enabled if not default already)\n                var fileExtensionMap = PreferencesManager.get(\"language.fileExtensions\");\n                fileExtensionMap[LanguageManager.getCompoundFileExtension(fullPath)] = document.getLanguage().getId();\n                PreferencesManager.set(\"language.fileExtensions\", fileExtensionMap);\n\n            } else {\n                // Set selected language as a path override for just this one file (not persisted)\n                var defaultLang = LanguageManager.getLanguageForPath(fullPath, true);\n                // if default language selected, pass null to clear the override\n                LanguageManager.setLanguageOverrideForPath(fullPath, lang === defaultLang ? null : lang);\n            }\n        });\n\n        // Encoding select change handler\n        encodingSelect.on(\"select\", function (e, encoding) {\n            var document = EditorManager.getActiveEditor().document,\n                originalPath = document.file.fullPath,\n                originalEncoding = document.file._encoding;\n\n            document.file._encoding = encoding;\n            if (!(document.file instanceof InMemoryFile) && document.isDirty) {\n                CommandManager.execute(Commands.FILE_SAVE_AS, {doc: document}).done(function () {\n                    var doc = DocumentManager.getCurrentDocument();\n                    if (originalPath === doc.file.fullPath) {\n                        _changeEncodingAndReloadDoc(doc);\n                    } else {\n                        document.file._encoding = originalEncoding;\n                    }\n                }).fail(function () {\n                    document.file._encoding = originalEncoding;\n                });\n            } else if (document.file instanceof InMemoryFile) {\n                encodingSelect.$button.text(encoding);\n            } else if (!document.isDirty) {\n                _changeEncodingAndReloadDoc(document);\n            }\n        });\n\n        $statusOverwrite.on(\"click\", _updateEditorOverwriteMode);\n    }\n\n    // Initialize: status bar focused listener\n    EditorManager.on(\"activeEditorChange\", _onActiveEditorChange);\n\n    function _checkFileExistance(filePath, index, encoding) {\n        var deferred = new $.Deferred(),\n            fileEntry = FileSystem.getFileForPath(filePath);\n\n        fileEntry.exists(function (err, exists) {\n            if (!err && exists) {\n                deferred.resolve();\n            } else {\n                delete encoding[filePath];\n                deferred.reject();\n            }\n        });\n\n        return deferred.promise();\n    }\n\n    ProjectManager.on(\"projectOpen\", function () {\n        var projectRoot = ProjectManager.getProjectRoot(),\n            context = {\n                location: {\n                    scope: \"user\",\n                    layer: \"project\",\n                    layerID: projectRoot.fullPath\n                }\n            };\n        var encoding = PreferencesManager.getViewState(\"encoding\", context);\n        if (!encoding) {\n            encoding = {};\n            PreferencesManager.setViewState(\"encoding\", encoding, context);\n        }\n        Async.doSequentially(Object.keys(encoding), function (filePath, index) {\n            return _checkFileExistance(filePath, index, encoding);\n        }, false)\n            .always(function () {\n                PreferencesManager.setViewState(\"encoding\", encoding, context);\n            });\n    });\n\n    AppInit.htmlReady(_init);\n    AppInit.appReady(function () {\n        // Populate language switcher with all languages after startup; update it later if this set changes\n        _populateLanguageDropdown();\n        _populateEncodingDropdown();\n        LanguageManager.on(\"languageAdded languageModified\", _populateLanguageDropdown);\n        _onActiveEditorChange(null, EditorManager.getActiveEditor(), null);\n        StatusBar.show();\n    });\n});\n"],"file":"EditorStatusBar.js"}