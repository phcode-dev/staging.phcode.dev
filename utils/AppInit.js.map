{"version":3,"sources":["utils/AppInit.js"],"names":["define","require","exports","module","Metrics","HTML_READY","APP_READY","EXTENSIONS_LOADED","_status","_callbacks","_callHandler","handler","e","console","error","log","stack","countEvent","EVENT_TYPE","ERROR","_dispatchReady","type","i","myHandlers","length","_addListener","push","appReady","htmlReady","extensionsLoaded"],"mappings":"AAiCAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,QAAUH,QAAQ,iBAOxB,IAAII,WAAc,YAOdC,UAAc,WAOdC,kBAAoB,mBAOpBC,QAAe,CAAEH,YAAY,EAAOC,WAAW,EAAOC,mBAAmB,GAOzEE,WAAe,GAYnB,SAASC,aAAaC,SAClB,IAIIA,UACF,MAAOC,GACLC,QAAQC,MAAM,6DAA+DF,GAC7EC,QAAQE,IAAIH,EAAEI,OACdZ,QAAQa,WAAWb,QAAQc,WAAWC,MAAO,UAAW,gBAShE,SAASC,eAAeC,MACpB,IAAIC,EACAC,WAAad,WAAWY,MAK5B,IAFAb,QAAQa,OAAQ,EAEXC,EAAI,EAAGA,EAAIC,WAAWC,OAAQF,IAC/BZ,aAAaa,WAAWD,IAI5Bb,WAAWY,MAAQ,GASvB,SAASI,aAAaJ,KAAMV,SACpBH,QAAQa,MACRX,aAAaC,SAEbF,WAAWY,MAAMK,KAAKf,SAU9B,SAASgB,SAAShB,SACdc,aAAanB,UAAWK,SAQ5B,SAASiB,UAAUjB,SACfc,aAAapB,WAAYM,SAQ7B,SAASkB,iBAAiBlB,SACtBc,aAAalB,kBAAmBI,SAlFpCF,WAAWJ,YAAqB,GAChCI,WAAWH,WAAqB,GAChCG,WAAWF,mBAAqB,GAoFhCL,QAAQyB,SAAWA,SACnBzB,QAAQ0B,UAAYA,UACpB1B,QAAQ2B,iBAAmBA,iBAE3B3B,QAAQG,WAAaA,WACrBH,QAAQI,UAAYA,UACpBJ,QAAQK,kBAAoBA,kBAG5BL,QAAQkB,eAAiBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Defines hooks to assist with module initialization.\n *\n * This module defines 3 methods for client modules to attach callbacks:\n *    - htmlReady - When the main application template is rendered\n *    - extensionsLoaded - When the extension manager has loaded all extensions\n *    - appReady - When Brackets completes loading all modules and extensions\n *\n * These are *not* jQuery events. Each method is similar to $(document).ready\n * in that it will call the handler immediately if brackets is already done\n * loading.\n */\ndefine(function (require, exports, module) {\n    const Metrics = require(\"utils/Metrics\");\n\n    /*\n     * Fires when the base htmlContent/main-view.html is loaded\n     * @type {string}\n     * @const\n     */\n    var HTML_READY  = \"htmlReady\";\n\n    /*\n     * Fires when all extensions are loaded\n     * @type {string}\n     * @const\n     */\n    var APP_READY   = \"appReady\";\n\n    /*\n     * Fires after extensions have been loaded\n     * @type {string}\n     * @const\n     */\n    var EXTENSIONS_LOADED = \"extensionsLoaded\";\n\n    /*\n     * Map of each state's trigger\n     * @type {Object.<string, boolean>}\n     * @private\n     */\n    var _status      = { HTML_READY: false, APP_READY: false, EXTENSIONS_LOADED: false };\n\n    /*\n     * Map of callbacks to states\n     * @type {Object.<string, Array.<function()>>}\n     * @private\n     */\n    var _callbacks   = {};\n\n    _callbacks[HTML_READY]        = [];\n    _callbacks[APP_READY]         = [];\n    _callbacks[EXTENSIONS_LOADED] = [];\n\n\n    /*\n     * calls the specified handler inside a try/catch handler\n     * @param {function()} handler - the callback to call\n     * @private\n     */\n    function _callHandler(handler) {\n        try {\n            // TODO (issue 1034): We *could* use a $.Deferred for this, except deferred objects enter a broken\n            // state if any resolution callback throws an exception. Since third parties (e.g. extensions) may\n            // add callbacks to this, we need to be robust to exceptions\n            handler();\n        } catch (e) {\n            console.error(\"Exception when calling a 'brackets done loading' handler: \" + e);\n            console.log(e.stack);\n            Metrics.countEvent(Metrics.EVENT_TYPE.ERROR, \"appInit\", \"doneLoading\");\n        }\n    }\n\n    /*\n     * dispatches the event by calling all handlers registered for that type\n     * @param {string} type - the event type to dispatch (APP_READY, EXTENSIONS_READY, HTML_READY)\n     * @private\n     */\n    function _dispatchReady(type) {\n        var i,\n            myHandlers = _callbacks[type];\n\n        // mark this status complete\n        _status[type] = true;\n\n        for (i = 0; i < myHandlers.length; i++) {\n            _callHandler(myHandlers[i]);\n        }\n\n        // clear all callbacks after being called\n        _callbacks[type] = [];\n    }\n\n    /*\n     * adds a callback to the list of functions to call for the specified event type\n     * @param {string} type - the event type to dispatch (APP_READY, EXTENSIONS_READY, HTML_READY)\n     * @param {function} handler - callback funciton to call when the event is triggered\n     * @private\n     */\n    function _addListener(type, handler) {\n        if (_status[type]) {\n            _callHandler(handler);\n        } else {\n            _callbacks[type].push(handler);\n        }\n    }\n\n    /**\n     * Adds a callback for the ready hook. Handlers are called after\n     * htmlReady is done, the initial project is loaded, and all extensions are\n     * loaded.\n     * @param {function} handler - callback function to call when the event is fired\n     */\n    function appReady(handler) {\n        _addListener(APP_READY, handler);\n    }\n\n    /**\n     * Adds a callback for the htmlReady hook. Handlers are called after the\n     * main application html template is rendered.\n     * @param {function} handler - callback function to call when the event is fired\n     */\n    function htmlReady(handler) {\n        _addListener(HTML_READY, handler);\n    }\n\n    /**\n     * Adds a callback for the extensionsLoaded hook. Handlers are called after the\n     * extensions have been loaded\n     * @param {function} handler - callback function to call when the event is fired\n     */\n    function extensionsLoaded(handler) {\n        _addListener(EXTENSIONS_LOADED, handler);\n    }\n\n    // Public API\n    exports.appReady = appReady;\n    exports.htmlReady = htmlReady;\n    exports.extensionsLoaded = extensionsLoaded;\n\n    exports.HTML_READY = HTML_READY;\n    exports.APP_READY = APP_READY;\n    exports.EXTENSIONS_LOADED = EXTENSIONS_LOADED;\n\n    // Unit Test API\n    exports._dispatchReady = _dispatchReady;\n});\n"],"file":"AppInit.js"}