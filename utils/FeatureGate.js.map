{"version":3,"sources":["utils/FeatureGate.js"],"names":["define","require","exports","module","FEATURE_REGISTERED","ENABLED","DISABLED","EventDispatcher","_FeatureGateMap","registerFeatureGate","featureName","enabledDefault","trigger","console","warn","getAllRegisteredFeatures","Object","keys","isFeatureEnabled","userOverRide","localStorage","getItem","makeEventDispatcher"],"mappings":"AA2DAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,mBAAqB,wBACvBC,QAAU,UACVC,SAAW,WAEf,IAAIC,gBAAkBN,QAAQ,yBAE1BO,gBAAkB,GAYtB,SAASC,oBAAoBC,YAAaC,gBACT,kBAAnBA,gBAIVH,gBAAgBE,aAAeC,eAC/BT,QAAQU,QAAQR,mBAAoBM,YAAaC,iBAJ7CE,QAAQC,qBAAqBJ,+CAA+CC,kBAYpF,SAASI,2BACL,OAAOC,OAAOC,KAAKT,iBAcvB,SAASU,iBAAiBR,aACtB,IAAIS,aAAeC,aAAaC,mBAAmBX,eACnD,OAAGS,eAAiBd,SAEVc,eAAiBb,WAGa,IAAjCE,gBAAgBE,aAG3BH,gBAAgBe,oBAAoBpB,SAEpCA,QAAQO,oBAAsBA,oBAC9BP,QAAQa,yBAA2BA,yBACnCb,QAAQgB,iBAAmBA,iBAE3BhB,QAAQE,mBAAqBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global less */\n// jshint ignore: start\n\n// @INCLUDE_IN_API_DOCS\n\n/**\n * FeatureGate defines util methods for enabling or disabling features in development based on a flag in local storage.\n * A global `window.FeatureGate` object is made available in phoenix that can be called anytime after AppStart.\n *\n * ## Usage\n * For Eg. You may have an extensions in development that colors phoenix in red. But you are working on a new feature\n * that makes other colors available, but not yet ready for use. So put the extension behind a named feature gate\n * so that only people who want to test the extension will be able to use it.\n *\n * ### creating a feature gate\n * ```js\n * // within extensions\n * const FeatureGate = brackets.getModule(\"utils/FeatureGate\"); // replace with `require` for core modules.\n * const FEATURE_NEW_COLORS = 'myExtension.newColors';\n * FeatureGate.registerFeatureGate(FEATURE_NEW_COLORS, false); // false is the default value\n * ```\n *\n * ### checking if a feature is gated\n * Once the feature is registered, use the below code to check if the feature can be safely enabled. For Eg., if\n * you want to enable fancy colors based on the example above:\n *\n * ```js\n * if(FeatureGate.isFeatureEnabled(FEATURE_NEW_COLORS)){\n *    // do fancy colors here\n * }\n * ```\n * ### Enabling features for testing\n * 1. Open developer tools > local storage\n * 2. Add a new key with the key you have specified for the feature gate.\n *    In the above Eg., the key is `myExtension.newColors`\n * 3. set the value in local storage to `enabled` to enable the feature or anything else to disable.\n * @module utils/FeatureGate\n */\n\ndefine(function (require, exports, module) {\n    const FEATURE_REGISTERED = \"featureGateRegistered\",\n        ENABLED = 'enabled',\n        DISABLED = 'disabled';\n\n    let EventDispatcher = require(\"utils/EventDispatcher\");\n\n    let _FeatureGateMap = {};\n\n    /**\n     * Registers a named feature with the default enabled state.\n     * @example <caption>To register a feature gate with name `myExtension.newColors`</caption>\n     * const FEATURE_NEW_COLORS = 'myExtension.newColors';\n     * FeatureGate.registerFeatureGate(FEATURE_NEW_COLORS, false); // false is the default value here\n     *\n     * @param {string} featureName\n     * @param {boolean} enabledDefault\n     * @type {function}\n     */\n    function registerFeatureGate(featureName, enabledDefault) {\n        if(typeof enabledDefault !== \"boolean\"){\n            console.warn(`Feature gate ${featureName} ignoring invalid default value: ${enabledDefault}`);\n            return;\n        }\n        _FeatureGateMap[featureName] = enabledDefault;\n        exports.trigger(FEATURE_REGISTERED, featureName, enabledDefault);\n    }\n\n    /**\n     * Returns an array of all named registered feature gates.\n     * @return {[String]} list of registered features\n     * @type {function}\n     */\n    function getAllRegisteredFeatures() {\n        return Object.keys(_FeatureGateMap);\n    }\n\n    /**\n     * Returns true is an featureGate is enabled either by default or overridden by the user using local storage.\n     * @example <caption>To check if the feature `myExtension.newColors` is enabled</caption>\n     * const FEATURE_NEW_COLORS = 'myExtension.newColors';\n     * if(FeatureGate.isFeatureEnabled(FEATURE_NEW_COLORS)){\n     *    // do fancy colors here\n     * }\n     * @param {string} featureName\n     * @return {boolean}\n     * @type {function}\n     */\n    function isFeatureEnabled(featureName) {\n        let userOverRide = localStorage.getItem(`feature.${featureName}`);\n        if(userOverRide === ENABLED){\n            return true;\n        } else if(userOverRide === DISABLED){\n            return false;\n        }\n        return _FeatureGateMap[featureName] === true;\n    }\n\n    EventDispatcher.makeEventDispatcher(exports);\n    // Public API\n    exports.registerFeatureGate = registerFeatureGate;\n    exports.getAllRegisteredFeatures = getAllRegisteredFeatures;\n    exports.isFeatureEnabled = isFeatureEnabled;\n    // Events\n    exports.FEATURE_REGISTERED = FEATURE_REGISTERED;\n});\n"],"file":"FeatureGate.js"}