define(function(require,exports,module){const EVENT_EXTENSION_INTERFACE_REGISTERED="extensionInterfaceRegistered";let EventDispatcher=require("utils/EventDispatcher"),_extensionInterfaceMap={};function registerExtensionInterface(extensionInterfaceName,interfaceObject){_extensionInterfaceMap[extensionInterfaceName]=interfaceObject,exports.trigger(EVENT_EXTENSION_INTERFACE_REGISTERED,extensionInterfaceName,interfaceObject)}function isExistsExtensionInterface(extensionInterfaceName){return void 0!==_extensionInterfaceMap[extensionInterfaceName]}function waitAndGetExtensionInterface(extensionInterfaceName){return new Promise((resolve,reject)=>{if(isExistsExtensionInterface(extensionInterfaceName))return void resolve(_extensionInterfaceMap[extensionInterfaceName]);let resolveIfInterfaceRegistered=function(event,registeredInterfaceName,interfaceObj){registeredInterfaceName===extensionInterfaceName&&(exports.off(EVENT_EXTENSION_INTERFACE_REGISTERED,resolveIfInterfaceRegistered),resolve(interfaceObj))};exports.on(EVENT_EXTENSION_INTERFACE_REGISTERED,resolveIfInterfaceRegistered)})}EventDispatcher.makeEventDispatcher(exports),exports.registerExtensionInterface=registerExtensionInterface,exports.waitAndGetExtensionInterface=waitAndGetExtensionInterface,exports.isExistsExtensionInterface=isExistsExtensionInterface,exports.EVENT_EXTENSION_INTERFACE_REGISTERED=EVENT_EXTENSION_INTERFACE_REGISTERED});
//# sourceMappingURL=ExtensionInterface.js.map
