{"version":3,"sources":["utils/ShellAPI.js"],"names":["define","require","exports","module","AppInit","CommandManager","Commands","appReady","executeCommand","eventName","$","length","window","isBracketsTestWindow","FILE_CLOSE_WINDOW","promise","E","e","stackDepth","Error","stack","split","execute","console","error","state"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAI/B,IAAIC,QAAiBH,QAAQ,iBACzBI,eAAiBJ,QAAQ,0BACzBK,SAAiBL,QAAQ,oBAEzBM,UAAW,EAMf,SAASC,eAAeC,WAGpB,GAAIC,EAAE,mBAAmBC,SAAWJ,SAIhC,OAAIK,OAAOC,sBAKHJ,YAAcH,SAASQ,kBAInC,IAAIC,QAASC,EAAWC,EAAaC,YAAT,IAAXC,OAAmCC,MAAMC,MAAM,MAAMV,OAWtE,OAPIO,WAAa,EACbH,QAAUV,eAAeiB,QAAQb,WAEjCc,QAAQC,MAAM,oBAAsBf,UAAY,6IAEsBS,WAAa,MAE/EH,SAA+B,aAApBA,QAAQU,QAG/BrB,QAAQG,SAAS,WACbA,UAAW,IAGfL,QAAQM,eAAiBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n /**\n  * This is JavaScript API exposed to the native shell when Brackets is run in a native shell rather than a browser.\n  */\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var AppInit        = require(\"utils/AppInit\"),\n        CommandManager = require(\"command/CommandManager\"),\n        Commands       = require(\"command/Commands\");\n\n    var appReady = false; // Set to true after app is fully initialized\n\n    /**\n     * The native function BracketsShellAPI::DispatchBracketsJSCommand calls this function in order to enable\n     * calling Brackets commands from the native shell.\n     */\n    function executeCommand(eventName) {\n        // Temporary fix for #2616 - don't execute the command if a modal dialog is open.\n        // This should really be fixed with proper menu enabling.\n        if ($(\".modal.instance\").length || !appReady) {\n            // Another hack to fix issue #3219 so that all test windows are closed\n            // as before the fix for #3152 has been introduced. isBracketsTestWindow\n            // property is explicitly set in createTestWindowAndRun() in SpecRunnerUtils.js.\n            if (window.isBracketsTestWindow) {\n                return false;\n            }\n            // Return false for all commands except file.close_window command for\n            // which we have to return true (issue #3152).\n            return (eventName === Commands.FILE_CLOSE_WINDOW);\n        }\n\n        // Use E for Error so that uglify doesn't change this to simply Error()\n        var promise, E = Error, e = new E(), stackDepth = e.stack.split(\"\\n\").length;\n\n        // This function should *only* be called as a top-level function. If the current\n        // stack depth is > 2, it is most likely because we are at a breakpoint.\n        if (stackDepth < 3) {\n            promise = CommandManager.execute(eventName);\n        } else {\n            console.error(\"Skipping command \" + eventName + \" because it looks like you are \" +\n                          \"at a breakpoint. If you are NOT at a breakpoint, please \" +\n                          \"file a bug and mention this comment. Stack depth = \" + stackDepth + \".\");\n        }\n        return (promise && promise.state() === \"rejected\") ? false : true;\n    }\n\n    AppInit.appReady(function () {\n        appReady = true;\n    });\n\n    exports.executeCommand = executeCommand;\n});\n"],"file":"ShellAPI.js"}