{"version":3,"sources":["utils/ExtensionLoader.js"],"names":["define","require","exports","module","_","EventDispatcher","FileSystem","FileUtils","Async","ExtensionUtils","UrlParams","PathUtils","DefaultExtensionsList","JSON","parse","defaultExtensionsList","EXTENSION_LOAD_TIMOUT_SECONDS","INIT_EXTENSION_TIMEOUT","EVENT_EXTENSION_LOADED","EVENT_EXTENSION_DISABLED","EVENT_EXTENSION_LOAD_FAILED","_init","_extensions","_initExtensionTimeout","srcPath","getNativeBracketsDirectoryPath","contexts","pathLib","Phoenix","VFS","path","replace","globalPaths","brackets","_getGlobalRequireJSConfig","paths","Object","keys","forEach","key","makePathAbsolute","DEFAULT_EXTENSIONS_PATH_BASE","getDefaultExtensionPath","href","window","location","baseUrl","substring","lastIndexOf","_getExtensionPath","normalize","getExtensionDir","getDevExtensionPath","getDevExtensionDir","getUserExtensionPath","getUserExtensionDir","getRequireContextForExtension","name","_getInitExtensionTimeout","_setInitExtensionTimeout","value","_mergeConfigFromURL","baseConfig","deferred","$","Deferred","extensionConfigFile","get","done","extensionConfig","length","extend","omit","resolve","err","reject","fail","status","console","error","promise","_mergeConfig","startsWith","Error","loadExtensionModule","config","entryPoint","context","locale","getLocale","waitSeconds","isDefaultExtensionModule","then","mergedConfig","extensionRequire","libRequire","extensionRequireDeferred","initPromise","initExtension","withTimeout","logger","reportError","errorMessage","ERROR_TIMEOUT","errback","additionalInfo","String","requireType","originalError","target","src","log","stack","loadExtension","loadMetadata","always","metadata","theme","disabled","trigger","_testExtensionByURL","result","e","testExtension","extensionPath","entry","isFile","_loadAll","directory","processExtension","getDirectoryForPath","getContents","contents","i","extensions","isDirectory","push","doInParallel","item","extConfig","fsServerUrl","slice","loadAllDefaultExtensions","extensionEntry","leaveTrail","loadAllExtensionsInNativeDirectory","testAllExtensionsInNativeDirectory","virtualServerURL","extensionsDir","perf","spec","extensionName","loadResult","basePath","testAllDefaultExtensions","bracketsPath","srcBaseUrl","URL","init","params","create","disabledExtensionPath","extPath","makeEventDispatcher"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/**\n * ExtensionLoader searches the filesystem for extensions, then creates a new context for each one and loads it.\n * This module dispatches the following events:\n *      \"load\" - when an extension is successfully loaded. The second argument is the file path to the\n *          extension root.\n *      \"loadFailed\" - when an extension load is unsuccessful. The second argument is the file path to the\n *          extension root.\n */\n// jshint ignore: start\n/*global logger, Phoenix*/\n/*eslint-env es6*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n\ndefine(function (require, exports, module) {\n\n\n    require(\"utils/Global\");\n\n    const _              = require(\"thirdparty/lodash\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        FileSystem     = require(\"filesystem/FileSystem\"),\n        FileUtils      = require(\"file/FileUtils\"),\n        Async          = require(\"utils/Async\"),\n        ExtensionUtils = require(\"utils/ExtensionUtils\"),\n        UrlParams      = require(\"utils/UrlParams\").UrlParams,\n        PathUtils      = require(\"thirdparty/path-utils/path-utils\"),\n        DefaultExtensionsList = JSON.parse(require(\"text!extensions/default/DefaultExtensions.json\"))\n            .defaultExtensionsList;\n\n    // default async initExtension timeout\n    var EXTENSION_LOAD_TIMOUT_SECONDS = 60,\n        INIT_EXTENSION_TIMEOUT = EXTENSION_LOAD_TIMOUT_SECONDS * 1000,\n        EVENT_EXTENSION_LOADED = \"load\",\n        EVENT_EXTENSION_DISABLED = \"disabled\",\n        EVENT_EXTENSION_LOAD_FAILED = \"loadFailed\";\n\n    var _init       = false,\n        _extensions = {},\n        _initExtensionTimeout = INIT_EXTENSION_TIMEOUT,\n        srcPath     = FileUtils.getNativeBracketsDirectoryPath();\n\n    /**\n     * Stores require.js contexts of extensions\n     * @type {Object.<string, Object>}\n     */\n    var contexts    = {};\n\n    var pathLib =  Phoenix.VFS.path;\n\n    // The native directory path ends with either \"test\" or \"src\". We need \"src\" to\n    // load the text and i18n modules.\n    srcPath = srcPath.replace(/\\/test$/, \"/src\"); // convert from \"test\" to \"src\"\n\n\n    // Retrieve the global paths\n    var globalPaths = brackets._getGlobalRequireJSConfig().paths;\n\n    // Convert the relative paths to absolute\n    Object.keys(globalPaths).forEach(function (key) {\n        globalPaths[key] = PathUtils.makePathAbsolute(srcPath + \"/\" + globalPaths[key]);\n    });\n\n    /**\n     * Returns the path to the default extensions directory relative to Phoenix base URL\n     */\n    const DEFAULT_EXTENSIONS_PATH_BASE = \"/extensions/default\";\n    function getDefaultExtensionPath() {\n        const href = window.location.href;\n        const baseUrl = href.substring(0, href.lastIndexOf(\"/\")); // trim all query string params\n        return baseUrl + DEFAULT_EXTENSIONS_PATH_BASE;\n    }\n\n    /**\n     * Returns the full path to the development extensions directory.\n     */\n    function _getExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getExtensionDir());\n    }\n\n    /**\n     * Returns the full path to the development extensions directory.\n     */\n    function getDevExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getDevExtensionDir());\n    }\n\n    /**\n     * Returns the full path of the default user extensions directory. This is in the users\n     * application support directory, which is typically\n     * /Users/<user>/Application Support/Brackets/extensions/user on the mac, and\n     * C:\\Users\\<user>\\AppData\\Roaming\\Brackets\\extensions\\user on windows.\n     */\n    function getUserExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getUserExtensionDir());\n    }\n\n    /**\n     * Returns the require.js require context used to load an extension\n     *\n     * @param {!string} name, used to identify the extension\n     * @return {!Object} A require.js require object used to load the extension, or undefined if\n     * there is no require object with that name\n     */\n    function getRequireContextForExtension(name) {\n        return contexts[name];\n    }\n\n    /**\n     * @private\n     * Get timeout value for rejecting an extension's async initExtension promise.\n     * @return {number} Timeout in milliseconds\n     */\n    function _getInitExtensionTimeout() {\n        return _initExtensionTimeout;\n    }\n\n    /**\n     * @private\n     * Set timeout for rejecting an extension's async initExtension promise.\n     * @param {number} value Timeout in milliseconds\n     */\n    function _setInitExtensionTimeout(value) {\n        _initExtensionTimeout = value;\n    }\n\n    /**\n     * @private\n     * Loads optional requirejs-config.json file for an extension\n     * @param {Object} baseConfig\n     * @return {$.Promise}\n     */\n    function _mergeConfigFromURL(baseConfig) {\n        var deferred = new $.Deferred(),\n            extensionConfigFile = baseConfig.baseUrl + \"/requirejs-config.json\";\n\n        // Optional JSON config for require.js\n        $.get(extensionConfigFile).done(function (extensionConfig) {\n            if(Object.keys(extensionConfig || {}).length === 0){\n                deferred.resolve(baseConfig);\n                return;\n            }\n            try {\n                if(!extensionConfig.paths){\n                    extensionConfig.paths = {};\n                }\n                // baseConfig.paths properties will override any extension config paths\n                _.extend(extensionConfig.paths, baseConfig.paths);\n\n                // Overwrite baseUrl, context, locale (paths is already merged above)\n                _.extend(extensionConfig, _.omit(baseConfig, \"paths\"));\n\n                deferred.resolve(extensionConfig);\n            } catch (err) {\n                // Failed to parse requirejs-config.json\n                deferred.reject(\"failed to parse requirejs-config.json\");\n            }\n        }).fail(function (err) {\n            // If requirejs-config.json isn't specified or if there is a bad config, resolve with the baseConfig\n            // to try loading the extension\n            if(err.status === 200) {\n                // we received the file, but its invalid json\n                console.error(\"[Extension] The require config file provided is invalid\", extensionConfigFile);\n            }\n            deferred.resolve(baseConfig);\n        });\n\n        return deferred.promise();\n    }\n\n    /**\n     * @private\n     * Loads optional requirejs-config.json file for an extension\n     * @param {Object} baseConfig\n     * @return {$.Promise}\n     */\n    function _mergeConfig(baseConfig) {\n        if(baseConfig.baseUrl.startsWith(\"http://\") || baseConfig.baseUrl.startsWith(\"https://\")) {\n            return _mergeConfigFromURL(baseConfig);\n        }\n        throw new Error(\"Config can only be loaded from an http url, but got\" + baseConfig.baseUrl);\n    }\n\n    /**\n     * Loads the extension module that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when the extension is loaded, or rejected\n     *              if the extension fails to load or throws an exception immediately when loaded.\n     *              (Note: if extension contains a JS syntax error, promise is resolved not rejected).\n     */\n    function loadExtensionModule(name, config, entryPoint) {\n        let extensionConfig = {\n            context: name,\n            baseUrl: config.baseUrl,\n            paths: globalPaths,\n            locale: brackets.getLocale(),\n            waitSeconds: EXTENSION_LOAD_TIMOUT_SECONDS\n        };\n        const isDefaultExtensionModule =( extensionConfig.baseUrl\n            && extensionConfig.baseUrl.startsWith(`${location.href}extensions/default/`));\n        // Read optional requirejs-config.json\n        return _mergeConfig(extensionConfig).then(function (mergedConfig) {\n            // Create new RequireJS context and load extension entry point\n            var extensionRequire = brackets.libRequire.config(mergedConfig),\n                extensionRequireDeferred = new $.Deferred();\n\n            contexts[name] = extensionRequire;\n            extensionRequire([entryPoint], extensionRequireDeferred.resolve, extensionRequireDeferred.reject);\n\n            return extensionRequireDeferred.promise();\n        }).then(function (module) {\n            // Extension loaded normally\n            var initPromise;\n\n            _extensions[name] = module;\n\n            // Optional sync/async initExtension\n            if (module && module.initExtension && (typeof module.initExtension === \"function\")) {\n                // optional async extension init\n                try {\n                    initPromise = Async.withTimeout(module.initExtension(), _getInitExtensionTimeout());\n                } catch (err) {\n                    // Synchronous error while initializing extension\n                    console.error(\"[Extension] Error -- error thrown during initExtension for \" + name + \": \" + err);\n                    logger.reportError(err);\n                    return new $.Deferred().reject(err).promise();\n                }\n\n                // initExtension may be synchronous and may not return a promise\n                if (initPromise) {\n                    // WARNING: These calls to initPromise.fail() and initPromise.then(),\n                    // could also result in a runtime error if initPromise is not a valid\n                    // promise. Currently, the promise is wrapped via Async.withTimeout(),\n                    // so the call is safe as-is.\n                    initPromise.fail(function (err) {\n                        let errorMessage = \"[Extension] Error -- timeout during initExtension for \" + name;\n                        if (err === Async.ERROR_TIMEOUT) {\n                            console.error(errorMessage);\n                        } else {\n                            errorMessage = \"[Extension] Error -- failed initExtension for \" + name;\n                            console.error(errorMessage + (err ? \": \" + err : \"\"));\n                        }\n                        if(isDefaultExtensionModule){\n                            logger.reportError(err, errorMessage);\n                        }\n                    });\n\n                    return initPromise;\n                }\n            }\n        }, function errback(err) {\n            // Extension failed to load during the initial require() call\n            var additionalInfo = String(err);\n            if (err.requireType === \"scripterror\" && err.originalError) {\n                // This type has a misleading error message - replace it with something clearer (URL of require() call that got a 404 result)\n                additionalInfo = \"Module does not exist: \" + err.originalError.target.src;\n            }\n            console.error(\"[Extension] failed to load \" + config.baseUrl + \" - \" + additionalInfo);\n            if(isDefaultExtensionModule){\n                logger.reportError(err, \"[Extension] failed to load \" + config.baseUrl + \" - \" + additionalInfo);\n            }\n\n            if (err.requireType === \"define\") {\n                // This type has a useful stack (exception thrown by ext code or info on bad getModule() call)\n                console.log(err.stack);\n            }\n        });\n    }\n\n    /**\n     * Loads the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when the extension is loaded, or rejected\n     *              if the extension fails to load or throws an exception immediately when loaded.\n     *              (Note: if extension contains a JS syntax error, promise is resolved not rejected).\n     */\n    function loadExtension(name, config, entryPoint) {\n        var promise = new $.Deferred();\n\n        // Try to load the package.json to figure out if we are loading a theme.\n        ExtensionUtils.loadMetadata(config.baseUrl, name).always(promise.resolve);\n\n        return promise\n            .then(function (metadata) {\n                // No special handling for themes... Let the promise propagate into the ExtensionManager\n                if (metadata && metadata.theme) {\n                    return;\n                }\n\n                if (!metadata.disabled) {\n                    return loadExtensionModule(name, config, entryPoint);\n                }\n                return new $.Deferred().reject(\"disabled\").promise();\n\n            })\n            .then(function () {\n                exports.trigger(EVENT_EXTENSION_LOADED, config.baseUrl);\n            }, function (err) {\n                if (err === \"disabled\") {\n                    exports.trigger(EVENT_EXTENSION_DISABLED, config.baseUrl);\n                } else {\n                    exports.trigger(EVENT_EXTENSION_LOAD_FAILED, config.baseUrl);\n                }\n            });\n    }\n\n    /**\n     * Runs unit tests for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function _testExtensionByURL(name, config, entryPoint) {\n        var result = new $.Deferred();\n\n        try{\n            var extensionRequire = brackets.libRequire.config({\n                context: name,\n                baseUrl: config.baseUrl,\n                paths: $.extend({}, config.paths, globalPaths),\n                waitSeconds: EXTENSION_LOAD_TIMOUT_SECONDS\n            });\n\n            extensionRequire([entryPoint], function () {\n                console.log(\"Test extension loaded: \", name);\n                result.resolve();\n            }, function (err) {\n                // Something went wrong while loading extension\n                console.log(\"Unit tests not found for:\", name, err);\n                result.reject();\n            });\n        } catch (e) {\n            console.error(\"Test extension load failed: \", name, e);\n            result.resolve();\n        }\n\n        return result.promise();\n    }\n\n    /**\n     * Runs unit tests for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testExtension(name, config, entryPoint) {\n        var result = new $.Deferred(),\n            extensionPath = config.baseUrl + \"/\" + entryPoint + \".js\";\n        if(extensionPath.startsWith(\"http://\") || extensionPath.startsWith(\"https://\")) {\n            return _testExtensionByURL(name, config, entryPoint);\n        }\n\n        FileSystem.resolve(extensionPath, function (err, entry) {\n            if (!err && entry.isFile) {\n                // unit test file exists\n                var extensionRequire = brackets.libRequire.config({\n                    context: name,\n                    baseUrl: config.baseUrl,\n                    paths: $.extend({}, config.paths, globalPaths)\n                });\n\n                extensionRequire([entryPoint], function () {\n                    result.resolve();\n                });\n            } else {\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * @private\n     * Loads a file entryPoint from each extension folder within the baseUrl into its own Require.js context\n     *\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension folder\n     * @param {!string} entryPoint Module name to load (without .js suffix)\n     * @param {function} processExtension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function _loadAll(directory, config, entryPoint, processExtension) {\n        var result = new $.Deferred();\n\n        FileSystem.getDirectoryForPath(directory).getContents(function (err, contents) {\n            if (!err) {\n                var i,\n                    extensions = [];\n\n                for (i = 0; i < contents.length; i++) {\n                    if (contents[i].isDirectory) {\n                        // FUTURE (JRB): read package.json instead of just using the entrypoint \"main\".\n                        // Also, load sub-extensions defined in package.json.\n                        extensions.push(contents[i].name);\n                    }\n                }\n\n                if (extensions.length === 0) {\n                    result.resolve();\n                    return;\n                }\n\n                Async.doInParallel(extensions, function (item) {\n                    var extConfig = {\n                        // we load extensions in virtual file system from our virtual server URL\n                        // fsServerUrl always ends with a /\n                        baseUrl: window.fsServerUrl.slice(0, -1) + config.baseUrl + \"/\" + item,\n                        paths: config.paths\n                    };\n                    console.log(\"Loading Extension from virtual fs: \", extConfig);\n                    return processExtension(item, extConfig, entryPoint);\n                }).always(function () {\n                    // Always resolve the promise even if some extensions had errors\n                    result.resolve();\n                });\n            } else {\n                console.error(\"[Extension] Error -- could not read native directory: \" + directory);\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Loads All brackets default extensions from brackets base https URL.\n     *\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function loadAllDefaultExtensions() {\n        const extensionPath = getDefaultExtensionPath();\n        const result = new $.Deferred();\n\n        Async.doInParallel(DefaultExtensionsList, function (extensionEntry) {\n            logger.leaveTrail(\"loading default extension: \" + extensionEntry);\n            var extConfig = {\n                baseUrl: extensionPath + \"/\" + extensionEntry\n            };\n            return loadExtension(extensionEntry, extConfig, 'main');\n        }).always(function () {\n            // Always resolve the promise even if some extensions had errors\n            result.resolve();\n        });\n\n        return result.promise();\n\n    }\n\n    /**\n     * Loads the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function loadAllExtensionsInNativeDirectory(directory) {\n        return _loadAll(directory, {baseUrl: directory}, \"main\", loadExtension);\n    }\n\n    /**\n     * Runs unit test for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testAllExtensionsInNativeDirectory(directory) {\n        var result = new $.Deferred();\n        var virtualServerURL = window.fsServerUrl,\n            extensionsDir = _getExtensionPath() + \"/\" + directory,\n            config = {\n                baseUrl: virtualServerURL + extensionsDir\n            };\n\n        config.paths = {\n            \"perf\": virtualServerURL + \"/test/perf\",\n            \"spec\": virtualServerURL + \"/test/spec\"\n        };\n\n        FileSystem.getDirectoryForPath(extensionsDir).getContents(function (err, contents) {\n            if (!err) {\n                var i,\n                    extensions = [];\n\n                for (i = 0; i < contents.length; i++) {\n                    if (contents[i].isDirectory) {\n                        // FUTURE (JRB): read package.json instead of just using the entrypoint \"main\".\n                        // Also, load sub-extensions defined in package.json.\n                        extensions.push(contents[i].name);\n                    }\n                }\n\n                if (extensions.length === 0) {\n                    result.resolve();\n                    return;\n                }\n\n                Async.doInParallel(extensions, function (extensionName) {\n                    let loadResult = new $.Deferred();\n                    var extConfig = {\n                        // we load extensions in virtual file system from our virtual server URL\n                        basePath: 'extensions/default',\n                        baseUrl: config.baseUrl + \"/\" + extensionName,\n                        paths: config.paths\n                    };\n                    console.log(\"Loading Extension Test from virtual fs: \", extConfig);\n                    _testExtensionByURL(extensionName, extConfig, 'unittests').always(function () {\n                        // Always resolve the promise even if some extensions had errors\n                        console.log(\"tested\", extensionName);\n                        loadResult.resolve();\n                    });\n                    return loadResult.promise();\n                }).always(function () {\n                    // Always resolve the promise even if some extensions had errors\n                    result.resolve();\n                });\n            } else {\n                console.error(\"[Extension Load Test] Error -- could not read native directory: \" + directory);\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Runs unit test for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testAllDefaultExtensions() {\n        const bracketsPath = FileUtils.getNativeBracketsDirectoryPath();\n        const href = window.location.href;\n        const baseUrl = href.substring(0, href.lastIndexOf(\"/\"));\n        const srcBaseUrl = new URL(baseUrl + '/../src').href;\n        var result = new $.Deferred();\n\n        Async.doInParallel(DefaultExtensionsList, function (extensionEntry) {\n            const loadResult = new $.Deferred();\n            const extConfig = {\n                basePath: 'extensions/default',\n                baseUrl: new URL(srcBaseUrl + DEFAULT_EXTENSIONS_PATH_BASE + \"/\" + extensionEntry).href,\n                paths: {\n                    \"perf\": bracketsPath + \"/perf\",\n                    \"spec\": bracketsPath + \"/spec\"\n                }\n            };\n            console.log(\"Testing default extension: \", extensionEntry);\n            _testExtensionByURL(extensionEntry, extConfig, 'unittests').always(function () {\n                // Always resolve the promise even if some extensions had errors\n                console.log(\"load complete\", extensionEntry);\n                loadResult.resolve();\n            });\n            return loadResult.promise();\n        }).always(function () {\n            // Always resolve the promise even if some extensions had errors\n            result.resolve();\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Load extensions.\n     *\n     * @param {?Array.<string>} A list containing references to extension source\n     *      location. A source location may be either (a) a folder name inside\n     *      src/extensions or (b) an absolute path.\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function init(paths) {\n        var params = new UrlParams();\n\n        if (_init) {\n            // Only init once. Return a resolved promise.\n            return new $.Deferred().resolve().promise();\n        }\n\n        if (!paths) {\n            params.parse();\n\n            if (params.get(\"reloadWithoutUserExts\") !== \"true\") {\n                paths = [\n                    \"default\",\n                    getUserExtensionPath(),\n                    getDevExtensionPath()\n                ];\n            } else {\n                paths = [];\n            }\n        }\n\n        // Load extensions before restoring the project\n\n        // Get a Directory for the user extension directory and create it if it doesn't exist.\n        // Note that this is an async call and there are no success or failure functions passed\n        // in. If the directory *doesn't* exist, it will be created. Extension loading may happen\n        // before the directory is finished being created, but that is okay, since the extension\n        // loading will work correctly without this directory.\n        // If the directory *does* exist, nothing else needs to be done. It will be scanned normally\n        // during extension loading.\n        var extensionPath = getUserExtensionPath();\n        FileSystem.getDirectoryForPath(extensionPath).create();\n        FileSystem.getDirectoryForPath(getDevExtensionPath()).create();\n\n        // Create the extensions/disabled directory, too.\n        var disabledExtensionPath = extensionPath.replace(/\\/user$/, \"/disabled\");\n        FileSystem.getDirectoryForPath(disabledExtensionPath).create();\n\n        var promise = Async.doInParallel(paths, function (extPath) {\n            if(extPath === \"default\"){\n                return loadAllDefaultExtensions();\n            } else {\n                return loadAllExtensionsInNativeDirectory(extPath);\n            }\n        }, false);\n\n        promise.always(function () {\n            _init = true;\n        });\n\n        return promise;\n    }\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // unit tests\n    exports._setInitExtensionTimeout = _setInitExtensionTimeout;\n    exports._getInitExtensionTimeout = _getInitExtensionTimeout;\n\n    // public API\n    exports.init = init;\n    exports.getDefaultExtensionPath = getDefaultExtensionPath;\n    exports.getUserExtensionPath = getUserExtensionPath;\n    exports.getRequireContextForExtension = getRequireContextForExtension;\n    exports.loadExtension = loadExtension;\n    exports.testExtension = testExtension;\n    exports.loadAllExtensionsInNativeDirectory = loadAllExtensionsInNativeDirectory;\n    exports.testAllExtensionsInNativeDirectory = testAllExtensionsInNativeDirectory;\n    exports.testAllDefaultExtensions = testAllDefaultExtensions;\n    exports.EVENT_EXTENSION_LOADED = EVENT_EXTENSION_LOADED;\n    exports.EVENT_EXTENSION_DISABLED = EVENT_EXTENSION_DISABLED;\n    exports.EVENT_EXTENSION_LOAD_FAILED = EVENT_EXTENSION_LOAD_FAILED;\n});\n"],"file":"ExtensionLoader.js"}