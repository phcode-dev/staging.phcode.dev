{"version":3,"sources":["utils/ExtensionLoader.js"],"names":["define","require","exports","module","_","EventDispatcher","FileSystem","FileUtils","Async","ExtensionUtils","UrlParams","PathUtils","DefaultExtensionsList","JSON","parse","defaultExtensionsList","EXTENSION_LOAD_TIMOUT_SECONDS","INIT_EXTENSION_TIMEOUT","EVENT_EXTENSION_LOADED","EVENT_EXTENSION_DISABLED","EVENT_EXTENSION_LOAD_FAILED","_init","_extensions","_initExtensionTimeout","srcPath","getNativeBracketsDirectoryPath","contexts","pathLib","Phoenix","VFS","path","replace","globalPaths","brackets","_getGlobalRequireJSConfig","paths","Object","keys","forEach","key","makePathAbsolute","DEFAULT_EXTENSIONS_PATH_BASE","getDefaultExtensionPath","window","PhoenixBaseURL","_getExtensionPath","normalize","getExtensionDir","getDevExtensionPath","getDevExtensionDir","getUserExtensionPath","getUserExtensionDir","getRequireContextForExtension","name","_getInitExtensionTimeout","_setInitExtensionTimeout","value","_mergeConfigFromURL","baseConfig","deferred","$","Deferred","extensionConfigFile","baseUrl","getJSON","done","extensionConfig","length","extend","omit","resolve","err","reject","fail","status","console","error","promise","_mergeConfig","startsWith","Error","loadExtensionModule","config","entryPoint","context","locale","getLocale","waitSeconds","isDefaultExtensionModule","then","mergedConfig","extensionRequire","libRequire","extensionRequireDeferred","initPromise","initExtension","withTimeout","logger","reportError","errorMessage","ERROR_TIMEOUT","errback","additionalInfo","String","requireType","originalError","target","src","log","stack","loadExtension","loadMetadata","always","metadata","theme","disabled","trigger","_testExtensionByURL","result","e","testExtension","extensionPath","entry","isFile","_loadAll","directory","processExtension","getDirectoryForPath","getContents","contents","i","extensions","isDirectory","push","doInParallel","item","extConfig","fsServerUrl","slice","loadAllDefaultExtensions","extensionEntry","leaveTrail","loadAllExtensionsInNativeDirectory","loadExtensionFromNativeDirectory","testAllExtensionsInNativeDirectory","virtualServerURL","extensionsDir","perf","spec","extensionName","loadResult","basePath","testAllDefaultExtensions","bracketsPath","srcBaseUrl","URL","href","endsWith","init","params","get","customLoadPaths","split","customPath","create","disabledExtensionPath","extPath","makeEventDispatcher"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/**\n * ExtensionLoader searches the filesystem for extensions, then creates a new context for each one and loads it.\n * This module dispatches the following events:\n *      \"load\" - when an extension is successfully loaded. The second argument is the file path to the\n *          extension root.\n *      \"loadFailed\" - when an extension load is unsuccessful. The second argument is the file path to the\n *          extension root.\n */\n// jshint ignore: start\n/*global logger, Phoenix*/\n/*eslint-env es6*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n\ndefine(function (require, exports, module) {\n\n\n    require(\"utils/Global\");\n\n    const _              = require(\"thirdparty/lodash\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        FileSystem     = require(\"filesystem/FileSystem\"),\n        FileUtils      = require(\"file/FileUtils\"),\n        Async          = require(\"utils/Async\"),\n        ExtensionUtils = require(\"utils/ExtensionUtils\"),\n        UrlParams      = require(\"utils/UrlParams\").UrlParams,\n        PathUtils      = require(\"thirdparty/path-utils/path-utils\"),\n        DefaultExtensionsList = JSON.parse(require(\"text!extensions/default/DefaultExtensions.json\"))\n            .defaultExtensionsList;\n\n    // default async initExtension timeout\n    var EXTENSION_LOAD_TIMOUT_SECONDS = 60,\n        INIT_EXTENSION_TIMEOUT = EXTENSION_LOAD_TIMOUT_SECONDS * 1000,\n        EVENT_EXTENSION_LOADED = \"load\",\n        EVENT_EXTENSION_DISABLED = \"disabled\",\n        EVENT_EXTENSION_LOAD_FAILED = \"loadFailed\";\n\n    var _init       = false,\n        _extensions = {},\n        _initExtensionTimeout = INIT_EXTENSION_TIMEOUT,\n        srcPath     = FileUtils.getNativeBracketsDirectoryPath();\n\n    /**\n     * Stores require.js contexts of extensions\n     * @type {Object.<string, Object>}\n     */\n    var contexts    = {};\n\n    var pathLib =  Phoenix.VFS.path;\n\n    // The native directory path ends with either \"test\" or \"src\". We need \"src\" to\n    // load the text and i18n modules.\n    srcPath = srcPath.replace(/\\/test$/, \"/src\"); // convert from \"test\" to \"src\"\n\n\n    // Retrieve the global paths\n    var globalPaths = brackets._getGlobalRequireJSConfig().paths;\n\n    // Convert the relative paths to absolute\n    Object.keys(globalPaths).forEach(function (key) {\n        globalPaths[key] = PathUtils.makePathAbsolute(srcPath + \"/\" + globalPaths[key]);\n    });\n\n    /**\n     * Returns the path to the default extensions directory relative to Phoenix base URL\n     */\n    const DEFAULT_EXTENSIONS_PATH_BASE = \"extensions/default\";\n    function getDefaultExtensionPath() {\n        return window.PhoenixBaseURL + DEFAULT_EXTENSIONS_PATH_BASE;\n    }\n\n    /**\n     * Returns the full path to the development extensions directory.\n     */\n    function _getExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getExtensionDir());\n    }\n\n    /**\n     * Returns the full path to the development extensions directory.\n     */\n    function getDevExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getDevExtensionDir());\n    }\n\n    /**\n     * Returns the full path of the default user extensions directory. This is in the users\n     * application support directory, which is typically\n     * /Users/<user>/Application Support/Brackets/extensions/user on the mac, and\n     * C:\\Users\\<user>\\AppData\\Roaming\\Brackets\\extensions\\user on windows.\n     */\n    function getUserExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getUserExtensionDir());\n    }\n\n    /**\n     * Returns the require.js require context used to load an extension\n     *\n     * @param {!string} name, used to identify the extension\n     * @return {!Object} A require.js require object used to load the extension, or undefined if\n     * there is no require object with that name\n     */\n    function getRequireContextForExtension(name) {\n        return contexts[name];\n    }\n\n    /**\n     * @private\n     * Get timeout value for rejecting an extension's async initExtension promise.\n     * @return {number} Timeout in milliseconds\n     */\n    function _getInitExtensionTimeout() {\n        return _initExtensionTimeout;\n    }\n\n    /**\n     * @private\n     * Set timeout for rejecting an extension's async initExtension promise.\n     * @param {number} value Timeout in milliseconds\n     */\n    function _setInitExtensionTimeout(value) {\n        _initExtensionTimeout = value;\n    }\n\n    /**\n     * @private\n     * Loads optional requirejs-config.json file for an extension\n     * @param {Object} baseConfig\n     * @return {$.Promise}\n     */\n    function _mergeConfigFromURL(baseConfig) {\n        var deferred = new $.Deferred(),\n            extensionConfigFile = baseConfig.baseUrl + \"/requirejs-config.json\";\n\n        // Optional JSON config for require.js\n        $.getJSON(extensionConfigFile).done(function (extensionConfig) {\n            if(Object.keys(extensionConfig || {}).length === 0){\n                deferred.resolve(baseConfig);\n                return;\n            }\n            try {\n                if(!extensionConfig.paths){\n                    extensionConfig.paths = {};\n                }\n                // baseConfig.paths properties will override any extension config paths\n                _.extend(extensionConfig.paths, baseConfig.paths);\n\n                // Overwrite baseUrl, context, locale (paths is already merged above)\n                _.extend(extensionConfig, _.omit(baseConfig, \"paths\"));\n\n                deferred.resolve(extensionConfig);\n            } catch (err) {\n                // Failed to parse requirejs-config.json\n                deferred.reject(\"failed to parse requirejs-config.json\");\n            }\n        }).fail(function (err) {\n            // If requirejs-config.json isn't specified or if there is a bad config, resolve with the baseConfig\n            // to try loading the extension\n            if(err.status === 200) {\n                // we received the file, but its invalid json\n                console.error(\"[Extension] The require config file provided is invalid\", extensionConfigFile);\n            }\n            deferred.resolve(baseConfig);\n        });\n\n        return deferred.promise();\n    }\n\n    /**\n     * @private\n     * Loads optional requirejs-config.json file for an extension\n     * @param {Object} baseConfig\n     * @return {$.Promise}\n     */\n    function _mergeConfig(baseConfig) {\n        if(baseConfig.baseUrl.startsWith(\"http://\") || baseConfig.baseUrl.startsWith(\"https://\")\n            || baseConfig.baseUrl.startsWith(\"tauri://\") || baseConfig.baseUrl.startsWith(\"asset://\")) {\n            return _mergeConfigFromURL(baseConfig);\n        }\n        throw new Error(\"Config can only be loaded from an http url, but got\" + baseConfig.baseUrl);\n    }\n\n    /**\n     * Loads the extension module that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when the extension is loaded, or rejected\n     *              if the extension fails to load or throws an exception immediately when loaded.\n     *              (Note: if extension contains a JS syntax error, promise is resolved not rejected).\n     */\n    function loadExtensionModule(name, config, entryPoint) {\n        let extensionConfig = {\n            context: name,\n            baseUrl: config.baseUrl,\n            paths: globalPaths,\n            locale: brackets.getLocale(),\n            waitSeconds: EXTENSION_LOAD_TIMOUT_SECONDS\n        };\n        const isDefaultExtensionModule =( extensionConfig.baseUrl\n            && extensionConfig.baseUrl.startsWith(`${window.PhoenixBaseURL}extensions/default/`));\n        // Read optional requirejs-config.json\n        return _mergeConfig(extensionConfig).then(function (mergedConfig) {\n            // Create new RequireJS context and load extension entry point\n            var extensionRequire = brackets.libRequire.config(mergedConfig),\n                extensionRequireDeferred = new $.Deferred();\n\n            contexts[name] = extensionRequire;\n            extensionRequire([entryPoint], extensionRequireDeferred.resolve, extensionRequireDeferred.reject);\n\n            return extensionRequireDeferred.promise();\n        }).then(function (module) {\n            // Extension loaded normally\n            var initPromise;\n\n            _extensions[name] = module;\n\n            // Optional sync/async initExtension\n            if (module && module.initExtension && (typeof module.initExtension === \"function\")) {\n                // optional async extension init\n                try {\n                    initPromise = Async.withTimeout(module.initExtension(), _getInitExtensionTimeout());\n                } catch (err) {\n                    // Synchronous error while initializing extension\n                    console.error(\"[Extension] Error -- error thrown during initExtension for \" + name + \": \" + err);\n                    logger.reportError(err);\n                    return new $.Deferred().reject(err).promise();\n                }\n\n                // initExtension may be synchronous and may not return a promise\n                if (initPromise) {\n                    // WARNING: These calls to initPromise.fail() and initPromise.then(),\n                    // could also result in a runtime error if initPromise is not a valid\n                    // promise. Currently, the promise is wrapped via Async.withTimeout(),\n                    // so the call is safe as-is.\n                    initPromise.fail(function (err) {\n                        let errorMessage = \"[Extension] Error -- timeout during initExtension for \" + name;\n                        if (err === Async.ERROR_TIMEOUT) {\n                            console.error(errorMessage);\n                        } else {\n                            errorMessage = \"[Extension] Error -- failed initExtension for \" + name;\n                            console.error(errorMessage + (err ? \": \" + err : \"\"));\n                        }\n                        if(isDefaultExtensionModule){\n                            logger.reportError(err, errorMessage);\n                        }\n                    });\n\n                    return initPromise;\n                }\n            }\n        }, function errback(err) {\n            // Extension failed to load during the initial require() call\n            var additionalInfo = String(err);\n            if (err.requireType === \"scripterror\" && err.originalError) {\n                // This type has a misleading error message - replace it with something clearer (URL of require() call that got a 404 result)\n                additionalInfo = \"Module does not exist: \" + err.originalError.target.src;\n            }\n            console.error(\"[Extension] failed to load \" + config.baseUrl + \" - \" + additionalInfo);\n            if(isDefaultExtensionModule){\n                logger.reportError(err, \"[Extension] failed to load \" + config.baseUrl + \" - \" + additionalInfo);\n            }\n\n            if (err.requireType === \"define\") {\n                // This type has a useful stack (exception thrown by ext code or info on bad getModule() call)\n                console.log(err.stack);\n            }\n        });\n    }\n\n    /**\n     * Loads the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when the extension is loaded, or rejected\n     *              if the extension fails to load or throws an exception immediately when loaded.\n     *              (Note: if extension contains a JS syntax error, promise is resolved not rejected).\n     */\n    function loadExtension(name, config, entryPoint) {\n        var promise = new $.Deferred();\n\n        // Try to load the package.json to figure out if we are loading a theme.\n        ExtensionUtils.loadMetadata(config.baseUrl, name).always(promise.resolve);\n\n        return promise\n            .then(function (metadata) {\n                // No special handling for themes... Let the promise propagate into the ExtensionManager\n                if (metadata && metadata.theme) {\n                    return;\n                }\n\n                if (!metadata.disabled) {\n                    return loadExtensionModule(name, config, entryPoint);\n                }\n                return new $.Deferred().reject(\"disabled\").promise();\n\n            })\n            .then(function () {\n                exports.trigger(EVENT_EXTENSION_LOADED, config.baseUrl);\n            }, function (err) {\n                if (err === \"disabled\") {\n                    exports.trigger(EVENT_EXTENSION_DISABLED, config.baseUrl);\n                } else {\n                    exports.trigger(EVENT_EXTENSION_LOAD_FAILED, config.baseUrl);\n                }\n            });\n    }\n\n    /**\n     * Runs unit tests for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function _testExtensionByURL(name, config, entryPoint) {\n        var result = new $.Deferred();\n\n        try{\n            var extensionRequire = brackets.libRequire.config({\n                context: name,\n                baseUrl: config.baseUrl,\n                paths: $.extend({}, config.paths, globalPaths),\n                waitSeconds: EXTENSION_LOAD_TIMOUT_SECONDS\n            });\n\n            extensionRequire([entryPoint], function () {\n                console.log(\"Test extension loaded: \", name);\n                result.resolve();\n            }, function (err) {\n                // Something went wrong while loading extension\n                console.log(\"Unit tests not found for:\", name, err);\n                result.reject();\n            });\n        } catch (e) {\n            console.error(\"Test extension load failed: \", name, e);\n            result.resolve();\n        }\n\n        return result.promise();\n    }\n\n    /**\n     * Runs unit tests for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testExtension(name, config, entryPoint) {\n        var result = new $.Deferred(),\n            extensionPath = config.baseUrl + \"/\" + entryPoint + \".js\";\n        if(extensionPath.startsWith(\"http://\") || extensionPath.startsWith(\"https://\")) {\n            return _testExtensionByURL(name, config, entryPoint);\n        }\n\n        FileSystem.resolve(extensionPath, function (err, entry) {\n            if (!err && entry.isFile) {\n                // unit test file exists\n                var extensionRequire = brackets.libRequire.config({\n                    context: name,\n                    baseUrl: config.baseUrl,\n                    paths: $.extend({}, config.paths, globalPaths)\n                });\n\n                extensionRequire([entryPoint], function () {\n                    result.resolve();\n                });\n            } else {\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * @private\n     * Loads a file entryPoint from each extension folder within the baseUrl into its own Require.js context\n     *\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension folder\n     * @param {!string} entryPoint Module name to load (without .js suffix)\n     * @param {function} processExtension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function _loadAll(directory, config, entryPoint, processExtension) {\n        var result = new $.Deferred();\n\n        FileSystem.getDirectoryForPath(directory).getContents(function (err, contents) {\n            if (!err) {\n                var i,\n                    extensions = [];\n\n                for (i = 0; i < contents.length; i++) {\n                    if (contents[i].isDirectory) {\n                        // FUTURE (JRB): read package.json instead of just using the entrypoint \"main\".\n                        // Also, load sub-extensions defined in package.json.\n                        extensions.push(contents[i].name);\n                    }\n                }\n\n                if (extensions.length === 0) {\n                    result.resolve();\n                    return;\n                }\n\n                Async.doInParallel(extensions, function (item) {\n                    var extConfig = {\n                        // we load extensions in virtual file system from our virtual server URL\n                        // fsServerUrl always ends with a /\n                        baseUrl: window.fsServerUrl.slice(0, -1) + config.baseUrl + \"/\" + item,\n                        paths: config.paths\n                    };\n                    console.log(\"Loading Extension from virtual fs: \", extConfig);\n                    return processExtension(item, extConfig, entryPoint);\n                }).always(function () {\n                    // Always resolve the promise even if some extensions had errors\n                    result.resolve();\n                });\n            } else {\n                console.error(\"[Extension] Error -- could not read native directory: \" + directory);\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Loads All brackets default extensions from brackets base https URL.\n     *\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function loadAllDefaultExtensions() {\n        const extensionPath = getDefaultExtensionPath();\n        const result = new $.Deferred();\n\n        Async.doInParallel(DefaultExtensionsList, function (extensionEntry) {\n            logger.leaveTrail(\"loading default extension: \" + extensionEntry);\n            var extConfig = {\n                baseUrl: extensionPath + \"/\" + extensionEntry\n            };\n            return loadExtension(extensionEntry, extConfig, 'main');\n        }).always(function () {\n            // Always resolve the promise even if some extensions had errors\n            result.resolve();\n        });\n\n        return result.promise();\n\n    }\n\n    /**\n     * Loads the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function loadAllExtensionsInNativeDirectory(directory) {\n        return _loadAll(directory, {baseUrl: directory}, \"main\", loadExtension);\n    }\n\n    /**\n     * Loads a given extension at the path from virtual fs.\n     * @param directory\n     * @return {!Promise}\n     */\n    function loadExtensionFromNativeDirectory(directory) {\n        logger.leaveTrail(\"loading custom extension from path: \" + directory);\n        const extConfig = {\n            baseUrl: window.fsServerUrl.slice(0, -1) + directory.replace(/\\/$/, \"\")\n        };\n        return loadExtension(\"ext\" + directory.replace(\"/\", \"-\"), // /fs/user/extpath to ext-fs-user-extpath\n            extConfig, 'main');\n    }\n\n    /**\n     * Runs unit test for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testAllExtensionsInNativeDirectory(directory) {\n        var result = new $.Deferred();\n        var virtualServerURL = window.fsServerUrl,\n            extensionsDir = _getExtensionPath() + \"/\" + directory,\n            config = {\n                baseUrl: virtualServerURL + extensionsDir\n            };\n\n        config.paths = {\n            \"perf\": virtualServerURL + \"/test/perf\",\n            \"spec\": virtualServerURL + \"/test/spec\"\n        };\n\n        FileSystem.getDirectoryForPath(extensionsDir).getContents(function (err, contents) {\n            if (!err) {\n                var i,\n                    extensions = [];\n\n                for (i = 0; i < contents.length; i++) {\n                    if (contents[i].isDirectory) {\n                        // FUTURE (JRB): read package.json instead of just using the entrypoint \"main\".\n                        // Also, load sub-extensions defined in package.json.\n                        extensions.push(contents[i].name);\n                    }\n                }\n\n                if (extensions.length === 0) {\n                    result.resolve();\n                    return;\n                }\n\n                Async.doInParallel(extensions, function (extensionName) {\n                    let loadResult = new $.Deferred();\n                    var extConfig = {\n                        // we load extensions in virtual file system from our virtual server URL\n                        basePath: 'extensions/default',\n                        baseUrl: config.baseUrl + \"/\" + extensionName,\n                        paths: config.paths\n                    };\n                    console.log(\"Loading Extension Test from virtual fs: \", extConfig);\n                    _testExtensionByURL(extensionName, extConfig, 'unittests').always(function () {\n                        // Always resolve the promise even if some extensions had errors\n                        console.log(\"tested\", extensionName);\n                        loadResult.resolve();\n                    });\n                    return loadResult.promise();\n                }).always(function () {\n                    // Always resolve the promise even if some extensions had errors\n                    result.resolve();\n                });\n            } else {\n                console.error(\"[Extension Load Test] Error -- could not read native directory: \" + directory);\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Runs unit test for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testAllDefaultExtensions() {\n        const bracketsPath = FileUtils.getNativeBracketsDirectoryPath();\n        const baseUrl = window.PhoenixBaseURL;\n        let srcBaseUrl = new URL(baseUrl + '../src').href;\n        let result = new $.Deferred();\n        if(!srcBaseUrl.endsWith(\"/\")) {\n            srcBaseUrl = srcBaseUrl + \"/\";\n        }\n\n        Async.doInParallel(DefaultExtensionsList, function (extensionEntry) {\n            const loadResult = new $.Deferred();\n            const extConfig = {\n                basePath: 'extensions/default',\n                baseUrl: new URL(srcBaseUrl + DEFAULT_EXTENSIONS_PATH_BASE + \"/\" + extensionEntry).href,\n                paths: {\n                    \"perf\": bracketsPath + \"/perf\",\n                    \"spec\": bracketsPath + \"/spec\"\n                }\n            };\n            console.log(\"Testing default extension: \", extensionEntry);\n            _testExtensionByURL(extensionEntry, extConfig, 'unittests').always(function () {\n                // Always resolve the promise even if some extensions had errors\n                console.log(\"load complete\", extensionEntry);\n                loadResult.resolve();\n            });\n            return loadResult.promise();\n        }).always(function () {\n            // Always resolve the promise even if some extensions had errors\n            result.resolve();\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Load extensions.\n     *\n     * @param {?Array.<string>} A list containing references to extension source\n     *      location. A source location may be either (a) a folder name inside\n     *      src/extensions or (b) an absolute path.\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function init(paths) {\n        var params = new UrlParams();\n\n        if (_init) {\n            // Only init once. Return a resolved promise.\n            return new $.Deferred().resolve().promise();\n        }\n\n        if (!paths) {\n            params.parse();\n\n            if (params.get(\"reloadWithoutUserExts\") !== \"true\") {\n                paths = [\n                    \"default\",\n                    getUserExtensionPath(),\n                    getDevExtensionPath()\n                ];\n            } else {\n                paths = [];\n            }\n            if(params.get(\"loadDevExtensionPath\")){\n                let customLoadPaths = params.get(\"loadDevExtensionPath\").split(\",\");\n                for(let customPath of customLoadPaths){\n                    paths.push(\"custom:\" + customPath);\n                }\n            }\n        }\n\n        // Load extensions before restoring the project\n\n        // Get a Directory for the user extension directory and create it if it doesn't exist.\n        // Note that this is an async call and there are no success or failure functions passed\n        // in. If the directory *doesn't* exist, it will be created. Extension loading may happen\n        // before the directory is finished being created, but that is okay, since the extension\n        // loading will work correctly without this directory.\n        // If the directory *does* exist, nothing else needs to be done. It will be scanned normally\n        // during extension loading.\n        var extensionPath = getUserExtensionPath();\n        FileSystem.getDirectoryForPath(extensionPath).create();\n        FileSystem.getDirectoryForPath(getDevExtensionPath()).create();\n\n        // Create the extensions/disabled directory, too.\n        var disabledExtensionPath = extensionPath.replace(/\\/user$/, \"/disabled\");\n        FileSystem.getDirectoryForPath(disabledExtensionPath).create();\n\n        var promise = Async.doInParallel(paths, function (extPath) {\n            if(extPath === \"default\"){\n                return loadAllDefaultExtensions();\n            } else if(extPath.startsWith(\"custom:\")){\n                return loadExtensionFromNativeDirectory(extPath.replace(\"custom:\", \"\"));\n            } else {\n                return loadAllExtensionsInNativeDirectory(extPath);\n            }\n        }, false);\n\n        promise.always(function () {\n            _init = true;\n        });\n\n        return promise;\n    }\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // unit tests\n    exports._setInitExtensionTimeout = _setInitExtensionTimeout;\n    exports._getInitExtensionTimeout = _getInitExtensionTimeout;\n\n    // public API\n    exports.init = init;\n    exports.getDefaultExtensionPath = getDefaultExtensionPath;\n    exports.getUserExtensionPath = getUserExtensionPath;\n    exports.getRequireContextForExtension = getRequireContextForExtension;\n    exports.loadExtension = loadExtension;\n    exports.testExtension = testExtension;\n    exports.loadAllExtensionsInNativeDirectory = loadAllExtensionsInNativeDirectory;\n    exports.loadExtensionFromNativeDirectory = loadExtensionFromNativeDirectory;\n    exports.testAllExtensionsInNativeDirectory = testAllExtensionsInNativeDirectory;\n    exports.testAllDefaultExtensions = testAllDefaultExtensions;\n    exports.EVENT_EXTENSION_LOADED = EVENT_EXTENSION_LOADED;\n    exports.EVENT_EXTENSION_DISABLED = EVENT_EXTENSION_DISABLED;\n    exports.EVENT_EXTENSION_LOAD_FAILED = EVENT_EXTENSION_LOAD_FAILED;\n});\n"],"file":"ExtensionLoader.js"}