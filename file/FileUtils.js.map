{"version":3,"sources":["file/FileUtils.js"],"names":["define","require","exports","module","FileSystemError","DeprecationWarning","LanguageManager","PerfUtils","Strings","StringUtils","DocumentCommandHandlers","LiveDevelopmentUtils","MAX_FILE_SIZE_MB","MAX_FILE_SIZE","extListToBeOpenedInExtApp","_getDecodedString","buffer","encoding","TextDecoder","decode","e","readAsText","file","result","$","Deferred","perfTimerName","markStart","fullPath","always","addMeasurement","read","err","data","stat","reject","resolve","mtime","promise","writeText","text","allowBlindWrite","options","blind","write","LINE_ENDINGS_CRLF","LINE_ENDINGS_LF","getPlatformLineEndings","brackets","platform","sniffLineEndings","subset","substr","hasCRLF","test","hasLF","translateLineEndings","lineEndings","eolStr","findAnyEol","replace","getFileErrorString","name","NOT_FOUND","NOT_FOUND_ERR","NOT_READABLE","NOT_READABLE_ERR","NOT_WRITABLE","NO_MODIFICATION_ALLOWED_ERR_FILE","CONTENTS_MODIFIED","CONTENTS_MODIFIED_ERR","UNSUPPORTED_ENCODING","UNSUPPORTED_ENCODING_ERR","EXCEEDS_MAX_FILE_SIZE","format","ENCODE_FILE_FAILED","ENCODE_FILE_FAILED_ERR","DECODE_FILE_FAILED","DECODE_FILE_FAILED_ERR","UNSUPPORTED_UTF16_ENCODING","UNSUPPORTED_UTF16_ENCODING_ERR","GENERIC_ERROR","showFileOpenError","path","deprecationWarning","makeDialogFileList","paths","forEach","breakableUrl","convertToNativePath","unescape","indexOf","convertWindowsPathToUnixPath","stripTrailingSlash","length","slice","getBaseName","lastSlash","lastIndexOf","getNativeBracketsDirectoryPath","pathname","decodeURI","window","location","getNativeModuleDirectoryPath","uri","getFileExtension","baseName","idx","getSmartFileExtension","getCompoundFileExtension","getRelativeFilename","basePath","filename","isStaticHtmlFileExt","filePath","getDirectoryPath","getParentPath","substring","getFilenameWithoutExtension","index","_cmpNames","filename1","filename2","lang","f1","f2","localeCompare","numeric","compareFilenames","extFirst","getLocale","cmpExt","ext1","ext2","cmpNames","toLocaleLowerCase","comparePaths","path1","path2","entryName1","entryName2","pathParts1","split","pathParts2","Math","min","folders1","folders2","encodeFilePath","pathArray","map","subPath","encodeURIComponent","join","shouldOpenInExternalApplication","ext","includes","addExtensionToExternalAppList","Array","isArray","push","dchModule","lduModule"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n/*global unescape */\n\n/**\n * Set of utilities for working with files and text content.\n */\ndefine(function (require, exports, module) {\n\n\n    require(\"utils/Global\");\n\n    var FileSystemError     = require(\"filesystem/FileSystemError\"),\n        DeprecationWarning  = require(\"utils/DeprecationWarning\"),\n        LanguageManager     = require(\"language/LanguageManager\"),\n        PerfUtils           = require(\"utils/PerfUtils\"),\n        Strings             = require(\"strings\"),\n        StringUtils         = require(\"utils/StringUtils\");\n\n    // These will be loaded asynchronously\n    var DocumentCommandHandlers, LiveDevelopmentUtils;\n\n    /**\n     * @const {Number} Maximium file size (in megabytes)\n     *   (for display strings)\n     *   This must be a hard-coded value since this value\n     *   tells how low-level APIs should behave which cannot\n     *   have a load order dependency on preferences manager\n     */\n    var MAX_FILE_SIZE_MB = 16;\n\n    /**\n     * @const {Number} Maximium file size (in bytes)\n     *   This must be a hard-coded value since this value\n     *   tells how low-level APIs should behave which cannot\n     *   have a load order dependency on preferences manager\n     */\n    var MAX_FILE_SIZE = MAX_FILE_SIZE_MB * 1024 * 1024;\n\n    /**\n     * @const {List} list of File Extensions which will be opened in external Application\n     */\n    var extListToBeOpenedInExtApp = [];\n\n    function _getDecodedString(buffer, encoding) {\n        try {\n            return new TextDecoder(encoding).decode(buffer);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Asynchronously reads a file as UTF-8 encoded text.\n     * @param {!File} file File to read\n     * @return {$.Promise} a jQuery promise that will be resolved with the\n     *  file's text content plus its timestamp, or rejected with a FileSystemError string\n     *  constant if the file can not be read.\n     */\n    function readAsText(file) {\n        var result = new $.Deferred();\n\n        // Measure performance\n        var perfTimerName = PerfUtils.markStart(\"readAsText:\\t\" + file.fullPath);\n        result.always(function () {\n            PerfUtils.addMeasurement(perfTimerName);\n        });\n\n        // Read file as utf-8. there is a bug in virtual file system(filer) where filer will try utf-8fy the string\n        // returned even if it is not utf-8. But on native fs, this will return an error.\n        // We need to modify filer vfs to throw error when reading non utf-8 strings ideally.\n        // Or We could add the check here by read as binary here and use the utf-8 check mechanism\n        // in \"phoenix-fs lib :fslib_native.js\" to check if it is valid utf-8\n        file.read({encoding: 'utf8'},function (err, data, encoding, stat) {\n            if (!err) {\n                result.resolve(data, stat.mtime);\n            } else {\n                result.reject(err);\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Asynchronously writes a file as UTF-8 encoded text.\n     * @param {!File} file File to write\n     * @param {!string} text\n     * @param {boolean=} allowBlindWrite Indicates whether or not CONTENTS_MODIFIED\n     *      errors---which can be triggered if the actual file contents differ from\n     *      the FileSystem's last-known contents---should be ignored.\n     * @return {$.Promise} a jQuery promise that will be resolved when\n     * file writing completes, or rejected with a FileSystemError string constant.\n     */\n    function writeText(file, text, allowBlindWrite) {\n        var result = new $.Deferred(),\n            options = {};\n\n        if (allowBlindWrite) {\n            options.blind = true;\n        }\n\n        file.write(text, options, function (err) {\n            if (!err) {\n                result.resolve();\n            } else {\n                result.reject(err);\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Line endings\n     * @enum {string}\n     */\n    var LINE_ENDINGS_CRLF = \"CRLF\",\n        LINE_ENDINGS_LF   = \"LF\";\n\n    /**\n     * Returns the standard line endings for the current platform\n     * @return {LINE_ENDINGS_CRLF|LINE_ENDINGS_LF}\n     */\n    function getPlatformLineEndings() {\n        return brackets.platform === \"win\" ? LINE_ENDINGS_CRLF : LINE_ENDINGS_LF;\n    }\n\n    /**\n     * Scans the first 1000 chars of the text to determine how it encodes line endings. Returns\n     * null if usage is mixed or if no line endings found.\n     * @param {!string} text\n     * @return {null|LINE_ENDINGS_CRLF|LINE_ENDINGS_LF}\n     */\n    function sniffLineEndings(text) {\n        var subset = text.substr(0, 1000);  // (length is clipped to text.length)\n        var hasCRLF = /\\r\\n/.test(subset);\n        var hasLF = /[^\\r]\\n/.test(subset);\n\n        if ((hasCRLF && hasLF) || (!hasCRLF && !hasLF)) {\n            return null;\n        }\n        return hasCRLF ? LINE_ENDINGS_CRLF : LINE_ENDINGS_LF;\n\n    }\n\n    /**\n     * Translates any line ending types in the given text to the be the single form specified\n     * @param {!string} text\n     * @param {null|LINE_ENDINGS_CRLF|LINE_ENDINGS_LF} lineEndings\n     * @return {string}\n     */\n    function translateLineEndings(text, lineEndings) {\n        if (lineEndings !== LINE_ENDINGS_CRLF && lineEndings !== LINE_ENDINGS_LF) {\n            lineEndings = getPlatformLineEndings();\n        }\n\n        var eolStr = (lineEndings === LINE_ENDINGS_CRLF ? \"\\r\\n\" : \"\\n\");\n        var findAnyEol = /\\r\\n|\\r|\\n/g;\n\n        return text.replace(findAnyEol, eolStr);\n    }\n\n    /**\n     * @param {!FileSystemError} name\n     * @return {!string} User-friendly, localized error message\n     */\n    function getFileErrorString(name) {\n        // There are a few error codes that we have specific error messages for. The rest are\n        // displayed with a generic \"(error N)\" message.\n        var result;\n\n        if (name === FileSystemError.NOT_FOUND) {\n            result = Strings.NOT_FOUND_ERR;\n        } else if (name === FileSystemError.NOT_READABLE) {\n            result = Strings.NOT_READABLE_ERR;\n        } else if (name === FileSystemError.NOT_WRITABLE) {\n            result = Strings.NO_MODIFICATION_ALLOWED_ERR_FILE;\n        } else if (name === FileSystemError.CONTENTS_MODIFIED) {\n            result = Strings.CONTENTS_MODIFIED_ERR;\n        } else if (name === FileSystemError.UNSUPPORTED_ENCODING) {\n            result = Strings.UNSUPPORTED_ENCODING_ERR;\n        } else if (name === FileSystemError.EXCEEDS_MAX_FILE_SIZE) {\n            result = StringUtils.format(Strings.EXCEEDS_MAX_FILE_SIZE, MAX_FILE_SIZE_MB);\n        } else if (name === FileSystemError.ENCODE_FILE_FAILED) {\n            result = Strings.ENCODE_FILE_FAILED_ERR;\n        } else if (name === FileSystemError.DECODE_FILE_FAILED) {\n            result = Strings.DECODE_FILE_FAILED_ERR;\n        } else if (name === FileSystemError.UNSUPPORTED_UTF16_ENCODING) {\n            result = Strings.UNSUPPORTED_UTF16_ENCODING_ERR;\n        } else {\n            result = StringUtils.format(Strings.GENERIC_ERROR, name);\n        }\n\n        return result;\n    }\n\n    /**\n     * Shows an error dialog indicating that the given file could not be opened due to the given error\n     * @deprecated Use DocumentCommandHandlers.showFileOpenError() instead\n     *\n     * @param {!FileSystemError} name\n     * @return {!Dialog}\n     */\n    function showFileOpenError(name, path) {\n        DeprecationWarning.deprecationWarning(\"FileUtils.showFileOpenError() has been deprecated. \" +\n                                              \"Please use DocumentCommandHandlers.showFileOpenError() instead.\");\n        return DocumentCommandHandlers.showFileOpenError(name, path);\n    }\n\n    /**\n     * Creates an HTML string for a list of files to be reported on, suitable for use in a dialog.\n     * @param {Array.<string>} Array of filenames or paths to display.\n     */\n    function makeDialogFileList(paths) {\n        var result = \"<ul class='dialog-list'>\";\n        paths.forEach(function (path) {\n            result += \"<li><span class='dialog-filename'>\";\n            result += StringUtils.breakableUrl(path);\n            result += \"</span></li>\";\n        });\n        result += \"</ul>\";\n        return result;\n    }\n\n    /**\n     * Convert a URI path to a native path.\n     * On both platforms, this unescapes the URI\n     * On windows, URI paths start with a \"/\", but have a drive letter (\"C:\"). In this\n     * case, remove the initial \"/\".\n     * @param {!string} path\n     * @return {string}\n     */\n    function convertToNativePath(path) {\n        path = unescape(path);\n        if (path.indexOf(\":\") !== -1 && path[0] === \"/\") {\n            return path.substr(1);\n        }\n\n        return path;\n    }\n\n    /**\n     * Convert a Windows-native path to use Unix style slashes.\n     * On Windows, this converts \"C:\\foo\\bar\\baz.txt\" to \"C:/foo/bar/baz.txt\".\n     * On Mac, this does nothing, since Mac paths are already in Unix syntax.\n     * (Note that this does not add an initial forward-slash. Internally, our\n     * APIs generally use the \"C:/foo/bar/baz.txt\" style for \"native\" paths.)\n     * @param {string} path A native-style path.\n     * @return {string} A Unix-style path.\n     */\n    function convertWindowsPathToUnixPath(path) {\n        if (brackets.platform === \"win\") {\n            path = path.replace(/\\\\/g, \"/\");\n        }\n        return path;\n    }\n\n    /**\n     * Removes the trailing slash from a path, if it has one.\n     * Warning: this differs from the format of most paths used in Brackets! Use paths ending in \"/\"\n     * normally, as this is the format used by Directory.fullPath.\n     *\n     * @param {string} path\n     * @return {string}\n     */\n    function stripTrailingSlash(path) {\n        if (path && path[path.length - 1] === \"/\") {\n            return path.slice(0, -1);\n        }\n        return path;\n\n    }\n\n    /**\n     * Get the name of a file or a directory, removing any preceding path.\n     * @param {string} fullPath full path to a file or directory\n     * @return {string} Returns the base name of a file or the name of a\n     * directory\n     */\n    function getBaseName(fullPath) {\n        var lastSlash = fullPath.lastIndexOf(\"/\");\n        if (lastSlash === fullPath.length - 1) {  // directory: exclude trailing \"/\" too\n            return fullPath.slice(fullPath.lastIndexOf(\"/\", fullPath.length - 2) + 1, -1);\n        }\n        return fullPath.slice(lastSlash + 1);\n\n    }\n\n    /**\n     * Returns a native absolute path to the 'brackets' source directory.\n     * Note that this only works when run in brackets/src/index.html, so it does\n     * not work for unit tests (which is run from brackets/test/SpecRunner.html)\n     *\n     * WARNING: unlike most paths in Brackets, this path EXCLUDES the trailing \"/\".\n     * @return {string}\n     */\n    function getNativeBracketsDirectoryPath() {\n        var pathname = decodeURI(window.location.pathname);\n        return pathname.substr(0, pathname.lastIndexOf(\"/\")); // In the web, native path is the base url\n    }\n\n    /**\n     * Given the module object passed to JS module define function,\n     * convert the path to a native absolute path.\n     * Returns a native absolute path to the module folder.\n     *\n     * WARNING: unlike most paths in Brackets, this path EXCLUDES the trailing \"/\".\n     * @return {string}\n     */\n    function getNativeModuleDirectoryPath(module) {\n        var path;\n\n        if (module && module.uri) {\n            path = decodeURI(module.uri);\n\n            // Remove module name and trailing slash from path.\n            path = path.substr(0, path.lastIndexOf(\"/\"));\n        }\n        return path;\n    }\n\n    /**\n     * Get the file extension (excluding \".\") given a path OR a bare filename.\n     * Returns \"\" for names with no extension. If the name starts with \".\", the\n     * full remaining text is considered the extension.\n     *\n     * @param {string} fullPath full path to a file or directory\n     * @return {string} Returns the extension of a filename or empty string if\n     * the argument is a directory or a filename with no extension\n     */\n    function getFileExtension(fullPath) {\n        var baseName = getBaseName(fullPath),\n            idx      = baseName.lastIndexOf(\".\");\n\n        if (idx === -1) {\n            return \"\";\n        }\n\n        return baseName.substr(idx + 1);\n    }\n\n    /**\n     * Get the file extension (excluding \".\") given a path OR a bare filename.\n     * Returns \"\" for names with no extension.\n     * If the only `.` in the file is the first character,\n     * returns \"\" as this is not considered an extension.\n     * This method considers known extensions which include `.` in them.\n     * @deprecated Use LanguageManager.getCompoundFileExtension() instead\n     *\n     * @param {string} fullPath full path to a file or directory\n     * @return {string} Returns the extension of a filename or empty string if\n     * the argument is a directory or a filename with no extension\n     */\n    function getSmartFileExtension(fullPath) {\n        DeprecationWarning.deprecationWarning(\"FileUtils.getSmartFileExtension() has been deprecated. \" +\n                                              \"Please use LanguageManager.getCompoundFileExtension() instead.\");\n        return LanguageManager.getCompoundFileExtension(fullPath);\n    }\n\n    /**\n     * Computes filename as relative to the basePath. For example:\n     * basePath: /foo/bar/, filename: /foo/bar/baz.txt\n     * returns: baz.txt\n     *\n     * The net effect is that the common prefix is stripped away. If basePath is not\n     * a prefix of filename, then undefined is returned.\n     *\n     * @param {string} basePath Path against which we're computing the relative path\n     * @param {string} filename Full path to the file for which we are computing a relative path\n     * @return {string} relative path\n     */\n    function getRelativeFilename(basePath, filename) {\n        if (!filename || filename.substr(0, basePath.length) !== basePath) {\n            return;\n        }\n\n        return filename.substr(basePath.length);\n    }\n\n    /**\n     * Determine if file extension is a static html file extension.\n     * @param {string} filePath could be a path, a file name or just a file extension\n     * @return {boolean} Returns true if fileExt is in the list\n     */\n    function isStaticHtmlFileExt(filePath) {\n        DeprecationWarning.deprecationWarning(\"FileUtils.isStaticHtmlFileExt() has been deprecated. \" +\n                                              \"Please use LiveDevelopmentUtils.isStaticHtmlFileExt() instead.\");\n        return LiveDevelopmentUtils.isStaticHtmlFileExt(filePath);\n    }\n\n    /**\n     * Get the parent directory of a file. If a directory is passed, the SAME directory is returned.\n     * @param {string} fullPath full path to a file or directory\n     * @return {string} Returns the path to the parent directory of a file or the path of a directory,\n     *                  including trailing \"/\"\n     */\n    function getDirectoryPath(fullPath) {\n        return fullPath.substr(0, fullPath.lastIndexOf(\"/\") + 1);\n    }\n\n    /**\n     * Get the parent folder of the given file/folder path. Differs from getDirectoryPath() when 'fullPath'\n     * is a directory itself: returns its parent instead of the original path. (Note: if you already have a\n     * FileSystemEntry, it's faster to use entry.parentPath instead).\n     * @param {string} fullPath full path to a file or directory\n     * @return {string} Path of containing folder (including trailing \"/\"); or \"\" if path was the root\n     */\n    function getParentPath(fullPath) {\n        if (fullPath === \"/\") {\n            return \"\";\n        }\n        return fullPath.substring(0, fullPath.lastIndexOf(\"/\", fullPath.length - 2) + 1);\n    }\n\n    /**\n     * Get the file name without the extension. Returns \"\" if name starts with \".\"\n     * @param {string} filename File name of a file or directory, without preceding path\n     * @return {string} Returns the file name without the extension\n     */\n    function getFilenameWithoutExtension(filename) {\n        var index = filename.lastIndexOf(\".\");\n        return index === -1 ? filename : filename.slice(0, index);\n    }\n\n    /**\n     * @private\n     * OS-specific helper for `compareFilenames()`\n     * @return {Function} The OS-specific compare function\n     */\n    var _cmpNames = (function () {\n        if (brackets.platform === \"win\") {\n            // Use this function on Windows\n            return function (filename1, filename2, lang) {\n                var f1 = getFilenameWithoutExtension(filename1),\n                    f2 = getFilenameWithoutExtension(filename2);\n                return f1.localeCompare(f2, lang, {numeric: true});\n            };\n        }\n\n        // Use this function other OSes\n        return function (filename1, filename2, lang) {\n            return filename1.localeCompare(filename2, lang, {numeric: true});\n        };\n    }());\n\n    /**\n     * Compares 2 filenames in lowercases. In Windows it compares the names without the\n     * extension first and then the extensions to fix issue #4409\n     * @param {string} filename1\n     * @param {string} filename2\n     * @param {boolean} extFirst If true it compares the extensions first and then the file names.\n     * @return {number} The result of the compare function\n     */\n    function compareFilenames(filename1, filename2, extFirst) {\n        var lang = brackets.getLocale();\n\n        filename1 = filename1.toLocaleLowerCase();\n        filename2 = filename2.toLocaleLowerCase();\n\n        function cmpExt() {\n            var ext1 = getFileExtension(filename1),\n                ext2 = getFileExtension(filename2);\n            return ext1.localeCompare(ext2, lang, {numeric: true});\n        }\n\n        function cmpNames() {\n            return _cmpNames(filename1, filename2, lang);\n        }\n\n        return extFirst ? (cmpExt() || cmpNames()) : (cmpNames() || cmpExt());\n    }\n\n    /**\n     * Compares two paths segment-by-segment, used for sorting. When two files share a path prefix,\n     * the less deeply nested one is sorted earlier in the list. Sorts files within the same parent\n     * folder based on `compareFilenames()`.\n     * @param {string} path1\n     * @param {string} path2\n     * @return {number} -1, 0, or 1 depending on whether path1 is less than, equal to, or greater than\n     *     path2 according to this ordering.\n     */\n    function comparePaths(path1, path2) {\n        var entryName1, entryName2,\n            pathParts1 = path1.split(\"/\"),\n            pathParts2 = path2.split(\"/\"),\n            length     = Math.min(pathParts1.length, pathParts2.length),\n            folders1   = pathParts1.length - 1,\n            folders2   = pathParts2.length - 1,\n            index      = 0;\n\n        while (index < length) {\n            entryName1 = pathParts1[index];\n            entryName2 = pathParts2[index];\n\n            if (entryName1 !== entryName2) {\n                if (index < folders1 && index < folders2) {\n                    return entryName1.toLocaleLowerCase().localeCompare(entryName2.toLocaleLowerCase());\n                } else if (index >= folders1 && index >= folders2) {\n                    return compareFilenames(entryName1, entryName2);\n                }\n                return (index >= folders1 && index < folders2) ? -1 : 1;\n            }\n            index++;\n        }\n        return 0;\n    }\n\n    /**\n     * @param {string} path Native path in the format used by FileSystemEntry.fullPath\n     * @return {string} URI-encoded version suitable for appending to 'file:///`. It's not safe to use encodeURI()\n     *     directly since it doesn't escape chars like \"#\".\n     */\n    function encodeFilePath(path) {\n        var pathArray = path.split(\"/\");\n        pathArray = pathArray.map(function (subPath) {\n            return encodeURIComponent(subPath);\n        });\n        return pathArray.join(\"/\");\n    }\n\n    /**\n     * @param {string} ext extension string a file\n     * @return {string} returns true If file to be opened in External Application.\n     *\n     */\n    function shouldOpenInExternalApplication(ext) {\n        return extListToBeOpenedInExtApp.includes(ext);\n    }\n\n    /**\n     * @param {string} ext File Extensions to be added in External App List\n     *\n     */\n    function addExtensionToExternalAppList(ext) {\n\n        if(Array.isArray(ext)) {\n            extListToBeOpenedInExtApp = ext;\n        } else if (typeof ext === 'string'){\n            extListToBeOpenedInExtApp.push(ext);\n        }\n    }\n\n    // Asynchronously load DocumentCommandHandlers\n    // This avoids a temporary circular dependency created\n    // by relocating showFileOpenError() until deprecation is over\n    require([\"document/DocumentCommandHandlers\"], function (dchModule) {\n        DocumentCommandHandlers = dchModule;\n    });\n\n    // Asynchronously load LiveDevelopmentUtils\n    // This avoids a temporary circular dependency created\n    // by relocating isStaticHtmlFileExt() until deprecation is over\n    require([\"LiveDevelopment/LiveDevelopmentUtils\"], function (lduModule) {\n        LiveDevelopmentUtils = lduModule;\n    });\n\n    // Define public API\n    exports.LINE_ENDINGS_CRLF              = LINE_ENDINGS_CRLF;\n    exports.LINE_ENDINGS_LF                = LINE_ENDINGS_LF;\n    exports.getPlatformLineEndings         = getPlatformLineEndings;\n    exports.sniffLineEndings               = sniffLineEndings;\n    exports.translateLineEndings           = translateLineEndings;\n    exports.showFileOpenError              = showFileOpenError;\n    exports.getFileErrorString             = getFileErrorString;\n    exports.makeDialogFileList             = makeDialogFileList;\n    exports.readAsText                     = readAsText;\n    exports.writeText                      = writeText;\n    exports.convertToNativePath            = convertToNativePath;\n    exports.convertWindowsPathToUnixPath   = convertWindowsPathToUnixPath;\n    exports.getNativeBracketsDirectoryPath = getNativeBracketsDirectoryPath;\n    exports.getNativeModuleDirectoryPath   = getNativeModuleDirectoryPath;\n    exports.stripTrailingSlash             = stripTrailingSlash;\n    exports.isStaticHtmlFileExt            = isStaticHtmlFileExt;\n    exports.getDirectoryPath               = getDirectoryPath;\n    exports.getParentPath                  = getParentPath;\n    exports.getBaseName                    = getBaseName;\n    exports.getRelativeFilename            = getRelativeFilename;\n    exports.getFilenameWithoutExtension    = getFilenameWithoutExtension;\n    exports.getFileExtension               = getFileExtension;\n    exports.getSmartFileExtension          = getSmartFileExtension;\n    exports.compareFilenames               = compareFilenames;\n    exports.comparePaths                   = comparePaths;\n    exports.MAX_FILE_SIZE                  = MAX_FILE_SIZE;\n    exports.encodeFilePath                 = encodeFilePath;\n    exports.shouldOpenInExternalApplication = shouldOpenInExternalApplication;\n    exports.addExtensionToExternalAppList = addExtensionToExternalAppList;\n});\n"],"file":"FileUtils.js"}