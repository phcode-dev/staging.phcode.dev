{"version":3,"sources":["brackets.js"],"names":["define","require","exports","module","_removePhoenixLoadingOverlay","window","testEnvironment","document","getElementById","remove","AppInit","LanguageManager","ProjectManager","FileViewController","FileSyncManager","Commands","CommandManager","PerfUtils","FileSystem","Strings","Dialogs","DefaultDialogs","ExtensionLoader","ExtensionInterface","EventManager","FeatureGate","Async","UrlParams","PreferencesManager","DragAndDrop","NativeApp","DeprecationWarning","ViewCommandHandlers","NotificationUI","MainViewManager","MainViewHTML","CodeMirror","Object","defineProperty","get","deprecationWarning","Mustache","PathUtils","addMeasurement","params","_initTest","brackets","test","CodeHintManager","CodeInspection","CSSUtils","DocumentCommandHandlers","DocumentManager","DocumentModule","DOMAgent","EditorManager","ExtensionUtils","File","FileFilters","FileUtils","FindInFiles","FindInFilesUI","FindUtils","HTMLInstrumentation","Inspector","InstallExtensionDialog","JSUtils","KeyBindingManager","LiveDevelopment","LiveDevMultiBrowser","LiveDevServerManager","MainViewFactory","Menus","MultiRangeInlineEditor","WorkspaceManager","RemoteAgent","SearchResultsView","ScrollTrackMarkers","WorkingSetView","doneLoading","appReady","_onReady","osxMatch","exec","navigator","userAgent","Number","$testDiv","$","appendTo","body","outerWidth","clientWidth","removeClass","waitForAll","ready","always","extensionPathOverride","extensionLoaderPromise","init","split","restoreFontSize","getStartupProjectPath","then","initialProjectPath","openProject","deferred","Deferred","getViewState","resolve","setViewState","isWelcomeProjectPath","err","file","promise","reject","execute","CMD_ADD_TO_WORKINGSET_AND_OPEN","fullPath","_dispatchReady","EXTENSIONS_LOADED","APP_READY","_isUserScopeCorrupt","userPrefFullPath","getUserPrefFile","info","findInAllWorkingSets","paneId","length","openFileAndAddToWorkingSet","done","showModalDialog","DIALOG_ID_ERROR","ERROR_PREFS_CORRUPT_TITLE","ERROR_PREFS_CORRUPT","focusActivePane","app","getPendingFilesToOpen","paths","openDroppedFiles","_beforeHTMLReady","defaultFocus","addClass","platform","inBrowser","fn","focus","this","hasClass","apply","arguments","append","render","shouldAddAA","text","config","app_title","attachHandlers","syncOpenDocuments","on","e","button","preventDefault","$target","target","isFormElement","is","addEventListener","node","url","tagName","getAttribute","match","openURLInDefaultBrowser","parentElement","DefaultCtor","jQuery","firstArg","secondArg","jQObject","_EventDispatcher","bind","one","off","parse","EVENT_PROJECT_OPEN_FAILED","viewStateTimer","markStart","_smUserScopeLoading","HTML_READY"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*eslint-env es6*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/*global jQuery,fs */\n\n// TODO: (issue #264) break out the definition of brackets into a separate module from the application controller logic\n\n/**\n * brackets is the root of the Brackets codebase. This file pulls in all other modules as\n * dependencies (or dependencies thereof), initializes the UI, and binds global menus & keyboard\n * shortcuts to their Commands.\n *\n * Unlike other modules, this one can be accessed without an explicit require() because it exposes\n * a global object, window.brackets.\n */\ndefine(function (require, exports, module) {\n\n    function _removePhoenixLoadingOverlay() {\n        if(!window.testEnvironment){\n            document.getElementById('phoenix-loading-splash-screen-overlay').remove();\n            document.getElementById('safari_splash_screen').remove();\n        }\n    }\n\n    // Load dependent non-module scripts\n    require(\"widgets/bootstrap-dropdown\");\n    require(\"widgets/bootstrap-modal\");\n    require(\"widgets/bootstrap-twipsy-mod\");\n\n    // Load CodeMirror add-ons--these attach themselves to the CodeMirror module\n    require(\"thirdparty/CodeMirror/addon/comment/continuecomment\");\n    require(\"thirdparty/CodeMirror/addon/edit/closebrackets\");\n    require(\"thirdparty/CodeMirror/addon/edit/closetag\");\n    require(\"thirdparty/CodeMirror/addon/edit/matchbrackets\");\n    require(\"thirdparty/CodeMirror/addon/edit/matchtags\");\n    require(\"thirdparty/CodeMirror/addon/fold/xml-fold\");\n    require(\"thirdparty/CodeMirror/addon/mode/multiplex\");\n    require(\"thirdparty/CodeMirror/addon/mode/overlay\");\n    require(\"thirdparty/CodeMirror/addon/mode/simple\");\n    require(\"thirdparty/CodeMirror/addon/scroll/scrollpastend\");\n    require(\"thirdparty/CodeMirror/addon/search/match-highlighter\");\n    require(\"thirdparty/CodeMirror/addon/search/searchcursor\");\n    require(\"thirdparty/CodeMirror/addon/selection/active-line\");\n    require(\"thirdparty/CodeMirror/addon/selection/mark-selection\");\n    require(\"thirdparty/CodeMirror/keymap/sublime\");\n\n    // Load dependent modules\n    var AppInit             = require(\"utils/AppInit\"),\n        LanguageManager     = require(\"language/LanguageManager\"),\n        ProjectManager      = require(\"project/ProjectManager\"),\n        FileViewController  = require(\"project/FileViewController\"),\n        FileSyncManager     = require(\"project/FileSyncManager\"),\n        Commands            = require(\"command/Commands\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        PerfUtils           = require(\"utils/PerfUtils\"),\n        FileSystem          = require(\"filesystem/FileSystem\"),\n        Strings             = require(\"strings\"),\n        Dialogs             = require(\"widgets/Dialogs\"),\n        DefaultDialogs      = require(\"widgets/DefaultDialogs\"),\n        ExtensionLoader     = require(\"utils/ExtensionLoader\"),\n        ExtensionInterface  = require(\"utils/ExtensionInterface\"),\n        EventManager        = require(\"utils/EventManager\"),\n        FeatureGate         = require(\"utils/FeatureGate\"),\n        Async               = require(\"utils/Async\"),\n        UrlParams           = require(\"utils/UrlParams\").UrlParams,\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        DragAndDrop         = require(\"utils/DragAndDrop\"),\n        NativeApp           = require(\"utils/NativeApp\"),\n        DeprecationWarning  = require(\"utils/DeprecationWarning\"),\n        ViewCommandHandlers = require(\"view/ViewCommandHandlers\"),\n        NotificationUI      = require(\"widgets/NotificationUI\"),\n        MainViewManager     = require(\"view/MainViewManager\");\n\n    window.EventManager = EventManager; // Main event intermediary between brackets and other web pages.\n    /**\n     * The extension interface that can be used to communicate with extensions that supports it.\n     */\n    window.ExtensionInterface = ExtensionInterface;\n    /**\n     * The FeatureGate interface available in global context.\n     */\n    window.FeatureGate = FeatureGate;\n    /**\n     * All translation strings\n     */\n    window.Strings = Strings;\n    /**\n     * Global notification UI Widgets.\n     */\n    window.NotificationUI = NotificationUI;\n\n\n    var MainViewHTML        = require(\"text!htmlContent/main-view.html\");\n\n    // load modules for later use\n    require(\"utils/Global\");\n    require(\"editor/CSSInlineEditor\");\n    require(\"project/WorkingSetSort\");\n    require(\"search/QuickOpen\");\n    require(\"search/QuickOpenHelper\");\n    require(\"file/FileUtils\");\n    require(\"project/SidebarView\");\n    require(\"utils/Resizer\");\n    require(\"LiveDevelopment/main\");\n    require(\"utils/NodeConnection\");\n    require(\"utils/NodeDomain\");\n    require(\"utils/ColorUtils\");\n    require(\"view/ThemeManager\");\n    require(\"thirdparty/lodash\");\n    require(\"language/XMLUtils\");\n    require(\"language/JSONUtils\");\n    require(\"widgets/InlineMenu\");\n\n    // DEPRECATED: In future we want to remove the global CodeMirror, but for now we\n    // expose our required CodeMirror globally so as to avoid breaking extensions in the\n    // interim.\n    var CodeMirror = require(\"thirdparty/CodeMirror/lib/codemirror\");\n\n    Object.defineProperty(window, \"CodeMirror\", {\n        get: function () {\n            DeprecationWarning.deprecationWarning('Use brackets.getModule(\"thirdparty/CodeMirror/lib/codemirror\") instead of global CodeMirror.', true);\n            return CodeMirror;\n        }\n    });\n\n    // DEPRECATED: In future we want to remove the global Mustache, but for now we\n    // expose our required Mustache globally so as to avoid breaking extensions in the\n    // interim.\n    var Mustache = require(\"thirdparty/mustache/mustache\");\n\n    Object.defineProperty(window, \"Mustache\", {\n        get: function () {\n            DeprecationWarning.deprecationWarning('Use brackets.getModule(\"thirdparty/mustache/mustache\") instead of global Mustache.', true);\n            return Mustache;\n        }\n    });\n\n    // DEPRECATED: In future we want to remove the global PathUtils, but for now we\n    // expose our required PathUtils globally so as to avoid breaking extensions in the\n    // interim.\n    var PathUtils = require(\"thirdparty/path-utils/path-utils\");\n\n    Object.defineProperty(window, \"PathUtils\", {\n        get: function () {\n            DeprecationWarning.deprecationWarning('Use brackets.getModule(\"thirdparty/path-utils/path-utils\") instead of global PathUtils.', true);\n            return PathUtils;\n        }\n    });\n\n    //load language features\n    require(\"features/ParameterHintsManager\");\n    require(\"features/JumpToDefManager\");\n\n    // Load modules that self-register and just need to get included in the main project\n    require(\"command/DefaultMenus\");\n    require(\"document/ChangedDocumentTracker\");\n    require(\"editor/EditorCommandHandlers\");\n    require(\"editor/EditorOptionHandlers\");\n    require(\"editor/EditorStatusBar\");\n    require(\"editor/ImageViewer\");\n    require(\"extensibility/InstallExtensionDialog\");\n    require(\"extensibility/ExtensionManagerDialog\");\n    require(\"help/HelpCommandHandlers\");\n    require(\"search/FindInFilesUI\");\n    require(\"search/FindReplace\");\n\n    //Load find References Feature Manager\n    require(\"features/FindReferencesManager\");\n\n    //Load common JS module\n    require(\"JSUtils/Session\");\n    require(\"JSUtils/ScopeManager\");\n\n    //load Language Tools Module\n    require(\"languageTools/PathConverters\");\n    require(\"languageTools/LanguageTools\");\n    require(\"languageTools/ClientLoader\");\n    require(\"languageTools/BracketsToNodeInterface\");\n    require(\"languageTools/DefaultProviders\");\n    require(\"languageTools/DefaultEventHandlers\");\n\n\n    PerfUtils.addMeasurement(\"brackets module dependencies resolved\");\n\n    // Local variables\n    var params = new UrlParams();\n\n    // read URL params\n    params.parse();\n\n\n    /**\n     * Setup test object\n     */\n    function _initTest() {\n        // TODO: (issue #265) Make sure the \"test\" object is not included in final builds\n        // All modules that need to be tested from the context of the application\n        // must to be added to this object. The unit tests cannot just pull\n        // in the modules since they would run in context of the unit test window,\n        // and would not have access to the app html/css.\n        brackets.test = {\n            CodeHintManager: require(\"editor/CodeHintManager\"),\n            CodeInspection: require(\"language/CodeInspection\"),\n            CommandManager: require(\"command/CommandManager\"),\n            Commands: require(\"command/Commands\"),\n            CSSUtils: require(\"language/CSSUtils\"),\n            DefaultDialogs: require(\"widgets/DefaultDialogs\"),\n            Dialogs: require(\"widgets/Dialogs\"),\n            DocumentCommandHandlers: require(\"document/DocumentCommandHandlers\"),\n            DocumentManager: require(\"document/DocumentManager\"),\n            DocumentModule: require(\"document/Document\"),\n            DOMAgent: require(\"LiveDevelopment/Agents/DOMAgent\"),\n            DragAndDrop: require(\"utils/DragAndDrop\"),\n            EditorManager: require(\"editor/EditorManager\"),\n            EventManager: require(\"utils/EventManager\"),\n            ExtensionLoader: require(\"utils/ExtensionLoader\"),\n            ExtensionUtils: require(\"utils/ExtensionUtils\"),\n            ExtensionInterface: require(\"utils/ExtensionInterface\"),\n            FeatureGate: require(\"utils/FeatureGate\"),\n            File: require(\"filesystem/File\"),\n            FileFilters: require(\"search/FileFilters\"),\n            FileSyncManager: require(\"project/FileSyncManager\"),\n            FileSystem: require(\"filesystem/FileSystem\"),\n            FileUtils: require(\"file/FileUtils\"),\n            FileViewController: require(\"project/FileViewController\"),\n            FindInFiles: require(\"search/FindInFiles\"),\n            FindInFilesUI: require(\"search/FindInFilesUI\"),\n            FindUtils: require(\"search/FindUtils\"),\n            HTMLInstrumentation: require(\"language/HTMLInstrumentation\"),\n            Inspector: require(\"LiveDevelopment/Inspector/Inspector\"),\n            InstallExtensionDialog: require(\"extensibility/InstallExtensionDialog\"),\n            JSUtils: require(\"language/JSUtils\"),\n            KeyBindingManager: require(\"command/KeyBindingManager\"),\n            LanguageManager: require(\"language/LanguageManager\"),\n            LiveDevelopment: require(\"LiveDevelopment/LiveDevelopment\"),\n            LiveDevMultiBrowser: require(\"LiveDevelopment/LiveDevMultiBrowser\"),\n            LiveDevServerManager: require(\"LiveDevelopment/LiveDevServerManager\"),\n            MainViewFactory: require(\"view/MainViewFactory\"),\n            MainViewManager: require(\"view/MainViewManager\"),\n            Menus: require(\"command/Menus\"),\n            MultiRangeInlineEditor: require(\"editor/MultiRangeInlineEditor\").MultiRangeInlineEditor,\n            NativeApp: require(\"utils/NativeApp\"),\n            PerfUtils: require(\"utils/PerfUtils\"),\n            PreferencesManager: require(\"preferences/PreferencesManager\"),\n            ProjectManager: require(\"project/ProjectManager\"),\n            WorkspaceManager: require(\"view/WorkspaceManager\"),\n            RemoteAgent: require(\"LiveDevelopment/Agents/RemoteAgent\"),\n            SearchResultsView: require(\"search/SearchResultsView\"),\n            ScrollTrackMarkers: require(\"search/ScrollTrackMarkers\"),\n            WorkingSetView: require(\"project/WorkingSetView\"),\n            doneLoading: false\n        };\n\n        AppInit.appReady(function () {\n            brackets.test.doneLoading = true;\n        });\n    }\n\n    ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN_FAILED, function () {\n        // when project load fails, Phoenix shown a failure dialogue. Drop splash screen for the user to see it.\n        _removePhoenixLoadingOverlay();\n    });\n\n    /**\n     * Setup Brackets\n     */\n    function _onReady() {\n        PerfUtils.addMeasurement(\"window.document Ready\");\n\n        // Use quiet scrollbars if we aren't on Lion. If we're on Lion, only\n        // use native scroll bars when the mouse is not plugged in or when\n        // using the \"Always\" scroll bar setting.\n        var osxMatch = /Mac OS X 10\\D([\\d+])\\D/.exec(window.navigator.userAgent);\n        if (osxMatch && osxMatch[1] && Number(osxMatch[1]) >= 7) {\n            // test a scrolling div for scrollbars\n            var $testDiv = $(\"<div style='position:fixed;left:-50px;width:50px;height:50px;overflow:auto;'><div style='width:100px;height:100px;'/></div>\").appendTo(window.document.body);\n\n            if ($testDiv.outerWidth() === $testDiv.get(0).clientWidth) {\n                $(\".sidebar\").removeClass(\"quiet-scrollbars\");\n            }\n\n            $testDiv.remove();\n        }\n\n        // Load default languages and preferences\n        Async.waitForAll([LanguageManager.ready, PreferencesManager.ready]).always(function () {\n            // Load all extensions. This promise will complete even if one or more\n            // extensions fail to load.\n            var extensionPathOverride = params.get(\"extensions\");  // used by unit tests\n            var extensionLoaderPromise = ExtensionLoader.init(extensionPathOverride ? extensionPathOverride.split(\",\") : null);\n\n            // Finish UI initialization\n            ViewCommandHandlers.restoreFontSize();\n            ProjectManager.getStartupProjectPath().then((initialProjectPath)=>{\n                ProjectManager.openProject(initialProjectPath).always(function () {\n                    _initTest();\n\n                    // If this is the first launch, and we have an index.html file in the project folder (which should be\n                    // the samples folder on first launch), open it automatically. (We explicitly check for the\n                    // samples folder in case this is the first time we're launching Brackets after upgrading from\n                    // an old version that might not have set the \"afterFirstLaunch\" pref.)\n                    var deferred = new $.Deferred();\n\n                    if (!params.get(\"skipSampleProjectLoad\") && !PreferencesManager.getViewState(\"afterFirstLaunch\")) {\n                        PreferencesManager.setViewState(\"afterFirstLaunch\", \"true\");\n                        if (ProjectManager.isWelcomeProjectPath(initialProjectPath)) {\n                            FileSystem.resolve(initialProjectPath + \"index.html\", function (err, file) {\n                                if (!err) {\n                                    var promise = CommandManager.execute(Commands.CMD_ADD_TO_WORKINGSET_AND_OPEN, { fullPath: file.fullPath });\n                                    promise.then(deferred.resolve, deferred.reject);\n                                } else {\n                                    deferred.reject();\n                                }\n                            });\n                        } else {\n                            deferred.resolve();\n                        }\n                    } else {\n                        deferred.resolve();\n                    }\n\n                    deferred.always(function () {\n                        extensionLoaderPromise.always(function () {\n                            // Signal that extensions are loaded\n                            AppInit._dispatchReady(AppInit.EXTENSIONS_LOADED);\n                            // Signal that Brackets is loaded\n                            AppInit._dispatchReady(AppInit.APP_READY);\n                            _removePhoenixLoadingOverlay();\n\n                            PerfUtils.addMeasurement(\"Application Startup\");\n\n                            if (PreferencesManager._isUserScopeCorrupt()) {\n                                var userPrefFullPath = PreferencesManager.getUserPrefFile();\n                                // user scope can get corrupt only if the file exists, is readable,\n                                // but malformed. no need to check for its existance.\n                                var info = MainViewManager.findInAllWorkingSets(userPrefFullPath);\n                                var paneId;\n                                if (info.length) {\n                                    paneId = info[0].paneId;\n                                }\n                                FileViewController.openFileAndAddToWorkingSet(userPrefFullPath, paneId)\n                                    .done(function () {\n                                        Dialogs.showModalDialog(\n                                            DefaultDialogs.DIALOG_ID_ERROR,\n                                            Strings.ERROR_PREFS_CORRUPT_TITLE,\n                                            Strings.ERROR_PREFS_CORRUPT\n                                        ).done(function () {\n                                            // give the focus back to the editor with the pref file\n                                            MainViewManager.focusActivePane();\n                                        });\n                                    });\n                            }\n                        });\n                    });\n\n                    // See if any startup files were passed to the application\n                    if (brackets.app.getPendingFilesToOpen) {\n                        brackets.app.getPendingFilesToOpen(function (err, paths) {\n                            DragAndDrop.openDroppedFiles(paths);\n                        });\n                    }\n                });\n            });\n        });\n    }\n\n    /**\n     * Setup event handlers prior to dispatching AppInit.HTML_READY\n     */\n    function _beforeHTMLReady() {\n        // Add the platform (mac, win or linux) to the body tag so we can have platform-specific CSS rules\n        $(\"body\").addClass(\"platform-\" + brackets.platform);\n\n        // Browser-hosted version may also have different CSS (e.g. since '#titlebar' is shown)\n        if (brackets.inBrowser) {\n            $(\"body\").addClass(\"in-browser\");\n        } else {\n            $(\"body\").addClass(\"in-appshell\");\n        }\n\n        // Use HTML Menus\n        // (issue #5310) workaround for bootstrap dropdown: prevent the menu item to grab\n        // the focus -- override jquery focus implementation for top-level menu items\n        (function () {\n            var defaultFocus = $.fn.focus;\n            $.fn.focus = function () {\n                if (!this.hasClass(\"dropdown-toggle\")) {\n                    return defaultFocus.apply(this, arguments);\n                }\n            };\n        }());\n\n\n        // Localize MainViewHTML and inject into <BODY> tag\n        $(\"body\").append(Mustache.render(MainViewHTML, { shouldAddAA: (brackets.platform === \"mac\"), Strings: Strings }));\n\n        // Update title\n        $(\"title\").text(brackets.config.app_title);\n\n        // Respond to dragging & dropping files/folders onto the window by opening them. If we don't respond\n        // to these events, the file would load in place of the Brackets UI\n        DragAndDrop.attachHandlers();\n\n        // TODO: (issue 269) to support IE, need to listen to document instead (and even then it may not work when focus is in an input field?)\n        $(window).focus(function () {\n            // This call to syncOpenDocuments() *should* be a no-op now that we have\n            // file watchers, but is still here as a safety net.\n            FileSyncManager.syncOpenDocuments();\n        });\n\n        // Prevent unhandled middle button clicks from triggering native behavior\n        // Example: activating AutoScroll (see #510)\n        $(\"html\").on(\"mousedown\", \".inline-widget\", function (e) {\n            if (e.button === 1) {\n                e.preventDefault();\n            }\n        });\n\n        // The .no-focus style is added to clickable elements that should\n        // not steal focus. Calling preventDefault() on mousedown prevents\n        // focus from going to the click target.\n        $(\"html\").on(\"mousedown\", \".no-focus\", function (e) {\n            // Text fields should always be focusable.\n            var $target = $(e.target),\n                isFormElement =\n                    $target.is(\"input\") ||\n                    $target.is(\"textarea\") ||\n                    $target.is(\"select\");\n\n            if (!isFormElement) {\n                e.preventDefault();\n            }\n        });\n\n        // Prevent clicks on any link from navigating to a different page (which could lose unsaved\n        // changes). We can't use a simple .on(\"click\", \"a\") because of http://bugs.jquery.com/ticket/3861:\n        // jQuery hides non-left clicks from such event handlers, yet middle-clicks still cause CEF to\n        // navigate. Also, a capture handler is more reliable than bubble.\n        window.document.body.addEventListener(\"click\", function (e) {\n            // Check parents too, in case link has inline formatting tags\n            var node = e.target, url;\n            while (node) {\n                if (node.tagName === \"A\") {\n                    url = node.getAttribute(\"href\");\n                    if (url && !url.match(/^#/)) {\n                        NativeApp.openURLInDefaultBrowser(url);\n                    }\n                    e.preventDefault();\n                    break;\n                }\n                node = node.parentElement;\n            }\n        }, true);\n\n        // jQuery patch to shim deprecated usage of $() on EventDispatchers\n        var DefaultCtor = jQuery.fn.init;\n        jQuery.fn.init = function (firstArg, secondArg) {\n            var jQObject = new DefaultCtor(firstArg, secondArg);\n\n            // Is this a Brackets EventDispatcher object? (not a DOM node or other object)\n            if (firstArg && firstArg._EventDispatcher) {\n                // Patch the jQ wrapper object so it calls EventDispatcher's APIs instead of jQuery's\n                jQObject.on  = firstArg.on.bind(firstArg);\n                jQObject.one = firstArg.one.bind(firstArg);\n                jQObject.off = firstArg.off.bind(firstArg);\n                // Don't offer legacy support for trigger()/triggerHandler() on core model objects; extensions\n                // shouldn't be doing that anyway since it's basically poking at private API\n\n                // Console warning, since $() is deprecated for EventDispatcher objects\n                // (pass true to only print once per caller, and index 4 since the extension caller is deeper in the stack than usual)\n                DeprecationWarning.deprecationWarning(\"Deprecated: Do not use $().on/off() on Brackets modules and model objects. Call on()/off() directly on the object without a $() wrapper.\", true, 4);\n            }\n            return jQObject;\n        };\n    }\n\n    // Wait for view state to load.\n    var viewStateTimer = PerfUtils.markStart(\"User viewstate loading\");\n    PreferencesManager._smUserScopeLoading.always(function () {\n        PerfUtils.addMeasurement(viewStateTimer);\n        // Dispatch htmlReady event\n        _beforeHTMLReady();\n        AppInit._dispatchReady(AppInit.HTML_READY);\n        $(window.document).ready(_onReady);\n    });\n});\n"],"file":"brackets.js"}