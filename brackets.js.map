{"version":3,"sources":["brackets.js"],"names":["define","require","exports","module","AppInit","LanguageManager","ProjectManager","FileViewController","FileSyncManager","Commands","CommandManager","PerfUtils","FileSystem","Strings","Dialogs","DefaultDialogs","ExtensionLoader","ExtensionInterface","EventManager","FeatureGate","Async","UrlParams","PreferencesManager","DragAndDrop","NativeApp","DeprecationWarning","ViewCommandHandlers","NotificationUI","MainViewManager","window","MainViewHTML","CodeMirror","Object","defineProperty","get","deprecationWarning","Mustache","PathUtils","addMeasurement","params","_initTest","brackets","test","BeautificationManager","CodeHintManager","CodeInspection","CSSUtils","DocumentCommandHandlers","DocumentManager","DocumentModule","EditorManager","ExtensionUtils","File","FileFilters","FileUtils","FindInFiles","FindInFilesUI","FindUtils","HTMLInstrumentation","InstallExtensionDialog","JSUtils","KeyBindingManager","LiveDevMultiBrowser","LiveDevServerManager","MainViewFactory","Menus","MultiRangeInlineEditor","PhoenixComm","QuickViewManager","SelectionViewManager","WorkspaceManager","SearchResultsView","ScrollTrackMarkers","WorkingSetView","doneLoading","appReady","_removePhoenixLoadingOverlay","splashScreenPresent","document","getElementById","remove","off","EVENT_PROJECT_OPEN_FAILED","EVENT_PROJECT_OPEN","_startupBrackets","extensionPathOverride","extensionLoaderPromise","init","split","restoreFontSize","getStartupProjectPath","then","initialProjectPath","openProject","always","deferred","$","Deferred","getViewState","resolve","setViewState","isWelcomeProjectPath","err","file","reject","promise","execute","CMD_ADD_TO_WORKINGSET_AND_OPEN","fullPath","_dispatchReady","EXTENSIONS_LOADED","APP_READY","_isUserScopeCorrupt","userPrefFullPath","getUserPrefFile","info","findInAllWorkingSets","paneId","length","openFileAndAddToWorkingSet","done","showModalDialog","DIALOG_ID_ERROR","ERROR_PREFS_CORRUPT_TITLE","ERROR_PREFS_CORRUPT","focusActivePane","app","getPendingFilesToOpen","paths","openDroppedFiles","_onReady","osxMatch","exec","navigator","userAgent","Number","$testDiv","appendTo","body","outerWidth","clientWidth","removeClass","waitForAll","ready","_phoenixfsAppDirsCreatePromise","finally","_beforeHTMLReady","addClass","platform","inBrowser","defaultFocus","fn","focus","this","hasClass","apply","arguments","append","render","shouldAddAA","text","config","app_title","attachHandlers","syncOpenDocuments","on","e","button","preventDefault","$target","target","isFormElement","is","addEventListener","node","url","tagName","getAttribute","match","openURLInDefaultBrowser","parentElement","DefaultCtor","jQuery","firstArg","secondArg","jQObject","_EventDispatcher","bind","one","parse","viewStateTimer","markStart","_smUserScopeLoading","HTML_READY"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*eslint-env es6*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/*global jQuery,fs */\n\n// TODO: (issue #264) break out the definition of brackets into a separate module from the application controller logic\n\n/**\n * brackets is the root of the Brackets codebase. This file pulls in all other modules as\n * dependencies (or dependencies thereof), initializes the UI, and binds global menus & keyboard\n * shortcuts to their Commands.\n *\n * Unlike other modules, this one can be accessed without an explicit require() because it exposes\n * a global object, window.brackets.\n */\ndefine(function (require, exports, module) {\n\n    // Load dependent non-module scripts\n    require(\"widgets/bootstrap-dropdown\");\n    require(\"widgets/bootstrap-modal\");\n    require(\"widgets/bootstrap-twipsy-mod\");\n    require(\"thirdparty/jquery.knob.modified\");\n    require('thirdparty/marked.min');\n\n    // Load CodeMirror add-ons--these attach themselves to the CodeMirror module\n    require(\"thirdparty/CodeMirror/addon/comment/continuecomment\");\n    require(\"thirdparty/CodeMirror/addon/edit/closebrackets\");\n    require(\"thirdparty/CodeMirror/addon/edit/closetag\");\n    require(\"thirdparty/CodeMirror/addon/edit/matchbrackets\");\n    require(\"thirdparty/CodeMirror/addon/edit/matchtags\");\n    require(\"thirdparty/CodeMirror/addon/fold/xml-fold\");\n    require(\"thirdparty/CodeMirror/addon/mode/multiplex\");\n    require(\"thirdparty/CodeMirror/addon/mode/overlay\");\n    require(\"thirdparty/CodeMirror/addon/mode/simple\");\n    require(\"thirdparty/CodeMirror/addon/scroll/scrollpastend\");\n    require(\"thirdparty/CodeMirror/addon/search/match-highlighter\");\n    require(\"thirdparty/CodeMirror/addon/search/searchcursor\");\n    require(\"thirdparty/CodeMirror/addon/selection/active-line\");\n    require(\"thirdparty/CodeMirror/addon/selection/mark-selection\");\n    require(\"thirdparty/CodeMirror/keymap/sublime\");\n\n    require(\"worker/WorkerComm\");\n    require(\"utils/PhoenixComm\");\n    require(\"utils/ZipUtils\");\n\n    // Load dependent modules\n    const AppInit             = require(\"utils/AppInit\"),\n        LanguageManager     = require(\"language/LanguageManager\"),\n        ProjectManager      = require(\"project/ProjectManager\"),\n        FileViewController  = require(\"project/FileViewController\"),\n        FileSyncManager     = require(\"project/FileSyncManager\"),\n        Commands            = require(\"command/Commands\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        PerfUtils           = require(\"utils/PerfUtils\"),\n        FileSystem          = require(\"filesystem/FileSystem\"),\n        Strings             = require(\"strings\"),\n        Dialogs             = require(\"widgets/Dialogs\"),\n        DefaultDialogs      = require(\"widgets/DefaultDialogs\"),\n        ExtensionLoader     = require(\"utils/ExtensionLoader\"),\n        ExtensionInterface  = require(\"utils/ExtensionInterface\"),\n        EventManager        = require(\"utils/EventManager\"),\n        FeatureGate         = require(\"utils/FeatureGate\"),\n        Async               = require(\"utils/Async\"),\n        UrlParams           = require(\"utils/UrlParams\").UrlParams,\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        DragAndDrop         = require(\"utils/DragAndDrop\"),\n        NativeApp           = require(\"utils/NativeApp\"),\n        DeprecationWarning  = require(\"utils/DeprecationWarning\"),\n        ViewCommandHandlers = require(\"view/ViewCommandHandlers\"),\n        NotificationUI      = require(\"widgets/NotificationUI\"),\n        MainViewManager     = require(\"view/MainViewManager\");\n\n    window.EventManager = EventManager; // Main event intermediary between brackets and other web pages.\n    /**\n     * The extension interface that can be used to communicate with extensions that supports it.\n     */\n    window.ExtensionInterface = ExtensionInterface;\n    /**\n     * The FeatureGate interface available in global context.\n     */\n    window.FeatureGate = FeatureGate;\n    /**\n     * All translation strings\n     */\n    window.Strings = Strings;\n    /**\n     * Global notification UI Widgets.\n     */\n    window.NotificationUI = NotificationUI;\n\n\n    const MainViewHTML        = require(\"text!htmlContent/main-view.html\");\n\n    // load modules for later use\n    require(\"utils/Global\");\n    require(\"editor/CSSInlineEditor\");\n    require(\"project/WorkingSetSort\");\n    require(\"search/QuickOpen\");\n    require(\"search/QuickOpenHelper\");\n    require(\"file/FileUtils\");\n    require(\"project/SidebarView\");\n    require(\"utils/Resizer\");\n    require(\"LiveDevelopment/main\");\n    require(\"utils/NodeConnection\");\n    require(\"utils/NodeDomain\");\n    require(\"utils/ColorUtils\");\n    require(\"view/ThemeManager\");\n    require(\"thirdparty/lodash\");\n    require(\"language/XMLUtils\");\n    require(\"language/JSONUtils\");\n    require(\"widgets/InlineMenu\");\n    require(\"thirdparty/tinycolor\");\n\n    // DEPRECATED: In future we want to remove the global CodeMirror, but for now we\n    // expose our required CodeMirror globally so as to avoid breaking extensions in the\n    // interim.\n    const CodeMirror = require(\"thirdparty/CodeMirror/lib/codemirror\");\n\n    Object.defineProperty(window, \"CodeMirror\", {\n        get: function () {\n            DeprecationWarning.deprecationWarning('Use brackets.getModule(\"thirdparty/CodeMirror/lib/codemirror\") instead of global CodeMirror.', true);\n            return CodeMirror;\n        }\n    });\n\n    // DEPRECATED: In future we want to remove the global Mustache, but for now we\n    // expose our required Mustache globally so as to avoid breaking extensions in the\n    // interim.\n    const Mustache = require(\"thirdparty/mustache/mustache\");\n\n    Object.defineProperty(window, \"Mustache\", {\n        get: function () {\n            DeprecationWarning.deprecationWarning('Use brackets.getModule(\"thirdparty/mustache/mustache\") instead of global Mustache.', true);\n            return Mustache;\n        }\n    });\n\n    // DEPRECATED: In future we want to remove the global PathUtils, but for now we\n    // expose our required PathUtils globally so as to avoid breaking extensions in the\n    // interim.\n    const PathUtils = require(\"thirdparty/path-utils/path-utils\");\n\n    Object.defineProperty(window, \"PathUtils\", {\n        get: function () {\n            DeprecationWarning.deprecationWarning('Use brackets.getModule(\"thirdparty/path-utils/path-utils\") instead of global PathUtils.', true);\n            return PathUtils;\n        }\n    });\n\n    //load language features\n    require(\"features/ParameterHintsManager\");\n    require(\"features/JumpToDefManager\");\n    require(\"features/QuickViewManager\");\n    require(\"features/SelectionViewManager\");\n    require(\"features/BeautificationManager\");\n    require(\"features/NewFileContentManager\");\n\n    // Load modules that self-register and just need to get included in the main project\n    require(\"command/DefaultMenus\");\n    require(\"document/ChangedDocumentTracker\");\n    require(\"editor/EditorCommandHandlers\");\n    require(\"editor/EditorOptionHandlers\");\n    require(\"editor/EditorStatusBar\");\n    require(\"editor/ImageViewer\");\n    require(\"extensibility/ExtensionDownloader\");\n    require(\"extensibility/InstallExtensionDialog\");\n    require(\"extensibility/ExtensionManagerDialog\");\n    require(\"help/HelpCommandHandlers\");\n    require(\"search/FindInFilesUI\");\n    require(\"search/FindReplace\");\n\n    //Load find References Feature Manager\n    require(\"features/FindReferencesManager\");\n\n    //Load common JS module\n    require(\"JSUtils/Session\");\n    require(\"JSUtils/ScopeManager\");\n\n    //load Language Tools Module\n    require(\"languageTools/PathConverters\");\n    require(\"languageTools/LanguageTools\");\n    require(\"languageTools/ClientLoader\");\n    require(\"languageTools/BracketsToNodeInterface\");\n    require(\"languageTools/DefaultProviders\");\n    require(\"languageTools/DefaultEventHandlers\");\n\n    // web workers\n    require(\"worker/IndexingWorker\");\n    require(\"worker/ExtensionsWorker\");\n\n    // live preview\n    require(\"LiveDevelopment/Servers/FileServer\");\n    require(\"LiveDevelopment/Servers/UserServer\");\n\n    PerfUtils.addMeasurement(\"brackets module dependencies resolved\");\n\n    // Local variables\n    const params = new UrlParams();\n\n    // read URL params\n    params.parse();\n\n\n    /**\n     * Setup test object\n     */\n    function _initTest() {\n        // TODO: (issue #265) Make sure the \"test\" object is not included in final builds\n        // All modules that need to be tested from the context of the application\n        // must to be added to this object. The unit tests cannot just pull\n        // in the modules since they would run in context of the unit test window,\n        // and would not have access to the app html/css.\n        brackets.test = {\n            BeautificationManager: require(\"features/BeautificationManager\"),\n            CodeHintManager: require(\"editor/CodeHintManager\"),\n            CodeInspection: require(\"language/CodeInspection\"),\n            CommandManager: require(\"command/CommandManager\"),\n            Commands: require(\"command/Commands\"),\n            CSSUtils: require(\"language/CSSUtils\"),\n            DefaultDialogs: require(\"widgets/DefaultDialogs\"),\n            Dialogs: require(\"widgets/Dialogs\"),\n            DocumentCommandHandlers: require(\"document/DocumentCommandHandlers\"),\n            DocumentManager: require(\"document/DocumentManager\"),\n            DocumentModule: require(\"document/Document\"),\n            DragAndDrop: require(\"utils/DragAndDrop\"),\n            EditorManager: require(\"editor/EditorManager\"),\n            EventManager: require(\"utils/EventManager\"),\n            ExtensionLoader: require(\"utils/ExtensionLoader\"),\n            ExtensionUtils: require(\"utils/ExtensionUtils\"),\n            ExtensionInterface: require(\"utils/ExtensionInterface\"),\n            FeatureGate: require(\"utils/FeatureGate\"),\n            File: require(\"filesystem/File\"),\n            FileFilters: require(\"search/FileFilters\"),\n            FileSyncManager: require(\"project/FileSyncManager\"),\n            FileSystem: require(\"filesystem/FileSystem\"),\n            FileUtils: require(\"file/FileUtils\"),\n            FileViewController: require(\"project/FileViewController\"),\n            FindInFiles: require(\"search/FindInFiles\"),\n            FindInFilesUI: require(\"search/FindInFilesUI\"),\n            FindUtils: require(\"search/FindUtils\"),\n            HTMLInstrumentation: require(\"LiveDevelopment/MultiBrowserImpl/language/HTMLInstrumentation\"),\n            InstallExtensionDialog: require(\"extensibility/InstallExtensionDialog\"),\n            JSUtils: require(\"language/JSUtils\"),\n            KeyBindingManager: require(\"command/KeyBindingManager\"),\n            LanguageManager: require(\"language/LanguageManager\"),\n            LiveDevMultiBrowser: require(\"LiveDevelopment/LiveDevMultiBrowser\"),\n            LiveDevServerManager: require(\"LiveDevelopment/LiveDevServerManager\"),\n            MainViewFactory: require(\"view/MainViewFactory\"),\n            MainViewManager: require(\"view/MainViewManager\"),\n            Menus: require(\"command/Menus\"),\n            MultiRangeInlineEditor: require(\"editor/MultiRangeInlineEditor\").MultiRangeInlineEditor,\n            NativeApp: require(\"utils/NativeApp\"),\n            PerfUtils: require(\"utils/PerfUtils\"),\n            PhoenixComm: require(\"utils/PhoenixComm\"),\n            PreferencesManager: require(\"preferences/PreferencesManager\"),\n            ProjectManager: require(\"project/ProjectManager\"),\n            QuickViewManager: require(\"features/QuickViewManager\"),\n            SelectionViewManager: require(\"features/SelectionViewManager\"),\n            WorkspaceManager: require(\"view/WorkspaceManager\"),\n            SearchResultsView: require(\"search/SearchResultsView\"),\n            ScrollTrackMarkers: require(\"search/ScrollTrackMarkers\"),\n            WorkingSetView: require(\"project/WorkingSetView\"),\n            doneLoading: false\n        };\n\n        AppInit.appReady(function () {\n            brackets.test.doneLoading = true;\n        });\n    }\n\n    function _removePhoenixLoadingOverlay() {\n        if(window.splashScreenPresent){\n            document.getElementById('phoenix-loading-splash-screen-overlay').remove();\n            window.splashScreenPresent = false;\n            ProjectManager.off(ProjectManager.EVENT_PROJECT_OPEN_FAILED, _removePhoenixLoadingOverlay);\n            ProjectManager.off(ProjectManager.EVENT_PROJECT_OPEN, _removePhoenixLoadingOverlay);\n        }\n    }\n\n    // when project load fails, Phoenix shown a failure dialogue. Drop splash screen for the user to see it.\n    ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN_FAILED, _removePhoenixLoadingOverlay);\n    // as soon as the first theme loads up, phoenix is safe to view\n    ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _removePhoenixLoadingOverlay);\n\n    function _startupBrackets() {\n        // Load all extensions. This promise will complete even if one or more\n        // extensions fail to load.\n        const extensionPathOverride = params.get(\"extensions\");  // used by unit tests\n        const extensionLoaderPromise = ExtensionLoader.init(extensionPathOverride ? extensionPathOverride.split(\",\") : null);\n\n        // Finish UI initialization\n        ViewCommandHandlers.restoreFontSize();\n        ProjectManager.getStartupProjectPath().then((initialProjectPath)=>{\n            ProjectManager.openProject(initialProjectPath).always(function () {\n                _initTest();\n\n                // If this is the first launch, and we have an index.html file in the project folder (which should be\n                // the samples folder on first launch), open it automatically. (We explicitly check for the\n                // samples folder in case this is the first time we're launching Brackets after upgrading from\n                // an old version that might not have set the \"afterFirstLaunch\" pref.)\n                const deferred = new $.Deferred();\n\n                if (!params.get(\"skipSampleProjectLoad\") && !PreferencesManager.getViewState(\"afterFirstLaunch\")) {\n                    PreferencesManager.setViewState(\"afterFirstLaunch\", \"true\");\n                    if (ProjectManager.isWelcomeProjectPath(initialProjectPath)) {\n                        FileSystem.resolve(initialProjectPath + \"index.html\", function (err, file) {\n                            if (!err) {\n                                const promise = CommandManager.execute(Commands.CMD_ADD_TO_WORKINGSET_AND_OPEN, { fullPath: file.fullPath });\n                                promise.then(deferred.resolve, deferred.reject);\n                            } else {\n                                deferred.reject();\n                            }\n                        });\n                    } else {\n                        deferred.resolve();\n                    }\n                } else {\n                    deferred.resolve();\n                }\n\n                deferred.always(function () {\n                    extensionLoaderPromise.always(function () {\n                        // Signal that extensions are loaded\n                        AppInit._dispatchReady(AppInit.EXTENSIONS_LOADED);\n                        // Signal that Brackets is loaded\n                        AppInit._dispatchReady(AppInit.APP_READY);\n\n                        PerfUtils.addMeasurement(\"Application Startup\");\n\n                        if (PreferencesManager._isUserScopeCorrupt()) {\n                            const userPrefFullPath = PreferencesManager.getUserPrefFile();\n                            // user scope can get corrupt only if the file exists, is readable,\n                            // but malformed. no need to check for its existance.\n                            const info = MainViewManager.findInAllWorkingSets(userPrefFullPath);\n                            let paneId;\n                            if (info.length) {\n                                paneId = info[0].paneId;\n                            }\n                            FileViewController.openFileAndAddToWorkingSet(userPrefFullPath, paneId)\n                                .done(function () {\n                                    Dialogs.showModalDialog(\n                                        DefaultDialogs.DIALOG_ID_ERROR,\n                                        Strings.ERROR_PREFS_CORRUPT_TITLE,\n                                        Strings.ERROR_PREFS_CORRUPT\n                                    ).done(function () {\n                                        // give the focus back to the editor with the pref file\n                                        MainViewManager.focusActivePane();\n                                    });\n                                });\n                        }\n                    });\n                });\n\n                // See if any startup files were passed to the application\n                if (brackets.app.getPendingFilesToOpen) {\n                    brackets.app.getPendingFilesToOpen(function (err, paths) {\n                        DragAndDrop.openDroppedFiles(paths);\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * Setup Brackets\n     */\n    function _onReady() {\n        PerfUtils.addMeasurement(\"window.document Ready\");\n\n        // Use quiet scrollbars if we aren't on Lion. If we're on Lion, only\n        // use native scroll bars when the mouse is not plugged in or when\n        // using the \"Always\" scroll bar setting.\n        const osxMatch = /Mac OS X 10\\D([\\d+])\\D/.exec(window.navigator.userAgent);\n        if (osxMatch && osxMatch[1] && Number(osxMatch[1]) >= 7) {\n            // test a scrolling div for scrollbars\n            const $testDiv = $(\"<div style='position:fixed;left:-50px;width:50px;height:50px;overflow:auto;'><div style='width:100px;height:100px;'/></div>\").appendTo(window.document.body);\n\n            if ($testDiv.outerWidth() === $testDiv.get(0).clientWidth) {\n                $(\".sidebar\").removeClass(\"quiet-scrollbars\");\n            }\n\n            $testDiv.remove();\n        }\n\n        // Load default languages and preferences\n        Async.waitForAll([LanguageManager.ready, PreferencesManager.ready]).always(function () {\n            if(window._phoenixfsAppDirsCreatePromise){\n                window._phoenixfsAppDirsCreatePromise.finally(_startupBrackets);\n            } else {\n                _startupBrackets();\n            }\n        });\n    }\n\n    /**\n     * Setup event handlers prior to dispatching AppInit.HTML_READY\n     */\n    function _beforeHTMLReady() {\n        // Add the platform (mac, win or linux) to the body tag so we can have platform-specific CSS rules\n        $(\"body\").addClass(\"platform-\" + brackets.platform);\n\n        // Browser-hosted version may also have different CSS (e.g. since '#titlebar' is shown)\n        if (brackets.inBrowser) {\n            $(\"body\").addClass(\"in-browser\");\n        } else {\n            $(\"body\").addClass(\"in-appshell\");\n        }\n\n        // Use HTML Menus\n        // (issue #5310) workaround for bootstrap dropdown: prevent the menu item to grab\n        // the focus -- override jquery focus implementation for top-level menu items\n        (function () {\n            const defaultFocus = $.fn.focus;\n            $.fn.focus = function () {\n                if (!this.hasClass(\"dropdown-toggle\")) {\n                    return defaultFocus.apply(this, arguments);\n                }\n            };\n        }());\n\n\n        // Localize MainViewHTML and inject into <BODY> tag\n        $(\"body\").append(Mustache.render(MainViewHTML, { shouldAddAA: (brackets.platform === \"mac\"), Strings: Strings }));\n\n        // Update title\n        $(\"title\").text(brackets.config.app_title);\n\n        // Respond to dragging & dropping files/folders onto the window by opening them. If we don't respond\n        // to these events, the file would load in place of the Brackets UI\n        DragAndDrop.attachHandlers();\n\n        // TODO: (issue 269) to support IE, need to listen to document instead (and even then it may not work when focus is in an input field?)\n        $(window).focus(function () {\n            // This call to syncOpenDocuments() *should* be a no-op now that we have\n            // file watchers, but is still here as a safety net.\n            FileSyncManager.syncOpenDocuments();\n        });\n\n        // Prevent unhandled middle button clicks from triggering native behavior\n        // Example: activating AutoScroll (see #510)\n        $(\"html\").on(\"mousedown\", \".inline-widget\", function (e) {\n            if (e.button === 1) {\n                e.preventDefault();\n            }\n        });\n\n        // The .no-focus style is added to clickable elements that should\n        // not steal focus. Calling preventDefault() on mousedown prevents\n        // focus from going to the click target.\n        $(\"html\").on(\"mousedown\", \".no-focus\", function (e) {\n            // Text fields should always be focusable.\n            const $target = $(e.target),\n                isFormElement =\n                    $target.is(\"input\") ||\n                    $target.is(\"textarea\") ||\n                    $target.is(\"select\");\n\n            if (!isFormElement) {\n                e.preventDefault();\n            }\n        });\n\n        // Prevent clicks on any link from navigating to a different page (which could lose unsaved\n        // changes). We can't use a simple .on(\"click\", \"a\") because of http://bugs.jquery.com/ticket/3861:\n        // jQuery hides non-left clicks from such event handlers, yet middle-clicks still cause CEF to\n        // navigate. Also, a capture handler is more reliable than bubble.\n        window.document.body.addEventListener(\"click\", function (e) {\n            // Check parents too, in case link has inline formatting tags\n            let node = e.target, url;\n            while (node) {\n                if (node.tagName === \"A\") {\n                    url = node.getAttribute(\"href\");\n                    if (url && !url.match(/^#/)) {\n                        NativeApp.openURLInDefaultBrowser(url);\n                    }\n                    e.preventDefault();\n                    break;\n                }\n                node = node.parentElement;\n            }\n        }, true);\n\n        // jQuery patch to shim deprecated usage of $() on EventDispatchers\n        const DefaultCtor = jQuery.fn.init;\n        jQuery.fn.init = function (firstArg, secondArg) {\n            const jQObject = new DefaultCtor(firstArg, secondArg);\n\n            // Is this a Brackets EventDispatcher object? (not a DOM node or other object)\n            if (firstArg && firstArg._EventDispatcher) {\n                // Patch the jQ wrapper object so it calls EventDispatcher's APIs instead of jQuery's\n                jQObject.on  = firstArg.on.bind(firstArg);\n                jQObject.one = firstArg.one.bind(firstArg);\n                jQObject.off = firstArg.off.bind(firstArg);\n                // Don't offer legacy support for trigger()/triggerHandler() on core model objects; extensions\n                // shouldn't be doing that anyway since it's basically poking at private API\n\n                // Console warning, since $() is deprecated for EventDispatcher objects\n                // (pass true to only print once per caller, and index 4 since the extension caller is deeper in the stack than usual)\n                DeprecationWarning.deprecationWarning(\"Deprecated: Do not use $().on/off() on Brackets modules and model objects. Call on()/off() directly on the object without a $() wrapper.\", true, 4);\n            }\n            return jQObject;\n        };\n    }\n\n    // Wait for view state to load.\n    const viewStateTimer = PerfUtils.markStart(\"User viewstate loading\");\n    PreferencesManager._smUserScopeLoading.always(function () {\n        PerfUtils.addMeasurement(viewStateTimer);\n        // Dispatch htmlReady event\n        _beforeHTMLReady();\n        AppInit._dispatchReady(AppInit.HTML_READY);\n        $(window.document).ready(_onReady);\n    });\n});\n"],"file":"brackets.js"}