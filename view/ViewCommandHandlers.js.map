{"version":3,"sources":["view/ViewCommandHandlers.js"],"names":["define","require","exports","module","Commands","EventDispatcher","CommandManager","Strings","StringUtils","EditorManager","PreferencesManager","DocumentManager","ThemeSettings","MainViewManager","AppInit","_","FontRuleTemplate","prefs","getExtensionPrefs","validFontSizeRegExpStr","currFontSize","currFontFamily","DYNAMIC_FONT_STYLE_ID","DYNAMIC_FONT_FAMILY_ID","MIN_FONT_SIZE","MAX_FONT_SIZE","DEFAULT_FONT_SIZE","DEFAULT_FONT_FAMILY","_removeDynamicProperty","propertyID","$","remove","_addDynamicProperty","ruleCfg","$style","attr","ruleText","html","cssRule","ruleName","styleStr","format","propName","propValue","priorityFlag","append","_removeDynamicFontSize","_addDynamicFontSize","fontSize","template","split","join","less","render","onParse","err","tree","console","error","css","_removeDynamicFontFamily","_addDynamicFontFamily","fontFamily","_updateScroll","editor","oldWidth","_codeMirror","defaultCharWidth","oldFontSize","get","newFontSize","delta","adjustment","scrollPos","getScrollPos","line","lineAtHeight","y","test","parseInt","parseFloat","refreshAll","newWidth","deltaX","x","scrollPosX","Math","round","scrollPosY","heightAtLine","setScrollPos","setFontSize","forEach","getPaneIdList","paneId","currentPath","getCurrentlyViewedPath","doc","getOpenDocumentForPath","_masterEditor","trigger","set","getFontSize","setFontFamily","getCurrentFullEditor","setMacFontSmoothingType","aaType","$editor_holder","removeClass","addClass","getFontFamily","_adjustFontSize","fsStyle","validFontSizeRegExp","RegExp","search","fsUnits","substring","length","fsOld","fsNew","fsStr","_handleIncreaseFontSize","_handleDecreaseFontSize","_handleRestoreFontSize","_updateUI","getCurrentDocument","VIEW_INCREASE_FONT_SIZE","getEnabled","setEnabled","VIEW_DECREASE_FONT_SIZE","VIEW_RESTORE_FONT_SIZE","init","restoreFontSize","fsAdjustment","getViewState","setViewState","restoreFonts","_getLinesInView","textHeight","scrollTop","editorHeight","scrolledTop","scrolledBottom","firstLine","lastLine","first","ceil","last","floor","_scrollLine","direction","getTextHeight","cursorPos","getCursorPos","hasSelecction","hasSelection","inlineEditors","getInlineWidgets","scrollInfo","getScrollInfo","paddingTop","_getLineSpaceElement","offsetTop","clientHeight","top","removedScroll","coords","inlineEditor","_getInlineWidgetLineNumber","charCoords","ch","info","height","linesInView","setCursorPos","moveV","lines","left","_handleScrollLineUp","_handleScrollLineDown","_handleThemeSettings","showDialog","register","CMD_INCREASE_FONT_SIZE","CMD_DECREASE_FONT_SIZE","CMD_RESTORE_FONT_SIZE","CMD_SCROLL_LINE_UP","VIEW_SCROLL_LINE_UP","CMD_SCROLL_LINE_DOWN","VIEW_SCROLL_LINE_DOWN","CMD_THEMES","CMD_THEMES_OPEN_SETTINGS","definePreference","description","DESCRIPTION_FONT_SIZE","on","DESCRIPTION_FONT_FAMILY","brackets","platform","DESCRIPTION_FONT_SMOOTHING","values","appReady","makeEventDispatcher"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global less */\n\n/**\n * The ViewCommandHandlers object dispatches the following event(s):\n *    - fontSizeChange -- Triggered when the font size is changed via the\n *      Increase Font Size, Decrease Font Size, or Restore Font Size commands.\n *      The 2nd arg to the listener is the amount of the change. The 3rd arg\n *      is a string containing the new font size after applying the change.\n */\ndefine(function (require, exports, module) {\n\n\n    var Commands            = require(\"command/Commands\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        Strings             = require(\"strings\"),\n        StringUtils         = require(\"utils/StringUtils\"),\n        EditorManager       = require(\"editor/EditorManager\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        DocumentManager     = require(\"document/DocumentManager\"),\n        ThemeSettings       = require(\"view/ThemeSettings\"),\n        MainViewManager     = require(\"view/MainViewManager\"),\n        AppInit             = require(\"utils/AppInit\"),\n        _                   = require(\"thirdparty/lodash\"),\n        FontRuleTemplate    = require(\"text!view/fontrules/font-based-rules.less\");\n\n    var prefs = PreferencesManager.getExtensionPrefs(\"fonts\");\n\n\n    /**\n     * Font sizes should be validated by this regexp\n     */\n    var validFontSizeRegExpStr = \"^([0-9]+)?(\\\\.)?([0-9]+)(px|em)$\";\n    // Need RegExp as a string to be exported for use with HTML5 pattern attribute\n\n    /**\n     * @private\n     * The currently present font size. Used to detect no-op changes.\n     * @type {string}\n     */\n    var currFontSize;\n\n    /**\n     * @private\n     * The currently present font family. Used to detect no-op changes.\n     * @type {string}\n     */\n    var currFontFamily;\n\n    /**\n     * @const\n     * @type {string}\n     */\n    var DYNAMIC_FONT_STYLE_ID = \"codemirror-dynamic-fonts\";\n\n    /**\n     * @const\n     * @type {string}\n     */\n    var DYNAMIC_FONT_FAMILY_ID = \"codemirror-dynamic-font-family\";\n\n    /**\n     * @const\n     * @private\n     * The smallest font size in pixels\n     * @type {number}\n     */\n    var MIN_FONT_SIZE = 1;\n\n    /**\n     * @const\n     * @private\n     * The largest font size in pixels\n     * @type {number}\n     */\n    var MAX_FONT_SIZE = 72;\n\n    /**\n     * @const\n     * @private\n     * The default font size used only to convert the old fontSizeAdjustment view state to the new fontSize\n     * @type {number}\n     */\n    var DEFAULT_FONT_SIZE = 12;\n\n    /**\n     * @const\n     * @private\n     * The default font family\n     * @type {string}\n     */\n    var DEFAULT_FONT_FAMILY = \"'SourceCodePro-Medium', ＭＳ ゴシック, 'MS Gothic', monospace\";\n\n    /**\n     * @private\n     * Removes style property from the DOM\n     * @param {string} propertyID is the id of the property to be removed\n     */\n    function _removeDynamicProperty(propertyID) {\n        $(\"#\" + propertyID).remove();\n    }\n\n    /**\n     * @private\n     * Add the style property to the DOM\n     * @param {string} propertyID Is the property ID to be added\n     * @param {object} ruleCfg Is the CSS Rule configuration object\n     * @param {string} ruleCfg.propName Is the name of the style property\n     * @param {string} ruleCfg.propValue Is the value of the style property\n     * @param {boolean} ruleCfg.priorityFlag Is a flag to make the style property !important\n     * @param {string} ruleCfg.ruleName Optional Selctor name to be used for the rule\n     * @param {string} ruleCfg.ruleText Optional selector definition text\n     */\n    function _addDynamicProperty(propertyID, ruleCfg) {\n        var $style   = $(\"<style type='text/css'></style>\").attr(\"id\", propertyID);\n        if (ruleCfg.ruleText) {\n            $style.html(ruleCfg.ruleText);\n        } else {\n            var cssRule = ruleCfg.ruleName || \".CodeMirror\";\n            var styleStr = ruleCfg.ruleText || StringUtils.format(\"{0}: {1} {2}\", ruleCfg.propName, ruleCfg.propValue, ruleCfg.priorityFlag ? \"!important\" : \"\");\n            $style.html(cssRule + \"{ \" + styleStr + \" }\");\n        }\n\n        // Let's make sure we remove the already existing item from the DOM.\n        _removeDynamicProperty(propertyID);\n        $(\"head\").append($style);\n    }\n\n    /**\n     * @private\n     * Removes the styles used to update the font size\n     */\n    function _removeDynamicFontSize() {\n        _removeDynamicProperty(DYNAMIC_FONT_STYLE_ID);\n    }\n\n    /**\n     * @private\n     * Add the styles used to update the font size\n     * @param {string} fontSize  A string with the font size and the size unit\n     */\n    function _addDynamicFontSize(fontSize) {\n        var template = FontRuleTemplate.split(\"{font-size-param}\").join(fontSize);\n        less.render(template, null, function onParse(err, tree) {\n            if (err) {\n                console.error(err);\n            } else {\n                _addDynamicProperty(DYNAMIC_FONT_STYLE_ID, {\n                    ruleText: tree.css\n                });\n            }\n        });\n    }\n\n    /**\n     * @private\n     * Removes the styles used to update the font family\n     */\n    function _removeDynamicFontFamily() {\n        _removeDynamicProperty(DYNAMIC_FONT_FAMILY_ID);\n    }\n\n    /**\n     * @private\n     * Add the styles used to update the font family\n     * @param {string} fontFamily  A string with the font family\n     */\n    function _addDynamicFontFamily(fontFamily) {\n        _addDynamicProperty(DYNAMIC_FONT_FAMILY_ID, {\n            propName: \"font-family\",\n            propValue: fontFamily\n        });\n    }\n\n    /**\n     * @private\n     * Sets the font size and restores the scroll position as best as possible.\n     * @param {!Editor} editor  Editor to update.\n     * @param {string=} fontSize  A string with the font size and the size unit\n     */\n    function _updateScroll(editor, fontSize) {\n        var oldWidth    = editor._codeMirror.defaultCharWidth(),\n            oldFontSize = prefs.get(\"fontSize\"),\n            newFontSize = fontSize,\n            delta       = 0,\n            adjustment  = 0,\n            scrollPos   = editor.getScrollPos(),\n            line        = editor._codeMirror.lineAtHeight(scrollPos.y, \"local\");\n\n        delta = /em$/.test(oldFontSize) ? 10 : 1;\n        adjustment = parseInt((parseFloat(newFontSize) - parseFloat(oldFontSize)) * delta, 10);\n\n        // Only adjust the scroll position if there was any adjustments to the font size.\n        // Otherwise there will be unintended scrolling.\n        //\n        if (adjustment) {\n            editor.refreshAll();\n        }\n\n        // Calculate the new scroll based on the old font sizes and scroll position\n        var newWidth   = editor._codeMirror.defaultCharWidth(),\n            deltaX     = scrollPos.x / oldWidth,\n            scrollPosX = scrollPos.x + Math.round(deltaX * (newWidth  - oldWidth)),\n            scrollPosY = editor._codeMirror.heightAtLine(line, \"local\");\n\n        editor.setScrollPos(scrollPosX, scrollPosY);\n    }\n\n    /**\n     * Font size setter to set the font size for the document editor\n     * @param {string} fontSize The font size with size unit as 'px' or 'em'\n     */\n    function setFontSize(fontSize) {\n        if (currFontSize === fontSize) {\n            return;\n        }\n\n        _removeDynamicFontSize();\n        if (fontSize) {\n            _addDynamicFontSize(fontSize);\n        }\n\n        // Update scroll metrics in viewed editors\n        _.forEach(MainViewManager.getPaneIdList(), function (paneId) {\n            var currentPath = MainViewManager.getCurrentlyViewedPath(paneId),\n                doc = currentPath && DocumentManager.getOpenDocumentForPath(currentPath);\n            if (doc && doc._masterEditor) {\n                _updateScroll(doc._masterEditor, fontSize);\n            }\n        });\n\n        exports.trigger(\"fontSizeChange\", fontSize, currFontSize);\n        currFontSize = fontSize;\n        prefs.set(\"fontSize\", fontSize);\n    }\n\n    /**\n     * Font size getter to get the current font size for the document editor\n     * @return {string} Font size with size unit as 'px' or 'em'\n     */\n    function getFontSize() {\n        return prefs.get(\"fontSize\");\n    }\n\n\n    /**\n     * Font family setter to set the font family for the document editor\n     * @param {string} fontFamily The font family to be set.  It can be a string with multiple comma separated fonts\n     */\n    function setFontFamily(fontFamily) {\n        var editor = EditorManager.getCurrentFullEditor();\n\n        if (currFontFamily === fontFamily) {\n            return;\n        }\n\n        _removeDynamicFontFamily();\n        if (fontFamily) {\n            _addDynamicFontFamily(fontFamily);\n        }\n\n        exports.trigger(\"fontFamilyChange\", fontFamily, currFontFamily);\n        currFontFamily = fontFamily;\n        prefs.set(\"fontFamily\", fontFamily);\n\n        if (editor) {\n            editor.refreshAll();\n        }\n    }\n\n\n    /**\n     * Font smoothing setter to set the anti-aliasing type for the code area on Mac.\n     * @param {string} aaType The antialiasing type to be set. It can take either \"subpixel-antialiased\" or \"antialiased\"\n     */\n    function setMacFontSmoothingType(aaType) {\n        var $editor_holder  = $(\"#editor-holder\");\n\n        // Add/Remove the class based on the preference. Also\n        // default to subpixel AA in case of invalid entries.\n        if (aaType === \"antialiased\") {\n            $editor_holder.removeClass(\"subpixel-aa\");\n        } else {\n            $editor_holder.addClass(\"subpixel-aa\");\n        }\n    }\n\n    /**\n     * Font family getter to get the currently configured font family for the document editor\n     * @return {string} The font family for the document editor\n     */\n    function getFontFamily() {\n        return prefs.get(\"fontFamily\");\n    }\n\n\n    /**\n     * @private\n     * Increases or decreases the editor's font size.\n     * @param {number} adjustment  Negative number to make the font smaller; positive number to make it bigger\n     * @return {boolean} true if adjustment occurred, false if it did not occur\n     */\n    function _adjustFontSize(adjustment) {\n        var fsStyle    = prefs.get(\"fontSize\");\n        var validFontSizeRegExp = new RegExp(validFontSizeRegExpStr);\n\n        // Make sure that the font size is expressed in terms we can\n        // handle (px or em). If not, simply bail.\n\n        if (fsStyle.search(validFontSizeRegExp) === -1) {\n            return false;\n        }\n\n        // Guaranteed to work by validation above.\n        var fsUnits = fsStyle.substring(fsStyle.length - 2, fsStyle.length),\n            delta   = fsUnits === \"px\" ? 1 : 0.1,\n            fsOld   = parseFloat(fsStyle.substring(0, fsStyle.length - 2)),\n            fsNew   = fsOld + (delta * adjustment),\n            fsStr   = fsNew + fsUnits;\n\n        // Don't let the font size get too small or too large. The minimum font size is 1px or 0.1em\n        // and the maximum font size is 72px or 7.2em depending on the unit used\n        if (fsNew < MIN_FONT_SIZE * delta || fsNew > MAX_FONT_SIZE * delta) {\n            return false;\n        }\n\n        setFontSize(fsStr);\n        return true;\n    }\n\n    /** Increases the font size by 1 */\n    function _handleIncreaseFontSize() {\n        _adjustFontSize(1);\n    }\n\n    /** Decreases the font size by 1 */\n    function _handleDecreaseFontSize() {\n        _adjustFontSize(-1);\n    }\n\n    /** Restores the font size to the original size */\n    function _handleRestoreFontSize() {\n        setFontSize(DEFAULT_FONT_SIZE + \"px\");\n    }\n\n    /**\n     * @private\n     * Updates the user interface appropriately based on whether or not a document is\n     * currently open in the editor.\n     */\n    function _updateUI() {\n        if (DocumentManager.getCurrentDocument() !== null) {\n            if (!CommandManager.get(Commands.VIEW_INCREASE_FONT_SIZE).getEnabled()) {\n                // If one is disabled then they all are disabled, so enable them all\n                CommandManager.get(Commands.VIEW_INCREASE_FONT_SIZE).setEnabled(true);\n                CommandManager.get(Commands.VIEW_DECREASE_FONT_SIZE).setEnabled(true);\n                CommandManager.get(Commands.VIEW_RESTORE_FONT_SIZE).setEnabled(true);\n            }\n        } else {\n            // No current document so disable all of the Font Size commands\n            CommandManager.get(Commands.VIEW_INCREASE_FONT_SIZE).setEnabled(false);\n            CommandManager.get(Commands.VIEW_DECREASE_FONT_SIZE).setEnabled(false);\n            CommandManager.get(Commands.VIEW_RESTORE_FONT_SIZE).setEnabled(false);\n        }\n    }\n\n    /**\n     * Initializes the different settings that need to loaded\n     */\n    function init() {\n        currFontFamily = prefs.get(\"fontFamily\");\n        _addDynamicFontFamily(currFontFamily);\n        currFontSize = prefs.get(\"fontSize\");\n        _addDynamicFontSize(currFontSize);\n        _updateUI();\n    }\n\n    /**\n     * Restores the font size using the saved style and migrates the old fontSizeAdjustment\n     * view state to the new fontSize, when required\n     */\n    function restoreFontSize() {\n        var fsStyle      = prefs.get(\"fontSize\"),\n            fsAdjustment = PreferencesManager.getViewState(\"fontSizeAdjustment\");\n\n        if (fsAdjustment) {\n            // Always remove the old view state even if we also have the new view state.\n            PreferencesManager.setViewState(\"fontSizeAdjustment\");\n\n            if (!fsStyle) {\n                // Migrate the old view state to the new one.\n                fsStyle = (DEFAULT_FONT_SIZE + fsAdjustment) + \"px\";\n                prefs.set(\"fontSize\", fsStyle);\n            }\n        }\n\n        if (fsStyle) {\n            _removeDynamicFontSize();\n            _addDynamicFontSize(fsStyle);\n        }\n    }\n\n    /**\n     * Restores the font size and font family back to factory settings.\n     */\n    function restoreFonts() {\n        setFontFamily(DEFAULT_FONT_FAMILY);\n        setFontSize(DEFAULT_FONT_SIZE + \"px\");\n    }\n\n\n    /**\n     * @private\n     * Calculates the first and last visible lines of the focused editor\n     * @param {number} textHeight\n     * @param {number} scrollTop\n     * @param {number} editorHeight\n     * @return {{first: number, last: number}}\n     */\n    function _getLinesInView(textHeight, scrollTop, editorHeight) {\n        var scrolledTop    = scrollTop / textHeight,\n            scrolledBottom = (scrollTop + editorHeight) / textHeight;\n\n        // Adjust the last line to round inward to show a whole lines.\n        var firstLine      = Math.ceil(scrolledTop),\n            lastLine       = Math.floor(scrolledBottom) - 1;\n\n        return { first: firstLine, last: lastLine };\n    }\n\n    /**\n     * @private\n     * Scroll the viewport one line up or down.\n     * @param {number} direction -1 to scroll one line up; 1 to scroll one line down.\n     */\n    function _scrollLine(direction) {\n        var editor        = EditorManager.getCurrentFullEditor(),\n            textHeight    = editor.getTextHeight(),\n            cursorPos     = editor.getCursorPos(),\n            hasSelecction = editor.hasSelection(),\n            inlineEditors = editor.getInlineWidgets(),\n            scrollInfo    = editor._codeMirror.getScrollInfo(),\n            paddingTop    = editor._getLineSpaceElement().offsetTop,\n            editorHeight  = scrollInfo.clientHeight,\n            scrollTop     = scrollInfo.top - paddingTop,\n            removedScroll = paddingTop;\n\n        // Go through all the editors and reduce the scroll top and editor height to properly calculate the lines in view\n        var line, coords;\n        inlineEditors.forEach(function (inlineEditor) {\n            line   = editor._getInlineWidgetLineNumber(inlineEditor);\n            coords = editor._codeMirror.charCoords({line: line, ch: 0}, \"local\");\n\n            if (coords.top < scrollInfo.top) {\n                scrollTop     -= inlineEditor.info.height;\n                removedScroll += inlineEditor.info.height;\n\n            } else if (coords.top + inlineEditor.info.height < scrollInfo.top + editorHeight) {\n                editorHeight -= inlineEditor.info.height;\n            }\n        });\n\n        // Calculate the lines in view\n        var linesInView = _getLinesInView(textHeight, scrollTop, editorHeight);\n\n        // If there is no selection move the cursor so that is always visible.\n        if (!hasSelecction) {\n            // Move the cursor to the first visible line.\n            if (cursorPos.line < linesInView.first) {\n                editor.setCursorPos({line: linesInView.first + direction, ch: cursorPos.ch});\n\n            // Move the cursor to the last visible line.\n            } else if (cursorPos.line > linesInView.last) {\n                editor.setCursorPos({line: linesInView.last + direction, ch: cursorPos.ch});\n\n            // Move the cursor up or down using moveV to keep the goal column intact, since setCursorPos deletes it.\n            } else if ((direction > 0 && cursorPos.line === linesInView.first) ||\n                    (direction < 0 && cursorPos.line === linesInView.last)) {\n                editor._codeMirror.moveV(direction, \"line\");\n            }\n        }\n\n        // Scroll and make it snap to lines\n        var lines = linesInView.first + direction;\n        editor.setScrollPos(scrollInfo.left, (textHeight * lines) + removedScroll);\n    }\n\n    /** Scrolls one line up */\n    function _handleScrollLineUp() {\n        _scrollLine(-1);\n    }\n\n    /** Scrolls one line down */\n    function _handleScrollLineDown() {\n        _scrollLine(1);\n    }\n\n    /** Open theme settings dialog */\n    function _handleThemeSettings() {\n        ThemeSettings.showDialog();\n    }\n\n    // Register command handlers\n    CommandManager.register(Strings.CMD_INCREASE_FONT_SIZE, Commands.VIEW_INCREASE_FONT_SIZE,  _handleIncreaseFontSize);\n    CommandManager.register(Strings.CMD_DECREASE_FONT_SIZE, Commands.VIEW_DECREASE_FONT_SIZE,  _handleDecreaseFontSize);\n    CommandManager.register(Strings.CMD_RESTORE_FONT_SIZE,  Commands.VIEW_RESTORE_FONT_SIZE,   _handleRestoreFontSize);\n    CommandManager.register(Strings.CMD_SCROLL_LINE_UP,     Commands.VIEW_SCROLL_LINE_UP,      _handleScrollLineUp);\n    CommandManager.register(Strings.CMD_SCROLL_LINE_DOWN,   Commands.VIEW_SCROLL_LINE_DOWN,    _handleScrollLineDown);\n    CommandManager.register(Strings.CMD_THEMES,             Commands.CMD_THEMES_OPEN_SETTINGS, _handleThemeSettings);\n\n    prefs.definePreference(\"fontSize\",   \"string\", DEFAULT_FONT_SIZE + \"px\", {\n        description: Strings.DESCRIPTION_FONT_SIZE\n    }).on(\"change\", function () {\n        setFontSize(prefs.get(\"fontSize\"));\n    });\n    prefs.definePreference(\"fontFamily\", \"string\", DEFAULT_FONT_FAMILY, {\n        description: Strings.DESCRIPTION_FONT_FAMILY\n    }).on(\"change\", function () {\n        setFontFamily(prefs.get(\"fontFamily\"));\n    });\n\n    // Define a preference for font smoothing mode on Mac.\n    // By default fontSmoothing is set to \"subpixel-antialiased\"\n    // for the text inside code editor. It can be overridden\n    // to \"antialiased\", that would set text rendering AA to use\n    // gray scale antialiasing.\n    if (brackets.platform === \"mac\") {\n        prefs.definePreference(\"fontSmoothing\", \"string\", \"subpixel-antialiased\", {\n            description: Strings.DESCRIPTION_FONT_SMOOTHING,\n            values: [\"subpixel-antialiased\", \"antialiased\"]\n        }).on(\"change\", function () {\n            setMacFontSmoothingType(prefs.get(\"fontSmoothing\"));\n        });\n    }\n\n    // Update UI when opening or closing a document\n    MainViewManager.on(\"currentFileChange\", _updateUI);\n\n    // Update UI when Brackets finishes loading\n    AppInit.appReady(init);\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    exports.restoreFontSize = restoreFontSize;\n    exports.restoreFonts    = restoreFonts;\n    exports.getFontSize     = getFontSize;\n    exports.setFontSize     = setFontSize;\n    exports.getFontFamily   = getFontFamily;\n    exports.setFontFamily   = setFontFamily;\n    exports.validFontSizeRegExp = validFontSizeRegExpStr;\n});\n"],"file":"ViewCommandHandlers.js"}