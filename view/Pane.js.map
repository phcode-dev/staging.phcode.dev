{"version":3,"sources":["view/Pane.js"],"names":["define","require","exports","module","_","Mustache","EventDispatcher","FileSystem","InMemoryFile","ViewStateManager","MainViewManager","PreferencesManager","DocumentManager","CommandManager","Commands","Strings","StringUtils","ViewUtils","ProjectManager","paneTemplate","FIRST_PANE","SECOND_PANE","_makeIndexRequestObject","requestIndex","index","indexRequested","_ensurePaneIsFocused","paneId","pane","_getPane","setTimeout","focus","this","_lastFocusedElement","$el","setActivePaneId","Pane","id","$container","_initialize","self","showPaneHeaderButtonsPref","get","append","render","find","$header","$headerText","$headerFlipViewBtn","$headerCloseBtn","$content","on","e","target","currentFile","getCurrentlyViewedFile","otherPaneId","otherPane","sameDocInOtherView","getViewForPath","fullPath","execute","FILE_OPEN","always","activePaneIdBeforeFlip","getActivePaneId","_moveView","trigger","file","FILE_CLOSE","File","setLayoutScheme","Object","defineProperty","set","console","error","updateHeaderText","addClass","css","_makeEventName","bind","_handleFileNameChange","_handleFileDeleted","_handleActivePaneChange","updateFlipViewIcon","definePreference","description","DESCRIPTION_SHOW_PANE_HEADER_BUTTONS","values","DESCRIPTION_MERGE_PANES_WHEN_LAST_FILE_CLOSED","makeEventDispatcher","prototype","_viewList","_viewListMRUOrder","_viewListAddedOrder","_views","_currentView","showInterstitial","name","_reparent","view","appendTo","getFile","notifyContainerChange","_hideCurrentView","currentView","_setViewVisibility","_notifyCurrentViewChange","moveView","destinationPane","destinationIndex","openNextPromise","$","Deferred","result","getCurrentlyViewedPath","nextFile","traverseViewListByMRU","_execOpenFile","fail","resolve","done","viewListIndex","findInViewList","shouldAddView","_doDestroyView","splice","findInViewListMRUOrder","findInViewListAddedOrder","_addToViewList","addView","promise","mergeFrom","other","otherCurrentView","union","viewsToDestroy","forEach","push","_isViewNeeded","indexOf","destroy","keys","length","warn","_reset","off","remove","getViewList","clone","getViewListSize","findIndex","ITEM_NOT_FOUND","ITEM_FOUND_NO_SORT","ITEM_FOUND_NEEDS_SORT","reorderItem","force","curIndex","entry","_canAddFile","hasOwnProperty","_getPaneIdForPath","inPlace","currentPath","unshift","addToViewList","addListToViewList","fileList","uniqueFileList","newView","oldView","_doRemove","preventViewChange","Boolean","makeViewMostRecent","sortViewList","compareFn","sort","partial","moveWorkingSetItem","fromIndex","toIndex","swapViewListIndexes","index1","index2","temp","direction","current","traverseViewArray","paneID","directionIndex","ICON_CLASSES","DIRECTION_STRINGS","TOP","RIGHT","BOTTOM","LEFT","layoutScheme","getLayoutScheme","hasFile","columns","rows","removeClass","join","attr","format","FLIPVIEW_BTN_TOOLTIP","toLowerCase","files","displayName","getAllOpenFiles","filter","item","text","makeProjectRelativeIfPossible","html","EMPTY_VIEW_HEADER","oldname","newname","dispatchEvent","removeView","show","path","parent","markPaneId","showView","visible","notifyVisibilityChange","updateLayout","newPath","updateViewState","destroyViewIfNotNeeded","_updateHeaderHeight","paneContentHeight","height","getPaneCount","outerHeight","hide","forceRefresh","views","_view","CMD_ADD_TO_WORKINGSET_AND_OPEN","options","noPaneActivate","suppressOpenNextFile","needOpenNextFile","removeViews","list","needsDestroyCurrentView","window","document","activeElement","tryFocusingCurrentView","tagName","_codeMirror","blur","$lfe","is","activePaneId","toggleClass","loadState","state","filesToAdd","viewStates","activeFile","data","getInitialViewFilePath","getFileForPath","active","viewState","addViewStates","saveState","currentlyViewedPath","getViewState","getScrollState","getScrollPos","scrollPos","restoreAndAdjustScrollState","heightDelta","adjustScrollPos"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n /**\n  * Pane objects host views of files, editors, etc... Clients cannot access\n  * Pane objects directly. Instead the implementation is protected by the\n  * MainViewManager -- however View Factories are given a Pane object which\n  * they can use to add views.  References to Pane objects should not be kept\n  * as they may be destroyed and removed from the DOM.\n  *\n  * To get a custom view, there are two components:\n  *\n  *  1) A View Factory\n  *  2) A View Object\n  *\n  * View objects are anonymous object that have a particular interface.\n  *\n  * Views can be added to a pane but do not have to exist in the Pane object's view list.\n  * Such views are \"temporary views\".  Temporary views are not serialized with the Pane state\n  * or reconstituted when the pane is serialized from disk.  They are destroyed at the earliest\n  * opportunity.\n  *\n  * Temporary views are added by calling `Pane.showView()` and passing it the view object. The view\n  * will be destroyed when the next view is shown, the pane is mereged with another pane or the \"Close All\"\n  * command is exectuted on the Pane.  Temporary Editor Views do not contain any modifications and are\n  * added to the workingset (and are no longer tempoary views) once the document has been modified. They\n  * will remain in the working set until closed from that point on.\n  *\n  * Views that have a longer life span are added by calling addView to associate the view with a\n  * filename in the _views object.  These views are not destroyed until they are removed from the pane\n  * by calling one of the following: removeView, removeViews, or _reset\n  *\n  * Pane Object Events:\n  *\n  *  - viewListChange - Whenever there is a file change to a file in the working set.  These 2 events: `DocumentManager.pathRemove`\n  *  and `DocumentManager.fileNameChange` will cause a `viewListChange` event so the WorkingSetView can update.\n  *\n  *  - currentViewChange - Whenever the current view changes.\n  *             (e, newView:View, oldView:View)\n  *\n  *  - viewDestroy - Whenever a view has been destroyed\n  *             (e, view:View)\n  *\n  * View Interface:\n  *\n  * The view is an anonymous object which has the following method signatures. see ImageViewer for an example or the sample\n  * provided with Brackets `src/extensions/samples/BracketsConfigCentral`\n  *\n  *     {\n  *         $el:jQuery\n  *         getFile: function ():!File\n  *         updateLayout: function(forceRefresh:boolean)\n  *         destroy: function()\n  *         getScrollPos: function():*=\n  *         adjustScrollPos: function(state:Object=, heightDelta:number)=\n  *         notifyContainerChange: function()=\n  *         notifyVisibilityChange: function(boolean)=\n  *         focus:function()=\n  *     }\n  *\n  * When views are created they can be added to the pane by calling `pane.addView()`.\n  * Views can be created and parented by attaching directly  to `pane.$el`\n  *\n  *     this._codeMirror = new CodeMirror(pane.$el, ...)\n  *\n  * Factories can create a view that's initially hidden by calling `pane.addView(view)` and passing `false` for the show parameter.\n  * Hidden views can be later shown by calling `pane.showView(view)`\n  *\n  * `$el:jQuery!`\n  *\n  *  property that stores the jQuery wrapped DOM element of the view. All views must have one so pane objects can manipulate the DOM\n  *  element when necessary (e.g. `showView`, `_reparent`, etc...)\n  *\n  * `getFile():File!`\n  *\n  *  Called throughout the life of a View when the current file is queried by the system.\n  *\n  * `updateLayout(forceRefresh:boolean)`\n  *\n  *  Called to notify the view that it should be resized to fit its parent container.  This may be called several times\n  *  or only once.  Views can ignore the `forceRefresh` flag. It is used for editor views to force a relayout of the editor\n  *  which probably isn't necessary for most views.  Views should implement their html to be dynamic and not rely on this\n  *  function to be called whenever possible.\n  *\n  * `destroy()`\n  *\n  *  Views must implement a destroy method to remove their DOM element at the very least.  There is no default\n  *  implementation and views are hidden before this method is called. The Pane object doesn't make assumptions\n  *  about when it is safe to remove a node. In some instances other cleanup  must take place before a the DOM\n  *  node is destroyed so the implementation details are left to the view.\n  *\n  *  Views can implement a simple destroy by calling\n  *\n  *      this.$el.remove()\n  *\n  *  These members are optional and need not be implemented by Views\n  *\n  *      getScrollPos()\n  *      adjustScrollPos()\n  *\n  *  The system at various times will want to save and restore a view's scroll position.  The data returned by `getScrollPos()`\n  *  is specific to the view and will be passed back to `adjustScrollPos()` when the scroll position needs to be restored.\n  *\n  *  When Modal Bars are invoked, the system calls `getScrollPos()` so that the current scroll psotion of all visible Views can be cached.\n  *  That cached scroll position is later passed to `adjustScrollPos()` along with a height delta.  The height delta is used to\n  *  scroll the view so that it doesn't appear to have \"jumped\" when invoking the Modal Bar.\n  *\n  *  Height delta will be a positive when the Modal Bar is being shown and negative number when the Modal Bar is being hidden.\n  *\n  *  `getViewState()` is another optional member that is used to cache a view's state when hiding or destroying a view or closing the project.\n  *  The data returned by this member is stored in `ViewStateManager` and is saved with the project.\n  *\n  *  Views or View Factories are responsible for restoring the view state when the view of that file is created by recalling the cached state\n  *\n  *      var view = createIconView(file, pane);\n  *      view.restoreViewState(ViewStateManager.getViewState(file.fullPath));\n  *\n  *  Notifications\n  *  The following optional methods receive notifications from the Pane object when certain events take place which affect the view:\n  *\n  * `notifyContainerChange()`\n  *\n  *  Optional Notification callback called when the container changes. The view can perform any synchronization or state update\n  *  it needs to do when its parent container changes.\n  *\n  * `notifyVisiblityChange()`\n  *\n  *  Optional Notification callback called when the view's vsibility changes.  The view can perform any synchronization or\n  *  state update it needs to do when its visiblity state changes.\n  */\ndefine(function (require, exports, module) {\n\n\n    var _                   = require(\"thirdparty/lodash\"),\n        Mustache            = require(\"thirdparty/mustache/mustache\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        FileSystem          = require(\"filesystem/FileSystem\"),\n        InMemoryFile        = require(\"document/InMemoryFile\"),\n        ViewStateManager    = require(\"view/ViewStateManager\"),\n        MainViewManager     = require(\"view/MainViewManager\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        DocumentManager     = require(\"document/DocumentManager\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        Commands            = require(\"command/Commands\"),\n        Strings             = require(\"strings\"),\n        StringUtils         = require(\"utils/StringUtils\"),\n        ViewUtils           = require(\"utils/ViewUtils\"),\n        ProjectManager      = require(\"project/ProjectManager\"),\n        paneTemplate        = require(\"text!htmlContent/pane.html\");\n\n    /**\n     * Internal pane id\n     * @const\n     * @private\n     */\n    var FIRST_PANE          = \"first-pane\";\n\n    /**\n     * Internal pane id\n     * @const\n     * @private\n     */\n    var SECOND_PANE         = \"second-pane\";\n\n    // Define showPaneHeaderButtons, which controls when to show close and flip-view buttons\n    // on the header.\n    PreferencesManager.definePreference(\"pane.showPaneHeaderButtons\", \"string\", \"hover\", {\n        description: Strings.DESCRIPTION_SHOW_PANE_HEADER_BUTTONS,\n        values: [\"hover\", \"always\", \"never\"]\n    });\n\n    // Define mergePanesWhenLastFileClosed, which controls if a split view pane should be\n    // closed when the last file is closed, skipping the \"Open a file while this pane has focus\"\n    // step completely.\n    PreferencesManager.definePreference(\"pane.mergePanesWhenLastFileClosed\", \"boolean\", false, {\n        description: Strings.DESCRIPTION_MERGE_PANES_WHEN_LAST_FILE_CLOSED\n    });\n\n    /**\n     * Make an index request object\n     * @param {boolean} requestIndex - true to request an index, false if not\n     * @param {number} index - the index to request\n     * @return {indexRequested:boolean, index:number} an object that can be passed to\n     * {@link Pane#addToViewList} to insert the item at a specific index\n     * @see Pane#addToViewList\n     */\n    function _makeIndexRequestObject(requestIndex, index) {\n        return {indexRequested: requestIndex, index: index};\n    }\n\n    /**\n     * Ensures that the given pane is focused after other focus related events occur\n     * @params {string} paneId - paneId of the pane to focus\n     * @private\n     */\n    function _ensurePaneIsFocused(paneId) {\n        var pane = MainViewManager._getPane(paneId);\n\n        // Defer the focusing until other focus events have occurred.\n        setTimeout(function () {\n            // Focus has most likely changed: give it back to the given pane.\n            pane.focus();\n            this._lastFocusedElement = pane.$el[0];\n            MainViewManager.setActivePaneId(paneId);\n        }, 1);\n    }\n\n    /**\n     * @typedef {!$el: jQuery, getFile:function():!File, updateLayout:function(forceRefresh:boolean), destroy:function(),  getScrollPos:function():?,  adjustScrollPos:function(state:Object=, heightDelta:number)=, getViewState:function():?*=, restoreViewState:function(viewState:!*)=, notifyContainerChange:function()=, notifyVisibilityChange:function(boolean)=} View\n     */\n\n    /**\n     * Pane Objects are constructed by the MainViewManager object when a Pane view is needed\n     * @see {@link MainViewManager} for more information\n     *\n     * @constructor\n     * @param {!string} id - The id to use to identify this pane\n     * @param {!JQuery} $container - The parent $container to place the pane view\n     */\n    function Pane(id, $container) {\n        this._initialize();\n\n        // Setup the container and the element we're inserting\n        var self = this,\n            showPaneHeaderButtonsPref = PreferencesManager.get(\"pane.showPaneHeaderButtons\"),\n            $el = $container.append(Mustache.render(paneTemplate, {id: id})).find(\"#\" + id),\n            $header  = $el.find(\".pane-header\"),\n            $headerText = $header.find(\".pane-header-text\"),\n            $headerFlipViewBtn = $header.find(\".pane-header-flipview-btn\"),\n            $headerCloseBtn = $header.find(\".pane-header-close-btn\"),\n            $content = $el.find(\".pane-content\");\n\n        $el.on(\"focusin.pane\", function (e) {\n            self._lastFocusedElement = e.target;\n        });\n\n        // Flips the current file to the other pane when clicked\n        $headerFlipViewBtn.on(\"click.pane\", function (e) {\n            var currentFile = self.getCurrentlyViewedFile();\n            var otherPaneId = self.id === FIRST_PANE ? SECOND_PANE : FIRST_PANE;\n            var otherPane = MainViewManager._getPane(otherPaneId);\n            var sameDocInOtherView = otherPane.getViewForPath(currentFile.fullPath);\n\n            // If the same doc view is present in the destination, show the file instead of flipping it\n            if (sameDocInOtherView) {\n                CommandManager.execute(Commands.FILE_OPEN, {fullPath: currentFile.fullPath,\n                    paneId: otherPaneId}).always(function () {\n                        _ensurePaneIsFocused(otherPaneId);\n                    });\n                return;\n            }\n\n            // Currently active pane is not necessarily self.id as just clicking the button does not\n            // give focus to the pane. This way it is possible to flip multiple panes to the active one\n            // without losing focus.\n            var activePaneIdBeforeFlip = MainViewManager.getActivePaneId();\n\n            MainViewManager._moveView(self.id, otherPaneId, currentFile).always(function () {\n                CommandManager.execute(Commands.FILE_OPEN, {fullPath: currentFile.fullPath,\n                    paneId: otherPaneId}).always(function () {\n                    // Trigger view list changes for both panes\n                        self.trigger(\"viewListChange\");\n                        otherPane.trigger(\"viewListChange\");\n                        _ensurePaneIsFocused(activePaneIdBeforeFlip);\n                    });\n            });\n        });\n\n        // Closes the current view on the pane when clicked. If pane has no files, merge\n        // panes.\n        $headerCloseBtn.on(\"click.pane\", function () {\n            //set clicked pane as active to ensure that this._currentView is updated before closing\n            MainViewManager.setActivePaneId(self.id);\n            var file = self.getCurrentlyViewedFile();\n\n            if (file) {\n                CommandManager.execute(Commands.FILE_CLOSE, {File: file, paneId: self.id});\n\n                if (!self.getCurrentlyViewedFile() && PreferencesManager.get(\"pane.mergePanesWhenLastFileClosed\")) {\n                    MainViewManager.setLayoutScheme(1, 1);\n                }\n            } else {\n                MainViewManager.setLayoutScheme(1, 1);\n            }\n        });\n\n        this._lastFocusedElement = $el[0];\n\n        // Make these properties read only\n        Object.defineProperty(this,  \"id\", {\n            get: function () {\n                return id;\n            },\n            set: function () {\n                console.error(\"cannot change the id of a working pane\");\n            }\n        });\n\n        Object.defineProperty(this,  \"$el\", {\n            get: function () {\n                return $el;\n            },\n            set: function () {\n                console.error(\"cannot change the DOM node of a working pane\");\n            }\n        });\n\n        Object.defineProperty(this,  \"$header\", {\n            get: function () {\n                return $header;\n            },\n            set: function () {\n                console.error(\"cannot change the DOM node of a working pane\");\n            }\n        });\n\n        Object.defineProperty(this,  \"$headerText\", {\n            get: function () {\n                return $headerText;\n            },\n            set: function () {\n                console.error(\"cannot change the DOM node of a working pane\");\n            }\n        });\n\n        Object.defineProperty(this,  \"$headerFlipViewBtn\", {\n            get: function () {\n                return $headerFlipViewBtn;\n            },\n            set: function () {\n                console.error(\"cannot change the DOM node of a working pane\");\n            }\n        });\n\n        Object.defineProperty(this,  \"$headerCloseBtn\", {\n            get: function () {\n                return $headerCloseBtn;\n            },\n            set: function () {\n                console.error(\"cannot change the DOM node of a working pane\");\n            }\n        });\n\n        Object.defineProperty(this,  \"$content\", {\n            get: function () {\n                return $content;\n            },\n            set: function () {\n                console.error(\"cannot change the DOM node of a working pane\");\n            }\n        });\n\n        Object.defineProperty(this,  \"$container\", {\n            get: function () {\n                return $container;\n            },\n            set: function () {\n                console.error(\"cannot change the DOM node of a working pane\");\n            }\n        });\n\n        this.updateHeaderText();\n\n        switch (showPaneHeaderButtonsPref) {\n        case \"always\":\n            this.$header.addClass(\"always-show-header-buttons\");\n            break;\n        case \"never\":\n            this.$headerFlipViewBtn.css(\"display\", \"none\");\n            this.$headerCloseBtn.css(\"display\", \"none\");\n            break;\n        }\n\n        // Listen to document events so we can update ourself\n        DocumentManager.on(this._makeEventName(\"fileNameChange\"),  _.bind(this._handleFileNameChange, this));\n        DocumentManager.on(this._makeEventName(\"pathDeleted\"), _.bind(this._handleFileDeleted, this));\n        MainViewManager.on(this._makeEventName(\"activePaneChange\"), _.bind(this._handleActivePaneChange, this));\n        MainViewManager.on(this._makeEventName(\"workingSetAdd\"), _.bind(this.updateHeaderText, this));\n        MainViewManager.on(this._makeEventName(\"workingSetRemove\"), _.bind(this.updateHeaderText, this));\n        MainViewManager.on(this._makeEventName(\"workingSetAddList\"), _.bind(this.updateHeaderText, this));\n        MainViewManager.on(this._makeEventName(\"workingSetRemoveList\"), _.bind(this.updateHeaderText, this));\n        MainViewManager.on(this._makeEventName(\"paneLayoutChange\"), _.bind(this.updateFlipViewIcon, this));\n    }\n    EventDispatcher.makeEventDispatcher(Pane.prototype);\n\n    /**\n     * id of the pane\n     * @readonly\n     * @type {!string}\n     */\n    Pane.prototype.id = null;\n\n    /**\n     * container where the pane lives\n     * @readonly\n     * @type {JQuery}\n     */\n    Pane.prototype.$container = null;\n\n    /**\n     * the wrapped DOM node of this pane\n     * @readonly\n     * @type {JQuery}\n     */\n    Pane.prototype.$el = null;\n\n    /**\n     * the wrapped DOM node container that contains name of current view and the switch view button, or informational string if there is no view\n     * @readonly\n     * @type {JQuery}\n     */\n    Pane.prototype.$header = null;\n\n    /**\n     * the wrapped DOM node that contains name of current view, or informational string if there is no view\n     * @readonly\n     * @type {JQuery}\n     */\n    Pane.prototype.$headerText = null;\n\n    /**\n     * the wrapped DOM node that is used to flip the view to another pane\n     * @readonly\n     * @type {JQuery}\n     */\n    Pane.prototype.$headerFlipViewBtn = null;\n\n    /**\n     * close button of the pane\n     * @readonly\n     * @type {JQuery}\n     */\n    Pane.prototype.$headerCloseBtn = null;\n\n    /**\n     * the wrapped DOM node that contains views\n     * @readonly\n     * @type {JQuery}\n     */\n    Pane.prototype.$content = null;\n\n    /**\n     * The list of files views\n     * @type {Array.<File>}\n     */\n    Pane.prototype._viewList = [];\n\n    /**\n     * The list of files views in MRU order\n     * @type {Array.<File>}\n     */\n    Pane.prototype._viewListMRUOrder = [];\n\n    /**\n     * The list of files views in Added order\n     * @type {Array.<File>}\n     */\n    Pane.prototype._viewListAddedOrder = [];\n\n    /**\n     * Dictionary mapping fullpath to view\n     * @type {Object.<!string, !View>}\n     * @private\n     */\n    Pane.prototype._views = {};\n\n    /**\n     * The current view\n     * @type {?View}\n     * @private\n     */\n    Pane.prototype._currentView = null;\n\n    /**\n     * The last thing that received a focus event\n     * @type {?DomElement}\n     * @private\n     */\n    Pane.prototype._lastFocusedElement = null;\n\n    /**\n     * Initializes the Pane to its default state\n     * @private\n     */\n    Pane.prototype._initialize = function () {\n        this._viewList = [];\n        this._viewListMRUOrder = [];\n        this._viewListAddedOrder = [];\n        this._views = {};\n        this._currentView = null;\n        this.showInterstitial(true);\n    };\n\n   /**\n     * Creates a pane event namespaced to this pane\n     * (pass an empty string to generate just the namespace key to pass to jQuery to turn off all events handled by this pane)\n     * @private\n     * @param {!string} name - the name of the event to namespace\n     * @return {string} an event namespaced to this pane\n     */\n    Pane.prototype._makeEventName = function (name) {\n        return name + \".pane-\" + this.id;\n    };\n\n   /**\n     * Reparents a view to this pane\n     * @private\n     * @param {!View} view - the view to reparent\n     */\n    Pane.prototype._reparent = function (view) {\n        view.$el.appendTo(this.$content);\n        this._views[view.getFile().fullPath] = view;\n        if (view.notifyContainerChange) {\n            view.notifyContainerChange();\n        }\n    };\n\n    /**\n     * Hides the current view if there is one, shows the\n     *  interstitial screen and notifies that the view changed\n     */\n    Pane.prototype._hideCurrentView = function () {\n        if (this._currentView) {\n            var currentView = this._currentView;\n            this._setViewVisibility(this._currentView, false);\n            this.showInterstitial(true);\n            this._currentView = null;\n            this._notifyCurrentViewChange(null, currentView);\n        }\n    };\n\n    /**\n     * moves a view from one pane to another\n     * @param {!File} file - the File to move\n     * @param {Pane} destinationPane - the destination pane\n     * @param {Number} destinationIndex - the working set index of the file in the destination pane\n     * @return {jQuery.Promise} a promise object which resolves after the view has been moved and its\n     * replacement document has been opened\n     * @private\n     */\n    Pane.prototype.moveView = function (file, destinationPane, destinationIndex) {\n        var self = this,\n            openNextPromise = new $.Deferred(),\n            result = new $.Deferred();\n\n        // if we're moving the currently viewed file we\n        //  need to open another file so wait for that operation\n        //  to finish before we move the view\n        if ((this.getCurrentlyViewedPath() === file.fullPath)) {\n            var nextFile = this.traverseViewListByMRU(1, file.fullPath);\n            if (nextFile) {\n                this._execOpenFile(nextFile.fullPath)\n                    .fail(function () {\n                        // the FILE_OPEN failed\n                        self._hideCurrentView();\n                    })\n                    .always(function () {\n                        openNextPromise.resolve();\n                    });\n            } else {\n                this._hideCurrentView();\n                openNextPromise.resolve();\n            }\n        } else {\n            openNextPromise.resolve();\n        }\n\n        // Once the next file has opened, we can\n        //  move the item in the working set and\n        //  open it in the destination pane\n        openNextPromise.done(function () {\n            var viewListIndex = self.findInViewList(file.fullPath);\n            var shouldAddView = viewListIndex !== -1;\n            var view = self._views[file.fullPath];\n\n            // If the file isn't in working set, destroy the view and delete it from\n            // source pane's view map and return as solved\n            if (!shouldAddView) {\n                if (view) {\n                    self._doDestroyView(view);\n                }\n                return result.resolve();\n            }\n\n            // Remove file from all 3 view lists\n            self._viewList.splice(viewListIndex, 1);\n            self._viewListMRUOrder.splice(self.findInViewListMRUOrder(file.fullPath), 1);\n            self._viewListAddedOrder.splice(self.findInViewListAddedOrder(file.fullPath), 1);\n\n            // insert the view into the working set\n            destinationPane._addToViewList(file,  _makeIndexRequestObject(true, destinationIndex));\n\n            // if we had a view, it had previously been opened\n            // otherwise, the file was in the working set unopened\n            if (view) {\n                // delete it from the source pane's view map and add it to the destination pane's view map\n                delete self._views[file.fullPath];\n                destinationPane.addView(view, !destinationPane.getCurrentlyViewedFile());\n\n                // we're done\n                result.resolve();\n            } else if (!destinationPane.getCurrentlyViewedFile()) {\n                // The view has not have been created and the pane was\n                //  not showing anything so open the file moved in to the pane\n                destinationPane._execOpenFile(file.fullPath).always(function () {\n                    // wait until the file has been opened before\n                    //  we resolve the promise so the working set\n                    //  view can sync appropriately\n                    result.resolve();\n                });\n            } else {\n                // nothing to do, we're done\n                result.resolve();\n            }\n        });\n        return result.promise();\n    };\n\n    /**\n     * Merges the another Pane object's contents into this Pane\n     * @param {!Pane} Other - Pane from which to copy\n     */\n    Pane.prototype.mergeFrom = function (other) {\n        // save this because we're setting it to null and we\n        //  may need to destroy it if it's a temporary view\n        var otherCurrentView = other._currentView;\n\n        // Hide the current view while we\n        //  merge the 2 panes together\n        other._hideCurrentView();\n\n        // Copy the File lists\n        this._viewList = _.union(this._viewList, other._viewList);\n        this._viewListMRUOrder = _.union(this._viewListMRUOrder, other._viewListMRUOrder);\n        this._viewListAddedOrder = _.union(this._viewListAddedOrder, other._viewListAddedOrder);\n\n        var self = this,\n            viewsToDestroy = [];\n\n        // Copy the views\n        _.forEach(other._views, function (view) {\n            var file = view.getFile(),\n                fullPath = file && file.fullPath;\n            if (fullPath && other.findInViewList(fullPath) !== -1) {\n                // switch the container to this Pane\n                self._reparent(view);\n            } else {\n                // We don't copy temporary views so destroy them\n                viewsToDestroy.push(view);\n            }\n        });\n\n        // 1-off views\n        if (otherCurrentView && !other._isViewNeeded(otherCurrentView) && viewsToDestroy.indexOf(otherCurrentView) === -1) {\n            viewsToDestroy.push(otherCurrentView);\n        }\n\n        // Destroy temporary views\n        _.forEach(viewsToDestroy, function (view) {\n            self.trigger(\"viewDestroy\", view);\n            view.destroy();\n        });\n\n        // this _reset all internal data structures\n        //  and will set the current view to null\n        other._initialize();\n    };\n\n    /**\n     * Removes the DOM node for the Pane, removes all\n     *  event handlers and _resets all internal data structures\n     */\n    Pane.prototype.destroy = function () {\n        if (this._currentView ||\n                Object.keys(this._views).length > 0 ||\n                this._viewList.length > 0) {\n            console.warn(\"destroying a pane that isn't empty\");\n        }\n\n        this._reset();\n\n        DocumentManager.off(this._makeEventName(\"\"));\n        MainViewManager.off(this._makeEventName(\"\"));\n\n        this.$el.off(\".pane\");\n        this.$el.remove();\n    };\n\n   /**\n     * Returns a copy of the view file list\n     * @return {!Array.<File>}\n     */\n    Pane.prototype.getViewList = function () {\n        return _.clone(this._viewList);\n    };\n\n    /**\n     * Returns the number of entries in the view file list\n     * @return {number}\n     */\n    Pane.prototype.getViewListSize = function () {\n        return this._viewList.length;\n    };\n\n    /**\n     * Returns the index of the item in the view file list\n     * @param {!string} fullPath the full path of the item to look for\n     * @return {number} index of the item or -1 if not found\n     */\n    Pane.prototype.findInViewList = function (fullPath) {\n        return _.findIndex(this._viewList, function (file) {\n            return file.fullPath === fullPath;\n        });\n    };\n\n    /**\n     * Returns the order in which the item was added\n     * @param {!string} fullPath the full path of the item to look for\n     * @return {number} order of the item or -1 if not found\n     */\n    Pane.prototype.findInViewListAddedOrder = function (fullPath) {\n        return _.findIndex(this._viewListAddedOrder, function (file) {\n            return file.fullPath === fullPath;\n        });\n    };\n\n   /**\n     * Returns the order in which the item was last used\n     * @param {!string} fullPath the full path of the item to look for\n     * @return {number} order of the item or -1 if not found.\n     *      0 indicates most recently used, followed by 1 and so on...\n     */\n    Pane.prototype.findInViewListMRUOrder = function (fullPath) {\n        return _.findIndex(this._viewListMRUOrder, function (file) {\n            return file.fullPath === fullPath;\n        });\n    };\n\n    /**\n     * Return value from reorderItem when the Item was not found\n     * @see {@link Pane#reorderItem}\n     * @const\n     */\n    Pane.prototype.ITEM_NOT_FOUND = -1;\n\n    /**\n     * Return value from reorderItem when the Item was found at its natural index\n     * and the workingset does not need to be resorted\n     * @see {@link Pane#reorderItem}\n     * @const\n     */\n    Pane.prototype.ITEM_FOUND_NO_SORT = 0;\n\n    /**\n     * Return value from reorderItem when the Item was found and reindexed\n     * and the workingset needs to be resorted\n     * @see {@link Pane#reorderItem}\n     * @const\n     */\n    Pane.prototype.ITEM_FOUND_NEEDS_SORT = 1;\n\n    /**\n     * reorders the specified file in the view list to the desired position\n     *\n     * @param {File} file - the file object of the item to reorder\n     * @param {number=} index - the new position of the item\n     * @param {boolean=} force - true to force the item into that position, false otherwise.  (Requires an index be requested)\n     * @return {number} this function returns one of the following manifest constants:\n     *            ITEM_NOT_FOUND        : The request file object was not found\n     *            ITEM_FOUND_NO_SORT    : The request file object was found but it was already at the requested index\n     *            ITEM_FOUND_NEEDS_SORT : The request file object was found and moved to a new index and the list should be resorted\n     */\n    Pane.prototype.reorderItem = function (file, index, force) {\n        var indexRequested = (index !== undefined && index !== null && index >= 0),\n            curIndex = this.findInViewList(file.fullPath);\n\n        if (curIndex !== -1) {\n            // File is in view list, but not at the specifically requested index - only need to reorder\n            if (force || (indexRequested && curIndex !== index)) {\n                var entry = this._viewList.splice(curIndex, 1)[0];\n                this._viewList.splice(index, 0, entry);\n                return this.ITEM_FOUND_NEEDS_SORT;\n            }\n            return this.ITEM_FOUND_NO_SORT;\n        }\n\n        return this.ITEM_NOT_FOUND;\n    };\n\n    /**\n     * Determines if a file can be added to our file list\n     * @private\n     * @param {!File} file - file object to test\n     * @return {boolean} true if it can be added, false if not\n     */\n    Pane.prototype._canAddFile = function (file) {\n        return ((this._views.hasOwnProperty(file.fullPath) && this.findInViewList(file.fullPath) === -1) ||\n                    (MainViewManager._getPaneIdForPath(file.fullPath) !== this.id));\n    };\n\n    /**\n     * Adds the given file to the end of the workingset, if it is not already in the list\n     * @private\n     * @param {!File} file\n     * @param {Object=} inPlace record with inPlace add data (index, indexRequested). Used internally\n     */\n    Pane.prototype._addToViewList = function (file, inPlace) {\n        if (inPlace && inPlace.indexRequested) {\n            // If specified, insert into the workingset at this 0-based index\n            this._viewList.splice(inPlace.index, 0, file);\n        } else {\n            // If no index is specified, just add the file to the end of the workingset.\n            this._viewList.push(file);\n        }\n\n        // Add to MRU order: either first or last, depending on whether it's already the current doc or not\n        var currentPath = this.getCurrentlyViewedPath();\n        if (currentPath && currentPath === file.fullPath) {\n            this._viewListMRUOrder.unshift(file);\n        } else {\n            this._viewListMRUOrder.push(file);\n        }\n\n        // Add first to Added order\n        this._viewListAddedOrder.unshift(file);\n    };\n\n\n    /**\n     * Adds the given file to the end of the workingset, if it is not already in the list\n     * Does not change which document is currently open in the editor. Completes synchronously.\n     * @param {!File} file - file to add\n     * @param {number=} index - position where to add the item\n     * @return {number} index of where the item was added\n     */\n    Pane.prototype.addToViewList = function (file, index) {\n        var indexRequested = (index !== undefined && index !== null && index >= 0 && index < this._viewList.length);\n        this._addToViewList(file, _makeIndexRequestObject(indexRequested, index));\n\n        if (!indexRequested) {\n            index = this._viewList.length - 1;\n        }\n\n        return index;\n    };\n\n\n    /**\n     * Adds the given file list to the end of the workingset.\n     * @param {!Array.<File>} fileList\n     * @return {!Array.<File>} list of files added to the list\n     */\n    Pane.prototype.addListToViewList = function (fileList) {\n        var self = this,\n            uniqueFileList = [];\n\n        // Process only files not already in view list\n        fileList.forEach(function (file) {\n            if (self._canAddFile(file)) {\n                self._addToViewList(file);\n                uniqueFileList.push(file);\n            }\n        });\n\n        return uniqueFileList;\n    };\n\n    /**\n     * Dispatches a currentViewChange event\n     * @param {?View} newView - the view become the current view\n     * @param {?View} oldView - the view being replaced\n     */\n    Pane.prototype._notifyCurrentViewChange = function (newView, oldView) {\n        this.updateHeaderText();\n\n        this.trigger(\"currentViewChange\", newView, oldView);\n    };\n\n\n    /**\n     * Destroys a view and removes it from the view map. If it is the current view then the view\n     * is first hidden and the interstitial page is displayed\n     * @private\n     * @param {!View} view - view to destroy\n     */\n    Pane.prototype._doDestroyView = function (view) {\n        if (this._currentView === view) {\n            // if we're removing the current\n            //  view then we need to hide the view\n            this._hideCurrentView();\n        }\n        delete this._views[view.getFile().fullPath];\n        this.trigger(\"viewDestroy\", view);\n        view.destroy();\n    };\n\n    /**\n     * Removes the specifed file from all internal lists, destroys the view of the file (if there is one)\n     *  and shows the interstitial page if the current view is destroyed\n     * @private\n     * @param {!File} file - file to remove\n     * @param {boolean} preventViewChange - false to hide the current view if removing the current view, true\n     *                                      to prevent the current view from changing.\n     *\n     * When passing true for preventViewChange, it is assumed that the caller will perform an OPEN_FILE op\n     * to show the next file in line to view.  Since the file was removed from the workingset in _doRemove\n     * its view is now considered to be a temporary view and the call to showView for the OPEN_FILE op\n     * will destroy the view. the caller needs to handle the reject case in the event of failure\n     *\n     * @return {boolean} true if removed, false if the file was not found either in a list or view\n     */\n    Pane.prototype._doRemove = function (file, preventViewChange) {\n\n        // If it's in the view list then we need to remove it\n        var index = this.findInViewList(file.fullPath);\n\n        if (index > -1) {\n            // Remove it from all 3 view lists\n            this._viewList.splice(index, 1);\n            this._viewListMRUOrder.splice(this.findInViewListMRUOrder(file.fullPath), 1);\n            this._viewListAddedOrder.splice(this.findInViewListAddedOrder(file.fullPath), 1);\n        }\n\n        // Destroy the view\n        var view = this._views[file.fullPath];\n\n        if (view) {\n            if (!preventViewChange) {\n                this._doDestroyView(view);\n            }\n        }\n\n        return ((index > -1) || Boolean(view));\n    };\n\n    /**\n     * Moves the specified file to the front of the MRU list\n     * @param {!File} file\n     */\n    Pane.prototype.makeViewMostRecent = function (file) {\n        var index = this.findInViewListMRUOrder(file.fullPath);\n        if (index !== -1) {\n            this._viewListMRUOrder.splice(index, 1);\n            this._viewListMRUOrder.unshift(file);\n        }\n    };\n\n    /**\n     * Sorts items in the pane's view list\n     * @param {function(paneId:!string, left:!string, right:!string):number} compareFn - the function used to compare items in the viewList\n     */\n\n    /**\n     * invokes Array.sort method on the internal view list.\n     * @param {sortFunctionCallback} compareFn - the function to call to determine if the\n     */\n    Pane.prototype.sortViewList = function (compareFn) {\n        this._viewList.sort(_.partial(compareFn, this.id));\n    };\n\n    /**\n     * moves a working set item from one index to another shifting the items\n     * after in the working set up and reinserting it at the desired location\n     * @param {!number} fromIndex - the index of the item to move\n     * @param {!number} toIndex - the index to move to\n     * @private\n     */\n    Pane.prototype.moveWorkingSetItem = function (fromIndex, toIndex) {\n        this._viewList.splice(toIndex, 0, this._viewList.splice(fromIndex, 1)[0]);\n    };\n\n    /**\n     * Swaps two items in the file view list (used while dragging items in the working set view)\n     * @param {number} index1 - the index of the first item to swap\n     * @param {number} index2 - the index of the second item to swap\n     * @return {boolean}} true\n     */\n    Pane.prototype.swapViewListIndexes = function (index1, index2) {\n        var temp = this._viewList[index1];\n        this._viewList[index1] = this._viewList[index2];\n        this._viewList[index2] = temp;\n        return true;\n    };\n\n    /**\n     * Traverses the list and returns the File object of the next item in the MRU order\n     * @param {!number} direction - Must be 1 or -1 to traverse forward or backward\n     * @param {string=} current - the fullPath of the item where traversal is to start.\n     *                              If this parameter is omitted then the path of the current view is used.\n     *                              If the current view is a temporary view then the first item in the MRU list is returned\n     * @return {?File}  The File object of the next item in the travesal order or null if there isn't one.\n     */\n    Pane.prototype.traverseViewListByMRU = function (direction, current) {\n        if (!current && this._currentView) {\n            var file = this._currentView.getFile();\n            current = file && file.fullPath;\n        }\n\n        var index = current ? this.findInViewListMRUOrder(current) : -1;\n        return ViewUtils.traverseViewArray(this._viewListMRUOrder, index, direction);\n    };\n\n    /**\n     * Updates flipview icon in pane header\n     * @private\n     */\n    Pane.prototype.updateFlipViewIcon = function () {\n        var paneID = this.id,\n            directionIndex = 0,\n            ICON_CLASSES = [\"flipview-icon-none\", \"flipview-icon-top\", \"flipview-icon-right\", \"flipview-icon-bottom\", \"flipview-icon-left\"],\n            DIRECTION_STRINGS = [\"\", Strings.TOP, Strings.RIGHT, Strings.BOTTOM, Strings.LEFT],\n            layoutScheme = MainViewManager.getLayoutScheme(),\n            hasFile = this.getCurrentlyViewedFile();\n\n        if (layoutScheme.columns > 1 && hasFile) {\n            directionIndex = paneID === FIRST_PANE ? 2 : 4;\n        } else if (layoutScheme.rows > 1 && hasFile) {\n            directionIndex = paneID === FIRST_PANE ? 3 : 1;\n        }\n\n        this.$headerFlipViewBtn.removeClass(ICON_CLASSES.join(\" \"))\n                      .addClass(ICON_CLASSES[directionIndex]);\n\n        this.$headerFlipViewBtn.attr(\"title\", StringUtils.format(Strings.FLIPVIEW_BTN_TOOLTIP,  DIRECTION_STRINGS[directionIndex].toLowerCase()));\n    };\n\n    /**\n     * Updates text in pane header\n     * @private\n     */\n    Pane.prototype.updateHeaderText = function () {\n        var file = this.getCurrentlyViewedFile(),\n            files,\n            displayName;\n\n        if (file) {\n            files = MainViewManager.getAllOpenFiles().filter(function (item) {\n                return (item.name === file.name);\n            });\n            if (files.length < 2) {\n                this.$headerText.text(file.name);\n            } else {\n                displayName = ProjectManager.makeProjectRelativeIfPossible(file.fullPath);\n                this.$headerText.text(displayName);\n            }\n        } else {\n            this.$headerText.html(Strings.EMPTY_VIEW_HEADER);\n        }\n\n        this.updateFlipViewIcon();\n    };\n\n    /**\n     * Event handler when a file changes name\n     * @private\n     * @param {!JQuery.Event} e - jQuery event object\n     * @param {!string} oldname - path of the file that was renamed\n     * @param {!string} newname - the new path to the file\n     */\n    Pane.prototype._handleFileNameChange = function (e, oldname, newname) {\n        // Check to see if we need to dispatch a viewListChange event\n        // The list contains references to file objects and, for a rename event,\n        // the File object's name has changed by the time we've gotten the event.\n        // So, we need to look for the file by its new name to determine if\n        // if we need to dispatch the event which may look funny\n        var dispatchEvent = (this.findInViewList(newname) >= 0);\n\n        // rename the view\n        if (this._views.hasOwnProperty(oldname)) {\n            var view = this._views[oldname];\n\n            this._views[newname] = view;\n            delete this._views[oldname];\n        }\n\n        this.updateHeaderText();\n\n        // dispatch the change event\n        if (dispatchEvent) {\n            this.trigger(\"viewListChange\");\n        }\n    };\n\n    /**\n     * Event handler when a file is deleted\n     * @private\n     * @param {!JQuery.Event} e - jQuery event object\n     * @param {!string} fullPath - path of the file that was deleted\n     */\n    Pane.prototype._handleFileDeleted = function (e, fullPath) {\n        if (this.removeView({fullPath: fullPath})) {\n            this.trigger(\"viewListChange\");\n        }\n    };\n\n    /**\n     * Shows the pane's interstitial page\n     * @param {boolean} show - show or hide the interstitial page\n     */\n    Pane.prototype.showInterstitial = function (show) {\n        if (this.$content) {\n            this.$content.find(\".not-editor\").css(\"display\", (show) ? \"\" : \"none\");\n        }\n    };\n\n    /**\n     * retrieves the view object for the given path\n     * @param {!string}  path - the fullPath of the view to retrieve\n     * @return {boolean} show - show or hide the interstitial page\n     */\n    Pane.prototype.getViewForPath = function (path) {\n        return this._views[path];\n    };\n\n    /**\n     * Adds a view to the pane\n     * @param {!View} view - the View object to add\n     * @param {boolean} show - true to show the view right away, false otherwise\n     */\n    Pane.prototype.addView = function (view, show) {\n        var file = view.getFile(),\n            path = file && file.fullPath;\n\n        if (!path) {\n            console.error(\"cannot add a view that does not have a fullPath\");\n            return;\n        }\n\n        if (view.$el.parent() !== this.$content) {\n            this._reparent(view);\n        } else {\n            this._views[path] = view;\n        }\n\n        // Ensure that we don't endup marking the custom views\n        if (view.markPaneId) {\n            view.markPaneId(this.id);\n        }\n\n        if (show) {\n            this.showView(view);\n        }\n    };\n\n    /**\n     * Shows or hides a view\n     * @param {!View} view - the to show or hide\n     * @param {boolean} visible - true to show the view, false to hide it\n     * @private\n     */\n    Pane.prototype._setViewVisibility = function (view, visible) {\n        view.$el.css(\"display\", (visible ? \"\" : \"none\"));\n        if (view.notifyVisibilityChange) {\n            view.notifyVisibilityChange(visible);\n        }\n    };\n\n    /**\n     * Swaps the current view with the requested view.\n     * If the interstitial page is shown, it is hidden.\n     * If the currentView is a temporary view, it is destroyed.\n     * @param {!View} view - the to show\n     */\n    Pane.prototype.showView = function (view) {\n        if (this._currentView && this._currentView === view) {\n            this._setViewVisibility(this._currentView, true);\n            this.updateLayout(true);\n            return;\n        }\n\n        var file = view.getFile(),\n            newPath = file && file.fullPath,\n            oldView = this._currentView;\n\n        if (this._currentView) {\n            if (this._currentView.getFile()) {\n                ViewStateManager.updateViewState(this._currentView);\n            }\n            this._setViewVisibility(this._currentView, false);\n        } else {\n            this.showInterstitial(false);\n        }\n\n        this._currentView = view;\n        this._setViewVisibility(this._currentView, true);\n        this.updateLayout();\n\n        this._notifyCurrentViewChange(view, oldView);\n\n        if (oldView) {\n            this.destroyViewIfNotNeeded(oldView);\n        }\n\n        if (!this._views.hasOwnProperty(newPath)) {\n            console.error(newPath + \" found in pane working set but pane.addView() has not been called for the view created for it\");\n        }\n    };\n\n    /**\n     * Update header and content height\n     */\n    Pane.prototype._updateHeaderHeight = function () {\n        var paneContentHeight = this.$el.height();\n\n        // Adjust pane content height for header\n        if (MainViewManager.getPaneCount() > 1) {\n            this.$header.show();\n            paneContentHeight -= this.$header.outerHeight();\n        } else {\n            this.$header.hide();\n        }\n\n        this.$content.height(paneContentHeight);\n    };\n\n    /**\n     * Sets pane content height. Updates the layout causing the current view to redraw itself\n     * @param {boolean} forceRefresh - true to force a resize and refresh of the current view,\n     * false if just to resize forceRefresh is only used by Editor views to force a relayout\n     * of all editor DOM elements. Custom View implementations should just ignore this flag.\n     */\n    Pane.prototype.updateLayout = function (forceRefresh) {\n        this._updateHeaderHeight();\n        if (this._currentView) {\n            this._currentView.updateLayout(forceRefresh);\n        }\n    };\n\n    /**\n     * Determines if the view can be disposed of\n     * @private\n     * @param {!View} view - the View object to test\n     * @return {boolean}} true if the view can be disposed, false if not\n     */\n    Pane.prototype._isViewNeeded = function (view) {\n        var path = view.getFile().fullPath,\n            currentPath = this.getCurrentlyViewedPath();\n\n        return ((this._currentView && currentPath === path) || (this.findInViewList(path) !== -1));\n    };\n\n\n    /**\n     * Retrieves the File object of the current view\n     * @return {?File} the File object of the current view or null if there isn't one\n     */\n    Pane.prototype.getCurrentlyViewedFile = function () {\n        return this._currentView ? this._currentView.getFile() : null;\n    };\n\n    /**\n     * Retrieves the path of the current view\n     * @return {?string} the path of the current view or null if there isn't one\n     */\n    Pane.prototype.getCurrentlyViewedPath = function () {\n        var file = this.getCurrentlyViewedFile();\n        return file ? file.fullPath : null;\n    };\n\n    /**\n     * destroys the view if it isn't needed\n     * @param {View} view - the view to destroy\n     */\n    Pane.prototype.destroyViewIfNotNeeded = function (view) {\n        if (!this._isViewNeeded(view)) {\n            var file = view.getFile(),\n                path = file && file.fullPath;\n            delete this._views[path];\n            this.trigger(\"viewDestroy\", view);\n            view.destroy();\n        }\n    };\n\n    /**\n     * _resets the pane to an empty state\n     * @private\n     */\n    Pane.prototype._reset = function () {\n        var self = this,\n            views = [],\n            view = this._currentView;\n\n        _.forEach(this._views, function (_view) {\n            views.push(_view);\n        });\n\n        // If the current view is a temporary view,\n        //  add it to the destroy list to dispose of\n        if (this._currentView && views.indexOf(this._currentView) === -1) {\n            views.push(this._currentView);\n        }\n\n        // This will reinitialize the object back to\n        //  the default state\n        this._initialize();\n\n        if (view) {\n            this._notifyCurrentViewChange(null, view);\n        }\n\n        // Now destroy the views\n        views.forEach(function (_view) {\n            self.trigger(\"viewDestroy\", _view);\n            _view.destroy();\n        });\n    };\n\n    /**\n     * Executes a FILE_OPEN command to open a file\n     * @param  {!string} fullPath - path of the file to open\n     * @return {jQuery.promise} promise that will resolve when the file is opened\n     */\n    Pane.prototype._execOpenFile = function (fullPath) {\n        return CommandManager.execute(Commands.CMD_ADD_TO_WORKINGSET_AND_OPEN, { fullPath: fullPath, paneId: this.id, options: {noPaneActivate: true}});\n    };\n\n    /**\n     * Removes the view and opens the next view\n     * @param {File} file - the file to close\n     * @param {boolean} suppressOpenNextFile - suppresses opening the next file in MRU order\n     * @param {boolean} preventViewChange - if suppressOpenNextFile is truthy, this flag can be used to\n     *                                      prevent the current view from being destroyed.\n     *                                      Ignored if suppressOpenNextFile is falsy\n     * @return {boolean} true if the file was removed from the working set\n     *  This function will remove a temporary view of a file but will return false in that case\n     */\n    Pane.prototype.removeView = function (file, suppressOpenNextFile, preventViewChange) {\n        var nextFile = !suppressOpenNextFile && this.traverseViewListByMRU(1, file.fullPath);\n        if (nextFile && nextFile.fullPath !== file.fullPath && this.getCurrentlyViewedPath() === file.fullPath) {\n            var self = this,\n                fullPath = nextFile.fullPath,\n                needOpenNextFile = this.findInViewList(fullPath) !== -1;\n\n            if (this._doRemove(file, needOpenNextFile)) {\n                if (needOpenNextFile) {\n                    // this will destroy the current view\n                    this._execOpenFile(fullPath)\n                        .fail(function () {\n                            // the FILE_OPEN op failed so destroy the current view\n                            self._doDestroyView(self._currentView);\n                        });\n                }\n                return true;\n            }\n                // Nothing was removed so don't try to remove it again\n            return false;\n\n        }\n        return this._doRemove(file, preventViewChange);\n\n    };\n\n    /**\n     * Removes the specifed file from all internal lists, destroys the view of the file (if there is one)\n     *  and shows the interstitial page if the current view is destroyed.\n     * @param {!Array.<File>}  list - Array of files to remove\n     * @return {!Array.<File>} Array of File objects removed from the working set.\n     *  This function will remove temporary views but the file objects for those views will not be found\n     *  in the result set.  Only the file objects removed from the working set are returned.\n     */\n    Pane.prototype.removeViews = function (list) {\n        var self = this,\n            needsDestroyCurrentView = false,\n            result;\n\n        // Check to see if we need to destroy the current view later\n        needsDestroyCurrentView = _.findIndex(list, function (file) {\n            return file.fullPath === self.getCurrentlyViewedPath();\n        }) !== -1;\n\n        // destroy the views in the list\n        result = list.filter(function (file) {\n            return (self.removeView(file, true, true));\n        });\n\n        // we may have been passed a list of files that did not include the current view\n        if (needsDestroyCurrentView) {\n            // _doRemove will have whittled the MRU list down to just the remaining views\n            var nextFile = this.traverseViewListByMRU(1, this.getCurrentlyViewedPath()),\n                fullPath = nextFile && nextFile.fullPath,\n                needOpenNextFile = fullPath && (this.findInViewList(fullPath) !== -1);\n\n            if (needOpenNextFile) {\n                // A successful open will destroy the current view\n                this._execOpenFile(fullPath)\n                    .fail(function () {\n                        // the FILE_OPEN op failed so destroy the current view\n                        self._doDestroyView(self._currentView);\n                    });\n            } else {\n                // Nothing left to show so destroy the current view\n                this._doDestroyView(this._currentView);\n            }\n        }\n\n        // return the result\n        return result;\n    };\n\n    /**\n     * Gives focus to the last thing that had focus, the current view or the pane in that order\n     */\n    Pane.prototype.focus = function () {\n        var current = window.document.activeElement,\n            self = this;\n\n        // Helper to focus the current view if it can\n        function tryFocusingCurrentView() {\n            if (self._currentView) {\n                if (self._currentView.focus) {\n                    //  Views can implement a focus\n                    //  method for focusing a complex\n                    //  DOM like codemirror\n                    self._currentView.focus();\n                } else {\n                    //  Otherwise, no focus method\n                    //  just try and give the DOM\n                    //  element focus\n                    self._currentView.$el.focus();\n                }\n            } else {\n                // no view so just focus the pane\n                self.$el.focus();\n            }\n        }\n\n        // short-circuit for performance\n        if (this._lastFocusedElement === current) {\n            return;\n        }\n\n        // If the focus was in a <textarea> (assumed to be CodeMirror) and currentView is\n        // anything other than an Editor, blur the textarea explicitly, in case the new\n        // _currentView's $el isn't focusable. E.g.:\n        //  1. Open a js file in the left pane and an image in the right pane and\n        //  2. Focus the js file using the working-set\n        //  3. Focus the image view using the working-set.\n        //  ==> Focus is still in the text area. Any keyboard input will modify the document\n        if (current.tagName.toLowerCase() === \"textarea\" &&\n                (!this._currentView || !this._currentView._codeMirror)) {\n            current.blur();\n        }\n\n        var $lfe = $(this._lastFocusedElement);\n\n        if ($lfe.length && !$lfe.is(\".view-pane\") && $lfe.is(\":visible\")) {\n            // if we had a last focused element\n            //  and it wasn't a pane element\n            //  and it's still visible, focus it\n            $lfe.focus();\n        } else {\n            // otherwise, just try to give focus\n            //  to the currently active view\n            tryFocusingCurrentView();\n        }\n    };\n\n    /**\n     * MainViewManager.activePaneChange handler\n     * @param {jQuery.event} e - event data\n     * @param {!string} activePaneId - the new active pane id\n     */\n    Pane.prototype._handleActivePaneChange = function (e, activePaneId) {\n        this.$el.toggleClass(\"active-pane\", Boolean(activePaneId === this.id));\n    };\n\n\n\n    /**\n     * serializes the pane state from JSON\n     * @param {!Object} state - the state to load\n     * @return {jQuery.Promise} A promise which resolves to\n     *              {fullPath:string, paneId:string}\n     *              which can be passed as command data to FILE_OPEN\n     */\n    Pane.prototype.loadState = function (state) {\n        var filesToAdd = [],\n            viewStates = {},\n            activeFile,\n            data,\n            self = this;\n\n        var getInitialViewFilePath = function () {\n            return (self._viewList.length > 0) ? self._viewList[0].fullPath : null;\n        };\n\n        _.forEach(state, function (entry) {\n            filesToAdd.push(FileSystem.getFileForPath(entry.file));\n            if (entry.active) {\n                activeFile = entry.file;\n            }\n            if (entry.viewState) {\n                viewStates[entry.file] = entry.viewState;\n            }\n        });\n\n        this.addListToViewList(filesToAdd);\n\n        ViewStateManager.addViewStates(viewStates);\n\n        activeFile = activeFile || getInitialViewFilePath();\n\n        if (activeFile) {\n            data = {paneId: self.id, fullPath: activeFile};\n        }\n\n        return new $.Deferred().resolve(data);\n    };\n\n    /**\n     * Returns the JSON-ified state of the object so it can be serialize\n     * @return {!Object} state - the state to save\n     */\n    Pane.prototype.saveState = function () {\n        var result = [],\n            currentlyViewedPath = this.getCurrentlyViewedPath();\n\n        // Save the current view state first\n        if (this._currentView && this._currentView.getFile()) {\n            // We save the view state of the current view before\n            //  hiding the view and showing to a different file\n            // But the current view's view state may not be\n            //  up to date in the view state cache so update it\n            //  before we save so we don't JSON-ify stale data.\n            ViewStateManager.updateViewState(this._currentView);\n        }\n\n        // walk the list of views and save\n        this._viewList.forEach(function (file) {\n            // Do not persist untitled document paths\n            if (!(file instanceof InMemoryFile)) {\n                result.push({\n                    file: file.fullPath,\n                    active: (file.fullPath === currentlyViewedPath),\n                    viewState: ViewStateManager.getViewState(file)\n                });\n            }\n        });\n\n        return result;\n    };\n\n    /**\n     * gets the current view's scroll state data\n     * @return {Object=} scroll state - the current scroll state\n     */\n    Pane.prototype.getScrollState = function () {\n        if (this._currentView && this._currentView.getScrollPos) {\n            return {scrollPos: this._currentView.getScrollPos()};\n        }\n    };\n\n    /**\n     * tells the current view to restore its scroll state from cached data and apply a height delta\n     * @param {Object=} state - the current scroll state\n     * @param {number=} heightDelta - the amount to add or subtract from the state\n     */\n    Pane.prototype.restoreAndAdjustScrollState = function (state, heightDelta) {\n        if (this._currentView && state && state.scrollPos && this._currentView.adjustScrollPos) {\n            this._currentView.adjustScrollPos(state.scrollPos, heightDelta);\n        }\n    };\n\n    exports.Pane = Pane;\n});\n"],"file":"Pane.js"}