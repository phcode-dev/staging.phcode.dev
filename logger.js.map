{"version":3,"sources":["logger.js"],"names":["AppConfig","isLocalHost","window","location","hostname","urlParams","URLSearchParams","search","isBugsnagEnabled","testEnvironment","CustomBugSnagError","Error","[object Object]","message","err","super","this","name","constructor","stack","logger","error","console","warn","reportError","Bugsnag","notify","leaveTrail","log","leaveBreadcrumb","loggingOptions","LOCAL_STORAGE_KEYS","LOG_LIVE_PREVIEW","healthDataDisabled","logLivePreview","livePreview","args","swallowLogs","savedLoggingFn","savedInfoFn","info","onError","event","reportedStatus","Metrics","countEvent","EVENT_TYPE","ERROR","setupLogging","logToConsoleOverride","get","logToConsolePref","localStorage","getItem","toLowerCase","debugMode","isLoggingEnabled","key","loggingEnabled","toggleLoggingKey","setItem","start","apiKey","appType","__TAURI__","collectUserIp","appVersion","version","enabledReleaseStages","releaseStage","config","bugsnagEnv","enabledBreadcrumbTypes","maxEvents","maxBreadcrumbs","cacheClearError"],"mappings":"OAsBOA,cAAe,oBAEtB,MAAMC,YAA4C,cAA7BC,OAAOC,SAASC,UAAyD,cAA7BF,OAAOC,SAASC,SAC3EC,UAAY,IAAIC,gBAAgBJ,OAAOC,SAASI,QAAU,IAC1DC,kBAAqBN,OAAOO,kBAAoBR,YAEtD,MAAMS,2BAA2BC,MAC7BC,YAAYC,QAASC,KACjBC,MAAMF,SAAWC,IAAID,SAAW,KAChCG,KAAKC,KAAQH,IAAII,aAAeJ,IAAII,YAAYD,MAASD,KAAKE,YAAYD,KAC1ED,KAAKG,MAAON,QAAS,MAAOC,IAAIK,OAIxC,MAAMC,OAAS,CACXC,MAAOC,QAAQD,MACfE,KAAMD,QAAQC,KAOdC,YAAa,SAAUH,MAAOR,SACvBL,kBACCiB,QAAQC,OAAOb,QACX,IAAIH,mBAAmBG,QAASQ,OAC/BA,QASbM,WAAY,SAAUd,SAClBS,QAAQM,IAAI,aAAcf,SACvBL,kBACCiB,QAAQI,gBAAgBhB,UAIhCiB,eAAgB,CACZC,mBAAoB,CAChBC,iBAAkB,kBAEtBC,oBAAoB,EACpBC,gBAAgB,GAEpBC,YAAa,CACTP,IAAK,YAAaQ,MACXhB,OAAOU,eAAeI,gBACrBd,OAAOQ,OAAOQ,SAS9B,SAASC,eAHTnC,OAAOkB,OAASA,OAMhB,MAAMkB,eAAiBhB,QAAQM,IACzBW,YAAcjB,QAAQkB,KA6C5B,SAASC,QAAQC,OAGb,IAAIC,eAAiBvB,OAAOU,eAAeG,mBAAoB,wCAA0C,WAMzG,GAJAX,QAAQD,gCAAgCsB,mBAAoBD,OACzDxC,OAAO0C,SACN1C,OAAO0C,QAAQC,WAAW3C,OAAO0C,QAAQE,WAAWC,MAAO,WAAY,UAExE3B,OAAOU,eAAeG,mBAErB,OAAO,EAlDf/B,OAAO8C,aAAe,WAClB,MAAMC,qBAAuB5C,UAAU6C,IAAI,gBACrCC,iBAAmBC,aAAaC,QAAQ,gBAC9C,OAAIJ,sBAA+D,SAAvCA,qBAAqBK,eACzCH,kBAAuD,SAAnCA,iBAAiBG,gBAA6BL,sBACtE3B,QAAQM,IAAKU,eACbhB,QAAQkB,KAAMD,YACdnB,OAAOQ,IAAMN,QAAQM,IACrBR,OAAOoB,KAAOlB,QAAQkB,KACtBpB,OAAO+B,iBAAmB,OAC1BjD,OAAOqD,WAAY,GACZ,IAEPjC,QAAQkB,KAAOlB,QAAQM,IAAMS,YAC7BjB,OAAOoB,KAAOpB,OAAOQ,IAAMS,YAC3BjB,OAAO+B,iBAAmB,QAC1BjD,OAAOqD,WAAY,GACZ,IAGfrD,OAAO8C,eAEP9C,OAAOsD,iBAAmB,SAAUC,KAChC,IAAIC,eACJ,MAAwC,UADnBN,aAAaC,QAAQI,MAAQ,SAC5BH,eAG1BpD,OAAOyD,iBAAmB,SAASF,KAC5BvD,OAAOsD,iBAAiBC,KACvBL,aAAaQ,QAAQH,IAAK,SAE1BL,aAAaQ,QAAQH,IAAK,SAKlCrC,OAAOU,eAAeI,eAAiBhC,OAAOsD,iBAC1CpC,OAAOU,eAAeC,mBAAmBC,kBAiB1CxB,kBACCiB,QAAQoC,MAAM,CACVC,OAAQ,mCACRC,QAAS7D,OAAO8D,UAAY,QAAU,UACtCC,eAAe,EACfC,WAAYlE,UAAUmE,QACtBC,qBAAsB,CAAE,cAAe,aAAc,UACjD,oBAAqB,mBAAoB,iBAC7CC,aAAcnE,OAAO8D,UAAY,SAAWhE,UAAUsE,OAAOC,WAAavE,UAAUsE,OAAOC,WAI3FC,uBAAwB,CAAC,UAEzBC,UAAW,GACXC,eAAgB,GAChBjC,QAAAA,UAEDvC,OAAOyE,iBACNvD,OAAOI,YAAYtB,OAAOyE,kBAG9BrD,QAAQC,KAAK","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals Bugsnag, logger*/\n\nimport AppConfig from \"./loggerConfig.js\";\n\nconst isLocalHost = (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1');\nconst urlParams = new URLSearchParams(window.location.search || \"\");\nconst isBugsnagEnabled = (!window.testEnvironment && !isLocalHost);\n\nclass CustomBugSnagError extends Error {\n    constructor(message, err){\n        super(message + (err.message || \"\"));\n        this.name = (err.constructor && err.constructor.name) || this.constructor.name;\n        this.stack= message +\" : \"+ err.stack;\n    }\n}\n\nconst logger = {\n    error: console.error,\n    warn: console.warn,\n    /**\n     * By default all uncaught exceptions and promise rejections are sent to logger utility. But in some cases\n     * you may want to sent handled errors too if it is critical. use this function to report those\n     * @param {Error} error\n     * @param {string} [message] optional message\n     */\n    reportError: function (error, message) {\n        if(isBugsnagEnabled) {\n            Bugsnag.notify(message?\n                new CustomBugSnagError(message, error)\n                :error);\n        }\n    },\n\n    /**\n     * This will help to provide additional context to error reporting. The trail will serve as a series of\n     * events that happened before an error and will help to backtrack the error.\n     * @param {string} message\n     */\n    leaveTrail: function (message) {\n        console.log(\"[Trail] : \", message);\n        if(isBugsnagEnabled) {\n            Bugsnag.leaveBreadcrumb(message);\n        }\n    },\n\n    loggingOptions: {\n        LOCAL_STORAGE_KEYS: {\n            LOG_LIVE_PREVIEW: \"logLivePreview\"\n        },\n        healthDataDisabled: false,\n        logLivePreview: false // logLivePreview will be setup below\n    },\n    livePreview: {\n        log: function (...args) {\n            if(logger.loggingOptions.logLivePreview){\n                logger.log(...args);\n            }\n        }\n    }\n    // other API setup below\n};\nwindow.logger = logger;\n\n// logger setup\nfunction swallowLogs() {\n    // Do nothing\n}\nconst savedLoggingFn = console.log;\nconst savedInfoFn = console.info;\n\n/**\n * interceptors for console.log and info\n * @returns {boolean}\n */\nwindow.setupLogging = function () {\n    const logToConsoleOverride = urlParams.get('logToConsole');\n    const logToConsolePref = localStorage.getItem(\"logToConsole\");\n    if((logToConsoleOverride && logToConsoleOverride.toLowerCase() === 'true')\n        || (logToConsolePref && logToConsolePref.toLowerCase() === 'true' && !logToConsoleOverride)){\n        console.log= savedLoggingFn;\n        console.info= savedInfoFn;\n        logger.log = console.log;\n        logger.info = console.info;\n        logger.logToConsolePref = 'true';\n        window.debugMode = true;\n        return true;\n    } else {\n        console.info = console.log = swallowLogs;\n        logger.info = logger.log = swallowLogs;\n        logger.logToConsolePref = 'false';\n        window.debugMode = false;\n        return false;\n    }\n};\nwindow.setupLogging();\n\nwindow.isLoggingEnabled = function (key) {\n    let loggingEnabled = localStorage.getItem(key) || \"false\";\n    return loggingEnabled.toLowerCase() === 'true';\n};\n\nwindow.toggleLoggingKey = function(key) {\n    if(window.isLoggingEnabled(key)){\n        localStorage.setItem(key, 'false');\n    } else {\n        localStorage.setItem(key, 'true');\n    }\n};\n\n\nlogger.loggingOptions.logLivePreview = window.isLoggingEnabled(\n    logger.loggingOptions.LOCAL_STORAGE_KEYS.LOG_LIVE_PREVIEW);\n\nfunction onError(event) {\n    // for mroe info https://docs.bugsnag.com/platforms/javascript/customizing-error-reports\n    // change health logger popup string before changing the below line to anything other than \"Caught Critical error\"\n    let reportedStatus = logger.loggingOptions.healthDataDisabled? \"Not Reported as health data disabled.\" : \"Reported\";\n\n    console.error(`Caught Critical error, ${reportedStatus}: `, event);\n    if(window.Metrics) {\n        window.Metrics.countEvent(window.Metrics.EVENT_TYPE.ERROR, \"uncaught\", \"logger\");\n    }\n    if(logger.loggingOptions.healthDataDisabled){\n        // don't log anything as user disabled health tracking\n        return false;\n    }\n}\n\nif(isBugsnagEnabled) {\n    Bugsnag.start({\n        apiKey: 'a899c29d251bfdf30c3222016a2a7ea7',\n        appType: window.__TAURI__ ? \"tauri\" : \"browser\",\n        collectUserIp: false,\n        appVersion: AppConfig.version,\n        enabledReleaseStages: [ 'development', 'production', 'staging',\n            'tauri-development', 'tauri-production', 'tauri-staging'],\n        releaseStage: window.__TAURI__ ? \"tauri-\" + AppConfig.config.bugsnagEnv : AppConfig.config.bugsnagEnv,\n        // https://docs.bugsnag.com/platforms/javascript/#logging-breadcrumbs\n        // breadcrumbs is disabled as it seems a bit intrusive in Pheonix even-though it might help with debugging.\n        // only manual explicit privacy ready breadcrumbs are allowed\n        enabledBreadcrumbTypes: ['manual'],\n        // https://docs.bugsnag.com/platforms/javascript/configuration-options/#maxevents\n        maxEvents: 10,\n        maxBreadcrumbs: 50,\n        onError\n    });\n    if(window.cacheClearError){\n        logger.reportError(window.cacheClearError);\n    }\n} else {\n    console.warn(\"Logging to Bugsnag is disabled as current environment is localhost.\");\n}\n"],"file":"logger.js"}