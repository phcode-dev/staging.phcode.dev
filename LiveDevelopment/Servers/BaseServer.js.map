{"version":3,"sources":["LiveDevelopment/Servers/BaseServer.js"],"names":["define","require","exports","module","BaseServer","config","this","_baseUrl","baseUrl","_root","root","_pathResolver","pathResolver","_liveDocuments","prototype","getBaseUrl","_setDocInfo","liveDocument","parentUrl","matches","doc","exec","file","fullPath","extension","pathToUrl","url","encodeURI","isDirty","_updateBrowser","path","relativePath","encodedDocPath","encodedProjectPath","replace","urlToPath","indexOf","decodeURI","readyToServe","$","Deferred","resolve","promise","canServe","localPath","_documentKey","absolutePath","add","key","remove","get","clear","start","stop"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAc/B,SAASC,WAAWC,QAChBC,KAAKC,SAAiBF,OAAOG,QAC7BF,KAAKG,MAAiBJ,OAAOK,KAC7BJ,KAAKK,cAAiBN,OAAOO,aAC7BN,KAAKO,eAAiB,GAS1BT,WAAWU,UAAUC,WAAa,WAC9B,OAAOT,KAAKC,UAQhBH,WAAWU,UAAUE,YAAc,SAAUC,cACzC,IAAIC,UACAC,QACAC,IAAMH,aAAaG,KAIvBD,QAAU,wBAAwBE,KAAKD,IAAIE,KAAKC,aAKhDH,IAAII,UAAYL,QAAQ,GAExBD,UAAYZ,KAAKmB,UAAUN,QAAQ,IACnCC,IAAIM,IAAMR,UAAYS,UAAUR,QAAQ,IAKxCC,IAAIV,KAAO,CAAEgB,IAAKN,IAAIM,KAIlBN,IAAIQ,SAAWX,aAAaY,gBAC5BZ,aAAaY,mBAUrBzB,WAAWU,UAAUW,UAAY,SAAUK,MACvC,IAAItB,QAAkBF,KAAKS,aACvBgB,aAGJ,GAHsBzB,KAAKK,cAAcmB,QAGpBA,KAAM,CAEvB,IAAIE,eAAiBL,UAAUG,MAC3BG,mBAAqBN,UAAUrB,KAAKG,OAExC,OAAOuB,eAAeE,QAAQD,mBAAoBzB,SAGtD,OAAO,MASXJ,WAAWU,UAAUqB,UAAY,SAAUT,KACvC,IAAII,KACAtB,QAAU,GAId,MAAgB,MAFhBA,QAAUF,KAAKS,eAEgC,IAAzBW,IAAIU,QAAQ5B,UAG9BsB,KAAOJ,IAAIQ,QAAQ1B,QAASmB,UAAUrB,KAAKG,QAEpC4B,UAAUP,OAGd,MAaX1B,WAAWU,UAAUwB,aAAe,WAEhC,OAAOC,EAAEC,WAAWC,UAAUC,WASlCtC,WAAWU,UAAU6B,SAAW,SAAUC,WACtC,OAAO,GAGXxC,WAAWU,UAAU+B,aAAe,SAAUC,cAC1C,MAAO,IAAMnB,UAAUrB,KAAKK,cAAcmC,gBAO9C1C,WAAWU,UAAUiC,IAAM,SAAU9B,cACjC,GAAKA,aAAL,CAKA,IAAI+B,IAAM1C,KAAKuC,aAAa5B,aAAaG,IAAIE,KAAKC,UAElDjB,KAAKU,YAAYC,cACjBX,KAAKO,eAAemC,KAAO/B,eAO/Bb,WAAWU,UAAUmC,OAAS,SAAUhC,cACpC,GAAKA,aAAL,CAIA,IAAI+B,IAAM1C,KAAKO,eAAeP,KAAKuC,aAAa5B,aAAaG,IAAIE,KAAKC,WAElEyB,YACO1C,KAAKO,eAAemC,OAUnC5C,WAAWU,UAAUoC,IAAM,SAAUpB,MACjC,OAAOxB,KAAKO,eAAeP,KAAKuC,aAAaf,QAMjD1B,WAAWU,UAAUqC,MAAQ,WACzB7C,KAAKO,eAAiB,IAM1BT,WAAWU,UAAUsC,MAAQ,aAO7BhD,WAAWU,UAAUuC,KAAO,aAI5BnD,QAAQE,WAAaA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    /**\n     * Base class for live preview servers\n     *\n     * Configuration parameters for this server:\n     * - baseUrl      - Optional base URL (populated by the current project)\n     * - pathResolver - Function to covert absolute native paths to project relative paths\n     * - root         - Native path to the project root (and base URL)\n     *\n     * @constructor\n     * @param {!{baseUrl: string, root: string, pathResolver: function(string): string}} config\n     */\n    function BaseServer(config) {\n        this._baseUrl       = config.baseUrl;\n        this._root          = config.root;          // ProjectManager.getProjectRoot().fullPath\n        this._pathResolver  = config.pathResolver;  // ProjectManager.makeProjectRelativeIfPossible(doc.file.fullPath)\n        this._liveDocuments = {};\n    }\n\n    /**\n     * Returns a base url for current project.\n     *\n     * @return {string}\n     * Base url for current project.\n     */\n    BaseServer.prototype.getBaseUrl = function () {\n        return this._baseUrl;\n    };\n\n    /**\n     * @private\n     * Augments the given Brackets document with information that's useful for live development\n     * @param {Object} liveDocument\n     */\n    BaseServer.prototype._setDocInfo = function (liveDocument) {\n        var parentUrl,\n            matches,\n            doc = liveDocument.doc;\n\n        // FUTURE: some of these things should just be moved into core Document; others should\n        // be in a LiveDevelopment-specific object attached to the doc.\n        matches = /^(.*\\/)(.+\\.([^.]+))$/.exec(doc.file.fullPath);\n        if (!matches) {\n            return;\n        }\n\n        doc.extension = matches[3];\n\n        parentUrl = this.pathToUrl(matches[1]);\n        doc.url = parentUrl + encodeURI(matches[2]);\n\n        // the root represents the document that should be displayed in the browser\n        // for live development (the file for HTML files)\n        // TODO: Issue #2033 Improve how default page is determined\n        doc.root = { url: doc.url };\n\n        // TODO: Better workflow of liveDocument.doc.url assignment\n        // Force sync the browser after a URL is assigned\n        if (doc.isDirty && liveDocument._updateBrowser) {\n            liveDocument._updateBrowser();\n        }\n    };\n\n    /**\n     * Returns a URL for a given path\n     * @param {string} path Absolute path to covert to a URL\n     * @return {?string} Converts a path within the project root to a URL.\n     *  Returns null if the path is not a descendant of the project root.\n     */\n    BaseServer.prototype.pathToUrl = function (path) {\n        var baseUrl         = this.getBaseUrl(),\n            relativePath    = this._pathResolver(path);\n\n        // See if base url has been specified and path is within project\n        if (relativePath !== path) {\n            // Map to server url. Base url is already encoded, so don't encode again.\n            var encodedDocPath = encodeURI(path);\n            var encodedProjectPath = encodeURI(this._root);\n\n            return encodedDocPath.replace(encodedProjectPath, baseUrl);\n        }\n\n        return null;\n    };\n\n    /**\n     * Convert a URL to a local full file path\n     * @param {string} url\n     * @return {?string} The absolute path for given URL or null if the path is\n     *  not a descendant of the project.\n     */\n    BaseServer.prototype.urlToPath = function (url) {\n        var path,\n            baseUrl = \"\";\n\n        baseUrl = this.getBaseUrl();\n\n        if (baseUrl !== \"\" && url.indexOf(baseUrl) === 0) {\n            // Use base url to translate to local file path.\n            // Need to use encoded project path because it's decoded below.\n            path = url.replace(baseUrl, encodeURI(this._root));\n\n            return decodeURI(path);\n        }\n\n        return null;\n    };\n\n    /**\n     * Called by LiveDevelopment before to prepare the server before navigating\n     * to the project's base URL. The provider returns a jQuery promise.\n     * The Live Development launch process waits until the promise\n     * is resolved or rejected. If the promise is rejected, an error window\n     * is shown and Live Development does not start..\n     *\n     * @return {jQuery.Promise} Promise that may be asynchronously resolved\n     *  when the server is ready to handle HTTP requests.\n     */\n    BaseServer.prototype.readyToServe = function () {\n        // Base implementation always resolves\n        return $.Deferred().resolve().promise();\n    };\n\n    /**\n     * Determines if this server can serve local file. LiveDevServerManager\n     * calls this method when determining if a server can serve a file.\n     * @param {string} localPath A local path to file being served.\n     * @return {boolean} true When the file can be served, otherwise false.\n     */\n    BaseServer.prototype.canServe = function (localPath) {\n        return true;\n    };\n\n    BaseServer.prototype._documentKey = function (absolutePath) {\n        return \"/\" + encodeURI(this._pathResolver(absolutePath));\n    };\n\n    /**\n     * Adds a live document to server\n     * @param {Object} liveDocument\n     */\n    BaseServer.prototype.add = function (liveDocument) {\n        if (!liveDocument) {\n            return;\n        }\n\n        // use the project relative path as a key to lookup requests\n        var key = this._documentKey(liveDocument.doc.file.fullPath);\n\n        this._setDocInfo(liveDocument);\n        this._liveDocuments[key] = liveDocument;\n    };\n\n    /**\n     * Removes a live document from the server\n     * @param {Object} liveDocument\n     */\n    BaseServer.prototype.remove = function (liveDocument) {\n        if (!liveDocument) {\n            return;\n        }\n\n        var key = this._liveDocuments[this._documentKey(liveDocument.doc.file.fullPath)];\n\n        if (key) {\n            delete this._liveDocuments[key];\n        }\n    };\n\n    /**\n     * Lookup a live document using it's full path key\n     * @param {string} path Absolute path to covert to a URL\n     * @param {?Object} liveDocument Returns a live document or undefined if a\n     *     document does not exist for the path.\n     */\n    BaseServer.prototype.get = function (path) {\n        return this._liveDocuments[this._documentKey(path)];\n    };\n\n    /**\n     * Clears all live documents currently attached to the server\n     */\n    BaseServer.prototype.clear = function () {\n        this._liveDocuments = {};\n    };\n\n    /**\n     * Start the server\n     */\n    BaseServer.prototype.start = function () {\n        // do nothing\n    };\n\n    /**\n     * Stop the server\n     */\n    BaseServer.prototype.stop = function () {\n        // do nothing\n    };\n\n    exports.BaseServer = BaseServer;\n});\n"],"file":"BaseServer.js"}