{"version":3,"sources":["LiveDevelopment/Servers/BaseServer.js"],"names":["define","require","exports","module","BaseServer","config","this","_root","root","_pathResolver","pathResolver","_liveDocuments","_virtualServingDocuments","prototype","getProjectRoot","_setDocInfo","liveDocument","parentUrl","matches","doc","exec","file","fullPath","extension","pathToUrl","url","encodeURI","isDirty","_updateBrowser","readyToServe","$","Deferred","resolve","promise","canServe","localPath","_documentKey","absolutePath","add","key","addVirtualContentAtPath","docText","remove","removeVirtualContentAtPath","get","path","clear","start","isActive","stop"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAa/B,SAASC,WAAWC,QAChBC,KAAKC,MAAiBF,OAAOG,KAC7BF,KAAKG,cAAiBJ,OAAOK,aAC7BJ,KAAKK,eAAiB,GACtBL,KAAKM,yBAA2B,GAOpCR,WAAWS,UAAUC,eAAiB,WAClC,OAAOR,KAAKC,OAQhBH,WAAWS,UAAUE,YAAc,SAAUC,cACzC,IAAIC,UACAC,QACAC,IAAMH,aAAaG,KAIvBD,QAAU,wBAAwBE,KAAKD,IAAIE,KAAKC,aAKhDH,IAAII,UAAYL,QAAQ,GAExBD,UAAYX,KAAKkB,UAAUN,QAAQ,IACnCC,IAAIM,IAAMR,UAAYS,UAAUR,QAAQ,IAKxCC,IAAIX,KAAO,CAAEiB,IAAKN,IAAIM,KAIlBN,IAAIQ,SAAWX,aAAaY,gBAC5BZ,aAAaY,mBAcrBxB,WAAWS,UAAUgB,aAAe,WAEhC,OAAOC,EAAEC,WAAWC,UAAUC,WASlC7B,WAAWS,UAAUqB,SAAW,SAAUC,WACtC,OAAO,GAGX/B,WAAWS,UAAUuB,aAAe,SAAUC,cAC1C,MAAO,IAAMX,UAAUpB,KAAKG,cAAc4B,gBAO9CjC,WAAWS,UAAUyB,IAAM,SAAUtB,cACjC,GAAKA,aAAL,CAKA,IAAIuB,IAAMjC,KAAK8B,aAAapB,aAAaG,IAAIE,KAAKC,UAElDhB,KAAKS,YAAYC,cACjBV,KAAKK,eAAe4B,KAAOvB,eAO/BZ,WAAWS,UAAU2B,wBAA0B,SAAUlB,SAAUmB,SAC/D,IAAIF,IAAMjC,KAAK8B,aAAad,UAC5BhB,KAAKM,yBAAyB2B,KAAOE,SAOzCrC,WAAWS,UAAU6B,OAAS,SAAU1B,cACpC,GAAKA,aAAL,CAIA,IAAIuB,IAAMjC,KAAKK,eAAeL,KAAK8B,aAAapB,aAAaG,IAAIE,KAAKC,WAElEiB,YACOjC,KAAKK,eAAe4B,OAOnCnC,WAAWS,UAAU8B,2BAA6B,SAAUrB,UACxD,IAAIiB,IAAMjC,KAAK8B,aAAad,UACzBhB,KAAKM,yBAAyB2B,aACtBjC,KAAKM,yBAAyB2B,MAU7CnC,WAAWS,UAAU+B,IAAM,SAAUC,MACjC,OAAOvC,KAAKK,eAAeL,KAAK8B,aAAaS,QAMjDzC,WAAWS,UAAUiC,MAAQ,WACzBxC,KAAKK,eAAiB,GACtBL,KAAKM,yBAA2B,IAMpCR,WAAWS,UAAUkC,MAAQ,aAI7B3C,WAAWS,UAAUmC,SAAW,WAC5B,OAAO,GAMX5C,WAAWS,UAAUoC,KAAO,aAI5B/C,QAAQE,WAAaA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    /**\n     * Base class for live preview servers\n     *\n     * Configuration parameters for this server:\n     * - pathResolver - Function to covert absolute native paths to project relative paths\n     * - root         - Native path to the project root (and base URL)\n     *\n     * @constructor\n     * @param {!{root: string, pathResolver: function(string): string}} config\n     */\n    function BaseServer(config) {\n        this._root          = config.root;          // ProjectManager.getProjectRoot().fullPath\n        this._pathResolver  = config.pathResolver;  // ProjectManager.makeProjectRelativeIfPossible(doc.file.fullPath)\n        this._liveDocuments = {};\n        this._virtualServingDocuments = {};\n    }\n\n    /**\n     * Get path of the current project this server serves\n     * @returns {string} Path of the current project this server serves\n     */\n    BaseServer.prototype.getProjectRoot = function () {\n        return this._root;\n    };\n\n    /**\n     * @private\n     * Augments the given Brackets document with information that's useful for live development\n     * @param {Object} liveDocument\n     */\n    BaseServer.prototype._setDocInfo = function (liveDocument) {\n        var parentUrl,\n            matches,\n            doc = liveDocument.doc;\n\n        // FUTURE: some of these things should just be moved into core Document; others should\n        // be in a LiveDevelopment-specific object attached to the doc.\n        matches = /^(.*\\/)(.+\\.([^.]+))$/.exec(doc.file.fullPath);\n        if (!matches) {\n            return;\n        }\n\n        doc.extension = matches[3];\n\n        parentUrl = this.pathToUrl(matches[1]);\n        doc.url = parentUrl + encodeURI(matches[2]);\n\n        // the root represents the document that should be displayed in the browser\n        // for live development (the file for HTML files)\n        // TODO: Issue #2033 Improve how default page is determined\n        doc.root = { url: doc.url };\n\n        // TODO: Better workflow of liveDocument.doc.url assignment\n        // Force sync the browser after a URL is assigned\n        if (doc.isDirty && liveDocument._updateBrowser) {\n            liveDocument._updateBrowser();\n        }\n    };\n\n    /**\n     * Called by LiveDevelopment before to prepare the server before navigating\n     * to the project's base URL. The provider returns a jQuery promise.\n     * The Live Development launch process waits until the promise\n     * is resolved or rejected. If the promise is rejected, an error window\n     * is shown and Live Development does not start..\n     *\n     * @return {jQuery.Promise} Promise that may be asynchronously resolved\n     *  when the server is ready to handle HTTP requests.\n     */\n    BaseServer.prototype.readyToServe = function () {\n        // Base implementation always resolves\n        return $.Deferred().resolve().promise();\n    };\n\n    /**\n     * Determines if this server can serve local file. LiveDevServerManager\n     * calls this method when determining if a server can serve a file.\n     * @param {string} localPath A local path to file being served.\n     * @return {boolean} true When the file can be served, otherwise false.\n     */\n    BaseServer.prototype.canServe = function (localPath) {\n        return true;\n    };\n\n    BaseServer.prototype._documentKey = function (absolutePath) {\n        return \"/\" + encodeURI(this._pathResolver(absolutePath));\n    };\n\n    /**\n     * Adds a live document to server\n     * @param {Object} liveDocument\n     */\n    BaseServer.prototype.add = function (liveDocument) {\n        if (!liveDocument) {\n            return;\n        }\n\n        // use the project relative path as a key to lookup requests\n        var key = this._documentKey(liveDocument.doc.file.fullPath);\n\n        this._setDocInfo(liveDocument);\n        this._liveDocuments[key] = liveDocument;\n    };\n\n    /**\n     * This will add the given text to be served when the path is hit in server. You can use this to either\n     * serve a file that doesn't exist in project, or to override a given path to the contents you give.\n     */\n    BaseServer.prototype.addVirtualContentAtPath = function (fullPath, docText) {\n        let key = this._documentKey(fullPath);\n        this._virtualServingDocuments[key] = docText;\n    };\n\n    /**\n     * Removes a live document from the server\n     * @param {Object} liveDocument\n     */\n    BaseServer.prototype.remove = function (liveDocument) {\n        if (!liveDocument) {\n            return;\n        }\n\n        var key = this._liveDocuments[this._documentKey(liveDocument.doc.file.fullPath)];\n\n        if (key) {\n            delete this._liveDocuments[key];\n        }\n    };\n\n    /**\n     * removes path added by addVirtualContentAtPath()\n     */\n    BaseServer.prototype.removeVirtualContentAtPath = function (fullPath) {\n        let key = this._documentKey(fullPath);\n        if(this._virtualServingDocuments[key]) {\n            delete this._virtualServingDocuments[key];\n        }\n    };\n\n    /**\n     * Lookup a live document using it's full path key\n     * @param {string} path Absolute path to covert to a URL\n     * @param {?Object} liveDocument Returns a live document or undefined if a\n     *     document does not exist for the path.\n     */\n    BaseServer.prototype.get = function (path) {\n        return this._liveDocuments[this._documentKey(path)];\n    };\n\n    /**\n     * Clears all live documents currently attached to the server\n     */\n    BaseServer.prototype.clear = function () {\n        this._liveDocuments = {};\n        this._virtualServingDocuments = {};\n    };\n\n    /**\n     * Start the server\n     */\n    BaseServer.prototype.start = function () {\n        // do nothing\n    };\n\n    BaseServer.prototype.isActive = function () {\n        return false;\n    };\n\n    /**\n     * Stop the server\n     */\n    BaseServer.prototype.stop = function () {\n        // do nothing\n    };\n\n    exports.BaseServer = BaseServer;\n});\n"],"file":"BaseServer.js"}