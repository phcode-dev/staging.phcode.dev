{"version":3,"sources":["LiveDevelopment/Servers/UserServer.js"],"names":["define","require","exports","module","BaseServer","LiveDevelopmentUtils","UserServer","config","call","this","prototype","Object","create","constructor","canServe","localPath","_baseUrl","_pathResolver","isStaticHtmlFileExt","isServerHtmlFileExt"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,WAAyBH,QAAQ,sCAAsCG,WACvEC,qBAAyBJ,QAAQ,wCAgBrC,SAASK,WAAWC,QAChBH,WAAWI,KAAKC,KAAMF,QAG1BD,WAAWI,UAAYC,OAAOC,OAAOR,WAAWM,WAChDJ,WAAWI,UAAUG,YAAcP,WAOnCA,WAAWI,UAAUI,SAAW,SAAUC,WAEtC,QAAKN,KAAKO,WAMND,YAAcN,KAAKQ,cAAcF,aAI9BV,qBAAqBa,oBAAoBH,YAC5CV,qBAAqBc,oBAAoBJ,cAGjDb,QAAQI,WAAaA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var BaseServer             = require(\"LiveDevelopment/Servers/BaseServer\").BaseServer,\n        LiveDevelopmentUtils   = require(\"LiveDevelopment/LiveDevelopmentUtils\");\n\n    /**\n     * Live preview server for user specified server as defined with Live Preview Base Url\n     * Project setting. In a clean installation of Brackets, this is the highest priority\n     * server provider, if defined.\n     *\n     * Configuration parameters for this server:\n     * - baseUrl      - Optional base URL (populated by the current project)\n     * - pathResolver - Function to covert absolute native paths to project relative paths\n     * - root         - Native path to the project root (and base URL)\n     *\n     * @constructor\n     * @param {!{baseUrl: string, root: string, pathResolver: function(string)}} config\n     * @extends {BaseServer}\n     */\n    function UserServer(config) {\n        BaseServer.call(this, config);\n    }\n\n    UserServer.prototype = Object.create(BaseServer.prototype);\n    UserServer.prototype.constructor = UserServer;\n\n    /**\n     * Determines whether we can serve local file.\n     * @param {string} localPath A local path to file being served.\n     * @return {boolean} true for yes, otherwise false.\n     */\n    UserServer.prototype.canServe = function (localPath) {\n        // UserServer can only function when the project specifies a base URL\n        if (!this._baseUrl) {\n            return false;\n        }\n\n        // If we can't transform the local path to a project relative path,\n        // the path cannot be served\n        if (localPath === this._pathResolver(localPath)) {\n            return false;\n        }\n\n        return LiveDevelopmentUtils.isStaticHtmlFileExt(localPath) ||\n            LiveDevelopmentUtils.isServerHtmlFileExt(localPath);\n    };\n\n    exports.UserServer = UserServer;\n});\n"],"file":"UserServer.js"}