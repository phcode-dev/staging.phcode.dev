define(function Inspector(require,exports,module){var Async=require("utils/Async"),EventDispatcher=require("utils/EventDispatcher"),_messageCallbacks={},_messageId=1,_socket,_connectDeferred,_userAgent="";function _verifySignature(signature,value){return void 0===value&&console.assert(!0===signature.optional,"Missing argument: "+signature.name),!0}function _send(method,signature,varargs){if(!_socket)return console.log("You must connect to the WebSocket before sending messages."),(new $.Deferred).reject().promise();var id,callback,args,i,params={},promise,msg;if("function"==typeof(args=Array.prototype.slice.call(arguments,2))[args.length-1])callback=args.pop();else{var deferred=new $.Deferred;promise=deferred.promise(),callback=function(result,error){error?deferred.reject(error):deferred.resolve(result)}}if(id=_messageId++,signature)for(i in signature)_verifySignature(args[i],signature[i])&&(params[signature[i].name]=args[i]);return msg={method:method,id:id,params:params},_messageCallbacks[id]={callback:callback,message:msg},_socket.send(JSON.stringify(msg)),promise}function send(domain,command,varargs){return _send(domain+"."+command,null,varargs)}function _onDisconnect(){_socket=void 0,exports.trigger("disconnect")}function _onError(error){_connectDeferred&&(_connectDeferred.reject(),_connectDeferred=null),exports.trigger("error",error)}function _onConnect(){_connectDeferred&&(_connectDeferred.resolve(),_connectDeferred=null),exports.trigger("connect")}function _onMessage(message){var response=JSON.parse(message.data),msgRecord=_messageCallbacks[response.id],callback=msgRecord&&msgRecord.callback,msgText=msgRecord&&msgRecord.message||"No message";if(msgRecord)callback(response.result,response.error),delete _messageCallbacks[response.id];else if(response.method){var domainAndMethod=response.method.split("."),domain=domainAndMethod[0],method=domainAndMethod[1];EventDispatcher.triggerWithArray(exports[domain],method,response.params)}exports.trigger("message",response),response.error&&exports.trigger("error",response.error,msgText)}function getDebuggableWindows(host,port){host||(host="127.0.0.1"),port||(port=9222);var def=new $.Deferred,request=new XMLHttpRequest;return request.open("GET","http://"+host+":"+port+"/json"),request.onload=function onLoad(){var sockets=JSON.parse(request.response);def.resolve(sockets)},request.onerror=function onError(){def.reject(request.response)},request.send(null),def.promise()}function disconnect(){var deferred=new $.Deferred,promise=deferred.promise();return _socket&&_socket.readyState===WebSocket.OPEN?(_socket.onclose=function(){_onDisconnect(),deferred.resolve()},promise=Async.withTimeout(promise,5e3),_socket.close()):(_socket&&(delete _socket.onmessage,delete _socket.onopen,delete _socket.onclose,delete _socket.onerror,_socket=void 0),deferred.resolve()),promise}function connect(socketURL){disconnect().done(function(){(_socket=new WebSocket(socketURL)).onmessage=_onMessage,_socket.onopen=_onConnect,_socket.onclose=_onDisconnect,_socket.onerror=_onError})}function connectToURL(url){_connectDeferred&&_connectDeferred.reject("CANCEL");var deferred=new $.Deferred;_connectDeferred=deferred;var promise=getDebuggableWindows();return promise.done(function onGetAvailableSockets(response){var i,page;for(i in response)if((page=response[i]).webSocketDebuggerUrl&&0===page.url.indexOf(url))return void connect(page.webSocketDebuggerUrl);deferred.reject(FileError.ERR_NOT_FOUND)}),promise.fail(function onFail(err){deferred.reject(err)}),deferred.promise()}function connected(){return void 0!==_socket&&_socket.readyState===WebSocket.OPEN}function getUserAgent(){return _userAgent}function setUserAgent(userAgent){_userAgent=userAgent}function init(theConfig){exports.config=theConfig;var InspectorText=require("text!LiveDevelopment/Inspector/Inspector.json"),InspectorJSON=JSON.parse(InspectorText),i,j,domain,command;for(i in InspectorJSON.domains){domain=InspectorJSON.domains[i];var exportedDomain={};for(j in exports[domain.domain]=exportedDomain,EventDispatcher.makeEventDispatcher(exportedDomain),domain.commands)exportedDomain[(command=domain.commands[j]).name]=_send.bind(void 0,domain.domain+"."+command.name,command.parameters)}}EventDispatcher.makeEventDispatcher(exports),exports.connect=connect,exports.connected=connected,exports.connectToURL=connectToURL,exports.disconnect=disconnect,exports.getDebuggableWindows=getDebuggableWindows,exports.getUserAgent=getUserAgent,exports.init=init,exports.send=send,exports.setUserAgent=setUserAgent});
//# sourceMappingURL=Inspector.js.map
