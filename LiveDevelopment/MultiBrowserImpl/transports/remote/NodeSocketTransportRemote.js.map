{"version":3,"sources":["LiveDevelopment/MultiBrowserImpl/transports/remote/NodeSocketTransportRemote.js"],"names":["global","WebSocketTransport","_ws","_callbacks","setCallbacks","callbacks","_Brackets_LiveDev_Socket_Transport_URL","this","console","error","connect","url","self","WebSocket","onopen","event","send","JSON","stringify","type","location","href","log","onmessage","data","message","onclose","close","msgStr","enable","_Brackets_LiveDev_Transport"],"mappings":"CA0BC,SAAUA,QAGP,IAAIC,mBAAqB,CAMrBC,IAAK,KAOLC,WAAY,KAWZC,aAAc,SAAUC,WACfL,OAAOM,uCAGRC,KAAKJ,WAAaE,UAFlBG,QAAQC,MAAM,wDAUtBC,QAAS,SAAUC,KACf,IAAIC,KAAOL,KACXA,KAAKL,IAAM,IAAIW,UAAUF,KAczBJ,KAAKL,IAAIY,OAAS,SAAUC,OAExBH,KAAKV,IAAIc,KAAKC,KAAKC,UAAU,CACzBC,KAAM,UACNR,IAAKX,OAAOoB,SAASC,QAEzBb,QAAQc,IAAI,+CAAiDX,KACzDC,KAAKT,YAAcS,KAAKT,WAAWO,SACnCE,KAAKT,WAAWO,WAGxBH,KAAKL,IAAIqB,UAAY,SAAUR,OAC3BP,QAAQc,IAAI,mCAAqCP,MAAMS,MACnDZ,KAAKT,YAAcS,KAAKT,WAAWsB,SACnCb,KAAKT,WAAWsB,QAAQV,MAAMS,OAGtCjB,KAAKL,IAAIwB,QAAU,SAAUX,OACzBH,KAAKV,IAAM,KACPU,KAAKT,YAAcS,KAAKT,WAAWwB,OACnCf,KAAKT,WAAWwB,UAU5BX,KAAM,SAAUY,QACRrB,KAAKL,IAGLK,KAAKL,IAAIc,KAAKC,KAAKC,UAAU,CACzBC,KAAM,UACNM,QAASG,UAGbpB,QAAQc,IAAI,oEAAsEM,SAO1FC,OAAQ,WACJtB,KAAKG,QAAQV,OAAOM,0CAG5BN,OAAO8B,4BAA8B7B,mBAzGzC,CA0GEM","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// This is a transport injected into the browser via a script that handles the low\n// level communication between the live development protocol handlers on both sides.\n// This transport provides a web socket mechanism. It's injected separately from the\n// protocol handler so that the transport can be changed separately.\n\n(function (global) {\n\n\n    var WebSocketTransport = {\n        /**\n         * @private\n         * The WebSocket that we communicate with Brackets over.\n         * @type {?WebSocket}\n         */\n        _ws: null,\n\n        /**\n         * @private\n         * An object that contains callbacks to handle various transport events. See `setCallbacks()`.\n         * @type {?{connect: ?function, message: ?function(string), close: ?function}}\n         */\n        _callbacks: null,\n\n        /**\n         * Sets the callbacks that should be called when various transport events occur. All callbacks\n         * are optional, but you should at least implement \"message\" or nothing interesting will happen :)\n         * @param {?{connect: ?function, message: ?function(string), close: ?function}} callbacks\n         *      The callbacks to set.\n         *      connect - called when a connection is established to Brackets\n         *      message(msgStr) - called with a string message sent from Brackets\n         *      close - called when Brackets closes the connection\n         */\n        setCallbacks: function (callbacks) {\n            if (!global._Brackets_LiveDev_Socket_Transport_URL) {\n                console.error(\"[Brackets LiveDev] No socket transport URL injected\");\n            } else {\n                this._callbacks = callbacks;\n            }\n        },\n\n        /**\n         * Connects to the NodeSocketTransport in Brackets at the given WebSocket URL.\n         * @param {string} url\n         */\n        connect: function (url) {\n            var self = this;\n            this._ws = new WebSocket(url);\n\n            // One potential source of confusion: the transport sends two \"types\" of messages -\n            // these are distinct from the protocol's own messages. This is because this transport\n            // needs to send an initial \"connect\" message telling the Brackets side of the transport\n            // the URL of the page that it's connecting from, distinct from the actual protocol\n            // message traffic. Actual protocol messages are sent as a JSON payload in a message of\n            // type \"message\".\n            //\n            // Other transports might not need to do this - for example, a transport that simply\n            // talks to an iframe within the same process already knows what URL that iframe is\n            // pointing to, so the only comunication that needs to happen via postMessage() is the\n            // actual protocol message strings, and no extra wrapping is necessary.\n\n            this._ws.onopen = function (event) {\n                // Send the initial \"connect\" message to tell the other end what URL we're from.\n                self._ws.send(JSON.stringify({\n                    type: \"connect\",\n                    url: global.location.href\n                }));\n                console.log(\"[Brackets LiveDev] Connected to Brackets at \" + url);\n                if (self._callbacks && self._callbacks.connect) {\n                    self._callbacks.connect();\n                }\n            };\n            this._ws.onmessage = function (event) {\n                console.log(\"[Brackets LiveDev] Got message: \" + event.data);\n                if (self._callbacks && self._callbacks.message) {\n                    self._callbacks.message(event.data);\n                }\n            };\n            this._ws.onclose = function (event) {\n                self._ws = null;\n                if (self._callbacks && self._callbacks.close) {\n                    self._callbacks.close();\n                }\n            };\n            // TODO: onerror\n        },\n\n        /**\n         * Sends a message over the transport.\n         * @param {string} msgStr The message to send.\n         */\n        send: function (msgStr) {\n            if (this._ws) {\n                // See comment in `connect()` above about why we wrap the message in a transport message\n                // object.\n                this._ws.send(JSON.stringify({\n                    type: \"message\",\n                    message: msgStr\n                }));\n            } else {\n                console.log(\"[Brackets LiveDev] Tried to send message over closed connection: \" + msgStr);\n            }\n        },\n\n        /**\n         * Establish web socket connection.\n         */\n        enable: function () {\n            this.connect(global._Brackets_LiveDev_Socket_Transport_URL);\n        }\n    };\n    global._Brackets_LiveDev_Transport = WebSocketTransport;\n}(this));\n"],"file":"NodeSocketTransportRemote.js"}