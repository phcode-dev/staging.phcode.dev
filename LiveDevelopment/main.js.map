{"version":3,"sources":["LiveDevelopment/main.js"],"names":["define","main","require","exports","module","Commands","AppInit","MultiBrowserLiveDev","LivePreviewTransport","CommandManager","PreferencesManager","UrlParams","Strings","ExtensionUtils","StringUtils","EventDispatcher","EVENT_LIVE_HIGHLIGHT_PREF_CHANGED","params","config","experimental","debug","highlight","highlightConfig","borderColor","r","g","b","a","contentColor","marginColor","paddingColor","showInfo","_status","_allStatusStyles","join","_$btnGoLive","prefs","getExtensionPrefs","PREF_REMOTEHIGHLIGHT","remoteHighlightPref","definePreference","animateStartValue","background-color","opacity","animateEndValue","paddingStyling","border-width","border-style","border-color","marginStyling","showPaddingMargin","description","DESCRIPTION_LIVE_DEV_HIGHLIGHT_SETTINGS","_loadStyles","lessText","less","render","onParse","err","tree","console","assert","addEmbeddedStyleSheet","css","_setLabel","$btn","text","style","tooltip","$","remove","removeClass","length","addClass","appendTo","attr","closeLivePreview","status","STATUS_ACTIVE","close","openLivePreview","STATUS_INACTIVE","Phoenix","isTestWindow","open","isInactive","isActive","setLivePreviewPinned","urlPinned","setLivePreviewTransportBridge","transportBridge","_showStatusChangeReason","reason","twipsy","removeData","translatedReason","toUpperCase","format","LIVE_DEV_CLOSED_UNKNOWN_REASON","options","placement","trigger","autoHideDelay","title","_setupGoLiveButton","on","EVENT_STATUS_CHANGE","statusChange","event","_setupGoLiveMenu","get","FILE_LIVE_FILE_PREVIEW","setChecked","FILE_LIVE_HIGHLIGHT","setEnabled","_updateHighlightCheckmark","_handlePreviewHighlightCommand","showHighlight","hideHighlight","setViewState","_setupDebugHelpers","window","report","info","_handleReloadLivePreviewCommand","reload","appReady","parse","remoteHighlight","init","LIVE_DEV_STATUS_TIP_NOT_CONNECTED","LIVE_DEV_STATUS_TIP_PROGRESS1","LIVE_DEV_STATUS_TIP_CONNECTED","LIVE_DEV_STATUS_TIP_OUT_OF_SYNC","LIVE_DEV_STATUS_TIP_SYNC_ERROR","agents","remote","call","JSON","stringify","EVENT_OPEN_PREVIEW_URL","previewDetails","EVENT_CONNECTION_CLOSE","clientId","EVENT_LIVE_PREVIEW_CLICKED","_event","clickDetails","EVENT_LIVE_PREVIEW_RELOAD","clientDetails","stateManager","getViewState","register","CMD_LIVE_HIGHLIGHT","CMD_RELOAD_LIVE_PREVIEW","makeEventDispatcher","getConnectionIds","getLivePreviewDetails","getLivePreviewBaseURL"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global less, Phoenix */\n\n/**\n * main integrates LiveDevelopment into Brackets\n *\n * This module creates two menu items:\n *\n *  \"Go Live\": open or close a Live Development session and visualize the status\n *  \"Highlight\": toggle source highlighting\n */\ndefine(function main(require, exports, module) {\n\n\n    const Commands            = require(\"command/Commands\"),\n        AppInit             = require(\"utils/AppInit\"),\n        MultiBrowserLiveDev = require(\"LiveDevelopment/LiveDevMultiBrowser\"),\n        LivePreviewTransport  = require(\"LiveDevelopment/MultiBrowserImpl/transports/LivePreviewTransport\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        UrlParams           = require(\"utils/UrlParams\").UrlParams,\n        Strings             = require(\"strings\"),\n        ExtensionUtils      = require(\"utils/ExtensionUtils\"),\n        StringUtils         = require(\"utils/StringUtils\"),\n        EventDispatcher      = require(\"utils/EventDispatcher\");\n\n    const EVENT_LIVE_HIGHLIGHT_PREF_CHANGED = \"liveHighlightPrefChange\";\n\n    var params = new UrlParams();\n    var config = {\n        experimental: false, // enable experimental features\n        debug: true, // enable debug output and helpers\n        highlight: true, // enable highlighting?\n        highlightConfig: { // the highlight configuration for the Inspector\n            borderColor:  {r: 255, g: 229, b: 153, a: 0.66},\n            contentColor: {r: 111, g: 168, b: 220, a: 0.55},\n            marginColor:  {r: 246, g: 178, b: 107, a: 0.66},\n            paddingColor: {r: 147, g: 196, b: 125, a: 0.66},\n            showInfo: true\n        }\n    };\n    // Status labels/styles are ordered: error, not connected, progress1, progress2, connected.\n    var _status,\n        _allStatusStyles = [\"warning\", \"info\", \"success\", \"out-of-sync\", \"sync-error\"].join(\" \");\n\n    var _$btnGoLive; // reference to the GoLive button\n\n    var prefs = PreferencesManager.getExtensionPrefs(\"livedev\");\n\n    // \"livedev.remoteHighlight\" preference\n    var PREF_REMOTEHIGHLIGHT = \"remoteHighlight\";\n    var remoteHighlightPref = prefs.definePreference(PREF_REMOTEHIGHLIGHT, \"object\", {\n        animateStartValue: {\n            \"background-color\": \"rgba(0, 162, 255, 0.5)\",\n            \"opacity\": 0\n        },\n        animateEndValue: {\n            \"background-color\": \"rgba(0, 162, 255, 0)\",\n            \"opacity\": 0.6\n        },\n        \"paddingStyling\": {\n            \"border-width\": \"1px\",\n            \"border-style\": \"dashed\",\n            \"border-color\": \"rgba(0, 162, 255, 0.5)\"\n        },\n        \"marginStyling\": {\n            \"background-color\": \"rgba(21, 165, 255, 0.58)\"\n        },\n        \"borderColor\": \"rgba(21, 165, 255, 0.85)\",\n        \"showPaddingMargin\": true\n    }, {\n        description: Strings.DESCRIPTION_LIVE_DEV_HIGHLIGHT_SETTINGS\n    });\n\n    /** Load Live Development LESS Style */\n    function _loadStyles() {\n        var lessText = require(\"text!LiveDevelopment/main.less\");\n\n        less.render(lessText, function onParse(err, tree) {\n            console.assert(!err, err);\n            ExtensionUtils.addEmbeddedStyleSheet(tree.css);\n        });\n    }\n\n    /**\n     * Change the appearance of a button. Omit text to remove any extra text; omit style to return to default styling;\n     * omit tooltip to leave tooltip unchanged.\n     */\n    function _setLabel($btn, text, style, tooltip) {\n        // Clear text/styles from previous status\n        $(\"span\", $btn).remove();\n        $btn.removeClass(_allStatusStyles);\n\n        // Set text/styles for new status\n        if (text && text.length > 0) {\n            $(\"<span class=\\\"label\\\">\")\n                .addClass(style)\n                .text(text)\n                .appendTo($btn);\n        } else {\n            $btn.addClass(style);\n        }\n\n        if (tooltip) {\n            $btn.attr(\"title\", tooltip);\n        }\n    }\n\n    function closeLivePreview() {\n        if (MultiBrowserLiveDev.status >= MultiBrowserLiveDev.STATUS_ACTIVE) {\n            MultiBrowserLiveDev.close();\n        }\n    }\n\n    function openLivePreview() {\n        if (MultiBrowserLiveDev.status <= MultiBrowserLiveDev.STATUS_INACTIVE\n            && !Phoenix.isTestWindow) {\n            MultiBrowserLiveDev.open();\n        }\n    }\n\n    function isInactive() {\n        return MultiBrowserLiveDev.status === MultiBrowserLiveDev.STATUS_INACTIVE;\n    }\n\n    function isActive() {\n        return MultiBrowserLiveDev.status === MultiBrowserLiveDev.STATUS_ACTIVE;\n    }\n\n    function setLivePreviewPinned(urlPinned) {\n        MultiBrowserLiveDev.setLivePreviewPinned(urlPinned);\n    }\n\n    function setLivePreviewTransportBridge(transportBridge) {\n        LivePreviewTransport.setLivePreviewTransportBridge(transportBridge);\n    }\n\n    /** Called on status change */\n    function _showStatusChangeReason(reason) {\n        // Destroy the previous twipsy (options are not updated otherwise)\n        _$btnGoLive.twipsy(\"hide\").removeData(\"twipsy\");\n\n        // If there was no reason or the action was an explicit request by the user, don't show a twipsy\n        if (!reason || reason === \"explicit_close\") {\n            return;\n        }\n\n        // Translate the reason\n        var translatedReason = Strings[\"LIVE_DEV_\" + reason.toUpperCase()];\n        if (!translatedReason) {\n            translatedReason = StringUtils.format(Strings.LIVE_DEV_CLOSED_UNKNOWN_REASON, reason);\n        }\n\n        // Configure the twipsy\n        var options = {\n            placement: \"left\",\n            trigger: \"manual\",\n            autoHideDelay: 5000,\n            title: function () {\n                return translatedReason;\n            }\n        };\n\n        // Show the twipsy with the explanation\n        _$btnGoLive.twipsy(options).twipsy(\"show\");\n    }\n\n    /** Create the menu item \"Go Live\" */\n    function _setupGoLiveButton() {\n        if (!_$btnGoLive) {\n            _$btnGoLive = $(\"#toolbar-go-live\");\n        }\n        MultiBrowserLiveDev.on(MultiBrowserLiveDev.EVENT_STATUS_CHANGE, function statusChange(event, status, reason) {\n            // status starts at -1 (error), so add one when looking up name and style\n            // See the comments at the top of LiveDevelopment.js for details on the\n            // various status codes.\n            _setLabel(_$btnGoLive, null, _status[status + 1].style, _status[status + 1].tooltip);\n            _showStatusChangeReason(reason);\n        });\n\n        // Initialize tooltip for 'not connected' state\n        _setLabel(_$btnGoLive, null, _status[1].style, _status[1].tooltip);\n    }\n\n    /** Maintains state of the Live Preview menu item */\n    function _setupGoLiveMenu() {\n        MultiBrowserLiveDev.on(MultiBrowserLiveDev.EVENT_STATUS_CHANGE, function statusChange(event, status) {\n            // Update the checkmark next to 'Live Preview' menu item\n            // Add checkmark when status is STATUS_ACTIVE; otherwise remove it\n            CommandManager.get(Commands.FILE_LIVE_FILE_PREVIEW)\n                .setChecked(status === MultiBrowserLiveDev.STATUS_ACTIVE);\n            CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT)\n                .setEnabled(status === MultiBrowserLiveDev.STATUS_ACTIVE);\n        });\n    }\n\n    function _updateHighlightCheckmark() {\n        CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT).setChecked(config.highlight);\n        exports.trigger(EVENT_LIVE_HIGHLIGHT_PREF_CHANGED, config.highlight);\n    }\n\n    function _handlePreviewHighlightCommand() {\n        config.highlight = !config.highlight;\n        _updateHighlightCheckmark();\n        if (config.highlight) {\n            MultiBrowserLiveDev.showHighlight();\n        } else {\n            MultiBrowserLiveDev.hideHighlight();\n        }\n        PreferencesManager.setViewState(\"livedev.highlight\", config.highlight);\n    }\n\n    /** Setup window references to useful LiveDevelopment modules */\n    function _setupDebugHelpers() {\n        window.report = function report(params) { window.params = params; console.info(params); };\n    }\n\n    /** force reload the live preview currently only with shortcut ctrl-shift-R */\n    function _handleReloadLivePreviewCommand() {\n        if (MultiBrowserLiveDev.status >= MultiBrowserLiveDev.STATUS_ACTIVE) {\n            MultiBrowserLiveDev.reload();\n        }\n    }\n\n    /** Initialize LiveDevelopment */\n    AppInit.appReady(function () {\n        params.parse();\n        config.remoteHighlight = prefs.get(PREF_REMOTEHIGHLIGHT);\n\n        // init experimental multi-browser implementation\n        // it can be enable by setting 'livedev.multibrowser' preference to true.\n        // It has to be initiated at this point in case of dynamically switching\n        // by changing the preference value.\n        MultiBrowserLiveDev.init(config);\n\n        _loadStyles();\n        _updateHighlightCheckmark();\n\n        // update styles for UI status\n        _status = [\n            { tooltip: Strings.LIVE_DEV_STATUS_TIP_NOT_CONNECTED, style: \"warning\" },\n            { tooltip: Strings.LIVE_DEV_STATUS_TIP_NOT_CONNECTED, style: \"\" },\n            { tooltip: Strings.LIVE_DEV_STATUS_TIP_PROGRESS1, style: \"info\" },\n            { tooltip: Strings.LIVE_DEV_STATUS_TIP_CONNECTED, style: \"success\" },\n            { tooltip: Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC, style: \"out-of-sync\" },\n            { tooltip: Strings.LIVE_DEV_STATUS_TIP_SYNC_ERROR, style: \"sync-error\" },\n            { tooltip: Strings.LIVE_DEV_STATUS_TIP_PROGRESS1, style: \"info\" },\n            { tooltip: Strings.LIVE_DEV_STATUS_TIP_PROGRESS1, style: \"info\" }\n        ];\n        // setup status changes listeners for new implementation\n        _setupGoLiveButton();\n        _setupGoLiveMenu();\n\n        if (config.debug) {\n            _setupDebugHelpers();\n        }\n\n        remoteHighlightPref\n            .on(\"change\", function () {\n                config.remoteHighlight = prefs.get(PREF_REMOTEHIGHLIGHT);\n                if (MultiBrowserLiveDev && MultiBrowserLiveDev.status >= MultiBrowserLiveDev.STATUS_ACTIVE) {\n                    MultiBrowserLiveDev.agents.remote.call(\"updateConfig\",JSON.stringify(config));\n                }\n            });\n\n        MultiBrowserLiveDev.on(MultiBrowserLiveDev.EVENT_OPEN_PREVIEW_URL, function (event, previewDetails) {\n            exports.trigger(exports.EVENT_OPEN_PREVIEW_URL, previewDetails);\n        });\n        MultiBrowserLiveDev.on(MultiBrowserLiveDev.EVENT_CONNECTION_CLOSE, function (event, {clientId}) {\n            exports.trigger(exports.EVENT_CONNECTION_CLOSE, {clientId});\n        });\n        MultiBrowserLiveDev.on(MultiBrowserLiveDev.EVENT_LIVE_PREVIEW_CLICKED, function (_event, clickDetails) {\n            exports.trigger(exports.EVENT_LIVE_PREVIEW_CLICKED, clickDetails);\n        });\n        MultiBrowserLiveDev.on(MultiBrowserLiveDev.EVENT_LIVE_PREVIEW_RELOAD, function (_event, clientDetails) {\n            exports.trigger(exports.EVENT_LIVE_PREVIEW_RELOAD, clientDetails);\n        });\n\n    });\n\n    // init prefs\n    PreferencesManager.stateManager.definePreference(\"livedev.highlight\", \"boolean\", true)\n        .on(\"change\", function () {\n            config.highlight = PreferencesManager.getViewState(\"livedev.highlight\");\n            _updateHighlightCheckmark();\n        });\n\n    config.highlight = PreferencesManager.getViewState(\"livedev.highlight\");\n\n    // init commands\n    CommandManager.register(Strings.CMD_LIVE_HIGHLIGHT, Commands.FILE_LIVE_HIGHLIGHT, _handlePreviewHighlightCommand);\n    CommandManager.register(Strings.CMD_RELOAD_LIVE_PREVIEW, Commands.CMD_RELOAD_LIVE_PREVIEW, _handleReloadLivePreviewCommand);\n\n    CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT).setEnabled(false);\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // public events\n    exports.EVENT_OPEN_PREVIEW_URL = MultiBrowserLiveDev.EVENT_OPEN_PREVIEW_URL;\n    exports.EVENT_CONNECTION_CLOSE = MultiBrowserLiveDev.EVENT_CONNECTION_CLOSE;\n    exports.EVENT_LIVE_PREVIEW_CLICKED = MultiBrowserLiveDev.EVENT_LIVE_PREVIEW_CLICKED;\n    exports.EVENT_LIVE_PREVIEW_RELOAD = MultiBrowserLiveDev.EVENT_LIVE_PREVIEW_RELOAD;\n    exports.EVENT_LIVE_HIGHLIGHT_PREF_CHANGED = EVENT_LIVE_HIGHLIGHT_PREF_CHANGED;\n\n    // Export public functions\n    exports.openLivePreview = openLivePreview;\n    exports.closeLivePreview = closeLivePreview;\n    exports.isInactive = isInactive;\n    exports.isActive = isActive;\n    exports.setLivePreviewPinned = setLivePreviewPinned;\n    exports.setLivePreviewTransportBridge = setLivePreviewTransportBridge;\n    exports.getConnectionIds = MultiBrowserLiveDev.getConnectionIds;\n    exports.getLivePreviewDetails = MultiBrowserLiveDev.getLivePreviewDetails;\n    exports.getLivePreviewBaseURL = MultiBrowserLiveDev.getLivePreviewBaseURL;\n});\n"],"file":"main.js"}