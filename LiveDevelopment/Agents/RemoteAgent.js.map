{"version":3,"sources":["LiveDevelopment/Agents/RemoteAgent.js"],"names":["define","RemoteAgent","require","exports","module","LiveDevelopment","EventDispatcher","Inspector","RemoteFunctions","PreferencesManager","_load","_objectId","_intervalId","_onAttributeModified","event","res","matches","exec","name","trigger","_call","objectId","method","varargs","console","assert","args","Array","prototype","slice","call","arguments","callback","deferred","$","Deferred","length","pop","map","arg","nodeId","resolve","when","apply","undefined","done","onResolvedAllNodes","params","forEach","push","value","Runtime","callFunctionOn","then","reject","promise","argsArray","concat","_stopKeepAliveInterval","window","clearInterval","_startKeepAliveInterval","setInterval","_onFrameNavigated","frame","parentId","command","JSON","stringify","config","get","evaluate","onEvaluate","response","error","wasThrown","result","load","Page","on","DOM","unload","off","makeEventDispatcher"],"mappings":"AA8BAA,OAAO,SAASC,YAAYC,QAASC,QAASC,QAG1C,IAAIC,gBAAsBH,QAAQ,mCAC9BI,gBAAsBJ,QAAQ,yBAC9BK,UAAsBL,QAAQ,uCAC9BM,gBAAsBN,QAAQ,kDAC9BO,mBAAsBP,QAAQ,kCAE9BQ,MACAC,UACAC,YAGJ,SAASC,qBAAqBC,MAAOC,KAEjC,IAAIC,QAAU,gBAAgBC,KAAKF,IAAIG,MACnCF,SACAb,QAAQgB,QAAQH,QAAQ,GAAID,KAIpC,SAASK,MAAMC,SAAUC,OAAQC,SAC7BC,QAAQC,OAAOJ,SAAU,yDACzB,IAAIK,KAAOC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,GAC7CC,SACAC,SAAW,IAAIC,EAAEC,SA+BrB,MA5BqC,mBAA1BT,KAAKA,KAAKU,OAAS,KAC1BJ,SAAWN,KAAKW,OAIpBX,KAAOA,KAAKY,IAAI,SAAUC,KACtB,OAAIA,KAAOA,IAAIC,OACJD,IAAIE,UAGRF,MAGXL,EAAEQ,KAAKC,WAAMC,EAAWlB,MAAMmB,KAAK,SAASC,qBACxC,IAAIC,OAAS,GAEbrB,KAAKsB,QAAQ,SAAUT,KACfA,IAAIlB,SACJ0B,OAAOE,KAAK,CAAC5B,SAAUkB,IAAIlB,WAE3B0B,OAAOE,KAAK,CAACC,MAAOX,QAI5BhC,UAAU4C,QAAQC,eAAe/B,SAAUC,OAAQyB,YAAQH,EAAWZ,UACjEqB,KAAKpB,SAASQ,QAASR,SAASqB,UAGlCrB,SAASsB,UAQpB,SAASzB,KAAKR,OAAQC,SAClB,IAAIiC,UAAY,CAAC7C,UAAW,OAASW,QAMrC,OAJIS,UAAUK,OAAS,IACnBoB,UAAYA,UAAUC,OAAO9B,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,KAGhEX,MAAMuB,MAAM,KAAMa,WAG7B,SAASE,yBACD9C,cACA+C,OAAOC,cAAchD,aACrBA,YAAc,MAItB,SAASiD,0BACLH,yBAEA9C,YAAc+C,OAAOG,YAAY,WAC7BhC,KAAK,cACN,KAIP,SAASiC,kBAAkBjD,MAAOC,KAG9B,IAAIA,IAAIiD,MAAMC,SAAd,CAIAP,yBAGA,IAAIQ,QAAU,cAAgB1D,gBAAkB,IAAM2D,KAAKC,UAAU/D,gBAAgBgE,QAAU,IAAM5D,mBAAmB6D,IAAI,kBAAoB,KAEhJ/D,UAAU4C,QAAQoB,SAASL,QAAS,SAASM,WAAWC,UAChDA,SAASC,OAASD,SAASE,UAC3BjE,MAAM4C,OAAOmB,SAASC,QAEtB/D,UAAY8D,SAASG,OAAOvD,SAC5BX,MAAM+B,UAENoB,8BAMZ,SAASgB,OAML,OALAnE,MAAQ,IAAIwB,EAAEC,SACd5B,UAAUuE,KAAKC,GAAG,6BAA8BhB,mBAChDxD,UAAUuE,KAAKC,GAAG,kCAAmCrB,wBACrDnD,UAAUyE,IAAID,GAAG,gCAAiClE,sBAE3CH,MAAM6C,UAIjB,SAAS0B,SACL1E,UAAUuE,KAAKI,IAAI,gBACnB3E,UAAUyE,IAAIE,IAAI,gBAClBxB,yBAIJpD,gBAAgB6E,oBAAoBhF,SAGpCA,QAAQ2B,KAAOA,KACf3B,QAAQ0E,KAAOA,KACf1E,QAAQ8E,OAASA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\n/**\n * RemoteAgent defines and provides an interface for custom remote functions\n * loaded from RemoteFunctions. Remote commands are executed via\n * `call(name, varargs)`.\n *\n * Remote events are dispatched as events on this object.\n */\ndefine(function RemoteAgent(require, exports, module) {\n\n\n    var LiveDevelopment     = require(\"LiveDevelopment/LiveDevelopment\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        Inspector           = require(\"LiveDevelopment/Inspector/Inspector\"),\n        RemoteFunctions     = require(\"text!LiveDevelopment/Agents/RemoteFunctions.js\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\");\n\n    var _load; // deferred load\n    var _objectId; // the object id of the remote object\n    var _intervalId; // interval used to send keepAlive events\n\n    // WebInspector Event: DOM.attributeModified\n    function _onAttributeModified(event, res) {\n        // res = {nodeId, name, value}\n        var matches = /^data-ld-(.*)/.exec(res.name);\n        if (matches) {\n            exports.trigger(matches[1], res);\n        }\n    }\n\n    function _call(objectId, method, varargs) {\n        console.assert(objectId, \"Attempted to call remote method without objectId set.\");\n        var args = Array.prototype.slice.call(arguments, 2),\n            callback,\n            deferred = new $.Deferred();\n\n        // if the last argument is a function it is the callback function\n        if (typeof args[args.length - 1] === \"function\") {\n            callback = args.pop();\n        }\n\n        // Resolve node parameters\n        args = args.map(function (arg) {\n            if (arg && arg.nodeId) {\n                return arg.resolve();\n            }\n\n            return arg;\n        });\n\n        $.when.apply(undefined, args).done(function onResolvedAllNodes() {\n            var params = [];\n\n            args.forEach(function (arg) {\n                if (arg.objectId) {\n                    params.push({objectId: arg.objectId});\n                } else {\n                    params.push({value: arg});\n                }\n            });\n\n            Inspector.Runtime.callFunctionOn(objectId, method, params, undefined, callback)\n                .then(deferred.resolve, deferred.reject);\n        });\n\n        return deferred.promise();\n    }\n\n    /** Call a remote function\n     * The parameters are passed on to the remote functions. Nodes are resolved\n     * and sent as objectIds.\n     * @param {string} function name\n     */\n    function call(method, varargs) {\n        var argsArray = [_objectId, \"_LD.\" + method];\n\n        if (arguments.length > 1) {\n            argsArray = argsArray.concat(Array.prototype.slice.call(arguments, 1));\n        }\n\n        return _call.apply(null, argsArray);\n    }\n\n    function _stopKeepAliveInterval() {\n        if (_intervalId) {\n            window.clearInterval(_intervalId);\n            _intervalId = null;\n        }\n    }\n\n    function _startKeepAliveInterval() {\n        _stopKeepAliveInterval();\n\n        _intervalId = window.setInterval(function () {\n            call(\"keepAlive\");\n        }, 1000);\n    }\n\n    // WebInspector Event: Page.frameNavigated\n    function _onFrameNavigated(event, res) {\n        // res = {frame}\n        // Re-inject RemoteFunctions when navigating to a new page, but not if an iframe was loaded\n        if (res.frame.parentId) {\n            return;\n        }\n\n        _stopKeepAliveInterval();\n\n        // inject RemoteFunctions\n        var command = \"window._LD=\" + RemoteFunctions + \"(\" + JSON.stringify(LiveDevelopment.config) + \",\" + PreferencesManager.get(\"livedev.wsPort\") + \");\";\n\n        Inspector.Runtime.evaluate(command, function onEvaluate(response) {\n            if (response.error || response.wasThrown) {\n                _load.reject(response.error);\n            } else {\n                _objectId = response.result.objectId;\n                _load.resolve();\n\n                _startKeepAliveInterval();\n            }\n        });\n    }\n\n    /** Initialize the agent */\n    function load() {\n        _load = new $.Deferred();\n        Inspector.Page.on(\"frameNavigated.RemoteAgent\", _onFrameNavigated);\n        Inspector.Page.on(\"frameStartedLoading.RemoteAgent\", _stopKeepAliveInterval);\n        Inspector.DOM.on(\"attributeModified.RemoteAgent\", _onAttributeModified);\n\n        return _load.promise();\n    }\n\n    /** Clean up */\n    function unload() {\n        Inspector.Page.off(\".RemoteAgent\");\n        Inspector.DOM.off(\".RemoteAgent\");\n        _stopKeepAliveInterval();\n    }\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // Export public functions\n    exports.call = call;\n    exports.load = load;\n    exports.unload = unload;\n});\n"],"file":"RemoteAgent.js"}