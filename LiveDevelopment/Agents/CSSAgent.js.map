{"version":3,"sources":["LiveDevelopment/Agents/CSSAgent.js"],"names":["define","CSSAgent","require","exports","module","_","Inspector","EventDispatcher","PathUtils","_styleSheetDetails","_getAllStyleSheetsNotFound","_canonicalize","url","parseUrl","hrefNoSearch","_onFrameNavigated","event","res","frame","parentId","styleForURL","styleSheetId","styles","canonicalizedURL","reloadCSSForDocument","doc","newContent","deferreds","undefined","getText","push","CSS","setStyleSheetText","length","$","when","apply","console","error","Deferred","reject","promise","clearCSSForDocument","_styleSheetAdded","header","sourceURL","existing","duplicate","some","styleSheet","trigger","_styleSheetRemoved","_onFrameStoppedLoading","regexChromeUA","userAgent","uaMatch","getUserAgent","match","parseInt","Page","off","send","done","headers","forEach","fail","err","code","enable","load","on","unload","makeEventDispatcher"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint forin: true */\n\n/**\n * CSSAgent keeps track of loaded style sheets and allows reloading them\n * from a {Document}.\n *\n * CSSAgent dispatches styleSheetAdded and styleSheetRemoved events, passing\n * the URL for the added/removed style sheet.\n */\ndefine(function CSSAgent(require, exports, module) {\n\n\n    var _ = require(\"thirdparty/lodash\");\n\n    var Inspector       = require(\"LiveDevelopment/Inspector/Inspector\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        PathUtils       = require(\"thirdparty/path-utils/path-utils\");\n\n    /**\n     * Stylesheet details\n     * @type {Object.<string, CSS.CSSStyleSheetHeader>}\n     */\n    var _styleSheetDetails = {};\n\n    /**\n     * Is getAllStyleSheets() API defined? - This is undefined until we test for API\n     * @type {boolean}\n     */\n    var _getAllStyleSheetsNotFound;\n\n    /**\n     * Create a canonicalized version of the given URL, stripping off query strings and hashes.\n     * @param {string} url the URL to canonicalize\n     * @return the canonicalized URL\n     */\n    function _canonicalize(url) {\n        return PathUtils.parseUrl(url).hrefNoSearch;\n    }\n\n    /**\n     * @private\n     * WebInspector Event: Page.frameNavigated\n     * @param {jQuery.Event} event\n     * @param {frame: Frame} res\n     */\n    function _onFrameNavigated(event, res) {\n        // Clear maps when navigating to a new page, but not if an iframe was loaded\n        if (!res.frame.parentId) {\n            _styleSheetDetails = {};\n        }\n    }\n\n    /**\n     * Get the style sheets for a url\n     * @param {string} url\n     * @return {Object.<string, CSSStyleSheetHeader>}\n     */\n    function styleForURL(url) {\n        var styleSheetId, styles = {};\n        url = _canonicalize(url);\n        for (styleSheetId in _styleSheetDetails) {\n            if (_styleSheetDetails[styleSheetId].canonicalizedURL === url) {\n                styles[styleSheetId] = _styleSheetDetails[styleSheetId];\n            }\n        }\n        return styles;\n    }\n\n    /**\n     * Reload a CSS style sheet from a document\n     * @param {Document} document\n     * @param {string=} newContent new content of every stylesheet. Defaults to doc.getText() if omitted\n     * @return {jQuery.Promise}\n     */\n    function reloadCSSForDocument(doc, newContent) {\n        var styles = styleForURL(doc.url),\n            styleSheetId,\n            deferreds = [];\n\n        if (newContent === undefined) {\n            newContent = doc.getText();\n        }\n        for (styleSheetId in styles) {\n            deferreds.push(Inspector.CSS.setStyleSheetText(styles[styleSheetId].styleSheetId, newContent));\n        }\n        if (!deferreds.length) {\n            console.error(\"Style Sheet for document not loaded: \" + doc.url);\n            return new $.Deferred().reject().promise();\n        }\n        // return master deferred\n        return $.when.apply($, deferreds);\n    }\n\n    /**\n     * Empties a CSS style sheet given a document that has been deleted\n     * @param {Document} document\n     * @return {jQuery.Promise}\n     */\n    function clearCSSForDocument(doc) {\n        return reloadCSSForDocument(doc, \"\");\n    }\n\n    /**\n     * @private\n     * @param {jQuery.Event} event\n     * @param {header: CSSStyleSheetHeader}\n     */\n    function _styleSheetAdded(event, res) {\n        var url             = _canonicalize(res.header.sourceURL),\n            existing        = styleForURL(res.header.sourceURL),\n            styleSheetId    = res.header.styleSheetId,\n            duplicate;\n\n        // detect duplicates\n        duplicate = _.some(existing, function (styleSheet) {\n            return styleSheet && styleSheet.styleSheetId === styleSheetId;\n        });\n        if (duplicate) {\n            return;\n        }\n\n        _styleSheetDetails[styleSheetId] = res.header;\n        _styleSheetDetails[styleSheetId].canonicalizedURL = url; // canonicalized URL\n\n        exports.trigger(\"styleSheetAdded\", url, res.header);\n    }\n\n    /**\n     * @private\n     * @param {jQuery.Event} event\n     * @param {styleSheetId: StyleSheetId}\n     */\n    function _styleSheetRemoved(event, res) {\n        var header = _styleSheetDetails[res.styleSheetId];\n\n        delete _styleSheetDetails[res.styleSheetId];\n\n        exports.trigger(\"styleSheetRemoved\", header.canonicalizedURL, header);\n    }\n\n    /**\n     * @private\n     * Attempt to use deleted API CSS.getAllStyleSheets\n     * @param {jQuery.Event} event\n     * @param {frameId: Network.FrameId}\n     */\n    function _onFrameStoppedLoading(event, res) {\n        var regexChromeUA,\n            userAgent,\n            uaMatch;\n\n        // Check for undefined so user agent string is only parsed once\n        if (_getAllStyleSheetsNotFound === undefined) {\n            regexChromeUA = /Chrome\\/(\\d+)\\./;  // Example: \"... Chrome/34.0.1847.131 ...\"\n            userAgent     = Inspector.getUserAgent();\n            uaMatch       = userAgent.match(regexChromeUA);\n\n            // If we have user agent string, and Chrome is >= 34, then don't use getAllStyleSheets\n            if (uaMatch && parseInt(uaMatch[1], 10) >= 34) {\n                _getAllStyleSheetsNotFound = true;\n                Inspector.Page.off(\"frameStoppedLoading.CSSAgent\", _onFrameStoppedLoading);\n                return;\n            }\n        }\n\n        // Manually fire getAllStyleSheets since it will be removed from\n        // Inspector.json in a future update\n        Inspector.send(\"CSS\", \"getAllStyleSheets\").done(function (res) {\n            res.headers.forEach(function (header) {\n                // _styleSheetAdded will ignore duplicates\n                _getAllStyleSheetsNotFound = false;\n                _styleSheetAdded(null, { header: header });\n            });\n        }).fail(function (err) {\n            // Disable getAllStyleSheets if the first call fails\n            _getAllStyleSheetsNotFound = (err.code === -32601);\n            Inspector.Page.off(\"frameStoppedLoading.CSSAgent\", _onFrameStoppedLoading);\n        });\n    }\n\n    /** Enable the domain */\n    function enable() {\n        return Inspector.CSS.enable();\n    }\n\n    /** Initialize the agent */\n    function load() {\n        Inspector.Page.on(\"frameNavigated.CSSAgent\", _onFrameNavigated);\n        Inspector.CSS.on(\"styleSheetAdded.CSSAgent\", _styleSheetAdded);\n        Inspector.CSS.on(\"styleSheetRemoved.CSSAgent\", _styleSheetRemoved);\n\n        // getAllStyleSheets was deleted beginning with Chrome 34\n        if (!_getAllStyleSheetsNotFound) {\n            Inspector.Page.on(\"frameStoppedLoading.CSSAgent\", _onFrameStoppedLoading);\n        }\n    }\n\n    /** Clean up */\n    function unload() {\n        Inspector.Page.off(\".CSSAgent\");\n        Inspector.CSS.off(\".CSSAgent\");\n    }\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // Export public functions\n    exports.enable = enable;\n    exports.styleForURL = styleForURL;\n    exports.reloadCSSForDocument = reloadCSSForDocument;\n    exports.clearCSSForDocument = clearCSSForDocument;\n    exports.load = load;\n    exports.unload = unload;\n});\n"],"file":"CSSAgent.js"}