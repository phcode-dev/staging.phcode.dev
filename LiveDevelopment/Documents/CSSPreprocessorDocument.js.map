{"version":3,"sources":["LiveDevelopment/Documents/CSSPreprocessorDocument.js"],"names":["define","CSSPreprocessorDocumentModule","require","exports","module","_","EventDispatcher","CSSUtils","EditorManager","HighlightAgent","Inspector","CSSPreprocessorDocument","doc","editor","this","onCursorActivity","bind","addRef","onActiveEditorChange","on","getActiveEditor","makeEventDispatcher","prototype","close","off","releaseRef","detachFromEditor","isLiveEditingEnabled","attachToEditor","updateHighlight","hide","config","highlight","selectors","each","getSelections","sel","selector","findSelectorAtDocumentPos","reversed","end","start","push","length","rule","join","event","newActive","oldActive","document"],"mappings":"AA8BAA,OAAO,SAASC,8BAA8BC,QAASC,QAASC,QAG5D,IAAIC,EAAkBH,QAAQ,qBAC1BI,gBAAkBJ,QAAQ,yBAC1BK,SAAkBL,QAAQ,qBAC1BM,cAAkBN,QAAQ,wBAC1BO,eAAkBP,QAAQ,yCAC1BQ,UAAkBR,QAAQ,uCAS1BS,wBAA0B,SAASA,wBAAwBC,IAAKC,QAChEC,KAAKF,IAAMA,IAEXE,KAAKC,iBAAmBD,KAAKC,iBAAiBC,KAAKF,MAGnDA,KAAKF,IAAIK,SACTH,KAAKI,qBAAuBJ,KAAKI,qBAAqBF,KAAKF,MAC3DN,cAAcW,GAAG,qBAAsBL,KAAKI,sBAC5CJ,KAAKI,qBAAqB,KAAMV,cAAcY,kBAAmB,OAIrEd,gBAAgBe,oBAAoBV,wBAAwBW,WAG5DX,wBAAwBW,UAAUC,MAAQ,SAASA,QAC/CT,KAAKF,IAAIY,IAAI,4BACbhB,cAAcgB,IAAI,qBAAsBV,KAAKI,sBAC7CJ,KAAKF,IAAIa,aACTX,KAAKY,oBAITf,wBAAwBW,UAAUK,qBAAuB,WAGrD,OAAO,GAGXhB,wBAAwBW,UAAUM,eAAiB,SAAUf,QACzDC,KAAKD,OAASA,OAEVC,KAAKD,SACLC,KAAKD,OAAOM,GAAG,yCAA0CL,KAAKC,kBAC9DD,KAAKe,oBAIblB,wBAAwBW,UAAUI,iBAAmB,WAC7CZ,KAAKD,SACLJ,eAAeqB,OACfhB,KAAKD,OAAOW,IAAI,4BAChBV,KAAKD,OAAS,OAItBF,wBAAwBW,UAAUO,gBAAkB,WAChD,GAAInB,UAAUqB,OAAOC,WAAalB,KAAKD,OAAQ,CAC3C,IAAIA,OAASC,KAAKD,OACdoB,UAAY,GAChB5B,EAAE6B,KAAKpB,KAAKD,OAAOsB,gBAAiB,SAAUC,KAC1C,IAAIC,SAAW9B,SAAS+B,0BAA0BzB,OAASuB,IAAIG,SAAWH,IAAII,IAAMJ,IAAIK,OACpFJ,UACAJ,UAAUS,KAAKL,YAGnBJ,UAAUU,OACVlC,eAAemC,KAAKX,UAAUY,KAAK,MAEnCpC,eAAeqB,SAQ3BnB,wBAAwBW,UAAUP,iBAAmB,SAASA,iBAAiB+B,MAAOjC,QAClFC,KAAKe,mBAITlB,wBAAwBW,UAAUJ,qBAAuB,SAAU4B,MAAOC,UAAWC,WACjFlC,KAAKY,mBAEDqB,WAAaA,UAAUE,WAAanC,KAAKF,KACzCE,KAAKc,eAAemB,YAK5B3C,OAAOD,QAAUQ","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * CSSPreprocessorDocument manages a single LESS or SASS source document\n *\n * __HIGHLIGHTING__\n *\n * CSSPreprocessorDocument supports highlighting all DOMNode corresponding to the rule at\n * the cursor position in the editor.\n *\n */\ndefine(function CSSPreprocessorDocumentModule(require, exports, module) {\n\n\n    var _               = require(\"thirdparty/lodash\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        CSSUtils        = require(\"language/CSSUtils\"),\n        EditorManager   = require(\"editor/EditorManager\"),\n        HighlightAgent  = require(\"LiveDevelopment/Agents/HighlightAgent\"),\n        Inspector       = require(\"LiveDevelopment/Inspector/Inspector\");\n\n    /**\n     * @constructor\n     * @param {!Document} doc The source document from Brackets\n     * @param {?Editor} editor The editor for this document. This is not used here since\n     *                  we always need to get the active editor for a preprocessor document\n     *                  and not the one passed in `editor`.\n     */\n    var CSSPreprocessorDocument = function CSSPreprocessorDocument(doc, editor) {\n        this.doc = doc;\n\n        this.onCursorActivity = this.onCursorActivity.bind(this);\n\n        // Add a ref to the doc since we're listening for change events\n        this.doc.addRef();\n        this.onActiveEditorChange = this.onActiveEditorChange.bind(this);\n        EditorManager.on(\"activeEditorChange\", this.onActiveEditorChange);\n        this.onActiveEditorChange(null, EditorManager.getActiveEditor(), null);\n    };\n\n    // CSSPreprocessorDocument doesn't dispatch events, but the \"live document\" interface requires an on() API\n    EventDispatcher.makeEventDispatcher(CSSPreprocessorDocument.prototype);\n\n    /** Close the document */\n    CSSPreprocessorDocument.prototype.close = function close() {\n        this.doc.off(\".CSSPreprocessorDocument\");\n        EditorManager.off(\"activeEditorChange\", this.onActiveEditorChange);\n        this.doc.releaseRef();\n        this.detachFromEditor();\n    };\n\n    /** Return false so edits cause \"out of sync\" icon to appear */\n    CSSPreprocessorDocument.prototype.isLiveEditingEnabled = function () {\n        // Normally this isn't called since wasURLRequested() returns false for us, but if user's\n        // page uses less.js to dynamically load LESS files, then it'll be true and we'll get called.\n        return false;\n    };\n\n    CSSPreprocessorDocument.prototype.attachToEditor = function (editor) {\n        this.editor = editor;\n\n        if (this.editor) {\n            this.editor.on(\"cursorActivity.CSSPreprocessorDocument\", this.onCursorActivity);\n            this.updateHighlight();\n        }\n    };\n\n    CSSPreprocessorDocument.prototype.detachFromEditor = function () {\n        if (this.editor) {\n            HighlightAgent.hide();\n            this.editor.off(\".CSSPreprocessorDocument\");\n            this.editor = null;\n        }\n    };\n\n    CSSPreprocessorDocument.prototype.updateHighlight = function () {\n        if (Inspector.config.highlight && this.editor) {\n            var editor = this.editor,\n                selectors = [];\n            _.each(this.editor.getSelections(), function (sel) {\n                var selector = CSSUtils.findSelectorAtDocumentPos(editor, (sel.reversed ? sel.end : sel.start));\n                if (selector) {\n                    selectors.push(selector);\n                }\n            });\n            if (selectors.length) {\n                HighlightAgent.rule(selectors.join(\",\"));\n            } else {\n                HighlightAgent.hide();\n            }\n        }\n    };\n\n    /** Event Handlers *******************************************************/\n\n    /** Triggered on cursor activity of the editor */\n    CSSPreprocessorDocument.prototype.onCursorActivity = function onCursorActivity(event, editor) {\n        this.updateHighlight();\n    };\n\n    /** Triggered when the active editor changes */\n    CSSPreprocessorDocument.prototype.onActiveEditorChange = function (event, newActive, oldActive) {\n        this.detachFromEditor();\n\n        if (newActive && newActive.document === this.doc) {\n            this.attachToEditor(newActive);\n        }\n    };\n\n    // Export the class\n    module.exports = CSSPreprocessorDocument;\n});\n"],"file":"CSSPreprocessorDocument.js"}