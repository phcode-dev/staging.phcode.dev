{"version":3,"sources":["LiveDevelopment/Documents/JSDocument.js"],"names":["define","JSDocumentModule","require","exports","module","EventDispatcher","Inspector","ScriptAgent","HighlightAgent","JSDocument","doc","editor","this","onHighlight","bind","onChange","onCursorActivity","on","makeEventDispatcher","prototype","close","off","script","scriptForURL","url","event","change","src","getText","Debugger","setScriptSource","scriptId","onSetScriptSource","res","Runtime","evaluate","node","codeMirror","_codeMirror","i","_highlight","removeLineClass","trace","callFrame","line","location","lineNumber","addLineClass","push"],"mappings":"AAwCAA,OAAO,SAASC,iBAAiBC,QAASC,QAASC,QAG/C,IAAIC,gBAAkBH,QAAQ,yBAC1BI,UAAkBJ,QAAQ,uCAC1BK,YAAkBL,QAAQ,sCAC1BM,eAAkBN,QAAQ,yCAO1BO,WAAa,SAASA,WAAWC,IAAKC,QACjCA,SAGLC,KAAKF,IAAMA,IACXE,KAAKD,OAASA,OACdC,KAAKC,YAAcD,KAAKC,YAAYC,KAAKF,MACzCA,KAAKG,SAAWH,KAAKG,SAASD,KAAKF,MACnCA,KAAKI,iBAAmBJ,KAAKI,iBAAiBF,KAAKF,MACnDJ,eAAeS,GAAG,YAAaL,KAAKC,aACpCD,KAAKD,OAAOM,GAAG,SAAUL,KAAKG,UAC9BH,KAAKD,OAAOM,GAAG,iBAAkBL,KAAKI,kBACtCJ,KAAKI,qBAITX,gBAAgBa,oBAAoBT,WAAWU,WAG/CV,WAAWU,UAAUC,MAAQ,SAASA,QAC7BR,KAAKD,SAGVH,eAAea,IAAI,YAAaT,KAAKC,aACrCD,KAAKD,OAAOU,IAAI,SAAUT,KAAKG,UAC/BH,KAAKD,OAAOU,IAAI,iBAAkBT,KAAKI,kBACvCJ,KAAKC,gBAGTJ,WAAWU,UAAUG,OAAS,SAASA,SACnC,OAAOf,YAAYgB,aAAaX,KAAKF,IAAIc,MAO7Cf,WAAWU,UAAUH,iBAAmB,SAASA,iBAAiBS,MAAOd,UAIzEF,WAAWU,UAAUJ,SAAW,SAASA,SAASU,MAAOd,OAAQe,QAC7D,IAAIC,IAAMf,KAAKF,IAAIkB,UACnBtB,UAAUuB,SAASC,gBAAgBlB,KAAKU,SAASS,SAAUJ,IAAK,SAASK,kBAAkBC,KACvF3B,UAAU4B,QAAQC,SAAS,qEAC7BrB,KAAKF,QAIXH,WAAWU,UAAUN,YAAc,SAASA,YAAYY,MAAOW,MAE3D,IAAIC,WAAazB,KAAKD,OAAO2B,YACzBC,EACJ,IAAKA,KAAK3B,KAAK4B,WACXH,WAAWI,gBAAgB7B,KAAK4B,WAAWD,GAAI,OAAQ,aAG3D,GADA3B,KAAK4B,WAAa,GACbJ,MAASA,KAAKM,MAAnB,CAKA,IAAIX,SAAWnB,KAAKU,SAASS,SACzBY,UAAWC,KACf,IAAKL,KAAKH,KAAKM,OACXC,UAAYP,KAAKM,MAAMH,IACTM,UAAYF,UAAUE,SAASd,WAAaA,WACtDa,KAAOD,UAAUE,SAASC,WAC1BT,WAAWU,aAAaH,KAAM,OAAQ,aACtChC,KAAK4B,WAAWQ,KAAKJ,SAMjCxC,OAAOD,QAAUM","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint forin: true */\n\n/**\n * JSDocument manages a single JavaScript source document\n *\n * __EDITING__\n *\n * Editing the document will cause the script to be reloaded via the\n * ScriptAgent, which updates the implementation of all functions without\n * loosing any state. To support redrawing canvases, jQuery must be loaded\n * and a rerender method must be attached to every canvas that clears and\n * renders the canvas.\n *\n * __HIGHLIGHTING__\n *\n * JSDocument supports highlighting nodes from the HighlightAgent. Support\n * for highlighting the nodes that were created / touched by the current\n * line is missing.\n */\ndefine(function JSDocumentModule(require, exports, module) {\n\n\n    var EventDispatcher = require(\"utils/EventDispatcher\"),\n        Inspector       = require(\"LiveDevelopment/Inspector/Inspector\"),\n        ScriptAgent     = require(\"LiveDevelopment/Agents/ScriptAgent\"),\n        HighlightAgent  = require(\"LiveDevelopment/Agents/HighlightAgent\");\n\n    /**\n     * @constructor\n     * @param {!Document} doc The source document from Brackets\n     * @param {!Editor} editor The editor for this document\n     */\n    var JSDocument = function JSDocument(doc, editor) {\n        if (!editor) {\n            return;\n        }\n        this.doc = doc;\n        this.editor = editor;\n        this.onHighlight = this.onHighlight.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onCursorActivity = this.onCursorActivity.bind(this);\n        HighlightAgent.on(\"highlight\", this.onHighlight);\n        this.editor.on(\"change\", this.onChange);\n        this.editor.on(\"cursorActivity\", this.onCursorActivity);\n        this.onCursorActivity();\n    };\n\n    // JSDocument doesn't dispatch events, but the \"live document\" interface requires having an on() API\n    EventDispatcher.makeEventDispatcher(JSDocument.prototype);\n\n    /** Close the document */\n    JSDocument.prototype.close = function close() {\n        if (!this.editor) {\n            return;\n        }\n        HighlightAgent.off(\"highlight\", this.onHighlight);\n        this.editor.off(\"change\", this.onChange);\n        this.editor.off(\"cursorActivity\", this.onCursorActivity);\n        this.onHighlight();\n    };\n\n    JSDocument.prototype.script = function script() {\n        return ScriptAgent.scriptForURL(this.doc.url);\n    };\n\n\n    /** Event Handlers *******************************************************/\n\n    /** Triggered on cursor activity by the editor */\n    JSDocument.prototype.onCursorActivity = function onCursorActivity(event, editor) {\n    };\n\n    /** Triggered on change by the editor */\n    JSDocument.prototype.onChange = function onChange(event, editor, change) {\n        var src = this.doc.getText();\n        Inspector.Debugger.setScriptSource(this.script().scriptId, src, function onSetScriptSource(res) {\n            Inspector.Runtime.evaluate(\"if($)$(\\\"canvas\\\").each(function(i,e){if(e.rerender)e.rerender()})\");\n        }.bind(this));\n    };\n\n    /** Triggered by the HighlightAgent to highlight a node in the editor */\n    JSDocument.prototype.onHighlight = function onHighlight(event, node) {\n        // clear an existing highlight\n        var codeMirror = this.editor._codeMirror;\n        var i;\n        for (i in this._highlight) {\n            codeMirror.removeLineClass(this._highlight[i], \"wrap\", \"highlight\");\n        }\n        this._highlight = [];\n        if (!node || !node.trace) {\n            return;\n        }\n\n        // go through the trace and find highlight the lines of this script\n        var scriptId = this.script().scriptId;\n        var callFrame, line;\n        for (i in node.trace) {\n            callFrame = node.trace[i];\n            if (callFrame.location && callFrame.location.scriptId === scriptId) {\n                line = callFrame.location.lineNumber;\n                codeMirror.addLineClass(line, \"wrap\", \"highlight\");\n                this._highlight.push(line);\n            }\n        }\n    };\n\n    // Export the class\n    module.exports = JSDocument;\n});\n"],"file":"JSDocument.js"}