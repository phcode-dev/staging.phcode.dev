{"version":3,"sources":["document/DocumentCommandHandlers.js"],"names":["define","require","exports","module","AppInit","CommandManager","Commands","DeprecationWarning","EventDispatcher","ProjectManager","DocumentManager","MainViewManager","EditorManager","FileSystem","FileSystemError","FileUtils","FileViewController","InMemoryFile","StringUtils","Async","Metrics","Dialogs","DefaultDialogs","Strings","PopUpManager","PreferencesManager","PerfUtils","KeyEvent","Menus","UrlParams","StatusBar","WorkspaceManager","LanguageManager","_","_$title","_$dirtydot","_$titleWrapper","_currentTitlePath","_osDash","brackets","platform","WINDOW_TITLE_STRING_NO_DOC","WINDOW_TITLE_STRING_DOC","_$titleContainerToolbar","_lastToolbarHeight","_nextUntitledIndexToUse","_isReloading","USER_CANCELED","userCanceled","definePreference","excludeFromHints","makeEventDispatcher","APP_QUIT_CANCELLED","handleFileSaveAs","_fileOpened","filePath","addedToWorkingSet","encoding","language","getLanguageForPath","countEvent","EVENT_TYPE","EDITOR","_name","toLowerCase","_fileSaved","docToSave","fileType","_fileClosed","file","_path","size","stat","err","fileStat","valueOf","_sendData","fileSizeInKB","subType","fileSizeInMB","_updateTitle","currentDoc","getCurrentDocument","windowTitle","config","app_title","currentlyViewedFile","getCurrentlyViewedFile","ACTIVE_PANE","currentlyViewedPath","fullPath","readOnlyString","readOnly","text","attr","css","newWidth","width","newToolbarHeight","height","recomputeLayout","projectRoot","getProjectRoot","projectName","name","format","isDirty","window","document","title","_shortTitleForDocument","doc","isUntitled","substring","lastIndexOf","makeProjectRelativeIfPossible","handleCurrentFileChange","newFile","newDocument","getOpenDocumentForPath","handleDirtyChange","event","changedDoc","showFileOpenError","path","showModalDialog","DIALOG_ID_ERROR","ERROR_OPENING_FILE_TITLE","ERROR_OPENING_FILE","breakableUrl","getFileErrorString","_doOpen","silent","paneId","options","result","$","Deferred","getCurrentlyViewedPath","resolve","promise","_cleanup","fileError","fullFilePath","_removeView","getFileForPath","focusActivePane","reject","_showErrorAndCleanUp","done","Error","perfTimerName","markStart","always","fileOpenTime","addMeasurement","valueEvent","PERFORMANCE","Number","_encoding","context","location","scope","layer","layerID","getViewState","_open","fail","_defaultOpenDialogFullPath","_doOpenWithOptionalPath","showOpenDialog","OPEN_FILE","paths","length","filesToOpen","forEach","push","addListToWorkingSet","getDirectoryPath","then","_parseDecoratedPath","line","column","matchResult","exec","parseInt","handleFileOpen","commandData","fileInfo","noPaneActivate","setActivePaneId","getCurrentFullEditor","setCursorPos","handleDocumentOpen","handleFileAddToWorkingSetAndOpen","addToWorkingSet","index","forceRedraw","handleFileAddToWorkingSet","deprecationWarning","_getUntitledFileSuggestion","dir","baseFileName","isFolder","suggestedName","deferred","entry","getDirectoryForPath","exists","fileNewInProgress","_handleNewItemInProject","baseDirEntry","selected","getFileTreeContext","isFile","parentPath","UNTITLED","createWithSuggestedName","bind","undefined","createNewItem","forceFinishRename","handleFileNew","defaultExtension","createUntitledDocument","_edit","handleFileNewInProject","handleNewFolderInProject","_showSaveFileError","ERROR_SAVING_FILE_TITLE","ERROR_SAVING_FILE","doSave","force","handleError","error","handleContentsModified","EXT_MODIFIED_TITLE","EXT_MODIFIED_WARNING","className","DIALOG_BTN_CLASS_LEFT","id","DIALOG_BTN_SAVE_AS","SAVE_AS","DIALOG_BTN_CLASS_NORMAL","DIALOG_BTN_CANCEL","CANCEL","DIALOG_BTN_CLASS_PRIMARY","DIALOG_BTN_OK","SAVE_AND_OVERWRITE","trySave","writeText","getText","notifySaved","CONTENTS_MODIFIED","keepChangesTime","mtime","getTime","_doRevert","suppressError","readAsText","readTimestamp","refreshText","dispatchAppQuitCancelledEvent","trigger","_doSaveAs","settings","origPath","saveAsDefaultPath","defaultName","_doSaveAfterSaveDialog","_configureEditorAndResolve","editor","getActiveEditor","setSelections","selections","setScrollPos","scrollPos","x","y","openNewFile","fileOpenPromise","getFileSelectionFocus","PROJECT_MANAGER","openAndSelectDocument","info","findInAllWorkingSets","shift","isSaving","setViewState","getBaseName","fileExtensions","getFileExtensions","showSaveDialog","SAVE_FILE_AS","selectedPath","handleFileSave","activeEditor","activeDoc","getSelections","getScrollPos","_saveFileList","fileList","filesAfterSave","doSequentially","savePromise","saveAll","getWorkingSet","ALL_PANES","handleFileSaveAll","handleFileClose","promptOnly","_forceClose","_spawnedRequest","doClose","_close","spawnedRequest","isExclusiveToPane","filename","DIALOG_ID_SAVE_CLOSE","SAVE_CLOSE_TITLE","SAVE_CLOSE_MESSAGE","DIALOG_BTN_DONTSAVE","DONT_SAVE","SAVE","_closeList","list","unsavedDocs","fileCloseArgs","message","SAVE_CLOSE_MULTI_MESSAGE","makeDialogFileList","map","listAfterSave","handleFileCloseAll","getAllOpenFiles","handleFileCloseList","_windowGoingAway","_handleWindowGoingAway","postCloseHandler","failHandler","execute","FILE_CLOSE_ALL","ex","console","handleAbortQuit","handleBeforeMenuPopup","handleFileCloseWindow","close","app","abortQuit","handleFileRename","getContext","renameItemInline","handleFileQuit","quit","_addedNavKeyHandler","detectDocumentNavEnd","keyCode","DOM_VK_CONTROL","endTraversal","body","off","goNextPrevDoc","inc","listOrder","traverseToNextViewInListOrder","traverseToNextViewByMRU","beginTraversal","FILE_OPEN","keyup","handleGoNextDoc","handleGoPrevDoc","handleGoNextDocListOrder","handleGoPrevDocListOrder","handleShowInTree","activeFile","showInTree","handleFileDelete","getSelectedItem","DIALOG_ID_EXT_DELETED","CONFIRM_DELETE_TITLE","CONFIRM_FILE_DELETE","CONFIRM_FOLDER_DELETE","DELETE","deleteItem","browserReload","href","getAllMenus","value","key","removeMenu","fragment","indexOf","substr","setTimeout","handleReload","loadWithoutExtensions","params","parse","get","put","remove","isEmpty","toString","handleReloadWithoutExts","partial","isTestWindow","URLSearchParams","search","onbeforeunload","e","Date","closeSuccess","log","closeFail","openDocs","getAllOpenDocuments","filter","WINDOW_UNLOAD_WARNING_WITH_UNSAVED_CHANGES","WINDOW_UNLOAD_WARNING","htmlReady","$icon","$indicator","STATUSBAR_USER_EXTENSIONS_DISABLED","FILE_EXTENSION_MANAGER","setEnabled","display","addIndicator","quitString","CMD_QUIT","CMD_EXIT","register","CMD_ADD_TO_WORKING_SET","FILE_ADD_TO_WORKING_SET","CMD_FILE_OPEN","CMD_ADD_TO_WORKINGSET_AND_OPEN","CMD_OPEN","CMD_FILE_NEW_UNTITLED","FILE_NEW_UNTITLED","CMD_FILE_NEW","FILE_NEW","CMD_FILE_NEW_FOLDER","FILE_NEW_FOLDER","CMD_FILE_SAVE","FILE_SAVE","CMD_FILE_SAVE_ALL","FILE_SAVE_ALL","CMD_FILE_SAVE_AS","FILE_SAVE_AS","CMD_FILE_RENAME","FILE_RENAME","CMD_FILE_DELETE","FILE_DELETE","CMD_FILE_CLOSE","FILE_CLOSE","CMD_FILE_CLOSE_ALL","CMD_FILE_CLOSE_LIST","FILE_CLOSE_LIST","CMD_NEXT_DOC","NAVIGATE_NEXT_DOC","CMD_PREV_DOC","NAVIGATE_PREV_DOC","CMD_NEXT_DOC_LIST_ORDER","NAVIGATE_NEXT_DOC_LIST_ORDER","CMD_PREV_DOC_LIST_ORDER","NAVIGATE_PREV_DOC_LIST_ORDER","FILE_QUIT","CMD_SHOW_IN_TREE","NAVIGATE_SHOW_IN_FILE_TREE","registerInternal","APP_ABORT_QUIT","APP_BEFORE_MENUPOPUP","FILE_CLOSE_WINDOW","APP_RELOAD","APP_RELOAD_WITHOUT_EXTS","on"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var AppInit             = require(\"utils/AppInit\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        Commands            = require(\"command/Commands\"),\n        DeprecationWarning  = require(\"utils/DeprecationWarning\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        ProjectManager      = require(\"project/ProjectManager\"),\n        DocumentManager     = require(\"document/DocumentManager\"),\n        MainViewManager     = require(\"view/MainViewManager\"),\n        EditorManager       = require(\"editor/EditorManager\"),\n        FileSystem          = require(\"filesystem/FileSystem\"),\n        FileSystemError     = require(\"filesystem/FileSystemError\"),\n        FileUtils           = require(\"file/FileUtils\"),\n        FileViewController  = require(\"project/FileViewController\"),\n        InMemoryFile        = require(\"document/InMemoryFile\"),\n        StringUtils         = require(\"utils/StringUtils\"),\n        Async               = require(\"utils/Async\"),\n        Metrics             = require(\"utils/Metrics\"),\n        Dialogs             = require(\"widgets/Dialogs\"),\n        DefaultDialogs      = require(\"widgets/DefaultDialogs\"),\n        Strings             = require(\"strings\"),\n        PopUpManager        = require(\"widgets/PopUpManager\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\"),\n        PerfUtils           = require(\"utils/PerfUtils\"),\n        KeyEvent            = require(\"utils/KeyEvent\"),\n        Menus               = require(\"command/Menus\"),\n        UrlParams           = require(\"utils/UrlParams\").UrlParams,\n        StatusBar           = require(\"widgets/StatusBar\"),\n        WorkspaceManager    = require(\"view/WorkspaceManager\"),\n        LanguageManager     = require(\"language/LanguageManager\"),\n        _                   = require(\"thirdparty/lodash\");\n\n    /**\n     * Handlers for commands related to document handling (opening, saving, etc.)\n     */\n\n    /**\n     * Container for label shown above editor; must be an inline element\n     * @type {jQueryObject}\n     */\n    var _$title = null;\n\n    /**\n     * Container for dirty dot; must be an inline element\n     * @type {jQueryObject}\n     */\n    var _$dirtydot = null;\n\n    /**\n     * Container for _$title; need not be an inline element\n     * @type {jQueryObject}\n     */\n    var _$titleWrapper = null;\n\n    /**\n     * Label shown above editor for current document: filename and potentially some of its path\n     * @type {string}\n     */\n    var _currentTitlePath = null;\n\n    /**\n     * Determine the dash character for each platform. Use emdash on Mac\n     * and a standard dash on all other platforms.\n     * @type {string}\n     */\n    var _osDash = brackets.platform === \"mac\" ? \"\\u2014\" : \"-\";\n\n    /**\n     * String template for window title when no file is open.\n     * @type {string}\n     */\n    var WINDOW_TITLE_STRING_NO_DOC = \"{0} \" + _osDash + \" {1}\";\n\n    /**\n    * String template for window title when a file is open.\n    * @type {string}\n    */\n    var WINDOW_TITLE_STRING_DOC = \"{0} ({1}) \" + _osDash + \" {2}\";\n\n    /**\n     * Container for _$titleWrapper; if changing title changes this element's height, must kick editor to resize\n     * @type {jQueryObject}\n     */\n    var _$titleContainerToolbar = null;\n\n    /**\n     * Last known height of _$titleContainerToolbar\n     * @type {number}\n     */\n    var _lastToolbarHeight = null;\n\n    /**\n     * index to use for next, new Untitled document\n     * @type {number}\n     */\n    var _nextUntitledIndexToUse = 1;\n\n    /**\n     * prevents reentrancy of browserReload()\n     * @type {boolean}\n     */\n    var _isReloading = false;\n\n    /** Unique token used to indicate user-driven cancellation of Save As (as opposed to file IO error) */\n    var USER_CANCELED = { userCanceled: true };\n\n    PreferencesManager.definePreference(\"defaultExtension\", \"string\", \"\", {\n        excludeFromHints: true\n    });\n    EventDispatcher.makeEventDispatcher(exports);\n\n    /**\n     * Event triggered when File Save is cancelled, when prompted to save dirty files\n     */\n    var APP_QUIT_CANCELLED = \"appQuitCancelled\";\n\n\n    /**\n     * JSLint workaround for circular dependency\n     * @type {function}\n     */\n    var handleFileSaveAs;\n\n    /**\n     * For analytics. Whenever a file is opened call this function. The function will record the number of times\n     * the standard file types have been opened. We only log the standard filetypes\n     * @param {String} filePath          The path of the file to be registered\n     * @param {boolean} addedToWorkingSet set to true if extensions of files added to the\n     *                                    working set needs to be logged\n     */\n    function _fileOpened(filePath, addedToWorkingSet, encoding) {\n        let language = LanguageManager.getLanguageForPath(filePath);\n\n        Metrics.countEvent(Metrics.EVENT_TYPE.EDITOR, \"fileEncoding\", encoding || 'UTF-8');\n        if(addedToWorkingSet){\n            Metrics.countEvent(Metrics.EVENT_TYPE.EDITOR, \"fileAddToWorkingSet\", language._name.toLowerCase());\n        } else {\n            Metrics.countEvent(Metrics.EVENT_TYPE.EDITOR, \"fileOpen\", language._name.toLowerCase());\n        }\n    }\n\n    /**\n     * For analytics. Whenever a file is saved call this function.\n     * The function will send the analytics Data\n     * We only log the standard filetypes and fileSize\n     * @param {String} filePath The path of the file to be registered\n     */\n    function _fileSaved(docToSave) {\n        if (!docToSave) {\n            return;\n        }\n        let fileType = docToSave.language ? docToSave.language._name : \"\";\n        Metrics.countEvent(Metrics.EVENT_TYPE.EDITOR, \"fileSave\", fileType);\n    }\n\n    /**\n     * For analytics. Whenever a file is closed call this function.\n     * The function will send the analytics Data.\n     * We only log the standard filetypes and fileSize\n     * @param {String} filePath The path of the file to be registered\n     */\n    function _fileClosed(file) {\n        if (!file) {\n            return;\n        }\n        var language = LanguageManager.getLanguageForPath(file._path),\n            size = -1;\n\n        function _sendData(fileSizeInKB) {\n            let subType = \"\",\n                fileSizeInMB = fileSizeInKB/1024;\n\n            if(fileSizeInMB <= 1) {\n                // We don't log exact file sizes for privacy.\n                if(fileSizeInKB < 0) {\n                    subType = \"\";\n                }\n                if(fileSizeInKB <= 10) {\n                    subType = \"0_to_10KB\";\n                } else if (fileSizeInKB <= 50) {\n                    subType = \"10_to_50KB\";\n                } else if (fileSizeInKB <= 100) {\n                    subType = \"50_to_100KB\";\n                } else if (fileSizeInKB <= 500) {\n                    subType = \"100_to_500KB\";\n                } else {\n                    subType = \"500KB_to_1MB\";\n                }\n\n            } else {\n                if(fileSizeInMB <= 2) {\n                    subType = \"1_to_2MB\";\n                } else if(fileSizeInMB <= 5) {\n                    subType = \"2_to_5MB\";\n                } else if(fileSizeInMB <= 10) {\n                    subType = \"5_to_10MB\";\n                } else {\n                    subType = \"Above_10MB\";\n                }\n            }\n\n            Metrics.countEvent(Metrics.EVENT_TYPE.EDITOR, \"fileClose\",\n                `${language._name.toLowerCase()}.${subType}`);\n        }\n\n        file.stat(function(err, fileStat) {\n            if(!err) {\n                size = fileStat.size.valueOf()/1024;\n            }\n            _sendData(size);\n        });\n    }\n\n    /**\n     * Updates the title bar with new file title or dirty indicator\n     * @private\n     */\n    function _updateTitle() {\n        var currentDoc          = DocumentManager.getCurrentDocument(),\n            windowTitle         = brackets.config.app_title,\n            currentlyViewedFile = MainViewManager.getCurrentlyViewedFile(MainViewManager.ACTIVE_PANE),\n            currentlyViewedPath = currentlyViewedFile && currentlyViewedFile.fullPath,\n            readOnlyString      = (currentlyViewedFile && currentlyViewedFile.readOnly) ? \"[Read Only] - \" : \"\";\n\n\n        if (currentlyViewedPath) {\n            _$title.text(_currentTitlePath);\n            _$title.attr(\"title\", currentlyViewedPath);\n            if (currentDoc) {\n                // dirty dot is always in DOM so layout doesn't change, and visibility is toggled\n                _$dirtydot.css(\"visibility\", (currentDoc.isDirty) ? \"visible\" : \"hidden\");\n            } else {\n                // hide dirty dot if there is no document\n                _$dirtydot.css(\"visibility\", \"hidden\");\n            }\n        } else {\n            _$title.text(\"\");\n            _$title.attr(\"title\", \"\");\n            _$dirtydot.css(\"visibility\", \"hidden\");\n        }\n\n        // Set _$titleWrapper to a fixed width just large enough to accommodate _$title. This seems equivalent to what\n        // the browser would do automatically, but the CSS trick we use for layout requires _$titleWrapper to have a\n        // fixed width set on it (see the \"#titlebar\" CSS rule for details).\n        _$titleWrapper.css(\"width\", \"\");\n        var newWidth = _$title.width();\n        _$titleWrapper.css(\"width\", newWidth);\n\n        // Changing the width of the title may cause the toolbar layout to change height, which needs to resize the\n        // editor beneath it (toolbar changing height due to window resize is already caught by EditorManager).\n        var newToolbarHeight = _$titleContainerToolbar.height();\n        if (_lastToolbarHeight !== newToolbarHeight) {\n            _lastToolbarHeight = newToolbarHeight;\n            WorkspaceManager.recomputeLayout();\n        }\n\n\n        var projectRoot = ProjectManager.getProjectRoot();\n        if (projectRoot) {\n            var projectName = projectRoot.name;\n            // Construct shell/browser window title, e.g. \"• index.html (myProject) — Brackets\"\n            if (currentlyViewedPath) {\n                windowTitle = StringUtils.format(WINDOW_TITLE_STRING_DOC, readOnlyString + _currentTitlePath, projectName, brackets.config.app_title);\n                // Display dirty dot when there are unsaved changes\n                if (currentDoc && currentDoc.isDirty) {\n                    windowTitle = \"• \" + windowTitle;\n                }\n            } else {\n                // A document is not open\n                windowTitle = StringUtils.format(WINDOW_TITLE_STRING_NO_DOC, projectName, brackets.config.app_title);\n            }\n        }\n        window.document.title = windowTitle;\n    }\n\n    /**\n     * Returns a short title for a given document.\n     *\n     * @param {Document} doc - the document to compute the short title for\n     * @return {string} - a short title for doc.\n     */\n    function _shortTitleForDocument(doc) {\n        var fullPath = doc.file.fullPath;\n\n        // If the document is untitled then return the filename, (\"Untitled-n.ext\");\n        // otherwise show the project-relative path if the file is inside the\n        // current project or the full absolute path if it's not in the project.\n        if (doc.isUntitled()) {\n            return fullPath.substring(fullPath.lastIndexOf(\"/\") + 1);\n        }\n        return ProjectManager.makeProjectRelativeIfPossible(fullPath);\n\n    }\n\n    /**\n     * Handles currentFileChange and filenameChanged events and updates the titlebar\n     */\n    function handleCurrentFileChange() {\n        var newFile = MainViewManager.getCurrentlyViewedFile(MainViewManager.ACTIVE_PANE);\n\n        if (newFile) {\n            var newDocument = DocumentManager.getOpenDocumentForPath(newFile.fullPath);\n\n            if (newDocument) {\n                _currentTitlePath = _shortTitleForDocument(newDocument);\n            } else {\n                _currentTitlePath = ProjectManager.makeProjectRelativeIfPossible(newFile.fullPath);\n            }\n        } else {\n            _currentTitlePath = null;\n        }\n\n        // Update title text & \"dirty dot\" display\n        _updateTitle();\n    }\n\n    /**\n     * Handles dirtyFlagChange event and updates the title bar if necessary\n     */\n    function handleDirtyChange(event, changedDoc) {\n        var currentDoc = DocumentManager.getCurrentDocument();\n\n        if (currentDoc && changedDoc.file.fullPath === currentDoc.file.fullPath) {\n            _updateTitle();\n        }\n    }\n\n    /**\n     * Shows an error dialog indicating that the given file could not be opened due to the given error\n     * @param {!FileSystemError} name\n     * @return {!Dialog}\n     */\n    function showFileOpenError(name, path) {\n        return Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_ERROR,\n            Strings.ERROR_OPENING_FILE_TITLE,\n            StringUtils.format(\n                Strings.ERROR_OPENING_FILE,\n                StringUtils.breakableUrl(path),\n                FileUtils.getFileErrorString(name)\n            )\n        );\n    }\n\n    /**\n     * @private\n     * Creates a document and displays an editor for the specified file path.\n     * @param {!string} fullPath\n     * @param {boolean=} silent If true, don't show error message\n     * @param {string=} paneId, the id oi the pane in which to open the file. Can be undefined, a valid pane id or ACTIVE_PANE.\n     * @param {{*}=} options, command options\n     * @return {$.Promise} a jQuery promise that will either\n     * - be resolved with a file for the specified file path or\n     * - be rejected with FileSystemError if the file can not be read.\n     * If paneId is undefined, the ACTIVE_PANE constant\n     */\n    function _doOpen(fullPath, silent, paneId, options) {\n        var result = new $.Deferred();\n\n        // workaround for https://github.com/adobe/brackets/issues/6001\n        // TODO should be removed once bug is closed.\n        // if we are already displaying a file do nothing but resolve immediately.\n        // this fixes timing issues in test cases.\n        if (MainViewManager.getCurrentlyViewedPath(paneId || MainViewManager.ACTIVE_PANE) === fullPath) {\n            result.resolve(MainViewManager.getCurrentlyViewedFile(paneId || MainViewManager.ACTIVE_PANE));\n            return result.promise();\n        }\n\n        function _cleanup(fileError, fullFilePath) {\n            if (fullFilePath) {\n                // For performance, we do lazy checking of file existence, so it may be in workingset\n                MainViewManager._removeView(paneId, FileSystem.getFileForPath(fullFilePath));\n                MainViewManager.focusActivePane();\n            }\n            result.reject(fileError);\n        }\n        function _showErrorAndCleanUp(fileError, fullFilePath) {\n            if (silent) {\n                _cleanup(fileError, fullFilePath);\n            } else {\n                showFileOpenError(fileError, fullFilePath).done(function () {\n                    _cleanup(fileError, fullFilePath);\n                });\n            }\n        }\n\n        if (!fullPath) {\n            throw new Error(\"_doOpen() called without fullPath\");\n        } else {\n            var perfTimerName = PerfUtils.markStart(\"Open File:\\t\" + fullPath);\n            result.always(function () {\n                let fileOpenTime = PerfUtils.addMeasurement(perfTimerName);\n                Metrics.valueEvent(Metrics.EVENT_TYPE.PERFORMANCE, \"fileOpen\",\n                    \"timeMs\", Number(fileOpenTime));\n            });\n\n            var file = FileSystem.getFileForPath(fullPath);\n            if (options && options.encoding) {\n                file._encoding = options.encoding;\n            } else {\n                var projectRoot = ProjectManager.getProjectRoot(),\n                    context = {\n                        location: {\n                            scope: \"user\",\n                            layer: \"project\",\n                            layerID: projectRoot.fullPath\n                        }\n                    };\n                var encoding = PreferencesManager.getViewState(\"encoding\", context);\n                if (encoding && encoding[fullPath]) {\n                    file._encoding = encoding[fullPath];\n                }\n            }\n            MainViewManager._open(paneId, file, options)\n                .done(function () {\n                    result.resolve(file);\n                })\n                .fail(function (fileError) {\n                    _showErrorAndCleanUp(fileError, fullPath);\n                    result.reject();\n                });\n        }\n\n        return result.promise();\n    }\n\n    /**\n     * @private\n     * Used to track the default directory for the file open dialog\n     */\n    var _defaultOpenDialogFullPath = null;\n\n    /**\n     * @private\n     * Opens a file and displays its view (editor, image view, etc...) for the specified path.\n     * If no path is specified, a file prompt is provided for input.\n     * @param {?string} fullPath - The path of the file to open; if it's null we'll prompt for it\n     * @param {boolean=} silent - If true, don't show error message\n     * @param {string=}  paneId - the pane in which to open the file. Can be undefined, a valid pane id or ACTIVE_PANE\n     * @param {{*}=} options - options to pass to MainViewManager._open\n     * @return {$.Promise} a jQuery promise resolved with a Document object or\n     *                      rejected with an err\n     */\n    function _doOpenWithOptionalPath(fullPath, silent, paneId, options) {\n        var result;\n        paneId = paneId || MainViewManager.ACTIVE_PANE;\n        if (!fullPath) {\n            // Create placeholder deferred\n            result = new $.Deferred();\n\n            //first time through, default to the current project path\n            if (!_defaultOpenDialogFullPath) {\n                _defaultOpenDialogFullPath = ProjectManager.getProjectRoot().fullPath;\n            }\n            // Prompt the user with a dialog\n            FileSystem.showOpenDialog(true, false, Strings.OPEN_FILE, _defaultOpenDialogFullPath, null, function (err, paths) {\n                if (!err) {\n                    if (paths.length > 0) {\n                        // Add all files to the workingset without verifying that\n                        // they still exist on disk (for faster opening)\n                        var filesToOpen = [];\n\n                        paths.forEach(function (path) {\n                            filesToOpen.push(FileSystem.getFileForPath(path));\n                        });\n                        MainViewManager.addListToWorkingSet(paneId, filesToOpen);\n\n                        _doOpen(paths[paths.length - 1], silent, paneId, options)\n                            .done(function (file) {\n                                _defaultOpenDialogFullPath =\n                                    FileUtils.getDirectoryPath(\n                                        MainViewManager.getCurrentlyViewedPath(paneId)\n                                    );\n                            })\n                            // Send the resulting document that was opened\n                            .then(result.resolve, result.reject);\n                    } else {\n                        // Reject if the user canceled the dialog\n                        result.reject();\n                    }\n                }\n            });\n        } else {\n            result = _doOpen(fullPath, silent, paneId, options);\n        }\n\n        return result.promise();\n    }\n\n    /**\n     * @private\n     * Splits a decorated file path into its parts.\n     * @param {?string} path - a string of the form \"fullpath[:lineNumber[:columnNumber]]\"\n     * @return {{path: string, line: ?number, column: ?number}}\n     */\n    function _parseDecoratedPath(path) {\n        var result = {path: path, line: null, column: null};\n        if (path) {\n            // If the path has a trailing :lineNumber and :columnNumber, strip\n            // these off and assign to result.line and result.column.\n            var matchResult = /(.+?):([0-9]+)(:([0-9]+))?$/.exec(path);\n            if (matchResult) {\n                result.path = matchResult[1];\n                if (matchResult[2]) {\n                    result.line = parseInt(matchResult[2], 10);\n                }\n                if (matchResult[4]) {\n                    result.column = parseInt(matchResult[4], 10);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @typedef {{fullPath:?string=, silent:boolean=, paneId:string=}} FileCommandData\n     * fullPath: is in the form \"path[:lineNumber[:columnNumber]]\"\n     * lineNumber and columnNumber are 1-origin: lines and columns are 1-based\n     */\n\n    /**\n     * @typedef {{fullPath:?string=, index:number=, silent:boolean=, forceRedraw:boolean=, paneId:string=}} PaneCommandData\n     * fullPath: is in the form \"path[:lineNumber[:columnNumber]]\"\n     * lineNumber and columnNumber are 1-origin: lines and columns are 1-based\n     */\n\n    /**\n     * Opens the given file and makes it the current file. Does NOT add it to the workingset.\n     * @param {FileCommandData=} commandData - record with the following properties:\n     *   fullPath: File to open;\n     *   silent: optional flag to suppress error messages;\n     *   paneId: optional PaneId (defaults to active pane)\n     * @return {$.Promise} a jQuery promise that will be resolved with a file object\n     */\n    function handleFileOpen(commandData) {\n        var fileInfo = _parseDecoratedPath(commandData ? commandData.fullPath : null),\n            silent = (commandData && commandData.silent) || false,\n            paneId = (commandData && commandData.paneId) || MainViewManager.ACTIVE_PANE,\n            result = new $.Deferred();\n\n        _doOpenWithOptionalPath(fileInfo.path, silent, paneId, commandData && commandData.options)\n            .done(function (file) {\n                _fileOpened(file._path, false, file._encoding);\n                if (!commandData || !commandData.options || !commandData.options.noPaneActivate) {\n                    MainViewManager.setActivePaneId(paneId);\n                }\n\n                // If a line and column number were given, position the editor accordingly.\n                if (fileInfo.line !== null) {\n                    if (fileInfo.column === null || (fileInfo.column <= 0)) {\n                        fileInfo.column = 1;\n                    }\n\n                    // setCursorPos expects line/column numbers as 0-origin, so we subtract 1\n                    EditorManager.getCurrentFullEditor().setCursorPos(fileInfo.line - 1,\n                                                                      fileInfo.column - 1,\n                                                                      true);\n                }\n\n                result.resolve(file);\n            })\n            .fail(function (err) {\n                result.reject(err);\n            });\n\n        return result;\n        // Testing notes: here are some recommended manual tests for handleFileOpen, on Macintosh.\n        // Do all tests with brackets already running, and also with brackets not already running.\n        //\n        // drag a file onto brackets icon in desktop (this uses undecorated paths)\n        // drag a file onto brackets icon in taskbar (this uses undecorated paths)\n        // open a file from brackets sidebar (this uses undecorated paths)\n        // from command line: ...../Brackets.app/Contents path         - where 'path' is undecorated\n        // from command line: ...../Brackets.app path                  - where 'path' has the form \"path:line\"\n        // from command line: ...../Brackets.app path                  - where 'path' has the form \"path:line:column\"\n        // from command line: open -a ...../Brackets.app path          - where 'path' is undecorated\n        // do \"View Source\" from Adobe Scout version 1.2 or newer (this will use decorated paths of the form \"path:line:column\")\n    }\n\n    /**\n     * Opens the given file, makes it the current file, does NOT add it to the workingset\n     * @param {FileCommandData} commandData\n     *   fullPath: File to open;\n     *   silent: optional flag to suppress error messages;\n     *   paneId: optional PaneId (defaults to active pane)\n     * @return {$.Promise} a jQuery promise that will be resolved with @type {Document}\n     */\n    function handleDocumentOpen(commandData) {\n        var result = new $.Deferred();\n        handleFileOpen(commandData)\n            .done(function (file) {\n                // if we succeeded with an open file\n                //  then we need to resolve that to a document.\n                //  getOpenDocumentForPath will return null if there isn't a\n                //  supporting document for that file (e.g. an image)\n                var doc = DocumentManager.getOpenDocumentForPath(file.fullPath);\n                result.resolve(doc);\n            })\n            .fail(function (err) {\n                result.reject(err);\n            });\n\n        return result.promise();\n\n    }\n\n    /**\n     * Opens the given file, makes it the current file, AND adds it to the workingset\n     * @param {!PaneCommandData} commandData - record with the following properties:\n     *   fullPath: File to open;\n     *   index: optional index to position in workingset (defaults to last);\n     *   silent: optional flag to suppress error messages;\n     *   forceRedraw: flag to force the working set view redraw;\n     *   paneId: optional PaneId (defaults to active pane)\n     * @return {$.Promise} a jQuery promise that will be resolved with a @type {File}\n     */\n    function handleFileAddToWorkingSetAndOpen(commandData) {\n        return handleFileOpen(commandData).done(function (file) {\n            var paneId = (commandData && commandData.paneId) || MainViewManager.ACTIVE_PANE;\n            MainViewManager.addToWorkingSet(paneId, file, commandData.index, commandData.forceRedraw);\n            _fileOpened(file.fullPath, true);\n        });\n    }\n\n    /**\n     * @deprecated\n     * Opens the given file, makes it the current document, AND adds it to the workingset\n     * @param {!PaneCommandData} commandData - record with the following properties:\n     *   fullPath: File to open;\n     *   index: optional index to position in workingset (defaults to last);\n     *   silent: optional flag to suppress error messages;\n     *   forceRedraw: flag to force the working set view redraw;\n     *   paneId: optional PaneId (defaults to active pane)\n     * @return {$.Promise} a jQuery promise that will be resolved with @type {File}\n     */\n    function handleFileAddToWorkingSet(commandData) {\n        // This is a legacy deprecated command that\n        //  will use the new command and resolve with a document\n        //  as the legacy command would only support.\n        DeprecationWarning.deprecationWarning(\"Commands.FILE_ADD_TO_WORKING_SET has been deprecated.  Use Commands.CMD_ADD_TO_WORKINGSET_AND_OPEN instead.\");\n        var result = new $.Deferred();\n\n        handleFileAddToWorkingSetAndOpen(commandData)\n            .done(function (file) {\n                // if we succeeded with an open file\n                //  then we need to resolve that to a document.\n                //  getOpenDocumentForPath will return null if there isn't a\n                //  supporting document for that file (e.g. an image)\n                var doc = DocumentManager.getOpenDocumentForPath(file.fullPath);\n                result.resolve(doc);\n            })\n            .fail(function (err) {\n                result.reject(err);\n            });\n\n        return result.promise();\n    }\n\n    /**\n     * @private\n     * Ensures the suggested file name doesn't already exit.\n     * @param {Directory} dir  The directory to use\n     * @param {string} baseFileName  The base to start with, \"-n\" will get appended to make unique\n     * @param {boolean} isFolder True if the suggestion is for a folder name\n     * @return {$.Promise} a jQuery promise that will be resolved with a unique name starting with\n     *   the given base name\n     */\n    function _getUntitledFileSuggestion(dir, baseFileName, isFolder) {\n        var suggestedName   = baseFileName + \"-\" + _nextUntitledIndexToUse++,\n            deferred        = $.Deferred();\n\n        if (_nextUntitledIndexToUse > 9999) {\n            //we've tried this enough\n            deferred.reject();\n        } else {\n            var path = dir.fullPath + suggestedName,\n                entry = isFolder ? FileSystem.getDirectoryForPath(path)\n                                 : FileSystem.getFileForPath(path);\n\n            entry.exists(function (err, exists) {\n                if (err || exists) {\n                    _getUntitledFileSuggestion(dir, baseFileName, isFolder)\n                        .then(deferred.resolve, deferred.reject);\n                } else {\n                    deferred.resolve(suggestedName);\n                }\n            });\n        }\n\n        return deferred.promise();\n    }\n\n    /**\n     * Prevents re-entrancy into handleFileNewInProject()\n     *\n     * handleFileNewInProject() first prompts the user to name a file and then asynchronously writes the file when the\n     * filename field loses focus. This boolean prevent additional calls to handleFileNewInProject() when an existing\n     * file creation call is outstanding\n     */\n    var fileNewInProgress = false;\n\n    /**\n     * Bottleneck function for creating new files and folders in the project tree.\n     * @private\n     * @param {boolean} isFolder - true if creating a new folder, false if creating a new file\n     */\n    function _handleNewItemInProject(isFolder) {\n        if (fileNewInProgress) {\n            ProjectManager.forceFinishRename();\n            return;\n        }\n        fileNewInProgress = true;\n\n        // Determine the directory to put the new file\n        // If a file is currently selected in the tree, put it next to it.\n        // If a directory is currently selected in the tree, put it in it.\n        // If an Untitled document is selected or nothing is selected in the tree, put it at the root of the project.\n        var baseDirEntry,\n            selected = ProjectManager.getFileTreeContext();\n        if ((!selected) || (selected instanceof InMemoryFile)) {\n            selected = ProjectManager.getProjectRoot();\n        }\n\n        if (selected.isFile) {\n            baseDirEntry = FileSystem.getDirectoryForPath(selected.parentPath);\n        }\n\n        baseDirEntry = baseDirEntry || selected;\n\n        // Create the new node. The createNewItem function does all the heavy work\n        // of validating file name, creating the new file and selecting.\n        function createWithSuggestedName(suggestedName) {\n            return ProjectManager.createNewItem(baseDirEntry, suggestedName, false, isFolder)\n                .always(function () { fileNewInProgress = false; });\n        }\n\n        return _getUntitledFileSuggestion(baseDirEntry, Strings.UNTITLED, isFolder)\n            .then(createWithSuggestedName, createWithSuggestedName.bind(undefined, Strings.UNTITLED));\n    }\n\n    /**\n     * Create a new untitled document in the workingset, and make it the current document.\n     * Promise is resolved (synchronously) with the newly-created Document.\n     */\n    function handleFileNew() {\n        //var defaultExtension = PreferencesManager.get(\"defaultExtension\");\n        //if (defaultExtension) {\n        //    defaultExtension = \".\" + defaultExtension;\n        //}\n        var defaultExtension = \"\";  // disable preference setting for now\n\n        var doc = DocumentManager.createUntitledDocument(_nextUntitledIndexToUse++, defaultExtension);\n        MainViewManager._edit(MainViewManager.ACTIVE_PANE, doc);\n\n        Metrics.countEvent(\n            Metrics.EVENT_TYPE.EDITOR,\n            \"newUntitledFile\",\n            \"create\"\n        );\n\n        return new $.Deferred().resolve(doc).promise();\n    }\n\n    /**\n     * Create a new file in the project tree.\n     */\n    function handleFileNewInProject() {\n        Metrics.countEvent(\n            Metrics.EVENT_TYPE.EDITOR,\n            \"newFile\",\n            \"inProject\"\n        );\n        _handleNewItemInProject(false);\n    }\n\n    /**\n     * Create a new folder in the project tree.\n     */\n    function handleNewFolderInProject() {\n        Metrics.countEvent(\n            Metrics.EVENT_TYPE.EDITOR,\n            \"newFolder\",\n            \"inProject\"\n        );\n        _handleNewItemInProject(true);\n    }\n\n    /**\n     * @private\n     * Shows an Error modal dialog\n     * @param {string} name\n     * @param {string} path\n     * @return {Dialog}\n     */\n    function _showSaveFileError(name, path) {\n        return Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_ERROR,\n            Strings.ERROR_SAVING_FILE_TITLE,\n            StringUtils.format(\n                Strings.ERROR_SAVING_FILE,\n                StringUtils.breakableUrl(path),\n                FileUtils.getFileErrorString(name)\n            )\n        );\n    }\n\n    /**\n     * Saves a document to its existing path. Does NOT support untitled documents.\n     * @param {!Document} docToSave\n     * @param {boolean=} force Ignore CONTENTS_MODIFIED errors from the FileSystem\n     * @return {$.Promise} a promise that is resolved with the File of docToSave (to mirror\n     *   the API of _doSaveAs()). Rejected in case of IO error (after error dialog dismissed).\n     */\n    function doSave(docToSave, force) {\n        var result = new $.Deferred(),\n            file = docToSave.file;\n\n        function handleError(error) {\n            _showSaveFileError(error, file.fullPath)\n                .done(function () {\n                    result.reject(error);\n                });\n        }\n\n        function handleContentsModified() {\n            Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_ERROR,\n                Strings.EXT_MODIFIED_TITLE,\n                StringUtils.format(\n                    Strings.EXT_MODIFIED_WARNING,\n                    StringUtils.breakableUrl(docToSave.file.fullPath)\n                ),\n                [\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_LEFT,\n                        id: Dialogs.DIALOG_BTN_SAVE_AS,\n                        text: Strings.SAVE_AS\n                    },\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_NORMAL,\n                        id: Dialogs.DIALOG_BTN_CANCEL,\n                        text: Strings.CANCEL\n                    },\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                        id: Dialogs.DIALOG_BTN_OK,\n                        text: Strings.SAVE_AND_OVERWRITE\n                    }\n                ]\n            )\n                .done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_CANCEL) {\n                        result.reject();\n                    } else if (id === Dialogs.DIALOG_BTN_OK) {\n                        // Re-do the save, ignoring any CONTENTS_MODIFIED errors\n                        doSave(docToSave, true).then(result.resolve, result.reject);\n                    } else if (id === Dialogs.DIALOG_BTN_SAVE_AS) {\n                        // Let the user choose a different path at which to write the file\n                        handleFileSaveAs({doc: docToSave}).then(result.resolve, result.reject);\n                    }\n                });\n        }\n\n        function trySave() {\n            // We don't want normalized line endings, so it's important to pass true to getText()\n            FileUtils.writeText(file, docToSave.getText(true), force)\n                .done(function () {\n                    docToSave.notifySaved();\n                    result.resolve(file);\n                    _fileSaved(docToSave);\n                })\n                .fail(function (err) {\n                    if (err === FileSystemError.CONTENTS_MODIFIED) {\n                        handleContentsModified();\n                    } else {\n                        handleError(err);\n                    }\n                });\n        }\n\n        if (docToSave.isDirty) {\n            if (docToSave.keepChangesTime) {\n                // The user has decided to keep conflicting changes in the editor. Check to make sure\n                // the file hasn't changed since they last decided to do that.\n                docToSave.file.stat(function (err, stat) {\n                    // If the file has been deleted on disk, the stat will return an error, but that's fine since\n                    // that means there's no file to overwrite anyway, so the save will succeed without us having\n                    // to set force = true.\n                    if (!err && docToSave.keepChangesTime === stat.mtime.getTime()) {\n                        // OK, it's safe to overwrite the file even though we never reloaded the latest version,\n                        // since the user already said s/he wanted to ignore the disk version.\n                        force = true;\n                    }\n                    trySave();\n                });\n            } else {\n                trySave();\n            }\n        } else {\n            result.resolve(file);\n        }\n        result.always(function () {\n            MainViewManager.focusActivePane();\n        });\n        return result.promise();\n    }\n\n    /**\n     * Reverts the Document to the current contents of its file on disk. Discards any unsaved changes\n     * in the Document.\n     * @private\n     * @param {Document} doc\n     * @param {boolean=} suppressError If true, then a failure to read the file will be ignored and the\n     *      resulting promise will be resolved rather than rejected.\n     * @return {$.Promise} a Promise that's resolved when done, or (if suppressError is false)\n     *      rejected with a FileSystemError if the file cannot be read (after showing an error\n     *      dialog to the user).\n     */\n    function _doRevert(doc, suppressError) {\n        var result = new $.Deferred();\n\n        FileUtils.readAsText(doc.file)\n            .done(function (text, readTimestamp) {\n                doc.refreshText(text, readTimestamp);\n                result.resolve();\n            })\n            .fail(function (error) {\n                if (suppressError) {\n                    result.resolve();\n                } else {\n                    showFileOpenError(error, doc.file.fullPath)\n                        .done(function () {\n                            result.reject(error);\n                        });\n                }\n            });\n\n        return result.promise();\n    }\n\n    /**\n     * Dispatches the app quit cancelled event\n     */\n    function dispatchAppQuitCancelledEvent() {\n        exports.trigger(exports.APP_QUIT_CANCELLED);\n    }\n\n\n    /**\n     * Opens the native OS save as dialog and saves document.\n     * The original document is reverted in case it was dirty.\n     * Text selection and cursor position from the original document\n     * are preserved in the new document.\n     * When saving to the original document the document is saved as if save was called.\n     * @param {Document} doc\n     * @param {?{cursorPos:!Object, selection:!Object, scrollPos:!Object}} settings - properties of\n     *      the original document's editor that need to be carried over to the new document\n     *      i.e. scrollPos, cursorPos and text selection\n     * @return {$.Promise} a promise that is resolved with the saved document's File. Rejected in\n     *   case of IO error (after error dialog dismissed), or if the Save dialog was canceled.\n     */\n    function _doSaveAs(doc, settings) {\n        var origPath,\n            saveAsDefaultPath,\n            defaultName,\n            result = new $.Deferred();\n\n        function _doSaveAfterSaveDialog(path) {\n            var newFile;\n\n            // Reconstruct old doc's editor's view state, & finally resolve overall promise\n            function _configureEditorAndResolve() {\n                var editor = EditorManager.getActiveEditor();\n                if (editor) {\n                    if (settings) {\n                        editor.setSelections(settings.selections);\n                        editor.setScrollPos(settings.scrollPos.x, settings.scrollPos.y);\n                    }\n                }\n                result.resolve(newFile);\n            }\n\n            // Replace old document with new one in open editor & workingset\n            function openNewFile() {\n                var fileOpenPromise;\n\n                if (FileViewController.getFileSelectionFocus() === FileViewController.PROJECT_MANAGER) {\n                    // If selection is in the tree, leave workingset unchanged - even if orig file is in the list\n                    fileOpenPromise = FileViewController\n                        .openAndSelectDocument(path, FileViewController.PROJECT_MANAGER);\n                } else {\n                    // If selection is in workingset, replace orig item in place with the new file\n                    var info = MainViewManager.findInAllWorkingSets(doc.file.fullPath).shift();\n\n                    // Remove old file from workingset; no redraw yet since there's a pause before the new file is opened\n                    MainViewManager._removeView(info.paneId, doc.file, true);\n\n                    // Add new file to workingset, and ensure we now redraw (even if index hasn't changed)\n                    fileOpenPromise = handleFileAddToWorkingSetAndOpen({fullPath: path, paneId: info.paneId, index: info.index, forceRedraw: true});\n                }\n\n                // always configure editor after file is opened\n                fileOpenPromise.always(function () {\n                    _configureEditorAndResolve();\n                });\n            }\n\n            // Same name as before - just do a regular Save\n            if (path === origPath) {\n                doSave(doc).then(result.resolve, result.reject);\n                return;\n            }\n\n            doc.isSaving = true;    // mark that we're saving the document\n\n            // First, write document's current text to new file\n            if (doc.file._encoding && doc.file._encoding !== \"UTF-8\") {\n                var projectRoot = ProjectManager.getProjectRoot(),\n                    context = {\n                        location: {\n                            scope: \"user\",\n                            layer: \"project\",\n                            layerID: projectRoot.fullPath\n                        }\n                    };\n                var encoding = PreferencesManager.getViewState(\"encoding\", context);\n                encoding[path] = doc.file._encoding;\n                PreferencesManager.setViewState(\"encoding\", encoding, context);\n            }\n            newFile = FileSystem.getFileForPath(path);\n            newFile._encoding = doc.file._encoding;\n\n            // Save as warns you when you're about to overwrite a file, so we\n            // explicitly allow \"blind\" writes to the filesystem in this case,\n            // ignoring warnings about the contents being modified outside of\n            // the editor.\n            FileUtils.writeText(newFile, doc.getText(true), true)\n                .done(function () {\n                    // If there were unsaved changes before Save As, they don't stay with the old\n                    // file anymore - so must revert the old doc to match disk content.\n                    // Only do this if the doc was dirty: _doRevert on a file that is not dirty and\n                    // not in the workingset has the side effect of adding it to the workingset.\n                    if (doc.isDirty && !(doc.isUntitled())) {\n                        // if the file is dirty it must be in the workingset\n                        // _doRevert is side effect free in this case\n                        _doRevert(doc).always(openNewFile);\n                    } else {\n                        openNewFile();\n                    }\n                    _fileSaved(doc);\n                })\n                .fail(function (error) {\n                    _showSaveFileError(error, path)\n                        .done(function () {\n                            result.reject(error);\n                        });\n                })\n                .always(function () {\n                    // mark that we're done saving the document\n                    doc.isSaving = false;\n                });\n        }\n\n        if (doc) {\n            origPath = doc.file.fullPath;\n            // If the document is an untitled document, we should default to project root.\n            if (doc.isUntitled()) {\n                // (Issue #4489) if we're saving an untitled document, go ahead and switch to this document\n                //   in the editor, so that if we're, for example, saving several files (ie. Save All),\n                //   then the user can visually tell which document we're currently prompting them to save.\n                var info = MainViewManager.findInAllWorkingSets(origPath).shift();\n\n                if (info) {\n                    MainViewManager._open(info.paneId, doc.file);\n                }\n\n                // If the document is untitled, default to project root.\n                saveAsDefaultPath = ProjectManager.getProjectRoot().fullPath;\n            } else {\n                saveAsDefaultPath = FileUtils.getDirectoryPath(origPath);\n            }\n            defaultName = FileUtils.getBaseName(origPath);\n            var file = FileSystem.getFileForPath(origPath);\n            if (file instanceof InMemoryFile) {\n                var language = LanguageManager.getLanguageForPath(origPath);\n                if (language) {\n                    var fileExtensions = language.getFileExtensions();\n                    if (fileExtensions && fileExtensions.length > 0) {\n                        defaultName += \".\" + fileExtensions[0];\n                    }\n                }\n            }\n            FileSystem.showSaveDialog(Strings.SAVE_FILE_AS, saveAsDefaultPath, defaultName, function (err, selectedPath) {\n                if (!err) {\n                    if (selectedPath) {\n                        _doSaveAfterSaveDialog(selectedPath);\n                    } else {\n                        dispatchAppQuitCancelledEvent();\n                        result.reject(USER_CANCELED);\n                    }\n                } else {\n                    result.reject(err);\n                }\n            });\n        } else {\n            result.reject();\n        }\n        return result.promise();\n    }\n\n    /**\n     * Saves the given file. If no file specified, assumes the current document.\n     * @param {?{doc: ?Document}} commandData  Document to close, or null\n     * @return {$.Promise} resolved with the saved document's File (which MAY DIFFER from the doc\n     *   passed in, if the doc was untitled). Rejected in case of IO error (after error dialog\n     *   dismissed), or if doc was untitled and the Save dialog was canceled (will be rejected with\n     *   USER_CANCELED object).\n     */\n    function handleFileSave(commandData) {\n        var activeEditor = EditorManager.getActiveEditor(),\n            activeDoc = activeEditor && activeEditor.document,\n            doc = (commandData && commandData.doc) || activeDoc,\n            settings;\n\n        if (doc && !doc.isSaving) {\n            if (doc.isUntitled()) {\n                if (doc === activeDoc) {\n                    settings = {\n                        selections: activeEditor.getSelections(),\n                        scrollPos: activeEditor.getScrollPos()\n                    };\n                }\n\n                return _doSaveAs(doc, settings);\n            }\n            return doSave(doc);\n\n        }\n\n        return $.Deferred().reject().promise();\n    }\n\n    /**\n     * Saves all unsaved documents corresponding to 'fileList'. Returns a Promise that will be resolved\n     * once ALL the save operations have been completed. If ANY save operation fails, an error dialog is\n     * immediately shown but after dismissing we continue saving the other files; after all files have\n     * been processed, the Promise is rejected if any ONE save operation failed (the error given is the\n     * first one encountered). If the user cancels any Save As dialog (for untitled files), the\n     * Promise is immediately rejected.\n     *\n     * @param {!Array.<File>} fileList\n     * @return {!$.Promise} Resolved with {!Array.<File>}, which may differ from 'fileList'\n     *      if any of the files were Unsaved documents. Or rejected with {?FileSystemError}.\n     */\n    function _saveFileList(fileList) {\n        // Do in serial because doSave shows error UI for each file, and we don't want to stack\n        // multiple dialogs on top of each other\n        var userCanceled = false,\n            filesAfterSave = [];\n\n        return Async.doSequentially(\n            fileList,\n            function (file) {\n                // Abort remaining saves if user canceled any Save As dialog\n                if (userCanceled) {\n                    return (new $.Deferred()).reject().promise();\n                }\n\n                var doc = DocumentManager.getOpenDocumentForPath(file.fullPath);\n                if (doc) {\n                    var savePromise = handleFileSave({doc: doc});\n                    savePromise\n                        .done(function (newFile) {\n                            filesAfterSave.push(newFile);\n                        })\n                        .fail(function (error) {\n                            if (error === USER_CANCELED) {\n                                userCanceled = true;\n                            }\n                        });\n                    return savePromise;\n                }\n                    // workingset entry that was never actually opened - ignore\n                filesAfterSave.push(file);\n                return (new $.Deferred()).resolve().promise();\n\n            },\n            false  // if any save fails, continue trying to save other files anyway; then reject at end\n        ).then(function () {\n            return filesAfterSave;\n        });\n    }\n\n    /**\n     * Saves all unsaved documents. See _saveFileList() for details on the semantics.\n     * @return {$.Promise}\n     */\n    function saveAll() {\n        return _saveFileList(MainViewManager.getWorkingSet(MainViewManager.ALL_PANES));\n    }\n\n    /**\n     * Prompts user with save as dialog and saves document.\n     * @return {$.Promise} a promise that is resolved once the save has been completed\n     */\n    handleFileSaveAs = function (commandData) {\n        // Default to current document if doc is null\n        var doc = null,\n            settings;\n\n        if (commandData) {\n            doc = commandData.doc;\n        } else {\n            var activeEditor = EditorManager.getActiveEditor();\n            if (activeEditor) {\n                doc = activeEditor.document;\n                settings = {};\n                settings.selections = activeEditor.getSelections();\n                settings.scrollPos = activeEditor.getScrollPos();\n            }\n        }\n\n        // doc may still be null, e.g. if no editors are open, but _doSaveAs() does a null check on\n        // doc.\n        return _doSaveAs(doc, settings);\n    };\n\n    /**\n     * Saves all unsaved documents.\n     * @return {$.Promise} a promise that is resolved once ALL the saves have been completed; or rejected\n     *      after all operations completed if any ONE of them failed.\n     */\n    function handleFileSaveAll() {\n        return saveAll();\n    }\n\n    /**\n     * Closes the specified file: removes it from the workingset, and closes the main editor if one\n     * is open. Prompts user about saving changes first, if document is dirty.\n     *\n     * @param {?{file: File, promptOnly:boolean}} commandData  Optional bag of arguments:\n     *      file - File to close; assumes the current document if not specified.\n     *      promptOnly - If true, only displays the relevant confirmation UI and does NOT actually\n     *          close the document. This is useful when chaining file-close together with other user\n     *          prompts that may be cancelable.\n     *      _forceClose - If true, closes the document without prompting even if there are unsaved\n     *          changes. Only for use in unit tests.\n     * @return {$.Promise} a promise that is resolved when the file is closed, or if no file is open.\n     *      FUTURE: should we reject the promise if no file is open?\n     */\n    function handleFileClose(commandData) {\n        var file,\n            promptOnly,\n            _forceClose,\n            _spawnedRequest,\n            paneId = MainViewManager.ACTIVE_PANE;\n\n        if (commandData) {\n            file        = commandData.file;\n            promptOnly  = commandData.promptOnly;\n            _forceClose = commandData._forceClose;\n            paneId      = commandData.paneId || paneId;\n            _spawnedRequest = commandData.spawnedRequest || false;\n        }\n\n        // utility function for handleFileClose: closes document & removes from workingset\n        function doClose(file) {\n            if (!promptOnly) {\n                MainViewManager._close(paneId, file);\n                _fileClosed(file);\n            }\n        }\n\n        var result = new $.Deferred(), promise = result.promise();\n\n        // Default to current document if doc is null\n        if (!file) {\n            file = MainViewManager.getCurrentlyViewedFile(MainViewManager.ACTIVE_PANE);\n        }\n\n        // No-op if called when nothing is open; TODO: (issue #273) should command be grayed out instead?\n        if (!file) {\n            result.resolve();\n            return promise;\n        }\n\n        var doc = DocumentManager.getOpenDocumentForPath(file.fullPath);\n\n        if (doc && doc.isDirty && !_forceClose && (MainViewManager.isExclusiveToPane(doc.file, paneId) || _spawnedRequest)) {\n            // Document is dirty: prompt to save changes before closing if only the document is exclusively\n            // listed in the requested pane or this is part of a list close request\n            var filename = FileUtils.getBaseName(doc.file.fullPath);\n\n            Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_SAVE_CLOSE,\n                Strings.SAVE_CLOSE_TITLE,\n                StringUtils.format(\n                    Strings.SAVE_CLOSE_MESSAGE,\n                    StringUtils.breakableUrl(filename)\n                ),\n                [\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_LEFT,\n                        id: Dialogs.DIALOG_BTN_DONTSAVE,\n                        text: Strings.DONT_SAVE\n                    },\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_NORMAL,\n                        id: Dialogs.DIALOG_BTN_CANCEL,\n                        text: Strings.CANCEL\n                    },\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                        id: Dialogs.DIALOG_BTN_OK,\n                        text: Strings.SAVE\n                    }\n                ]\n            )\n                .done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_CANCEL) {\n                        dispatchAppQuitCancelledEvent();\n                        result.reject();\n                    } else if (id === Dialogs.DIALOG_BTN_OK) {\n                        // \"Save\" case: wait until we confirm save has succeeded before closing\n                        handleFileSave({doc: doc})\n                            .done(function (newFile) {\n                                doClose(newFile);\n                                result.resolve();\n                            })\n                            .fail(function () {\n                                result.reject();\n                            });\n                    } else {\n                        // \"Don't Save\" case: even though we're closing the main editor, other views of\n                        // the Document may remain in the UI. So we need to revert the Document to a clean\n                        // copy of whatever's on disk.\n                        doClose(file);\n\n                        // Only reload from disk if we've executed the Close for real.\n                        if (promptOnly) {\n                            result.resolve();\n                        } else {\n                            // Even if there are no listeners attached to the document at this point, we want\n                            // to do the revert anyway, because clients who are listening to the global documentChange\n                            // event from the Document module (rather than attaching to the document directly),\n                            // such as the Find in Files panel, should get a change event. However, in that case,\n                            // we want to ignore errors during the revert, since we don't want a failed revert\n                            // to throw a dialog if the document isn't actually open in the UI.\n                            var suppressError = !DocumentManager.getOpenDocumentForPath(file.fullPath);\n                            _doRevert(doc, suppressError)\n                                .then(result.resolve, result.reject);\n                        }\n                    }\n                });\n            result.always(function () {\n                MainViewManager.focusActivePane();\n            });\n        } else {\n            // File is not open, or IS open but Document not dirty: close immediately\n            doClose(file);\n            MainViewManager.focusActivePane();\n            result.resolve();\n        }\n        return promise;\n    }\n\n    /**\n     * @param {!Array.<File>} list - the list of files to close\n     * @param {boolean} promptOnly - true to just prompt for saving documents with actually closing them.\n     * @param {boolean} _forceClose Whether to force all the documents to close even if they have unsaved changes. For unit testing only.\n     * @return {jQuery.Promise} promise that is resolved or rejected when the function finishes.\n     */\n    function _closeList(list, promptOnly, _forceClose) {\n        var result      = new $.Deferred(),\n            unsavedDocs = [];\n\n        list.forEach(function (file) {\n            var doc = DocumentManager.getOpenDocumentForPath(file.fullPath);\n            if (doc && doc.isDirty) {\n                unsavedDocs.push(doc);\n            }\n        });\n\n        if (unsavedDocs.length === 0 || _forceClose) {\n            // No unsaved changes or we want to ignore them, so we can proceed without a prompt\n            result.resolve();\n\n        } else if (unsavedDocs.length === 1) {\n            // Only one unsaved file: show the usual single-file-close confirmation UI\n            var fileCloseArgs = { file: unsavedDocs[0].file, promptOnly: promptOnly, spawnedRequest: true };\n\n            handleFileClose(fileCloseArgs).done(function () {\n                // still need to close any other, non-unsaved documents\n                result.resolve();\n            }).fail(function () {\n                result.reject();\n            });\n\n        } else {\n            // Multiple unsaved files: show a single bulk prompt listing all files\n            var message = Strings.SAVE_CLOSE_MULTI_MESSAGE + FileUtils.makeDialogFileList(_.map(unsavedDocs, _shortTitleForDocument));\n\n            Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_SAVE_CLOSE,\n                Strings.SAVE_CLOSE_TITLE,\n                message,\n                [\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_LEFT,\n                        id: Dialogs.DIALOG_BTN_DONTSAVE,\n                        text: Strings.DONT_SAVE\n                    },\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_NORMAL,\n                        id: Dialogs.DIALOG_BTN_CANCEL,\n                        text: Strings.CANCEL\n                    },\n                    {\n                        className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                        id: Dialogs.DIALOG_BTN_OK,\n                        text: Strings.SAVE\n                    }\n                ]\n            )\n                .done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_CANCEL) {\n                        dispatchAppQuitCancelledEvent();\n                        result.reject();\n                    } else if (id === Dialogs.DIALOG_BTN_OK) {\n                        // Save all unsaved files, then if that succeeds, close all\n                        _saveFileList(list).done(function (listAfterSave) {\n                            // List of files after save may be different, if any were Untitled\n                            result.resolve(listAfterSave);\n                        }).fail(function () {\n                            result.reject();\n                        });\n                    } else {\n                        // \"Don't Save\" case--we can just go ahead and close all files.\n                        result.resolve();\n                    }\n                });\n        }\n\n        // If all the unsaved-changes confirmations pan out above, then go ahead & close all editors\n        // NOTE: this still happens before any done() handlers added by our caller, because jQ\n        // guarantees that handlers run in the order they are added.\n        result.done(function (listAfterSave) {\n            listAfterSave = listAfterSave || list;\n            if (!promptOnly) {\n                MainViewManager._closeList(MainViewManager.ALL_PANES, listAfterSave);\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Closes all open files; equivalent to calling handleFileClose() for each document, except\n     * that unsaved changes are confirmed once, in bulk.\n     * @param {?{promptOnly: boolean, _forceClose: boolean}}\n     *          If promptOnly is true, only displays the relevant confirmation UI and does NOT\n     *          actually close any documents. This is useful when chaining close-all together with\n     *          other user prompts that may be cancelable.\n     *          If _forceClose is true, forces the files to close with no confirmation even if dirty.\n     *          Should only be used for unit test cleanup.\n     * @return {$.Promise} a promise that is resolved when all files are closed\n     */\n    function handleFileCloseAll(commandData) {\n        return _closeList(MainViewManager.getAllOpenFiles(),\n                                    (commandData && commandData.promptOnly), (commandData && commandData._forceClose));\n    }\n\n\n    /**\n     * Closes a list of open files; equivalent to calling handleFileClose() for each document, except\n     * that unsaved changes are confirmed once, in bulk.\n     * @param {?{promptOnly: boolean, _forceClose: boolean}}\n     *          If promptOnly is true, only displays the relevant confirmation UI and does NOT\n     *          actually close any documents. This is useful when chaining close-all together with\n     *          other user prompts that may be cancelable.\n     *          If _forceClose is true, forces the files to close with no confirmation even if dirty.\n     *          Should only be used for unit test cleanup.\n     * @return {$.Promise} a promise that is resolved when all files are closed\n     */\n    function handleFileCloseList(commandData) {\n        return _closeList(commandData.fileList);\n    }\n\n    /**\n     * @private - tracks our closing state if we get called again\n     */\n    var _windowGoingAway = false;\n\n    /**\n     * @private\n     * Common implementation for close/quit/reload which all mostly\n     * the same except for the final step\n     * @param {Object} commandData - (not referenced)\n     * @param {!function()} postCloseHandler - called after close\n     * @param {!function()} failHandler - called when the save fails to cancel closing the window\n     */\n    function _handleWindowGoingAway(commandData, postCloseHandler, failHandler) {\n        if (_windowGoingAway) {\n            //if we get called back while we're closing, then just return\n            return (new $.Deferred()).reject().promise();\n        }\n\n        return CommandManager.execute(Commands.FILE_CLOSE_ALL, { promptOnly: true })\n            .done(function () {\n                _windowGoingAway = true;\n\n                // Give everyone a chance to save their state - but don't let any problems block\n                // us from quitting\n                try {\n                    ProjectManager.trigger(\"beforeAppClose\");\n                } catch (ex) {\n                    console.error(ex);\n                }\n\n                postCloseHandler();\n            })\n            .fail(function () {\n                _windowGoingAway = false;\n                if (failHandler) {\n                    failHandler();\n                }\n            });\n    }\n\n    /**\n     * @private\n     * Implementation for abortQuit callback to reset quit sequence settings\n     */\n    function handleAbortQuit() {\n        _windowGoingAway = false;\n    }\n\n    /**\n     * @private\n     * Implementation for native APP_BEFORE_MENUPOPUP callback to trigger beforeMenuPopup event\n     */\n    function handleBeforeMenuPopup() {\n        PopUpManager.trigger(\"beforeMenuPopup\");\n    }\n\n    /**\n     * Confirms any unsaved changes, then closes the window\n     * @param {Object} command data\n     */\n    function handleFileCloseWindow(commandData) {\n        return _handleWindowGoingAway(\n            commandData,\n            function () {\n                window.close();\n            },\n            function () {\n                // if fail, tell the app to abort any pending quit operation.\n                brackets.app.abortQuit();\n            }\n        );\n    }\n\n    /** Show a textfield to rename whatever is currently selected in the sidebar (or current doc if nothing else selected) */\n    function handleFileRename() {\n        // Prefer selected sidebar item (which could be a folder)\n        var entry = ProjectManager.getContext();\n        if (!entry) {\n            // Else use current file (not selected in ProjectManager if not visible in tree or workingset)\n            entry = MainViewManager.getCurrentlyViewedFile();\n        }\n        if (entry) {\n            ProjectManager.renameItemInline(entry);\n        }\n    }\n\n    /** Closes the window, then quits the app */\n    function handleFileQuit(commandData) {\n        return _handleWindowGoingAway(\n            commandData,\n            function () {\n                brackets.app.quit();\n            },\n            function () {\n                // if fail, don't exit: user canceled (or asked us to save changes first, but we failed to do so)\n                brackets.app.abortQuit();\n            }\n        );\n    }\n\n\n    /** Are we already listening for a keyup to call detectDocumentNavEnd()? */\n    var _addedNavKeyHandler = false;\n\n    /**\n     * When the Ctrl key is released, if we were in the middle of a next/prev document navigation\n     * sequence, now is the time to end it and update the MRU order. If we allowed the order to update\n     * on every next/prev increment, the 1st & 2nd entries would just switch places forever and we'd\n     * never get further down the list.\n     * @param {jQueryEvent} event Key-up event\n     */\n    function detectDocumentNavEnd(event) {\n        if (event.keyCode === KeyEvent.DOM_VK_CONTROL) {  // Ctrl key\n            MainViewManager.endTraversal();\n            _addedNavKeyHandler = false;\n            $(window.document.body).off(\"keyup\", detectDocumentNavEnd);\n        }\n    }\n\n    /**\n     * Navigate to the next/previous (MRU or list order) document. Don't update MRU order yet\n     * @param {!number} inc Delta indicating in which direction we're going\n     * @param {?boolean} listOrder Whether to navigate using MRU or list order. Defaults to MRU order\n     */\n    function goNextPrevDoc(inc, listOrder) {\n        var result;\n        if (listOrder) {\n            result = MainViewManager.traverseToNextViewInListOrder(inc);\n        } else {\n            result = MainViewManager.traverseToNextViewByMRU(inc);\n        }\n\n        if (result) {\n            var file = result.file,\n                paneId = result.paneId;\n\n            MainViewManager.beginTraversal();\n            CommandManager.execute(Commands.FILE_OPEN, {fullPath: file.fullPath,\n                paneId: paneId });\n\n            // Listen for ending of Ctrl+Tab sequence\n            if (!_addedNavKeyHandler) {\n                _addedNavKeyHandler = true;\n                $(window.document.body).keyup(detectDocumentNavEnd);\n            }\n        }\n    }\n\n    /** Next Doc command handler (MRU order) **/\n    function handleGoNextDoc() {\n        goNextPrevDoc(+1);\n    }\n\n    /** Previous Doc command handler (MRU order) **/\n    function handleGoPrevDoc() {\n        goNextPrevDoc(-1);\n    }\n\n    /** Next Doc command handler (list order) **/\n    function handleGoNextDocListOrder() {\n        goNextPrevDoc(+1, true);\n    }\n\n    /** Previous Doc command handler (list order) **/\n    function handleGoPrevDocListOrder() {\n        goNextPrevDoc(-1, true);\n    }\n\n    /** Show in File Tree command handler **/\n    function handleShowInTree() {\n        let activeFile = MainViewManager.getCurrentlyViewedFile(MainViewManager.ACTIVE_PANE);\n        if(activeFile){\n            ProjectManager.showInTree(activeFile);\n        }\n    }\n\n    /** Delete file command handler  **/\n    function handleFileDelete() {\n        var entry = ProjectManager.getSelectedItem();\n        Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_EXT_DELETED,\n            Strings.CONFIRM_DELETE_TITLE,\n            StringUtils.format(\n                entry.isFile ? Strings.CONFIRM_FILE_DELETE : Strings.CONFIRM_FOLDER_DELETE,\n                StringUtils.breakableUrl(entry.name)\n            ),\n            [\n                {\n                    className: Dialogs.DIALOG_BTN_CLASS_NORMAL,\n                    id: Dialogs.DIALOG_BTN_CANCEL,\n                    text: Strings.CANCEL\n                },\n                {\n                    className: Dialogs.DIALOG_BTN_CLASS_PRIMARY,\n                    id: Dialogs.DIALOG_BTN_OK,\n                    text: Strings.DELETE\n                }\n            ]\n        )\n            .done(function (id) {\n                if (id === Dialogs.DIALOG_BTN_OK) {\n                    ProjectManager.deleteItem(entry);\n                }\n            });\n    }\n\n    /**\n    * Does a full reload of the browser window\n    * @param {string} href The url to reload into the window\n    */\n    function browserReload(href) {\n        if (_isReloading) {\n            return;\n        }\n\n        _isReloading = true;\n\n        return CommandManager.execute(Commands.FILE_CLOSE_ALL, { promptOnly: true }).done(function () {\n            // Give everyone a chance to save their state - but don't let any problems block\n            // us from quitting\n            try {\n                ProjectManager.trigger(\"beforeAppClose\");\n            } catch (ex) {\n                console.error(ex);\n            }\n\n            // Remove all menus to assure every part of Brackets is reloaded\n            _.forEach(Menus.getAllMenus(), function (value, key) {\n                Menus.removeMenu(key);\n            });\n\n            // If there's a fragment in both URLs, setting location.href won't actually reload\n            var fragment = href.indexOf(\"#\");\n            if (fragment !== -1) {\n                href = href.substr(0, fragment);\n            }\n\n            // Defer for a more successful reload - issue #11539\n            window.setTimeout(function () {\n                window.location.href = href;\n            }, 1000);\n        }).fail(function () {\n            _isReloading = false;\n        });\n    }\n\n    /**\n     * Restarts brackets Handler\n     * @param {boolean=} loadWithoutExtensions - true to restart without extensions,\n     *                                           otherwise extensions are loadeed as it is durning a typical boot\n     */\n    function handleReload(loadWithoutExtensions) {\n        var href    = window.location.href,\n            params  = new UrlParams();\n\n        // Make sure the Reload Without User Extensions parameter is removed\n        params.parse();\n\n        if (loadWithoutExtensions) {\n            if (!params.get(\"reloadWithoutUserExts\")) {\n                params.put(\"reloadWithoutUserExts\", true);\n            }\n        } else {\n            if (params.get(\"reloadWithoutUserExts\")) {\n                params.remove(\"reloadWithoutUserExts\");\n            }\n        }\n\n        if (href.indexOf(\"?\") !== -1) {\n            href = href.substring(0, href.indexOf(\"?\"));\n        }\n\n        if (!params.isEmpty()) {\n            href += \"?\" + params.toString();\n        }\n\n        // Give Mac native menus extra time to update shortcut highlighting.\n        // Prevents the menu highlighting from getting messed up after reload.\n        window.setTimeout(function () {\n            browserReload(href);\n        }, 100);\n    }\n\n    /** Reload Without Extensions commnad handler **/\n    var handleReloadWithoutExts = _.partial(handleReload, true);\n\n    /**\n     * Attach a beforeunload handler to notify user about unsaved changes and URL redirection in CEF.\n     * Prevents data loss in scenario reported under #13708\n     * Make sure we don't attach this handler if the current window is actually a test window\n    **/\n\n    var isTestWindow = (new window.URLSearchParams(window.location.search || \"\")).get(\"testEnvironment\");\n    if (!isTestWindow) {\n        window.onbeforeunload = function(e) {\n            PreferencesManager.setViewState(\"windowClosingTime\", new Date().getTime(), {}, false);\n            _handleWindowGoingAway(null, closeSuccess=>{\n                console.log('close success: ', closeSuccess);\n            }, closeFail=>{\n                console.log('close success: ', closeFail);\n            });\n            var openDocs = DocumentManager.getAllOpenDocuments();\n\n            // Detect any unsaved changes\n            openDocs = openDocs.filter(function(doc) {\n                return doc && doc.isDirty;\n            });\n\n            // Ensure we are not in normal app-quit or reload workflow\n            if (!_isReloading && !_windowGoingAway) {\n                if (openDocs.length > 0) {\n                    return Strings.WINDOW_UNLOAD_WARNING_WITH_UNSAVED_CHANGES;\n                }\n                return Strings.WINDOW_UNLOAD_WARNING;\n            }\n        };\n    }\n\n    /** Do some initialization when the DOM is ready **/\n    AppInit.htmlReady(function () {\n        // If in Reload Without User Extensions mode, update UI and log console message\n        var params      = new UrlParams(),\n            $icon       = $(\"#toolbar-extension-manager\"),\n            $indicator  = $(\"<div>\" + Strings.STATUSBAR_USER_EXTENSIONS_DISABLED + \"</div>\");\n\n        params.parse();\n\n        if (params.get(\"reloadWithoutUserExts\") === \"true\") {\n            CommandManager.get(Commands.FILE_EXTENSION_MANAGER).setEnabled(false);\n            $icon.css({display: \"none\"});\n            StatusBar.addIndicator(\"status-user-exts\", $indicator, true);\n            console.log(\"Brackets reloaded with extensions disabled\");\n        }\n\n        // Init DOM elements\n        _$titleContainerToolbar = $(\"#titlebar\");\n        _$titleWrapper = $(\".title-wrapper\", _$titleContainerToolbar);\n        _$title = $(\".title\", _$titleWrapper);\n        _$dirtydot = $(\".dirty-dot\", _$titleWrapper);\n    });\n\n    // Exported for unit testing only\n    exports._parseDecoratedPath = _parseDecoratedPath;\n\n    // Set some command strings\n    var quitString  = Strings.CMD_QUIT;\n    if (brackets.platform === \"win\") {\n        quitString  = Strings.CMD_EXIT;\n    }\n\n    // Define public API\n    exports.showFileOpenError = showFileOpenError;\n    exports.APP_QUIT_CANCELLED = APP_QUIT_CANCELLED;\n\n\n    // Deprecated commands\n    CommandManager.register(Strings.CMD_ADD_TO_WORKING_SET,          Commands.FILE_ADD_TO_WORKING_SET,        handleFileAddToWorkingSet);\n    CommandManager.register(Strings.CMD_FILE_OPEN,                   Commands.FILE_OPEN,                      handleDocumentOpen);\n\n    // New commands\n    CommandManager.register(Strings.CMD_ADD_TO_WORKING_SET,          Commands.CMD_ADD_TO_WORKINGSET_AND_OPEN, handleFileAddToWorkingSetAndOpen);\n    CommandManager.register(Strings.CMD_FILE_OPEN,                   Commands.CMD_OPEN,                       handleFileOpen);\n\n    // File Commands\n    CommandManager.register(Strings.CMD_FILE_NEW_UNTITLED,           Commands.FILE_NEW_UNTITLED,              handleFileNew);\n    CommandManager.register(Strings.CMD_FILE_NEW,                    Commands.FILE_NEW,                       handleFileNewInProject);\n    CommandManager.register(Strings.CMD_FILE_NEW_FOLDER,             Commands.FILE_NEW_FOLDER,                handleNewFolderInProject);\n    CommandManager.register(Strings.CMD_FILE_SAVE,                   Commands.FILE_SAVE,                      handleFileSave);\n    CommandManager.register(Strings.CMD_FILE_SAVE_ALL,               Commands.FILE_SAVE_ALL,                  handleFileSaveAll);\n    CommandManager.register(Strings.CMD_FILE_SAVE_AS,                Commands.FILE_SAVE_AS,                   handleFileSaveAs);\n    CommandManager.register(Strings.CMD_FILE_RENAME,                 Commands.FILE_RENAME,                    handleFileRename);\n    CommandManager.register(Strings.CMD_FILE_DELETE,                 Commands.FILE_DELETE,                    handleFileDelete);\n\n    // Close Commands\n    CommandManager.register(Strings.CMD_FILE_CLOSE,                  Commands.FILE_CLOSE,                     handleFileClose);\n    CommandManager.register(Strings.CMD_FILE_CLOSE_ALL,              Commands.FILE_CLOSE_ALL,                 handleFileCloseAll);\n    CommandManager.register(Strings.CMD_FILE_CLOSE_LIST,             Commands.FILE_CLOSE_LIST,                handleFileCloseList);\n\n    // Traversal\n    CommandManager.register(Strings.CMD_NEXT_DOC,                    Commands.NAVIGATE_NEXT_DOC,              handleGoNextDoc);\n    CommandManager.register(Strings.CMD_PREV_DOC,                    Commands.NAVIGATE_PREV_DOC,              handleGoPrevDoc);\n\n    CommandManager.register(Strings.CMD_NEXT_DOC_LIST_ORDER,         Commands.NAVIGATE_NEXT_DOC_LIST_ORDER,   handleGoNextDocListOrder);\n    CommandManager.register(Strings.CMD_PREV_DOC_LIST_ORDER,         Commands.NAVIGATE_PREV_DOC_LIST_ORDER,   handleGoPrevDocListOrder);\n\n    // Special Commands\n    CommandManager.register(quitString,                              Commands.FILE_QUIT,                      handleFileQuit);\n    CommandManager.register(Strings.CMD_SHOW_IN_TREE,                Commands.NAVIGATE_SHOW_IN_FILE_TREE,     handleShowInTree);\n\n    // These commands have no UI representation and are only used internally\n    CommandManager.registerInternal(Commands.APP_ABORT_QUIT,            handleAbortQuit);\n    CommandManager.registerInternal(Commands.APP_BEFORE_MENUPOPUP,      handleBeforeMenuPopup);\n    CommandManager.registerInternal(Commands.FILE_CLOSE_WINDOW,         handleFileCloseWindow);\n    CommandManager.registerInternal(Commands.APP_RELOAD,                handleReload);\n    CommandManager.registerInternal(Commands.APP_RELOAD_WITHOUT_EXTS,   handleReloadWithoutExts);\n\n    // Listen for changes that require updating the editor titlebar\n    ProjectManager.on(\"projectOpen\", _updateTitle);\n    DocumentManager.on(\"dirtyFlagChange\", handleDirtyChange);\n    DocumentManager.on(\"fileNameChange\", handleCurrentFileChange);\n    MainViewManager.on(\"currentFileChange\", handleCurrentFileChange);\n\n    // Reset the untitled document counter before changing projects\n    ProjectManager.on(\"beforeProjectClose\", function () { _nextUntitledIndexToUse = 1; });\n});\n"],"file":"DocumentCommandHandlers.js"}