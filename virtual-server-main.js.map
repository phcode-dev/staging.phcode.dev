{"version":3,"sources":["virtual-server-main.js"],"names":["importScripts","workbox","setConfig","debug","Config","wwwRegex","RegExp","route","wwwPartialRegex","routing","registerRoute","url","path","pathname","match","decodeURI","formatter","searchParams","get","JSONFormatter","HtmlFormatter","download","Serve","serve","Promise","resolve","Response","redirect","core","skipWaiting","clientsClaim"],"mappings":"AAoBAA,cAAc,wBACdA,cAAc,uCACdA,cAAc,mCACdA,cAAc,yCACdA,cAAc,sCACdA,cAAc,2CACdA,cAAc,2CAIdA,cAAc,2EAEdC,QAAQC,UAAU,CAACC,MAAOC,OAAOD,QAGjC,MAAME,SAAW,IAAIC,UAAUF,OAAOG,cAEhCC,gBAAkB,IAAIF,UAAUF,OAAOG,UAE7CN,QAAQQ,QAAQC,cACZL,SACA,EAAEM,IAAAA,QAEE,IAAIC,KAAOD,IAAIE,SAASC,MAAMT,UAAU,GAExCO,KAAOG,UAAUH,MAGjB,MAAMI,UAC+B,OAAjCL,IAAIM,aAAaC,IAAI,QACfC,cACAC,cAGJC,SACmC,OAArCV,IAAIM,aAAaC,IAAI,aACU,OAA/BP,IAAIM,aAAaC,IAAI,MAEzB,OAAOI,MAAMC,MAAMX,KAAMI,UAAWK,WAExC,OAIJpB,QAAQQ,QAAQC,cACZF,gBACA,EAAEG,IAAAA,QACEA,IAAIE,YAAcT,OAAOG,SAClBiB,QAAQC,QAAQC,SAASC,SAAShB,IAAK,OAElD,OAGJV,QAAQ2B,KAAKC,cACb5B,QAAQ2B,KAAKE","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * modified by core.ai, based on work by David Humphrey <david.humphrey@senecacolleage.ca> (@humphd)\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/* global workbox, importScripts, Serve, JSONFormatter, HtmlFormatter, Config*/\nimportScripts('phoenix/virtualfs.js');\nimportScripts('phoenix/virtualServer/mime-types.js');\nimportScripts('phoenix/virtualServer/config.js');\nimportScripts('phoenix/virtualServer/content-type.js');\nimportScripts('phoenix/virtualServer/webserver.js');\nimportScripts('phoenix/virtualServer/json-formatter.js');\nimportScripts('phoenix/virtualServer/html-formatter.js');\n\n\n// TODO: include this via package.json\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/4.1.1/workbox-sw.js');\n\nworkbox.setConfig({debug: Config.debug});\n\n// Route with trailing slash (i.e., /path/into/filesystem)\nconst wwwRegex = new RegExp(`${Config.route}(/.*)`);\n// Route minus the trailing slash\nconst wwwPartialRegex = new RegExp(`${Config.route}$`);\n\nworkbox.routing.registerRoute(\n    wwwRegex,\n    ({url}) => {\n        // Pull the filesystem path off the url\n        let path = url.pathname.match(wwwRegex)[1];\n        // Deal with encoding in the filename (e.g., spaces as %20)\n        path = decodeURI(path);\n\n        // Allow passing `?json` on URL to get back JSON vs. raw response\n        const formatter =\n            url.searchParams.get('json') !== null\n                ? JSONFormatter\n                : HtmlFormatter;\n\n        // Allow passing `?download` or `dl` to have the file downloaded vs. displayed\n        const download =\n            url.searchParams.get('download') !== null ||\n            url.searchParams.get('dl') !== null;\n\n        return Serve.serve(path, formatter, download);\n    },\n    'GET'\n);\n\n// Redirect if missing the / on our expected route\nworkbox.routing.registerRoute(\n    wwwPartialRegex,\n    ({url}) => {\n        url.pathname = `${Config.route}/`;\n        return Promise.resolve(Response.redirect(url, 302));\n    },\n    'GET'\n);\n\nworkbox.core.skipWaiting();\nworkbox.core.clientsClaim();\n"],"file":"virtual-server-main.js"}