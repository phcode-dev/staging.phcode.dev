!function setupGlobalStorage(){if(window.PhStore)return void console.error("window.PhStore already setup. Ignoring.");const EVENT_CHANGED="change",FIRST_BOOT_TIME="firstBootTime";let storageNodeConnector,_testKey,nodeStoragePhoenixApis={};const isBrowser=!Phoenix.browser.isTauri,isDesktop=Phoenix.browser.isTauri,PH_LOCAL_STORE_PREFIX="Ph_",PHOENIX_STORAGE_BROADCAST_CHANNEL_NAME="ph-storage",EXTERNAL_CHANGE_BROADCAST_INTERVAL=500,CHANGE_TYPE_EXTERNAL="External",CHANGE_TYPE_INTERNAL="Internal",MGS_CHANGE="change";let cache={},pendingBroadcastKV={},watchExternalKeys={};function commitExternalChanges(changedKV){for(let key of Object.keys(changedKV))if(watchExternalKeys[key]){const externalChange=changedKV[key];(!cache[key]||externalChange.t>cache[key].t)&&(cache[key]=externalChange,PhStore.trigger(key,CHANGE_TYPE_EXTERNAL))}}if(isDesktop&&(window.nodeSetupDonePromise?window.nodeSetupDonePromise.then(nodeConfig=>{const STORAGE_NODE_CONNECTOR_ID="ph_storage";(storageNodeConnector=window.PhNodeEngine.createNodeConnector("ph_storage",nodeStoragePhoenixApis)).execPeer("openDB",window._tauriBootVars.appLocalDir),Phoenix.isTestWindow&&(window.storageNodeConnector=storageNodeConnector),storageNodeConnector.on("change",(_evt,changedKV)=>{commitExternalChanges(changedKV)})}):alert("Critical Error! Node Storage could not be started.")),isBrowser){const storageChannel=new BroadcastChannel("ph-storage");setInterval(()=>{storageChannel.postMessage({type:"change",keys:pendingBroadcastKV}),pendingBroadcastKV={}},500),storageChannel.onmessage=(event=>{const message=event.data;"change"===message.type&&commitExternalChanges(message.keys)})}function getItem(key){let cachedResult=cache[key];if(cachedResult)return JSON.parse(cachedResult.v);if(Phoenix.isTestWindow||isDesktop)return null;const jsonStr=localStorage.getItem(PH_LOCAL_STORE_PREFIX+key);if(null===jsonStr)return null;try{return cachedResult=JSON.parse(jsonStr),cache[key]=cachedResult,JSON.parse(cachedResult.v)}catch(e){return null}}function setItem(key,value){const valueToStore={t:Date.now(),v:JSON.stringify(value)};Phoenix.isTestWindow&&key!==_testKey||(isDesktop&&storageNodeConnector.execPeer("putItem",{key:key,value:valueToStore}),(window.debugMode||isBrowser)&&localStorage.setItem(PH_LOCAL_STORE_PREFIX+key,JSON.stringify(valueToStore))),cache[key]=valueToStore,watchExternalKeys[key]&&isBrowser&&(pendingBroadcastKV[key]=valueToStore),PhStore.trigger(key,CHANGE_TYPE_INTERNAL)}function removeItem(key){setItem(key,null)}function watchExternalChanges(key){if(watchExternalKeys[key]=!0,isDesktop){const t=cache[key]&&cache[key].t||0;storageNodeConnector.execPeer("watchExternalChanges",{key:key,t:t})}}function unwatchExternalChanges(key){delete watchExternalKeys[key],isDesktop&&storageNodeConnector.execPeer("unwatchExternalChanges",key)}function setupFirstBoot(){const firstBootTime=getItem(FIRST_BOOT_TIME);firstBootTime||(window.Phoenix.firstBoot=!0,setItem(FIRST_BOOT_TIME,Date.now()))}const storageReadyPromise=new Promise(resolve=>{if(isBrowser||Phoenix.isTestWindow)return resolve(),void setupFirstBoot();window._tauriStorageRestorePromise.then(jsonData=>{cache=JSON.parse(jsonData),setupFirstBoot()}).finally(resolve)});async function flushDB(){isDesktop&&await storageNodeConnector.execPeer("flushDB")}const PhStore={getItem:getItem,setItem:setItem,removeItem:removeItem,flushDB:flushDB,watchExternalChanges:watchExternalChanges,unwatchExternalChanges:unwatchExternalChanges,storageReadyPromise:storageReadyPromise,_storageBootstrapTime:Date.now()-Phoenix.startTime};Phoenix.isTestWindow&&(PhStore._setTestKey=function(testKey){_testKey=testKey}),EventDispatcher.makeEventDispatcher(PhStore),window.PhStore=PhStore}();
//# sourceMappingURL=storage.js.map
