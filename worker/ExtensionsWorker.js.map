{"version":3,"sources":["worker/ExtensionsWorker.js"],"names":["define","require","exports","module","EventDispatcher","WorkerComm","_ExtensionsWorker","Worker","Phoenix","baseURL","window","logger","logToConsolePref","console","error","makeEventDispatcher","createWorkerComm"],"mappings":"AAgEAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,gBAAkBH,QAAQ,yBAC5BI,WAAaJ,QAAQ,qBAEnBK,kBAAoB,IAAIC,UACvBC,QAAQC,mDAAsF,SAAnCC,OAAOC,OAAOC,oBAE5EN,mBACAO,QAAQC,MAAM,+EAElBV,gBAAgBW,oBAAoBb,SACpCG,WAAWW,iBAAiBV,kBAAmBJ","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n// @INCLUDE_IN_API_DOCS\n/**\n * This is a generic web worker that is available for use by extensions to offload extension related tasks. This\n * should only be used for performing small compute tasks and should not be used for long-running compute tasks.\n *\n * * Extensions are advised to use [worker/IndexingWorker](IndexingWorker-API) if they are performing large number of\n *   file operations to utilize the file cache.\n * * Extensions performing large compute tasks should create their own worker and may use easy util methods in\n *   [worker/WorkerComm](WorkerComm-API) to communicate with the web worker.\n *\n * ## Import\n * ```js\n * // usage within extensions:\n * const ExtensionsWorker = brackets.getModule(\"worker/ExtensionsWorker\");\n * ```\n * ## Extending the ExtensionsWorker\n * You can add your own custom scripts to the ExtensionsWorker by following the below example. Suppose you have an\n * extension folder with the following structure:\n * ```\n * myExtensionFolder\n * │  my_worker.js // the script that you need to attach to the web worker\n * │  main.js\n * ```\n * In `main.js` extension module, we can import `my_worker.js` script into `ExtensionsWorker` by:\n * ```js\n * let ExtensionUtils = brackets.getModule(\"utils/ExtensionUtils\");\n * let workerPath = ExtensionUtils.getModulePath(module, \"my_worker.js\")\n * ExtensionsWorker.loadScriptInWorker(workerPath);\n * ```\n *\n * Once the worker script is loaded with the above step:\n * * Phoenix can communicate with worker using the `IndexingWorker` reference in Phoenix.\n * * Worker can communicate with Phoenix with the global `WorkerComm` reference within the Indexing worker.\n * All utility methods in module [worker/WorkerComm](WorkerComm-API) can be used for worker communication.\n *\n * A global constant `Phoenix.baseURL` is available in the worker context to get the base url from which phoenix was\n * launched.\n *\n * NB: You can use all util methods available in `worker/WorkerComm` as `ExtensionsWorker` internally uses `WorkerComm`\n * to communicate with the underlying worker thread.\n *\n * @module worker/ExtensionsWorker\n */\ndefine(function (require, exports, module) {\n    const EventDispatcher = require(\"utils/EventDispatcher\"),\n        WorkerComm = require(\"worker/WorkerComm\");\n\n    const _ExtensionsWorker = new Worker(\n        `${Phoenix.baseURL}worker/extensions-worker-thread.js?debug=${window.logger.logToConsolePref === 'true'}`);\n\n    if(!_ExtensionsWorker){\n        console.error(\"Could not load Extensions worker! Some extensions may not work as expected.\");\n    }\n    EventDispatcher.makeEventDispatcher(exports);\n    WorkerComm.createWorkerComm(_ExtensionsWorker, exports);\n    /**\n     * To communicate between the ExtensionsWorker and Phoenix, the following methods are available:\n     * `loadScriptInWorker`, `execPeer`, `setExecHandler`, `triggerPeer` and other APIs described\n     * in module `worker/WorkerComm`.\n     * The above methods can be used with either `ExtensionsWorker` reference within Phoenix\n     * or the global `WorkerComm` reference within the Indexing worker. (See example below.)\n     *\n     * See [worker/WorkerComm](WorkerComm-API) for detailed API docs.\n     *\n     * @example <caption>To Execute a named function `extensionName.sayHello` in the worker from phoenix</caption>\n     * // in my_worker.js. It is a good practice to prefix your `[extensionName]`\n     * // to exec handler to prevent name collisions with other extensions.\n     * WorkerComm.setExecHandler(\"extensionName.sayHello\", (arg)=>{\n     *     console.log(\"hello from worker \", arg); // prints \"hello from worker phoenix\"\n     *     return \"Hello Phoenix\";\n     *   });\n     * // In Phoenix/extension\n     * let workerMessage = await ExtensionsWorker.execPeer(\"extensionName.sayHello\", \"phoenix\");\n     * console.log(workerMessage); // prints \"Hello Phoenix\"\n     * @name WorkerComm-APIS\n     */\n});\n"],"file":"ExtensionsWorker.js"}