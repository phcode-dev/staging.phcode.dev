{"version":3,"sources":["search/FileFilters.js"],"names":["define","require","exports","module","DropdownButton","Strings","PreferencesManager","ProjectManager","WorkspaceManager","FindUtils","PREFS_CURRENT_FILTER_STRING","FILTER_TYPE_EXCLUDE","FILTER_TYPE_INCLUDE","FILTER_TYPE_NO_FILTER","currentFilter","currentFilterType","_picker","$filterContainer","_filterStringToPatternArray","str","randomDigits","Math","floor","random","toString","patterns","replaceAll","split","finalPatterns","i","length","toLowerCase","push","getActiveFilter","isActive","pattern","ignores","getViewState","compile","setActiveFilter","filter","filterType","setViewState","_updatePicker","notifyFileFiltersChanged","userFilterString","userFilter","subStringFilter","wrappedGlobs","glob","startsWith","slice","includes","isMatch","window","fs","utils","picomatch","dot","relativeOrFullPath","subStr","filterPath","compiledFilter","fullPath","isWithinProject","relativePath","makeProjectRelativeIfPossible","filterFileList","files","f","getPathsMatchingFilter","filePaths","setButtonLabel","NO_FILE_FILTER","addClass","INCLUDE_FILE_FILTER","removeClass","EXCLUDE_FILE_FILTER","find","hide","recomputeLayout","console","error","createFilterPicker","CLEAR_FILE_FILTER","undefined","cssClasses","$inputElem","$","FILTER_PLACEHOLDER","brackets","platform","FILTER_HISTORY_TOOLTIP_MAC","FILTER_HISTORY_TOOLTIP","val","on","event","item","itemIndex","focus","$button","showDropdown","closeDropdown"],"mappings":"AAyBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,MAAMC,eAAqBH,QAAQ,0BAA0BG,eACzDC,QAAqBJ,QAAQ,WAC7BK,mBAAqBL,QAAQ,kCAC7BM,eAAqBN,QAAQ,0BAC7BO,iBAAwBP,QAAQ,yBAChCQ,UAAqBR,QAAQ,oBAE3BS,4BAA8B,sCAE9BC,oBAAsB,gBACxBC,oBAAsB,gBACtBC,sBAAwB,WAE5B,IAAIC,cAAgB,KAChBC,kBAAoBF,sBAKpBG,QAAW,KAIXC,iBAAmB,KAOvB,SAASC,4BAA4BC,KACjC,MAAMC,aAAeC,KAAKC,MAAM,IAA6B,IAAhBD,KAAKE,UAAuBC,WAEzE,IAAIC,UADJN,IAAMA,IAAIO,WAAW,MAAON,eACTO,MAAM,KACrBC,cAAgB,GACpB,IAAI,IAAIC,EAAE,EAAGA,EAAEJ,SAASK,OAAQD,IAC5BJ,SAASI,GAAGJ,SAASI,GAAGH,WAAWN,aAAc,KACjDK,SAASI,GAAKJ,SAASI,GAAGE,cACvBN,SAASI,IACRD,cAAcI,KAAKP,SAASI,IAGpC,OAAOD,cAQX,SAASK,kBACL,GAAGnB,cACC,OAAOA,cAEX,GAAGC,oBAAsBF,sBACrB,MAAO,CACHqB,SAAU,KAAI,EACdC,QAAS,GACTC,QAAS,KAAI,GAGrB,MAAMD,QAAU7B,mBAAmB+B,aAAa3B,8BAAgC,GAEhF,OADAI,cAAgBwB,QAAQH,SAW5B,SAASI,gBAAgBC,OAAQC,YACR,iBAAXD,SACNA,OAASF,QAAQE,SAErB1B,cAAgB0B,OAChBlC,mBAAmBoC,aAAahC,4BAA6B8B,OAAOL,SACjEM,aACC1B,kBAAoB0B,WACpBE,iBAEJlC,UAAUmC,2BAUd,SAASN,QAAQO,kBAEb,MAAMC,WAAa5B,4BAA4B2B,kBACzCE,gBAAkB,GAClBC,aAAe,GACrB,IAAI,IAAIC,QAAQH,WAETG,KAAKC,WAAW,MACfF,aAAahB,KAAKiB,KAAKE,MAAM,IAI7BF,KAAKC,WAAW,OAASD,KAAKC,WAAW,MACzCF,aAAahB,WAAWiB,QAKzBA,KAAKG,SAAS,MAAQH,KAAKG,SAAS,MACnCH,KAAKG,SAAS,MAAQH,KAAKG,SAAS,MACpCH,KAAKG,SAAS,OAASH,KAAKG,SAAS,MACjCH,KAAKC,WAAW,SAGhBD,WAAaA,QAEjBD,aAAahB,KAAKiB,OAGlBF,gBAAgBf,KAAKiB,MAI7B,MAAMI,QAAUC,OAAOC,GAAGC,MAAMC,UAAUT,aAAc,CACpDU,KAAK,IAET,SAAStB,QAAQuB,oBAGb,GADAA,mBAAqBA,mBAAmB5B,eACpCe,WAAWhB,OAEX,OAAO,EAEX,IAAI,IAAI8B,UAAUb,gBACd,GAAGY,mBAAmBP,SAASQ,QAC3B,OAAO,EAGf,OAAOP,QAAQM,oBAEnB,MAAO,CACHxB,QAASU,iBACTX,SAAU,WACN,QAASY,WAAWhB,QAExBM,QAASA,SAcjB,SAASyB,WAAWC,eAAgBC,UAChC,IAAKD,eACD,OAAO,EAGX,IAAKvD,eAAeyD,gBAAgBD,UAChC,OAAO,EAEX,MAAME,aAAe1D,eAAe2D,8BAA8BH,UAClE,OAAQhD,mBACR,KAAKH,oBACD,OAAGkD,eAAe5B,YACP4B,eAAe1B,QAAQ6B,cAGtC,KAAKtD,oBACD,OAAGmD,eAAe5B,aACN4B,eAAe1B,QAAQ6B,cAGvC,QAAS,OAAO,GAWpB,SAASE,eAAeL,eAAgBM,OACpC,OAAKN,eAIEM,MAAM5B,OAAO,SAAU6B,GAC1B,IAAK9D,eAAeyD,gBAAgBK,EAAEN,UAClC,OAAO,EAEX,MAAME,aAAe1D,eAAe2D,8BAA8BG,EAAEN,UACpE,OAAQhD,mBACR,KAAKH,oBACD,OAAGkD,eAAe5B,YACP4B,eAAe1B,QAAQ6B,cAGtC,KAAKtD,oBACD,OAAGmD,eAAe5B,aACN4B,eAAe1B,QAAQ6B,cAGvC,QAAS,OAAO,KAnBTG,MA+Bf,SAASE,uBAAuBR,eAAgBS,WAC5C,OAAKT,eAIES,UAAU/B,OAAO,SAAUuB,UAC9B,IAAKxD,eAAeyD,gBAAgBD,UAChC,OAAO,EAEX,MAAME,aAAe1D,eAAe2D,8BAA8BH,UAClE,OAAQhD,mBACR,KAAKH,oBACD,OAAGkD,eAAe5B,YACP4B,eAAe1B,QAAQ6B,cAGtC,KAAKtD,oBACD,OAAGmD,eAAe5B,aACN4B,eAAe1B,QAAQ6B,cAGvC,QAAS,OAAO,KAnBTM,UAwBf,SAAS5B,gBACL,GAAI3B,QAAJ,CAIA,OAAQD,mBACR,KAAKF,sBACDG,QAAQwD,eAAenE,QAAQoE,gBAC/BxD,kBAAoBA,iBAAiByD,SAAS,iBAC9C,MACJ,KAAK9D,oBACDI,QAAQwD,eAAenE,QAAQsE,qBAC/B1D,kBAAoBA,iBAAiB2D,YAAY,iBACjD,MACJ,KAAKjE,oBACDK,QAAQwD,eAAenE,QAAQwE,qBAC/B5D,kBAAoBA,iBAAiB2D,YAAY,iBAGjD3D,mBAGJA,iBAAiB6D,KAAK,iBAAiBC,OACvCvE,iBAAiBwE,wBArBbC,QAAQC,MAAM,sCAgCtB,SAASC,qBACLnE,QAAU,IAAIZ,eAAe,GAAI,CAC7BC,QAAQ+E,kBACR/E,QAAQsE,oBACRtE,QAAQwE,0BACTQ,EAAW,CACVC,WAAY,gCAShB,MAAMC,YAPNtE,iBAAmBuE,mJAEHnF,QAAQoF,qFAEQ,QAAtBC,SAASC,SAAqBtF,QAAQuF,2BAA6BvF,QAAQwF,kIAGjDf,KAAK,qBA6BzC,OA5BGhE,eACCyE,WAAWO,IAAIhF,cAAcqB,SAEjClB,iBAAiB6D,KAAK,qBAAqBiB,GAAG,QAAS,WACnDxD,gBAAgBgD,WAAWO,SAG/BnD,gBAEA3B,QAAQ+E,GAAG,SAAU,SAAUC,MAAOC,KAAMC,WACpCD,OAAS5F,QAAQ+E,mBACjBrE,kBAAoBF,sBACpB0B,gBAAgBgD,WAAWO,OAC3BnD,gBACA6C,EAAE,cAAcW,SACTF,OAAS5F,QAAQsE,qBACxB5D,kBAAoBH,oBACpB2B,gBAAgBgD,WAAWO,OAC3BnD,gBACA1B,iBAAiB6D,KAAK,qBAAqBqB,SACrCF,OAAS5F,QAAQwE,sBACvB9D,kBAAoBJ,oBACpB4B,gBAAgBgD,WAAWO,OAC3BnD,gBACA1B,iBAAiB6D,KAAK,qBAAqBqB,WAI5C,CAACnF,QAAQoF,QAASnF,kBAM7B,SAASoF,eACDrF,SACAA,QAAQqF,eAOhB,SAASC,gBACDtF,SACAA,QAAQsF,gBAKhBpG,QAAQmG,aAAqBA,aAC7BnG,QAAQoG,cAAqBA,cAE7BpG,QAAQiF,mBAAyBA,mBACjCjF,QAAQ+B,gBAAyBA,gBACjC/B,QAAQqC,gBAAyBA,gBACjCrC,QAAQoC,QAAyBA,QACjCpC,QAAQ2D,WAAyBA,WACjC3D,QAAQiE,eAAyBA,eACjCjE,QAAQoE,uBAAyBA,uBAGjCpE,QAAQS,oBAAsBA,oBAC9BT,QAAQU,oBAAsBA,oBAC9BV,QAAQW,sBAAwBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Utilities for managing file-set filters, as used in Find in Files.\n * Includes both UI for selecting/editing filters, as well as the actual file-filtering implementation.\n */\ndefine(function (require, exports, module) {\n\n\n    const DropdownButton     = require(\"widgets/DropdownButton\").DropdownButton,\n        Strings            = require(\"strings\"),\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        ProjectManager     = require(\"project/ProjectManager\"),\n        WorkspaceManager      = require(\"view/WorkspaceManager\"),\n        FindUtils          = require(\"search/FindUtils\");\n\n    const PREFS_CURRENT_FILTER_STRING = \"FIND_IN_FILES_CURRENT_FILTER_STRING\";\n\n    const FILTER_TYPE_EXCLUDE = \"excludeFilter\",\n        FILTER_TYPE_INCLUDE = \"includeFilter\",\n        FILTER_TYPE_NO_FILTER = \"noFilter\";\n\n    let currentFilter = null,\n        currentFilterType = FILTER_TYPE_NO_FILTER;\n\n    /**\n     * @type {DropdownButton}\n     */\n    let _picker  = null;\n    /**\n     * @type { jQuery }\n     */\n    let $filterContainer = null;\n\n    /**\n     * `*.js,*\\,*.css` to ['*.js', '**.css']\n     * @param {string} str\n     * @private\n     */\n    function _filterStringToPatternArray(str) {\n        const randomDigits = Math.floor(1000000000 + Math.random() * 9000000000).toString();\n        str = str.replaceAll(\"\\\\,\", randomDigits);\n        let patterns = str.split(\",\");\n        let finalPatterns = [];\n        for(let i=0; i<patterns.length; i++){\n            patterns[i]=patterns[i].replaceAll(randomDigits, \",\");\n            patterns[i] = patterns[i].toLowerCase();\n            if(patterns[i]){\n                finalPatterns.push(patterns[i]);\n            }\n        }\n        return finalPatterns;\n    }\n\n    /**\n     * A search filter is an array of one or more glob strings. The filter must be 'compiled' via compile()\n     * before passing to filterPath()/filterFileList().\n     * @return {{pattern:string, isActive: function, ignores: function}} a globeFilter filter that can be passed to filterPath()/filterFileList().\n     */\n    function getActiveFilter() {\n        if(currentFilter){\n            return currentFilter;\n        }\n        if(currentFilterType === FILTER_TYPE_NO_FILTER) {\n            return {\n                isActive: ()=>false,\n                pattern: \"\",\n                ignores: ()=>false\n            };\n        }\n        const pattern = PreferencesManager.getViewState(PREFS_CURRENT_FILTER_STRING) || \"\";\n        currentFilter = compile(pattern);\n        return currentFilter;\n    }\n\n    /**\n     * Sets and save the index of the active filter. Automatically set when editFilter() is completed.\n     * If no filter is passed in, then clear the last active filter index by setting it to -1.\n     *\n     * @param {{pattern:string, isActive: function, ignores: function}|string} filter a globeFilter filter that can be passed to filterPath()/filterFileList().\n     * @param {string} [filterType] - optional, one of FileFilters.FILTER_TYPE_*.\n     */\n    function setActiveFilter(filter, filterType) {\n        if(typeof filter === 'string'){\n            filter = compile(filter);\n        }\n        currentFilter = filter;\n        PreferencesManager.setViewState(PREFS_CURRENT_FILTER_STRING, filter.pattern);\n        if(filterType) {\n            currentFilterType = filterType;\n            _updatePicker();\n        }\n        FindUtils.notifyFileFiltersChanged();\n    }\n\n\n    /**\n     * Converts a user-specified filter object (as chosen in picker or retrieved from getFilters()) to a 'compiled' form\n     * that can be used with filterPath()/filterFileList().\n     * @param {string} userFilterString\n     * @return {{pattern:string, isActive: function, ignores: function}} a globeFilter filter that can be passed to filterPath()/filterFileList().\n     */\n    function compile(userFilterString) {\n        // Automatically apply transforms make writing simple filters more intuitive\n        const userFilter = _filterStringToPatternArray(userFilterString); // this wil lower case too\n        const subStringFilter = [];\n        const wrappedGlobs = [];\n        for(let glob of userFilter){\n            // ./ will only match in present project root, this is as an escape for the above transform we apply\n            if(glob.startsWith(\"./\")) {\n                wrappedGlobs.push(glob.slice(2)); // ./*.txt to *.txt\n                continue;\n            }\n            // *.js -> **/*.js; *.config.js -> **/*.config.js; ?.js -> **/?.js;\n            if (glob.startsWith(\"*.\") || glob.startsWith(\"?.\")) {\n                wrappedGlobs.push(`**/${glob}`); // **/*.txt\n                continue;\n            }\n\n            // if it's a glob string, add to the glob list\n            if(glob.includes(\"?\") || glob.includes(\"*\") ||\n                glob.includes(\"[\") || glob.includes(\"]\") ||\n                glob.includes(\"\\\\\") || glob.includes(\"!\")) {\n                if(!glob.startsWith(\"**/\")) {\n                    // make it eazier to search as the user may not know the exact file name and only a part,\n                    // in which case we dont want him to type **/ every time to start\n                    glob = `**/${glob}`;\n                }\n                wrappedGlobs.push(glob);\n            } else {\n                // if not a glob string, we should do a string.includes search to match any substring.\n                subStringFilter.push(glob);\n            }\n        }\n\n        const isMatch = window.fs.utils.picomatch(wrappedGlobs, {\n            dot: true\n        });\n        function ignores(relativeOrFullPath) {\n            // path search is not case-sensitive\n            relativeOrFullPath = relativeOrFullPath.toLowerCase();\n            if(!userFilter.length){\n                // no filter, ignore nothing.\n                return false;\n            }\n            for(let subStr of subStringFilter){\n                if(relativeOrFullPath.includes(subStr)){\n                    return true;\n                }\n            }\n            return isMatch(relativeOrFullPath);\n        }\n        return {\n            pattern: userFilterString,\n            isActive: function () {\n                return !!userFilter.length;\n            },\n            ignores: ignores\n        };\n    }\n\n\n    /**\n     * Returns false if the given path matches any of the exclusion globs in the given filter. Returns true\n     * if the path does not match any of the globs. If filtering many paths at once, use filterFileList()\n     * for much better performance.\n     *\n     * @param {object} compiledFilter  'Compiled' filter object as returned by compile(), or null to no-op\n     * @param {!string} fullPath\n     * @return {boolean}\n     */\n    function filterPath(compiledFilter, fullPath) {\n        if (!compiledFilter) {\n            return true;\n        }\n\n        if (!ProjectManager.isWithinProject(fullPath)){\n            return false;\n        }\n        const relativePath = ProjectManager.makeProjectRelativeIfPossible(fullPath);\n        switch (currentFilterType) {\n        case FILTER_TYPE_INCLUDE:\n            if(compiledFilter.isActive()){\n                return compiledFilter.ignores(relativePath);\n            }\n            return true;\n        case FILTER_TYPE_EXCLUDE:\n            if(compiledFilter.isActive()){\n                return !compiledFilter.ignores(relativePath);\n            }\n            return true;\n        default: return true; // no files excluded\n        }\n    }\n\n    /**\n     * Returns a copy of 'files' filtered to just those that don't match any of the exclusion globs in the filter.\n     *\n     * @param {object} compiledFilter  'Compiled' filter object as returned by compile(), or null to no-op\n     * @param {!Array.<File>} files\n     * @return {!Array.<File>}\n     */\n    function filterFileList(compiledFilter, files) {\n        if (!compiledFilter) {\n            return files;\n        }\n\n        return files.filter(function (f) {\n            if (!ProjectManager.isWithinProject(f.fullPath)){\n                return false;\n            }\n            const relativePath = ProjectManager.makeProjectRelativeIfPossible(f.fullPath);\n            switch (currentFilterType) {\n            case FILTER_TYPE_INCLUDE:\n                if(compiledFilter.isActive()){\n                    return compiledFilter.ignores(relativePath);\n                }\n                return true;\n            case FILTER_TYPE_EXCLUDE:\n                if(compiledFilter.isActive()){\n                    return !compiledFilter.ignores(relativePath);\n                }\n                return true;\n            default: return true; // no files excluded\n            }\n        });\n    }\n\n    /**\n     * Returns a copy of 'file path' strings that match any of the exclusion globs in the filter.\n     *\n     * @param {object} compiledFilter  'Compiled' filter object as returned by compile(), or null to no-op\n     * @param {!Array.<string>} An array with a list of full file paths that matches atleast one of the filter.\n     * @return {!Array.<string>}\n     */\n    function getPathsMatchingFilter(compiledFilter, filePaths) {\n        if (!compiledFilter) {\n            return filePaths;\n        }\n\n        return filePaths.filter(function (fullPath) {\n            if (!ProjectManager.isWithinProject(fullPath)){\n                return false;\n            }\n            const relativePath = ProjectManager.makeProjectRelativeIfPossible(fullPath);\n            switch (currentFilterType) {\n            case FILTER_TYPE_INCLUDE:\n                if(compiledFilter.isActive()){\n                    return compiledFilter.ignores(relativePath);\n                }\n                return true;\n            case FILTER_TYPE_EXCLUDE:\n                if(compiledFilter.isActive()){\n                    return !compiledFilter.ignores(relativePath);\n                }\n                return true;\n            default: return true; // no files excluded\n            }\n        });\n    }\n\n    function _updatePicker() {\n        if(!_picker){\n            console.error(\"No file filter picker ui to update\");\n            return;\n        }\n        switch (currentFilterType) {\n        case FILTER_TYPE_NO_FILTER:\n            _picker.setButtonLabel(Strings.NO_FILE_FILTER);\n            $filterContainer && $filterContainer.addClass(\"forced-hidden\");\n            break;\n        case FILTER_TYPE_INCLUDE:\n            _picker.setButtonLabel(Strings.INCLUDE_FILE_FILTER);\n            $filterContainer && $filterContainer.removeClass(\"forced-hidden\");\n            break;\n        case FILTER_TYPE_EXCLUDE:\n            _picker.setButtonLabel(Strings.EXCLUDE_FILE_FILTER);\n            $filterContainer && $filterContainer.removeClass(\"forced-hidden\");\n            break;\n        }\n        if(!$filterContainer) {\n            return;\n        }\n        $filterContainer.find(\".error-filter\").hide();\n        WorkspaceManager.recomputeLayout();\n    }\n\n    /**\n     * Creates a UI element for selecting a filter, populated with a list of recently used filters, an option to\n     * edit the selected filter and another option to create a new filter. The client should call commitDropdown()\n     * when the UI containing the filter picker is confirmed (which updates the MRU order) and then use the\n     * returned filter object as needed.\n     *\n     * @return {[jQueryObject]} Picker UI.\n     */\n    function createFilterPicker() {\n        _picker = new DropdownButton(\"\", [\n            Strings.CLEAR_FILE_FILTER,\n            Strings.INCLUDE_FILE_FILTER,\n            Strings.EXCLUDE_FILE_FILTER\n        ], undefined, {\n            cssClasses: \"file-filter-picker no-focus\"\n        });\n        $filterContainer = $(`<div class=\"filter-container\">\n        <input autocomplete=\"off\" spellcheck=\"false\" type=\"text\" id=\"fif-filter-input\"\n         placeholder=\"${Strings.FILTER_PLACEHOLDER}\"/>\n        <div class=\"filter-dropdown-icon\"\n         title=\"${brackets.platform === \"mac\" ? Strings.FILTER_HISTORY_TOOLTIP_MAC : Strings.FILTER_HISTORY_TOOLTIP}\">\n            </div><div class=\"error-filter\"></div><span id=\"filter-counter\"></span>\n        </div>`);\n        const $inputElem = $filterContainer.find(\"#fif-filter-input\");\n        if(currentFilter){\n            $inputElem.val(currentFilter.pattern);\n        }\n        $filterContainer.find(\"#fif-filter-input\").on('input', function() {\n            setActiveFilter($inputElem.val());\n        });\n\n        _updatePicker();\n\n        _picker.on(\"select\", function (event, item, itemIndex) {\n            if (item === Strings.CLEAR_FILE_FILTER) {\n                currentFilterType = FILTER_TYPE_NO_FILTER;\n                setActiveFilter($inputElem.val());\n                _updatePicker();\n                $(\"#find-what\").focus();\n            } else if (item === Strings.INCLUDE_FILE_FILTER) {\n                currentFilterType = FILTER_TYPE_INCLUDE;\n                setActiveFilter($inputElem.val());\n                _updatePicker();\n                $filterContainer.find(\"#fif-filter-input\").focus();\n            } else if(item === Strings.EXCLUDE_FILE_FILTER) {\n                currentFilterType = FILTER_TYPE_EXCLUDE;\n                setActiveFilter($inputElem.val());\n                _updatePicker();\n                $filterContainer.find(\"#fif-filter-input\").focus();\n            }\n        });\n\n        return [_picker.$button, $filterContainer];\n    }\n\n    /**\n     * Allows unit tests to open the file filter dropdown list.\n     */\n    function showDropdown() {\n        if (_picker) {\n            _picker.showDropdown();\n        }\n    }\n\n    /**\n     * Allows unit tests to close the file filter dropdown list.\n     */\n    function closeDropdown() {\n        if (_picker) {\n            _picker.closeDropdown();\n        }\n    }\n\n    // For unit tests only\n    exports.showDropdown       = showDropdown;\n    exports.closeDropdown      = closeDropdown;\n\n    exports.createFilterPicker     = createFilterPicker;\n    exports.getActiveFilter        = getActiveFilter;\n    exports.setActiveFilter        = setActiveFilter;\n    exports.compile                = compile;\n    exports.filterPath             = filterPath;\n    exports.filterFileList         = filterFileList;\n    exports.getPathsMatchingFilter = getPathsMatchingFilter;\n\n    // filter types\n    exports.FILTER_TYPE_EXCLUDE = FILTER_TYPE_EXCLUDE;\n    exports.FILTER_TYPE_INCLUDE = FILTER_TYPE_INCLUDE;\n    exports.FILTER_TYPE_NO_FILTER = FILTER_TYPE_NO_FILTER;\n});\n"],"file":"FileFilters.js"}