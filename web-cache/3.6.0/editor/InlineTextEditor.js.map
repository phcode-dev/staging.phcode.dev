{"version":3,"sources":["editor/InlineTextEditor.js"],"names":["define","require","exports","module","CodeMirror","EventDispatcher","DocumentManager","EditorManager","CommandManager","Commands","InlineWidget","KeyEvent","_showDirtyIndicator","$indicatorDiv","isDirty","css","_dirtyFlagChangeHandler","event","doc","$dirtyIndicators","$indicator","$","each","index","indicator","this","data","file","fullPath","InlineTextEditor","call","editor","handleKeyDown","bind","htmlContent","addEventListener","_syncGutterWidths","hostEditor","allHostedEditors","getInlineEditors","push","maxWidth","forEach","$gutter","_codeMirror","getGutterElement","find","curWidth","width","length","setOption","getOption","prototype","Object","create","constructor","parentClass","$wrapper","$editorHolder","$header","$filename","onClosed","apply","arguments","setInlineContent","removeEventListener","sizeInlineWidgetToContents","onAdded","self","refresh","on","info","window","setTimeout","focus","getFocusedEditor","hasFocus","e","keyCode","DOM_VK_ESCAPE","getSelections","commands","singleSelection","stopImmediatePropagation","startLine","endLine","off","destroy","removeAttr","html","range","$dirtyIndicatorDiv","addClass","$lineNumber","append","name","attr","execute","FILE_OPEN","done","getCurrentFullEditor","setCursorPos","inlineInfo","createInlineEditorForDocument","get","_updateLineRange","isFullyVisible","_onLostContent","_startLine","getFirstVisibleLine","_endLine","getLastVisibleLine","_lineCount","text","load","appendTo","$htmlContent","onParentShown","close","on_duringInit"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n\n// FUTURE: Merge part (or all) of this class with MultiRangeInlineEditor\n\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules\n    var CodeMirror          = require(\"thirdparty/CodeMirror/lib/codemirror\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        DocumentManager     = require(\"document/DocumentManager\"),\n        EditorManager       = require(\"editor/EditorManager\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        Commands            = require(\"command/Commands\"),\n        InlineWidget        = require(\"editor/InlineWidget\").InlineWidget,\n        KeyEvent            = require(\"utils/KeyEvent\");\n\n    /**\n     * Shows or hides the dirty indicator\n     * @private\n     */\n    function _showDirtyIndicator($indicatorDiv, isDirty) {\n        // Show or hide the dirty indicator by adjusting\n        // the width of the div.\n        $indicatorDiv.css(\"width\", isDirty ? 16 : 0);\n    }\n\n    /**\n     * Respond to dirty flag change event. If the dirty flag is associated with an inline editor,\n     * show (or hide) the dirty indicator.\n     * @private\n     */\n    function _dirtyFlagChangeHandler(event, doc) {\n        var $dirtyIndicators = $(\".inline-text-editor .dirty-indicator\"),\n            $indicator;\n\n        $dirtyIndicators.each(function (index, indicator) {\n            $indicator = $(this);\n            if ($indicator.data(\"fullPath\") === doc.file.fullPath) {\n                _showDirtyIndicator($indicator, doc.isDirty);\n            }\n        });\n    }\n\n    /**\n     * @constructor\n     * @extends {InlineWidget}\n     */\n    function InlineTextEditor() {\n        InlineWidget.call(this);\n\n        this.editor = null;\n\n        // We need to set this as a capture handler so CodeMirror doesn't handle Esc before we see it.\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.htmlContent.addEventListener(\"keydown\", this.handleKeyDown, true);\n    }\n    InlineTextEditor.prototype = Object.create(InlineWidget.prototype);\n    InlineTextEditor.prototype.constructor = InlineTextEditor;\n    InlineTextEditor.prototype.parentClass = InlineWidget.prototype;\n\n    InlineTextEditor.prototype.$wrapper = null;\n    /** @type {Editor} */\n    InlineTextEditor.prototype.editor = null;\n    InlineTextEditor.prototype.$editorHolder = null;\n    InlineTextEditor.prototype.$header = null;\n    InlineTextEditor.prototype.$filename = null;\n\n   /**\n     * Given a host editor and its inline editors, find the widest gutter and make all the others match\n     * @param {!Editor} hostEditor Host editor containing all the inline editors to sync\n     * @private\n     */\n    function _syncGutterWidths(hostEditor) {\n        var allHostedEditors = EditorManager.getInlineEditors(hostEditor);\n\n        // add the host itself to the list too\n        allHostedEditors.push(hostEditor);\n\n        var maxWidth = 0;\n        allHostedEditors.forEach(function (editor) {\n            var $gutter = $(editor._codeMirror.getGutterElement()).find(\".CodeMirror-linenumbers\");\n            $gutter.css(\"min-width\", \"\");\n            var curWidth = $gutter.width();\n            if (curWidth > maxWidth) {\n                maxWidth = curWidth;\n            }\n        });\n\n        if (allHostedEditors.length === 1) {\n            //There's only the host, just refresh the gutter\n            allHostedEditors[0]._codeMirror.setOption(\"gutters\", allHostedEditors[0]._codeMirror.getOption(\"gutters\"));\n            return;\n        }\n\n        maxWidth = maxWidth + \"px\";\n        allHostedEditors.forEach(function (editor) {\n            $(editor._codeMirror.getGutterElement()).find(\".CodeMirror-linenumbers\").css(\"min-width\", maxWidth);\n\n            // Force CodeMirror to refresh the gutter\n            editor._codeMirror.setOption(\"gutters\", editor._codeMirror.getOption(\"gutters\"));\n        });\n    }\n\n    /**\n     * Called any time inline was closed, whether manually (via close()) or automatically\n     */\n    InlineTextEditor.prototype.onClosed = function () {\n        InlineTextEditor.prototype.parentClass.onClosed.apply(this, arguments);\n\n        _syncGutterWidths(this.hostEditor);\n\n        // Destroy the inline editor.\n        this.setInlineContent(null);\n        this.htmlContent.removeEventListener(\"keydown\", this.handleKeyDown, true);\n    };\n\n    /**\n     * Update the inline editor's height when the number of lines change. The\n     * base implementation of this method does nothing.\n     */\n    InlineTextEditor.prototype.sizeInlineWidgetToContents = function () {\n        // brackets_codemirror_overrides.css adds height:auto to CodeMirror\n        // Inline editors themselves do not need to be sized, but layouts like\n        // the one used in CSSInlineEditor do need some manual layout.\n    };\n\n    /**\n     * Some tasks have to wait until we've been parented into the outer editor\n     * @param {string} the inline ID that is generated by CodeMirror after the widget that holds the inline\n     *  editor is constructed and added to the DOM\n     */\n    InlineTextEditor.prototype.onAdded = function () {\n        var self = this;\n\n        InlineTextEditor.prototype.parentClass.onAdded.apply(this, arguments);\n\n        if (this.editor) {\n            this.editor.refresh();\n        }\n\n        // Update display of inline editors when the hostEditor signals a redraw\n        CodeMirror.on(this.info, \"redraw\", function () {\n            // At the point where we get the redraw, CodeMirror might not yet have actually\n            // re-added the widget to the DOM. This is filed as https://github.com/codemirror/CodeMirror/issues/1226.\n            // For now, we can work around it by doing the refresh on a setTimeout().\n            window.setTimeout(function () {\n                if (self.editor) {\n                    self.editor.refresh();\n                }\n            }, 0);\n        });\n\n        _syncGutterWidths(this.hostEditor);\n\n        if (this.editor) {\n            this.editor.focus();\n        }\n    };\n\n    /**\n     * @return {?Editor} If an Editor within this inline editor has focus, returns it. Otherwise returns null.\n     */\n    InlineTextEditor.prototype.getFocusedEditor = function () {\n        if (this.editor && this.editor.hasFocus()) {\n            return this.editor;\n        }\n        return null;\n    };\n\n    /**\n     * @private\n     * Make sure that if we want to handle Esc to cancel a multiple selection, we don't let it bubble\n     * up to InlineWidget, which will close the edit.\n     */\n    InlineTextEditor.prototype.handleKeyDown = function (e) {\n        if (e.keyCode === KeyEvent.DOM_VK_ESCAPE && this.editor && this.editor.getSelections().length > 1) {\n            CodeMirror.commands.singleSelection(this.editor._codeMirror);\n            e.stopImmediatePropagation();\n        }\n    };\n\n    /**\n     * Sets the document and range to show in the inline editor, or null to destroy the current editor and leave\n     * the content blank.\n     * @param {Document} doc The document to show, or null to show nothing\n     * @param {number} startLine The first line of text in `doc` to show in inline editor. Ignored if doc is null.\n     * @param {number} endLine The last line of text in `doc` to show in inline editor. Ignored if doc is null.\n     */\n    InlineTextEditor.prototype.setInlineContent = function (doc, startLine, endLine) {\n        var self = this;\n\n        // Destroy the previous editor if we had one and clear out the filename info.\n        if (this.editor) {\n            this.editor.off(\".InlineTextEditor\");\n            this.editor.destroy(); // remove from DOM and release ref on Document\n            this.editor = null;\n            this.$filename.off(\".InlineTextEditor\")\n                .removeAttr(\"title\");\n            this.$filename.html(\"\");\n        }\n\n        if (!doc) {\n            return;\n        }\n\n        var range = {\n            startLine: startLine,\n            endLine: endLine\n        };\n\n        // dirty indicator, with file path stored on it\n        var $dirtyIndicatorDiv = $(\"<div/>\")\n            .addClass(\"dirty-indicator\")\n            .html(\"&bull;\")\n            .width(0); // initialize indicator as hidden\n        $dirtyIndicatorDiv.data(\"fullPath\", doc.file.fullPath);\n\n        this.$lineNumber = $(\"<span class='line-number'/>\");\n\n        // update contents of filename link\n        this.$filename.append($dirtyIndicatorDiv)\n            .append(doc.file.name + \" : \")\n            .append(this.$lineNumber)\n            .attr(\"title\", doc.file.fullPath);\n\n        // clicking filename jumps to full editor view\n        this.$filename.on(\"click.InlineTextEditor\", function () {\n            CommandManager.execute(Commands.FILE_OPEN, { fullPath: doc.file.fullPath })\n                .done(function () {\n                    EditorManager.getCurrentFullEditor().setCursorPos(startLine, 0, true);\n                });\n        });\n\n        var inlineInfo = EditorManager.createInlineEditorForDocument(doc, range, this.$editorHolder.get(0));\n        this.editor = inlineInfo.editor;\n\n        // Init line number display\n        this._updateLineRange(inlineInfo.editor);\n\n        // Always update the widget height when an inline editor completes a\n        // display update\n        this.editor.on(\"update.InlineTextEditor\", function (event, editor) {\n            self.sizeInlineWidgetToContents();\n        });\n\n        // Size editor to content whenever text changes (via edits here or any\n        // other view of the doc: Editor fires \"change\" any time its text\n        // changes, regardless of origin)\n        this.editor.on(\"change.InlineTextEditor\", function (event, editor) {\n            if (self.hostEditor.isFullyVisible()) {\n                self.sizeInlineWidgetToContents();\n                self._updateLineRange(editor);\n            }\n        });\n\n        // If Document's file is deleted, or Editor loses sync with Document, delegate to this._onLostContent()\n        this.editor.on(\"lostContent.InlineTextEditor\", function () {\n            self._onLostContent.apply(self, arguments);\n        });\n\n        // set dirty indicator state\n        _showDirtyIndicator($dirtyIndicatorDiv, doc.isDirty);\n    };\n\n    /**\n     * Updates start line display.\n     * @param {Editor} editor\n     */\n    InlineTextEditor.prototype._updateLineRange = function (editor) {\n        this._startLine = editor.getFirstVisibleLine();\n        this._endLine = editor.getLastVisibleLine();\n        this._lineCount = this._endLine - this._startLine;\n\n        this.$lineNumber.text(this._startLine + 1);\n    };\n\n    /**\n     * @param {Editor} hostEditor\n     */\n    InlineTextEditor.prototype.load = function (hostEditor) {\n        InlineTextEditor.prototype.parentClass.load.apply(this, arguments);\n\n        // We don't create the actual editor here--that will happen the first time\n        // setInlineContent() is called.\n        this.$wrapper = $(\"<div/>\").addClass(\"inline-text-editor\").appendTo(this.$htmlContent);\n        this.$header = $(\"<div/>\").addClass(\"inline-editor-header\").appendTo(this.$wrapper);\n        this.$filename = $(\"<a/>\").addClass(\"filename\").appendTo(this.$header);\n        this.$editorHolder = $(\"<div/>\").addClass(\"inline-editor-holder\").appendTo(this.$wrapper);\n    };\n\n    /**\n     * Called when the editor containing the inline is made visible.\n     */\n    InlineTextEditor.prototype.onParentShown = function () {\n        InlineTextEditor.prototype.parentClass.onParentShown.apply(this, arguments);\n\n        // Refresh line number display and codemirror line number gutter\n        if (this.editor) {\n            this._updateLineRange(this.editor);\n            this.editor.refresh();\n        }\n\n        // We need to call this explicitly whenever the host editor is reshown\n        this.sizeInlineWidgetToContents();\n    };\n\n    /**\n     * If Document's file is deleted, or Editor loses sync with Document, just close\n     */\n    InlineTextEditor.prototype._onLostContent = function () {\n        // Note: this closes the entire inline widget if any one Editor loses sync. This seems\n        // better than leaving it open but suddenly removing one rule from the result list.\n        this.close();\n    };\n\n\n    // Consolidate all dirty document updates\n    // Due to circular dependencies, not safe to call on() directly\n    EventDispatcher.on_duringInit(DocumentManager, \"dirtyFlagChange\", _dirtyFlagChangeHandler);\n\n    exports.InlineTextEditor = InlineTextEditor;\n\n});\n"],"file":"InlineTextEditor.js"}