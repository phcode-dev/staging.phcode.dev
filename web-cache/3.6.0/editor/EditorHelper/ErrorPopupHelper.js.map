{"version":3,"sources":["editor/EditorHelper/ErrorPopupHelper.js"],"names":["define","require","exports","module","AnimationUtils","PopUpManager","ViewUtils","displayErrorMessageAtCursor","errorMsg","arrowBelow","cursorPos","cursorCoord","popoverRect","top","left","clip","arrowCenter","arrowLeft","self","this","POPOVER_MARGIN","POPOVER_ARROW_HALF_WIDTH","POPOVER_ARROW_HALF_BASE","_removeListeners","off","_clearMessagePopover","_$messagePopover","length","_removeMessagePopover","removePopUp","_addListeners","on","getCursorPos","_codeMirror","scrollIntoView","charCoords","$","addClass","appendTo","html","height","bottom","width","getElementClipSize","right","css","Math","min","max","find","margin-left","addPopUp","animateUsingClass","done"],"mappings":"AAyBAA,OAAO,SAAUC,QAASC,QAASC,QAE/B,MAAMC,eAAqBH,QAAQ,wBAC/BI,aAAeJ,QAAQ,wBACvBK,UAAYL,QAAQ,mBASxB,SAASM,4BAA4BC,UACjC,IAAIC,WAAYC,UAAWC,YAAaC,YACpCC,IAAKC,KAAMC,KAAMC,YAAaC,UAE9BC,KAAOC,KACPC,eAAiB,GACjBC,yBAA2B,GAC3BC,wBAA0BD,GAE9B,SAASE,mBACLL,KAAKM,IAAI,WAIb,SAASC,uBACDP,KAAKQ,kBAAoBR,KAAKQ,iBAAiBC,OAAS,IAExDT,KAAKQ,iBAAmB,MAE5BH,mBAKJ,SAASK,wBACDV,KAAKQ,kBACLrB,aAAawB,YAAYX,KAAKQ,kBAItC,SAASI,gBACLZ,KACKa,GAAG,cAAyBH,uBAC5BG,GAAG,gBAAyBH,uBAC5BG,GAAG,wBAAyBH,uBAC5BG,GAAG,gBAAyBH,uBAIjCV,KAAKQ,kBACLE,wBAIJlB,UAAYQ,KAAKc,eACjBd,KAAKe,YAAYC,eAAexB,WAMhCD,YAHAE,YAAcO,KAAKe,YAAYE,WAAWzB,YAGhBG,IAAM,IAGhCK,KAAKQ,iBAAmBU,EAAE,UAAUC,SAAS,mBAAmBC,SAASF,EAAE,SACtE3B,YACD2B,EAAE,UAAUC,SAAS,cAAcC,SAASpB,KAAKQ,kBAErDU,EAAE,UAAUC,SAAS,QAAQC,SAASpB,KAAKQ,kBAAkBa,KAAK/B,UAC9DC,YACA2B,EAAE,UAAUC,SAAS,cAAcC,SAASpB,KAAKQ,kBAQrDd,YAAc,CACVC,IALJA,IAAM,WAAeF,YAAYE,IAAMK,KAAKQ,iBAAiBc,SA3DxC,GA4Df7B,YAAY8B,OA5DG,GAiEjB3B,KAJJA,KAAOH,YAAYG,KAAQI,KAAKQ,iBAAiBgB,QAAU,EAKvDF,OAAQtB,KAAKQ,iBAAiBc,SAC9BE,MAAOxB,KAAKQ,iBAAiBgB,UAIjC3B,KAAOT,UAAUqC,mBAAmBP,EAAE,kBAAmBxB,cAGhDE,KAAO,EACZA,MAAQC,KAAKD,KACNC,KAAK6B,MAAQ,IACpB9B,MAAQC,KAAK6B,OAIjB1B,KAAKQ,iBAAiBmB,IAAI,CAAChC,IAAOA,IAAKC,KAAQA,OAG/CE,YAAcL,YAAYG,KAAOA,KAMjCG,WAHAD,YAAc8B,KAAKC,IAAInC,YAAY8B,MArFLrB,GAsF1ByB,KAAKE,IAAIhC,YAtFiBK,MADC,GA0F3BZ,WACAS,KAAKQ,iBAAiBuB,KAAK,eAAeJ,IAAI,CAACK,cAAejC,YAE9DC,KAAKQ,iBAAiBuB,KAAK,eAAeJ,IAAI,CAACK,cAAejC,YAIlEZ,aAAa8C,SAAShC,KAAKO,iBAAkBD,sBAAsB,GACnEK,gBAGA1B,eAAegD,kBAAkBlC,KAAKQ,iBAAiB,GAAI,eAAe2B,KAAK,WAEvEnC,KAAKQ,kBAAoBR,KAAKQ,iBAAiBC,OAAS,IACxDT,KAAKQ,iBAAiBW,SAAS,QAI/BnB,KAAKa,GAAG,gBAAiBH,uBAGzBxB,eAAegD,kBAAkBlC,KAAKQ,iBAAiB,GAAI,eAAgB,KACtE2B,KAAKzB,0BAKtB1B,QAAQK,4BAA6BA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Editor instance helpers for showing error popups. Only to be used from Editor.js.\n */\n\ndefine(function (require, exports, module) {\n\n    const AnimationUtils     = require(\"utils/AnimationUtils\"),\n        PopUpManager = require(\"widgets/PopUpManager\"),\n        ViewUtils = require(\"utils/ViewUtils\");\n    /**\n     * ****** Update actual public API doc in Editor.js *****\n     *\n     * Display temporary popover message at current cursor position. Display message above\n     * cursor if space allows, otherwise below.\n     *\n     * @param {string} errorMsg Error message to display\n     */\n    function displayErrorMessageAtCursor(errorMsg) {\n        var arrowBelow, cursorPos, cursorCoord, popoverRect,\n            top, left, clip, arrowCenter, arrowLeft,\n            // eslint-disable-next-line no-invalid-this\n            self = this,\n            POPOVER_MARGIN = 10,\n            POPOVER_ARROW_HALF_WIDTH = 10,\n            POPOVER_ARROW_HALF_BASE = POPOVER_ARROW_HALF_WIDTH + 3; // 3 is border radius\n\n        function _removeListeners() {\n            self.off(\".msgbox\");\n        }\n\n        // PopUpManager.removePopUp() callback\n        function _clearMessagePopover() {\n            if (self._$messagePopover && self._$messagePopover.length > 0) {\n                // self._$messagePopover.remove() is done by PopUpManager\n                self._$messagePopover = null;\n            }\n            _removeListeners();\n        }\n\n        // PopUpManager.removePopUp() is called either directly by this closure, or by\n        // PopUpManager as a result of another popup being invoked.\n        function _removeMessagePopover() {\n            if (self._$messagePopover) {\n                PopUpManager.removePopUp(self._$messagePopover);\n            }\n        }\n\n        function _addListeners() {\n            self\n                .on(\"blur.msgbox\",           _removeMessagePopover)\n                .on(\"change.msgbox\",         _removeMessagePopover)\n                .on(\"cursorActivity.msgbox\", _removeMessagePopover)\n                .on(\"update.msgbox\",         _removeMessagePopover);\n        }\n\n        // Only 1 message at a time\n        if (self._$messagePopover) {\n            _removeMessagePopover();\n        }\n\n        // Make sure cursor is in view\n        cursorPos = self.getCursorPos();\n        self._codeMirror.scrollIntoView(cursorPos);\n\n        // Determine if arrow is above or below\n        cursorCoord = self._codeMirror.charCoords(cursorPos);\n\n        // Assume popover height is max of 2 lines\n        arrowBelow = (cursorCoord.top > 100);\n\n        // Text is dynamic, so build popover first so we can measure final width\n        self._$messagePopover = $(\"<div/>\").addClass(\"popover-message\").appendTo($(\"body\"));\n        if (!arrowBelow) {\n            $(\"<div/>\").addClass(\"arrowAbove\").appendTo(self._$messagePopover);\n        }\n        $(\"<div/>\").addClass(\"text\").appendTo(self._$messagePopover).html(errorMsg);\n        if (arrowBelow) {\n            $(\"<div/>\").addClass(\"arrowBelow\").appendTo(self._$messagePopover);\n        }\n\n        // Estimate where to position popover.\n        top = (arrowBelow) ? cursorCoord.top - self._$messagePopover.height() - POPOVER_MARGIN\n            : cursorCoord.bottom + POPOVER_MARGIN;\n        left = cursorCoord.left - (self._$messagePopover.width() / 2);\n\n        popoverRect = {\n            top: top,\n            left: left,\n            height: self._$messagePopover.height(),\n            width: self._$messagePopover.width()\n        };\n\n        // See if popover is clipped on any side\n        clip = ViewUtils.getElementClipSize($(\"#editor-holder\"), popoverRect);\n\n        // Prevent horizontal clipping\n        if (clip.left > 0) {\n            left += clip.left;\n        } else if (clip.right > 0) {\n            left -= clip.right;\n        }\n\n        // Popover text and arrow are positioned individually\n        self._$messagePopover.css({\"top\": top, \"left\": left});\n\n        // Position popover arrow centered over/under cursor...\n        arrowCenter = cursorCoord.left - left;\n\n        // ... but don't let it slide off text box\n        arrowCenter = Math.min(popoverRect.width - POPOVER_ARROW_HALF_BASE,\n            Math.max(arrowCenter, POPOVER_ARROW_HALF_BASE));\n\n        arrowLeft = arrowCenter - POPOVER_ARROW_HALF_WIDTH;\n        if (arrowBelow) {\n            self._$messagePopover.find(\".arrowBelow\").css({\"margin-left\": arrowLeft});\n        } else {\n            self._$messagePopover.find(\".arrowAbove\").css({\"margin-left\": arrowLeft});\n        }\n\n        // Add listeners\n        PopUpManager.addPopUp(this._$messagePopover, _clearMessagePopover, true);\n        _addListeners();\n\n        // Animate open\n        AnimationUtils.animateUsingClass(self._$messagePopover[0], \"animateOpen\").done(function () {\n            // Make sure we still have a popover\n            if (self._$messagePopover && self._$messagePopover.length > 0) {\n                self._$messagePopover.addClass(\"open\");\n\n                // Don't add scroll listeners until open so we don't get event\n                // from scrolling cursor into view\n                self.on(\"scroll.msgbox\", _removeMessagePopover);\n\n                // Animate closed -- which includes delay to show message\n                AnimationUtils.animateUsingClass(self._$messagePopover[0], \"animateClose\", 6000)\n                    .done(_removeMessagePopover);\n            }\n        });\n    }\n\n    exports.displayErrorMessageAtCursor =displayErrorMessageAtCursor;\n});\n"],"file":"ErrorPopupHelper.js"}