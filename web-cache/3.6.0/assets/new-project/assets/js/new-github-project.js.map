{"version":3,"sources":["assets/new-project/assets/js/new-github-project.js"],"names":["createProjectBtn","websiteURLInput","locationInput","FLATTEN_ZIP_FIRST_LEVEL_DIR","_isValidGitHubURL","url","githubPrefix","components","replace","split","startsWith","length","_fixGitHubBrokenURL","gitSuffix","githubURL","value","queryParamTrimIndex","indexOf","substring","endsWith","RegExp","_validateGitHubURL","$","removeClass","addClass","_validateProjectLocation","window","showDirectoryPicker","location","Strings","PLEASE_SELECT_A_FOLDER","_validate","_selectFolder","newProjectExtension","showFolderSelect","then","file","fullPath","getMountDir","_createProjectClicked","zipURL","suggestedProjectName","downloadAndOpenProject","Metrics","countEvent","EVENT_TYPE","NEW_PROJECT","closeDialogue","showErrorDialogue","MISSING_FIELDS","PLEASE_FILL_ALL_REQUIRED","initGithubProject","document","getElementById","onclick","keyup"],"mappings":"AAyBA,IAAIA,iBAAkBC,gBAAiBC,cACvC,MAAMC,6BAA8B,EAEpC,SAASC,kBAAkBC,KAGvB,IAAIC,aAAe,sBACfC,YAFJF,IAAMA,IAAIG,QAAQ,MAAO,KAEJA,QAAQ,sBAAuB,IAAIC,MAAM,KAC9D,SAAIJ,IAAIK,WAAWJ,eAAuC,IAAtBC,WAAWI,QAMnD,SAASC,sBACL,IAAIN,aAAe,sBACfO,UAAY,OACZC,UAAYb,gBAAgBc,MAIhC,GAHGD,UAAUJ,WAAW,WACpBI,UAAYA,UAAUN,QAAQ,QAAS,YAEvCM,UAAUJ,WAAWJ,cACrB,OAGJ,IAAIU,oBAAuBF,UAAUG,QAAQ,MAAQ,EAAIH,UAAUG,QAAQ,KAAOH,UAAUH,OAGxFJ,YAFJO,UAAYA,UAAUI,UAAU,EAAGF,sBAERR,QAAQ,sBAAuB,IAAIC,MAAM,KAEjEK,UAAUK,SAdG,UAeZL,UAAYA,UAAUN,QAAQ,IAAIY,OAAOP,SAAkB,KAE5DN,WAAWI,OAAS,IACnBG,gCAAkCP,WAAW,MAAMA,WAAW,MAElEN,gBAAgBc,MAAQD,UAG5B,SAASO,qBAEL,IAAIP,UACJ,OAFAF,sBAEGR,kBADaH,gBAAgBc,QAE5BO,EAAErB,iBAAiBsB,YAAY,iBACxB,IAEXD,EAAErB,iBAAiBuB,SAAS,iBACrB,GAGX,SAASC,2BACL,IAAIC,OAAOC,oBAEP,OAAO,EAEX,IAAIC,SACJ,OADe1B,cAAca,QACZc,QAAQC,wBACrBR,EAAEpB,eAAesB,SAAS,iBACnB,IAEXF,EAAEpB,eAAeqB,YAAY,iBACtB,GAGX,SAASQ,YACL,OAAOV,sBACAI,2BAGX,SAASO,gBACLC,oBAAoBC,mBACfC,KAAKC,OACFlC,cAAcmC,SAAWD,KACzBlC,cAAca,MAAQqB,KAAK5B,QAAQyB,oBAAoBK,cAAe,IACtEb,6BAIZ,SAASc,wBACL,GAAGR,YAAY,CACX,IAAIjB,UACAP,WADYN,gBAAgBc,MACLP,QAAQ,sBAAuB,IAAIC,MAAM,KAChE+B,+CAAiDjC,WAAW,WAAWA,WAAW,KAClFkC,wBAA0BlC,WAAW,MAAMA,WAAW,KAC1D0B,oBAAoBS,uBAChBF,OACAtC,cAAcmC,SAAUI,qBAAsBtC,6BAC7CgC,KAAK,KACFQ,QAAQC,WAAWD,QAAQE,WAAWC,YAAa,eAAgB,kBACnEb,oBAAoBc,uBAG5Bd,oBAAoBe,kBAChBnB,QAAQoB,eACRpB,QAAQqB,0BAEhBP,QAAQC,WAAWD,QAAQE,WAAWC,YAAa,eAAgB,UAGvE,SAASK,oBACDzB,OAAOC,qBACPL,EAAE8B,SAASC,eAAe,oBAAoB7B,SAAS,iBAE3DxB,iBAAmBoD,SAASC,eAAe,oBAC3CpD,gBAAkBmD,SAASC,eAAe,mBAC1CnD,cAAgBkD,SAASC,eAAe,iBACxCrD,iBAAiBsD,QAAUf,sBAC3BjB,EAAErB,iBAAiBsD,MAAMxB,WACzB7B,cAAca,MAAQc,QAAQC,uBAC9B5B,cAAcoD,QAAUtB,cACxBD","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global newProjectExtension, Strings, Metrics*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/* jshint ignore:start */\n\nlet createProjectBtn, websiteURLInput, locationInput;\nconst FLATTEN_ZIP_FIRST_LEVEL_DIR = true;\n\nfunction _isValidGitHubURL(url) {\n    // strip trailing slash\n    url = url.replace(/\\/$/, \"\");\n    let githubPrefix = \"https://github.com/\";\n    let components = url.replace(\"https://github.com/\", '').split('/');\n    if(!url.startsWith(githubPrefix) || components.length !== 2){\n        return false;\n    }\n    return true;\n}\n\nfunction _fixGitHubBrokenURL() {\n    let githubPrefix = \"https://github.com/\",\n        gitSuffix = '.git';\n    let githubURL = websiteURLInput.value;\n    if(githubURL.startsWith(\"http:\")){\n        githubURL = githubURL.replace(\"http:\", \"https:\");\n    }\n    if(!githubURL.startsWith(githubPrefix)){\n        return;\n    }\n    // strip any query string params if present\n    let queryParamTrimIndex  = githubURL.indexOf('?') >= 0 ? githubURL.indexOf('?') : githubURL.length;\n    githubURL = githubURL.substring(0, queryParamTrimIndex);\n    // trim everything after https://github.com/orgname/repo/... to https://github.com/orgname/repo\n    let components = githubURL.replace(\"https://github.com/\", '').split('/');\n    // trim .git at the end of the name\n    if(githubURL.endsWith(gitSuffix)){\n        githubURL = githubURL.replace(new RegExp(gitSuffix + '$'), '');\n    }\n    if(components.length > 2){\n        githubURL = `https://github.com/${components[0]}/${components[1]}`;\n    }\n    websiteURLInput.value = githubURL;\n}\n\nfunction _validateGitHubURL() {\n    _fixGitHubBrokenURL();\n    let githubURL = websiteURLInput.value;\n    if(_isValidGitHubURL(githubURL)){\n        $(websiteURLInput).removeClass(\"error-border\");\n        return true;\n    }\n    $(websiteURLInput).addClass(\"error-border\");\n    return false;\n}\n\nfunction _validateProjectLocation() {\n    if(!window.showDirectoryPicker){\n        // fs access apis not present, so we will give phoenix empty location to figure out a suitable location\n        return true;\n    }\n    let location = locationInput.value;\n    if( location === Strings.PLEASE_SELECT_A_FOLDER){\n        $(locationInput).addClass(\"error-border\");\n        return false;\n    }\n    $(locationInput).removeClass(\"error-border\");\n    return true;\n}\n\nfunction _validate() {\n    return _validateGitHubURL()\n        && _validateProjectLocation();\n}\n\nfunction _selectFolder() {\n    newProjectExtension.showFolderSelect()\n        .then(file =>{\n            locationInput.fullPath = file;\n            locationInput.value = file.replace(newProjectExtension.getMountDir(), \"\");\n            _validateProjectLocation();\n        });\n}\n\nfunction _createProjectClicked() {\n    if(_validate()){\n        let githubURL = websiteURLInput.value;\n        let components = githubURL.replace(\"https://github.com/\", '').split('/');\n        let zipURL = `https://phcode.site/getGitHubZip?org=${components[0]}&repo=${components[1]}`;\n        let suggestedProjectName = `${components[0]}-${components[1]}`;\n        newProjectExtension.downloadAndOpenProject(\n            zipURL,\n            locationInput.fullPath, suggestedProjectName, FLATTEN_ZIP_FIRST_LEVEL_DIR)\n            .then(()=>{\n                Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"github.Click\", \"create.success\");\n                newProjectExtension.closeDialogue();\n            });\n    } else {\n        newProjectExtension.showErrorDialogue(\n            Strings.MISSING_FIELDS,\n            Strings.PLEASE_FILL_ALL_REQUIRED);\n    }\n    Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"github.Click\", \"create\");\n}\n\nfunction initGithubProject() {\n    if(!window.showDirectoryPicker){ // fs access apis not present\n        $(document.getElementById(\"projectLocation\")).addClass(\"forced-hidden\");\n    }\n    createProjectBtn = document.getElementById(\"createProjectBtn\");\n    websiteURLInput = document.getElementById(\"websiteURLInput\");\n    locationInput = document.getElementById(\"locationInput\");\n    createProjectBtn.onclick = _createProjectClicked;\n    $(websiteURLInput).keyup(_validate);\n    locationInput.value = Strings.PLEASE_SELECT_A_FOLDER;\n    locationInput.onclick = _selectFolder;\n    _validate();\n}\n"],"file":"new-github-project.js"}