{"version":3,"sources":["thirdparty/mustache/mustache.js"],"names":["global","factory","exports","module","define","amd","self","Mustache","this","objectToString","Object","prototype","toString","isArray","Array","isArrayPolyfill","object","call","isFunction","typeStr","obj","escapeRegExp","string","replace","hasProperty","propName","primitiveHasOwnProperty","primitive","hasOwnProperty","regExpTest","RegExp","test","testRegExp","re","nonSpaceRe","isWhitespace","entityMap","&","<",">","\"","'","/","`","=","escapeHtml","String","fromEntityMap","s","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","parseTemplate","template","tags","lineHasNonSpace","sections","tokens","spaces","hasTag","nonSpace","indentation","tagIndex","openingTagRe","closingTagRe","closingCurlyRe","stripSpace","length","pop","compileTags","tagsToCompile","split","Error","mustache","scanner","Scanner","start","type","value","chr","token","openSection","eos","pos","scanUntil","i","valueLength","charAt","push","scan","nestTokens","squashTokens","squashedTokens","lastToken","numTokens","nestedTokens","collector","section","tail","Context","view","parentContext","cache",".","parent","Writer","templateCache","_cache","set","key","get","clear","match","index","substring","search","lookup","name","context","intermediateValue","names","lookupHit","indexOf","clearCache","parse","cacheKey","join","isCacheEnabled","undefined","render","partials","config","getConfigTags","renderTokens","originalTemplate","buffer","symbol","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","subRender","j","slice","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","escape","getConfigEscape","version","defaultWriter","TypeError"],"mappings":"CAAC,SAAUA,OAAQC,SACE,iBAAZC,SAA0C,oBAAXC,OAAyBA,OAAOD,QAAUD,UAC9D,mBAAXG,QAAyBA,OAAOC,IAAMD,OAAOH,UACnDD,OAASA,QAAUM,MAAaC,SAAWN,UAH9C,CAIEO,KAAM,WAAe,aAOrB,IAAIC,eAAiBC,OAAOC,UAAUC,SAClCC,QAAUC,MAAMD,SAAW,SAASE,gBAAiBC,QACvD,MAAuC,mBAAhCP,eAAeQ,KAAKD,SAG7B,SAASE,WAAYF,QACnB,MAAyB,mBAAXA,OAOhB,SAASG,QAASC,KAChB,OAAOP,QAAQO,KAAO,eAAiBA,IAGzC,SAASC,aAAcC,QACrB,OAAOA,OAAOC,QAAQ,8BAA+B,QAOvD,SAASC,YAAaJ,IAAKK,UACzB,OAAc,MAAPL,KAA8B,iBAARA,KAAqBK,YAAYL,IAOhE,SAASM,wBAAyBC,UAAWF,UAC3C,OACe,MAAbE,WACwB,iBAAdA,WACPA,UAAUC,gBACVD,UAAUC,eAAeH,UAMhC,IAAII,WAAaC,OAAOnB,UAAUoB,KAClC,SAASC,WAAYC,GAAIX,QACvB,OAAOO,WAAWZ,KAAKgB,GAAIX,QAG7B,IAAIY,WAAa,KACjB,SAASC,aAAcb,QACrB,OAAQU,WAAWE,WAAYZ,QAGjC,IAAIc,UAAY,CACdC,IAAK,QACLC,IAAK,OACLC,IAAK,OACLC,IAAK,SACLC,IAAK,QACLC,IAAK,SACLC,IAAK,SACLC,IAAK,UAGP,SAASC,WAAYvB,QACnB,OAAOwB,OAAOxB,QAAQC,QAAQ,eAAgB,SAASwB,cAAeC,GACpE,OAAOZ,UAAUY,KAIrB,IAAIC,QAAU,MACVC,QAAU,MACVC,SAAW,OACXC,QAAU,QACVC,MAAQ,qBA4BZ,SAASC,cAAeC,SAAUC,MAChC,IAAKD,SACH,MAAO,GACT,IAAIE,iBAAkB,EAClBC,SAAW,GACXC,OAAS,GACTC,OAAS,GACTC,QAAS,EACTC,UAAW,EACXC,YAAc,GACdC,SAAW,EAgBXC,aAAcC,aAAcC,eAZhC,SAASC,aACP,GAAIP,SAAWC,SACb,KAAOF,OAAOS,eACLV,OAAOC,OAAOU,YAEvBV,OAAS,GAGXC,QAAS,EACTC,UAAW,EAIb,SAASS,YAAaC,eAIpB,GAH6B,iBAAlBA,gBACTA,cAAgBA,cAAcC,MAAMvB,QAAS,KAE1CrC,QAAQ2D,gBAA2C,IAAzBA,cAAcH,OAC3C,MAAM,IAAIK,MAAM,iBAAmBF,eAErCP,aAAe,IAAInC,OAAOT,aAAamD,cAAc,IAAM,QAC3DN,aAAe,IAAIpC,OAAO,OAAST,aAAamD,cAAc,KAC9DL,eAAiB,IAAIrC,OAAO,OAAST,aAAa,IAAMmD,cAAc,KAGxED,YAAYf,MAAQmB,SAASnB,MAK7B,IAHA,IAAIoB,QAAU,IAAIC,QAAQtB,UAEtBuB,MAAOC,KAAMC,MAAOC,IAAKC,MAAOC,aAC5BP,QAAQQ,OAAO,CAMrB,GALAN,MAAQF,QAAQS,IAGhBL,MAAQJ,QAAQU,UAAUrB,cAGxB,IAAK,IAAIsB,EAAI,EAAGC,YAAcR,MAAMX,OAAQkB,EAAIC,cAAeD,EAGzDpD,aAFJ8C,IAAMD,MAAMS,OAAOF,KAGjB3B,OAAO8B,KAAK/B,OAAOU,QACnBN,aAAekB,MAEfnB,UAAW,EACXL,iBAAkB,EAClBM,aAAe,KAGjBJ,OAAO+B,KAAK,CAAE,OAAQT,IAAKH,MAAOA,MAAQ,IAC1CA,OAAS,EAGG,OAARG,MACFb,aACAL,YAAc,GACdC,SAAW,EACXP,iBAAkB,GAMxB,IAAKmB,QAAQe,KAAK1B,cAChB,MAuBF,GArBAJ,QAAS,EAGTkB,KAAOH,QAAQe,KAAKtC,QAAU,OAC9BuB,QAAQe,KAAK1C,SAGA,MAAT8B,MACFC,MAAQJ,QAAQU,UAAUnC,UAC1ByB,QAAQe,KAAKxC,UACbyB,QAAQU,UAAUpB,eACA,MAATa,MACTC,MAAQJ,QAAQU,UAAUnB,gBAC1BS,QAAQe,KAAKvC,SACbwB,QAAQU,UAAUpB,cAClBa,KAAO,KAEPC,MAAQJ,QAAQU,UAAUpB,eAIvBU,QAAQe,KAAKzB,cAChB,MAAM,IAAIQ,MAAM,mBAAqBE,QAAQS,KAU/C,GAPEH,MADU,KAARH,KACM,CAAEA,KAAMC,MAAOF,MAAOF,QAAQS,IAAKtB,YAAaC,SAAUP,iBAE1D,CAAEsB,KAAMC,MAAOF,MAAOF,QAAQS,KAExCrB,WACAL,OAAO+B,KAAKR,OAEC,MAATH,MAAyB,MAATA,KAClBrB,SAASgC,KAAKR,YACT,GAAa,MAATH,KAAc,CAIvB,KAFAI,YAAczB,SAASY,OAGrB,MAAM,IAAII,MAAM,qBAAuBM,MAAQ,QAAUF,OAE3D,GAAIK,YAAY,KAAOH,MACrB,MAAM,IAAIN,MAAM,qBAAuBS,YAAY,GAAK,QAAUL,WAClD,SAATC,MAA4B,MAATA,MAAyB,MAATA,KAC5CjB,UAAW,EACO,MAATiB,MAETR,YAAYS,OAShB,GALAZ,aAGAe,YAAczB,SAASY,MAGrB,MAAM,IAAII,MAAM,qBAAuBS,YAAY,GAAK,QAAUP,QAAQS,KAE5E,OAAOO,WAAWC,aAAalC,SAOjC,SAASkC,aAAclC,QAIrB,IAHA,IAAImC,eAAiB,GAEjBZ,MAAOa,UACFR,EAAI,EAAGS,UAAYrC,OAAOU,OAAQkB,EAAIS,YAAaT,GAC1DL,MAAQvB,OAAO4B,MAGI,SAAbL,MAAM,IAAiBa,WAA8B,SAAjBA,UAAU,IAChDA,UAAU,IAAMb,MAAM,GACtBa,UAAU,GAAKb,MAAM,KAErBY,eAAeJ,KAAKR,OACpBa,UAAYb,QAKlB,OAAOY,eAST,SAASF,WAAYjC,QAMnB,IALA,IAAIsC,aAAe,GACfC,UAAYD,aACZvC,SAAW,GAEXwB,MAAOiB,QACFZ,EAAI,EAAGS,UAAYrC,OAAOU,OAAQkB,EAAIS,YAAaT,EAG1D,QAFAL,MAAQvB,OAAO4B,IAED,IACZ,IAAK,IACL,IAAK,IACHW,UAAUR,KAAKR,OACfxB,SAASgC,KAAKR,OACdgB,UAAYhB,MAAM,GAAK,GACvB,MACF,IAAK,KACHiB,QAAUzC,SAASY,OACX,GAAKY,MAAM,GACnBgB,UAAYxC,SAASW,OAAS,EAAIX,SAASA,SAASW,OAAS,GAAG,GAAK4B,aACrE,MACF,QACEC,UAAUR,KAAKR,OAIrB,OAAOe,aAOT,SAASpB,QAASvD,QAChBd,KAAKc,OAASA,OACdd,KAAK4F,KAAO9E,OACZd,KAAK6E,IAAM,EAyDb,SAASgB,QAASC,KAAMC,eACtB/F,KAAK8F,KAAOA,KACZ9F,KAAKgG,MAAQ,CAAEC,IAAKjG,KAAK8F,MACzB9F,KAAKkG,OAASH,cAuGhB,SAASI,SACPnG,KAAKoG,cAAgB,CACnBC,OAAQ,GACRC,IAAK,SAASA,IAAKC,IAAK/B,OACtBxE,KAAKqG,OAAOE,KAAO/B,OAErBgC,IAAK,SAASA,IAAKD,KACjB,OAAOvG,KAAKqG,OAAOE,MAErBE,MAAO,SAASA,QACdzG,KAAKqG,OAAS,KAvKpBhC,QAAQlE,UAAUyE,IAAM,SAASA,MAC/B,MAAqB,KAAd5E,KAAK4F,MAOdvB,QAAQlE,UAAUgF,KAAO,SAASA,KAAM1D,IACtC,IAAIiF,MAAQ1G,KAAK4F,KAAKc,MAAMjF,IAE5B,IAAKiF,OAAyB,IAAhBA,MAAMC,MAClB,MAAO,GAET,IAAI7F,OAAS4F,MAAM,GAKnB,OAHA1G,KAAK4F,KAAO5F,KAAK4F,KAAKgB,UAAU9F,OAAO+C,QACvC7D,KAAK6E,KAAO/D,OAAO+C,OAEZ/C,QAOTuD,QAAQlE,UAAU2E,UAAY,SAASA,UAAWrD,IAChD,IAAIkF,MAAQ3G,KAAK4F,KAAKiB,OAAOpF,IAAKiF,MAElC,OAAQC,OACN,KAAM,EACJD,MAAQ1G,KAAK4F,KACb5F,KAAK4F,KAAO,GACZ,MACF,KAAK,EACHc,MAAQ,GACR,MACF,QACEA,MAAQ1G,KAAK4F,KAAKgB,UAAU,EAAGD,OAC/B3G,KAAK4F,KAAO5F,KAAK4F,KAAKgB,UAAUD,OAKpC,OAFA3G,KAAK6E,KAAO6B,MAAM7C,OAEX6C,OAiBTb,QAAQ1F,UAAU+E,KAAO,SAASA,KAAMY,MACtC,OAAO,IAAID,QAAQC,KAAM9F,OAO3B6F,QAAQ1F,UAAU2G,OAAS,SAASA,OAAQC,MAC1C,IAAIf,MAAQhG,KAAKgG,MAEbxB,MACJ,GAAIwB,MAAM5E,eAAe2F,MACvBvC,MAAQwB,MAAMe,UACT,CAGL,IAFA,IAAIC,QAAUhH,KAAMiH,kBAAmBC,MAAOP,MAAOQ,WAAY,EAE1DH,SAAS,CACd,GAAID,KAAKK,QAAQ,KAAO,EAsBtB,IArBAH,kBAAoBD,QAAQlB,KAC5BoB,MAAQH,KAAK9C,MAAM,KACnB0C,MAAQ,EAmBoB,MAArBM,mBAA6BN,MAAQO,MAAMrD,QAC5C8C,QAAUO,MAAMrD,OAAS,IAC3BsD,UACEnG,YAAYiG,kBAAmBC,MAAMP,SAClCzF,wBAAwB+F,kBAAmBC,MAAMP,SAGxDM,kBAAoBA,kBAAkBC,MAAMP,eAG9CM,kBAAoBD,QAAQlB,KAAKiB,MAqBjCI,UAAYnG,YAAYgG,QAAQlB,KAAMiB,MAGxC,GAAII,UAAW,CACb3C,MAAQyC,kBACR,MAGFD,QAAUA,QAAQd,OAGpBF,MAAMe,MAAQvC,MAMhB,OAHI9D,WAAW8D,SACbA,MAAQA,MAAM/D,KAAKT,KAAK8F,OAEnBtB,OA0BT2B,OAAOhG,UAAUkH,WAAa,SAASA,kBACH,IAAvBrH,KAAKoG,eACdpG,KAAKoG,cAAcK,SASvBN,OAAOhG,UAAUmH,MAAQ,SAASA,MAAOvE,SAAUC,MACjD,IAAIgD,MAAQhG,KAAKoG,cACbmB,SAAWxE,SAAW,KAAOC,MAAQmB,SAASnB,MAAMwE,KAAK,KACzDC,oBAAkC,IAAVzB,MACxB7C,OAASsE,eAAiBzB,MAAMQ,IAAIe,eAAYG,EAMpD,OAJcA,MAAVvE,SACFA,OAASL,cAAcC,SAAUC,MACjCyE,gBAAkBzB,MAAMM,IAAIiB,SAAUpE,SAEjCA,QA0BTgD,OAAOhG,UAAUwH,OAAS,SAASA,OAAQ5E,SAAU+C,KAAM8B,SAAUC,QACnE,IAAI7E,KAAOhD,KAAK8H,cAAcD,QAC1B1E,OAASnD,KAAKsH,MAAMvE,SAAUC,MAC9BgE,QAAWlB,gBAAgBD,QAAWC,KAAO,IAAID,QAAQC,UAAM4B,GACnE,OAAO1H,KAAK+H,aAAa5E,OAAQ6D,QAASY,SAAU7E,SAAU8E,SAYhE1B,OAAOhG,UAAU4H,aAAe,SAASA,aAAc5E,OAAQ6D,QAASY,SAAUI,iBAAkBH,QAIlG,IAHA,IAAII,OAAS,GAETvD,MAAOwD,OAAQ1D,MACVO,EAAI,EAAGS,UAAYrC,OAAOU,OAAQkB,EAAIS,YAAaT,EAC1DP,WAAQkD,EAIO,OAFfQ,QADAxD,MAAQvB,OAAO4B,IACA,IAEKP,MAAQxE,KAAKmI,cAAczD,MAAOsC,QAASY,SAAUI,iBAAkBH,QACvE,MAAXK,OAAgB1D,MAAQxE,KAAKoI,eAAe1D,MAAOsC,QAASY,SAAUI,iBAAkBH,QAC7E,MAAXK,OAAgB1D,MAAQxE,KAAKqI,cAAc3D,MAAOsC,QAASY,SAAUC,QAC1D,MAAXK,OAAgB1D,MAAQxE,KAAKsI,eAAe5D,MAAOsC,SACxC,SAAXkB,OAAmB1D,MAAQxE,KAAKuI,aAAa7D,MAAOsC,QAASa,QAClD,SAAXK,SAAmB1D,MAAQxE,KAAKwI,SAAS9D,aAEpCgD,IAAVlD,QACFyD,QAAUzD,OAGd,OAAOyD,QAGT9B,OAAOhG,UAAUgI,cAAgB,SAASA,cAAezD,MAAOsC,QAASY,SAAUI,iBAAkBH,QACnG,IAAI/H,KAAOE,KACPiI,OAAS,GACTzD,MAAQwC,QAAQF,OAAOpC,MAAM,IAIjC,SAAS+D,UAAW1F,UAClB,OAAOjD,KAAK6H,OAAO5E,SAAUiE,QAASY,SAAUC,QAGlD,GAAKrD,MAAL,CAEA,GAAInE,QAAQmE,OACV,IAAK,IAAIkE,EAAI,EAAG1D,YAAcR,MAAMX,OAAQ6E,EAAI1D,cAAe0D,EAC7DT,QAAUjI,KAAK+H,aAAarD,MAAM,GAAIsC,QAAQ9B,KAAKV,MAAMkE,IAAKd,SAAUI,iBAAkBH,aAEvF,GAAqB,iBAAVrD,OAAuC,iBAAVA,OAAuC,iBAAVA,MAC1EyD,QAAUjI,KAAK+H,aAAarD,MAAM,GAAIsC,QAAQ9B,KAAKV,OAAQoD,SAAUI,iBAAkBH,aAClF,GAAInH,WAAW8D,OAAQ,CAC5B,GAAgC,iBAArBwD,iBACT,MAAM,IAAI9D,MAAM,kEAKL,OAFbM,MAAQA,MAAM/D,KAAKuG,QAAQlB,KAAMkC,iBAAiBW,MAAMjE,MAAM,GAAIA,MAAM,IAAK+D,cAG3ER,QAAUzD,YAEZyD,QAAUjI,KAAK+H,aAAarD,MAAM,GAAIsC,QAASY,SAAUI,iBAAkBH,QAE7E,OAAOI,SAGT9B,OAAOhG,UAAUiI,eAAiB,SAASA,eAAgB1D,MAAOsC,QAASY,SAAUI,iBAAkBH,QACrG,IAAIrD,MAAQwC,QAAQF,OAAOpC,MAAM,IAIjC,IAAKF,OAAUnE,QAAQmE,QAA2B,IAAjBA,MAAMX,OACrC,OAAO7D,KAAK+H,aAAarD,MAAM,GAAIsC,QAASY,SAAUI,iBAAkBH,SAG5E1B,OAAOhG,UAAUyI,cAAgB,SAASA,cAAeC,QAAStF,YAAaN,iBAG7E,IAFA,IAAI6F,oBAAsBvF,YAAYxC,QAAQ,UAAW,IACrDgI,YAAcF,QAAQ5E,MAAM,MACvBc,EAAI,EAAGA,EAAIgE,YAAYlF,OAAQkB,IAClCgE,YAAYhE,GAAGlB,SAAWkB,EAAI,IAAM9B,mBACtC8F,YAAYhE,GAAK+D,oBAAsBC,YAAYhE,IAGvD,OAAOgE,YAAYvB,KAAK,OAG1BrB,OAAOhG,UAAUkI,cAAgB,SAASA,cAAe3D,MAAOsC,QAASY,SAAUC,QACjF,GAAKD,SAAL,CACA,IAAI5E,KAAOhD,KAAK8H,cAAcD,QAE1BrD,MAAQ9D,WAAWkH,UAAYA,SAASlD,MAAM,IAAMkD,SAASlD,MAAM,IACvE,GAAa,MAATF,MAAe,CACjB,IAAIvB,gBAAkByB,MAAM,GACxBlB,SAAWkB,MAAM,GACjBnB,YAAcmB,MAAM,GACpBsE,cAAgBxE,MACJ,GAAZhB,UAAiBD,cACnByF,cAAgBhJ,KAAK4I,cAAcpE,MAAOjB,YAAaN,kBAEzD,IAAIE,OAASnD,KAAKsH,MAAM0B,cAAehG,MACvC,OAAOhD,KAAK+H,aAAa5E,OAAQ6D,QAASY,SAAUoB,cAAenB,WAIvE1B,OAAOhG,UAAUmI,eAAiB,SAASA,eAAgB5D,MAAOsC,SAChE,IAAIxC,MAAQwC,QAAQF,OAAOpC,MAAM,IACjC,GAAa,MAATF,MACF,OAAOA,OAGX2B,OAAOhG,UAAUoI,aAAe,SAASA,aAAc7D,MAAOsC,QAASa,QACrE,IAAIoB,OAASjJ,KAAKkJ,gBAAgBrB,SAAW1D,SAAS8E,OAClDzE,MAAQwC,QAAQF,OAAOpC,MAAM,IACjC,GAAa,MAATF,MACF,MAAyB,iBAAVA,OAAsByE,SAAW9E,SAAS8E,OAAU3G,OAAOkC,OAASyE,OAAOzE,QAG9F2B,OAAOhG,UAAUqI,SAAW,SAASA,SAAU9D,OAC7C,OAAOA,MAAM,IAGfyB,OAAOhG,UAAU2H,cAAgB,SAASA,cAAeD,QACvD,OAAIxH,QAAQwH,QACHA,OAEAA,QAA4B,iBAAXA,OACjBA,OAAO7E,UAGd,GAIJmD,OAAOhG,UAAU+I,gBAAkB,SAASA,gBAAiBrB,QAC3D,OAAIA,QAA4B,iBAAXA,SAAwBxH,QAAQwH,QAC5CA,OAAOoB,YAGd,GAIJ,IAAI9E,SAAW,CACb4C,KAAM,cACNoC,QAAS,QACTnG,KAAM,CAAE,KAAM,MACdqE,gBAAYK,EACZuB,YAAQvB,EACRJ,WAAOI,EACPC,YAAQD,EACRrD,aAASqD,EACT7B,aAAS6B,EACTvB,YAAQuB,EAMRtB,kBAAmBJ,OACjBoD,cAAchD,cAAgBJ,OAKhCI,oBACE,OAAOgD,cAAchD,gBAKrBgD,cAAgB,IAAIjD,OAyCxB,OApCAhC,SAASkD,WAAa,SAASA,aAC7B,OAAO+B,cAAc/B,cAQvBlD,SAASmD,MAAQ,SAASA,MAAOvE,SAAUC,MACzC,OAAOoG,cAAc9B,MAAMvE,SAAUC,OAOvCmB,SAASwD,OAAS,SAASA,OAAQ5E,SAAU+C,KAAM8B,SAAUC,QAC3D,GAAwB,iBAAb9E,SACT,MAAM,IAAIsG,UAAU,wDACU1I,QAAQoC,UAAY,mFAIpD,OAAOqG,cAAczB,OAAO5E,SAAU+C,KAAM8B,SAAUC,SAKxD1D,SAAS8E,OAAS5G,WAGlB8B,SAASE,QAAUA,QACnBF,SAAS0B,QAAUA,QACnB1B,SAASgC,OAASA,OAEXhC","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Mustache = factory());\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render (template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context, config);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags (config) {\n    if (isArray(config)) {\n      return config;\n    }\n    else if (config && typeof config === 'object') {\n      return config.tags;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape (config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render (template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n"],"file":"mustache.js"}