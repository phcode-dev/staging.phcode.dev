{"version":3,"sources":["thirdparty/CodeMirror/mode/twig/twig.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","operator","sign","atom","number","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","eat","sol","RegExp","join","startState","token","config","parserConfig","twigInner","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"),  require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function() {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"twig\", function(config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base), {\n        open: /\\{[{#%]/, close: /[}#%]\\}/, mode: twigInner, parseDelimiters: true\n      }\n    );\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});\n"],"file":"twig.js"}