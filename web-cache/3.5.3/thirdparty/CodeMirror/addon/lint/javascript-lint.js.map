{"version":3,"sources":["thirdparty/CodeMirror/addon/lint/javascript-lint.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","validator","text","options","window","JSHINT","console","error","indent","globals","errors","data","result","parseErrors","output","i","length","line","warn","start","character","end","evidence","index","substring","search","hint","message","reason","severity","code","startsWith","from","Pos","to","push","registerHelper"],"mappings":"CAKA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACV,aAGA,SAASC,UAAUC,KAAMC,SACvB,IAAKC,OAAOC,OAIV,OAHID,OAAOE,SACTF,OAAOE,QAAQC,MAAM,+EAEhB,GAEJJ,QAAQK,SACXL,QAAQK,OAAS,GACnBH,OAAOH,KAAMC,QAASA,QAAQM,SAC9B,IAAIC,OAASL,OAAOM,OAAOD,OAAQE,OAAS,GAE5C,OADIF,QAAQG,YAAYH,OAAQE,QACzBA,OAKT,SAASC,YAAYH,OAAQI,QAC3B,IAAM,IAAIC,EAAI,EAAGA,EAAIL,OAAOM,OAAQD,IAAK,CACvC,IAAIR,MAAQG,OAAOK,GACnB,GAAIR,MAAO,CACT,GAAIA,MAAMU,MAAQ,EAAG,CACfb,OAAOE,SACTF,OAAOE,QAAQY,KAAK,6CAA+CX,MAAMU,KAAO,IAAKV,OAEvF,SAGF,IAAIY,MAAQZ,MAAMa,UAAY,EAAGC,IAAMF,MAAQ,EAC/C,GAAIZ,MAAMe,SAAU,CAClB,IAAIC,MAAQhB,MAAMe,SAASE,UAAUL,OAAOM,OAAO,OAC/CF,OAAS,IACXF,KAAOE,OAKX,IAAIG,KAAO,CACTC,QAASpB,MAAMqB,OACfC,SAAUtB,MAAMuB,MAAQvB,MAAMuB,KAAKC,WAAW,KAAO,UAAuB,QAC5EC,KAAMhC,WAAWiC,IAAI1B,MAAMU,KAAO,EAAGE,OACrCe,GAAIlC,WAAWiC,IAAI1B,MAAMU,KAAO,EAAGI,MAGrCP,OAAOqB,KAAKT,QA7BlB1B,WAAWoC,eAAe,OAAQ,aAAcnC","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Depends on jshint.js from https://github.com/jshint/jshint\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  // declare global: JSHINT\n\n  function validator(text, options) {\n    if (!window.JSHINT) {\n      if (window.console) {\n        window.console.error(\"Error: window.JSHINT not defined, CodeMirror JavaScript linting cannot run.\");\n      }\n      return [];\n    }\n    if (!options.indent) // JSHint error.character actually is a column index, this fixes underlining on lines using tabs for indentation\n      options.indent = 1; // JSHint default value is 4\n    JSHINT(text, options, options.globals);\n    var errors = JSHINT.data().errors, result = [];\n    if (errors) parseErrors(errors, result);\n    return result;\n  }\n\n  CodeMirror.registerHelper(\"lint\", \"javascript\", validator);\n\n  function parseErrors(errors, output) {\n    for ( var i = 0; i < errors.length; i++) {\n      var error = errors[i];\n      if (error) {\n        if (error.line <= 0) {\n          if (window.console) {\n            window.console.warn(\"Cannot display JSHint error (invalid line \" + error.line + \")\", error);\n          }\n          continue;\n        }\n\n        var start = error.character - 1, end = start + 1;\n        if (error.evidence) {\n          var index = error.evidence.substring(start).search(/.\\b/);\n          if (index > -1) {\n            end += index;\n          }\n        }\n\n        // Convert to format expected by validation service\n        var hint = {\n          message: error.reason,\n          severity: error.code ? (error.code.startsWith('W') ? \"warning\" : \"error\") : \"error\",\n          from: CodeMirror.Pos(error.line - 1, start),\n          to: CodeMirror.Pos(error.line - 1, end)\n        };\n\n        output.push(hint);\n      }\n    }\n  }\n});\n"],"file":"javascript-lint.js"}