{"version":3,"sources":["thirdparty/CodeMirror/mode/handlebars/handlebars.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineSimpleMode","start","regex","push","token","handlebars_raw","pop","handlebars","dash_comment","comment","meta","blockCommentStart","blockCommentEnd","defineMode","config","parserConfig","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,wBAAyBA,QAAQ,2BAA4BA,QAAQ,+BACzD,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,uBAAwB,0BAA2B,8BAA+BJ,KAE1FA,IAAIM,YANR,CAOG,SAASA,YACV,aAEAA,WAAWC,iBAAiB,kBAAmB,CAC7CC,MAAO,CACL,CAAEC,MAAO,SAAUC,KAAM,iBAAkBC,MAAO,OAClD,CAAEF,MAAO,UAAWC,KAAM,eAAgBC,MAAO,WACjD,CAAEF,MAAO,QAAWC,KAAM,UAAWC,MAAO,WAC5C,CAAEF,MAAO,OAAWC,KAAM,aAAcC,MAAO,QAEjDC,eAAgB,CACd,CAAEH,MAAO,SAAUI,KAAK,EAAMF,MAAO,QAEvCG,WAAY,CACV,CAAEL,MAAO,OAAQI,KAAK,EAAMF,MAAO,OAGnC,CAAEF,MAAO,qBAAsBE,MAAO,UACtC,CAAEF,MAAO,qBAAsBE,MAAO,UAGtC,CAAEF,MAAO,wBAAyBE,MAAO,WACzC,CAAEF,MAAO,kBAAmBE,MAAO,WAGnC,CAAEF,MAAO,OAAQE,MAAO,UAGxB,CAAEF,MAAO,mBAAoBE,MAAO,QAGpC,CAAEF,MAAO,mCAAoCE,MAAO,eAEtDI,aAAc,CACZ,CAAEN,MAAO,SAAUI,KAAK,EAAMF,MAAO,WAGrC,CAAEF,MAAO,IAAKE,MAAO,YAEvBK,QAAS,CACP,CAAEP,MAAO,OAAQI,KAAK,EAAMF,MAAO,WACnC,CAAEF,MAAO,IAAKE,MAAO,YAEvBM,KAAM,CACJC,kBAAmB,OACnBC,gBAAiB,UAIrBb,WAAWc,WAAW,aAAc,SAASC,OAAQC,cACnD,IAAIR,WAAaR,WAAWiB,QAAQF,OAAQ,mBAC5C,OAAKC,cAAiBA,aAAaE,KAC5BlB,WAAWmB,iBAChBnB,WAAWiB,QAAQF,OAAQC,aAAaE,MACxC,CAACE,KAAM,KAAMC,MAAO,UAAWC,KAAMd,WAAYe,iBAAiB,IAHpBf,aAOlDR,WAAWwB,WAAW,6BAA8B","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"), require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"handlebars-tags\", {\n    start: [\n      { regex: /\\{\\{\\{/, push: \"handlebars_raw\", token: \"tag\" },\n      { regex: /\\{\\{!--/, push: \"dash_comment\", token: \"comment\" },\n      { regex: /\\{\\{!/,   push: \"comment\", token: \"comment\" },\n      { regex: /\\{\\{/,    push: \"handlebars\", token: \"tag\" }\n    ],\n    handlebars_raw: [\n      { regex: /\\}\\}\\}/, pop: true, token: \"tag\" },\n    ],\n    handlebars: [\n      { regex: /\\}\\}/, pop: true, token: \"tag\" },\n\n      // Double and single quotes\n      { regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/, token: \"string\" },\n      { regex: /'(?:[^\\\\']|\\\\.)*'?/, token: \"string\" },\n\n      // Handlebars keywords\n      { regex: />|[#\\/]([A-Za-z_]\\w*)/, token: \"keyword\" },\n      { regex: /(?:else|this)\\b/, token: \"keyword\" },\n\n      // Numeral\n      { regex: /\\d+/i, token: \"number\" },\n\n      // Atoms like = and .\n      { regex: /=|~|@|true|false/, token: \"atom\" },\n\n      // Paths\n      { regex: /(?:\\.\\.\\/)*(?:[A-Za-z_][\\w\\.]*)+/, token: \"variable-2\" }\n    ],\n    dash_comment: [\n      { regex: /--\\}\\}/, pop: true, token: \"comment\" },\n\n      // Commented code\n      { regex: /./, token: \"comment\"}\n    ],\n    comment: [\n      { regex: /\\}\\}/, pop: true, token: \"comment\" },\n      { regex: /./, token: \"comment\" }\n    ],\n    meta: {\n      blockCommentStart: \"{{--\",\n      blockCommentEnd: \"--}}\"\n    }\n  });\n\n  CodeMirror.defineMode(\"handlebars\", function(config, parserConfig) {\n    var handlebars = CodeMirror.getMode(config, \"handlebars-tags\");\n    if (!parserConfig || !parserConfig.base) return handlebars;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base),\n      {open: \"{{\", close: /\\}\\}\\}?/, mode: handlebars, parseDelimiters: true}\n    );\n  });\n\n  CodeMirror.defineMIME(\"text/x-handlebars-template\", \"handlebars\");\n});\n"],"file":"handlebars.js"}