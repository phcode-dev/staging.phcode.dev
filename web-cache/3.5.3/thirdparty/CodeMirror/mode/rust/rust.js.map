{"version":3,"sources":["thirdparty/CodeMirror/mode/rust/rust.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineSimpleMode","start","regex","token","next","indent","dedent","string","string_raw","string_raw_hash","comment","meta","dontIndentStates","electricInput","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,wBAAyBA,QAAQ,4BACrB,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,uBAAwB,2BAA4BJ,KAE5DA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,iBAAiB,OAAO,CACjCC,MAAO,CAEL,CAACC,MAAO,MAAOC,MAAO,SAAUC,KAAM,UAEtC,CAACF,MAAO,OAAQC,MAAO,SAAUC,KAAM,cACvC,CAACF,MAAO,SAAUC,MAAO,SAAUC,KAAM,mBAEzC,CAACF,MAAO,gEAAiEC,MAAO,YAEhF,CAACD,MAAO,6CAA8CC,MAAO,YAE7D,CAACD,MAAO,0MACPC,MAAO,UACR,CAACD,MAAO,8EAA+EC,MAAO,CAAC,UAAW,KAAM,QAChH,CAACD,MAAO,sSAAuSC,MAAO,WACtT,CAACD,MAAO,0FAA2FC,MAAO,QAC1G,CAACD,MAAO,sCAAuCC,MAAO,WACtD,CAACD,MAAO,sCACPC,MAAO,CAAC,UAAW,KAAM,QAC1B,CAACD,MAAO,YAAaC,MAAO,QAC5B,CAACD,MAAO,SAAUC,MAAO,WACzB,CAACD,MAAO,OAAQC,MAAO,UAAWC,KAAM,WACxC,CAACF,MAAO,eAAgBC,MAAO,YAC/B,CAACD,MAAO,gBAAgBC,MAAO,cAC/B,CAACD,MAAO,eAAgBC,MAAO,YAC/B,CAACD,MAAO,WAAYG,QAAQ,GAC5B,CAACH,MAAO,WAAYI,QAAQ,IAE9BC,OAAQ,CACN,CAACL,MAAO,IAAKC,MAAO,SAAUC,KAAM,SACpC,CAACF,MAAO,wBAAyBC,MAAO,WAE1CK,WAAY,CACV,CAACN,MAAO,IAAKC,MAAO,SAAUC,KAAM,SACpC,CAACF,MAAO,QAASC,MAAO,WAE1BM,gBAAiB,CACf,CAACP,MAAO,MAAOC,MAAO,SAAUC,KAAM,SACtC,CAACF,MAAO,mBAAoBC,MAAO,WAErCO,QAAS,CACP,CAACR,MAAO,UAAWC,MAAO,UAAWC,KAAM,SAC3C,CAACF,MAAO,KAAMC,MAAO,YAEvBQ,KAAM,CACJC,iBAAkB,CAAC,WACnBC,cAAe,UACfC,kBAAmB,KACnBC,gBAAiB,KACjBC,YAAa,KACbC,KAAM,WAKVlB,WAAWmB,WAAW,iBAAkB,QACxCnB,WAAWmB,WAAW,YAAa","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineSimpleMode(\"rust\",{\n  start: [\n    // string and byte string\n    {regex: /b?\"/, token: \"string\", next: \"string\"},\n    // raw string and raw byte string\n    {regex: /b?r\"/, token: \"string\", next: \"string_raw\"},\n    {regex: /b?r#+\"/, token: \"string\", next: \"string_raw_hash\"},\n    // character\n    {regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/, token: \"string-2\"},\n    // byte\n    {regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/, token: \"string-2\"},\n\n    {regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n     token: \"number\"},\n    {regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/, token: [\"keyword\", null, \"def\"]},\n    {regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, token: \"keyword\"},\n    {regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/, token: \"atom\"},\n    {regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/, token: \"builtin\"},\n    {regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n     token: [\"keyword\", null ,\"def\"]},\n    {regex: /#!?\\[.*\\]/, token: \"meta\"},\n    {regex: /\\/\\/.*/, token: \"comment\"},\n    {regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n    {regex: /[-+\\/*=<>!]+/, token: \"operator\"},\n    {regex: /[a-zA-Z_]\\w*!/,token: \"variable-3\"},\n    {regex: /[a-zA-Z_]\\w*/, token: \"variable\"},\n    {regex: /[\\{\\[\\(]/, indent: true},\n    {regex: /[\\}\\]\\)]/, dedent: true}\n  ],\n  string: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/, token: \"string\"}\n  ],\n  string_raw: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /[^\"]*/, token: \"string\"}\n  ],\n  string_raw_hash: [\n    {regex: /\"#+/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\"]|\"(?!#))*/, token: \"string\"}\n  ],\n  comment: [\n    {regex: /.*?\\*\\//, token: \"comment\", next: \"start\"},\n    {regex: /.*/, token: \"comment\"}\n  ],\n  meta: {\n    dontIndentStates: [\"comment\"],\n    electricInput: /^\\s*\\}$/,\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"brace\"\n  }\n});\n\n\nCodeMirror.defineMIME(\"text/x-rustsrc\", \"rust\");\nCodeMirror.defineMIME(\"text/rust\", \"rust\");\n});\n"],"file":"rust.js"}