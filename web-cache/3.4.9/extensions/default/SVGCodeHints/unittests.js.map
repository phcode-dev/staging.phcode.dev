{"version":3,"sources":["extensions/default/SVGCodeHints/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","SVGCodeHints","describe","testContent","testDocument","testEditor","extractHintList","hints","$","map","$node","text","expectHints","provider","expect","hasHints","toBe","hintObj","getHints","toBeTruthy","expectNoHints","verifyHints","hintList","expectedHint","verifyHintsExcluded","unexpectedHint","indexOf","selectHint","not","insertHint","expectTokenAt","pos","string","type","token","_codeMirror","getTokenAt","fixPos","sticky","expectCursorAt","selection","getSelection","start","toEql","end","beforeEach","mockEditor","createMockEditor","startLine","endLine","editor","doc","afterEach","destroy","it","setCursorPos","line","ch","hintProvider","replaceRange","hintLint","find","length","css","toMatch","hasClass","toBeFalsy"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2015 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, beforeEach, afterEach, it, expect */\n\ndefine(function (require, exports, module) {\n\n\n    // Load dependent modules.\n    var SpecRunnerUtils     = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        SVGCodeHints        = require(\"./main\");\n\n    describe(\"unit:SVG Code Hints\", function () {\n        var testContent, testDocument, testEditor;\n\n        // SVG Content that we will be using to run tests against.\n        testContent =   \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\" +\n                        \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\\n\" +\n                        \"     width=\\\"200\\\" height=\\\"200\\\" preserveAspectRatio=\\\"xMinYMin meet\\\">\\n\" +\n                        \"    <title>Brackets SVG Code Hints</title>\\n\" +\n                        \"    <rect width=\\\"200\\\" height=\\\"200\\\" baseline-shift=\\\"baseline\\\" alignment-baseline=\\\"alphabetic\\\" stroke-width=\\\"1\\\" color=\\\"\\\"></rect>\\n\" +\n                        \"    <rect width='160' height='160' x='20' y='20' baseline-shift='super' alignment-baseline='baseline' color='rent' fill='transparent' />\\n\" +\n                        \"    <g>\\n\" +\n                        \"        \\n\" +\n                        \"    </g>\\n\" +\n                        \"</svg>\\n\";\n\n        beforeEach(function () {\n            // Create a mock svg document to run tests against.\n            var mockEditor = SpecRunnerUtils.createMockEditor(testContent, \"svg\", {\n                startLine: 0,\n                endLine: 10\n            });\n            testEditor = mockEditor.editor;\n            testDocument = mockEditor.doc;\n        });\n\n        afterEach(function () {\n            testEditor.destroy();\n            testEditor = null;\n        });\n\n        // Returns a list of hints.\n        function extractHintList(hints) {\n            return $.map(hints, function ($node) {\n                return $node.text();\n            });\n        }\n\n        // Verifies the availability of hints.\n        function expectHints(provider) {\n            expect(provider.hasHints(testEditor, null)).toBe(true);\n            var hintObj = provider.getHints();\n            expect(hintObj).toBeTruthy();\n            return hintObj.hints;\n        }\n\n        // Verifies the non-availability of hints.\n        function expectNoHints(provider) {\n            expect(provider.hasHints(testEditor, null)).toBe(false);\n        }\n\n        // Verifies the presence of a hint.\n        function verifyHints(hintList, expectedHint) {\n            var hints = extractHintList(hintList);\n            expect(hints[0]).toBe(expectedHint);\n        }\n\n        // Verifies the exclusion of an unexpected hint.\n        function verifyHintsExcluded(hintList, unexpectedHint) {\n            var hints = extractHintList(hintList);\n            expect(hints.indexOf(unexpectedHint)).toBe(-1);\n        }\n\n        // Inserts the hint in document.\n        function selectHint(provider, expectedHint) {\n            var hintList = expectHints(provider),\n                hints = extractHintList(hintList);\n            expect(hints.indexOf(expectedHint)).not.toBe(-1);\n            return provider.insertHint(expectedHint);\n        }\n\n        // Used to test token at given positions.\n        function expectTokenAt(pos, string, type) {\n            var token = testEditor._codeMirror.getTokenAt(pos);\n            expect(token.string).toBe(string);\n            expect(token.type).toBe(type);\n        }\n\n        // Helper functions for testing cursor position / selection range\n        function fixPos(pos) {\n            if (!(\"sticky\" in pos)) {\n                pos.sticky = null;\n            }\n            return pos;\n        }\n\n        // Used to test cursor position.\n        function expectCursorAt(pos) {\n            var selection = testEditor.getSelection();\n            expect(fixPos(selection.start)).toEql(fixPos(selection.end));\n            expect(fixPos(selection.start)).toEql(fixPos(pos));\n        }\n\n        describe(\"Tag Hinting\", function () {\n            it(\"should hint at < before tag name\", function () {\n                // After < in <svg\n                testEditor.setCursorPos({line: 1, ch: 1});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"a\");\n            });\n\n            it(\"should hint inside the tag name\", function () {\n                // After <sv in <svg\n                testEditor.setCursorPos({line: 1, ch: 3});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"svg\");\n            });\n\n            it(\"should hint at the end of the tag\", function () {\n                // After <svg in <svg\n                testEditor.setCursorPos({line: 1, ch: 4});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"svg\");\n            });\n\n            it(\"should NOT hint in closing tag between < and /\", function () {\n                // Between < and / in </title>\n                testEditor.setCursorPos({line: 3, ch: 35});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // In case we have space between < and /\n                testDocument.replaceRange(\" \", {line: 3, ch: 35});\n                testEditor.setCursorPos({line: 3, ch: 36});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should NOT hint in closing tag after </\", function () {\n                // After </ in </title>\n                testEditor.setCursorPos({line: 3, ch: 36});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should NOT hint in the middle of closing tag\", function () {\n                // After </tit in </title>\n                testEditor.setCursorPos({line: 3, ch: 39});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should NOT hint at the end of closing tag\", function () {\n                // Before > in </title>\n                testEditor.setCursorPos({line: 3, ch: 41});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should NOT hint after the first space in closing tag\", function () {\n                // Before > in </title >\n                testDocument.replaceRange(\" \", {line: 3, ch: 41});\n                testEditor.setCursorPos({line: 3, ch: 42});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            // A whitespace between < and tag name makes xml invalid.\n            it(\"should NOT hint in case there is a whitespace between < and tag name\", function () {\n                // After < in first < rect\n                testDocument.replaceRange(\" \", {line: 4, ch: 5});\n                testEditor.setCursorPos({line: 4, ch: 6});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should NOT hint after first character in an invalid tag\", function () {\n                // After < r in first < rect\n                testDocument.replaceRange(\" \", {line: 4, ch: 5});\n                testEditor.setCursorPos({line: 4, ch: 7});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should NOT hint in the middle of invalid tag\", function () {\n                // After < rec in < rect\n                testDocument.replaceRange(\" \", {line: 4, ch: 5});\n                testEditor.setCursorPos({line: 4, ch: 9});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should NOT hint inside the content of a tag\", function () {\n                // After > in <title>\n                testEditor.setCursorPos({line: 3, ch: 11});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // After Brackets in <title>Brackets\n                testEditor.setCursorPos({line: 3, ch: 20});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // Between <rect></rect>\n                testEditor.setCursorPos({line: 4, ch: 119});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // After <title>+space in <title> Brackets\n                testDocument.replaceRange(\" \", {line: 3, ch: 11});\n                testEditor.setCursorPos({line: 3, ch: 12});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should not hint after the closed tag\", function () {\n                // After </rect>\n                testEditor.setCursorPos({line: 4, ch: 126});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // After space at </rect>+space\n                testDocument.replaceRange(\" \", {line: 4, ch: 126});\n                testEditor.setCursorPos({line: 4, ch: 127});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // After />\n                testEditor.setCursorPos({line: 5, ch: 136});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // After space in />+space\n                testDocument.replaceRange(\" \", {line: 5, ch: 136});\n                testEditor.setCursorPos({line: 5, ch: 137});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // After </g>\n                testEditor.setCursorPos({line: 8, ch: 8});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // After space in </g>+space\n                testDocument.replaceRange(\" \", {line: 8, ch: 8});\n                testEditor.setCursorPos({line: 8, ch: 9});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should hint inside XML declaration\", function () {\n                // After < in <?xml\n                testEditor.setCursorPos({line: 0, ch: 1});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // After <?xm\n                testEditor.setCursorPos({line: 0, ch: 4});\n                expectNoHints(SVGCodeHints.hintProvider);\n\n                // After <?xml+space\n                testEditor.setCursorPos({line: 0, ch: 6});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n        });\n\n        describe(\"Attribute Hinting\", function () {\n\n            it(\"should hint after first space after tag\", function () {\n                // After <rect\n                testEditor.setCursorPos({line: 4, ch: 10});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"class\");\n            });\n\n            it(\"should hint after first character of the attribute\", function () {\n                // After <rect w\n                testEditor.setCursorPos({line: 4, ch: 11});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"width\");\n            });\n\n            it(\"should hint in the middle of the attribute\", function () {\n                // After <rect wid\n                testEditor.setCursorPos({line: 4, ch: 13});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"width\");\n            });\n\n            it(\"should hint at the end of the attribute\", function () {\n                // After <rect width\n                testEditor.setCursorPos({line: 4, ch: 15});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"width\");\n            });\n\n            it(\"should NOT hint if we have whitespace between attribute and =\", function () {\n                // Before = in <rect width =\n                testDocument.replaceRange(\"  \", {line: 4, ch: 15});\n                testEditor.setCursorPos({line: 4, ch: 16});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should NOT hint in case there is a space between < and tag name\", function () {\n                // After space in < rect\n                testDocument.replaceRange(\" \", {line: 4, ch: 5});\n                testEditor.setCursorPos({line: 4, ch: 11});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should exclude hints if they have already been used\", function () {\n                // In first <rect, after <rect+space\n                testEditor.setCursorPos({line: 4, ch: 10});\n                var hintLint = expectHints(SVGCodeHints.hintProvider);\n                verifyHintsExcluded(hintLint, \"width\");\n                verifyHintsExcluded(hintLint, \"height\");\n                verifyHintsExcluded(hintLint, \"baseline-shift\");\n                verifyHintsExcluded(hintLint, \"alignment-baseline\");\n                verifyHintsExcluded(hintLint, \"stroke-width\");\n\n                // In the second <rect, after <rect+space\n                testEditor.setCursorPos({line: 5, ch: 10});\n                hintLint = expectHints(SVGCodeHints.hintProvider);\n                verifyHintsExcluded(hintLint, \"width\");\n                verifyHintsExcluded(hintLint, \"height\");\n                verifyHintsExcluded(hintLint, \"x\");\n                verifyHintsExcluded(hintLint, \"y\");\n                verifyHintsExcluded(hintLint, \"baseline-shift\");\n                verifyHintsExcluded(hintLint, \"alignment-baseline\");\n            });\n\n            it(\"should NOT exclude current token from hints\", function () {\n                var hintList, hints;\n\n                // After <rect w\n                testEditor.setCursorPos({line: 4, ch: 11});\n                hintList = expectHints(SVGCodeHints.hintProvider);\n                hints    = extractHintList(hintList);\n                expect(hints.indexOf(\"width\")).not.toBe(-1);\n\n                // After <rect widt\n                testEditor.setCursorPos({line: 4, ch: 14});\n                hintList = expectHints(SVGCodeHints.hintProvider);\n                hints = extractHintList(hintList);\n                expect(hints.indexOf(\"width\")).not.toBe(-1);\n\n                // After <rect width\n                testEditor.setCursorPos({line: 5, ch: 15});\n                hintList = expectHints(SVGCodeHints.hintProvider);\n                hints = extractHintList(hintList);\n                expect(hints.indexOf(\"width\")).not.toBe(-1);\n            });\n        });\n\n        describe(\"Value Hinting\", function () {\n            it(\"should hint after =\", function () {\n                // After baseline-shift= in second rect.\n                testEditor.setCursorPos({line: 5, ch: 64});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"baseline\");\n            });\n\n            it(\"should hint after ='\", function () {\n                // After baseline-shift='\n                testEditor.setCursorPos({line: 5, ch: 65});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"baseline\");\n            });\n\n            it(\"should hint after =\\\"\", function () {\n                // After baseline-shift=\"\n                testEditor.setCursorPos({line: 4, ch: 51});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"baseline\");\n            });\n\n            it(\"should hint after first character\", function () {\n                // After baseline-shift=\"b\n                testEditor.setCursorPos({line: 4, ch: 52});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"baseline\");\n            });\n\n            it(\"should hint in the middle of value\", function () {\n                // After baseline-shift=\"base\n                testEditor.setCursorPos({line: 4, ch: 55});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"baseline\");\n            });\n\n            it(\"should hint at the end of the value\", function () {\n                // After baseline-shift=\"baseline\n                testEditor.setCursorPos({line: 4, ch: 59});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"baseline\");\n            });\n\n            it(\"should hint for first attribute in multiple options\", function () {\n                // After preserveAspectRatio=\"x\n                testEditor.setCursorPos({line: 2, ch: 52});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"xMaxYMax\");\n            });\n\n            it(\"should hint for second value in multiple options\", function () {\n                // After m in meet\n                testEditor.setCursorPos({line: 2, ch: 61});\n                var hintList = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintList, \"meet\");\n            });\n\n            it(\"should hint in middle of value in muliple options with empty query\", function () {\n                // Between xMinYMid and meet\n                testDocument.replaceRange(\" \", {line: 2, ch: 59});\n                testEditor.setCursorPos({ line: 2, ch: 60});\n                var hintLint = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintLint, \"none\");\n            });\n\n            it(\"should hint in middle of value in multiple options with a query\", function () {\n                // Between xMinYMid and meet\n                testDocument.replaceRange(\" sli\", {line: 2, ch: 59});\n                testEditor.setCursorPos({line: 2, ch: 63});\n                var hintLint = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hintLint, \"slice\");\n            });\n\n            it(\"should NOT hint in case cursor is out of right quote\", function () {\n                // After meet\"\n                testEditor.setCursorPos({line: 2, ch: 65});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should NOT hint in an invalid tag\", function () {\n                // After fill=\" in < rect\n                testDocument.replaceRange(\" \", {line: 4, ch: 5});\n                testEditor.setCursorPos({line: 4, ch: 42});\n                expectNoHints(SVGCodeHints.hintProvider);\n            });\n\n            it(\"should exclude a value if it is already been used\", function () {\n                // Between xMinYMid and meet\n                testDocument.replaceRange(\" \", {line: 2, ch: 59});\n                testEditor.setCursorPos({ line: 2, ch: 60});\n                var hintLint = expectHints(SVGCodeHints.hintProvider);\n                verifyHintsExcluded(hintLint, \"xMinYMin\");\n                verifyHintsExcluded(hintLint, \"meet\");\n            });\n\n            it(\"should NOT exclude current query from hints\", function () {\n                var hintList, hints;\n\n                // After xMinYMid\n                testDocument.replaceRange(\" xMax\", {line: 2, ch: 59});\n                testEditor.setCursorPos({line: 2, ch: 64});\n                hintList = expectHints(SVGCodeHints.hintProvider);\n                hints = extractHintList(hintList);\n                expect(hints.indexOf(\"xMaxYMax\")).not.toBe(-1);\n            });\n        });\n\n        describe(\"Color names and swatches\", function () {\n            it(\"should show color swatches\", function () {\n                // After color=\"\n                testEditor.setCursorPos({line: 4, ch: 117});\n                var hints = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hints, \"aliceblue\"); // first hint should be aliceblue\n                expect(hints[0].find(\".color-swatch\").length).toBe(1);\n                // CEF 2623 will output \"aliceblue\" whereas earlier versions give \"rgb(240, 248, 255)\",\n                // so we need this ugly hack to make sure this test passes on both\n                expect(hints[0].find(\".color-swatch\").css(\"backgroundColor\")).toMatch(/^rgb\\(240, 248, 255\\)$|aliceblue/);\n            });\n\n            it(\"should always include transparent and currentColor and they should not have a swatch, but class no-swatch-margin\", function () {\n                // After color='rent\n                testEditor.setCursorPos({line: 5, ch: 113});\n                var hints = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hints, \"currentColor\"); // first hint should be currentColor\n                expect(hints[0].find(\".color-swatch\").length).toBe(0); // no swatch for currentColor\n                expect(hints[2].find(\".color-swatch\").length).toBe(0); // no swatch for transparent\n                expect(hints[0].hasClass(\"no-swatch-margin\")).toBeTruthy(); // no-swatch-margin applied to currentColor\n                expect(hints[2].hasClass(\"no-swatch-margin\")).toBeTruthy(); // no-swatch-margin applied to transparent\n            });\n\n            it(\"should remove class no-swatch-margin from transparent if it's the only one in the list\", function () {\n                // After fill='transparent\n                testEditor.setCursorPos({line: 5, ch: 132});\n                var hints = expectHints(SVGCodeHints.hintProvider);\n                verifyHints(hints, \"transparent\");\n                expect(hints.length).toBe(1); // transparent should be the only hint\n                expect(hints[0].find(\".color-swatch\").length).toBe(0); // no swatch for transparent\n                expect(hints[0].hasClass(\"no-swatch-margin\")).toBeFalsy(); // no-swatch-margin not applied to transparent\n            });\n        });\n\n        describe(\"Tag Insertion\", function () {\n            it(\"should insert if query is empty\", function () {\n                // After < inside <g>\n                testDocument.replaceRange(\"<\", { line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 9});\n                selectHint(SVGCodeHints.hintProvider, \"a\");\n                expectTokenAt({line: 7, ch: 10}, \"a\", \"tag\");\n                expectCursorAt({line: 7, ch: 10});\n            });\n\n            it(\"should insert if query is one character long\", function () {\n                // After <d inside <g>\n                testDocument.replaceRange(\"<d\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 10});\n                selectHint(SVGCodeHints.hintProvider, \"defs\");\n                expectTokenAt({line: 7, ch: 11}, \"defs\", \"tag\");\n                expectCursorAt({line: 7, ch: 13});\n            });\n\n            it(\"should insert if query is complete\", function () {\n                // After <defs inside <g>\n                testDocument.replaceRange(\"<defs\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 13});\n                selectHint(SVGCodeHints.hintProvider, \"defs\");\n                expectTokenAt({line: 7, ch: 13}, \"defs\", \"tag\");\n                expectCursorAt({line: 7, ch: 13});\n            });\n        });\n\n        describe(\"Attribute Insertion\", function () {\n            it(\"should insert if query is empty\", function () {\n                // After <defs+space inside <g>\n                testDocument.replaceRange(\"<defs \", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 14});\n                selectHint(SVGCodeHints.hintProvider, \"alignment-baseline\");\n                expectTokenAt({line: 7, ch: 32}, \"alignment-baseline\", \"attribute\");\n                expectTokenAt({line: 7, ch: 33}, \"=\", null);\n                expectTokenAt({line: 7, ch: 35}, \"\\\"\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 34});\n            });\n\n            it(\"should insert if query is one character long\", function () {\n                // After <defs b inside <g>\n                testDocument.replaceRange(\"<defs b\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 15});\n                selectHint(SVGCodeHints.hintProvider, \"baseline-shift\");\n                expectTokenAt({line: 7, ch: 28}, \"baseline-shift\", \"attribute\");\n                expectTokenAt({line: 7, ch: 29}, \"=\", null);\n                expectTokenAt({line: 7, ch: 31}, \"\\\"\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 30});\n            });\n\n            it(\"should insert if query is complete\", function () {\n                // After <defs clip-path inside <g>\n                testDocument.replaceRange(\"<defs clip-path\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 23});\n                selectHint(SVGCodeHints.hintProvider, \"clip-path\");\n                expectTokenAt({line: 7, ch: 23}, \"clip-path\", \"attribute\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 26}, \"\\\"\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 25});\n            });\n\n            it(\"should NOT overide =\", function () {\n                // Between clip-path and \"inherit\" in <g>\n                testDocument.replaceRange(\"<defs clip-path=\\\"inherit\\\"\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 18});\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                selectHint(SVGCodeHints.hintProvider, \"clip-rule\");\n                expectTokenAt({line: 7, ch: 23}, \"clip-rule\", \"attribute\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectCursorAt({line: 7, ch: 23});\n            });\n        });\n\n        describe(\"Value Insertion\", function () {\n            it(\"should insert if = is typed after an attribute\", function () {\n                // after clip-path= inside <g>\n                testDocument.replaceRange(\"<defs clip-path=\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 24});\n                selectHint(SVGCodeHints.hintProvider, \"inherit\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 33}, \"\\\"inherit\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 33});\n            });\n\n            it(\"should insert if =\\\" is typed after an attribute\", function () {\n                // After clip-path=\" inside <g>\n                testDocument.replaceRange(\"<defs clip-path=\\\"\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 25});\n                selectHint(SVGCodeHints.hintProvider, \"inherit\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 33}, \"\\\"inherit\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 33});\n            });\n\n            it(\"should insert if =' is typed after an attribute\", function () {\n                // After =' inside <g>\n                testDocument.replaceRange(\"<defs clip-path='\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 25});\n                selectHint(SVGCodeHints.hintProvider, \"inherit\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 33}, \"'inherit'\", \"string\");\n                expectCursorAt({line: 7, ch: 33});\n            });\n\n            it(\"should insert if first character is typed after =\\\"\", function () {\n                // After clip-path=\"i inside <g>\n                testDocument.replaceRange(\"<defs clip-path=\\\"i\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 26});\n                selectHint(SVGCodeHints.hintProvider, \"inherit\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 33}, \"\\\"inherit\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 33});\n            });\n\n            it(\"should insert if first character is typed after ='\", function () {\n                // After clip-path='i inside <g>\n                testDocument.replaceRange(\"<defs clip-path='i\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 26});\n                selectHint(SVGCodeHints.hintProvider, \"inherit\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 33}, \"'inherit'\", \"string\");\n                expectCursorAt({line: 7, ch: 33});\n            });\n\n            it(\"should insert if we are in middle of query after =\\\"\", function () {\n                // After clip-path=\"inhe inside <g>\n                testDocument.replaceRange(\"<defs clip-path=\\\"inhe\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 29});\n                selectHint(SVGCodeHints.hintProvider, \"inherit\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 33}, \"\\\"inherit\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 33});\n            });\n\n            it(\"should insert if we are in middle of query after ='\", function () {\n                // After clip-path='inhe inside <g>\n                testDocument.replaceRange(\"<defs clip-path='inhe\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 29});\n                selectHint(SVGCodeHints.hintProvider, \"inherit\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 33}, \"'inherit'\", \"string\");\n                expectCursorAt({line: 7, ch: 33});\n            });\n\n            it(\"should insert if we are in the end of value after ='\", function () {\n                // Before last ' in clip-path='inherit' inside <g>\n                testDocument.replaceRange(\"<defs clip-path='inherit'\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 32});\n                selectHint(SVGCodeHints.hintProvider, \"inherit\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 33}, \"'inherit'\", \"string\");\n                expectCursorAt({line: 7, ch: 33});\n            });\n\n            it(\"should insert if we are in the end of value after =\\\"\", function () {\n                // Before last \" in clip-path=\"inherit\" inside <g>\n                testDocument.replaceRange(\"<defs clip-path=\\\"inherit\\\"\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 32});\n                selectHint(SVGCodeHints.hintProvider, \"inherit\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 33}, \"\\\"inherit\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 33});\n            });\n\n            it(\"should insert value to left in a multiple options attribute\", function () {\n                // Between \"\" in transform=\"\" inside <g>\n                testDocument.replaceRange(\"<rect transform=\\\"\\\"\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 25});\n                selectHint(SVGCodeHints.hintProvider, \"matrix()\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 34}, \"\\\"matrix()\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 34});\n            });\n\n            it(\"should insert value to the right in a multiple options attribute\", function () {\n                // After \"matrix() \" inside <g>\n                testDocument.replaceRange(\"<rect transform=\\\"matrix() \\\"\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 34});\n                selectHint(SVGCodeHints.hintProvider, \"rotate()\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 34}, \"\\\"matrix() rotate()\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 43});\n            });\n\n            it(\"should insert value in the middle in a multiple options attribute\", function () {\n                // Between matrix() and rotate() in \"matrix()  rotate()\"\n                testDocument.replaceRange(\"<rect transform=\\\"matrix()  rotate()\\\"\", {line: 7, ch: 8});\n                testEditor.setCursorPos({line: 7, ch: 34});\n                selectHint(SVGCodeHints.hintProvider, \"scale()\");\n                expectTokenAt({line: 7, ch: 24}, \"=\", null);\n                expectTokenAt({line: 7, ch: 34}, \"\\\"matrix() scale() rotate()\\\"\", \"string\");\n                expectCursorAt({line: 7, ch: 41});\n            });\n        });\n    });\n});\n"],"file":"unittests.js"}