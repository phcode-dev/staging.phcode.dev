{"version":3,"sources":["thirdparty/CodeMirror/mode/verilog/verilog.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","statementIndentUnit","dontAlignCalls","compilerDirectivesUseRegularIndentation","noIndentKeywords","multiLineStrings","hooks","words","str","obj","split","i","length","keywords","isOperatorChar","isBracketChar","unsignedNumber","decimalLiteral","binaryLiteral","octLiteral","hexLiteral","realLiteral","closingBracketOrWord","closingBracket","compilerDirectiveRegex","RegExp","compilerDirectiveBeginRegex","compilerDirectiveEndRegex","curPunc","curKeyword","blockKeywords","openClose","keyword","undefined","statementKeywords","tokenBase","stream","state","ch","peek","style","test","next","eatWhile","cur","current","startsWith","endsWith","keywordClose","substr","eatSpace","withSpace","backUp","tokenize","tokenString","eat","tokenComment","skipToEnd","match","quote","escaped","end","maybeEnd","Context","indented","column","type","scopekind","align","prev","this","pushContext","col","indent","c","context","popContext","t","isClosing","text","contextClosing","closingKeywords","isInsideScopeKind","ctx","buildElectricInputRegEx","allClosings","re","closings","j","push","join","electricInput","startState","basecolumn","compilerDirectiveIndented","startOfLine","token","sol","indentation","isClosingAssignment","close","textAfter","Pass","fromHook","firstChar","charAt","closing","possibleClosing","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME","name","tlvIdentifierStyle","|",">","$","$$","?$","?*","-","/","/-","@","@-","@++","@+=","@+=-","@--","@-=","%+","%-","%",">>","<<","<>","#","^","^^","^!","*","**","\\","\"","tlvScopePrefixChars","?","tlvIndentUnit","tlvTrackStatements","tlvIdentMatch","tlvFirstLevelIndentMatch","tlvLineIndentationMatch","tlvCommentMatch","tlvScopeStyle","depth","tlvIndentationStyle","tlvIdentNext","tlvInBlockComment","string","tlvCodeActive","pos","blankline","chPos","bodyString","slice","pop","tlvNextIndent","beginStatement","prefix","mnemonic","hasOwnProperty","eol"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"verilog\", function(config, parserConfig) {\n\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      // compilerDirectivesUseRegularIndentation - If set, Compiler directive\n      // indentation follows the same rules as everything else. Otherwise if\n      // false, compiler directives will track their own indentation.\n      // For example, `ifdef nested inside another `ifndef will be indented,\n      // but a `ifdef inside a function block may not be indented.\n      compilerDirectivesUseRegularIndentation = parserConfig.compilerDirectivesUseRegularIndentation,\n      noIndentKeywords = parserConfig.noIndentKeywords || [],\n      multiLineStrings = parserConfig.multiLineStrings,\n      hooks = parserConfig.hooks || {};\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  /**\n   * Keywords from IEEE 1800-2012\n   */\n  var keywords = words(\n    \"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind \" +\n    \"bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config \" +\n    \"const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable \" +\n    \"dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup \" +\n    \"endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask \" +\n    \"enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin \" +\n    \"function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import \" +\n    \"incdir include initial inout input inside instance int integer interconnect interface intersect join join_any \" +\n    \"join_none large let liblist library local localparam logic longint macromodule matches medium modport module \" +\n    \"nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed \" +\n    \"parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup \" +\n    \"pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg \" +\n    \"reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime \" +\n    \"s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify \" +\n    \"specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on \" +\n    \"table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior \" +\n    \"trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void \" +\n    \"wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor\");\n\n  /** Operators from IEEE 1800-2012\n     unary_operator ::=\n       + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n     binary_operator ::=\n       + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n       | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n       | -> | <->\n     inc_or_dec_operator ::= ++ | --\n     unary_module_path_operator ::=\n       ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n     binary_module_path_operator ::=\n       == | != | && | || | & | | | ^ | ^~ | ~^\n  */\n  var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:<>]/;\n  var isBracketChar = /[\\[\\]{}()]/;\n\n  var unsignedNumber = /\\d[0-9_]*/;\n  var decimalLiteral = /\\d*\\s*'s?d\\s*\\d[0-9_]*/i;\n  var binaryLiteral = /\\d*\\s*'s?b\\s*[xz01][xz01_]*/i;\n  var octLiteral = /\\d*\\s*'s?o\\s*[xz0-7][xz0-7_]*/i;\n  var hexLiteral = /\\d*\\s*'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n  var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n\n  var closingBracketOrWord = /^((`?\\w+)|[)}\\]])/;\n  var closingBracket = /[)}\\]]/;\n  var compilerDirectiveRegex      = new RegExp(\n    \"^(`(?:ifdef|ifndef|elsif|else|endif|undef|undefineall|define|include|begin_keywords|celldefine|default|\" +\n    \"nettype|end_keywords|endcelldefine|line|nounconnected_drive|pragma|resetall|timescale|unconnected_drive))\\\\b\");\n  var compilerDirectiveBeginRegex = /^(`(?:ifdef|ifndef|elsif|else))\\b/;\n  var compilerDirectiveEndRegex   = /^(`(?:elsif|else|endif))\\b/;\n\n  var curPunc;\n  var curKeyword;\n\n  // Block openings which are closed by a matching keyword in the form of (\"end\" + keyword)\n  // E.g. \"task\" => \"endtask\"\n  var blockKeywords = words(\n    \"case checker class clocking config function generate interface module package \" +\n    \"primitive program property specify sequence table task\"\n  );\n\n  // Opening/closing pairs\n  var openClose = {};\n  for (var keyword in blockKeywords) {\n    openClose[keyword] = \"end\" + keyword;\n  }\n  openClose[\"begin\"] = \"end\";\n  openClose[\"casex\"] = \"endcase\";\n  openClose[\"casez\"] = \"endcase\";\n  openClose[\"do\"   ] = \"while\";\n  openClose[\"fork\" ] = \"join;join_any;join_none\";\n  openClose[\"covergroup\"] = \"endgroup\";\n  openClose[\"macro_begin\"] = \"macro_end\";\n\n  for (var i in noIndentKeywords) {\n    var keyword = noIndentKeywords[i];\n    if (openClose[keyword]) {\n      openClose[keyword] = undefined;\n    }\n  }\n\n  // Keywords which open statements that are ended with a semi-colon\n  var statementKeywords = words(\"always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while extern typedef\");\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek(), style;\n    if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;\n    if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)\n      return style;\n\n    if (/[,;:\\.]/.test(ch)) {\n      curPunc = stream.next();\n      return null;\n    }\n    if (isBracketChar.test(ch)) {\n      curPunc = stream.next();\n      return \"bracket\";\n    }\n    // Macros (tick-defines)\n    if (ch == '`') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        var cur = stream.current();\n        curKeyword = cur;\n        // Macros that end in _begin, are start of block and end with _end\n        if (cur.startsWith(\"`uvm_\") && cur.endsWith(\"_begin\")) {\n          var keywordClose = curKeyword.substr(0,curKeyword.length - 5) + \"end\";\n          openClose[cur] = keywordClose;\n          curPunc = \"newblock\";\n        } else {\n          stream.eatSpace();\n          if (stream.peek() == '(') {\n            // Check if this is a block\n            curPunc = \"newmacro\";\n          }\n          var withSpace = stream.current();\n          // Move the stream back before the spaces\n          stream.backUp(withSpace.length - cur.length);\n        }\n        return \"def\";\n      } else {\n        return null;\n      }\n    }\n    // System calls\n    if (ch == '$') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"meta\";\n      } else {\n        return null;\n      }\n    }\n    // Time literals\n    if (ch == '#') {\n      stream.next();\n      stream.eatWhile(/[\\d_.]/);\n      return \"def\";\n    }\n    // Event\n    if (ch == '@') {\n      stream.next();\n      stream.eatWhile(/[@]/);\n      return \"def\";\n    }\n    // Strings\n    if (ch == '\"') {\n      stream.next();\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    // Comments\n    if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n\n    // Numeric literals\n    if (stream.match(realLiteral) ||\n        stream.match(decimalLiteral) ||\n        stream.match(binaryLiteral) ||\n        stream.match(octLiteral) ||\n        stream.match(hexLiteral) ||\n        stream.match(unsignedNumber) ||\n        stream.match(realLiteral)) {\n      return \"number\";\n    }\n\n    // Operators\n    if (stream.eatWhile(isOperatorChar)) {\n      curPunc = stream.current();\n      return \"meta\";\n    }\n\n    // Keywords / plain variables\n    if (stream.eatWhile(/[\\w\\$_]/)) {\n      var cur = stream.current();\n      if (keywords[cur]) {\n        if (openClose[cur]) {\n          curPunc = \"newblock\";\n          if (cur === \"fork\") {\n            // Fork can be a statement instead of block in cases of:\n            // \"disable fork;\" and \"wait fork;\" (trailing semicolon)\n            stream.eatSpace()\n            if (stream.peek() == ';') {\n              curPunc = \"newstatement\";\n            }\n            stream.backUp(stream.current().length - cur.length);\n          }\n        }\n        if (statementKeywords[cur]) {\n          curPunc = \"newstatement\";\n        }\n        curKeyword = cur;\n        return \"keyword\";\n      }\n      return \"variable\";\n    }\n\n    stream.next();\n    return null;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, scopekind, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.scopekind = scopekind;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type, scopekind) {\n    var indent = state.indented;\n    var c = new Context(indent, col, type, scopekind ? scopekind : \"\", null, state.context);\n    return state.context = c;\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") {\n      state.indented = state.context.indented;\n    }\n    return state.context = state.context.prev;\n  }\n\n  function isClosing(text, contextClosing) {\n    if (text == contextClosing) {\n      return true;\n    } else {\n      // contextClosing may be multiple keywords separated by ;\n      var closingKeywords = contextClosing.split(\";\");\n      for (var i in closingKeywords) {\n        if (text == closingKeywords[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  function isInsideScopeKind(ctx, scopekind) {\n    if (ctx == null) {\n      return false;\n    }\n    if (ctx.scopekind === scopekind) {\n      return true;\n    }\n    return isInsideScopeKind(ctx.prev, scopekind);\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on any bracket char: {}()[]\n    // or on a match of any of the block closing keywords, at\n    // the end of a line\n    var allClosings = [];\n    for (var i in openClose) {\n      if (openClose[i]) {\n        var closings = openClose[i].split(\";\");\n        for (var j in closings) {\n          allClosings.push(closings[j]);\n        }\n      }\n    }\n    var re = new RegExp(\"[{}()\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n    return re;\n  }\n\n  // Interface\n  return {\n\n    // Regex to force current line to reindent\n    electricInput: buildElectricInputRegEx(),\n\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", \"top\", false),\n        indented: 0,\n        compilerDirectiveIndented: 0,\n        startOfLine: true\n      };\n      if (hooks.startState) hooks.startState(state);\n      return state;\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (hooks.token) {\n        // Call hook, with an optional return value of a style to override verilog styling.\n        var style = hooks.token(stream, state);\n        if (style !== undefined) {\n          return style;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      curKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\" || style == \"variable\") {\n        if (((curPunc === \"=\") || (curPunc === \"<=\")) && !isInsideScopeKind(ctx, \"assignment\")) {\n          // '<=' could be nonblocking assignment or lessthan-equals (which shouldn't cause indent)\n          //      Search through the context to see if we are already in an assignment.\n          // '=' could be inside port declaration with comma or ')' afterward, or inside for(;;) block.\n          pushContext(state, stream.column() + curPunc.length, \"assignment\", \"assignment\");\n          if (ctx.align == null) ctx.align = true;\n        }\n        return style;\n      }\n      if (ctx.align == null) ctx.align = true;\n\n      var isClosingAssignment = ctx.type == \"assignment\" &&\n        closingBracket.test(curPunc) && ctx.prev && ctx.prev.type === curPunc;\n      if (curPunc == ctx.type || isClosingAssignment) {\n        if (isClosingAssignment) {\n          ctx = popContext(state);\n        }\n        ctx = popContext(state);\n        if (curPunc == \")\") {\n          // Handle closing macros, assuming they could have a semicolon or begin/end block inside.\n          if (ctx && (ctx.type === \"macro\")) {\n            ctx = popContext(state);\n            while (ctx && (ctx.type == \"statement\" || ctx.type == \"assignment\")) ctx = popContext(state);\n          }\n        } else if (curPunc == \"}\") {\n          // Handle closing statements like constraint block: \"foreach () {}\" which\n          // do not have semicolon at end.\n          if (ctx && (ctx.type === \"statement\")) {\n            while (ctx && (ctx.type == \"statement\")) ctx = popContext(state);\n          }\n        }\n      } else if (((curPunc == \";\" || curPunc == \",\") && (ctx.type == \"statement\" || ctx.type == \"assignment\")) ||\n               (ctx.type && isClosing(curKeyword, ctx.type))) {\n        ctx = popContext(state);\n        while (ctx && (ctx.type == \"statement\" || ctx.type == \"assignment\")) ctx = popContext(state);\n      } else if (curPunc == \"{\") {\n        pushContext(state, stream.column(), \"}\");\n      } else if (curPunc == \"[\") {\n        pushContext(state, stream.column(), \"]\");\n      } else if (curPunc == \"(\") {\n        pushContext(state, stream.column(), \")\");\n      } else if (ctx && ctx.type == \"endcase\" && curPunc == \":\") {\n        pushContext(state, stream.column(), \"statement\", \"case\");\n      } else if (curPunc == \"newstatement\") {\n        pushContext(state, stream.column(), \"statement\", curKeyword);\n      } else if (curPunc == \"newblock\") {\n        if (curKeyword == \"function\" && ctx && (ctx.type == \"statement\" || ctx.type == \"endgroup\")) {\n          // The 'function' keyword can appear in some other contexts where it actually does not\n          // indicate a function (import/export DPI and covergroup definitions).\n          // Do nothing in this case\n        } else if (curKeyword == \"task\" && ctx && ctx.type == \"statement\") {\n          // Same thing for task\n        } else if (curKeyword == \"class\" && ctx && ctx.type == \"statement\") {\n          // Same thing for class (e.g. typedef)\n        } else {\n          var close = openClose[curKeyword];\n          pushContext(state, stream.column(), close, curKeyword);\n        }\n      } else if (curPunc == \"newmacro\" || (curKeyword && curKeyword.match(compilerDirectiveRegex))) {\n        if (curPunc == \"newmacro\") {\n          // Macros (especially if they have parenthesis) potentially have a semicolon\n          // or complete statement/block inside, and should be treated as such.\n          pushContext(state, stream.column(), \"macro\", \"macro\");\n        }\n        if (curKeyword.match(compilerDirectiveEndRegex)) {\n          state.compilerDirectiveIndented -= statementIndentUnit;\n        }\n        if (curKeyword.match(compilerDirectiveBeginRegex)) {\n          state.compilerDirectiveIndented += statementIndentUnit;\n        }\n      }\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      if (hooks.indent) {\n        var fromHook = hooks.indent(state);\n        if (fromHook >= 0) return fromHook;\n      }\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = false;\n      var possibleClosing = textAfter.match(closingBracketOrWord);\n      if (possibleClosing)\n        closing = isClosing(possibleClosing[0], ctx.type);\n      if (!compilerDirectivesUseRegularIndentation && textAfter.match(compilerDirectiveRegex)) {\n        if (textAfter.match(compilerDirectiveEndRegex)) {\n          return state.compilerDirectiveIndented - statementIndentUnit;\n        }\n        return state.compilerDirectiveIndented;\n      }\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      else if ((closingBracket.test(ctx.type) || ctx.type == \"assignment\")\n        && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);\n      else if (ctx.type == \")\" && !closing) return ctx.indented + statementIndentUnit;\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"indent\"\n  };\n});\n\n  CodeMirror.defineMIME(\"text/x-verilog\", {\n    name: \"verilog\"\n  });\n\n  CodeMirror.defineMIME(\"text/x-systemverilog\", {\n    name: \"verilog\"\n  });\n\n\n\n  // TL-Verilog mode.\n  // See tl-x.org for language spec.\n  // See the mode in action at makerchip.com.\n  // Contact: steve.hoover@redwoodeda.com\n\n  // TLV Identifier prefixes.\n  // Note that sign is not treated separately, so \"+/-\" versions of numeric identifiers\n  // are included.\n  var tlvIdentifierStyle = {\n    \"|\": \"link\",\n    \">\": \"property\",  // Should condition this off for > TLV 1c.\n    \"$\": \"variable\",\n    \"$$\": \"variable\",\n    \"?$\": \"qualifier\",\n    \"?*\": \"qualifier\",\n    \"-\": \"hr\",\n    \"/\": \"property\",\n    \"/-\": \"property\",\n    \"@\": \"variable-3\",\n    \"@-\": \"variable-3\",\n    \"@++\": \"variable-3\",\n    \"@+=\": \"variable-3\",\n    \"@+=-\": \"variable-3\",\n    \"@--\": \"variable-3\",\n    \"@-=\": \"variable-3\",\n    \"%+\": \"tag\",\n    \"%-\": \"tag\",\n    \"%\": \"tag\",\n    \">>\": \"tag\",\n    \"<<\": \"tag\",\n    \"<>\": \"tag\",\n    \"#\": \"tag\",  // Need to choose a style for this.\n    \"^\": \"attribute\",\n    \"^^\": \"attribute\",\n    \"^!\": \"attribute\",\n    \"*\": \"variable-2\",\n    \"**\": \"variable-2\",\n    \"\\\\\": \"keyword\",\n    \"\\\"\": \"comment\"\n  };\n\n  // Lines starting with these characters define scope (result in indentation).\n  var tlvScopePrefixChars = {\n    \"/\": \"beh-hier\",\n    \">\": \"beh-hier\",\n    \"-\": \"phys-hier\",\n    \"|\": \"pipe\",\n    \"?\": \"when\",\n    \"@\": \"stage\",\n    \"\\\\\": \"keyword\"\n  };\n  var tlvIndentUnit = 3;\n  var tlvTrackStatements = false;\n  var tlvIdentMatch = /^([~!@#\\$%\\^&\\*-\\+=\\?\\/\\\\\\|'\"<>]+)([\\d\\w_]*)/;  // Matches an identifier.\n  // Note that ':' is excluded, because of it's use in [:].\n  var tlvFirstLevelIndentMatch = /^[! ]  /;\n  var tlvLineIndentationMatch = /^[! ] */;\n  var tlvCommentMatch = /^\\/[\\/\\*]/;\n\n\n  // Returns a style specific to the scope at the given indentation column.\n  // Type is one of: \"indent\", \"scope-ident\", \"before-scope-ident\".\n  function tlvScopeStyle(state, indentation, type) {\n    // Begin scope.\n    var depth = indentation / tlvIndentUnit;  // TODO: Pass this in instead.\n    return \"tlv-\" + state.tlvIndentationStyle[depth] + \"-\" + type;\n  }\n\n  // Return true if the next thing in the stream is an identifier with a mnemonic.\n  function tlvIdentNext(stream) {\n    var match;\n    return (match = stream.match(tlvIdentMatch, false)) && match[2].length > 0;\n  }\n\n  CodeMirror.defineMIME(\"text/x-tlv\", {\n    name: \"verilog\",\n\n    hooks: {\n\n      electricInput: false,\n\n\n      // Return undefined for verilog tokenizing, or style for TLV token (null not used).\n      // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting\n      // can be enabled with the definition of cm-tlv-* styles, including highlighting for:\n      //   - M4 tokens\n      //   - TLV scope indentation\n      //   - Statement delimitation (enabled by tlvTrackStatements)\n      token: function(stream, state) {\n        var style = undefined;\n        var match;  // Return value of pattern matches.\n\n        // Set highlighting mode based on code region (TLV or SV).\n        if (stream.sol() && ! state.tlvInBlockComment) {\n          // Process region.\n          if (stream.peek() == '\\\\') {\n            style = \"def\";\n            stream.skipToEnd();\n            if (stream.string.match(/\\\\SV/)) {\n              state.tlvCodeActive = false;\n            } else if (stream.string.match(/\\\\TLV/)){\n              state.tlvCodeActive = true;\n            }\n          }\n          // Correct indentation in the face of a line prefix char.\n          if (state.tlvCodeActive && stream.pos == 0 &&\n              (state.indented == 0) && (match = stream.match(tlvLineIndentationMatch, false))) {\n            state.indented = match[0].length;\n          }\n\n          // Compute indentation state:\n          //   o Auto indentation on next line\n          //   o Indentation scope styles\n          var indented = state.indented;\n          var depth = indented / tlvIndentUnit;\n          if (depth <= state.tlvIndentationStyle.length) {\n            // not deeper than current scope\n\n            var blankline = stream.string.length == indented;\n            var chPos = depth * tlvIndentUnit;\n            if (chPos < stream.string.length) {\n              var bodyString = stream.string.slice(chPos);\n              var ch = bodyString[0];\n              if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) &&\n                  tlvIdentifierStyle[match[1]])) {\n                // This line begins scope.\n                // Next line gets indented one level.\n                indented += tlvIndentUnit;\n                // Style the next level of indentation (except non-region keyword identifiers,\n                //   which are statements themselves)\n                if (!(ch == \"\\\\\" && chPos > 0)) {\n                  state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];\n                  if (tlvTrackStatements) {state.statementComment = false;}\n                  depth++;\n                }\n              }\n            }\n            // Clear out deeper indentation levels unless line is blank.\n            if (!blankline) {\n              while (state.tlvIndentationStyle.length > depth) {\n                state.tlvIndentationStyle.pop();\n              }\n            }\n          }\n          // Set next level of indentation.\n          state.tlvNextIndent = indented;\n        }\n\n        if (state.tlvCodeActive) {\n          // Highlight as TLV.\n\n          var beginStatement = false;\n          if (tlvTrackStatements) {\n            // This starts a statement if the position is at the scope level\n            // and we're not within a statement leading comment.\n            beginStatement =\n                   (stream.peek() != \" \") &&   // not a space\n                   (style === undefined) &&    // not a region identifier\n                   !state.tlvInBlockComment && // not in block comment\n                   //!stream.match(tlvCommentMatch, false) && // not comment start\n                   (stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit);  // at scope level\n            if (beginStatement) {\n              if (state.statementComment) {\n                // statement already started by comment\n                beginStatement = false;\n              }\n              state.statementComment =\n                   stream.match(tlvCommentMatch, false); // comment start\n            }\n          }\n\n          var match;\n          if (style !== undefined) {\n            // Region line.\n            style += \" \" + tlvScopeStyle(state, 0, \"scope-ident\")\n          } else if (((stream.pos / tlvIndentUnit) < state.tlvIndentationStyle.length) &&\n                     (match = stream.match(stream.sol() ? tlvFirstLevelIndentMatch : /^   /))) {\n            // Indentation\n            style = // make this style distinct from the previous one to prevent\n                    // codemirror from combining spans\n                    \"tlv-indent-\" + (((stream.pos % 2) == 0) ? \"even\" : \"odd\") +\n                    // and style it\n                    \" \" + tlvScopeStyle(state, stream.pos - tlvIndentUnit, \"indent\");\n            // Style the line prefix character.\n            if (match[0].charAt(0) == \"!\") {\n              style += \" tlv-alert-line-prefix\";\n            }\n            // Place a class before a scope identifier.\n            if (tlvIdentNext(stream)) {\n              style += \" \" + tlvScopeStyle(state, stream.pos, \"before-scope-ident\");\n            }\n          } else if (state.tlvInBlockComment) {\n            // In a block comment.\n            if (stream.match(/^.*?\\*\\//)) {\n              // Exit block comment.\n              state.tlvInBlockComment = false;\n              if (tlvTrackStatements && !stream.eol()) {\n                // Anything after comment is assumed to be real statement content.\n                state.statementComment = false;\n              }\n            } else {\n              stream.skipToEnd();\n            }\n            style = \"comment\";\n          } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {\n            // Start comment.\n            if (match[0] == \"//\") {\n              // Line comment.\n              stream.skipToEnd();\n            } else {\n              // Block comment.\n              state.tlvInBlockComment = true;\n            }\n            style = \"comment\";\n          } else if (match = stream.match(tlvIdentMatch)) {\n            // looks like an identifier (or identifier prefix)\n            var prefix = match[1];\n            var mnemonic = match[2];\n            if (// is identifier prefix\n                tlvIdentifierStyle.hasOwnProperty(prefix) &&\n                // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)\n                (mnemonic.length > 0 || stream.eol())) {\n              style = tlvIdentifierStyle[prefix];\n              if (stream.column() == state.indented) {\n                // Begin scope.\n                style += \" \" + tlvScopeStyle(state, stream.column(), \"scope-ident\")\n              }\n            } else {\n              // Just swallow one character and try again.\n              // This enables subsequent identifier match with preceding symbol character, which\n              //   is legal within a statement.  (E.g., !$reset).  It also enables detection of\n              //   comment start with preceding symbols.\n              stream.backUp(stream.current().length - 1);\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^\\t+/)) {\n            // Highlight tabs, which are illegal.\n            style = \"tlv-tab\";\n          } else if (stream.match(/^[\\[\\]{}\\(\\);\\:]+/)) {\n            // [:], (), {}, ;.\n            style = \"meta\";\n          } else if (match = stream.match(/^[mM]4([\\+_])?[\\w\\d_]*/)) {\n            // m4 pre proc\n            style = (match[1] == \"+\") ? \"tlv-m4-plus\" : \"tlv-m4\";\n          } else if (stream.match(/^ +/)){\n            // Skip over spaces.\n            if (stream.eol()) {\n              // Trailing spaces.\n              style = \"error\";\n            } else {\n              // Non-trailing spaces.\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^[\\w\\d_]+/)) {\n            // alpha-numeric token.\n            style = \"number\";\n          } else {\n            // Eat the next char w/ no formatting.\n            stream.next();\n            style = \"tlv-default\";\n          }\n          if (beginStatement) {\n            style += \" tlv-statement\";\n          }\n        } else {\n          if (stream.match(/^[mM]4([\\w\\d_]*)/)) {\n            // m4 pre proc\n            style = \"tlv-m4\";\n          }\n        }\n        return style;\n      },\n\n      indent: function(state) {\n        return (state.tlvCodeActive == true) ? state.tlvNextIndent : -1;\n      },\n\n      startState: function(state) {\n        state.tlvIndentationStyle = [];  // Styles to use for each level of indentation.\n        state.tlvCodeActive = true;  // True when we're in a TLV region (and at beginning of file).\n        state.tlvNextIndent = -1;    // The number of spaces to autoindent the next line if tlvCodeActive.\n        state.tlvInBlockComment = false;  // True inside /**/ comment.\n        if (tlvTrackStatements) {\n          state.statementComment = false;  // True inside a statement's header comment.\n        }\n      }\n\n    }\n  });\n});\n"],"file":"verilog.js"}