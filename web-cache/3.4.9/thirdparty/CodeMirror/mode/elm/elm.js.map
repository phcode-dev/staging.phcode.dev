{"version":3,"sources":["thirdparty/CodeMirror/mode/elm/elm.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","switchState","source","setState","f","lowerRE","upperRE","innerRE","digitRE","hexRE","symbolRE","specialRE","spacesRE","normal","eatWhile","char","next","test","eat","chompMultiComment","match","chompGlsl","chompChar","chompMultiString","chompSingleString","isDef","pos","skipToEnd","nest","eol","skipTo","wellKnownWords","case","of","as","if","then","else","let","in","type","alias","where","import","exposing","port","startState","copyState","s","lineComment","token","stream","state","word","current","hasOwnProperty","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function() {\n\n    function switchState(source, setState, f)\n    {\n      setState(f);\n      return f(source, setState);\n    }\n\n    var lowerRE = /[a-z]/;\n    var upperRE = /[A-Z]/;\n    var innerRE = /[a-zA-Z0-9_]/;\n\n    var digitRE = /[0-9]/;\n    var hexRE = /[0-9A-Fa-f]/;\n    var symbolRE = /[-&*+.\\\\/<>=?^|:]/;\n    var specialRE = /[(),[\\]{}]/;\n    var spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\n    function normal()\n    {\n      return function(source, setState)\n      {\n        if (source.eatWhile(spacesRE))\n        {\n          return null;\n        }\n\n        var char = source.next();\n\n        if (specialRE.test(char))\n        {\n          return (char === '{' && source.eat('-'))\n            ? switchState(source, setState, chompMultiComment(1))\n            : (char === '[' && source.match('glsl|'))\n                ? switchState(source, setState, chompGlsl)\n                : 'builtin';\n        }\n\n        if (char === '\\'')\n        {\n          return switchState(source, setState, chompChar);\n        }\n\n        if (char === '\"')\n        {\n          return source.eat('\"')\n            ? source.eat('\"')\n                ? switchState(source, setState, chompMultiString)\n                : 'string'\n            : switchState(source, setState, chompSingleString);\n        }\n\n        if (upperRE.test(char))\n        {\n          source.eatWhile(innerRE);\n          return 'variable-2';\n        }\n\n        if (lowerRE.test(char))\n        {\n          var isDef = source.pos === 1;\n          source.eatWhile(innerRE);\n          return isDef ? \"def\" : \"variable\";\n        }\n\n        if (digitRE.test(char))\n        {\n          if (char === '0')\n          {\n            if (source.eat(/[xX]/))\n            {\n              source.eatWhile(hexRE); // should require at least 1\n              return \"number\";\n            }\n          }\n          else\n          {\n            source.eatWhile(digitRE);\n          }\n          if (source.eat('.'))\n          {\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          if (source.eat(/[eE]/))\n          {\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          return \"number\";\n        }\n\n        if (symbolRE.test(char))\n        {\n          if (char === '-' && source.eat('-'))\n          {\n            source.skipToEnd();\n            return \"comment\";\n          }\n          source.eatWhile(symbolRE);\n          return \"keyword\";\n        }\n\n        if (char === '_')\n        {\n          return \"keyword\";\n        }\n\n        return \"error\";\n      }\n    }\n\n    function chompMultiComment(nest)\n    {\n      if (nest == 0)\n      {\n        return normal();\n      }\n      return function(source, setState)\n      {\n        while (!source.eol())\n        {\n          var char = source.next();\n          if (char == '{' && source.eat('-'))\n          {\n            ++nest;\n          }\n          else if (char == '-' && source.eat('}'))\n          {\n            --nest;\n            if (nest === 0)\n            {\n              setState(normal());\n              return 'comment';\n            }\n          }\n        }\n        setState(chompMultiComment(nest));\n        return 'comment';\n      }\n    }\n\n    function chompMultiString(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '\"' && source.eat('\"') && source.eat('\"'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    function chompSingleString(source, setState)\n    {\n      while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n      if (source.skipTo('\"'))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompChar(source, setState)\n    {\n      while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n      if (source.skipTo(\"'\"))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompGlsl(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '|' && source.eat(']'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    var wellKnownWords = {\n      case: 1,\n      of: 1,\n      as: 1,\n      if: 1,\n      then: 1,\n      else: 1,\n      let: 1,\n      in: 1,\n      type: 1,\n      alias: 1,\n      module: 1,\n      where: 1,\n      import: 1,\n      exposing: 1,\n      port: 1\n    };\n\n    return {\n      startState: function ()  { return { f: normal() }; },\n      copyState:  function (s) { return { f: s.f }; },\n\n      lineComment: '--',\n\n      token: function(stream, state) {\n        var type = state.f(stream, function(s) { state.f = s; });\n        var word = stream.current();\n        return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n      }\n    };\n\n  });\n\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});\n"],"file":"elm.js"}