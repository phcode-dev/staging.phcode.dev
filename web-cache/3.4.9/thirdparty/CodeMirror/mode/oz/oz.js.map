{"version":3,"sources":["thirdparty/CodeMirror/mode/oz/oz.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","conf","wordRegexp","words","RegExp","join","singleOperators","doubleOperators","tripleOperators","middle","end","atoms","commonKeywords","openingKeywords","middleKeywords","endKeywords","tokenBase","stream","state","eatSpace","match","matched","doInCurrentLine","currentIndent","tokenize","tokenFunProc","tokenClass","tokenMeth","ch","next","tokenString","test","peek","skipToEnd","eat","tokenComment","eatWhile","hasPassedFirstStage","maybeEnd","quote","escaped","buildElectricInputRegEx","allClosings","concat","startState","token","sol","indent","textAfter","trueText","replace","indentUnit","fold","electricInput","lineComment","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"oz\", function (conf) {\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var singleOperators = /[\\^@!\\|<>#~\\.\\*\\-\\+\\\\/,=]/;\n  var doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\\\=)|(\\\\=:)|(!!)|(==)|(::)/;\n  var tripleOperators = /(:::)|(\\.\\.\\.)|(=<:)|(>=:)/;\n\n  var middle = [\"in\", \"then\", \"else\", \"of\", \"elseof\", \"elsecase\", \"elseif\", \"catch\",\n    \"finally\", \"with\", \"require\", \"prepare\", \"import\", \"export\", \"define\", \"do\"];\n  var end = [\"end\"];\n\n  var atoms = wordRegexp([\"true\", \"false\", \"nil\", \"unit\"]);\n  var commonKeywords = wordRegexp([\"andthen\", \"at\", \"attr\", \"declare\", \"feat\", \"from\", \"lex\",\n    \"mod\", \"div\", \"mode\", \"orelse\", \"parser\", \"prod\", \"prop\", \"scanner\", \"self\", \"syn\", \"token\"]);\n  var openingKeywords = wordRegexp([\"local\", \"proc\", \"fun\", \"case\", \"class\", \"if\", \"cond\", \"or\", \"dis\",\n    \"choice\", \"not\", \"thread\", \"try\", \"raise\", \"lock\", \"for\", \"suchthat\", \"meth\", \"functor\"]);\n  var middleKeywords = wordRegexp(middle);\n  var endKeywords = wordRegexp(end);\n\n  // Tokenizers\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    // Brackets\n    if(stream.match(/[{}]/)) {\n      return \"bracket\";\n    }\n\n    // Special [] keyword\n    if (stream.match('[]')) {\n        return \"keyword\"\n    }\n\n    // Operators\n    if (stream.match(tripleOperators) || stream.match(doubleOperators)) {\n      return \"operator\";\n    }\n\n    // Atoms\n    if(stream.match(atoms)) {\n      return 'atom';\n    }\n\n    // Opening keywords\n    var matched = stream.match(openingKeywords);\n    if (matched) {\n      if (!state.doInCurrentLine)\n        state.currentIndent++;\n      else\n        state.doInCurrentLine = false;\n\n      // Special matching for signatures\n      if(matched[0] == \"proc\" || matched[0] == \"fun\")\n        state.tokenize = tokenFunProc;\n      else if(matched[0] == \"class\")\n        state.tokenize = tokenClass;\n      else if(matched[0] == \"meth\")\n        state.tokenize = tokenMeth;\n\n      return 'keyword';\n    }\n\n    // Middle and other keywords\n    if (stream.match(middleKeywords) || stream.match(commonKeywords)) {\n      return \"keyword\"\n    }\n\n    // End keywords\n    if (stream.match(endKeywords)) {\n      state.currentIndent--;\n      return 'keyword';\n    }\n\n    // Eat the next char for next comparisons\n    var ch = stream.next();\n\n    // Strings\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    // Numbers\n    if (/[~\\d]/.test(ch)) {\n      if (ch == \"~\") {\n        if(! /^[0-9]/.test(stream.peek()))\n          return null;\n        else if (( stream.next() == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n          return \"number\";\n      }\n\n      if ((ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n        return \"number\";\n\n      return null;\n    }\n\n    // Comments\n    if (ch == \"%\") {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n    }\n\n    // Single operators\n    if(singleOperators.test(ch)) {\n      return \"operator\";\n    }\n\n    // If nothing match, we skip the entire alphanumeric block\n    stream.eatWhile(/\\w/);\n\n    return \"variable\";\n  }\n\n  function tokenClass(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);\n    state.tokenize = tokenBase;\n    return \"variable-3\"\n  }\n\n  function tokenMeth(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n    stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);\n    state.tokenize = tokenBase;\n    return \"def\"\n  }\n\n  function tokenFunProc(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    if(!state.hasPassedFirstStage && stream.eat(\"{\")) {\n      state.hasPassedFirstStage = true;\n      return \"bracket\";\n    }\n    else if(state.hasPassedFirstStage) {\n      stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$/);\n      state.hasPassedFirstStage = false;\n      state.tokenize = tokenBase;\n      return \"def\"\n    }\n    else {\n      state.tokenize = tokenBase;\n      return null;\n    }\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function (stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped)\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on [] or on a match of any of\n    // the block closing keywords, at the end of a line.\n    var allClosings = middle.concat(end);\n    return new RegExp(\"[\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n  }\n\n  return {\n\n    startState: function () {\n      return {\n        tokenize: tokenBase,\n        currentIndent: 0,\n        doInCurrentLine: false,\n        hasPassedFirstStage: false\n      };\n    },\n\n    token: function (stream, state) {\n      if (stream.sol())\n        state.doInCurrentLine = 0;\n\n      return state.tokenize(stream, state);\n    },\n\n    indent: function (state, textAfter) {\n      var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n\n      if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\\[])/))\n        return conf.indentUnit * (state.currentIndent - 1);\n\n      if (state.currentIndent < 0)\n        return 0;\n\n      return state.currentIndent * conf.indentUnit;\n    },\n    fold: \"indent\",\n    electricInput: buildElectricInputRegEx(),\n    lineComment: \"%\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-oz\", \"oz\");\n\n});\n"],"file":"oz.js"}