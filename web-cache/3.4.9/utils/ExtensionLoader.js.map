{"version":3,"sources":["utils/ExtensionLoader.js"],"names":["define","require","exports","module","_","EventDispatcher","FileSystem","FileUtils","Async","ExtensionUtils","ThemeManager","UrlParams","PathUtils","DefaultExtensionsList","JSON","parse","defaultExtensionsList","customExtensionLoadPaths","EXTENSION_LOAD_TIMOUT_SECONDS","INIT_EXTENSION_TIMEOUT","EVENT_EXTENSION_LOADED","EVENT_EXTENSION_DISABLED","EVENT_EXTENSION_LOAD_FAILED","_init","_extensions","_initExtensionTimeout","srcPath","getNativeBracketsDirectoryPath","contexts","pathLib","Phoenix","VFS","path","replace","globalPaths","brackets","_getGlobalRequireJSConfig","paths","Object","keys","forEach","key","makePathAbsolute","DEFAULT_EXTENSIONS_PATH_BASE","getDefaultExtensionPath","window","PhoenixBaseURL","_getExtensionPath","normalize","getExtensionDir","getDevExtensionPath","getDevExtensionDir","getUserExtensionPath","getUserExtensionDir","getRequireContextForExtension","name","_getInitExtensionTimeout","_setInitExtensionTimeout","value","_mergeConfigFromURL","baseConfig","deferred","$","Deferred","extensionConfigFile","baseUrl","getJSON","done","extensionConfig","length","extend","omit","resolve","err","reject","fail","status","console","error","promise","_mergeConfig","startsWith","Error","savedFSlib","fs","loadExtensionModule","config","entryPoint","context","locale","getLocale","waitSeconds","text","useXhr","_url","_protocol","_hostname","_port","isDefaultExtensionModule","then","mergedConfig","extensionRequire","libRequire","extensionRequireDeferred","initPromise","initExtension","withTimeout","logger","reportError","errorMessage","ERROR_TIMEOUT","errback","additionalInfo","String","requireType","originalError","target","src","log","stack","loadExtension","loadMetadata","always","metadata","theme","disabled","trigger","_testExtensionByURL","result","e","testExtension","extensionPath","entry","isFile","_loadAll","directory","processExtension","getDirectoryForPath","getContents","contents","i","extensions","isDirectory","push","doInParallel","item","extConfig","getVirtualServingURLForPath","loadAllDefaultExtensions","extensionEntry","leaveTrail","loadAllExtensionsInNativeDirectory","loadExtensionFromNativeDirectory","testAllExtensionsInNativeDirectory","extensionsDir","perf","spec","extensionName","loadResult","basePath","testAllDefaultExtensions","bracketsPath","srcBaseUrl","URL","href","endsWith","getSourcePathForExtension","devTempExtDir","getDevTempExtensionDir","customExtensionLoadPath","srcBasePath","ensureTrailingSlash","relativePath","_attachThemeLoadListeners","off","EVENT_THEME_LOADED","on","refresh","_getRandomPrefix","uuid","crypto","randomUUID","split","_loadCustomExtensionPath","extPath","assetsServeDir","getTauriAssetServeDir","getTauriDir","newExtVersionStr","extParentPath","basename","extDestPath","unlink","ensureExistsDirAsync","copy","_copiedPath","catch","init","params","get","customLoadPaths","customPath","create","disabledExtensionPath","makeEventDispatcher"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/**\n * ExtensionLoader searches the filesystem for extensions, then creates a new context for each one and loads it.\n * This module dispatches the following events:\n *      \"load\" - when an extension is successfully loaded. The second argument is the file path to the\n *          extension root.\n *      \"loadFailed\" - when an extension load is unsuccessful. The second argument is the file path to the\n *          extension root.\n */\n// jshint ignore: start\n/*global logger, Phoenix*/\n/*eslint-env es6*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n\ndefine(function (require, exports, module) {\n\n\n    require(\"utils/Global\");\n\n    const _              = require(\"thirdparty/lodash\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        FileSystem     = require(\"filesystem/FileSystem\"),\n        FileUtils      = require(\"file/FileUtils\"),\n        Async          = require(\"utils/Async\"),\n        ExtensionUtils = require(\"utils/ExtensionUtils\"),\n        ThemeManager   = require(\"view/ThemeManager\"),\n        UrlParams      = require(\"utils/UrlParams\").UrlParams,\n        PathUtils      = require(\"thirdparty/path-utils/path-utils\"),\n        DefaultExtensionsList = JSON.parse(require(\"text!extensions/default/DefaultExtensions.json\"))\n            .defaultExtensionsList;\n\n    const customExtensionLoadPaths = {};\n\n    // default async initExtension timeout\n    var EXTENSION_LOAD_TIMOUT_SECONDS = 60,\n        INIT_EXTENSION_TIMEOUT = EXTENSION_LOAD_TIMOUT_SECONDS * 1000,\n        EVENT_EXTENSION_LOADED = \"load\",\n        EVENT_EXTENSION_DISABLED = \"disabled\",\n        EVENT_EXTENSION_LOAD_FAILED = \"loadFailed\";\n\n    var _init       = false,\n        _extensions = {},\n        _initExtensionTimeout = INIT_EXTENSION_TIMEOUT,\n        srcPath     = FileUtils.getNativeBracketsDirectoryPath();\n\n    /**\n     * Stores require.js contexts of extensions\n     * @type {Object.<string, Object>}\n     */\n    var contexts    = {};\n\n    var pathLib =  Phoenix.VFS.path;\n\n    // The native directory path ends with either \"test\" or \"src\". We need \"src\" to\n    // load the text and i18n modules.\n    srcPath = srcPath.replace(/\\/test$/, \"/src\"); // convert from \"test\" to \"src\"\n\n\n    // Retrieve the global paths\n    var globalPaths = brackets._getGlobalRequireJSConfig().paths;\n\n    // Convert the relative paths to absolute\n    Object.keys(globalPaths).forEach(function (key) {\n        globalPaths[key] = PathUtils.makePathAbsolute(srcPath + \"/\" + globalPaths[key]);\n    });\n\n    /**\n     * Returns the path to the default extensions directory relative to Phoenix base URL\n     */\n    const DEFAULT_EXTENSIONS_PATH_BASE = \"extensions/default\";\n    function getDefaultExtensionPath() {\n        return window.PhoenixBaseURL + DEFAULT_EXTENSIONS_PATH_BASE;\n    }\n\n    /**\n     * Returns the full path to the development extensions directory.\n     */\n    function _getExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getExtensionDir());\n    }\n\n    /**\n     * Returns the full path to the development extensions directory.\n     */\n    function getDevExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getDevExtensionDir());\n    }\n\n    /**\n     * Returns the full path of the default user extensions directory. This is in the users\n     * application support directory, which is typically\n     * /Users/<user>/Application Support/Brackets/extensions/user on the mac, and\n     * C:\\Users\\<user>\\AppData\\Roaming\\Brackets\\extensions\\user on windows.\n     */\n    function getUserExtensionPath() {\n        return pathLib.normalize(Phoenix.VFS.getUserExtensionDir());\n    }\n\n    /**\n     * Returns the require.js require context used to load an extension\n     *\n     * @param {!string} name, used to identify the extension\n     * @return {!Object} A require.js require object used to load the extension, or undefined if\n     * there is no require object with that name\n     */\n    function getRequireContextForExtension(name) {\n        return contexts[name];\n    }\n\n    /**\n     * @private\n     * Get timeout value for rejecting an extension's async initExtension promise.\n     * @return {number} Timeout in milliseconds\n     */\n    function _getInitExtensionTimeout() {\n        return _initExtensionTimeout;\n    }\n\n    /**\n     * @private\n     * Set timeout for rejecting an extension's async initExtension promise.\n     * @param {number} value Timeout in milliseconds\n     */\n    function _setInitExtensionTimeout(value) {\n        _initExtensionTimeout = value;\n    }\n\n    /**\n     * @private\n     * Loads optional requirejs-config.json file for an extension\n     * @param {Object} baseConfig\n     * @return {$.Promise}\n     */\n    function _mergeConfigFromURL(baseConfig) {\n        var deferred = new $.Deferred(),\n            extensionConfigFile = baseConfig.baseUrl + \"/requirejs-config.json\";\n\n        // Optional JSON config for require.js\n        $.getJSON(extensionConfigFile).done(function (extensionConfig) {\n            if(Object.keys(extensionConfig || {}).length === 0){\n                deferred.resolve(baseConfig);\n                return;\n            }\n            try {\n                if(!extensionConfig.paths){\n                    extensionConfig.paths = {};\n                }\n                // baseConfig.paths properties will override any extension config paths\n                _.extend(extensionConfig.paths, baseConfig.paths);\n\n                // Overwrite baseUrl, context, locale (paths is already merged above)\n                _.extend(extensionConfig, _.omit(baseConfig, \"paths\"));\n\n                deferred.resolve(extensionConfig);\n            } catch (err) {\n                // Failed to parse requirejs-config.json\n                deferred.reject(\"failed to parse requirejs-config.json\");\n            }\n        }).fail(function (err) {\n            // If requirejs-config.json isn't specified or if there is a bad config, resolve with the baseConfig\n            // to try loading the extension\n            if(err.status === 200) {\n                // we received the file, but its invalid json\n                console.error(\"[Extension] The require config file provided is invalid\", extensionConfigFile);\n            }\n            deferred.resolve(baseConfig);\n        });\n\n        return deferred.promise();\n    }\n\n    /**\n     * @private\n     * Loads optional requirejs-config.json file for an extension\n     * @param {Object} baseConfig\n     * @return {$.Promise}\n     */\n    function _mergeConfig(baseConfig) {\n        if(baseConfig.baseUrl.startsWith(\"http://\") || baseConfig.baseUrl.startsWith(\"https://\")\n            || baseConfig.baseUrl.startsWith(\"phtauri://\") || baseConfig.baseUrl.startsWith(\"asset://\")) {\n            return _mergeConfigFromURL(baseConfig);\n        }\n        throw new Error(\"Config can only be loaded from an http url, but got\" + baseConfig.baseUrl);\n    }\n    const savedFSlib = window.fs;\n\n    /**\n     * Loads the extension module that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when the extension is loaded, or rejected\n     *              if the extension fails to load or throws an exception immediately when loaded.\n     *              (Note: if extension contains a JS syntax error, promise is resolved not rejected).\n     */\n    function loadExtensionModule(name, config, entryPoint) {\n        let extensionConfig = {\n            context: name,\n            baseUrl: config.baseUrl,\n            paths: globalPaths,\n            locale: brackets.getLocale(),\n            waitSeconds: EXTENSION_LOAD_TIMOUT_SECONDS,\n            config: {\n                text: {\n                    useXhr: function(_url, _protocol, _hostname, _port) {\n                        // as we load extensions in cross domain fashion, we have to use xhr\n                        // https://github.com/requirejs/text#xhr-restrictions\n                        // else user installed extension require will fail in tauri\n                        return true;\n                    }\n                }\n            }\n        };\n        const isDefaultExtensionModule =( extensionConfig.baseUrl\n            && extensionConfig.baseUrl.startsWith(`${window.PhoenixBaseURL}extensions/default/`));\n        // Read optional requirejs-config.json\n        return _mergeConfig(extensionConfig).then(function (mergedConfig) {\n            // Create new RequireJS context and load extension entry point\n            var extensionRequire = brackets.libRequire.config(mergedConfig),\n                extensionRequireDeferred = new $.Deferred();\n\n            contexts[name] = extensionRequire;\n            extensionRequire([entryPoint], extensionRequireDeferred.resolve, extensionRequireDeferred.reject);\n\n            return extensionRequireDeferred.promise();\n        }).then(function (module) {\n            // Extension loaded normally\n            if(savedFSlib !== window.fs) {\n                console.error(\"fslib overwrite detected while loading extension. This means that\" +\n                    \" some extension tried to modify a core library. reverting to original lib..\");\n                // note that the extension name here may not be that actual extension that did the\n                // overwrite. So we dont log the extension name here.\n                window.fs = savedFSlib;\n            }\n            var initPromise;\n\n            _extensions[name] = module;\n\n            // Optional sync/async initExtension\n            if (module && module.initExtension && (typeof module.initExtension === \"function\")) {\n                // optional async extension init\n                try {\n                    initPromise = Async.withTimeout(module.initExtension(), _getInitExtensionTimeout());\n                } catch (err) {\n                    // Synchronous error while initializing extension\n                    console.error(\"[Extension] Error -- error thrown during initExtension for \" + name + \": \" + err);\n                    logger.reportError(err);\n                    return new $.Deferred().reject(err).promise();\n                }\n\n                // initExtension may be synchronous and may not return a promise\n                if (initPromise) {\n                    // WARNING: These calls to initPromise.fail() and initPromise.then(),\n                    // could also result in a runtime error if initPromise is not a valid\n                    // promise. Currently, the promise is wrapped via Async.withTimeout(),\n                    // so the call is safe as-is.\n                    initPromise.fail(function (err) {\n                        let errorMessage = \"[Extension] Error -- timeout during initExtension for \" + name;\n                        if (err === Async.ERROR_TIMEOUT) {\n                            console.error(errorMessage);\n                        } else {\n                            errorMessage = \"[Extension] Error -- failed initExtension for \" + name;\n                            console.error(errorMessage + (err ? \": \" + err : \"\"));\n                        }\n                        if(isDefaultExtensionModule){\n                            logger.reportError(err, errorMessage);\n                        }\n                    });\n\n                    return initPromise;\n                }\n            }\n        }, function errback(err) {\n            // Extension failed to load during the initial require() call\n            var additionalInfo = String(err);\n            if (err.requireType === \"scripterror\" && err.originalError) {\n                // This type has a misleading error message - replace it with something clearer (URL of require() call that got a 404 result)\n                additionalInfo = \"Module does not exist: \" + err.originalError.target.src;\n            }\n            console.error(\"[Extension] failed to load \" + config.baseUrl + \" - \" + additionalInfo);\n            if(isDefaultExtensionModule){\n                logger.reportError(err, \"[Extension] failed to load \" + config.baseUrl + \" - \" + additionalInfo);\n            }\n\n            if (err.requireType === \"define\") {\n                // This type has a useful stack (exception thrown by ext code or info on bad getModule() call)\n                console.log(err.stack);\n            }\n        });\n    }\n\n    /**\n     * Loads the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when the extension is loaded, or rejected\n     *              if the extension fails to load or throws an exception immediately when loaded.\n     *              (Note: if extension contains a JS syntax error, promise is resolved not rejected).\n     */\n    function loadExtension(name, config, entryPoint) {\n        var promise = new $.Deferred();\n\n        // Try to load the package.json to figure out if we are loading a theme.\n        ExtensionUtils.loadMetadata(config.baseUrl, name).always(promise.resolve);\n\n        return promise\n            .then(function (metadata) {\n                // No special handling for themes... Let the promise propagate into the ExtensionManager\n                if (metadata && metadata.theme) {\n                    return;\n                }\n\n                if (!metadata.disabled) {\n                    return loadExtensionModule(name, config, entryPoint);\n                }\n                return new $.Deferred().reject(\"disabled\").promise();\n\n            })\n            .then(function () {\n                exports.trigger(EVENT_EXTENSION_LOADED, config.baseUrl);\n            }, function (err) {\n                if (err === \"disabled\") {\n                    exports.trigger(EVENT_EXTENSION_DISABLED, config.baseUrl);\n                } else {\n                    exports.trigger(EVENT_EXTENSION_LOAD_FAILED, config.baseUrl);\n                }\n            });\n    }\n\n    /**\n     * Runs unit tests for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function _testExtensionByURL(name, config, entryPoint) {\n        var result = new $.Deferred();\n\n        try{\n            var extensionRequire = brackets.libRequire.config({\n                context: name,\n                baseUrl: config.baseUrl,\n                paths: $.extend({}, config.paths, globalPaths),\n                waitSeconds: EXTENSION_LOAD_TIMOUT_SECONDS\n            });\n\n            extensionRequire([entryPoint], function () {\n                console.log(\"Test extension loaded: \", name);\n                result.resolve();\n            }, function (err) {\n                // Something went wrong while loading extension\n                console.log(\"Unit tests not found for:\", name, err);\n                result.reject();\n            });\n        } catch (e) {\n            console.error(\"Test extension load failed: \", name, e);\n            result.resolve();\n        }\n\n        return result.promise();\n    }\n\n    /**\n     * Runs unit tests for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} name, used to identify the extension\n     * @param {!{baseUrl: string}} config object with baseUrl property containing absolute path of extension\n     * @param {!string} entryPoint, name of the main js file to load\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testExtension(name, config, entryPoint) {\n        var result = new $.Deferred(),\n            extensionPath = config.baseUrl + \"/\" + entryPoint + \".js\";\n        if(extensionPath.startsWith(\"http://\") || extensionPath.startsWith(\"https://\")\n            || extensionPath.startsWith(\"phtauri://\") || extensionPath.startsWith(\"asset://\")) {\n            return _testExtensionByURL(name, config, entryPoint);\n        }\n\n        FileSystem.resolve(extensionPath, function (err, entry) {\n            if (!err && entry.isFile) {\n                // unit test file exists\n                var extensionRequire = brackets.libRequire.config({\n                    context: name,\n                    baseUrl: config.baseUrl,\n                    paths: $.extend({}, config.paths, globalPaths)\n                });\n\n                extensionRequire([entryPoint], function () {\n                    result.resolve();\n                });\n            } else {\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * @private\n     * Loads a file entryPoint from each extension folder within the baseUrl into its own Require.js context\n     *\n     * @param {!string} directory an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @param {!string} entryPoint Module name to load (without .js suffix)\n     * @param {function} processExtension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function _loadAll(directory, entryPoint, processExtension) {\n        var result = new $.Deferred();\n\n        FileSystem.getDirectoryForPath(directory).getContents(function (err, contents) {\n            if (!err) {\n                var i,\n                    extensions = [];\n\n                for (i = 0; i < contents.length; i++) {\n                    if (contents[i].isDirectory) {\n                        // FUTURE (JRB): read package.json instead of just using the entrypoint \"main\".\n                        // Also, load sub-extensions defined in package.json.\n                        extensions.push(contents[i].name);\n                    }\n                }\n\n                if (extensions.length === 0) {\n                    result.resolve();\n                    return;\n                }\n\n                Async.doInParallel(extensions, function (item) {\n                    var extConfig = {\n                        // we load user installed extensions in file system from our virtual/asset server URL\n                        baseUrl: Phoenix.VFS.getVirtualServingURLForPath(directory + \"/\" + item),\n                        paths: {}\n                    };\n                    console.log(\"Loading Extension from virtual fs: \", extConfig);\n                    return processExtension(item, extConfig, entryPoint);\n                }).always(function () {\n                    // Always resolve the promise even if some extensions had errors\n                    result.resolve();\n                });\n            } else {\n                console.error(\"[Extension] Error -- could not read native directory: \" + directory);\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Loads All brackets default extensions from brackets base https URL.\n     *\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function loadAllDefaultExtensions() {\n        const extensionPath = getDefaultExtensionPath();\n        const result = new $.Deferred();\n\n        Async.doInParallel(DefaultExtensionsList, function (extensionEntry) {\n            logger.leaveTrail(\"loading default extension: \" + extensionEntry);\n            var extConfig = {\n                baseUrl: extensionPath + \"/\" + extensionEntry\n            };\n            return loadExtension(extensionEntry, extConfig, 'main');\n        }).always(function () {\n            // Always resolve the promise even if some extensions had errors\n            result.resolve();\n        });\n\n        return result.promise();\n\n    }\n\n    /**\n     * Loads the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function loadAllExtensionsInNativeDirectory(directory) {\n        return _loadAll(directory,  \"main\", loadExtension);\n    }\n\n    /**\n     * Loads a given extension at the path from virtual fs. Used by `debug menu> load project as extension`\n     * @param directory\n     * @return {!Promise}\n     */\n    function loadExtensionFromNativeDirectory(directory) {\n        logger.leaveTrail(\"loading custom extension from path: \" + directory);\n        const extConfig = {\n            baseUrl: Phoenix.VFS.getVirtualServingURLForPath(directory.replace(/\\/$/, \"\"))\n        };\n        return loadExtension(\"ext\" + directory.replace(\"/\", \"-\"), // /fs/user/extpath to ext-fs-user-extpath\n            extConfig, 'main');\n    }\n\n    /**\n     * Runs unit test for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @param {!string} directory, an absolute native path that contains a directory of extensions.\n     *                  each subdirectory is interpreted as an independent extension\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testAllExtensionsInNativeDirectory(directory) {\n        const result = new $.Deferred();\n        const extensionsDir = _getExtensionPath() + \"/\" + directory,\n            config = {\n                baseUrl: Phoenix.VFS.getVirtualServingURLForPath(extensionsDir)\n            };\n\n        config.paths = {\n            \"perf\": Phoenix.VFS.getVirtualServingURLForPath( \"/test/perf\"),\n            \"spec\": Phoenix.VFS.getVirtualServingURLForPath(\"/test/spec\")\n        };\n\n        FileSystem.getDirectoryForPath(extensionsDir).getContents(function (err, contents) {\n            if (!err) {\n                let i,\n                    extensions = [];\n\n                for (i = 0; i < contents.length; i++) {\n                    if (contents[i].isDirectory) {\n                        // FUTURE (JRB): read package.json instead of just using the entrypoint \"main\".\n                        // Also, load sub-extensions defined in package.json.\n                        extensions.push(contents[i].name);\n                    }\n                }\n\n                if (extensions.length === 0) {\n                    result.resolve();\n                    return;\n                }\n\n                Async.doInParallel(extensions, function (extensionName) {\n                    let loadResult = new $.Deferred();\n                    var extConfig = {\n                        // we load extensions in virtual file system from our virtual server URL\n                        basePath: 'extensions/default',\n                        baseUrl: config.baseUrl + \"/\" + extensionName,\n                        paths: config.paths\n                    };\n                    console.log(\"Loading Extension Test from virtual fs: \", extConfig);\n                    _testExtensionByURL(extensionName, extConfig, 'unittests').always(function () {\n                        // Always resolve the promise even if some extensions had errors\n                        console.log(\"tested\", extensionName);\n                        loadResult.resolve();\n                    });\n                    return loadResult.promise();\n                }).always(function () {\n                    // Always resolve the promise even if some extensions had errors\n                    result.resolve();\n                });\n            } else {\n                console.error(\"[Extension Load Test] Error -- could not read native directory: \" + directory);\n                result.reject();\n            }\n        });\n\n        return result.promise();\n    }\n\n    /**\n     * Runs unit test for the extension that lives at baseUrl into its own Require.js context\n     *\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function testAllDefaultExtensions() {\n        const bracketsPath = FileUtils.getNativeBracketsDirectoryPath();\n        const baseUrl = window.PhoenixBaseURL;\n        let srcBaseUrl = new URL(baseUrl + '../src').href;\n        let result = new $.Deferred();\n        if(!srcBaseUrl.endsWith(\"/\")) {\n            srcBaseUrl = srcBaseUrl + \"/\";\n        }\n\n        Async.doInParallel(DefaultExtensionsList, function (extensionEntry) {\n            const loadResult = new $.Deferred();\n            const extConfig = {\n                basePath: 'extensions/default',\n                baseUrl: new URL(srcBaseUrl + DEFAULT_EXTENSIONS_PATH_BASE + \"/\" + extensionEntry).href,\n                paths: {\n                    \"perf\": bracketsPath + \"/perf\",\n                    \"spec\": bracketsPath + \"/spec\"\n                }\n            };\n            console.log(\"Testing default extension: \", extensionEntry);\n            _testExtensionByURL(extensionEntry, extConfig, 'unittests').always(function () {\n                // Always resolve the promise even if some extensions had errors\n                console.log(\"load complete\", extensionEntry);\n                loadResult.resolve();\n            });\n            return loadResult.promise();\n        }).always(function () {\n            // Always resolve the promise even if some extensions had errors\n            result.resolve();\n        });\n\n        return result.promise();\n    }\n\n    // eg: extensionPath = /tauri/home/home/.local/share/io.phcode.dev/assets/extensions/devTemp/theme/14/theme.css\n    // eg: customExtensionLoadPath = /tauri/home/home/.local/share/io.phcode.dev/assets/extensions/devTemp/theme/14\n    // eg: srcBasePath = /tauri/home/home/myExtension\n    function getSourcePathForExtension(extensionPath) {\n        const devTempExtDir = `${Phoenix.VFS.getDevTempExtensionDir()}/`;\n        if(extensionPath.startsWith(devTempExtDir)) {\n            for(let customExtensionLoadPath of Object.keys(customExtensionLoadPaths)){\n                let srcBasePath = customExtensionLoadPaths[customExtensionLoadPath];\n                if(extensionPath.startsWith(Phoenix.VFS.ensureTrailingSlash(customExtensionLoadPath))) {\n                    const relativePath = extensionPath.replace(Phoenix.VFS.ensureTrailingSlash(customExtensionLoadPath), \"\");\n                    if(!srcBasePath.endsWith(\"/\")){\n                        srcBasePath = srcBasePath + \"/\";\n                    }\n                    return `${srcBasePath}${relativePath}`;\n                }\n            }\n        }\n        return extensionPath;\n    }\n\n    function _attachThemeLoadListeners() {\n        ThemeManager.off(`${ThemeManager.EVENT_THEME_LOADED}.extensionLoader`);\n        ThemeManager.on(`${ThemeManager.EVENT_THEME_LOADED}.extensionLoader`, ()=>{\n            ThemeManager.refresh(true);\n        });\n    }\n\n    function _getRandomPrefix() {\n        let uuid = crypto.randomUUID();\n        // for example \"36b8f84d-df4e-4d49-b662-bcde71a8764f\"\n        return uuid.split(\"-\")[0]; // Eg. return 36b8f84d\n    }\n    function _loadCustomExtensionPath(extPath) {\n        const assetsServeDir = Phoenix.VFS.getTauriAssetServeDir();\n        if(assetsServeDir && extPath.startsWith(Phoenix.VFS.getTauriDir()) &&\n            !extPath.startsWith(assetsServeDir)) {\n            // we have to do this random number thingy as tauri caches assets and will serve stale assets.\n            // this is problematic when the user is editing extension code and he cant see the updates on reload.\n            const newExtVersionStr = _getRandomPrefix();\n            const extParentPath = `${Phoenix.VFS.getDevTempExtensionDir()}/${Phoenix.path.basename(extPath)}`;\n            const extDestPath = `${extParentPath}/${newExtVersionStr}`;\n            customExtensionLoadPaths[extDestPath] = extPath;\n            Phoenix.fs.unlink(extParentPath, ()=>{\n                // ignore any errors in delete\n                Phoenix.VFS.ensureExistsDirAsync(extParentPath)\n                    .then(()=>{\n                        Phoenix.fs.copy(extPath, extDestPath, function (err, _copiedPath) {\n                            if (err) {\n                                console.error(`Error copying extension from ${extPath} to ${extDestPath}`, err);\n                                result.reject(err);\n                            } else {\n                                _attachThemeLoadListeners();\n                                loadExtensionFromNativeDirectory(extDestPath)\n                                    .fail(console.error);\n                            }\n                        });\n                    }).catch((err)=>{\n                        console.error(`Error creating dir ${extDestPath}`, err);\n                        result.reject(err);\n                    });\n            });\n            // custom extensions are always loaded marked as resolved to prevent the main event loop from taking\n            // too long to load\n            let result = new $.Deferred();\n            result.resolve();\n            return result.promise();\n        }\n        return loadExtensionFromNativeDirectory(extPath);\n    }\n\n    /**\n     * Load extensions.\n     *\n     * @param {?Array.<string>} A list containing references to extension source\n     *      location. A source location may be either (a) a folder name inside\n     *      src/extensions or (b) an absolute path.\n     * @return {!$.Promise} A promise object that is resolved when all extensions complete loading.\n     */\n    function init(paths) {\n        require(\"extensionsIntegrated/loader\");\n        var params = new UrlParams();\n\n        if (_init) {\n            // Only init once. Return a resolved promise.\n            return new $.Deferred().resolve().promise();\n        }\n\n        if (!paths) {\n            params.parse();\n\n            if (params.get(\"reloadWithoutUserExts\") !== \"true\") {\n                paths = [\n                    \"default\",\n                    getUserExtensionPath(),\n                    getDevExtensionPath()\n                ];\n            } else {\n                paths = [];\n            }\n            if(params.get(\"loadDevExtensionPath\")){\n                let customLoadPaths = params.get(\"loadDevExtensionPath\").split(\",\");\n                for(let customPath of customLoadPaths){\n                    paths.push(\"custom:\" + customPath);\n                }\n            }\n        }\n\n        // Load extensions before restoring the project\n\n        // Get a Directory for the user extension directory and create it if it doesn't exist.\n        // Note that this is an async call and there are no success or failure functions passed\n        // in. If the directory *doesn't* exist, it will be created. Extension loading may happen\n        // before the directory is finished being created, but that is okay, since the extension\n        // loading will work correctly without this directory.\n        // If the directory *does* exist, nothing else needs to be done. It will be scanned normally\n        // during extension loading.\n        var extensionPath = getUserExtensionPath();\n        FileSystem.getDirectoryForPath(extensionPath).create();\n        FileSystem.getDirectoryForPath(getDevExtensionPath()).create();\n\n        // Create the extensions/disabled directory, too.\n        var disabledExtensionPath = extensionPath.replace(/\\/user$/, \"/disabled\");\n        FileSystem.getDirectoryForPath(disabledExtensionPath).create();\n\n        var promise = Async.doInParallel(paths, function (extPath) {\n            if(extPath === \"default\"){\n                return loadAllDefaultExtensions();\n            } else if(extPath.startsWith(\"custom:\")){\n                return _loadCustomExtensionPath(extPath.replace(\"custom:\", \"\"));\n            } else {\n                return loadAllExtensionsInNativeDirectory(extPath);\n            }\n        }, false);\n\n        promise.always(function () {\n            _init = true;\n        });\n\n        return promise;\n    }\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // unit tests\n    exports._setInitExtensionTimeout = _setInitExtensionTimeout;\n    exports._getInitExtensionTimeout = _getInitExtensionTimeout;\n\n    // public API\n    exports.init = init;\n    exports.getDefaultExtensionPath = getDefaultExtensionPath;\n    exports.getUserExtensionPath = getUserExtensionPath;\n    exports.getRequireContextForExtension = getRequireContextForExtension;\n    exports.getSourcePathForExtension = getSourcePathForExtension;\n    exports.loadExtension = loadExtension;\n    exports.testExtension = testExtension;\n    exports.loadAllExtensionsInNativeDirectory = loadAllExtensionsInNativeDirectory;\n    exports.loadExtensionFromNativeDirectory = loadExtensionFromNativeDirectory;\n    exports.testAllExtensionsInNativeDirectory = testAllExtensionsInNativeDirectory;\n    exports.testAllDefaultExtensions = testAllDefaultExtensions;\n    exports.EVENT_EXTENSION_LOADED = EVENT_EXTENSION_LOADED;\n    exports.EVENT_EXTENSION_DISABLED = EVENT_EXTENSION_DISABLED;\n    exports.EVENT_EXTENSION_LOAD_FAILED = EVENT_EXTENSION_LOAD_FAILED;\n});\n"],"file":"ExtensionLoader.js"}