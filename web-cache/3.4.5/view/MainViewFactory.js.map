{"version":3,"sources":["view/MainViewFactory.js"],"names":["define","require","exports","module","_","_factories","registerViewFactory","factory","push","findSuitableFactoryForPath","fullPath","find","canOpenFile"],"mappings":"AA4DAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,EAAIH,QAAQ,qBAYZI,WAAa,GAMjB,SAASC,oBAAoBC,SACzBF,WAAWG,KAAKD,SAQpB,SAASE,2BAA2BC,UAChC,OAAON,EAAEO,KAAKN,WAAY,SAAUE,SAKhC,OAAOA,QAAQK,YAAYF,YAOnCR,QAAQI,oBAA8BA,oBACtCJ,QAAQO,2BAA8BA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * MainViewFactory is a singleton for managing view factories.\n *\n * Registering a view factory:\n *\n *      registerViewFactory({\n *           canOpenFile: function (fullPath) {\n *               return (fullPath.slice(-4) === \".ico\");\n *           },\n *           openFile: function(file, pane) {\n *               return createIconView(file, pane);\n *           }\n *      });\n *\n *  The openFile method is used to open the file and construct\n *  a view of it.  Implementation should add the view to the pane\n *\n *      function createIconView(file, pane) {\n *          // IconView will construct its DOM and append\n *          //  it to pane.$el\n *          var view = new IconView(file, pane.$el);\n *          // Then tell the pane to add it to\n *          //  its view map and show it\n *          pane.addView(view, true);\n *          return new $.Deferred().resolve().promise();\n *      }\n *\n *  Factories should only create 1 view of a file per pane.  Brackets currently only supports 1 view of\n *  a file open at a given time but that may change to allow the same file open in more than 1 pane. Therefore\n *  Factories can do a simple check to see if a view already exists and show it before creating a new one:\n *\n *      var view = pane.getViewForPath(file.fullPath);\n *      if (view) {\n *          pane.showView(view);\n *      } else {\n *          return createIconView(file, pane);\n *      }\n *\n */\ndefine(function (require, exports, module) {\n\n\n    var _ = require(\"thirdparty/lodash\");\n\n\n    /**\n     * @typedef {canOpenFile:function(path:string):boolean, openFile:function(path:string, pane:Pane)} Factory\n     */\n\n    /**\n     * The view registration Database\n     * @private\n     * @type {Array.<Factory>}\n     */\n    var _factories = [];\n\n    /**\n     * Registers a view factory\n     * @param {!Factory} factory - the view factory to register\n     */\n    function registerViewFactory(factory) {\n        _factories.push(factory);\n    }\n\n    /**\n     * Finds a factory that can open the specified file\n     * @param {!string} fullPath - the file to open\n     * @return {?Factory} A factory that can create a view for the path or undefined if there isn't one.\n     */\n    function findSuitableFactoryForPath(fullPath) {\n        return _.find(_factories, function (factory) {\n            // This could get more complex in the future by searching in this order\n            //  1) a factory that can open the file by fullPath\n            //  2) a factory that can open the file by name\n            //  3) a factory that can open the file by filetype\n            return factory.canOpenFile(fullPath);\n        });\n    }\n\n    /*\n     * Public API\n     */\n    exports.registerViewFactory         = registerViewFactory;\n    exports.findSuitableFactoryForPath  = findSuitableFactoryForPath;\n});\n"],"file":"MainViewFactory.js"}