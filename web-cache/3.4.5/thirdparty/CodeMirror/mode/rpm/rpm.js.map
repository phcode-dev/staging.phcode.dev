{"version":3,"sources":["thirdparty/CodeMirror/mode/rpm/rpm.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","headerSeparator","headerLine","simpleEmail","token","stream","sol","match","next","defineMIME","arch","preamble","section","control_flow_complex","control_flow_simple","operators","startState","controlFlow","macroParameters","state","ch","peek","skipToEnd","eol"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,cAAe,WACnC,IAAIC,gBAAkB,OAClBC,WAAa,sIACbC,YAAc,oBAElB,MAAO,CACLC,MAAO,SAASC,QACd,GAAIA,OAAOC,MAAO,CAChB,GAAID,OAAOE,MAAMN,iBAAoB,MAAO,MAC5C,GAAII,OAAOE,MAAML,YAAe,MAAO,MAEzC,OAAIG,OAAOE,MAAMJ,aAAuB,UACxCE,OAAOG,OACA,UAKbT,WAAWU,WAAW,qBAAsB,eAI5CV,WAAWC,WAAW,WAAY,WAChC,IAAIU,KAAO,qHAEPC,SAAW,mBACXC,QAAU,2NACVC,qBAAuB,wBACvBC,oBAAsB,iBACtBC,UAAY,0CAEhB,MAAO,CACLC,WAAY,WACR,MAAO,CACLC,aAAa,EACbC,iBAAiB,EACjBN,SAAS,IAGfR,MAAO,SAAUC,OAAQc,OACvB,IAAIC,GACJ,GAAU,KADDf,OAAOgB,OACqB,OAApBhB,OAAOiB,YAAoB,UAE5C,GAAIjB,OAAOC,MAAO,CAChB,GAAID,OAAOE,MAAMI,UAAa,MAAO,SACrC,GAAIN,OAAOE,MAAMK,SAAY,MAAO,OAGtC,GAAIP,OAAOE,MAAM,UAAa,MAAO,MACrC,GAAIF,OAAOE,MAAM,cAAiB,MAAO,MAEzC,GAAIF,OAAOE,MAAMO,qBAAwB,MAAO,UAChD,GAAIT,OAAOE,MAAMM,sBAEf,OADAM,MAAMF,aAAc,EACb,UAET,GAAIE,MAAMF,YAAa,CACrB,GAAIZ,OAAOE,MAAMQ,WAAc,MAAO,WACtC,GAAIV,OAAOE,MAAM,UAAa,MAAO,SACjCF,OAAOkB,QAASJ,MAAMF,aAAc,GAG1C,GAAIZ,OAAOE,MAAMG,MAEf,OADIL,OAAOkB,QAASJ,MAAMF,aAAc,GACjC,SAIT,GAAIZ,OAAOE,MAAM,WAEf,OADIF,OAAOE,MAAM,OAAQY,MAAMD,iBAAkB,GAC1C,UAET,GAAIC,MAAMD,gBAAiB,CACzB,GAAIb,OAAOE,MAAM,QAAW,MAAO,SACnC,GAAIF,OAAOE,MAAM,KAEf,OADAY,MAAMD,iBAAkB,EACjB,UAKX,OAAIb,OAAOE,MAAM,0BACXF,OAAOkB,QAASJ,MAAMF,aAAc,GACjC,QAITZ,OAAOG,OACA,UAKbT,WAAWU,WAAW,kBAAmB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"rpm-changes\", function() {\n  var headerSeparator = /^-+$/;\n  var headerLine = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\\d{1,2} \\d{2}:\\d{2}(:\\d{2})? [A-Z]{3,4} \\d{4} - /;\n  var simpleEmail = /^[\\w+.-]+@[\\w.-]+/;\n\n  return {\n    token: function(stream) {\n      if (stream.sol()) {\n        if (stream.match(headerSeparator)) { return 'tag'; }\n        if (stream.match(headerLine)) { return 'tag'; }\n      }\n      if (stream.match(simpleEmail)) { return 'string'; }\n      stream.next();\n      return null;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-rpm-changes\", \"rpm-changes\");\n\n// Quick and dirty spec file highlighting\n\nCodeMirror.defineMode(\"rpm-spec\", function() {\n  var arch = /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;\n\n  var preamble = /^[a-zA-Z0-9()]+:/;\n  var section = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;\n  var control_flow_complex = /^%(ifnarch|ifarch|if)/; // rpm control flow macros\n  var control_flow_simple = /^%(else|endif)/; // rpm control flow macros\n  var operators = /^(\\!|\\?|\\<\\=|\\<|\\>\\=|\\>|\\=\\=|\\&\\&|\\|\\|)/; // operators in control flow macros\n\n  return {\n    startState: function () {\n        return {\n          controlFlow: false,\n          macroParameters: false,\n          section: false\n        };\n    },\n    token: function (stream, state) {\n      var ch = stream.peek();\n      if (ch == \"#\") { stream.skipToEnd(); return \"comment\"; }\n\n      if (stream.sol()) {\n        if (stream.match(preamble)) { return \"header\"; }\n        if (stream.match(section)) { return \"atom\"; }\n      }\n\n      if (stream.match(/^\\$\\w+/)) { return \"def\"; } // Variables like '$RPM_BUILD_ROOT'\n      if (stream.match(/^\\$\\{\\w+\\}/)) { return \"def\"; } // Variables like '${RPM_BUILD_ROOT}'\n\n      if (stream.match(control_flow_simple)) { return \"keyword\"; }\n      if (stream.match(control_flow_complex)) {\n        state.controlFlow = true;\n        return \"keyword\";\n      }\n      if (state.controlFlow) {\n        if (stream.match(operators)) { return \"operator\"; }\n        if (stream.match(/^(\\d+)/)) { return \"number\"; }\n        if (stream.eol()) { state.controlFlow = false; }\n      }\n\n      if (stream.match(arch)) {\n        if (stream.eol()) { state.controlFlow = false; }\n        return \"number\";\n      }\n\n      // Macros like '%make_install' or '%attr(0775,root,root)'\n      if (stream.match(/^%[\\w]+/)) {\n        if (stream.match('(')) { state.macroParameters = true; }\n        return \"keyword\";\n      }\n      if (state.macroParameters) {\n        if (stream.match(/^\\d+/)) { return \"number\";}\n        if (stream.match(')')) {\n          state.macroParameters = false;\n          return \"keyword\";\n        }\n      }\n\n      // Macros like '%{defined fedora}'\n      if (stream.match(/^%\\{\\??[\\w \\-\\:\\!]+\\}/)) {\n        if (stream.eol()) { state.controlFlow = false; }\n        return \"def\";\n      }\n\n      //TODO: Include bash script sub-parser (CodeMirror supports that)\n      stream.next();\n      return null;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-rpm-spec\", \"rpm-spec\");\n\n});\n"],"file":"rpm.js"}