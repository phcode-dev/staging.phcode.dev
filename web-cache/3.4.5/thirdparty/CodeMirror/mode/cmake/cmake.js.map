{"version":3,"sources":["thirdparty/CodeMirror/mode/cmake/cmake.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","variable_regex","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","tokenize","ch","match","skipToEnd","eatWhile","startState","inDefinition","inInclude","token","eatSpace","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,QAAS,WAC7B,IAAIC,eAAiB,wBAErB,SAASC,YAAYC,OAAQC,OAE3B,IADA,IAAIC,QAASC,KAAMC,WAAY,GACvBJ,OAAOK,QAAUH,QAAUF,OAAOM,SAAWL,MAAMM,SAAS,CAClE,GAAgB,MAAZL,SAA2B,MAARC,MAAiC,KAAjBF,MAAMM,QAAgB,CAC3DH,WAAY,EACZ,MAEFD,KAAOD,QAUT,OARIE,WACFJ,OAAOQ,OAAO,GAEZN,SAAWD,MAAMM,QACnBN,MAAMQ,gBAAiB,EAEvBR,MAAMQ,gBAAiB,EAElB,SAGT,SAASC,SAASV,OAAQC,OACxB,IAAIU,GAAKX,OAAOM,OAGhB,MAAW,MAAPK,GACEX,OAAOY,MAAMd,gBACR,aAEF,WAGLG,MAAMQ,gBAERT,OAAOQ,OAAO,GACPT,YAAYC,OAAQC,QAIzBD,OAAOY,MAAM,gBAAkBZ,OAAOY,MAAM,kBAC9CZ,OAAOQ,OAAO,GACP,OAEC,KAANG,IACFX,OAAOa,YACA,WAGC,KAANF,IAAmB,KAANA,IAEfV,MAAMM,QAAUI,GAETZ,YAAYC,OAAQC,QAEnB,KAANU,IAAmB,KAANA,GACR,UAELA,GAAGC,MAAM,SACJ,UAETZ,OAAOc,SAAS,SACT,MAET,MAAO,CACLC,WAAY,WACV,IAAId,MAAQ,CACZe,cAAqB,EACrBC,WAAkB,EAClBR,gBAAuB,EACvBF,SAAgB,GAChB,OAAON,OAETiB,MAAO,SAAUlB,OAAQC,OACvB,OAAID,OAAOmB,WAAmB,KACvBT,SAASV,OAAQC,WAK9BL,WAAWwB,WAAW,eAAgB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd)\n    define([\"../../lib/codemirror\"], mod);\n  else\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"cmake\", function () {\n  var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\n  function tokenString(stream, state) {\n    var current, prev, found_var = false;\n    while (!stream.eol() && (current = stream.next()) != state.pending) {\n      if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n        found_var = true;\n        break;\n      }\n      prev = current;\n    }\n    if (found_var) {\n      stream.backUp(1);\n    }\n    if (current == state.pending) {\n      state.continueString = false;\n    } else {\n      state.continueString = true;\n    }\n    return \"string\";\n  }\n\n  function tokenize(stream, state) {\n    var ch = stream.next();\n\n    // Have we found a variable?\n    if (ch === '$') {\n      if (stream.match(variable_regex)) {\n        return 'variable-2';\n      }\n      return 'variable';\n    }\n    // Should we still be looking for the end of a string?\n    if (state.continueString) {\n      // If so, go through the loop again\n      stream.backUp(1);\n      return tokenString(stream, state);\n    }\n    // Do we just have a function on our hands?\n    // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n    if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n      stream.backUp(1);\n      return 'def';\n    }\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    // Have we found a string?\n    if (ch == \"'\" || ch == '\"') {\n      // Store the type (single or double)\n      state.pending = ch;\n      // Perform the looping function to find the end\n      return tokenString(stream, state);\n    }\n    if (ch == '(' || ch == ')') {\n      return 'bracket';\n    }\n    if (ch.match(/[0-9]/)) {\n      return 'number';\n    }\n    stream.eatWhile(/[\\w-]/);\n    return null;\n  }\n  return {\n    startState: function () {\n      var state = {};\n      state.inDefinition = false;\n      state.inInclude = false;\n      state.continueString = false;\n      state.pending = false;\n      return state;\n    },\n    token: function (stream, state) {\n      if (stream.eatSpace()) return null;\n      return tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-cmake\", \"cmake\");\n\n});\n"],"file":"cmake.js"}