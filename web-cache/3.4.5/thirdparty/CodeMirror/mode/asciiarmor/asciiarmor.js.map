{"version":3,"sources":["thirdparty/CodeMirror/mode/asciiarmor/asciiarmor.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","errorIfNotEmpty","stream","nonWS","match","skipToEnd","defineMode","token","state","m","sol","type","result","eatWhile","next","blankLine","startState","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACV,aAEA,SAASC,gBAAgBC,QACvB,IAAIC,MAAQD,OAAOE,MAAM,UAEzB,OADAF,OAAOG,YACAF,MAAQ,QAAU,KAG3BH,WAAWM,WAAW,aAAc,WAClC,MAAO,CACLC,MAAO,SAASL,OAAQM,OACtB,IAAIC,EACJ,GAAmB,OAAfD,MAAMA,MACR,OAAIN,OAAOQ,QAAUD,EAAIP,OAAOE,MAAM,gCACpCI,MAAMA,MAAQ,UACdA,MAAMG,KAAOF,EAAE,GACR,OAEFR,gBAAgBC,QAClB,GAAmB,WAAfM,MAAMA,MAAoB,CACnC,GAAIN,OAAOQ,OAASR,OAAOE,MAAM,SAE/B,OADAI,MAAMA,MAAQ,SACP,OAEP,IAAII,OAASX,gBAAgBC,QAE7B,OADIU,SAAQJ,MAAMA,MAAQ,QACnBI,OAEJ,MAAmB,UAAfJ,MAAMA,OACfN,OAAOG,YACPG,MAAMA,MAAQ,UACP,UACiB,QAAfA,MAAMA,MACXN,OAAOQ,QAAUD,EAAIP,OAAOE,MAAM,6BAChCK,EAAE,IAAMD,MAAMG,KAAa,SAC/BH,MAAMA,MAAQ,MACP,OAEHN,OAAOW,SAAS,mBACX,MAEPX,OAAOY,OACA,SAGa,OAAfN,MAAMA,MACRP,gBAAgBC,aADlB,GAITa,UAAW,SAASP,OACC,WAAfA,MAAMA,QAAoBA,MAAMA,MAAQ,SAE9CQ,WAAY,WACV,MAAO,CAACR,MAAO,MAAOG,KAAM,UAKlCX,WAAWiB,WAAW,kBAAmB,cACzCjB,WAAWiB,WAAW,4BAA6B,cACnDjB,WAAWiB,WAAW,uBAAwB,cAC9CjB,WAAWiB,WAAW,4BAA6B","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n  }\n\n  CodeMirror.defineMode(\"asciiarmor\", function() {\n    return {\n      token: function(stream, state) {\n        var m;\n        if (state.state == \"top\") {\n          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n            state.state = \"headers\";\n            state.type = m[1];\n            return \"tag\";\n          }\n          return errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n          if (stream.sol() && stream.match(/^\\w+:/)) {\n            state.state = \"header\";\n            return \"atom\";\n          } else {\n            var result = errorIfNotEmpty(stream);\n            if (result) state.state = \"body\";\n            return result;\n          }\n        } else if (state.state == \"header\") {\n          stream.skipToEnd();\n          state.state = \"headers\";\n          return \"string\";\n        } else if (state.state == \"body\") {\n          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n            if (m[1] != state.type) return \"error\";\n            state.state = \"end\";\n            return \"tag\";\n          } else {\n            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n              return null;\n            } else {\n              stream.next();\n              return \"error\";\n            }\n          }\n        } else if (state.state == \"end\") {\n          return errorIfNotEmpty(stream);\n        }\n      },\n      blankLine: function(state) {\n        if (state.state == \"headers\") state.state = \"body\";\n      },\n      startState: function() {\n        return {state: \"top\", type: null};\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"application/pgp\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-encrypted\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-keys\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-signature\", \"asciiarmor\");\n});\n"],"file":"asciiarmor.js"}