{"version":3,"sources":["thirdparty/CodeMirror/mode/scheme/scheme.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","BUILTIN","COMMENT","STRING","SYMBOL","ATOM","NUMBER","BRACKET","INDENT_WORD_SKIP","makeKeywords","str","obj","words","split","i","length","keywords","indentKeys","stateStack","indent","type","prev","this","pushStack","state","indentStack","popStack","binaryMatcher","RegExp","octalMatcher","hexMatcher","decimalMatcher","isBinaryNumber","stream","match","isOctalNumber","isDecimalNumber","backup","backUp","isHexNumber","processEscapedSequence","options","next","escaped","token","mode","startState","indentation","sExprComment","sExprQuote","sol","eatSpace","returnType","maybeEnd","peek","eatWhile","ch","eat","numTest","hasExactness","hasRadix","test","skipToEnd","keyWord","indentTemp","column","letter","propertyIsEnumerable","eol","current","fold","closeBrackets","pairs","lineComment","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Author: Koh Zi Han, based on implementation by Koh Zi Chun\n * Improved by: Jakub T. Jankiewicz\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"scheme\", function () {\n    var BUILTIN = \"builtin\", COMMENT = \"comment\", STRING = \"string\",\n        SYMBOL = \"symbol\", ATOM = \"atom\", NUMBER = \"number\", BRACKET = \"bracket\";\n    var INDENT_WORD_SKIP = 2;\n\n    function makeKeywords(str) {\n        var obj = {}, words = str.split(\" \");\n        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n        return obj;\n    }\n\n    var keywords = makeKeywords(\"Î» case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?\");\n    var indentKeys = makeKeywords(\"define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless\");\n\n    function stateStack(indent, type, prev) { // represents a state stack object\n        this.indent = indent;\n        this.type = type;\n        this.prev = prev;\n    }\n\n    function pushStack(state, indent, type) {\n        state.indentStack = new stateStack(indent, type, state.indentStack);\n    }\n\n    function popStack(state) {\n        state.indentStack = state.indentStack.prev;\n    }\n\n    var binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\\/[01]+#*)?i|[-+]?[01]+#*(?:\\/[01]+#*)?@[-+]?[01]+#*(?:\\/[01]+#*)?|[-+]?[01]+#*(?:\\/[01]+#*)?[-+](?:[01]+#*(?:\\/[01]+#*)?)?i|[-+]?[01]+#*(?:\\/[01]+#*)?)(?=[()\\s;\"]|$)/i);\n    var octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\\/[0-7]+#*)?)(?=[()\\s;\"]|$)/i);\n    var hexMatcher = new RegExp(/^(?:[-+]i|[-+][\\da-f]+#*(?:\\/[\\da-f]+#*)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?@[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?[-+](?:[\\da-f]+#*(?:\\/[\\da-f]+#*)?)?i|[-+]?[\\da-f]+#*(?:\\/[\\da-f]+#*)?)(?=[()\\s;\"]|$)/i);\n    var decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)i|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)@[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)|[-+]?(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)[-+](?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*)?i|(?:(?:(?:\\d+#+\\.?#*|\\d+\\.\\d*#*|\\.\\d+#*|\\d+)(?:[esfdl][-+]?\\d+)?)|\\d+#*\\/\\d+#*))(?=[()\\s;\"]|$)/i);\n\n    function isBinaryNumber (stream) {\n        return stream.match(binaryMatcher);\n    }\n\n    function isOctalNumber (stream) {\n        return stream.match(octalMatcher);\n    }\n\n    function isDecimalNumber (stream, backup) {\n        if (backup === true) {\n            stream.backUp(1);\n        }\n        return stream.match(decimalMatcher);\n    }\n\n    function isHexNumber (stream) {\n        return stream.match(hexMatcher);\n    }\n\n    function processEscapedSequence(stream, options) {\n        var next, escaped = false;\n        while ((next = stream.next()) != null) {\n            if (next == options.token && !escaped) {\n\n                options.state.mode = false;\n                break;\n            }\n            escaped = !escaped && next == \"\\\\\";\n        }\n    }\n\n    return {\n        startState: function () {\n            return {\n                indentStack: null,\n                indentation: 0,\n                mode: false,\n                sExprComment: false,\n                sExprQuote: false\n            };\n        },\n\n        token: function (stream, state) {\n            if (state.indentStack == null && stream.sol()) {\n                // update indentation, but only if indentStack is empty\n                state.indentation = stream.indentation();\n            }\n\n            // skip spaces\n            if (stream.eatSpace()) {\n                return null;\n            }\n            var returnType = null;\n\n            switch(state.mode){\n                case \"string\": // multi-line string parsing mode\n                    processEscapedSequence(stream, {\n                        token: \"\\\"\",\n                        state: state\n                    });\n                    returnType = STRING; // continue on in scheme-string mode\n                    break;\n                case \"symbol\": // escape symbol\n                    processEscapedSequence(stream, {\n                        token: \"|\",\n                        state: state\n                    });\n                    returnType = SYMBOL; // continue on in scheme-symbol mode\n                    break;\n                case \"comment\": // comment parsing mode\n                    var next, maybeEnd = false;\n                    while ((next = stream.next()) != null) {\n                        if (next == \"#\" && maybeEnd) {\n\n                            state.mode = false;\n                            break;\n                        }\n                        maybeEnd = (next == \"|\");\n                    }\n                    returnType = COMMENT;\n                    break;\n                case \"s-expr-comment\": // s-expr commenting mode\n                    state.mode = false;\n                    if(stream.peek() == \"(\" || stream.peek() == \"[\"){\n                        // actually start scheme s-expr commenting mode\n                        state.sExprComment = 0;\n                    }else{\n                        // if not we just comment the entire of the next token\n                        stream.eatWhile(/[^\\s\\(\\)\\[\\]]/); // eat symbol atom\n                        returnType = COMMENT;\n                        break;\n                    }\n                default: // default parsing mode\n                    var ch = stream.next();\n\n                    if (ch == \"\\\"\") {\n                        state.mode = \"string\";\n                        returnType = STRING;\n\n                    } else if (ch == \"'\") {\n                        if (stream.peek() == \"(\" || stream.peek() == \"[\"){\n                            if (typeof state.sExprQuote != \"number\") {\n                                state.sExprQuote = 0;\n                            } // else already in a quoted expression\n                            returnType = ATOM;\n                        } else {\n                            stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n                            returnType = ATOM;\n                        }\n                    } else if (ch == '|') {\n                        state.mode = \"symbol\";\n                        returnType = SYMBOL;\n                    } else if (ch == '#') {\n                        if (stream.eat(\"|\")) {                    // Multi-line comment\n                            state.mode = \"comment\"; // toggle to comment mode\n                            returnType = COMMENT;\n                        } else if (stream.eat(/[tf]/i)) {            // #t/#f (atom)\n                            returnType = ATOM;\n                        } else if (stream.eat(';')) {                // S-Expr comment\n                            state.mode = \"s-expr-comment\";\n                            returnType = COMMENT;\n                        } else {\n                            var numTest = null, hasExactness = false, hasRadix = true;\n                            if (stream.eat(/[ei]/i)) {\n                                hasExactness = true;\n                            } else {\n                                stream.backUp(1);       // must be radix specifier\n                            }\n                            if (stream.match(/^#b/i)) {\n                                numTest = isBinaryNumber;\n                            } else if (stream.match(/^#o/i)) {\n                                numTest = isOctalNumber;\n                            } else if (stream.match(/^#x/i)) {\n                                numTest = isHexNumber;\n                            } else if (stream.match(/^#d/i)) {\n                                numTest = isDecimalNumber;\n                            } else if (stream.match(/^[-+0-9.]/, false)) {\n                                hasRadix = false;\n                                numTest = isDecimalNumber;\n                            // re-consume the initial # if all matches failed\n                            } else if (!hasExactness) {\n                                stream.eat('#');\n                            }\n                            if (numTest != null) {\n                                if (hasRadix && !hasExactness) {\n                                    // consume optional exactness after radix\n                                    stream.match(/^#[ei]/i);\n                                }\n                                if (numTest(stream))\n                                    returnType = NUMBER;\n                            }\n                        }\n                    } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) { // match non-prefixed number, must be decimal\n                        returnType = NUMBER;\n                    } else if (ch == \";\") { // comment\n                        stream.skipToEnd(); // rest of the line is a comment\n                        returnType = COMMENT;\n                    } else if (ch == \"(\" || ch == \"[\") {\n                      var keyWord = ''; var indentTemp = stream.column(), letter;\n                        /**\n                        Either\n                        (indent-word ..\n                        (non-indent-word ..\n                        (;something else, bracket, etc.\n                        */\n\n                        while ((letter = stream.eat(/[^\\s\\(\\[\\;\\)\\]]/)) != null) {\n                            keyWord += letter;\n                        }\n\n                        if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) { // indent-word\n\n                            pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);\n                        } else { // non-indent word\n                            // we continue eating the spaces\n                            stream.eatSpace();\n                            if (stream.eol() || stream.peek() == \";\") {\n                                // nothing significant after\n                                // we restart indentation 1 space after\n                                pushStack(state, indentTemp + 1, ch);\n                            } else {\n                                pushStack(state, indentTemp + stream.current().length, ch); // else we match\n                            }\n                        }\n                        stream.backUp(stream.current().length - 1); // undo all the eating\n\n                        if(typeof state.sExprComment == \"number\") state.sExprComment++;\n                        if(typeof state.sExprQuote == \"number\") state.sExprQuote++;\n\n                        returnType = BRACKET;\n                    } else if (ch == \")\" || ch == \"]\") {\n                        returnType = BRACKET;\n                        if (state.indentStack != null && state.indentStack.type == (ch == \")\" ? \"(\" : \"[\")) {\n                            popStack(state);\n\n                            if(typeof state.sExprComment == \"number\"){\n                                if(--state.sExprComment == 0){\n                                    returnType = COMMENT; // final closing bracket\n                                    state.sExprComment = false; // turn off s-expr commenting mode\n                                }\n                            }\n                            if(typeof state.sExprQuote == \"number\"){\n                                if(--state.sExprQuote == 0){\n                                    returnType = ATOM; // final closing bracket\n                                    state.sExprQuote = false; // turn off s-expr quote mode\n                                }\n                            }\n                        }\n                    } else {\n                        stream.eatWhile(/[\\w_\\-!$%&*+\\.\\/:<=>?@\\^~]/);\n\n                        if (keywords && keywords.propertyIsEnumerable(stream.current())) {\n                            returnType = BUILTIN;\n                        } else returnType = \"variable\";\n                    }\n            }\n            return (typeof state.sExprComment == \"number\") ? COMMENT : ((typeof state.sExprQuote == \"number\") ? ATOM : returnType);\n        },\n\n        indent: function (state) {\n            if (state.indentStack == null) return state.indentation;\n            return state.indentStack.indent;\n        },\n\n        fold: \"brace-paren\",\n        closeBrackets: {pairs: \"()[]{}\\\"\\\"\"},\n        lineComment: \";;\"\n    };\n});\n\nCodeMirror.defineMIME(\"text/x-scheme\", \"scheme\");\n\n});\n"],"file":"scheme.js"}