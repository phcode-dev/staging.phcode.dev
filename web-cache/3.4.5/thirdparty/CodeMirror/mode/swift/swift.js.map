{"version":3,"sources":["thirdparty/CodeMirror/mode/swift/swift.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","wordSet","words","set","i","length","keywords","definingKeywords","atoms","types","operators","punc","binary","octal","hexadecimal","decimal","identifier","property","instruction","attribute","tokenBase","stream","state","prev","sol","indented","indentation","eatSpace","ch","peek","stringMatch","match","skipToEnd","tokenize","push","tokenComment","indexOf","next","tokenString","bind","ident","current","hasOwnProperty","tokenUntilClosingParen","depth","inner","backUp","pop","openQuote","singleLine","escaped","eat","Context","align","this","pushContext","column","context","popContext","defineMode","config","startState","token","style","bracket","exec","indent","textAfter","cx","closing","test","indentUnit","electricInput","lineComment","blockCommentStart","blockCommentEnd","fold","closeBrackets","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Swift mode created by Michael Kaminsky https://github.com/mkaminsky11\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd)\n    define([\"../../lib/codemirror\"], mod)\n  else\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n\n  function wordSet(words) {\n    var set = {}\n    for (var i = 0; i < words.length; i++) set[words[i]] = true\n    return set\n  }\n\n  var keywords = wordSet([\"_\",\"var\",\"let\",\"actor\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\n                          \"open\",\"public\",\"internal\",\"fileprivate\",\"private\",\"deinit\",\"init\",\"new\",\"override\",\"self\",\"subscript\",\"super\",\n                          \"convenience\",\"dynamic\",\"final\",\"indirect\",\"lazy\",\"required\",\"static\",\"unowned\",\"unowned(safe)\",\"unowned(unsafe)\",\"weak\",\"as\",\"is\",\n                          \"break\",\"case\",\"continue\",\"default\",\"else\",\"fallthrough\",\"for\",\"guard\",\"if\",\"in\",\"repeat\",\"switch\",\"where\",\"while\",\n                          \"defer\",\"return\",\"inout\",\"mutating\",\"nonmutating\",\"isolated\",\"nonisolated\",\"catch\",\"do\",\"rethrows\",\"throw\",\"throws\",\"async\",\"await\",\"try\",\"didSet\",\"get\",\"set\",\"willSet\",\n                          \"assignment\",\"associativity\",\"infix\",\"left\",\"none\",\"operator\",\"postfix\",\"precedence\",\"precedencegroup\",\"prefix\",\"right\",\n                          \"Any\",\"AnyObject\",\"Type\",\"dynamicType\",\"Self\",\"Protocol\",\"__COLUMN__\",\"__FILE__\",\"__FUNCTION__\",\"__LINE__\"])\n  var definingKeywords = wordSet([\"var\",\"let\",\"actor\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\"for\"])\n  var atoms = wordSet([\"true\",\"false\",\"nil\",\"self\",\"super\",\"_\"])\n  var types = wordSet([\"Array\",\"Bool\",\"Character\",\"Dictionary\",\"Double\",\"Float\",\"Int\",\"Int8\",\"Int16\",\"Int32\",\"Int64\",\"Never\",\"Optional\",\"Set\",\"String\",\n                       \"UInt8\",\"UInt16\",\"UInt32\",\"UInt64\",\"Void\"])\n  var operators = \"+-/*%=|&<>~^?!\"\n  var punc = \":;,.(){}[]\"\n  var binary = /^\\-?0b[01][01_]*/\n  var octal = /^\\-?0o[0-7][0-7_]*/\n  var hexadecimal = /^\\-?0x[\\dA-Fa-f][\\dA-Fa-f_]*(?:(?:\\.[\\dA-Fa-f][\\dA-Fa-f_]*)?[Pp]\\-?\\d[\\d_]*)?/\n  var decimal = /^\\-?\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee]\\-?\\d[\\d_]*)?/\n  var identifier = /^\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1/\n  var property = /^\\.(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\n  var instruction = /^\\#[A-Za-z]+/\n  var attribute = /^@(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\n  //var regexp = /^\\/(?!\\s)(?:\\/\\/)?(?:\\\\.|[^\\/])+\\//\n\n  function tokenBase(stream, state, prev) {\n    if (stream.sol()) state.indented = stream.indentation()\n    if (stream.eatSpace()) return null\n\n    var ch = stream.peek()\n    if (ch == \"/\") {\n      if (stream.match(\"//\")) {\n        stream.skipToEnd()\n        return \"comment\"\n      }\n      if (stream.match(\"/*\")) {\n        state.tokenize.push(tokenComment)\n        return tokenComment(stream, state)\n      }\n    }\n    if (stream.match(instruction)) return \"builtin\"\n    if (stream.match(attribute)) return \"attribute\"\n    if (stream.match(binary)) return \"number\"\n    if (stream.match(octal)) return \"number\"\n    if (stream.match(hexadecimal)) return \"number\"\n    if (stream.match(decimal)) return \"number\"\n    if (stream.match(property)) return \"property\"\n    if (operators.indexOf(ch) > -1) {\n      stream.next()\n      return \"operator\"\n    }\n    if (punc.indexOf(ch) > -1) {\n      stream.next()\n      stream.match(\"..\")\n      return \"punctuation\"\n    }\n    var stringMatch\n    if (stringMatch = stream.match(/(\"\"\"|\"|')/)) {\n      var tokenize = tokenString.bind(null, stringMatch[0])\n      state.tokenize.push(tokenize)\n      return tokenize(stream, state)\n    }\n\n    if (stream.match(identifier)) {\n      var ident = stream.current()\n      if (types.hasOwnProperty(ident)) return \"variable-2\"\n      if (atoms.hasOwnProperty(ident)) return \"atom\"\n      if (keywords.hasOwnProperty(ident)) {\n        if (definingKeywords.hasOwnProperty(ident))\n          state.prev = \"define\"\n        return \"keyword\"\n      }\n      if (prev == \"define\") return \"def\"\n      return \"variable\"\n    }\n\n    stream.next()\n    return null\n  }\n\n  function tokenUntilClosingParen() {\n    var depth = 0\n    return function(stream, state, prev) {\n      var inner = tokenBase(stream, state, prev)\n      if (inner == \"punctuation\") {\n        if (stream.current() == \"(\") ++depth\n        else if (stream.current() == \")\") {\n          if (depth == 0) {\n            stream.backUp(1)\n            state.tokenize.pop()\n            return state.tokenize[state.tokenize.length - 1](stream, state)\n          }\n          else --depth\n        }\n      }\n      return inner\n    }\n  }\n\n  function tokenString(openQuote, stream, state) {\n    var singleLine = openQuote.length == 1\n    var ch, escaped = false\n    while (ch = stream.peek()) {\n      if (escaped) {\n        stream.next()\n        if (ch == \"(\") {\n          state.tokenize.push(tokenUntilClosingParen())\n          return \"string\"\n        }\n        escaped = false\n      } else if (stream.match(openQuote)) {\n        state.tokenize.pop()\n        return \"string\"\n      } else {\n        stream.next()\n        escaped = ch == \"\\\\\"\n      }\n    }\n    if (singleLine) {\n      state.tokenize.pop()\n    }\n    return \"string\"\n  }\n\n  function tokenComment(stream, state) {\n    var ch\n    while (true) {\n      stream.match(/^[^/*]+/, true)\n      ch = stream.next()\n      if (!ch) break\n      if (ch === \"/\" && stream.eat(\"*\")) {\n        state.tokenize.push(tokenComment)\n      } else if (ch === \"*\" && stream.eat(\"/\")) {\n        state.tokenize.pop()\n      }\n    }\n    return \"comment\"\n  }\n\n  function Context(prev, align, indented) {\n    this.prev = prev\n    this.align = align\n    this.indented = indented\n  }\n\n  function pushContext(state, stream) {\n    var align = stream.match(/^\\s*($|\\/[\\/\\*])/, false) ? null : stream.column() + 1\n    state.context = new Context(state.context, align, state.indented)\n  }\n\n  function popContext(state) {\n    if (state.context) {\n      state.indented = state.context.indented\n      state.context = state.context.prev\n    }\n  }\n\n  CodeMirror.defineMode(\"swift\", function(config) {\n    return {\n      startState: function() {\n        return {\n          prev: null,\n          context: null,\n          indented: 0,\n          tokenize: []\n        }\n      },\n\n      token: function(stream, state) {\n        var prev = state.prev\n        state.prev = null\n        var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase\n        var style = tokenize(stream, state, prev)\n        if (!style || style == \"comment\") state.prev = prev\n        else if (!state.prev) state.prev = style\n\n        if (style == \"punctuation\") {\n          var bracket = /[\\(\\[\\{]|([\\]\\)\\}])/.exec(stream.current())\n          if (bracket) (bracket[1] ? popContext : pushContext)(state, stream)\n        }\n\n        return style\n      },\n\n      indent: function(state, textAfter) {\n        var cx = state.context\n        if (!cx) return 0\n        var closing = /^[\\]\\}\\)]/.test(textAfter)\n        if (cx.align != null) return cx.align - (closing ? 1 : 0)\n        return cx.indented + (closing ? 0 : config.indentUnit)\n      },\n\n      electricInput: /^\\s*[\\)\\}\\]]$/,\n\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\"\n    }\n  })\n\n  CodeMirror.defineMIME(\"text/x-swift\",\"swift\")\n});\n"],"file":"swift.js"}