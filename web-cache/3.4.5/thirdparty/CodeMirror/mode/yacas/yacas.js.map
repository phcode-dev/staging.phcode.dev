{"version":3,"sources":["thirdparty/CodeMirror/mode/yacas/yacas.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_config","_parserConfig","words","str","obj","split","i","length","bodiedOps","pFloatForm","pIdentifier","reFloatForm","RegExp","reIdentifier","rePattern","reFunctionLike","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","tokenComment","skipToEnd","backUp","m","match","hasOwnProperty","scopes","push","scope","currentScope","pop","end","escaped","prev","startState","token","eatSpace","indent","textAfter","Pass","delta","indentUnit","electricChars","blockCommentStart","blockCommentEnd","lineComment","defineMIME","name"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Yacas mode copyright (c) 2015 by Grzegorz Mazur\n// Loosely based on mathematica mode by Calin Barbat\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('yacas', function(_config, _parserConfig) {\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var bodiedOps = words(\"Assert BackQuote D Defun Deriv For ForEach FromFile \" +\n                        \"FromString Function Integrate InverseTaylor Limit \" +\n                        \"LocalSymbols Macro MacroRule MacroRulePattern \" +\n                        \"NIntegrate Rule RulePattern Subst TD TExplicitSum \" +\n                        \"TSum Taylor Taylor1 Taylor2 Taylor3 ToFile \" +\n                        \"ToStdout ToString TraceRule Until While\");\n\n  // patterns\n  var pFloatForm  = \"(?:(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)(?:[eE][+-]?\\\\d+)?)\";\n  var pIdentifier = \"(?:[a-zA-Z\\\\$'][a-zA-Z0-9\\\\$']*)\";\n\n  // regular expressions\n  var reFloatForm    = new RegExp(pFloatForm);\n  var reIdentifier   = new RegExp(pIdentifier);\n  var rePattern      = new RegExp(pIdentifier + \"?_\" + pIdentifier);\n  var reFunctionLike = new RegExp(pIdentifier + \"\\\\s*\\\\(\");\n\n  function tokenBase(stream, state) {\n    var ch;\n\n    // get next character\n    ch = stream.next();\n\n    // string\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n\n    // comment\n    if (ch === '/') {\n      if (stream.eat('*')) {\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n\n    // go back one character\n    stream.backUp(1);\n\n    // update scope info\n    var m = stream.match(/^(\\w+)\\s*\\(/, false);\n    if (m !== null && bodiedOps.hasOwnProperty(m[1]))\n      state.scopes.push('bodied');\n\n    var scope = currentScope(state);\n\n    if (scope === 'bodied' && ch === '[')\n      state.scopes.pop();\n\n    if (ch === '[' || ch === '{' || ch === '(')\n      state.scopes.push(ch);\n\n    scope = currentScope(state);\n\n    if (scope === '[' && ch === ']' ||\n        scope === '{' && ch === '}' ||\n        scope === '(' && ch === ')')\n      state.scopes.pop();\n\n    if (ch === ';') {\n      while (scope === 'bodied') {\n        state.scopes.pop();\n        scope = currentScope(state);\n      }\n    }\n\n    // look for ordered rules\n    if (stream.match(/\\d+ *#/, true, false)) {\n      return 'qualifier';\n    }\n\n    // look for numbers\n    if (stream.match(reFloatForm, true, false)) {\n      return 'number';\n    }\n\n    // look for placeholders\n    if (stream.match(rePattern, true, false)) {\n      return 'variable-3';\n    }\n\n    // match all braces separately\n    if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n      return 'bracket';\n    }\n\n    // literals looking like function calls\n    if (stream.match(reFunctionLike, true, false)) {\n      stream.backUp(1);\n      return 'variable';\n    }\n\n    // all other identifiers\n    if (stream.match(reIdentifier, true, false)) {\n      return 'variable-2';\n    }\n\n    // operators; note that operators like @@ or /; are matched separately for each symbol.\n    if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%|#)/, true, false)) {\n      return 'operator';\n    }\n\n    // everything else is an error\n    return 'error';\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while((next = stream.next()) != null) {\n      if (prev === '*' && next === '/') {\n        state.tokenize = tokenBase;\n        break;\n      }\n      prev = next;\n    }\n    return 'comment';\n  }\n\n  function currentScope(state) {\n    var scope = null;\n    if (state.scopes.length > 0)\n      scope = state.scopes[state.scopes.length - 1];\n    return scope;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: []\n      };\n    },\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n    indent: function(state, textAfter) {\n      if (state.tokenize !== tokenBase && state.tokenize !== null)\n        return CodeMirror.Pass;\n\n      var delta = 0;\n      if (textAfter === ']' || textAfter === '];' ||\n          textAfter === '}' || textAfter === '};' ||\n          textAfter === ');')\n        delta = -1;\n\n      return (state.scopes.length + delta) * _config.indentUnit;\n    },\n    electricChars: \"{}[]();\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-yacas', {\n  name: 'yacas'\n});\n\n});\n"],"file":"yacas.js"}