{"version":3,"sources":["command/KeyBindingManager.js"],"names":["define","require","exports","module","AppInit","Commands","CommandManager","DefaultDialogs","EventDispatcher","FileSystem","FileSystemError","FileUtils","KeyEvent","Strings","Keys","KeyboardOverlayMode","StringUtils","Metrics","Dialogs","Mustache","UrlParams","_","KeyboardPrefs","JSON","parse","KeyboardDialogTemplate","KEYMAP_FILENAME","_userKeyMapFilePath","path","normalize","brackets","app","getApplicationSupportDirectory","EVENT_KEY_BINDING_ADDED","EVENT_KEY_BINDING_REMOVED","KEY","_keyMap","_defaultKeyMap","_customKeyMap","_customKeyMapCache","_commandMap","_allCommands","_displayKeyMap","up","down","left","right","-","_specialCommands","EDIT_UNDO","EDIT_REDO","EDIT_SELECT_ALL","EDIT_CUT","EDIT_COPY","EDIT_PASTE","_reservedShortcuts","_macReservedShortcuts","_keyNames","_showErrors","_enabled","_globalKeydownHooks","_loadUserKeyMap","CtrlDownStates","NOT_YET_DETECTED","DETECTED","DETECTED_AND_IGNORED","_ctrlDown","_altGrDown","_lastTimeStamp","_lastKeyIdentifier","MAX_INTERVAL_FOR_CTRL_ALT_KEYS","_onCtrlUp","_quitAltGrMode","$","window","off","_detectAltGrKeyDown","e","platform","key","altKey","ctrlKey","repeat","timeStamp","on","_reset","_buildKeyDescriptor","hasMacCtrl","hasCtrl","hasAlt","hasShift","console","log","keyDescriptor","push","unshift","join","normalizeKeyDescriptorString","origDescriptor","error","_compareModifierString","trim","toLowerCase","length","split","forEach","parseDescriptor","ele","i","arr","search","indexOf","test","capitalize","replace","match","p1","_mapKeycodeToKeyLegacy","keycode","DOM_VK_0","DOM_VK_9","DOM_VK_A","DOM_VK_Z","String","fromCharCode","DOM_VK_NUMPAD0","DOM_VK_NUMPAD9","DOM_VK_SEMICOLON","DOM_VK_EQUALS","DOM_VK_COMMA","DOM_VK_SUBTRACT","DOM_VK_DASH","DOM_VK_ADD","DOM_VK_DECIMAL","DOM_VK_PERIOD","DOM_VK_DIVIDE","DOM_VK_SLASH","DOM_VK_BACK_QUOTE","DOM_VK_OPEN_BRACKET","DOM_VK_BACK_SLASH","DOM_VK_CLOSE_BRACKET","DOM_VK_QUOTE","_mapKeycodeToKey","event","metaKey","keyCode","codes","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"," ","_translateKeyboardEvent","formatKeyDescriptor","descriptor","displayStr","KEYBOARD_CTRL","KEYBOARD_SHIFT","KEYBOARD_SPACE","KEYBOARD_PAGE_UP","KEYBOARD_PAGE_DOWN","KEYBOARD_HOME","KEYBOARD_END","KEYBOARD_INSERT","KEYBOARD_DELETE","_isKeyAssigned","undefined","removeBinding","normalizedKey","binding","command","get","commandID","bindings","filter","b","trigger","displayKey","_updateCommandAndKeyMaps","newBinding","cloneDeep","_addBinding","keyBinding","userBindings","isMenuShortcut","result","normalized","normalizedDisplay","explicitPlatform","targetPlatform","bindingsToDelete","existing","isSingleCharAZ","str","keySplit","useWindowsCompatibleBindings","existingBindings","isWindowsCompatible","isReplaceGeneric","ignoreGeneric","getKeymap","defaults","extend","_makeMapFromArray","map","item","which","DOM_VK_CONTROL","UN_SWALLOWED_EVENTS","UN_SWALLOWED_KEYS","concat","_isUnSwallowedKeys","_handleKey","countEvent","EVENT_TYPE","KEYBOARD","logger","leaveTrail","eventDetails","_options","eventSource","SOURCE_KEYBOARD_SHORTCUT","sourceType","promise","execute","state","_sortByPlatform","a","a1","b1","addBinding","keyBindings","options","results","getID","Array","isArray","sort","addSingleBinding","keyBindingRequest","getKeyBindings","getKeyBindingsDisplay","shortCut","_handledCommands","_handleCommandRegistered","commandId","_initDefaultShortcuts","addGlobalKeydownHook","hook","index","removeGlobalKeydownHook","splice","lastKeyPressTime","pressCount","doublePressInterval","ctrlKeyCodes","ControlLeft","ControlRight","MetaLeft","MetaRight","Control","Meta","_detectDoubleCtrlKeyPress","code","shiftKey","currentTime","Date","getTime","startOverlayMode","stopPropagation","preventDefault","dontHideMouseOnKeys","Escape","Home","End","PageUp","PageDown","Shift","Alt","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","Insert","ContextMenu","NumLock","ScrollLock","CapsLock","mouseCursorHidden","_hideMouseCursonOnTyping","Phoenix","isSpecRunnerWindow","document","body","classList","add","_handleKeyEvent","isInOverlayMode","processOverlayKeyboardEvent","handled","shortcut","keyboardShortcutCaptureInProgress","updateShortcutSelection","_showErrorsAndOpenKeyMap","err","message","errorMessage","ERROR_KEYMAP_CORRUPT","UNSUPPORTED_ENCODING","ERROR_LOADING_KEYMAP","showModalDialog","DIALOG_ID_ERROR","ERROR_KEYMAP_TITLE","done","FILE_OPEN_KEYMAP","_isSpecialCommand","_isReservedShortcuts","_getBulletList","list","info","_getDisplayKey","substr","_applyUserKeyBindings","remappedCommands","remappedKeys","restrictedCommands","restrictedKeys","invalidKeys","invalidCommands","multipleKeys","duplicateBindings","keybinding","format","ERROR_RESTRICTED_COMMANDS","ERROR_RESTRICTED_SHORTCUTS","ERROR_MULTIPLE_SHORTCUTS","ERROR_DUPLICATE_SHORTCUTS","ERROR_INVALID_SHORTCUTS","ERROR_NONEXISTENT_COMMANDS","_undoPriorUserKeyBindings","find","toArray","defaultCommand","_getUserKeyMapFilePath","isBracketsTestWindow","async","_addToUserKeymapFile","file","getFileForPath","userKeyMap","overrides","keyMapExists","VFS","existsAsync","fullPath","text","deferredToPromise","readAsText","shortcutKey","Object","keys","textContent","stringify","writeText","_readUserKeyMap","Deferred","exists","doesExist","keyMap","json","resolve","reject","fail","_loadUserKeyMapImmediate","Promise","then","getAll","resetUserShortcutsAsync","userKeyMapPath","defaultContent","catch","_openUserKeyMap","FILE_OPEN","finally","_initCommandAndKeyMaps","_setUserKeyMapFilePath","_isAnAssignableKey","includes","capturedShortcut","existingBinding","keyboardShortcutDialog","close","html","KEYBOARD_SHORTCUT_CHANGE_DIALOG_DUPLICATE","getName","removeClass","focus","addClass","htmlReady","addEventListener","remove","debounce","on_duringInit","register","CMD_OPEN_KEYMAP","DocumentManager","checkKeyMapUpdates","doc","extensionsLoaded","params","showShortcutSelectionDialog","panelCommand","HELP_TOGGLE_SHORTCUTS_PANEL","currentShortcut","KEYBOARD_SHORTCUT_NONE","showModalDialogUsingTemplate","render","KEYBOARD_SHORTCUT_CHANGE_DIALOG_TEXT","getChecked","closeReason","DIALOG_BTN_OK","canAssignBinding"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals path, logger*/\n/*jslint regexp: true */\n/*unittests: KeyBindingManager */\n\n/**\n * Manages the mapping of keyboard inputs to commands.\n */\ndefine(function (require, exports, module) {\n\n\n    require(\"utils/Global\");\n\n    let AppInit             = require(\"utils/AppInit\"),\n        Commands            = require(\"command/Commands\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        DefaultDialogs      = require(\"widgets/DefaultDialogs\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        FileSystem          = require(\"filesystem/FileSystem\"),\n        FileSystemError     = require(\"filesystem/FileSystemError\"),\n        FileUtils           = require(\"file/FileUtils\"),\n        KeyEvent            = require(\"utils/KeyEvent\"),\n        Strings             = require(\"strings\"),\n        Keys                = require(\"command/Keys\"),\n        KeyboardOverlayMode = require(\"command/KeyboardOverlayMode\"),\n        StringUtils         = require(\"utils/StringUtils\"),\n        Metrics             = require(\"utils/Metrics\"),\n        Dialogs                 = require(\"widgets/Dialogs\"),\n        Mustache            = require(\"thirdparty/mustache/mustache\"),\n        UrlParams           = require(\"utils/UrlParams\").UrlParams,\n        _                   = require(\"thirdparty/lodash\");\n\n    let KeyboardPrefs       = JSON.parse(require(\"text!base-config/keyboard.json\"));\n    let KeyboardDialogTemplate = require(\"text!./ChangeShortcutTemplate.html\");\n\n    let KEYMAP_FILENAME     = \"keymap.json\",\n        _userKeyMapFilePath = path.normalize(brackets.app.getApplicationSupportDirectory() + \"/\" + KEYMAP_FILENAME);\n\n    const EVENT_KEY_BINDING_ADDED = \"keyBindingAdded\",\n        EVENT_KEY_BINDING_REMOVED = \"keyBindingRemoved\";\n\n    const KEY = Keys.KEY;\n\n    /**\n     * @private\n     * Maps normalized shortcut descriptor to key binding info.\n     * @type {!Object.<string, {commandID: string, key: string, displayKey: string}>}\n     */\n    let _keyMap            = {},    // For the actual key bindings including user specified ones\n        // For the default factory key bindings, cloned from _keyMap after all extensions are loaded.\n        _defaultKeyMap     = {};\n\n    /**\n     * @typedef {{shortcut: !string,\n     *            commandID: ?string}} UserKeyBinding\n     */\n\n    /**\n     * @private\n     * Maps shortcut descriptor to a command id.\n     * @type {UserKeyBinding}\n     */\n    let _customKeyMap      = {},\n        _customKeyMapCache = {};\n\n    /**\n     * @private\n     * Maps commandID to the list of shortcuts that are bound to it.\n     * @type {!Object.<string, Array.<{key: string, displayKey: string}>>}\n     */\n    let _commandMap  = {};\n\n    /**\n     * @private\n     * An array of command ID for all the available commands including the commands\n     * of installed extensions.\n     * @type {Array.<string>}\n     */\n    let _allCommands = [];\n\n    /**\n     * @private\n     * Maps key names to the corresponding unicode symols\n     * @type {{key: string, displayKey: string}}\n     */\n    let _displayKeyMap        = { \"up\": \"\\u2191\",\n        \"down\": \"\\u2193\",\n        \"left\": \"\\u2190\",\n        \"right\": \"\\u2192\",\n        \"-\": \"\\u2212\" };\n\n    let _specialCommands      = [Commands.EDIT_UNDO, Commands.EDIT_REDO, Commands.EDIT_SELECT_ALL,\n            Commands.EDIT_CUT, Commands.EDIT_COPY, Commands.EDIT_PASTE],\n        _reservedShortcuts    = [\"Ctrl-Z\", \"Ctrl-Y\", \"Ctrl-A\", \"Ctrl-X\", \"Ctrl-C\", \"Ctrl-V\", \"Ctrl-=\", \"Ctrl--\"],\n        _macReservedShortcuts = [\"Cmd-,\", \"Cmd-H\", \"Cmd-Alt-H\", \"Cmd-M\", \"Cmd-Shift-Z\", \"Cmd-Q\", \"Cmd-=\", \"Cmd--\"],\n        _keyNames             = [\"Up\", \"Down\", \"Left\", \"Right\", \"Backspace\", \"Enter\", \"Space\", \"Tab\",\n            \"PageUp\", \"PageDown\", \"Home\", \"End\", \"Insert\", \"Delete\"];\n\n    /**\n     * @private\n     * Flag to show key binding errors in the key map file. Default is true and\n     * it will be set to false when reloading without extensions. This flag is not\n     * used to suppress errors in loading or parsing the key map file. So if the key\n     * map file is corrupt, then the error dialog still shows up.\n     *\n     * @type {boolean}\n     */\n    let _showErrors = true;\n\n    /**\n     * @private\n     * Allow clients to toggle key binding\n     * @type {boolean}\n     */\n    let _enabled = true;\n\n    /**\n     * @private\n     * Stack of registered global keydown hooks.\n     * @type {Array.<function(Event): boolean>}\n     */\n    let _globalKeydownHooks = [];\n\n    /**\n     * @private\n     * Forward declaration for JSLint.\n     * @type {Function}\n     */\n    let _loadUserKeyMap;\n\n    /**\n     * @private\n     * States of Ctrl key down detection\n     * @enum {number}\n     */\n    let CtrlDownStates = {\n        \"NOT_YET_DETECTED\": 0,\n        \"DETECTED\": 1,\n        \"DETECTED_AND_IGNORED\": 2   // For consecutive ctrl keydown events while a Ctrl key is being hold down\n    };\n\n    /**\n     * @private\n     * Flags used to determine whether right Alt key is pressed. When it is pressed,\n     * the following two keydown events are triggered in that specific order.\n     *\n     *    1. _ctrlDown - flag used to record { ctrlKey: true, keyIdentifier: \"Control\", ... } keydown event\n     *    2. _altGrDown - flag used to record { ctrlKey: true, altKey: true, keyIdentifier: \"Alt\", ... } keydown event\n     *\n     * @type {CtrlDownStates|boolean}\n     */\n    let _ctrlDown = CtrlDownStates.NOT_YET_DETECTED,\n        _altGrDown = false;\n\n    /**\n     * @private\n     * Used to record the timeStamp property of the last keydown event.\n     * @type {number}\n     */\n    let _lastTimeStamp;\n\n    /**\n     * @private\n     * Used to record the keyIdentifier property of the last keydown event.\n     * @type {string}\n     */\n    let _lastKeyIdentifier;\n\n    /*\n     * @private\n     * Constant used for checking the interval between Control keydown event and Alt keydown event.\n     * If the right Alt key is down we get Control keydown followed by Alt keydown within 30 ms. if\n     * the user is pressing Control key and then Alt key, the interval will be larger than 30 ms.\n     * @type {number}\n     */\n    let MAX_INTERVAL_FOR_CTRL_ALT_KEYS = 30;\n\n    /**\n     * @private\n     * Forward declaration for JSLint.\n     * @type {Function}\n     */\n    let _onCtrlUp;\n\n    /**\n     * @private\n     * Resets all the flags and removes _onCtrlUp event listener.\n     *\n     */\n    function _quitAltGrMode() {\n        _enabled = true;\n        _ctrlDown = CtrlDownStates.NOT_YET_DETECTED;\n        _altGrDown = false;\n        _lastTimeStamp = null;\n        _lastKeyIdentifier = null;\n        $(window).off(\"keyup\", _onCtrlUp);\n    }\n\n    /**\n     * @private\n     * Detects the release of AltGr key by checking all keyup events\n     * until we receive one with ctrl key code. Once detected, reset\n     * all the flags and also remove this event listener.\n     *\n     * @param {!KeyboardEvent} e keyboard event object\n     */\n    _onCtrlUp = function (e) {\n        let key = e.keyCode || e.which;\n        if (_altGrDown && key === KeyEvent.DOM_VK_CONTROL) {\n            _quitAltGrMode();\n        }\n    };\n\n    /**\n     * @private\n     * Detects whether AltGr key is pressed. When it is pressed, the first keydown event has\n     * ctrlKey === true with keyIdentifier === \"Control\". The next keydown event with\n     * altKey === true, ctrlKey === true and keyIdentifier === \"Alt\" is sent within 30 ms. Then\n     * the next keydown event with altKey === true, ctrlKey === true and keyIdentifier === \"Control\"\n     * is sent. If the user keep holding AltGr key down, then the second and third\n     * keydown events are repeatedly sent out alternately. If the user is also holding down Ctrl\n     * key, then either keyIdentifier === \"Control\" or keyIdentifier === \"Alt\" is repeatedly sent\n     * but not alternately.\n     *\n     * Once we detect the AltGr key down, then disable KeyBindingManager and set up a keyup\n     * event listener to detect the release of the altGr key so that we can re-enable KeyBindingManager.\n     * When we detect the addition of Ctrl key besides AltGr key, we also quit AltGr mode and re-enable\n     * KeyBindingManager.\n     *\n     * @param {!KeyboardEvent} e keyboard event object\n     */\n    function _detectAltGrKeyDown(e) {\n        if (brackets.platform !== \"win\") {\n            return;\n        }\n\n        if (!_altGrDown) {\n            if (_ctrlDown !== CtrlDownStates.DETECTED_AND_IGNORED && e.ctrlKey && e.key === \"Control\") {\n                _ctrlDown = CtrlDownStates.DETECTED;\n            } else if (e.repeat && e.ctrlKey && e.key === \"Control\") {\n                // We get here if the user is holding down left/right Control key. Set it to false\n                // so that we don't misidentify the combination of Ctrl and Alt keys as AltGr key.\n                _ctrlDown = CtrlDownStates.DETECTED_AND_IGNORED;\n            } else if (_ctrlDown === CtrlDownStates.DETECTED && e.altKey && e.ctrlKey && e.key === \"Alt\" &&\n                        (e.timeStamp - _lastTimeStamp) < MAX_INTERVAL_FOR_CTRL_ALT_KEYS) {\n                _altGrDown = true;\n                _lastKeyIdentifier = \"Alt\";\n                _enabled = false;\n                $(window).on(\"keyup\", _onCtrlUp);\n            } else {\n                // Reset _ctrlDown so that we can start over in detecting the two key events\n                // required for AltGr key.\n                _ctrlDown = CtrlDownStates.NOT_YET_DETECTED;\n            }\n            _lastTimeStamp = e.timeStamp;\n        } else if (e.key === \"Control\" || e.key === \"Alt\") {\n            // If the user is NOT holding down AltGr key or is also pressing Ctrl key,\n            // then _lastKeyIdentifier will be the same as keyIdentifier in the current\n            // key event. So we need to quit AltGr mode to re-enable KBM.\n            if (e.altKey && e.ctrlKey && e.key === _lastKeyIdentifier) {\n                _quitAltGrMode();\n            } else {\n                _lastKeyIdentifier = e.key;\n            }\n        }\n    }\n\n    /**\n     * @private\n     */\n    function _reset() {\n        _keyMap = {};\n        _defaultKeyMap = {};\n        _customKeyMap = {};\n        _customKeyMapCache = {};\n        _commandMap = {};\n        _globalKeydownHooks = [];\n        _userKeyMapFilePath = path.normalize(brackets.app.getApplicationSupportDirectory() + \"/\" + KEYMAP_FILENAME);\n    }\n\n    /**\n     * @private\n     * Initialize an empty keymap as the current keymap. It overwrites the current keymap if there is one.\n     * builds the keyDescriptor string from the given parts\n     * @param {boolean} hasCtrl Is Ctrl key enabled\n     * @param {boolean} hasAlt Is Alt key enabled\n     * @param {boolean} hasShift Is Shift key enabled\n     * @param {string} key The key that's pressed\n     * @return {string} The normalized key descriptor\n     */\n    function _buildKeyDescriptor(hasMacCtrl, hasCtrl, hasAlt, hasShift, key) {\n        if (!key) {\n            console.log(\"KeyBindingManager _buildKeyDescriptor() - No key provided!\");\n            return \"\";\n        }\n\n        let keyDescriptor = [];\n\n        if (hasMacCtrl) {\n            keyDescriptor.push(\"Ctrl\");\n        }\n        if (hasAlt) {\n            keyDescriptor.push(\"Alt\");\n        }\n        if (hasShift) {\n            keyDescriptor.push(\"Shift\");\n        }\n\n        if (hasCtrl) {\n            // Windows display Ctrl first, Mac displays Command symbol last\n            if (brackets.platform === \"mac\") {\n                keyDescriptor.push(\"Cmd\");\n            } else {\n                keyDescriptor.unshift(\"Ctrl\");\n            }\n        }\n\n        keyDescriptor.push(key);\n\n        return keyDescriptor.join(\"-\");\n    }\n\n\n    /**\n     * normalizes the incoming key descriptor so the modifier keys are always specified in the correct order\n     * @param {string} The string for a key descriptor, can be in any order, the result will be Ctrl-Alt-Shift-<Key>\n     * @return {string} The normalized key descriptor or null if the descriptor invalid\n     */\n    function normalizeKeyDescriptorString(origDescriptor) {\n        let hasMacCtrl = false,\n            hasCtrl = false,\n            hasAlt = false,\n            hasShift = false,\n            key = \"\",\n            error = false;\n\n        function _compareModifierString(left, right) {\n            if (!left || !right) {\n                return false;\n            }\n            left = left.trim().toLowerCase();\n            right = right.trim().toLowerCase();\n\n            return (left.length > 0 && left === right);\n        }\n\n        origDescriptor.split(\"-\").forEach(function parseDescriptor(ele, i, arr) {\n            if (_compareModifierString(\"ctrl\", ele)) {\n                if (brackets.platform === \"mac\") {\n                    hasMacCtrl = true;\n                } else {\n                    hasCtrl = true;\n                }\n            } else if (_compareModifierString(\"cmd\", ele)) {\n                if (brackets.platform === \"mac\") {\n                    hasCtrl = true;\n                } else {\n                    error = true;\n                }\n            } else if (_compareModifierString(\"alt\", ele)) {\n                hasAlt = true;\n            } else if (_compareModifierString(\"opt\", ele)) {\n                if (brackets.platform === \"mac\") {\n                    hasAlt = true;\n                } else {\n                    error = true;\n                }\n            } else if (_compareModifierString(\"shift\", ele)) {\n                hasShift = true;\n            } else if (key.length > 0) {\n                console.log(\"KeyBindingManager normalizeKeyDescriptorString() - Multiple keys defined. Using key: \" + key + \" from: \" + origDescriptor);\n                error = true;\n            } else {\n                key = ele;\n            }\n        });\n\n        if (error) {\n            return null;\n        }\n\n        // Check to see if the binding is for \"-\".\n        if (key === \"\" && origDescriptor.search(/^.+--$/) !== -1) {\n            key = \"-\";\n        }\n\n        // Check if it is a shift key only press\n        if (key === \"\" && origDescriptor.toLowerCase() === 'shift-shift') {\n            key = \"Shift\";\n        }\n\n        // '+' char is valid if it's the only key. Keyboard shortcut strings should use\n        // unicode characters (unescaped). Keyboard shortcut display strings may use\n        // unicode escape sequences (e.g. \\u20AC euro sign)\n        if ((key.indexOf(\"+\")) >= 0 && (key.length > 1)) {\n            return null;\n        }\n\n        // Ensure that the first letter of the key name is in upper case and the rest are\n        // in lower case. i.e. 'a' => 'A' and 'up' => 'Up'\n        if (/^[a-z]/i.test(key)) {\n            key = _.capitalize(key.toLowerCase());\n        }\n\n        // Also make sure that the second word of PageUp/PageDown has the first letter in upper case.\n        if (/^Page/.test(key)) {\n            key = key.replace(/(up|down)$/, function (match, p1) {\n                return _.capitalize(p1);\n            });\n        }\n\n        // No restriction on single character key yet, but other key names are restricted to either\n        // Function keys or those listed in _keyNames array.\n        if (key.length > 1 && !/F\\d+/.test(key) &&\n                _keyNames.indexOf(key) === -1) {\n            return null;\n        }\n\n        return _buildKeyDescriptor(hasMacCtrl, hasCtrl, hasAlt, hasShift, key);\n    }\n\n    function _mapKeycodeToKeyLegacy(keycode) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n        // keycode is deprecated. We only use this in one edge case in mac listed in the caller.\n        // If keycode represents one of the digit keys (0-9), then return the corresponding digit\n        // by subtracting KeyEvent.DOM_VK_0 from keycode. ie. [48-57] --> [0-9]\n        if ((keycode >= KeyEvent.DOM_VK_0 && keycode <= KeyEvent.DOM_VK_9) ||\n            (keycode >= KeyEvent.DOM_VK_A && keycode <= KeyEvent.DOM_VK_Z)){\n            return String.fromCharCode(keycode);\n            // Do the same with the numpad numbers\n            // by subtracting KeyEvent.DOM_VK_NUMPAD0 from keycode. ie. [96-105] --> [0-9]\n        } else if (keycode >= KeyEvent.DOM_VK_NUMPAD0 && keycode <= KeyEvent.DOM_VK_NUMPAD9) {\n            return String.fromCharCode(keycode - KeyEvent.DOM_VK_NUMPAD0 + KeyEvent.DOM_VK_0);\n        }\n\n\n        switch (keycode) {\n        case KeyEvent.DOM_VK_SEMICOLON:\n            return \";\";\n        case KeyEvent.DOM_VK_EQUALS:\n            return \"=\";\n        case KeyEvent.DOM_VK_COMMA:\n            return \",\";\n        case KeyEvent.DOM_VK_SUBTRACT:\n        case KeyEvent.DOM_VK_DASH:\n            return \"-\";\n        case KeyEvent.DOM_VK_ADD:\n            return \"+\";\n        case KeyEvent.DOM_VK_DECIMAL:\n        case KeyEvent.DOM_VK_PERIOD:\n            return \".\";\n        case KeyEvent.DOM_VK_DIVIDE:\n        case KeyEvent.DOM_VK_SLASH:\n            return \"/\";\n        case KeyEvent.DOM_VK_BACK_QUOTE:\n            return \"`\";\n        case KeyEvent.DOM_VK_OPEN_BRACKET:\n            return \"[\";\n        case KeyEvent.DOM_VK_BACK_SLASH:\n            return \"\\\\\";\n        case KeyEvent.DOM_VK_CLOSE_BRACKET:\n            return \"]\";\n        case KeyEvent.DOM_VK_QUOTE:\n            return \"'\";\n        default:\n            return null;\n        }\n    }\n\n    /**\n     * @private\n     * Looks for keycodes that have os-inconsistent keys and fixes them.\n     * @return {string} If the key is OS-inconsistent, the correct key; otherwise, the original key.\n     **/\n    function _mapKeycodeToKey(event) {\n        // key code mapping https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_code_values\n        if((event.ctrlKey || event.metaKey) && event.altKey && brackets.platform === \"mac\"){\n            // in mac, Cmd-alt-<shift?>-key are valid. But alt-key will trigger international keyboard typing and\n            // hence instead of Cmd-Alt-O, mac will get event Cmd-alt-Φ which is not what we want. So we will\n            // fallback to the deprecated keyCode event in the case\n            const key = _mapKeycodeToKeyLegacy(event.keyCode);\n            if(key){\n                return key;\n            }\n        }\n        const key = event.key;\n        let codes = {\n            \"ArrowUp\": \"Up\",\n            \"ArrowDown\": \"Down\",\n            \"ArrowLeft\": \"Left\",\n            \"ArrowRight\": \"Right\",\n            \" \": \"Space\"\n        };\n        if(codes[key]){\n            return codes[key];\n        }\n        return key;\n    }\n\n    /**\n     * Takes a keyboard event and translates it into a key in a key map\n     */\n    function _translateKeyboardEvent(event) {\n        let hasMacCtrl = (brackets.platform === \"mac\") ? (event.ctrlKey) : false,\n            hasCtrl = (brackets.platform !== \"mac\") ? (event.ctrlKey) : (event.metaKey),\n            hasAlt = (event.altKey),\n            hasShift = (event.shiftKey),\n            key = _mapKeycodeToKey(event);\n        return normalizeKeyDescriptorString(_buildKeyDescriptor(hasMacCtrl, hasCtrl, hasAlt, hasShift, key));\n    }\n\n    /**\n     * Convert normalized key representation to display appropriate for platform.\n     * @param {!string} descriptor Normalized key descriptor.\n     * @return {!string} Display/Operating system appropriate string\n     */\n    function formatKeyDescriptor(descriptor) {\n        let displayStr;\n\n        if (brackets.platform === \"mac\") {\n            displayStr = descriptor.replace(/-(?!$)/g, \"\");     // remove dashes\n            displayStr = displayStr.replace(\"Ctrl\", \"\\u2303\");  // Ctrl > control symbol\n            displayStr = displayStr.replace(\"Cmd\", \"\\u2318\");   // Cmd > command symbol\n            displayStr = displayStr.replace(\"Shift\", \"\\u21E7\"); // Shift > shift symbol\n            displayStr = displayStr.replace(\"Alt\", \"\\u2325\");   // Alt > option symbol\n        } else {\n            displayStr = descriptor.replace(\"Ctrl\", Strings.KEYBOARD_CTRL);\n            displayStr = displayStr.replace(\"Shift\", Strings.KEYBOARD_SHIFT);\n            displayStr = displayStr.replace(/-(?!$)/g, \"+\");\n        }\n\n        displayStr = displayStr.replace(\"Space\", Strings.KEYBOARD_SPACE);\n\n        displayStr = displayStr.replace(\"PageUp\", Strings.KEYBOARD_PAGE_UP);\n        displayStr = displayStr.replace(\"PageDown\", Strings.KEYBOARD_PAGE_DOWN);\n        displayStr = displayStr.replace(\"Home\", Strings.KEYBOARD_HOME);\n        displayStr = displayStr.replace(\"End\", Strings.KEYBOARD_END);\n\n        displayStr = displayStr.replace(\"Ins\", Strings.KEYBOARD_INSERT);\n        displayStr = displayStr.replace(\"Del\", Strings.KEYBOARD_DELETE);\n\n        return displayStr;\n    }\n\n    /**\n     * @private\n     * @param {string} A normalized key-description string.\n     * @return {boolean} true if the key is already assigned, false otherwise.\n     */\n    function _isKeyAssigned(key) {\n        return (_keyMap[key] !== undefined);\n    }\n\n    /**\n     * Remove a key binding from _keymap\n     *\n     * @param {!string} key - a key-description string that may or may not be normalized.\n     * @param {?string} [platform] - OS from which to remove the binding (all platforms if unspecified)\n     */\n    function removeBinding(key, platform) {\n        if (!key || ((platform !== null) && (platform !== undefined) && (platform !== brackets.platform))) {\n            return;\n        }\n\n        let normalizedKey = normalizeKeyDescriptorString(key);\n\n        if (!normalizedKey) {\n            console.log(\"Failed to normalize \" + key);\n        } else if (_isKeyAssigned(normalizedKey)) {\n            let binding = _keyMap[normalizedKey],\n                command = CommandManager.get(binding.commandID),\n                bindings = _commandMap[binding.commandID];\n\n            // delete key binding record\n            delete _keyMap[normalizedKey];\n\n            if (bindings) {\n                // delete mapping from command to key binding\n                _commandMap[binding.commandID] = bindings.filter(function (b) {\n                    return (b.key !== normalizedKey);\n                });\n\n                if (command) {\n                    command.trigger(EVENT_KEY_BINDING_REMOVED, {key: normalizedKey, displayKey: binding.displayKey});\n                }\n            }\n        }\n    }\n\n    /**\n     * @private\n     *\n     * Updates _allCommands array and _defaultKeyMap with the new key binding\n     * if it is not yet in the _allCommands array. _allCommands array is initialized\n     * only in extensionsLoaded event. So any new commands or key bindings added after\n     * that will be updated here.\n     *\n     * @param {{commandID: string, key: string, displayKey:string, explicitPlatform: string}} newBinding\n     */\n    function _updateCommandAndKeyMaps(newBinding) {\n        if (_allCommands.length === 0) {\n            return;\n        }\n\n        if (newBinding && newBinding.commandID && _allCommands.indexOf(newBinding.commandID) === -1) {\n            _defaultKeyMap[newBinding.commandID] = _.cloneDeep(newBinding);\n\n            // Process user key map again to catch any reassignment to all new key bindings added from extensions.\n            _loadUserKeyMap();\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} commandID\n     * @param {string|{{key: string, displayKey: string}}} keyBinding - a single shortcut.\n     * @param {string?} platform\n     *     - \"all\" indicates all platforms, not overridable\n     *     - undefined indicates all platforms, overridden by platform-specific binding\n     * @param {boolean?} userBindings true if adding a user key binding or undefined otherwise.\n     * @param {boolean?} isMenuShortcut\n     * @return {?{key: string, displayKey:String}} Returns a record for valid key bindings.\n     *     Returns null when key binding platform does not match, binding does not normalize,\n     *     or is already assigned.\n     */\n    function _addBinding(commandID, keyBinding, {platform, userBindings, isMenuShortcut}) {\n        let key,\n            result = null,\n            normalized,\n            normalizedDisplay,\n            explicitPlatform = keyBinding.platform || platform,\n            targetPlatform,\n            command,\n            bindingsToDelete = [],\n            existing;\n\n        // For platform: \"all\", use explicit current platform\n        if (explicitPlatform && explicitPlatform !== \"all\") {\n            targetPlatform = explicitPlatform;\n        } else {\n            targetPlatform = brackets.platform;\n        }\n\n\n        // Skip if the key binding is not for this platform.\n        if (explicitPlatform === \"mac\" && brackets.platform !== \"mac\") {\n            return null;\n        }\n\n        // if the request does not specify an explicit platform, and we're\n        // currently on a mac, then replace Ctrl with Cmd.\n        key = (keyBinding.key) || keyBinding;\n        if (brackets.platform === \"mac\" && (explicitPlatform === undefined || explicitPlatform === \"all\")) {\n            key = key.replace(\"Ctrl\", \"Cmd\");\n            if (keyBinding.displayKey !== undefined) {\n                keyBinding.displayKey = keyBinding.displayKey.replace(\"Ctrl\", \"Cmd\");\n            }\n        }\n\n        normalized = normalizeKeyDescriptorString(key);\n\n        // skip if the key binding is invalid\n        if (!normalized) {\n            console.error(`Unable to parse key binding '${key}' for command '${commandID}'. Permitted modifiers: Ctrl, Cmd, Alt, Opt, Shift; separated by '-' (not '+').`);\n            return null;\n        }\n        function isSingleCharAZ(str) {\n            return /^[A-Z]$/i.test(str);\n        }\n        const keySplit = normalized.split(\"-\");\n        if(!isMenuShortcut && ((keySplit.length ===2 && keySplit[0] === 'Alt' && isSingleCharAZ(keySplit[1])) ||\n            (keySplit.length ===3 && keySplit[0] === 'Alt' && keySplit[1] === 'Shift' && isSingleCharAZ(keySplit[2])))){\n            console.error(`Key binding '${normalized}' for command '${commandID}' may cause issues. The key combinations starting with 'Alt-<letter>' and 'Alt-Shift-<letter>' are reserved. On macOS, they are used for AltGr internationalization, and on Windows/Linux, they are used for menu navigation shortcuts. If this is a menu shortcut, use 'isMenuShortcut' option.`);\n        }\n        // ctrl-alt-<key> events are allowed in all platforms. In windows ctrl-alt-<key> events are treated as altGr\n        // and used for international keyboards. But we have special handling for detecting alt gr key press that\n        // accounts for this and disables keybinding manager inwindows on detecting altGr key press.\n        // See _detectAltGrKeyDown function in this file.\n\n        // check for duplicate key bindings\n        existing = _keyMap[normalized];\n\n        // for cross-platform compatibility\n        if (exports.useWindowsCompatibleBindings) {\n            // windows-only key bindings are used as the default binding\n            // only if a default binding wasn't already defined\n            if (explicitPlatform === \"win\") {\n                // search for a generic or platform-specific binding if it\n                // already exists\n                if (existing && (!existing.explicitPlatform ||\n                                 existing.explicitPlatform === brackets.platform ||\n                                 existing.explicitPlatform === \"all\")) {\n                    // do not clobber existing binding with windows-only binding\n                    return null;\n                }\n\n                // target this windows binding for the current platform\n                targetPlatform = brackets.platform;\n            }\n        }\n\n        // skip if this binding doesn't match the current platform\n        if (targetPlatform !== brackets.platform) {\n            return null;\n        }\n\n        // skip if the key is already assigned\n        if (existing) {\n            if (!existing.explicitPlatform && explicitPlatform) {\n                // remove the the generic binding to replace with this new platform-specific binding\n                removeBinding(normalized);\n                existing = false;\n            }\n        }\n\n        // delete existing bindings when\n        // (1) replacing a windows-compatible binding with a generic or\n        //     platform-specific binding\n        // (2) replacing a generic binding with a platform-specific binding\n        let existingBindings = _commandMap[commandID] || [],\n            isWindowsCompatible,\n            isReplaceGeneric,\n            ignoreGeneric;\n\n        existingBindings.forEach(function (binding) {\n            // remove windows-only bindings in _commandMap\n            isWindowsCompatible = exports.useWindowsCompatibleBindings &&\n                binding.explicitPlatform === \"win\";\n\n            // remove existing generic binding\n            isReplaceGeneric = !binding.explicitPlatform &&\n                explicitPlatform;\n\n            if (isWindowsCompatible || isReplaceGeneric) {\n                bindingsToDelete.push(binding);\n            } else {\n                // existing binding is platform-specific and the requested binding is generic\n                ignoreGeneric = binding.explicitPlatform && !explicitPlatform;\n            }\n        });\n\n        if (ignoreGeneric) {\n            // explicit command binding overrides this one\n            return null;\n        }\n\n        if (existing) {\n            // do not re-assign a key binding\n            console.error(\"Cannot assign \" + normalized + \" to \" + commandID + \". It is already assigned to \" + _keyMap[normalized].commandID);\n            return null;\n        }\n\n        // remove generic or windows-compatible bindings\n        bindingsToDelete.forEach(function (binding) {\n            removeBinding(binding.key);\n        });\n\n        // optional display-friendly string (e.g. CMD-+ instead of CMD-=)\n        normalizedDisplay = (keyBinding.displayKey) ? normalizeKeyDescriptorString(keyBinding.displayKey) : normalized;\n\n        // 1-to-many commandID mapping to key binding\n        if (!_commandMap[commandID]) {\n            _commandMap[commandID] = [];\n        }\n\n        result = {\n            key: normalized,\n            displayKey: normalizedDisplay,\n            explicitPlatform: explicitPlatform\n        };\n\n        _commandMap[commandID].push(result);\n\n        // 1-to-1 key binding to commandID\n        _keyMap[normalized] = {\n            commandID: commandID,\n            key: normalized,\n            displayKey: normalizedDisplay,\n            explicitPlatform: explicitPlatform\n        };\n\n        if (!userBindings) {\n            _updateCommandAndKeyMaps(_keyMap[normalized]);\n        }\n\n        // notify listeners\n        command = CommandManager.get(commandID);\n\n        if (command) {\n            command.trigger(EVENT_KEY_BINDING_ADDED, result, commandID);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns a copy of the current key map. If the optional 'defaults' parameter is true,\n     * then a copy of the default key map is returned.\n     * @param {boolean=} defaults true if the caller wants a copy of the default key map.\n     *                            Otherwise, the current active key map is returned.\n     * @return {!Object.<string, {commandID: string, key: string, displayKey: string}>}\n     */\n    function getKeymap(defaults) {\n        return $.extend({}, defaults ? _defaultKeyMap : _keyMap);\n    }\n\n    function _makeMapFromArray(map, arr){\n        for(let item of arr) {\n            map[item] = true;\n        }\n        return map;\n    }\n\n    /**\n     * If there is a registered and enabled key event, we always mark the event as processed\n     * except the ones in UN_SWALLOWED_EVENTS.\n     * @type {(string)[]}\n     */\n    const UN_SWALLOWED_EVENTS = _makeMapFromArray({}, [\n        Commands.EDIT_SELECT_ALL,\n        Commands.EDIT_UNDO,\n        Commands.EDIT_REDO,\n        Commands.EDIT_CUT,\n        Commands.EDIT_COPY,\n        Commands.EDIT_PASTE\n    ]);\n\n    // single keys except function keys and key combinations are never swallowed. Áka we want default behavior\n    // for the below keys if the command handler for the registered key didnt do anything.\n    let UN_SWALLOWED_KEYS = _makeMapFromArray({},\n        _keyNames.concat(_reservedShortcuts)\n            .concat(_macReservedShortcuts));\n    function _isUnSwallowedKeys(key) {\n        return UN_SWALLOWED_KEYS[key] || key.length === 1; // keys like a-z, 0-9 etc\n    }\n\n    /**\n     * Process the keybinding for the current key.\n     *\n     * @param {string} A key-description string.\n     * @return {boolean} true if the key was processed, false otherwise\n     */\n    function _handleKey(key) {\n        if (_enabled && _keyMap[key]) {\n            Metrics.countEvent(Metrics.EVENT_TYPE.KEYBOARD, \"shortcut\", key);\n            Metrics.countEvent(Metrics.EVENT_TYPE.KEYBOARD, \"command\", _keyMap[key].commandID);\n            logger.leaveTrail(\"Keyboard shortcut: \" + key + \" command: \" + _keyMap[key].commandID);\n            // If there is a registered and enabled key event except the swallowed key events,\n            // we always mark the event as processed and return true.\n            // We don't want multiple behavior tied to the same key event. For Instance, in browser, if `ctrl-k`\n            // is not handled by quick edit, it will open browser url bar if we return false here(which is bad ux).\n            let command = CommandManager.get(_keyMap[key].commandID);\n            let eventDetails = undefined;\n            if(command._options.eventSource){\n                eventDetails = {\n                    eventSource: CommandManager.SOURCE_KEYBOARD_SHORTCUT,\n                    sourceType: key\n                };\n            }\n            let promise = CommandManager.execute(_keyMap[key].commandID, eventDetails);\n            if(UN_SWALLOWED_EVENTS[_keyMap[key].commandID] || _isUnSwallowedKeys(key)){\n                // The execute() function returns a promise because some commands are async.\n                // Generally, commands decide whether they can run or not synchronously,\n                // and reject immediately, so we can test for that synchronously.\n                return (promise.state() !== \"rejected\");\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @private\n     *\n     * Sort objects by platform property. Objects with a platform property come\n     * before objects without a platform property.\n     */\n    function _sortByPlatform(a, b) {\n        let a1 = (a.platform) ? 1 : 0,\n            b1 = (b.platform) ? 1 : 0;\n        return b1 - a1;\n    }\n\n    /**\n     * Add one or more key bindings to a particular Command.\n     *\n     * @param {!string | Command} command - A command ID or command object\n     * @param {?({key: string, displayKey: string}|Array.<{key: string, displayKey: string, platform: string}>)} keyBindings\n     *     A single key binding or an array of keybindings. Example:\n     *     \"Shift-Cmd-F\". Mac and Win key equivalents are automatically\n     *     mapped to each other. Use displayKey property to display a different\n     *     string (e.g. \"CMD+\" instead of \"CMD=\").\n     * @param {?string} platform The target OS of the keyBindings either\n     *     \"mac\", \"win\" or \"linux\". If undefined, all platforms not explicitly\n     *     defined will use the key binding.\n     *     NOTE: If platform is not specified, Ctrl will be replaced by Cmd for \"mac\" platform\n     * @param {object?} options\n     * @param {boolean?} options.isMenuShortcut this allows alt-key shortcuts to be registered.\n     * @return {{key: string, displayKey:String}|Array.<{key: string, displayKey:String}>}\n     *     Returns record(s) for valid key binding(s)\n     */\n    function addBinding(command, keyBindings, platform, options={}) {\n        let commandID = \"\",\n            results,\n            isMenuShortcut = options.isMenuShortcut;\n\n        if (!command) {\n            console.error(\"addBinding(): missing required parameter: command\");\n            return;\n        }\n\n        if (!keyBindings) { return; }\n\n        if (typeof (command) === \"string\") {\n            commandID = command;\n        } else {\n            commandID = command.getID();\n        }\n\n        if (Array.isArray(keyBindings)) {\n            let keyBinding;\n            results = [];\n\n            // process platform-specific bindings first\n            keyBindings.sort(_sortByPlatform);\n\n            keyBindings.forEach(function addSingleBinding(keyBindingRequest) {\n                // attempt to add keybinding\n                keyBinding = _addBinding(commandID, keyBindingRequest, {\n                    platform: keyBindingRequest.platform,\n                    isMenuShortcut: isMenuShortcut\n                });\n\n                if (keyBinding) {\n                    results.push(keyBinding);\n                }\n            });\n        } else {\n            results = _addBinding(commandID, keyBindings, {\n                platform: platform,\n                isMenuShortcut: isMenuShortcut\n            });\n        }\n\n        return results;\n    }\n    /**\n     * Retrieve key bindings currently associated with a command\n     *\n     * @param {!string | Command} command - A command ID or command object\n     * @return {!Array.<{{key: string, displayKey: string}}>} An array of associated key bindings.\n     */\n    function getKeyBindings(command) {\n        let bindings    = [],\n            commandID   = \"\";\n\n        if (!command) {\n            console.error(\"getKeyBindings(): missing required parameter: command\");\n            return [];\n        }\n\n        if (typeof (command) === \"string\") {\n            commandID = command;\n        } else {\n            commandID = command.getID();\n        }\n\n        bindings = _commandMap[commandID];\n        return bindings || [];\n    }\n\n    /**\n     * Retrieves the platform-specific string representation of the key bindings for a specified command.\n     * This function is useful for displaying the keyboard shortcut associated with a given command ID to the user.\n     * If a key binding is found for the command, it returns the formatted key descriptor. Otherwise, it returns null.\n     *\n     * @param {string} commandID - The unique identifier of the command for which the key binding is to be retrieved.\n     * @returns {string|null} The formatted key binding as a string if available; otherwise, null.\n     */\n    function getKeyBindingsDisplay(commandID) {\n        let shortCut = getKeyBindings(commandID);\n        if (shortCut && shortCut[0] && shortCut[0].displayKey) {\n            return formatKeyDescriptor(shortCut[0].displayKey);\n        }\n        return null;\n    }\n\n\n    const _handledCommands = {};\n    /**\n     * Adds default key bindings when commands are registered to CommandManager\n     * @param {$.Event} event jQuery event\n     * @param {Command} command Newly registered command\n     */\n    function _handleCommandRegistered(event, command) {\n        let commandId   = command.getID(),\n            defaults    = KeyboardPrefs[commandId];\n\n        if (defaults) {\n            _handledCommands[commandId] = true;\n            addBinding(commandId, defaults);\n        }\n    }\n\n    function _initDefaultShortcuts() {\n        for(let commandId of _allCommands){\n            let defaults    = KeyboardPrefs[commandId];\n\n            if (defaults && !_handledCommands[commandId]) {\n                addBinding(commandId, defaults);\n            }\n        }\n    }\n\n    /**\n     * Adds a global keydown hook that gets first crack at keydown events\n     * before standard keybindings do. This is intended for use by modal or\n     * semi-modal UI elements like dialogs or the code hint list that should\n     * execute before normal command bindings are run.\n     *\n     * The hook is passed one parameter, the original keyboard event. If the\n     * hook handles the event (or wants to block other global hooks from\n     * handling the event), it should return true. Note that this will *only*\n     * stop other global hooks and KeyBindingManager from handling the\n     * event; to prevent further event propagation, you will need to call\n     * stopPropagation(), stopImmediatePropagation(), and/or preventDefault()\n     * as usual.\n     *\n     * Multiple keydown hooks can be registered, and are executed in order,\n     * most-recently-added first. A keydown hook will only be added once if the same\n     * hook is already added before.\n     *\n     * (We have to have a special API for this because (1) handlers are normally\n     * called in least-recently-added order, and we want most-recently-added;\n     * (2) native DOM events don't have a way for us to find out if\n     * stopImmediatePropagation()/stopPropagation() has been called on the\n     * event, so we have to have some other way for one of the hooks to\n     * indicate that it wants to block the other hooks from running.)\n     *\n     * @param {function(Event): boolean} hook The global hook to add.\n     */\n    function addGlobalKeydownHook(hook) {\n        let index = _globalKeydownHooks.indexOf(hook);\n        if (index !== -1) {\n            return;\n        }\n        _globalKeydownHooks.push(hook);\n    }\n\n    /**\n     * Removes a global keydown hook added by `addGlobalKeydownHook`.\n     * Does not need to be the most recently added hook.\n     *\n     * @param {function(Event): boolean} hook The global hook to remove.\n     */\n    function removeGlobalKeydownHook(hook) {\n        let index = _globalKeydownHooks.indexOf(hook);\n        if (index !== -1) {\n            _globalKeydownHooks.splice(index, 1);\n        }\n    }\n\n    let lastKeyPressTime = 0; // Store the time of the last key press\n    let pressCount = 0; // Counter for consecutive Control key presses\n    const doublePressInterval = 500; // Maximum time interval between presses, in milliseconds, to consider it a double press\n    const ctrlKeyCodes = {\n        ControlLeft: true,\n        ControlRight: true,\n        MetaLeft: true,\n        MetaRight: true,\n        Control: true,\n        Meta: true\n    };\n    function _detectDoubleCtrlKeyPress(event) {\n        if (ctrlKeyCodes[event.code] && ctrlKeyCodes[event.key] && !event.shiftKey && !event.altKey) {\n            const currentTime = new Date().getTime(); // Get the current time\n            pressCount++;\n            if (currentTime - lastKeyPressTime <= doublePressInterval) {\n                if(pressCount === 2) {\n                    KeyboardOverlayMode.startOverlayMode();\n                    event.stopPropagation();\n                    event.preventDefault();\n                    return true;\n                }\n                // ignore all higher order press events like triple/quadruple press\n            } else {\n                pressCount = 1;\n            }\n            lastKeyPressTime = currentTime;\n        }\n    }\n\n    const dontHideMouseOnKeys = {\n        \"Escape\": true,\n        \"ArrowLeft\": true,\n        \"ArrowRight\": true,\n        \"ArrowUp\": true,\n        \"ArrowDown\": true,\n        \"Home\": true,\n        \"End\": true,\n        \"PageUp\": true,\n        \"PageDown\": true,\n        \"Shift\": true,\n        \"Control\": true,\n        \"Alt\": true,\n        \"Meta\": true,\n        \"F1\": true,\n        \"F2\": true,\n        \"F3\": true,\n        \"F4\": true,\n        \"F5\": true,\n        \"F6\": true,\n        \"F7\": true,\n        \"F8\": true,\n        \"F9\": true,\n        \"F10\": true,\n        \"F11\": true,\n        \"F12\": true,\n        \"Insert\": true,\n        \"ContextMenu\": true,\n        \"NumLock\": true,\n        \"ScrollLock\": true,\n        \"CapsLock\": true\n    };\n    let mouseCursorHidden = false;\n    function _hideMouseCursonOnTyping(event) {\n        if(dontHideMouseOnKeys[event.key] || mouseCursorHidden){\n            return;\n        }\n        mouseCursorHidden = true;\n        if(!Phoenix.isSpecRunnerWindow){\n            document.body.classList.add('hide-cursor');\n        }\n    }\n    \n    /**\n     * Handles a given keydown event, checking global hooks first before\n     * deciding to handle it ourselves.\n     * @param {Event} event The keydown event to handle.\n     */\n    function _handleKeyEvent(event) {\n        _hideMouseCursonOnTyping(event);\n        if(KeyboardOverlayMode.isInOverlayMode()){\n            return KeyboardOverlayMode.processOverlayKeyboardEvent(event);\n        }\n        if(_detectDoubleCtrlKeyPress(event)){\n            return true;\n        }\n        let i, handled = false;\n        for (i = _globalKeydownHooks.length - 1; i >= 0; i--) {\n            if (_globalKeydownHooks[i](event)) {\n                handled = true;\n                break;\n            }\n        }\n        _detectAltGrKeyDown(event);\n        const shortcut = _translateKeyboardEvent(event);\n        if(keyboardShortcutCaptureInProgress) {\n            return updateShortcutSelection(event, shortcut);\n        }\n        if (!handled && _handleKey(shortcut)) {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n\n    AppInit.htmlReady(function () {\n        // Install keydown event listener.\n        window.document.body.addEventListener(\n            \"keydown\",\n            _handleKeyEvent,\n            true\n        );\n        document.body.addEventListener('mousemove', ()=>{\n            if(!mouseCursorHidden){\n                return;\n            }\n            mouseCursorHidden = false;\n            document.body.classList.remove('hide-cursor');\n        });\n\n        exports.useWindowsCompatibleBindings = (brackets.platform !== \"mac\") &&\n            (brackets.platform !== \"win\");\n    });\n\n    /**\n     * @private\n     * Displays an error dialog and also opens the user key map file for editing only if\n     * the error is not the loading file error.\n     *\n     * @param {?string} err Error type returned from JSON parser or open file operation\n     * @param {string=} message Error message to be displayed in the dialog\n     */\n    function _showErrorsAndOpenKeyMap(err, message) {\n        // Asynchronously loading Dialogs module to avoid the circular dependency\n        require([\"widgets/Dialogs\"], function (Dialogs) {\n            let errorMessage = Strings.ERROR_KEYMAP_CORRUPT;\n\n            if (err === FileSystemError.UNSUPPORTED_ENCODING) {\n                errorMessage = Strings.ERROR_LOADING_KEYMAP;\n            } else if (message) {\n                errorMessage = message;\n            }\n\n            Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_ERROR,\n                Strings.ERROR_KEYMAP_TITLE,\n                errorMessage\n            )\n                .done(function () {\n                    if (err !== FileSystemError.UNSUPPORTED_ENCODING) {\n                        CommandManager.execute(Commands.FILE_OPEN_KEYMAP);\n                    }\n                });\n        });\n    }\n\n    /**\n     * @private\n     *\n     * Checks whether the given command ID is a special command that the user can't bind\n     * to another shortcut.\n     * @param {!string} commandID A string referring to a specific command\n     * @return {boolean} true if normalizedKey is a special command, false otherwise.\n     */\n    function _isSpecialCommand(commandID) {\n        if (brackets.platform === \"mac\" && commandID === \"file.quit\") {\n            return true;\n        }\n\n        return (_specialCommands.indexOf(commandID) > -1);\n    }\n\n    /**\n     * @private\n     *\n     * Checks whether the given key combination is a shortcut of a special command\n     * or a Mac system command that the user can't reassign to another command.\n     * @param {!string} normalizedKey A key combination string used for a keyboard shortcut\n     * @return {boolean} true if normalizedKey is a restricted shortcut, false otherwise.\n     */\n    function _isReservedShortcuts(normalizedKey) {\n        if (!normalizedKey) {\n            return false;\n        }\n\n        if (_reservedShortcuts.indexOf(normalizedKey) > -1 ||\n                _reservedShortcuts.indexOf(normalizedKey.replace(\"Cmd\", \"Ctrl\")) > -1) {\n            return true;\n        }\n\n        if (brackets.platform === \"mac\" && _macReservedShortcuts.indexOf(normalizedKey) > -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @private\n     *\n     * Creates a bullet list item for any item in the given list.\n     * @param {Array.<string>} list An array of strings to be converted into a\n     * message string with a bullet list.\n     * @return {string} the html text version of the list\n     */\n    function _getBulletList(list) {\n        let message = \"<ul class='dialog-list'>\";\n        list.forEach(function (info) {\n            message += \"<li>\" + info + \"</li>\";\n        });\n        message += \"</ul>\";\n        return message;\n    }\n\n    /**\n     * @private\n     *\n     * Gets the corresponding unicode symbol of an arrow key for display in the menu.\n     * @param {string} key The non-modifier key used in the shortcut. It does not need to be normalized.\n     * @return {string} An empty string if key is not one of those we want to show with the unicode symbol.\n     *                  Otherwise, the corresponding unicode symbol is returned.\n     */\n    function _getDisplayKey(key) {\n        let displayKey = \"\",\n            match = key ? key.match(/(Up|Down|Left|Right|\\-)$/i) : null;\n        if (match && !/Page(Up|Down)/.test(key)) {\n            displayKey = key.substr(0, match.index) + _displayKeyMap[match[0].toLowerCase()];\n        }\n        return displayKey;\n    }\n\n    /**\n     * @private\n     *\n     * Applies each user key binding to all the affected commands and updates _keyMap.\n     * Shows errors in a dialog and then opens the user key map file if any of the following\n     * is detected while applying the user key bindings.\n     *     - A key binding is attempting to modify a special command.\n     *     - A key binding is attempting to assign a shortcut of a special command to another one.\n     *     - Multiple key bindings are specified for the same command ID.\n     *     - The same key combination is listed for multiple key bindings.\n     *     - A key binding has any invalid key syntax.\n     *     - A key binding is referring to a non-existent command ID.\n     */\n    function _applyUserKeyBindings() {\n        let remappedCommands   = [],\n            remappedKeys       = [],\n            restrictedCommands = [],\n            restrictedKeys     = [],\n            invalidKeys        = [],\n            invalidCommands    = [],\n            multipleKeys       = [],\n            duplicateBindings  = [],\n            errorMessage       = \"\";\n\n        _.forEach(_customKeyMap, function (commandID, key) {\n            let normalizedKey    = normalizeKeyDescriptorString(key),\n                existingBindings = _commandMap[commandID] || [];\n\n            // Skip this since we don't allow user to update key binding of a special\n            // command like cut, copy, paste, undo, redo and select all.\n            if (_isSpecialCommand(commandID)) {\n                restrictedCommands.push(commandID);\n                return;\n            }\n\n            // Skip this since we don't allow user to update a shortcut used in\n            // a special command or any Mac system command.\n            if (_isReservedShortcuts(normalizedKey)) {\n                restrictedKeys.push(key);\n                return;\n            }\n\n            // Skip this if the key is invalid.\n            if (!normalizedKey) {\n                invalidKeys.push(key);\n                return;\n            }\n\n            if (_isKeyAssigned(normalizedKey)) {\n                if (remappedKeys.indexOf(normalizedKey) !== -1) {\n                    // JSON parser already removed all the duplicates that have the exact\n                    // same case or order in their keys. So we're only detecting duplicate\n                    // bindings that have different orders or different cases used in the key.\n                    duplicateBindings.push(key);\n                    return;\n                }\n                // The same key binding already exists, so skip this.\n                if (_keyMap[normalizedKey].commandID === commandID) {\n                    // Still need to add it to the remappedCommands so that\n                    // we can detect any duplicate later on.\n                    remappedCommands.push(commandID);\n                    return;\n                }\n                removeBinding(normalizedKey);\n            }\n\n            if (remappedKeys.indexOf(normalizedKey) === -1) {\n                remappedKeys.push(normalizedKey);\n            }\n\n            // Remove another key binding if the new key binding is for a command\n            // that has a different key binding. e.g. \"Ctrl-W\": \"edit.selectLine\"\n            // requires us to remove \"Ctrl-W\" from \"file.close\" command, but we\n            // also need to remove \"Ctrl-L\" from \"edit.selectLine\".\n            if (existingBindings.length) {\n                existingBindings.forEach(function (binding) {\n                    removeBinding(binding.key);\n                });\n            }\n\n            if (commandID) {\n                if (_allCommands.indexOf(commandID) !== -1) {\n                    if (remappedCommands.indexOf(commandID) === -1) {\n                        let keybinding = { key: normalizedKey };\n\n                        keybinding.displayKey = _getDisplayKey(normalizedKey);\n                        _addBinding(commandID, keybinding.displayKey ? keybinding : normalizedKey, {\n                            platform: brackets.platform,\n                            userBindings: true\n                        });\n                        remappedCommands.push(commandID);\n                    } else {\n                        multipleKeys.push(commandID);\n                    }\n                } else {\n                    invalidCommands.push(commandID);\n                }\n            }\n        });\n\n        if (restrictedCommands.length) {\n            errorMessage = StringUtils.format(Strings.ERROR_RESTRICTED_COMMANDS, _getBulletList(restrictedCommands));\n        }\n\n        if (restrictedKeys.length) {\n            errorMessage += StringUtils.format(Strings.ERROR_RESTRICTED_SHORTCUTS, _getBulletList(restrictedKeys));\n        }\n\n        if (multipleKeys.length) {\n            errorMessage += StringUtils.format(Strings.ERROR_MULTIPLE_SHORTCUTS, _getBulletList(multipleKeys));\n        }\n\n        if (duplicateBindings.length) {\n            errorMessage += StringUtils.format(Strings.ERROR_DUPLICATE_SHORTCUTS, _getBulletList(duplicateBindings));\n        }\n\n        if (invalidKeys.length) {\n            errorMessage += StringUtils.format(Strings.ERROR_INVALID_SHORTCUTS, _getBulletList(invalidKeys));\n        }\n\n        if (invalidCommands.length) {\n            errorMessage += StringUtils.format(Strings.ERROR_NONEXISTENT_COMMANDS, _getBulletList(invalidCommands));\n        }\n\n        if (_showErrors && errorMessage) {\n            _showErrorsAndOpenKeyMap(\"\", errorMessage);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * Restores the default key bindings for all the commands that are modified by each key binding\n     * specified in _customKeyMapCache (old version) but no longer specified in _customKeyMap (new version).\n     */\n    function _undoPriorUserKeyBindings() {\n        _.forEach(_customKeyMapCache, function (commandID, key) {\n            let normalizedKey  = normalizeKeyDescriptorString(key),\n                defaults       = _.find(_.toArray(_defaultKeyMap), { \"commandID\": commandID }),\n                defaultCommand = _defaultKeyMap[normalizedKey];\n\n            // We didn't modified this before, so skip it.\n            if (_isSpecialCommand(commandID) ||\n                    _isReservedShortcuts(normalizedKey)) {\n                return;\n            }\n\n            if (_isKeyAssigned(normalizedKey) &&\n                    _customKeyMap[key] !== commandID && _customKeyMap[normalizedKey] !== commandID) {\n                // Unassign the key from any command. e.g. \"Cmd-W\": \"file.open\" in _customKeyMapCache\n                // will require us to remove Cmd-W shortcut from file.open command.\n                removeBinding(normalizedKey);\n            }\n\n            // Reassign the default key binding. e.g. \"Cmd-W\": \"file.open\" in _customKeyMapCache\n            // will require us to reassign Cmd-O shortcut to file.open command.\n            if (defaults) {\n                addBinding(commandID, defaults, brackets.platform);\n            }\n\n            // Reassign the default key binding of the previously modified command.\n            // e.g. \"Cmd-W\": \"file.open\" in _customKeyMapCache will require us to reassign Cmd-W\n            // shortcut to file.close command.\n            if (defaultCommand && defaultCommand.key) {\n                addBinding(defaultCommand.commandID, defaultCommand.key, brackets.platform);\n            }\n        });\n    }\n\n    /**\n     * @private\n     *\n     * Gets the full file path to the user key map file. In testing environment\n     * a different file path is returned so that running integration tests won't\n     * pop up the error dialog showing the errors from the actual user key map file.\n     *\n     * @return {string} full file path to the user key map file.\n     */\n    function _getUserKeyMapFilePath() {\n        if (window.isBracketsTestWindow) {\n            return path.normalize(brackets.app.getApplicationSupportDirectory() + \"/_test_/\" + KEYMAP_FILENAME);\n        }\n        return _userKeyMapFilePath;\n    }\n\n    async function _addToUserKeymapFile(shortcut, commandID) {\n        let file   = FileSystem.getFileForPath(_getUserKeyMapFilePath());\n        let userKeyMap = {overrides:{}};\n        let keyMapExists = await Phoenix.VFS.existsAsync(file.fullPath);\n        if (keyMapExists) {\n            const text = await deferredToPromise(FileUtils.readAsText(file, true));\n            try {\n                if (text) {\n                    userKeyMap = JSON.parse(text);\n                    const overrides = userKeyMap.overrides || {};\n                    // check if the same command is already assigned a shortcut, then remove before we add\n                    // a new shortcut\n                    for(let shortcutKey of Object.keys(overrides)) {\n                        if(overrides[shortcutKey] === commandID){\n                            delete overrides[shortcutKey];\n                        }\n                    }\n                }\n            } catch (err) {\n                // Cannot parse the text read from the key map file.\n                console.error(\"Error reading \", _getUserKeyMapFilePath(), err);\n                return;\n            }\n        }\n        userKeyMap.overrides[shortcut] = commandID;\n        const textContent = JSON.stringify(userKeyMap, null, 4);\n        await deferredToPromise(FileUtils.writeText(file, textContent, true));\n        _loadUserKeyMap();\n    }\n\n    /**\n     * @private\n     *\n     * Reads in the user key map file and parses its content into JSON.\n     * Returns the user key bindings if JSON has \"overrides\".\n     * Otherwise, returns an empty object or an error if the file\n     * cannot be parsed or loaded.\n     *\n     * @return {$.Promise} a jQuery promise that will be resolved with the JSON\n     * object if the user key map file has \"overrides\" property or an empty JSON.\n     * If the key map file cannot be read or cannot be parsed by the JSON parser,\n     * then the promise is rejected with an error.\n     */\n    function _readUserKeyMap() {\n        let file   = FileSystem.getFileForPath(_getUserKeyMapFilePath()),\n            result = new $.Deferred();\n\n        file.exists(function (err, doesExist) {\n            if (doesExist) {\n                FileUtils.readAsText(file, true)\n                    .done(function (text) {\n                        let keyMap = {};\n                        try {\n                            if (text) {\n                                let json = JSON.parse(text);\n                                // If no overrides, return an empty key map.\n                                result.resolve((json && json.overrides) || keyMap);\n                            } else {\n                                // The file is empty, so return an empty key map.\n                                result.resolve(keyMap);\n                            }\n                        } catch (err) {\n                            // Cannot parse the text read from the key map file.\n                            result.reject(err);\n                        }\n                    })\n                    .fail(function (err) {\n                        // Key map file cannot be loaded.\n                        result.reject(err);\n                    });\n            } else {\n                // Just resolve if no user key map file\n                result.resolve();\n            }\n        });\n        return result.promise();\n    }\n\n    /**\n     * @private\n     *\n     * Reads in the user key bindings and updates the key map with each user key\n     * binding by removing the existing one assigned to each key and adding\n     * new one for the specified command id. Shows errors and opens the user\n     * key map file if it cannot be parsed.\n     *\n     * This function is wrapped with debounce so that its execution is always delayed\n     * by 200 ms. The delay is required because when this function is called some\n     * extensions may still be adding some commands and their key bindings asychronously.\n     */\n    _loadUserKeyMap = _.debounce(_loadUserKeyMapImmediate, 200);\n\n    function _loadUserKeyMapImmediate() {\n        return new Promise((resolve, reject)=>{\n            _readUserKeyMap()\n                .then(function (keyMap) {\n                    // Some extensions may add a new command without any key binding. So\n                    // we always have to get all commands again to ensure that we also have\n                    // those from any extensions installed during the current session.\n                    _allCommands = CommandManager.getAll();\n\n                    _customKeyMapCache = _.cloneDeep(_customKeyMap);\n                    _customKeyMap = keyMap;\n                    _undoPriorUserKeyBindings();\n                    _applyUserKeyBindings();\n                    resolve();\n                }, function (err) {\n                    _showErrorsAndOpenKeyMap(err);\n                    console.error(err);\n                    // we always resolve here as the event is handled\n                    resolve();\n                });\n        });\n    };\n\n    /**\n     * resets all user defined shortcuts\n     * @return {Promise|Promise<void>|*}\n     */\n    function resetUserShortcutsAsync() {\n        return new Promise((resolve, reject)=>{\n            let userKeyMapPath = _getUserKeyMapFilePath(),\n                file = FileSystem.getFileForPath(userKeyMapPath);\n            let defaultContent = \"{\\n    \\\"documentation\\\": \\\"https://github.com/phcode-dev/phoenix/wiki/User-%60keymap.json%60\\\",\" +\n                \"\\n    \\\"overrides\\\": {\" +\n                \"\\n        \\n    }\\n}\\n\";\n\n            return FileUtils.writeText(file, defaultContent, true).done(()=>{\n                _loadUserKeyMapImmediate()\n                    .then(resolve)\n                    .catch(reject);\n            }).fail(reject);\n        });\n    }\n\n    /**\n     * @private\n     *\n     * Opens the existing key map file or creates a new one with default content\n     * if it does not exist.\n     */\n    function _openUserKeyMap() {\n        let userKeyMapPath = _getUserKeyMapFilePath(),\n            file = FileSystem.getFileForPath(userKeyMapPath);\n        file.exists(function (err, doesExist) {\n            if (doesExist) {\n                CommandManager.execute(Commands.FILE_OPEN, { fullPath: userKeyMapPath });\n            } else {\n                resetUserShortcutsAsync().finally(function () {\n                    CommandManager.execute(Commands.FILE_OPEN, { fullPath: userKeyMapPath });\n                });\n            }\n        });\n    }\n\n    // Due to circular dependencies, not safe to call on() directly\n    EventDispatcher.on_duringInit(CommandManager, \"commandRegistered\", _handleCommandRegistered);\n    CommandManager.register(Strings.CMD_OPEN_KEYMAP, Commands.FILE_OPEN_KEYMAP, _openUserKeyMap);\n\n    // Asynchronously loading DocumentManager to avoid the circular dependency\n    require([\"document/DocumentManager\"], function (DocumentManager) {\n        DocumentManager.on(\"documentSaved\", function checkKeyMapUpdates(e, doc) {\n            if (doc && doc.file.fullPath === _userKeyMapFilePath) {\n                _loadUserKeyMap();\n            }\n        });\n    });\n\n    /**\n     * @private\n     *\n     * Initializes _allCommands array and _defaultKeyMap so that we can use them for\n     * detecting non-existent commands and restoring the original key binding.\n     */\n    function _initCommandAndKeyMaps() {\n        _allCommands = CommandManager.getAll();\n        // Keep a copy of the default key bindings before loading user key bindings.\n        _initDefaultShortcuts();\n        _defaultKeyMap = _.cloneDeep(_keyMap);\n    }\n\n    /**\n     * @private\n     *\n     * Sets the full file path to the user key map file. Only used by unit tests\n     * to load a test file instead of the actual user key map file.\n     *\n     * @param {string} fullPath file path to the user key map file.\n     */\n    function _setUserKeyMapFilePath(fullPath) {\n        _userKeyMapFilePath = fullPath;\n    }\n\n    AppInit.extensionsLoaded(function () {\n        let params  = new UrlParams();\n        params.parse();\n        if (params.get(\"reloadWithoutUserExts\") === \"true\") {\n            _showErrors = false;\n        }\n\n        _initCommandAndKeyMaps();\n        _loadUserKeyMap();\n    });\n\n    function isInOverlayMode() {\n        return KeyboardOverlayMode.isInOverlayMode();\n    }\n\n    function _isAnAssignableKey(key) {\n        if(!key){\n            return false;\n        }\n        const split = key.split(\"-\");\n        if(split.length === 1 && key.length > 1 && key[0]==='F'){\n            // F1-12\n            return true;\n        } else if(split.length === 2 && split[0] === \"Shift\" && split[1].length > 1){\n            // Shift - F1-12, shift-PgUp etc... which are allowed\n            return true;\n        } else if(split.length === 2 && split[0] === \"Shift\" && split[1].length === 1){\n            // Shift-A, Shift-! etc which are upper case chars -not shortcuts. we don't allow that.\n            return false;\n        } else if(key.includes(\"-\")){\n            // allow all compound shortcuts\n            return true;\n        }\n        return false;\n    }\n\n    function updateShortcutSelection(event, key) {\n        if(key && _isAnAssignableKey(key) && normalizeKeyDescriptorString(key)) {\n            let normalizedKey = normalizeKeyDescriptorString(key);\n            capturedShortcut = normalizedKey;\n            let existingBinding = _keyMap[normalizedKey];\n            if (!normalizedKey) {\n                console.error(\"Failed to normalize \" + key);\n            } else if (_isReservedShortcuts(normalizedKey)) {\n                console.log(\"Cannot assign reserved shortcut: \", normalizedKey);\n            } else if(existingBinding && existingBinding.commandID === keyboardShortcutCaptureInProgress.getID()){\n                // user press the same shortcut that is already assigned to the command\n                keyboardShortcutDialog.close();\n                keyboardShortcutDialog = null;\n                keyboardShortcutCaptureInProgress = null;\n            } else if (existingBinding) {\n                const command = CommandManager.get(existingBinding.commandID);\n                $(\".change-shortcut-dialog .message\").html(\n                    StringUtils.format(Strings.KEYBOARD_SHORTCUT_CHANGE_DIALOG_DUPLICATE,\n                        key, command.getName(), keyboardShortcutCaptureInProgress.getName()));\n                $(\".change-shortcut-dialog .Assign\").removeClass(\"forced-hidden\").focus();\n                $(\".change-shortcut-dialog .Remove\").addClass(\"forced-hidden\");\n            } else {\n                keyboardShortcutDialog.close();\n                keyboardShortcutDialog = null;\n                _addToUserKeymapFile(key, keyboardShortcutCaptureInProgress.getID());\n                keyboardShortcutCaptureInProgress = null;\n            }\n            event.stopPropagation();\n            event.preventDefault();\n        }\n        return true;\n    }\n\n    let keyboardShortcutCaptureInProgress = null,\n        keyboardShortcutDialog = null,\n        capturedShortcut = null;\n    function showShortcutSelectionDialog(command) {\n        Metrics.countEvent(Metrics.EVENT_TYPE.KEYBOARD, 'shortcut', \"DialogShown\");\n        if(_isSpecialCommand(command.getID())){\n            return;\n        }\n        const panelCommand = CommandManager.get(Commands.HELP_TOGGLE_SHORTCUTS_PANEL);\n        capturedShortcut = null;\n        const keyBindings = getKeyBindings(command);\n        let currentShortcut = Strings.KEYBOARD_SHORTCUT_NONE;\n        if(keyBindings.length){\n            currentShortcut = keyBindings[0].displayKey || keyBindings[0].key;\n            for(let i=1; i<keyBindings.length; i++){\n                currentShortcut = currentShortcut + `, ${keyBindings[i].displayKey || keyBindings[i].key}`;\n            }\n        }\n        keyboardShortcutCaptureInProgress = command;\n        keyboardShortcutDialog = Dialogs.showModalDialogUsingTemplate(Mustache.render(KeyboardDialogTemplate, {\n            Strings: Strings,\n            message: StringUtils.format(Strings.KEYBOARD_SHORTCUT_CHANGE_DIALOG_TEXT, command.getName(), currentShortcut)\n        }));\n        if(currentShortcut === Strings.KEYBOARD_SHORTCUT_NONE){\n            $(\".change-shortcut-dialog .Remove\").addClass(\"forced-hidden\");\n        }\n        if(panelCommand && panelCommand.getChecked()){\n            $(\".change-shortcut-dialog .Show\").addClass(\"forced-hidden\");\n        }\n        keyboardShortcutDialog.done((closeReason)=>{\n            if(closeReason === 'remove' && currentShortcut){\n                _addToUserKeymapFile(currentShortcut, null);\n                Metrics.countEvent(Metrics.EVENT_TYPE.KEYBOARD, 'shortcut', \"removed\");\n            } else if(closeReason === Dialogs.DIALOG_BTN_OK && currentShortcut){\n                _addToUserKeymapFile(capturedShortcut, command.getID());\n                Metrics.countEvent(Metrics.EVENT_TYPE.KEYBOARD, 'shortcut', \"changed\");\n            } else if(closeReason === 'show'){\n                if(!panelCommand.getChecked()){\n                    panelCommand.execute();\n                }\n            }\n            capturedShortcut = null;\n            keyboardShortcutCaptureInProgress = null;\n            keyboardShortcutDialog = null;\n        });\n    }\n\n    /**\n     * Returns true the given command id can be overriden by user.\n     * @param commandId\n     * @return {boolean}\n     */\n    function canAssignBinding(commandId) {\n        return !_isSpecialCommand(commandId);\n    }\n\n    // unit test only\n    exports._reset = _reset;\n    exports._setUserKeyMapFilePath = _setUserKeyMapFilePath;\n    exports._getUserKeyMapFilePath = _getUserKeyMapFilePath;\n    exports._getDisplayKey = _getDisplayKey;\n    exports._loadUserKeyMap = _loadUserKeyMap;\n    exports._loadUserKeyMapImmediate = _loadUserKeyMapImmediate;\n    exports._initCommandAndKeyMaps = _initCommandAndKeyMaps;\n    exports._onCtrlUp = _onCtrlUp;\n\n    // Define public API\n    exports.getKeymap = getKeymap;\n    exports.canAssignBinding = canAssignBinding;\n    exports.addBinding = addBinding;\n    exports.removeBinding = removeBinding;\n    exports.formatKeyDescriptor = formatKeyDescriptor;\n    exports.getKeyBindings = getKeyBindings;\n    exports.getKeyBindingsDisplay = getKeyBindingsDisplay;\n    exports.addGlobalKeydownHook = addGlobalKeydownHook;\n    exports.removeGlobalKeydownHook = removeGlobalKeydownHook;\n    exports.isInOverlayMode = isInOverlayMode;\n    exports.resetUserShortcutsAsync = resetUserShortcutsAsync;\n    exports.showShortcutSelectionDialog = showShortcutSelectionDialog;\n\n    // public constants\n    exports.KEY = KEY;\n    // public events\n    exports.EVENT_KEY_BINDING_ADDED = EVENT_KEY_BINDING_ADDED;\n    exports.EVENT_KEY_BINDING_REMOVED = EVENT_KEY_BINDING_REMOVED;\n\n    /**\n     * Use windows-specific bindings if no other are found (e.g. Linux).\n     * Core Brackets modules that use key bindings should always define at\n     * least a generic keybinding that is applied for all platforms. This\n     * setting effectively creates a compatibility mode for third party\n     * extensions that define explicit key bindings for Windows and Mac, but\n     * not Linux.\n     */\n    exports.useWindowsCompatibleBindings = false;\n\n    // For unit testing only\n    exports._handleKey = _handleKey;\n    exports._handleKeyEvent = _handleKeyEvent;\n});\n"],"file":"KeyBindingManager.js"}