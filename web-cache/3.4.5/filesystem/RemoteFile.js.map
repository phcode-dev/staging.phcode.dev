{"version":3,"sources":["filesystem/RemoteFile.js"],"names":["define","require","exports","module","FileSystemError","FileSystemStats","NodeUtils","SESSION_START_TIME","Date","_getStats","uri","isFile","mtime","toISOString","size","realPath","hash","_getFileName","filePath","fileName","split","pop","trim","slice","RemoteFile","protocol","fullPath","fileSystem","this","_isFile","_isDirectory","readOnly","_path","_stat","_id","_name","_fileSystem","donotWatch","encodedPath","_nodeConnectorRead","url","encoding","successCB","errorCB","fetchURLText","then","catch","err","console","error","isTauriResource","startingURLs","start","startsWith","_remoteRead","Phoenix","browser","isTauri","xmlhttp","XMLHttpRequest","open","responseType","onload","oEvent","arrayBuffer","response","iconv","decode","Buffer","from","onerror","send","Object","defineProperties","prototype","get","set","Error","name","parentPath","_parentPath","id","isDirectory","_impl","toString","stat","callback","NOT_FOUND","constructor","_contents","_encoding","_preserveBOM","_clearCachedData","read","options","self","data","e","write","exists","unlink","rename","newName","moveToTrash"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2018 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    const FileSystemError = require(\"filesystem/FileSystemError\"),\n        FileSystemStats = require(\"filesystem/FileSystemStats\"),\n        NodeUtils = require(\"utils/NodeUtils\");\n\n    const SESSION_START_TIME = new Date();\n\n    /**\n     * Create a new file stat. See the FileSystemStats class for more details.\n     *\n     * @param {!string} fullPath The full path for this File.\n     * @return {FileSystemStats} stats.\n     */\n    function _getStats(uri) {\n        return new FileSystemStats({\n            isFile: true,\n            mtime: SESSION_START_TIME.toISOString(),\n            size: 0,\n            realPath: uri,\n            hash: uri\n        });\n    }\n\n    function _getFileName(filePath) {\n        var fileName = filePath.split('/').pop();\n\n        if (!fileName.trim()) {\n            fileName = filePath.trim().slice(0, -1);\n            fileName = fileName.split('/').pop();\n        }\n\n        return fileName;\n    }\n\n    /**\n     * Model for a RemoteFile.\n     *\n     * This class should *not* be instantiated directly. Use FileSystem.getFileForPath\n     *\n     * See the FileSystem class for more details.\n     *\n     * @constructor\n     * @param {!string} fullPath The full path for this File.\n     * @param {!FileSystem} fileSystem The file system associated with this File.\n     */\n    function RemoteFile(protocol, fullPath, fileSystem) {\n        this._isFile = true;\n        this._isDirectory = false;\n        this.readOnly = true;\n        this._path = fullPath;\n        this._stat = _getStats(fullPath);\n        this._id = fullPath;\n        this._name = _getFileName(fullPath);\n        this._fileSystem = fileSystem;\n        this.donotWatch = true;\n        this.protocol = protocol;\n        this.encodedPath = fullPath;\n    }\n\n    // Add \"fullPath\", \"name\", \"parent\", \"id\", \"isFile\" and \"isDirectory\" getters\n    Object.defineProperties(RemoteFile.prototype, {\n        \"fullPath\": {\n            get: function () { return this._path; },\n            set: function () { throw new Error(\"Cannot set fullPath\"); }\n        },\n        \"name\": {\n            get: function () { return this._name; },\n            set: function () { throw new Error(\"Cannot set name\"); }\n        },\n        \"parentPath\": {\n            get: function () { return this._parentPath; },\n            set: function () { throw new Error(\"Cannot set parentPath\"); }\n        },\n        \"id\": {\n            get: function () { return this._id; },\n            set: function () { throw new Error(\"Cannot set id\"); }\n        },\n        \"isFile\": {\n            get: function () { return this._isFile; },\n            set: function () { throw new Error(\"Cannot set isFile\"); }\n        },\n        \"isDirectory\": {\n            get: function () { return this._isDirectory; },\n            set: function () { throw new Error(\"Cannot set isDirectory\"); }\n        },\n        \"_impl\": {\n            get: function () { return this._fileSystem._impl; },\n            set: function () { throw new Error(\"Cannot set _impl\"); }\n        }\n    });\n\n    /**\n     * Helpful toString for debugging and equality check purposes\n     */\n    RemoteFile.prototype.toString = function () {\n        return \"[RemoteFile \" + this._path + \"]\";\n    };\n\n    /**\n     * Returns the stats for the remote entry.\n     *\n     * @param {function (?string, FileSystemStats=)} callback Callback with a\n     *      FileSystemError string or FileSystemStats object.\n     */\n    RemoteFile.prototype.stat = function (callback) {\n        if (this._stat) {\n            callback(null, this._stat);\n        } else {\n            callback(FileSystemError.NOT_FOUND);\n        }\n    };\n\n    RemoteFile.prototype.constructor = RemoteFile;\n\n    /**\n     * Cached contents of this file. This value is nullable but should NOT be undefined.\n     * @private\n     * @type {?string}\n     */\n    RemoteFile.prototype._contents = null;\n\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    RemoteFile.prototype._encoding = \"utf8\";\n\n    /**\n     * @private\n     * @type {?bool}\n     */\n    RemoteFile.prototype._preserveBOM = false;\n\n\n    /**\n     * Clear any cached data for this file. Note that this explicitly does NOT\n     * clear the file's hash.\n     * @private\n     */\n    RemoteFile.prototype._clearCachedData = function () {\n        // no-op\n    };\n\n    function _nodeConnectorRead(url, encoding, successCB, errorCB) {\n        NodeUtils.fetchURLText(url, encoding)\n            .then(successCB)\n            .catch(err=>{\n                console.error(\"failed fetch url: \", url, err);\n                errorCB(err);\n            });\n    }\n\n    function isTauriResource(url) {\n        const startingURLs = [\n            \"phtauri://\", \"https://phtauri.localhost\", \"asset://\", \"https://asset.localhost\",\n            \"tauri://\", \"https://tauri.localhost\"\n        ];\n        for(let start of startingURLs){\n            if(url.startsWith(start)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _remoteRead(url, encoding, successCB, errorCB) {\n        if(Phoenix.browser.isTauri && !isTauriResource(url)) {\n            _nodeConnectorRead(url, encoding, successCB, errorCB);\n            return;\n        }\n        let xmlhttp = new XMLHttpRequest();\n        xmlhttp.open(\"GET\", url, true);\n        xmlhttp.responseType = \"arraybuffer\";\n\n        xmlhttp.onload = function(oEvent) {\n            const arrayBuffer = xmlhttp.response;\n            try {\n                successCB(iconv.decode(Buffer.from(arrayBuffer), encoding));\n            } catch (err) {\n                errorCB(err);\n            }\n        };\n\n        xmlhttp.onerror = function (err) {\n            errorCB(err);\n        };\n        xmlhttp.send();\n    }\n\n    /**\n     * Reads a remote file.\n     *\n     * @param {Object=} options Currently unused.\n     * @param {function (err?, ?string, string=, FileSystemStats=)} callback Callback that is passed the\n     *              FileSystemError string or the file's contents and its stats.\n     */\n    RemoteFile.prototype.read = function (options, callback) {\n        if (typeof (options) === \"function\") {\n            callback = options;\n            options = {};\n        }\n        this._encoding = options.encoding || \"utf8\";\n\n        if (this._contents !== null && this._stat) {\n            callback(null, this._contents, this._encoding, this._stat);\n            return;\n        }\n\n        var self = this;\n        _remoteRead(this.fullPath, this._encoding, function (data) {\n            self._contents = data;\n            callback(null, data, self._encoding, self._stat);\n        }, function (e) {\n            callback(FileSystemError.NOT_FOUND);\n        });\n    };\n\n    /**\n     * Write a file.\n     *\n     * @param {string} data Data to write.\n     * @param {object=} options Currently unused.\n     * @param {function (?string, FileSystemStats=)=} callback Callback that is passed the\n     *              FileSystemError string or the file's new stats.\n     */\n    RemoteFile.prototype.write = function (data, encoding, callback) {\n        if (typeof (encoding) === \"function\") {\n            callback = encoding;\n        }\n        callback(FileSystemError.NOT_FOUND);\n    };\n\n    RemoteFile.prototype.exists = function (callback) {\n        callback(null, true);\n    };\n\n    RemoteFile.prototype.unlink = function (callback) {\n        callback(FileSystemError.NOT_FOUND);\n    };\n\n    RemoteFile.prototype.rename = function (newName, callback) {\n        callback(FileSystemError.NOT_FOUND);\n    };\n\n    RemoteFile.prototype.moveToTrash = function (callback) {\n        callback(FileSystemError.NOT_FOUND);\n    };\n\n    // Export this class\n    module.exports = RemoteFile;\n});\n"],"file":"RemoteFile.js"}