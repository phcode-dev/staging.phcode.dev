{"version":3,"sources":["utils/BuildInfoUtils.js"],"names":["define","require","exports","module","FileSystem","FileUtils","_loadSHA","path","callback","result","$","Deferred","brackets","inBrowser","reject","file","getFileForPath","readAsText","done","text","indexOf","basePath","substr","lastIndexOf","refRelPath","trim","branch","data","resolve","sha","fail","promise","getBracketsSHA","bracketsSrc","getNativeBracketsDirectoryPath","bracketsGitRoot","metadata","repository","SHA"],"mappings":"AAyBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,WAAcH,QAAQ,yBACtBI,UAAcJ,QAAQ,kBAS1B,SAASK,SAASC,KAAMC,UACpB,IAAIC,OAAS,IAAIC,EAAEC,SAEnB,GAAIC,SAASC,UACTJ,OAAOK,aACJ,CAGH,IAAIC,KAAOX,WAAWY,eAAeT,MACrCF,UAAUY,WAAWF,MAAMG,KAAK,SAAUC,MACtC,GAA8B,IAA1BA,KAAKC,QAAQ,SAAgB,CAE7B,IAAIC,SAAcd,KAAKe,OAAO,EAAGf,KAAKgB,YAAY,MAC9CC,WAAcL,KAAKG,OAAO,GAAGG,OAC7BC,OAAcP,KAAKG,OAAO,IAAIG,OAElCnB,SAASe,SAAW,IAAMG,WAAYhB,UAAUU,KAAK,SAAUS,MAC3DlB,OAAOmB,QAAQ,CAAEF,OAAQA,OAAQG,IAAKF,KAAKE,IAAIJ,WAChDK,KAAK,WACJrB,OAAOmB,QAAQ,CAAEF,OAAQA,gBAG7BjB,OAAOmB,QAAQ,CAAEC,IAAKV,SAE3BW,KAAK,WACJrB,OAAOK,WAIf,OAAOL,OAAOsB,UAQlB,SAASC,iBACL,IAAIvB,OAAS,IAAIC,EAAEC,SAMfsB,YAAc5B,UAAU6B,iCAIxBC,gBAUJ,OARA7B,SAFsB2B,YAAYX,OAAO,EAAGW,YAAYV,YAAY,MAAQ,cAElDL,KAAK,SAAUS,MAErClB,OAAOmB,QAAQD,KAAKD,QAAU,OAAQC,KAAKE,KAAO,WAAW,KAC9DC,KAAK,WAEJrB,OAAOmB,QAAQhB,SAASwB,SAASC,WAAWX,OAAQd,SAASwB,SAASC,WAAWC,KAAK,KAGnF7B,OAAOsB,UAhElB9B,QAAQ,gBAmERC,QAAQ8B,eAAsBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Utilities for determining the git SHA from an optional repository or from the\n * installed copy of Brackets.\n */\ndefine(function (require, exports, module) {\n\n\n    var FileSystem  = require(\"filesystem/FileSystem\"),\n        FileUtils   = require(\"file/FileUtils\");\n\n    // make sure the global brackets variable is loaded\n    require(\"utils/Global\");\n\n    /**\n     * Loads a SHA from Git metadata file. If the file contains a symbolic ref name, follows the ref\n     * and loads the SHA from that file in turn.\n     */\n    function _loadSHA(path, callback) {\n        var result = new $.Deferred();\n\n        if (brackets.inBrowser) {\n            result.reject();\n        } else {\n            // HEAD contains a SHA in detached-head mode; otherwise it contains a relative path\n            // to a file in /refs which in turn contains the SHA\n            var file = FileSystem.getFileForPath(path);\n            FileUtils.readAsText(file).done(function (text) {\n                if (text.indexOf(\"ref: \") === 0) {\n                    // e.g. \"ref: refs/heads/branchname\"\n                    var basePath    = path.substr(0, path.lastIndexOf(\"/\")),\n                        refRelPath  = text.substr(5).trim(),\n                        branch      = text.substr(16).trim();\n\n                    _loadSHA(basePath + \"/\" + refRelPath, callback).done(function (data) {\n                        result.resolve({ branch: branch, sha: data.sha.trim() });\n                    }).fail(function () {\n                        result.resolve({ branch: branch });\n                    });\n                } else {\n                    result.resolve({ sha: text });\n                }\n            }).fail(function () {\n                result.reject();\n            });\n        }\n\n        return result.promise();\n    }\n\n    /**\n     * @return {$.Promise} A promise resolved with the git branch and SHA\n     *     of a local copy of a repository or the branch and SHA\n     *     embedded at build-time in the package.json repository metadata.\n     */\n    function getBracketsSHA() {\n        var result = new $.Deferred();\n\n        // Look for Git metadata on disk to load the SHAs for 'brackets'. Done on\n        // startup instead of on demand because the version that's currently running is what was\n        // loaded at startup (the src on disk may be updated to a different version later).\n        // Git metadata may be missing (e.g. in the release builds) - silently ignore if so.\n        var bracketsSrc = FileUtils.getNativeBracketsDirectoryPath();\n\n        // Assumes Brackets is a standalone repo and not a submodule (prior to brackets-shell,\n        // brackets-app was setup this way)\n        var bracketsGitRoot = bracketsSrc.substr(0, bracketsSrc.lastIndexOf(\"/\")) + \"/.git/HEAD\";\n\n        _loadSHA(bracketsGitRoot).done(function (data) {\n            // Found a repository\n            result.resolve(data.branch || \"HEAD\", data.sha || \"unknown\", true);\n        }).fail(function () {\n            // If package.json has repository data, Brackets is running from the installed /www folder\n            result.resolve(brackets.metadata.repository.branch, brackets.metadata.repository.SHA, false);\n        });\n\n        return result.promise();\n    }\n\n    exports.getBracketsSHA      = getBracketsSHA;\n\n    // FIXME (jasonsanjose): Since the move to brackets-shell, can't reliably get SHA for shell.\n    // exports._getBracketsShellSHA = getBracketsShellSHA;\n});\n"],"file":"BuildInfoUtils.js"}