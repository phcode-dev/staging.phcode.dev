{"version":3,"sources":["utils/ValidationUtils.js"],"names":["define","require","exports","module","isInteger","value","isNaN","parseInt","Math","floor","isFinite","isIntegerInRange","lowerLimit","upperLimit","hasLowerLimt","hasUpperLimt"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAU/B,SAASC,UAAUC,OAEf,MAAuB,iBAAZ,QAAwBC,MAAMC,SAASF,MAAO,OAKrDG,KAAKC,MAAMJ,SAAWA,SAKrBK,SAASL,QAgBlB,SAASM,iBAAiBN,MAAOO,WAAYC,YAEzC,QAAKT,UAAUC,YAK6B,iBAAjB,aAGDA,OAASO,gBAFS,iBAAjB,aAEyCP,OAASQ,aAH7E,IAAIC,aACAC,aAORb,QAAQE,UAA0BA,UAClCF,QAAQS,iBAA0BA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n\n    /**\n     * Used to validate whether type of unknown value is an integer.\n     *\n     * @param {*} value Value for which to validate its type\n     * @return {boolean} true if value is a finite integer\n     */\n    function isInteger(value) {\n        // Validate value is a number\n        if (typeof (value) !== \"number\" || isNaN(parseInt(value, 10))) {\n            return false;\n        }\n\n        // Validate number is an integer\n        if (Math.floor(value) !== value) {\n            return false;\n        }\n\n        // Validate number is finite\n        if (!isFinite(value)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Used to validate whether type of unknown value is an integer, and, if so,\n     * is it within the option lower and upper limits.\n     *\n     * @param {*} value Value for which to validate its type\n     * @param {number=} lowerLimit Optional lower limit (inclusive)\n     * @param {number=} upperLimit Optional upper limit (inclusive)\n     * @return {boolean} true if value is an interger, and optionally in specified range.\n     */\n    function isIntegerInRange(value, lowerLimit, upperLimit) {\n        // Validate value is an integer\n        if (!isInteger(value)) {\n            return false;\n        }\n\n        // Validate integer is in range\n        var hasLowerLimt = (typeof (lowerLimit) === \"number\"),\n            hasUpperLimt = (typeof (upperLimit) === \"number\");\n\n        return ((!hasLowerLimt || value >= lowerLimit) && (!hasUpperLimt || value <= upperLimit));\n    }\n\n\n    // Define public API\n    exports.isInteger               = isInteger;\n    exports.isIntegerInRange        = isIntegerInRange;\n});\n"],"file":"ValidationUtils.js"}