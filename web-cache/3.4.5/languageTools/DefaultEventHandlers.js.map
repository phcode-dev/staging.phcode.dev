{"version":3,"sources":["languageTools/DefaultEventHandlers.js"],"names":["define","require","exports","module","LanguageManager","ProjectManager","PathConverters","EventPropagationProvider","client","this","previousProject","currentProject","getProjectRoot","handleProjectFoldersRequest","event","projectRoot","workspaceFolders","convertToWorkspaceFolders","$","Deferred","resolve","prototype","_sendDocumentOpenNotification","languageId","doc","_languages","includes","notifyTextDocumentOpened","filePath","file","_path","fullPath","fileContent","getText","handleActiveEditorChange","current","previous","self","document","off","previousLanguageId","getLanguageForPath","getId","notifyTextDocumentClosed","currentLanguageId","on","handleProjectOpen","directory","notifyProjectRootsChanged","foldersAdded","foldersRemoved","handleProjectClose","handleDocumentDirty","isDirty","docLanguageId","notifyTextDocumentSave","handleDocumentChange","changeList","notifyTextDocumentChanged","handleDocumentRename","oldName","newName","oldDocLanguageId","newDocLanguageId","handleAppClose","stop","registerClientForEditorEvent","bind","addOnEditorChangeHandler","addOnProjectOpenHandler","addBeforeProjectCloseHandler","addOnDocumentDirtyFlagChangeHandler","addOnDocumentChangeHandler","addOnFileRenameHandler","addBeforeAppClose","onProjectFoldersRequest","console","log"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 - present Adobe. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/* eslint-disable indent */\n/* eslint no-console: 0*/\ndefine(function (require, exports, module) {\n\n\n    var LanguageManager = require(\"language/LanguageManager\"),\n        ProjectManager = require(\"project/ProjectManager\"),\n        PathConverters = require(\"languageTools/PathConverters\");\n\n    function EventPropagationProvider(client) {\n        this.client = client;\n        this.previousProject = \"\";\n        this.currentProject = ProjectManager.getProjectRoot();\n    }\n\n    EventPropagationProvider.prototype._sendDocumentOpenNotification = function (languageId, doc) {\n        if (!this.client) {\n            return;\n        }\n\n        if (this.client._languages.includes(languageId)) {\n            this.client.notifyTextDocumentOpened({\n                languageId: languageId,\n                filePath: (doc.file._path || doc.file.fullPath),\n                fileContent: doc.getText()\n            });\n        }\n    };\n\n    EventPropagationProvider.prototype.handleActiveEditorChange = function (event, current, previous) {\n        var self = this;\n\n        if (!this.client) {\n            return;\n        }\n\n        if (previous) {\n            previous.document\n                .off(\"languageChanged.language-tools\");\n            var previousLanguageId = LanguageManager.getLanguageForPath(previous.document.file.fullPath).getId();\n            if (this.client._languages.includes(previousLanguageId)) {\n                this.client.notifyTextDocumentClosed({\n                    filePath: (previous.document.file._path || previous.document.file.fullPath)\n                });\n            }\n        }\n        if (current) {\n            var currentLanguageId = LanguageManager.getLanguageForPath(current.document.file.fullPath).getId();\n            current.document\n                .on(\"languageChanged.language-tools\", function () {\n                    var languageId = LanguageManager.getLanguageForPath(current.document.file.fullPath).getId();\n                    self._sendDocumentOpenNotification(languageId, current.document);\n                });\n            self._sendDocumentOpenNotification(currentLanguageId, current.document);\n        }\n    };\n\n    EventPropagationProvider.prototype.handleProjectOpen = function (event, directory) {\n        if (!this.client) {\n            return;\n        }\n\n        this.currentProject = directory.fullPath;\n\n        this.client.notifyProjectRootsChanged({\n            foldersAdded: [this.currentProject],\n            foldersRemoved: [this.previousProject]\n        });\n    };\n\n    EventPropagationProvider.prototype.handleProjectClose = function (event, directory) {\n        if (!this.client) {\n            return;\n        }\n\n        this.previousProject = directory.fullPath;\n    };\n\n    EventPropagationProvider.prototype.handleDocumentDirty = function (event, doc) {\n        if (!this.client) {\n            return;\n        }\n\n        if (!doc.isDirty) {\n            var docLanguageId = LanguageManager.getLanguageForPath(doc.file.fullPath).getId();\n            if (this.client._languages.includes(docLanguageId)) {\n                this.client.notifyTextDocumentSave({\n                    filePath: (doc.file._path || doc.file.fullPath)\n                });\n            }\n        }\n    };\n\n    EventPropagationProvider.prototype.handleDocumentChange = function (event, doc, changeList) {\n        if (!this.client) {\n            return;\n        }\n\n        var docLanguageId = LanguageManager.getLanguageForPath(doc.file.fullPath).getId();\n        if (this.client._languages.includes(docLanguageId)) {\n            this.client.notifyTextDocumentChanged({\n                filePath: (doc.file._path || doc.file.fullPath),\n                fileContent: doc.getText()\n            });\n        }\n    };\n\n    EventPropagationProvider.prototype.handleDocumentRename = function (event, oldName, newName) {\n        if (!this.client) {\n            return;\n        }\n\n        var oldDocLanguageId = LanguageManager.getLanguageForPath(oldName).getId();\n        if (this.client._languages.includes(oldDocLanguageId)) {\n            this.client.notifyTextDocumentClosed({\n                filePath: oldName\n            });\n        }\n\n        var newDocLanguageId = LanguageManager.getLanguageForPath(newName).getId();\n        if (this.client._languages.includes(newDocLanguageId)) {\n            this.client.notifyTextDocumentOpened({\n                filePath: newName\n            });\n        }\n    };\n\n    EventPropagationProvider.prototype.handleAppClose = function (event) {\n        //Also handles Reload with Extensions\n        if (!this.client) {\n            return;\n        }\n\n        this.client.stop();\n    };\n\n    function handleProjectFoldersRequest(event) {\n        var projectRoot = ProjectManager.getProjectRoot(),\n            workspaceFolders = [projectRoot];\n\n        workspaceFolders = PathConverters.convertToWorkspaceFolders(workspaceFolders);\n\n        return $.Deferred().resolve(workspaceFolders);\n    };\n\n    EventPropagationProvider.prototype.registerClientForEditorEvent = function () {\n        if (this.client) {\n            var handleActiveEditorChange = this.handleActiveEditorChange.bind(this),\n                handleProjectOpen = this.handleProjectOpen.bind(this),\n                handleProjectClose = this.handleProjectClose.bind(this),\n                handleDocumentDirty = this.handleDocumentDirty.bind(this),\n                handleDocumentChange = this.handleDocumentChange.bind(this),\n                handleDocumentRename = this.handleDocumentRename.bind(this),\n                handleAppClose = this.handleAppClose.bind(this);\n\n            this.client.addOnEditorChangeHandler(handleActiveEditorChange);\n            this.client.addOnProjectOpenHandler(handleProjectOpen);\n            this.client.addBeforeProjectCloseHandler(handleProjectClose);\n            this.client.addOnDocumentDirtyFlagChangeHandler(handleDocumentDirty);\n            this.client.addOnDocumentChangeHandler(handleDocumentChange);\n            this.client.addOnFileRenameHandler(handleDocumentRename);\n            this.client.addBeforeAppClose(handleAppClose);\n            this.client.onProjectFoldersRequest(handleProjectFoldersRequest);\n        } else {\n            console.log(\"No client provided for event propagation\");\n        }\n    };\n\n    exports.EventPropagationProvider = EventPropagationProvider;\n});\n"],"file":"DefaultEventHandlers.js"}