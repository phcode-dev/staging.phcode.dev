{"version":3,"sources":["preferences/PreferencesManager.js"],"names":["define","require","exports","module","AppInit","Commands","CommandManager","FileUtils","PreferencesBase","FileSystem","Strings","PreferencesImpl","StateManager","_","currentFilename","currentLanguageId","projectDirectory","projectScopeIsIncluded","_includeProjectScope","filename","undefined","getRelativeFilename","getUserPrefFile","userPrefFile","_toggleProjectScope","manager","removeFromScopeOrder","addToScopeOrder","_setProjectSettingsFile","settingsFile","getDirectoryPath","projectPathLayer","setPrefFilePath","projectStorage","setPath","getExtensionPrefs","prefix","getPrefixedSystem","CURRENT_PROJECT","scopeOrderWithProject","scopeOrderWithoutProject","_adjustScopeOrderForProject","scopeOrder","includeProject","hasProject","newScopeOrder","indexOf","before","length","take","push","apply","drop","without","_buildContext","languageId","ctx","path","language","_getContext","context","_setCurrentFile","newFilename","oldFilename","signalContextChanged","_setCurrentLanguage","newLanguageId","oldLanguageId","_updateCurrentProjectContext","defaultScopeOrder","_getScopeOrder","_handleOpenPreferences","fullPath","file","getFileForPath","exists","err","doesExist","execute","FILE_OPEN","writeText","done","getViewState","id","get","setViewState","value","set","contextBuilder","on","register","CMD_OPEN_PREFERENCES","FILE_OPEN_PREFERENCES","appReady","resumeChangeEvents","_isUserScopeCorrupt","isUserScopeCorrupt","_reloadUserPrefs","reloadUserPrefs","STATE_PROJECT_CONTEXT","PROJECT_CONTEXT","STATE_GLOBAL_CONTEXT","GLOBAL_CONTEXT","STATE_PROJECT_THEN_GLOBAL_CONTEXT","PROJECT_THEN_GLOBAL_CONTEXT","ready","managerReady","bind","save","off","getPreference","getAllPreferences","addScope","stateManager","FileStorage","SETTINGS_FILENAME","SETTINGS_FILENAME_BRACKETS","definePreference","fileChanged"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global define, console */\n/*unittests: Preferences Manager */\n\n/**\n * PreferencesManager\n *\n */\ndefine(function (require, exports, module) {\n\n\n    var AppInit                 = require(\"utils/AppInit\"),\n        Commands                = require(\"command/Commands\"),\n        CommandManager          = require(\"command/CommandManager\"),\n        FileUtils               = require(\"file/FileUtils\"),\n        PreferencesBase         = require(\"preferences/PreferencesBase\"),\n        FileSystem              = require(\"filesystem/FileSystem\"),\n        Strings                 = require(\"strings\"),\n        PreferencesImpl         = require(\"preferences/PreferencesImpl\"),\n        StateManager            = require(\"preferences/StateManager\"),\n        _                       = require(\"thirdparty/lodash\");\n\n    var currentFilename         = null, // the filename currently being edited\n        currentLanguageId       = null, // the language id of the file currently being edited\n        projectDirectory        = null,\n        projectScopeIsIncluded  = true;\n\n    /**\n     * @private\n     *\n     * Determines whether the project Scope should be included based on whether\n     * the currently edited file is within the project.\n     *\n     * @param {string=} filename Full path to edited file\n     * @return {boolean} true if the project Scope should be included.\n     */\n    function _includeProjectScope(filename) {\n        filename = filename || currentFilename;\n        if (!filename || !projectDirectory) {\n            return false;\n        }\n        return FileUtils.getRelativeFilename(projectDirectory, filename) !== undefined;\n    }\n\n    /**\n     * Get the full path to the user-level preferences file.\n     *\n     * @return {string} Path to the preferences file\n     */\n    function getUserPrefFile() {\n        return PreferencesImpl.userPrefFile;\n    }\n\n    /**\n     * @private\n     *\n     * Adds or removes the project Scope as needed based on whether the currently\n     * edited file is within the project.\n     */\n    function _toggleProjectScope() {\n        if (_includeProjectScope() === projectScopeIsIncluded) {\n            return;\n        }\n        if (projectScopeIsIncluded) {\n            PreferencesImpl.manager.removeFromScopeOrder(\"project\");\n        } else {\n            PreferencesImpl.manager.addToScopeOrder(\"project\", \"user\");\n        }\n        projectScopeIsIncluded = !projectScopeIsIncluded;\n    }\n\n    /**\n     * @private\n     *\n     * This is used internally within Brackets for the ProjectManager to signal\n     * which file contains the project-level preferences.\n     *\n     * @param {string} settingsFile Full path to the project's settings file\n     */\n    function _setProjectSettingsFile(settingsFile) {\n        projectDirectory = FileUtils.getDirectoryPath(settingsFile);\n        _toggleProjectScope();\n        PreferencesImpl.projectPathLayer.setPrefFilePath(settingsFile);\n        PreferencesImpl.projectStorage.setPath(settingsFile);\n    }\n\n    /**\n     * Creates an extension-specific preferences manager using the prefix given.\n     * A `.` character will be appended to the prefix. So, a preference named `foo`\n     * with a prefix of `myExtension` will be stored as `myExtension.foo` in the\n     * preferences files.\n     *\n     * @param {string} prefix Prefix to be applied\n     */\n    function getExtensionPrefs(prefix) {\n        return PreferencesImpl.manager.getPrefixedSystem(prefix);\n    }\n\n    // Constants for preference lookup contexts.\n\n    /**\n     * Context to look up preferences in the current project.\n     * @type {Object}\n     */\n    var CURRENT_PROJECT = {};\n\n    /**\n     * Cached copy of the scopeOrder with the project Scope\n     */\n    var scopeOrderWithProject = null;\n\n    /**\n     * Cached copy of the scopeOrder without the project Scope\n     */\n    var scopeOrderWithoutProject = null;\n\n    /**\n     * @private\n     *\n     * Adjusts scopeOrder to have the project Scope if necessary.\n     * Returns a new array if changes are needed, otherwise returns\n     * the original array.\n     *\n     * @param {Array.<string>} scopeOrder initial scopeOrder\n     * @param {boolean} includeProject Whether the project Scope should be included\n     * @return {Array.<string>} array with or without project Scope as needed.\n     */\n    function _adjustScopeOrderForProject(scopeOrder, includeProject) {\n        var hasProject = scopeOrder.indexOf(\"project\") > -1;\n\n        if (hasProject === includeProject) {\n            return scopeOrder;\n        }\n\n        var newScopeOrder;\n\n        if (includeProject) {\n            var before = scopeOrder.indexOf(\"user\");\n            if (before === -1) {\n                before = scopeOrder.length - 2;\n            }\n            newScopeOrder = _.take(scopeOrder, before);\n            newScopeOrder.push(\"project\");\n            newScopeOrder.push.apply(newScopeOrder, _.drop(scopeOrder, before));\n        } else {\n            newScopeOrder = _.without(scopeOrder, \"project\");\n        }\n        return newScopeOrder;\n    }\n\n    /**\n     * @private\n     *\n     * Creates a context based on the specified filename and language.\n     *\n     * @param {string=} filename Filename to create the context with.\n     * @param {string=} languageId Language ID to create the context with.\n     */\n    function _buildContext(filename, languageId) {\n        var ctx = {};\n        if (filename) {\n            ctx.path = filename;\n        } else {\n            ctx.path = currentFilename;\n        }\n        if (languageId) {\n            ctx.language = languageId;\n        } else {\n            ctx.language = currentLanguageId;\n        }\n        ctx.scopeOrder = _includeProjectScope(ctx.path) ?\n                        scopeOrderWithProject :\n                        scopeOrderWithoutProject;\n        return ctx;\n    }\n\n    function _getContext(context) {\n        context = context || {};\n        return _buildContext(context.path, context.language);\n    }\n\n    /**\n     * @private\n     *\n     * This is used internally within Brackets for the EditorManager to signal\n     * to the preferences what the currently edited file is.\n     *\n     * @param {string} newFilename Full path to currently edited file\n     */\n    function _setCurrentFile(newFilename) {\n        var oldFilename = currentFilename;\n        if (oldFilename === newFilename) {\n            return;\n        }\n        currentFilename = newFilename;\n        _toggleProjectScope();\n        PreferencesImpl.manager.signalContextChanged(_buildContext(oldFilename, currentLanguageId),\n                                                     _buildContext(newFilename, currentLanguageId));\n    }\n\n    /**\n     * @private\n     * This function is used internally to set the current language of the document.\n     * Both at the moment of opening the file and when the language is manually\n     * overriden.\n     *\n     * @param {string} newLanguageId The id of the language of the current editor.\n     */\n    function _setCurrentLanguage(newLanguageId) {\n        var oldLanguageId = currentLanguageId;\n        if (oldLanguageId === newLanguageId) {\n            return;\n        }\n        currentLanguageId = newLanguageId;\n        PreferencesImpl.manager.signalContextChanged(_buildContext(currentFilename, oldLanguageId),\n                                                     _buildContext(currentFilename, newLanguageId));\n    }\n\n\n    PreferencesImpl.manager.contextBuilder = _getContext;\n\n    /**\n     * @private\n     *\n     * Updates the CURRENT_PROJECT context to have the correct scopes.\n     */\n    function _updateCurrentProjectContext() {\n        var defaultScopeOrder = PreferencesImpl.manager._getScopeOrder({});\n        scopeOrderWithProject = _adjustScopeOrderForProject(defaultScopeOrder, true);\n        scopeOrderWithoutProject = _adjustScopeOrderForProject(defaultScopeOrder, false);\n        CURRENT_PROJECT.scopeOrder = scopeOrderWithProject;\n    }\n\n    _updateCurrentProjectContext();\n\n    PreferencesImpl.manager.on(\"scopeOrderChange\", _updateCurrentProjectContext);\n\n    /**\n     * @private\n     */\n    function _handleOpenPreferences() {\n        var fullPath = getUserPrefFile(),\n            file = FileSystem.getFileForPath(fullPath);\n        file.exists(function (err, doesExist) {\n            if (doesExist) {\n                CommandManager.execute(Commands.FILE_OPEN, { fullPath: fullPath });\n            } else {\n                FileUtils.writeText(file, \"\", true)\n                    .done(function () {\n                        CommandManager.execute(Commands.FILE_OPEN, { fullPath: fullPath });\n                    });\n            }\n        });\n\n    }\n\n    CommandManager.register(Strings.CMD_OPEN_PREFERENCES, Commands.FILE_OPEN_PREFERENCES, _handleOpenPreferences);\n\n    /**\n     * Convenience function that gets a view state\n     *\n     * @param {string} id preference to get\n     * @param {Object} [context] Optional additional information about the request\n     */\n    function getViewState(id, context) {\n        return StateManager.get(id, context);\n    }\n\n    /**\n     * Convenience function that sets a view state and then saves the file\n     *\n     * @param {string} id preference to set\n     * @param {*} value new value for the preference\n     * @param {Object} [context] Optional additional information about the request\n     */\n    function setViewState(id, value, context) {\n        return StateManager.set(id, value, context);\n    }\n\n    AppInit.appReady(function () {\n        PreferencesImpl.manager.resumeChangeEvents();\n    });\n\n    // Private API for unit testing and use elsewhere in Brackets core\n    exports._isUserScopeCorrupt     = PreferencesImpl.isUserScopeCorrupt;\n    exports._setCurrentFile         = _setCurrentFile;\n    exports._setCurrentLanguage     = _setCurrentLanguage;\n    exports._setProjectSettingsFile = _setProjectSettingsFile;\n    exports._reloadUserPrefs        = PreferencesImpl.reloadUserPrefs;\n    exports._buildContext           = _buildContext;\n\n    // Public API\n\n    // Context names for preference lookups\n    exports.CURRENT_PROJECT     = CURRENT_PROJECT;\n    exports.STATE_PROJECT_CONTEXT = StateManager.PROJECT_CONTEXT;\n    exports.STATE_GLOBAL_CONTEXT = StateManager.GLOBAL_CONTEXT;\n    exports.STATE_PROJECT_THEN_GLOBAL_CONTEXT = StateManager.PROJECT_THEN_GLOBAL_CONTEXT;\n\n    exports.ready               = PreferencesImpl.managerReady;\n    exports.getUserPrefFile     = getUserPrefFile;\n    exports.get                 = PreferencesImpl.manager.get.bind(PreferencesImpl.manager);\n    exports.set                 = PreferencesImpl.manager.set.bind(PreferencesImpl.manager);\n    exports.save                = PreferencesImpl.manager.save.bind(PreferencesImpl.manager);\n    exports.on                  = PreferencesImpl.manager.on.bind(PreferencesImpl.manager);\n    exports.off                 = PreferencesImpl.manager.off.bind(PreferencesImpl.manager);\n    exports.getPreference       = PreferencesImpl.manager.getPreference.bind(PreferencesImpl.manager);\n    exports.getAllPreferences   = PreferencesImpl.manager.getAllPreferences.bind(PreferencesImpl.manager);\n    exports.getExtensionPrefs   = getExtensionPrefs;\n    exports.getViewState        = getViewState;\n    exports.setViewState        = setViewState;\n    exports.addScope            = PreferencesImpl.manager.addScope.bind(PreferencesImpl.manager);\n    exports.stateManager        = StateManager;\n    exports.FileStorage         = PreferencesBase.FileStorage;\n    exports.SETTINGS_FILENAME   = PreferencesImpl.SETTINGS_FILENAME;\n    exports.SETTINGS_FILENAME_BRACKETS   = PreferencesImpl.SETTINGS_FILENAME_BRACKETS;\n    exports.definePreference    = PreferencesImpl.manager.definePreference.bind(PreferencesImpl.manager);\n    exports.fileChanged         = PreferencesImpl.manager.fileChanged.bind(PreferencesImpl.manager);\n});\n"],"file":"PreferencesManager.js"}