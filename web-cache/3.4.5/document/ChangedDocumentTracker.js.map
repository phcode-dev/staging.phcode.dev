{"version":3,"sources":["document/ChangedDocumentTracker.js"],"names":["define","require","exports","module","DocumentManager","ProjectManager","ChangedDocumentTracker","self","this","_changedPaths","_windowFocus","_addListener","bind","_removeListener","_onChange","_onWindowFocus","on","event","doc","isWithinProject","file","fullPath","$","window","focus","prototype","off","reset","isPathChanged","path","getChangedPaths","makeArray"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,gBAAkBH,QAAQ,4BAC1BI,eAAkBJ,QAAQ,0BAU9B,SAASK,yBACL,IAAIC,KAAOC,KAEXA,KAAKC,cAAgB,GACrBD,KAAKE,cAAe,EACpBF,KAAKG,aAAeH,KAAKG,aAAaC,KAAKJ,MAC3CA,KAAKK,gBAAkBL,KAAKK,gBAAgBD,KAAKJ,MACjDA,KAAKM,UAAYN,KAAKM,UAAUF,KAAKJ,MACrCA,KAAKO,eAAiBP,KAAKO,eAAeH,KAAKJ,MAE/CJ,gBAAgBY,GAAG,sBAAuB,SAAUC,MAAOC,KAEnDb,eAAec,gBAAgBD,IAAIE,KAAKC,WACxCd,KAAKI,aAAaO,OAI1Bd,gBAAgBY,GAAG,uBAAwB,SAAUC,MAAOC,KAGxDX,KAAKM,gBAAgBK,OAGzBI,EAAEC,QAAQC,MAAMhB,KAAKO,gBAOzBT,uBAAuBmB,UAAUd,aAAe,SAAUO,KACtDA,IAAIF,GAAG,SAAUR,KAAKM,YAM1BR,uBAAuBmB,UAAUZ,gBAAkB,SAAUK,KACzDA,IAAIQ,IAAI,SAAUlB,KAAKM,YAO3BR,uBAAuBmB,UAAUV,eAAiB,SAAUE,MAAOC,KAC/DV,KAAKE,cAAe,GAOxBJ,uBAAuBmB,UAAUX,UAAY,SAAUG,MAAOC,KAG1DV,KAAKC,cAAcS,IAAIE,KAAKC,WAAY,GAM5Cf,uBAAuBmB,UAAUE,MAAQ,WACrCnB,KAAKC,cAAgB,GACrBD,KAAKE,cAAe,GAQxBJ,uBAAuBmB,UAAUG,cAAgB,SAAUC,MACvD,OAAOrB,KAAKE,cAAgBF,KAAKC,cAAcoB,OAOnDvB,uBAAuBmB,UAAUK,gBAAkB,WAC/C,OAAOR,EAAES,UAAUvB,KAAKC,gBAG5BN,OAAOD,QAAUI","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Defines a ChangedDocumentTracker class to monitor changes to files in the current project.\n */\ndefine(function (require, exports, module) {\n\n\n    var DocumentManager = require(\"document/DocumentManager\"),\n        ProjectManager  = require(\"project/ProjectManager\");\n\n    /**\n     * Tracks \"change\" events on opened Documents. Used to monitor changes\n     * to documents in-memory and update caches. Assumes all documents have\n     * changed when the Brackets window loses and regains focus. Does not\n     * read timestamps of files on disk. Clients may optionally track file\n     * timestamps on disk independently.\n     * @constructor\n     */\n    function ChangedDocumentTracker() {\n        var self = this;\n\n        this._changedPaths = {};\n        this._windowFocus = true;\n        this._addListener = this._addListener.bind(this);\n        this._removeListener = this._removeListener.bind(this);\n        this._onChange = this._onChange.bind(this);\n        this._onWindowFocus = this._onWindowFocus.bind(this);\n\n        DocumentManager.on(\"afterDocumentCreate\", function (event, doc) {\n            // Only track documents in the current project\n            if (ProjectManager.isWithinProject(doc.file.fullPath)) {\n                self._addListener(doc);\n            }\n        });\n\n        DocumentManager.on(\"beforeDocumentDelete\", function (event, doc) {\n            // In case a document somehow remains loaded after its project\n            // has been closed, unconditionally attempt to remove the listener.\n            self._removeListener(doc);\n        });\n\n        $(window).focus(this._onWindowFocus);\n    }\n\n    /**\n     * @private\n     * Assumes all files are changed when the window loses and regains focus.\n     */\n    ChangedDocumentTracker.prototype._addListener = function (doc) {\n        doc.on(\"change\", this._onChange);\n    };\n\n    /**\n     * @private\n     */\n    ChangedDocumentTracker.prototype._removeListener = function (doc) {\n        doc.off(\"change\", this._onChange);\n    };\n\n    /**\n     * @private\n     * Assumes all files are changed when the window loses and regains focus.\n     */\n    ChangedDocumentTracker.prototype._onWindowFocus = function (event, doc) {\n        this._windowFocus = true;\n    };\n\n    /**\n     * @private\n     * Tracks changed documents.\n     */\n    ChangedDocumentTracker.prototype._onChange = function (event, doc) {\n        // if it was already changed, and the client hasn't reset the tracker,\n        // then leave it changed.\n        this._changedPaths[doc.file.fullPath] = true;\n    };\n\n    /**\n     * Empty the set of dirty paths. Begin tracking new dirty documents.\n     */\n    ChangedDocumentTracker.prototype.reset = function () {\n        this._changedPaths = {};\n        this._windowFocus = false;\n    };\n\n    /**\n     * Check if a file path is dirty.\n     * @param {!string} file path\n     * @return {!boolean} Returns true if the file was dirtied since the last reset.\n     */\n    ChangedDocumentTracker.prototype.isPathChanged = function (path) {\n        return this._windowFocus || this._changedPaths[path];\n    };\n\n    /**\n     * Get the set of changed paths since the last reset.\n     * @return {Array.<string>} Changed file paths\n     */\n    ChangedDocumentTracker.prototype.getChangedPaths = function () {\n        return $.makeArray(this._changedPaths);\n    };\n\n    module.exports = ChangedDocumentTracker;\n});\n"],"file":"ChangedDocumentTracker.js"}