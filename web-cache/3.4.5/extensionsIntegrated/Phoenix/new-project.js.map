{"version":3,"sources":["extensionsIntegrated/Phoenix/new-project.js"],"names":["define","require","exports","module","Dialogs","Mustache","newProjectTemplate","Strings","StringUtils","ExtensionInterface","CommandManager","Commands","Menus","Metrics","DefaultDialogs","FileSystem","FileUtils","ZipUtils","ProjectManager","EventDispatcher","DocumentCommandHandlers","createProjectDialogue","replaceProjectDialogue","replaceKeepProjectDialogue","guidedTour","makeEventDispatcher","NEW_PROJECT_INTERFACE","MAX_DEDUPE_COUNT","registerExtensionInterface","newProjectDialogueObj","createProjectDialogueObj","downloadCancelled","_showNewProjectDialogue","window","testEnvironment","templateVars","newProjectURL","Phoenix","baseURL","dialogueContents","render","showModalDialogUsingTemplate","setTimeout","document","getElementById","contentWindow","focus","countEvent","EVENT_TYPE","NEW_PROJECT","_addMenuEntries","register","CMD_PROJECT_NEW","FILE_NEW_PROJECT","fileMenu","getMenu","AppMenuBar","FILE_MENU","addMenuItem","AFTER","FILE_NEW_FOLDER","closeDialogue","close","trigger","EVENT_NEW_PROJECT_DIALOGUE_CLOSED","startTourIfNeeded","showErrorDialogue","title","message","showModalDialog","DIALOG_ID_ERROR","openFolder","execute","FILE_OPEN_FOLDER","then","async","_shouldNotShowDialog","browser","isTauri","getProjectRoot","fullPath","getWelcomeProjectPath","_isOpenWithFileFromOS","cliArgs","app","getCommandLineArgs","args","length","init","shouldShowWelcome","PhStore","getItem","notShow","on","_EVENT_OPEN_WITH_FILE_FROM_OS","_showProjectErrorDialogue","desc","projectPath","err","format","ERROR_LOADING_PROJECT","_showReplaceProjectConfirmDialogue","DIRECTORY_REPLACE_MESSAGE","MESSAGE","_showReplaceKeepProjectConfirmDialogue","_checkIfPathIsWritable","path","Promise","resolve","reject","file","getFileForPath","writeText","done","fail","_validateProjectFolder","dir","getDirectoryForPath","displayPath","replace","VFS","getMountDir","REQUEST_NATIVE_FILE_SYSTEM_ERROR","NOT_FOUND_ERR","getContents","contents","READ_DIRECTORY_ENTRIES_ERROR","_resolveIfWritable","catch","id","DIALOG_BTN_OK","_findFreeFolderName","basePath","i","newPath","exists","existsAsync","ensureExistsDirAsync","e","alreadyExists","suggestedProjectName","getLocalProjectsPath","_getSuggestedProjectDir","DIALOG_BTN_CANCEL","_showCreateProjectDialogue","TITLE","_closeCreateProjectDialogue","_updateCreateProjectDialogueMessage","el","textContent","_unzipProject","data","flattenFirstLevelInZip","progressCb","UNZIP_IN_PROGRESS","DOWNLOAD_COMPLETE","unzipBinDataToLocation","downloadAndOpenProject","downloadURL","console","log","SETTING_UP_PROJECT","DOWNLOADING","JSZipUtils","getBinaryContent","callback","error","DOWNLOAD_FAILED","DOWNLOAD_FAILED_MESSAGE","_progressCB","total","EXTRACTING_FILES_PROGRESS","openProject","UNZIP_FAILED","progress","status","percent","Math","round","abortCheck","showFolderSelect","showOpenDialog","CHOOSE_FOLDER","files","showAboutBox","HELP_ABOUT","getExploreProjectPath","getTauriDir","getTauriPlatformPath","fs"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n\ndefine(function (require, exports, module) {\n    const Dialogs = require(\"widgets/Dialogs\"),\n        Mustache = require(\"thirdparty/mustache/mustache\"),\n        newProjectTemplate = require(\"text!./html/new-project-template.html\"),\n        Strings = require(\"strings\"),\n        StringUtils = require(\"utils/StringUtils\"),\n        ExtensionInterface = require(\"utils/ExtensionInterface\"),\n        CommandManager = require(\"command/CommandManager\"),\n        Commands = require(\"command/Commands\"),\n        Menus = require(\"command/Menus\"),\n        Metrics = require(\"utils/Metrics\"),\n        DefaultDialogs = require(\"widgets/DefaultDialogs\"),\n        FileSystem = require(\"filesystem/FileSystem\"),\n        FileUtils = require(\"file/FileUtils\"),\n        ZipUtils = require(\"utils/ZipUtils\"),\n        ProjectManager = require(\"project/ProjectManager\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        DocumentCommandHandlers = require(\"document/DocumentCommandHandlers\"),\n        createProjectDialogue = require(\"text!./html/create-project-dialogue.html\"),\n        replaceProjectDialogue = require(\"text!./html/replace-project-dialogue.html\"),\n        replaceKeepProjectDialogue = require(\"text!./html/replace-keep-project-dialogue.html\"),\n        guidedTour = require(\"./guided-tour\");\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    const NEW_PROJECT_INTERFACE = \"Extn.Phoenix.newProject\",\n        MAX_DEDUPE_COUNT = 10000;\n\n    ExtensionInterface.registerExtensionInterface(NEW_PROJECT_INTERFACE, exports);\n\n    let newProjectDialogueObj,\n        createProjectDialogueObj,\n        downloadCancelled = false;\n\n    function _showNewProjectDialogue() {\n        if(window.testEnvironment){\n            return;\n        }\n        let templateVars = {\n            Strings: Strings,\n            newProjectURL: `${window.Phoenix.baseURL}assets/new-project/code-editor.html`\n        };\n        let dialogueContents = Mustache.render(newProjectTemplate, templateVars);\n        newProjectDialogueObj = Dialogs.showModalDialogUsingTemplate(dialogueContents, true);\n        setTimeout(()=>{\n            document.getElementById(\"newProjectFrame\").contentWindow.focus();\n        }, 100);\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"dialogue\", \"open\");\n    }\n\n    function _addMenuEntries() {\n        CommandManager.register(Strings.CMD_PROJECT_NEW, Commands.FILE_NEW_PROJECT, _showNewProjectDialogue);\n        const fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        fileMenu.addMenuItem(Commands.FILE_NEW_PROJECT, \"\", Menus.AFTER, Commands.FILE_NEW_FOLDER);\n    }\n\n    function closeDialogue() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"dialogue\", \"close\");\n        newProjectDialogueObj.close();\n        exports.trigger(exports.EVENT_NEW_PROJECT_DIALOGUE_CLOSED);\n        guidedTour.startTourIfNeeded();\n    }\n\n    function showErrorDialogue(title, message) {\n        Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_ERROR,\n            title,\n            message\n        );\n    }\n\n    function openFolder () {\n        CommandManager.execute(Commands.FILE_OPEN_FOLDER).then(closeDialogue);\n    }\n\n    async function _shouldNotShowDialog() {\n        if(!Phoenix.browser.isTauri){\n            // in browser we always show the new project dialog even if there is a different startup project open. This\n            // is mainly for users to discover the download native app button in the new project window.\n            return false;\n        }\n        // in tauri, we don't show the dialog if its not default project or\n        // if phoenix was opened with a file/folder from os with cli args. In mac, this is done via\n        // setSingleInstanceCLIArgsHandler as it doesnt use cli args for open with like other os.\n        if(ProjectManager.getProjectRoot().fullPath !== ProjectManager.getWelcomeProjectPath() ||\n            DocumentCommandHandlers._isOpenWithFileFromOS()){\n            return true;\n        }\n        // we are in the default project, show the dialog only if we are not opened with a file\n        const cliArgs= await Phoenix.app.getCommandLineArgs();\n        const args = cliArgs && cliArgs.args;\n        if(!args || args.length <= 1){\n            return false;\n        }\n        return true;\n    }\n\n    function init() {\n        _addMenuEntries();\n        const shouldShowWelcome = PhStore.getItem(\"new-project.showWelcomeScreen\") || 'Y';\n        if(shouldShowWelcome !== 'Y') {\n            Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"dialogue\", \"disabled\");\n            guidedTour.startTourIfNeeded();\n            return;\n        }\n        _shouldNotShowDialog()\n            .then(notShow=>{\n                if(notShow){\n                    return;\n                }\n                _showNewProjectDialogue();\n                DocumentCommandHandlers.on(DocumentCommandHandlers._EVENT_OPEN_WITH_FILE_FROM_OS, ()=>{\n                    closeDialogue();\n                });\n            });\n    }\n\n    function _showProjectErrorDialogue(desc, projectPath, err) {\n        let message = StringUtils.format(desc, projectPath, err);\n        showErrorDialogue(Strings.ERROR_LOADING_PROJECT, message);\n    }\n\n    function _showReplaceProjectConfirmDialogue(projectPath) {\n        let message = StringUtils.format(Strings.DIRECTORY_REPLACE_MESSAGE, projectPath);\n        let templateVars = {\n            Strings: Strings,\n            MESSAGE: message\n        };\n        return Dialogs.showModalDialogUsingTemplate(Mustache.render(replaceProjectDialogue, templateVars));\n    }\n\n    function _showReplaceKeepProjectConfirmDialogue(projectPath) {\n        let message = StringUtils.format(Strings.DIRECTORY_REPLACE_MESSAGE, projectPath);\n        let templateVars = {\n            Strings: Strings,\n            MESSAGE: message\n        };\n        return Dialogs.showModalDialogUsingTemplate(Mustache.render(replaceKeepProjectDialogue, templateVars));\n    }\n\n    function _checkIfPathIsWritable(path) {\n        // this is needed as for fs access APIs in native folders, the browser will ask an additional write permission\n        // to the user. We have to validate that before proceeding.\n        // We do this by writing a file `.phcode.json` to the folder\n        return new Promise((resolve, reject)=>{\n            let file = FileSystem.getFileForPath(`${path}/.phcode.json`);\n            FileUtils.writeText(file, \"{}\", true)\n                .done(resolve)\n                .fail(reject);\n        });\n    }\n\n    async function _validateProjectFolder(projectPath) {\n        return new Promise((resolve, reject)=>{\n            let dir = FileSystem.getDirectoryForPath(projectPath);\n            let displayPath = projectPath.replace(Phoenix.VFS.getMountDir(), \"\");\n            if(!dir){\n                _showProjectErrorDialogue(Strings.REQUEST_NATIVE_FILE_SYSTEM_ERROR, displayPath, Strings.NOT_FOUND_ERR);\n                reject();\n            }\n            dir.getContents(function (err, contents) {\n                if (err) {\n                    _showProjectErrorDialogue(Strings.READ_DIRECTORY_ENTRIES_ERROR, displayPath, Strings.NOT_FOUND_ERR);\n                    reject();\n                    return;\n                }\n                function _resolveIfWritable() {\n                    _checkIfPathIsWritable(projectPath)\n                        .then(resolve)\n                        .catch(reject);\n                }\n                if(contents.length >0){\n                    _showReplaceProjectConfirmDialogue(displayPath).done(function (id) {\n                        if (id === Dialogs.DIALOG_BTN_OK) {\n                            _resolveIfWritable();\n                            return;\n                        }\n                        reject();\n                    });\n                } else {\n                    _resolveIfWritable();\n                }\n            });\n        });\n    }\n\n    async function _findFreeFolderName(basePath) {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            try {\n                for(let i=0; i< MAX_DEDUPE_COUNT; i++){\n                    let newPath = `${basePath}-${i}`;\n                    let exists = await window.Phoenix.VFS.existsAsync(newPath);\n                    if(!exists){\n                        await window.Phoenix.VFS.ensureExistsDirAsync(newPath);\n                        resolve(newPath);\n                        return;\n                    }\n                }\n                reject();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async function alreadyExists(suggestedProjectName) {\n        let projectPath = `${ProjectManager.getLocalProjectsPath()}${suggestedProjectName}`; // try suggested path first\n        return window.Phoenix.VFS.existsAsync(projectPath);\n    }\n\n    async function _getSuggestedProjectDir(suggestedProjectName) {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            try{\n                // try suggested path first\n                let projectPath = `${ProjectManager.getLocalProjectsPath()}${suggestedProjectName}`;\n                let exists = await window.Phoenix.VFS.existsAsync(projectPath);\n                if(!exists){\n                    resolve(projectPath);\n                    return;\n                }\n                _showReplaceKeepProjectConfirmDialogue(suggestedProjectName).done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_OK) {\n                        resolve(projectPath);\n                        return;\n                    } else if(id === Dialogs.DIALOG_BTN_CANCEL){\n                        reject();\n                        return;\n                    }\n                    _findFreeFolderName(projectPath)\n                        .then(projectPath=>resolve(projectPath))\n                        .catch(reject);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    function _showCreateProjectDialogue(title, message) {\n        let templateVars = {\n            Strings: Strings,\n            TITLE: title,\n            MESSAGE: message\n        };\n        createProjectDialogueObj=\n            Dialogs.showModalDialogUsingTemplate(Mustache.render(createProjectDialogue, templateVars));\n        return createProjectDialogueObj;\n    }\n\n    function _closeCreateProjectDialogue() {\n        createProjectDialogueObj.close();\n    }\n\n    function _updateCreateProjectDialogueMessage(message, title) {\n        let el = document.getElementById('new-prj-msg-dlg-message');\n        if(el){\n            el.textContent = message;\n        }\n        el = document.getElementById('new-prj-msg-dlg-title');\n        if(el && title){\n            el.textContent = title;\n        }\n    }\n\n    function _unzipProject(data, projectPath, flattenFirstLevelInZip, progressCb) {\n        return new Promise((resolve, reject)=>{\n            _updateCreateProjectDialogueMessage(Strings.UNZIP_IN_PROGRESS, Strings.DOWNLOAD_COMPLETE);\n            ZipUtils.unzipBinDataToLocation(data, projectPath, flattenFirstLevelInZip, progressCb)\n                .then(resolve)\n                .catch(reject);\n        });\n    }\n\n    /**\n     *\n     * @param downloadURL\n     * @param projectPath\n     * @param suggestedProjectName\n     * @param flattenFirstLevelInZip if set to true, then if zip contents are nested inside a directory, the nexted dir\n     * will be removed in the path structure in destination. For Eg. some Zip may contain a `contents` folder inside the\n     * zip which has all the contents. If we blindly extract the zio, all the contents will be placed inside a\n     * `contents` folder in root and not the root dir itself.\n     * See a sample zip file here: https://api.github.com/repos/StartBootstrap/startbootstrap-grayscales/zipball\n     * @returns {Promise<void>}\n     */\n    async function downloadAndOpenProject(downloadURL, projectPath, suggestedProjectName, flattenFirstLevelInZip) {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            try {\n                // if project path is null, create one in default folder\n                if(!projectPath){\n                    projectPath = await _getSuggestedProjectDir(suggestedProjectName);\n                } else {\n                    await _validateProjectFolder(projectPath);\n                }\n                console.log(\n                    `downloadAndOpenProject ${suggestedProjectName} from URL: ${downloadURL} to: ${projectPath}`);\n\n                downloadCancelled = false;\n                _showCreateProjectDialogue(Strings.SETTING_UP_PROJECT, Strings.DOWNLOADING).done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_CANCEL) {\n                        downloadCancelled = true;\n                    }\n                });\n                window.JSZipUtils.getBinaryContent(downloadURL, {\n                    callback: async function(err, data) {\n                        if(downloadCancelled){\n                            reject();\n                        } else if(err) {\n                            console.error(\"could not load phoenix default project from zip file!\", err);\n                            _closeCreateProjectDialogue();\n                            showErrorDialogue(Strings.DOWNLOAD_FAILED, Strings.DOWNLOAD_FAILED_MESSAGE);\n                            reject();\n                        } else {\n                            function _progressCB(done, total) {\n                                let message = StringUtils.format(Strings.EXTRACTING_FILES_PROGRESS, done, total);\n                                _updateCreateProjectDialogueMessage(message);\n                                return !downloadCancelled; // continueExtraction id not download cancelled\n                            }\n                            _unzipProject(data, projectPath, flattenFirstLevelInZip, _progressCB)\n                                .then(()=>{\n                                    _closeCreateProjectDialogue();\n                                    ProjectManager.openProject(projectPath)\n                                        .then(resolve)\n                                        .fail(reject);\n                                    console.log(\"Project Setup complete: \", projectPath);\n                                })\n                                .catch(()=>{\n                                    _closeCreateProjectDialogue();\n                                    showErrorDialogue(Strings.ERROR_LOADING_PROJECT, Strings.UNZIP_FAILED);\n                                    reject();\n                                });\n                        }\n                    },\n                    progress: function (status){\n                        if(status.percent > 0){\n                            _updateCreateProjectDialogueMessage(\n                                `${Strings.DOWNLOADING} ${Math.round(status.percent)}%`);\n                        }\n                    },\n                    abortCheck: function (){\n                        return downloadCancelled;\n                    }\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    function showFolderSelect() {\n        return new Promise((resolve, reject)=>{\n            FileSystem.showOpenDialog(false, true, Strings.CHOOSE_FOLDER, '', null, function (err, files) {\n                if(err || files.length !== 1){\n                    reject();\n                    return;\n                }\n                resolve(files[0]);\n            });\n        });\n    }\n\n    function showAboutBox() {\n        CommandManager.execute(Commands.HELP_ABOUT);\n    }\n\n    exports.init = init;\n    exports.openFolder = openFolder;\n    exports.closeDialogue = closeDialogue;\n    exports.downloadAndOpenProject = downloadAndOpenProject;\n    exports.showFolderSelect = showFolderSelect;\n    exports.showErrorDialogue = showErrorDialogue;\n    exports.alreadyExists = alreadyExists;\n    exports.Metrics = Metrics;\n    exports.EVENT_NEW_PROJECT_DIALOGUE_CLOSED = \"newProjectDlgClosed\";\n    exports.getWelcomeProjectPath = ProjectManager.getWelcomeProjectPath;\n    exports.getExploreProjectPath = ProjectManager.getExploreProjectPath;\n    exports.getLocalProjectsPath = ProjectManager.getLocalProjectsPath;\n    exports.getMountDir = Phoenix.VFS.getMountDir;\n    exports.path = Phoenix.path;\n    exports.getTauriDir = Phoenix.VFS.getTauriDir;\n    exports.getTauriPlatformPath = Phoenix.fs.getTauriPlatformPath;\n    exports.showAboutBox = showAboutBox;\n});\n"],"file":"new-project.js"}