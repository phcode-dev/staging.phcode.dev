{"version":3,"sources":["extensions/default/JSHint/main.js"],"names":["define","require","exports","module","_","brackets","getModule","CodeInspection","AppInit","PreferencesManager","Strings","ProjectManager","FileSystem","IndexingWorker","loadScriptInWorker","uri","prefs","getExtensionPrefs","projectSpecificOptions","jsHintConfigFileErrorMessage","DEFAULT_OPTIONS","esversion","browser","node","jquery","rhino","jasmine","devel","_getLinterConfigFileErrorMsg","pos","line","ch","message","type","Type","ERROR","async","lintOneFile","text","_fullPath","Promise","resolve","errors","replace","userPrefOptions","isEmpty","get","options","execPeer","then","jsHintErrors","lintResult","length","map","lintError","character","reason","code","definePreference","description","DESCRIPTION_JSHINT_OPTIONS","on","requestRun","JSHINT_NAME","CONFIG_FILE_NAME","removeComments","str","_readConfig","dir","configFileName","reject","file","getFileForPath","read","err","content","config","JSON","parse","console","log","fullPath","e","getProjectRelativePath","extends","extendFile","parentPath","name","baseConfigResult","mergedConfig","$","extend","globals","catch","_reloadOptions","getProjectRoot","_isFileInArray","fileToCheck","fileArray","_projectFileChanged","_evt","entry","added","removed","configFilePath","appReady","EVENT_PROJECT_FILE_CHANGED","EVENT_PROJECT_OPEN","register","scanFileAsync"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// Parts of this file is adapted from https://github.com/cfjedimaster/brackets-jshint\n\n/**\n * Provides JSLint results via the core linting extension point\n */\ndefine(function (require, exports, module) {\n\n    // Load dependent modules\n    const _                = brackets.getModule(\"thirdparty/lodash\"),\n        CodeInspection     = brackets.getModule(\"language/CodeInspection\"),\n        AppInit            = brackets.getModule(\"utils/AppInit\"),\n        PreferencesManager = brackets.getModule(\"preferences/PreferencesManager\"),\n        Strings            = brackets.getModule(\"strings\"),\n        ProjectManager     = brackets.getModule(\"project/ProjectManager\"),\n        FileSystem         = brackets.getModule(\"filesystem/FileSystem\"),\n        IndexingWorker     = brackets.getModule(\"worker/IndexingWorker\");\n\n    IndexingWorker.loadScriptInWorker(`${module.uri}/../worker/jshint-helper.js`);\n\n    let prefs = PreferencesManager.getExtensionPrefs(\"jshint\"),\n        projectSpecificOptions = null,\n        jsHintConfigFileErrorMessage = null;\n\n    // We don't provide default options in the preferences as preferences will try to mixin default options with\n    // user defined options leading to unexpected results. Either we take user defined options or default, no mixin.\n    let DEFAULT_OPTIONS = {\n        \"esversion\": 11,\n        \"browser\": true,\n        \"node\": true,\n        \"jquery\": true,\n        \"rhino\": false, // false here means read-only global property\n        \"jasmine\": true,\n        \"devel\": false\n    };\n\n    prefs.definePreference(\"options\", \"object\", {}, {\n        description: Strings.DESCRIPTION_JSHINT_OPTIONS\n    }).on(\"change\", function () {\n        CodeInspection.requestRun(Strings.JSHINT_NAME);\n    });\n\n    function _getLinterConfigFileErrorMsg() {\n        return [{\n            // JSLint returns 1-based line/col numbers\n            pos: { line: -1, ch: 0 },\n            message: jsHintConfigFileErrorMessage,\n            type: CodeInspection.Type.ERROR\n        }];\n    }\n\n    /**\n     * Run JSLint on the current document. Reports results to the main UI. Displays\n     * a gold star when no errors are found.\n     */\n    async function lintOneFile(text, _fullPath) {\n        return new Promise((resolve)=>{\n            if(jsHintConfigFileErrorMessage){\n                resolve({ errors: _getLinterConfigFileErrorMsg() });\n                return;\n            }\n            // If a line contains only whitespace (here spaces or tabs), remove the whitespace\n            text = text.replace(/^[ \\t]+$/gm, \"\");\n\n            let userPrefOptions = _.isEmpty(prefs.get(\"options\")) ? DEFAULT_OPTIONS : prefs.get(\"options\");\n\n            let options = projectSpecificOptions || userPrefOptions;\n\n            IndexingWorker.execPeer(\"jsHint\", {\n                text,\n                options\n            }).then(jsHintErrors =>{\n                if (!jsHintErrors.lintResult && jsHintErrors.errors.length) {\n                    let errors = jsHintErrors.errors;\n\n                    errors = errors.map(function (lintError) {\n                        return {\n                            // JSLint returns 1-based line/col numbers\n                            pos: { line: lintError.line - 1, ch: lintError.character },\n                            message: `${lintError.reason} jshint (${lintError.code})`,\n                            type: CodeInspection.Type.ERROR\n                        };\n                    });\n\n                    resolve({ errors: errors });\n                }\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * @private\n     * @type {string}\n     */\n    const CONFIG_FILE_NAME = \".jshintrc\";\n\n    /**\n     * Removes JavaScript comments from a string by replacing\n     * everything between block comments and everything after\n     * single-line comments in a non-greedy way.\n     *\n     * English version of the regex:\n     *   match '/*'\n     *   then match zero or more instances of any character (incl. \\n)\n     *   except for instances of '* /' (without a space, obv.)\n     *   then match '* /' (again, without a space)\n     *\n     * @param {string} str a string with potential JavaScript comments.\n     * @returns {string} a string without JavaScript comments.\n     */\n    function removeComments(str) {\n        str = str || \"\";\n\n        str = str.replace(/\\/\\*(?:(?!\\*\\/)[\\s\\S])*\\*\\//g, \"\");\n        str = str.replace(/\\/\\/[^\\n\\r]*/g, \"\"); // Everything after '//'\n\n        return str;\n    }\n\n    /**\n     * Reads configuration file in the specified directory. Returns a promise for configuration object.\n     *\n     * @param {string} dir absolute path to a directory.\n     * @param {string} configFileName name of the configuration file (optional)\n     *\n     * @returns {Promise} a promise to return configuration object.\n     */\n    function _readConfig(dir, configFileName) {\n        return new Promise((resolve, reject)=>{\n            configFileName = configFileName || CONFIG_FILE_NAME;\n            let file = FileSystem.getFileForPath(dir + configFileName);\n            file.read(function (err, content) {\n                if (err) {\n                    resolve(null); // no config file is a valid case. we just resolve with null\n                    return;\n                }\n                let config;\n                try {\n                    config = JSON.parse(removeComments(content));\n                    console.log(\"JSHint: loaded config file for project \" + file.fullPath);\n                } catch (e) {\n                    console.log(\"JSHint: error parsing \" + file.fullPath);\n                    // just log and return as this is an expected failure for us while the user edits code\n                    reject(\"Error parsing JSHint config file:    \"\n                        + ProjectManager.getProjectRelativePath(file.fullPath));\n                    return;\n                }\n                // Load any base config defined by \"extends\".\n                // The same functionality as in\n                // jslints -> cli.js -> loadConfig -> if (config['extends'])...\n                // https://jshint.com/docs/cli/ > Special Options\n                if (config.extends) {\n                    let extendFile = FileSystem.getFileForPath(dir + config.extends);\n                    _readConfig(extendFile.parentPath, extendFile.name).then(baseConfigResult=>{\n                        delete config.extends;\n                        let mergedConfig = $.extend({}, baseConfigResult, config);\n                        if (config.globals) {\n                            delete config.globals;\n                        }\n                        resolve(mergedConfig);\n                    }).catch(()=>{\n                        reject(\"Error parsing JSHint config file:    \"\n                            + ProjectManager.getProjectRelativePath(extendFile.name));\n                    });\n                }\n                else {\n                    resolve(config);\n                }\n            });\n        });\n    }\n\n    function _reloadOptions() {\n        projectSpecificOptions = null;\n        _readConfig(ProjectManager.getProjectRoot().fullPath, CONFIG_FILE_NAME).then((config)=>{\n            projectSpecificOptions = config;\n            CodeInspection.requestRun(Strings.JSHINT_NAME);\n            jsHintConfigFileErrorMessage = null;\n        }).catch((err)=>{\n            jsHintConfigFileErrorMessage = err;\n            CodeInspection.requestRun(Strings.JSHINT_NAME);\n        });\n    }\n\n    function _isFileInArray(fileToCheck, fileArray){\n        if(!fileArray){\n            return false;\n        }\n        for(let file of fileArray){\n            if(file.fullPath === fileToCheck.fullPath){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _projectFileChanged(_evt, entry, added, removed) {\n        let configFilePath = FileSystem.getFileForPath(ProjectManager.getProjectRoot().fullPath + CONFIG_FILE_NAME);\n        if(entry.fullPath === configFilePath.fullPath\n            || _isFileInArray(configFilePath, added)){\n            _reloadOptions();\n        } else if(_isFileInArray(configFilePath, removed)){\n            projectSpecificOptions = null;\n        }\n    }\n\n    AppInit.appReady(function () {\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED, _projectFileChanged);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _reloadOptions);\n        _reloadOptions();\n    });\n\n    // Register for JS files\n    CodeInspection.register(\"javascript\", {\n        name: Strings.JSHINT_NAME,\n        scanFileAsync: lintOneFile\n    });\n});\n"],"file":"main.js"}