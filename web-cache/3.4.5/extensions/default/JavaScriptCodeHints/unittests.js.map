{"version":3,"sources":["extensions/default/JavaScriptCodeHints/unittests.js"],"names":["define","require","exports","module","Commands","brackets","getModule","CommandManager","MainViewManager","DocumentManager","EditorManager","FileSystem","FileUtils","PreferencesManager","SpecRunnerUtils","JSCodeHints","Preferences","Session","ScopeManager","HintUtils","HintUtils2","ParameterHintProvider","phProvider","JSParameterHintsProvider","extensionPath","getTestPath","testFolder","testPath","testHtmlPath","testDoc","testEditor","preTestText","register","FILE_OPEN","fileInfo","getDocumentForPath","fullPath","done","doc","_edit","ACTIVE_PANE","describe","fixPos","pos","sticky","expectHints","provider","key","undefined","expect","hasHints","toBe","getHints","expectNoHints","_indexOf","hintList","hint","index","counter","length","data","value","async","_waitForHints","hintObj","callback","complete","hasOwnProperty","hints","obj","awaitsFor","expectCloseHints","newPos","expectedValue","setCursorPos","shouldCloseHints","getSession","hintsAbsent","absentHints","toBeTruthy","forEach","absentHint","hintsPresent","expectedHints","expectedHint","not","hintsPresentOrdered","prevIndex","currIndex","toBeGreaterThan","hintsPresentExact","findHint","hintSelection","i","l","current","selectHint","insertHint","_waitForJump","jumpPromise","cursor","activeEditor","getActiveEditor","getCursorPos","editorJumped","expectedLocation","handleJumpToDefinition","newCursor","line","ch","file","document","name","expectNoParameterHint","requestStatus","request","_getParameterHint","fail","status","awaitsForFail","expectParameterHintClosed","isHintDisplayed","expectParameterHint","expectedParams","expectedParameter","requestHints","expectHint","params","parameters","n","currentIndex","type","isOptional","toBeFalsy","result","awaitsForDone","setupTest","path","primePump","createMockEditorForDocument","handleProjectOpen","awaits","session","handleEditorChange","getText","_readyPromise","_maybeReset","tearDownTest","setText","_closeAll","ALL_PANES","destroyMockEditor","beforeAll","_configureJSCodeHints","noReset","afterAll","beforeEach","afterEach","it","jsHintProvider","start","end","getRange","toEql","before","middle","replaceRange","getLine","endplus","cursor1","cursor2","testPos","func","param","variable","endPos","noHintsOnDot","get","set","testPosStart","testPosEnd"],"mappings":"AA2BAA,OAAO,SAAUC,QAASC,QAASC,QAE/B,IAAIC,SAAuBC,SAASC,UAAU,oBAC1CC,eAAuBF,SAASC,UAAU,0BAC1CE,gBAAuBH,SAASC,UAAU,wBAC1CG,gBAAuBJ,SAASC,UAAU,4BAC1CI,cAAuBL,SAASC,UAAU,wBAC1CK,WAAuBN,SAASC,UAAU,yBAC1CM,UAAuBP,SAASC,UAAU,kBAC1CO,mBAAuBR,SAASC,UAAU,kCAC1CQ,gBAAuBT,SAASC,UAAU,wBAC1CS,YAAuBd,QAAQ,QAC/Be,YAAuBX,SAASC,UAAU,uBAC1CW,QAAuBZ,SAASC,UAAU,mBAC1CY,aAAuBb,SAASC,UAAU,wBAC1Ca,UAAuBd,SAASC,UAAU,qBAC1Cc,WAAuBnB,QAAQ,cAC/BoB,sBACAC,WAAwB,IAAID,EADJpB,QAAQ,0BAA0BsB,0BAG1DC,cAAkBV,gBAAgBW,YAAY,yCAC9CC,WAAkBF,cAAgB,oBAClCG,SAAkBH,cAAgB,4BAClCI,aAAkBJ,cAAgB,8BAClCK,QAAkB,KAClBC,WACAC,YAEJxB,eAAeyB,SAAS,iBAAkB5B,SAAS6B,UAAW,SAAUC,UAEpE,OAAOzB,gBAAgB0B,mBAAmBD,SAASE,UAAUC,KAAK,SAAUC,KACxE9B,gBAAgB+B,MAAM/B,gBAAgBgC,YAAaF,SAI3DG,SAAS,wCAAyC,WAG9C,SAASC,OAAOC,KAIZ,MAHM,WAAYA,MACdA,IAAIC,OAAS,MAEVD,IAaX,SAASE,YAAYC,SAAUC,KAM3B,YALYC,IAARD,MACAA,IAAM,MAGVE,OAAOH,SAASI,SAASpB,WAAYiB,MAAMI,MAAK,GACzCL,SAASM,SAAS,MAW7B,SAASC,cAAcP,SAAUC,UAEjBC,IAARD,MACAA,IAAM,MAGVE,OAAOH,SAASI,SAASpB,WAAYiB,MAAMI,MAAK,GAWpD,SAASG,SAASC,SAAUC,MAIxB,IAHA,IAAIC,OAAS,EACTC,QAAU,EAEAA,QAAUH,SAASI,OAAQD,UACrC,GAAIH,SAASG,SAASE,KAAK,SAASC,QAAUL,KAAM,CAChDC,MAAQC,QACR,MAGR,OAAOD,MAYXK,eAAeC,cAAcC,QAASC,UAClC,IAAIC,UAAW,EACXX,SAAW,KAEXS,QAAQG,eAAe,UACvBD,UAAW,EACXX,SAAWS,QAAQI,OAEnBJ,QAAQ3B,KAAK,SAAUgC,KACnBH,UAAW,EACXX,SAAWc,IAAID,cAIjBE,UAAU,WACZ,OAAOJ,UACR,iCAAkC,KAErCD,SAASV,UAcbO,eAAeS,iBAAiBzB,SAAUkB,QAASQ,OAAQC,qBACjDV,cAAcC,QAAS,SAAUT,UACnCzB,WAAW4C,aAAaF,QACxBvB,OAAOH,SAAS6B,iBAAiB5D,YAAY6D,eAAezB,KAAKsB,iBAazEX,eAAee,YAAYb,QAASc,mBAC1Bf,cAAcC,QAAS,SAAUT,UACnCN,OAAOM,UAAUwB,aACjBD,YAAYE,QAAQ,SAAUC,YAC1BhC,OAAOK,SAASC,SAAU0B,aAAa9B,MAAM,OAczDW,eAAeoB,aAAalB,QAASmB,qBAC3BpB,cAAcC,QAAS,SAAUT,UACnCN,OAAOM,UAAUwB,aACjBI,cAAcH,QAAQ,SAAUI,cAC5BnC,OAAOK,SAASC,SAAU6B,eAAeC,IAAIlC,MAAM,OAc/DW,eAAewB,oBAAoBtB,QAASmB,eACxC,IAAII,WAAa,EACbC,gBAEEzB,cAAcC,QAAS,SAAUT,UACnCN,OAAOM,UAAUwB,aACjBI,cAAcH,QAAQ,SAAUI,cAC5BI,UAAYlC,SAASC,SAAU6B,cAC/BnC,OAAOuC,WAAWC,gBAAgBF,WAClCA,UAAYC,cAcxB1B,eAAe4B,kBAAkB1B,QAASmB,qBAChCpB,cAAcC,QAAS,SAAUT,UACnCN,OAAOM,UAAUwB,aACjB9B,OAAOM,SAASI,QAAQR,KAAKgC,cAAcxB,QAC3CwB,cAAcH,QAAQ,SAAUI,aAAc3B,OAC1CR,OAAOM,SAASE,OAAOG,KAAK,SAASC,OAAOV,KAAKiC,kBAY7D,SAASO,SAASpC,SAAUqC,eACxB,IAAIC,EAAGC,EACP,IAAKD,EAAI,EAAGC,EAAIvC,SAASI,OAAQkC,EAAIC,IAAKD,EAAG,CACzC,IAAIE,QACJ,GAAIH,gBADUrC,SAASsC,GAAGjC,KAAK,SACDC,MAC1B,OAAOgC,EAGf,OAAQ,EAYZ/B,eAAekC,WAAWlD,SAAUkB,QAAS4B,eACzC/C,YAAYC,gBACNiB,cAAcC,QAAS,SAAUT,UACnCN,OAAOM,UAAUwB,aACjB,IAAItB,MAAQkC,SAASpC,SAAUqC,eAC/B3C,OAAOM,SAASE,OAAOG,KAAK,UAAUmB,aACtC9B,OAAOH,SAASmD,WAAW1C,SAASE,SAASN,MAAK,KAW1DW,eAAeoC,aAAaC,YAAalC,UACrC,IAAImC,OAAS,KACTlC,UAAW,EAEfiC,YAAY9D,KAAK,WACb6B,UAAW,UAGTI,UAAU,WACZ,IAAI+B,aAAe3F,cAAc4F,kBAEjC,OADAF,OAASC,aAAaE,eACfrC,UACR,8BAA+B,KAElCD,SAASmC,QAcbtC,eAAe0C,aAAaC,kBACxB,IAAIN,YAAcpF,YAAY2F,+BAGxBR,aAAaC,YAAa,SAAUQ,WAGtC,GAFA1D,OAAO0D,UAAUC,MAAMzD,KAAKsD,iBAAiBG,MAC7C3D,OAAO0D,UAAUE,IAAI1D,KAAKsD,iBAAiBI,IACvCJ,iBAAiBK,KAAM,CACvB,IAAIT,aAAe3F,cAAc4F,kBACjCrD,OAAOoD,aAAaU,SAASD,KAAKE,MAAM7D,KAAKsD,iBAAiBK,SAS1EhD,eAAemD,wBACX,IAAIC,mBAAgBlE,EAChBmE,QAAU7F,WAAW8F,oBACzBD,QAAQE,KAAK,SAAUC,QACnBJ,cAAgBI,eAGdC,cAAcJ,QAAS,kBAE7BlE,OAAOiE,eAAe/D,KAAK,MAM/B,SAASqE,4BACLvE,OAAO3B,WAAWmG,mBAAmBtE,MAAK,GAY9CW,eAAe4D,oBAAoBC,eAAgBC,mBAC/C,IAAIC,kBAAe7E,EACfmE,QAAU,KAEd,SAASW,WAAWtE,MAChB,IAAIuE,OAASvE,KAAKwE,WACdC,EAAIF,OAAOpE,OACXkC,EAMJ,IAHA5C,OAAO8E,OAAOpE,QAAQR,KAAKwE,eAAehE,QAC1CV,OAAOO,KAAK0E,cAAc/E,KAAKyE,mBAE1B/B,EAAI,EAAGA,EAAIoC,EAAGpC,IAEf5C,OAAO8E,OAAOlC,GAAGmB,MAAM7D,KAAKwE,eAAe9B,GAAGmB,MAC9C/D,OAAO8E,OAAOlC,GAAGsC,MAAMhF,KAAKwE,eAAe9B,GAAGsC,MAC1CJ,OAAOlC,GAAGuC,WACVnF,OAAO0E,eAAe9B,GAAGuC,YAAYrD,aAErC9B,OAAO0E,eAAe9B,GAAGuC,YAAYC,YAMjDlB,QAAU7F,WAAW8F,oBAEE,OAAnBO,gBACAR,QAAQE,KAAK,SAAUiB,QACnBT,aAAeS,eAGbf,cAAcJ,QAAS,oBAE7BA,QAAQ9E,KAAK,SAAUiG,QACnBT,aAAeS,eAGbC,cAAcpB,QAAS,mBAGV,OAAnBQ,eACA1E,OAAO4E,cAAc1E,KAAK,MAE1B2E,WAAWD,cAInB/D,eAAe0E,UAAUC,KAAMC,WAC3BjI,gBAAgB0B,mBAAmBsG,MAAMpG,KAAK,SAAUC,KACpDT,QAAUS,YAGRgC,UAAU,WACZ,OAAmB,OAAZzC,SACR,+BAAgC,KAGnCC,WAAahB,gBAAgB6H,4BAA4B9G,SACzDX,aAAa0H,kBAAkBlH,kBACzBmH,OAAO,KACb,IAAIC,QAAU,IAAI7H,QAAQa,YAC1BZ,aAAa6H,mBAAmBD,QAAShH,WAAWiF,SAAU,MAC9DhF,YAAcF,QAAQmH,gBAChBT,cAAcrH,aAAa+H,uBAC3BV,cAAcrH,aAAagI,YAAYnI,YAAY6D,aAAc/C,SAAS,IAGpF,SAASsH,eAGLtH,QAAQuH,QAAQrH,aAIhBvB,gBAAgB6I,UAAU7I,gBAAgB8I,WAC1CxI,gBAAgByI,kBAAkB1H,SAClCC,WAAa,KACbD,QAAU,KAGdY,SAAS,gCAAiC,WACtC+G,UAAU,WACNnJ,SAASoJ,sBAAsB,CAC3BC,SAAS,MAIjBC,SAAS,WACLtJ,SAASoJ,sBAAsB,CAC3BC,SAAS,MAIjBE,WAAW9F,uBACD0E,UAAU7G,UAAU,KAG9BkI,UAAU,WACNV,iBAGJW,GAAG,0CAA2C,WAC1ChI,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,KACxCxD,cAActC,YAAYgJ,iBAC3B,KAEHD,GAAG,kEAAmEhG,iBAClEhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,KAAM,KAAM,OAAQ,SAGrD8F,GAAG,+BAAgChG,iBAC/BhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,KACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,KAAM,KAAM,aACnCa,YAAYb,QAAS,CAAC,WAGhC8F,GAAG,uBAAwBhG,iBACvBhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,QAAS,OAAQ,YAGlD8F,GAAG,6EAA8EhG,iBAC7EhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChClF,YAAYb,QAAS,CAAC,gBAAiB,UAAW,cAG5D8F,GAAG,oFAAqFhG,iBACpFhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChClF,YAAYb,QAAS,CAAC,cAAe,yBAG/C8F,GAAG,oFAAqFhG,iBACpFhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChClF,YAAYb,QAAS,CAAC,QAAS,UAAW,cAGpD8F,GAAG,gCAAiChG,iBAChChC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,OAAQ,YAAa,OAAQ,YAG9D8F,GAAG,6EAA8EhG,iBAC7EhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChClF,YAAYb,QAAS,CAAC,UAAW,cAG3C8F,GAAG,+EAAgFhG,iBAC/EhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChClF,YAAYb,QAAS,CAAC,KAAM,SAGtC8F,GAAG,kDAAmDhG,iBAClDhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChClF,YAAYb,QAAS,CAAC,QAAS,QAAS,YAGlD8F,GAAG,6EAA8EhG,iBAC7EhC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,IACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,KAAM,KAAM,OAAQ,UAAW,UAAW,OAAQ,KAAM,KAAM,SAG/F8F,GAAG,mDAAoDhG,iBACnDhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChClF,YAAYb,QAAS,CAAC,yBAGhC8F,GAAG,iEAAkEhG,iBACjEhC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,KACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,YAGjC8F,GAAG,yDAA0DhG,iBACzDhC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,IACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,KAAM,SAGvC8F,GAAG,4EAA6EhG,iBAC5EhC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,KACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChClF,YAAYb,QAAS,CAAC,KAAM,KAAM,OAAQ,UAAW,UAAW,KAAM,KAAM,OAAQ,UAAW,cAGzG8F,GAAG,+CAAgDhG,iBAC/ChC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,KACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChClF,YAAYb,QAAS,CAAC,OAAQ,WAAY,UAGpD8F,GAAG,yCAA0ChG,iBACzChC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,KACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChCxF,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,KAAM,KAG9BiD,GAAG,+DAAgEhG,iBAC/DhC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,KACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChCxF,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,KAAM,SACpBtC,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,KAAM,SACpBtC,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,KAAM,SACpBtC,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,KAAM,SACpBtC,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,KAAM,SACpBtC,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,KAAM,KAG9BiD,GAAG,wEAAyEhG,iBACxEhC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,KACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChCxF,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,IAAK,SACnBtC,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,IAAK,SACnBtC,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,IAAK,KAG7BiD,GAAG,oEAAqEhG,iBACpEhC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,IACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,cACvBO,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,IAAK,SACnBtC,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,IAAK,SACnBtC,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,IAAK,SACnBtC,iBAAiBxD,YAAYgJ,eAAgB/F,QAC/C,CAAE4C,KAAM,GAAIC,GAAI,IAAK,KAG7BiD,GAAG,+CAAgDhG,iBAC/ChC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvCxD,cAActC,YAAYgJ,eAAgB,OAG9CD,GAAG,6DAA8DhG,iBAC7DhC,WAAW4C,aAAa,CAAEkC,KAAM,EAAGC,GAAI,IACvC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,eAAgB,YAChD7E,aAAalB,QAAS,CAAC,KAAM,KAAM,OAAQ,SAGrD8F,GAAG,0DAA2DhG,iBAC1DhC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,KACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,eAAgB,WAChD7E,aAAalB,QAAS,CAAC,KAAM,cAGvC8F,GAAG,+EAAgFhG,iBAC/EhC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,IACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChCzE,oBAAoBtB,QAAS,CAAC,KAAM,aACpCsB,oBAAoBtB,QAAS,CAAC,KAAM,SAG9C8F,GAAG,8FAA+FhG,iBAC9FhC,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,IACxC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChCzE,oBAAoBtB,QAAS,CAAC,KAAM,aACpCsB,oBAAoBtB,QAAS,CAAC,KAAM,aACpCsB,oBAAoBtB,QAAS,CAAC,KAAM,aACpCsB,oBAAoBtB,QAAS,CAAC,OAAQ,WAGhD8F,GAAG,kDAAmDhG,iBAClD,IAAIkG,MAAQ,CAAEpD,KAAM,EAAGC,GAAI,GACvBoD,IAAQ,CAAErD,KAAM,EAAGC,GAAI,GAE3B/E,WAAW4C,aAAasF,OACxB,IAAIhG,QAAUnB,YAAY9B,YAAYgJ,sBAChC/D,WAAWjF,YAAYgJ,eAAgB/F,QAAS,MAEtDf,OAAOpB,QAAQqI,SAASF,MAAOC,MAAME,MAAM,QAG/CL,GAAG,wDAAyDhG,iBACxD,IAAIkG,MAAU,CAAEpD,KAAM,EAAGC,GAAI,IACzBuD,OAAU,CAAExD,KAAM,EAAGC,GAAI,GACzBoD,IAAU,CAAErD,KAAM,EAAGC,GAAI,IAE7B/E,WAAW4C,aAAasF,OACxB,IAAIhG,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,KAAM,KAAM,aACnCgC,WAAWjF,YAAYgJ,eAAgB/F,QAAS,MAEtDf,OAAOpB,QAAQqI,SAASE,OAAQH,MAAME,MAAM,QAGhDL,GAAG,qDAAsDhG,iBACrD,IAAIkG,MAAU,CAAEpD,KAAM,EAAGC,GAAI,GACzBwD,OAAU,CAAEzD,KAAM,EAAGC,GAAI,GACzBoD,IAAU,CAAErD,KAAM,EAAGC,GAAI,GAE7BhF,QAAQyI,aAAa,MAAON,MAAOA,OACnClI,WAAW4C,aAAa2F,QACxB,IAAIrG,QAAUnB,YAAY9B,YAAYgJ,sBAChC/D,WAAWjF,YAAYgJ,eAAgB/F,QAAS,SAEtDf,OAAOP,OAAOZ,WAAWyE,iBAAiB4D,MAAMzH,OAAOuH,MACvDhH,OAAOpB,QAAQqI,SAASF,MAAOC,MAAME,MAAM,YAC3ClH,OAAOpB,QAAQ0I,QAAQN,IAAIrD,MAAMjD,QAAQwG,MAAM,KAGnDL,GAAG,mEAAoEhG,iBACnE,IAAIkG,MAAU,CAAEpD,KAAM,EAAGC,GAAI,GACzBwD,OAAU,CAAEzD,KAAM,EAAGC,GAAI,GACzBoD,IAAU,CAAErD,KAAM,EAAGC,GAAI,GACzB2D,QAAU,CAAE5D,KAAM,EAAGC,GAAI,IAE7BhF,QAAQyI,aAAa,UAAWN,MAAOA,OACvClI,WAAW4C,aAAa2F,QACxB,IAAIrG,QAAUnB,YAAY9B,YAAYgJ,sBAChC/D,WAAWjF,YAAYgJ,eAAgB/F,QAAS,SAEtDf,OAAOP,OAAOZ,WAAWyE,iBAAiB4D,MAAMzH,OAAOuH,MACvDhH,OAAOpB,QAAQqI,SAASF,MAAOQ,UAAUL,MAAM,gBAC/ClH,OAAOpB,QAAQ0I,QAAQN,IAAIrD,MAAMjD,QAAQwG,MAAM,MAGnDL,GAAG,0EAA2EhG,iBAC1E,IAAIkG,MAAU,CAAEpD,KAAM,EAAGC,GAAI,GACzBwD,OAAU,CAAEzD,KAAM,EAAGC,GAAI,GACzBoD,IAAU,CAAErD,KAAM,EAAGC,GAAI,GAE7BhF,QAAQyI,aAAa,SAAUN,MAAOA,OACtClI,WAAW4C,aAAa2F,QACxB,IAAIrG,QAAUnB,YAAY9B,YAAYgJ,sBAChC/D,WAAWjF,YAAYgJ,eAAgB/F,QAAS,SACtDf,OAAOP,OAAOZ,WAAWyE,iBAAiB4D,MAAMzH,OAAOuH,MACvDhH,OAAOpB,QAAQqI,SAASF,MAAOC,MAAME,MAAM,YAC3ClH,OAAOpB,QAAQ0I,QAAQN,IAAIrD,MAAMjD,QAAQwG,MAAM,KAGnDL,GAAG,kEAAmEhG,iBAClE,IAAIkG,MAAU,CAAEpD,KAAM,EAAGC,GAAI,GACzBwD,OAAU,CAAEzD,KAAM,EAAGC,GAAI,GACzBoD,IAAU,CAAErD,KAAM,EAAGC,GAAI,GACzB2D,QAAU,CAAE5D,KAAM,EAAGC,GAAI,IAE7BhF,QAAQyI,aAAa,WAAYN,MAAOA,OACxClI,WAAW4C,aAAa2F,QACxB,IAAIrG,QAAUnB,YAAY9B,YAAYgJ,sBAChC/D,WAAWjF,YAAYgJ,eAAgB/F,QAAS,SACtDf,OAAOP,OAAOZ,WAAWyE,iBAAiB4D,MAAMzH,OAAOuH,MACvDhH,OAAOpB,QAAQqI,SAASF,MAAOQ,UAAUL,MAAM,cAC/ClH,OAAOpB,QAAQ0I,QAAQN,IAAIrD,MAAMjD,QAAQwG,MAAM,MAGnDL,GAAG,6DAA8DhG,iBAC7D,IAAIkG,MAAU,CAAEpD,KAAM,EAAGC,GAAI,GACzBwD,OAAU,CAAEzD,KAAM,EAAGC,GAAI,GACzBoD,IAAU,CAAErD,KAAM,EAAGC,GAAI,GACzB2D,QAAU,CAAE5D,KAAM,EAAGC,GAAI,IAE7BhF,QAAQyI,aAAa,YAAaN,MAAOA,OACzClI,WAAW4C,aAAa2F,QACxB,IAAIrG,QAAUnB,YAAY9B,YAAYgJ,sBAChC/D,WAAWjF,YAAYgJ,eAAgB/F,QAAS,SAEtDf,OAAOP,OAAOZ,WAAWyE,iBAAiB4D,MAAMzH,OAAOuH,MACvDhH,OAAOpB,QAAQqI,SAASF,MAAOQ,UAAUL,MAAM,kBAC/ClH,OAAOpB,QAAQ0I,QAAQC,QAAQ5D,MAAMjD,QAAQwG,MAAM,MAGvDL,GAAG,uGAAwGhG,iBACvG,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GACxBwD,OAAS,CAAEzD,KAAM,GAAIC,GAAI,GAG7BhF,QAAQyI,aAAa,SAAUN,OAC/BlI,WAAW4C,aAAa2F,QACxB,IAAIrG,QAAUnB,YAAY9B,YAAYgJ,sBAChCzE,oBAAoBtB,QAAS,CAAC,SAAU,aAAc,SAAU,cAG1E8F,GAAG,4BAA6BhG,iBAC5B,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GACxBwD,OAAS,CAAEzD,KAAM,GAAIC,GAAI,GAE7BhF,QAAQyI,aAAa,QAASN,MAAOA,OACrClI,WAAW4C,aAAa2F,cAClB3C,oBAAoB,CAAC,CAACV,KAAM,IAAKmB,KAAM,UACzC,CAACnB,KAAM,IAAKmB,KAAM,WAAY,KAGtC2B,GAAG,8CAA+ChG,iBAC9C,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,OACxB,IAAIhG,QAAUnB,YAAY9B,YAAYgJ,sBAChCrE,kBAAkB1B,QAAS,CAAC,IAAK,IAAK,IAAK,QAGrD8F,GAAG,2CAA4ChG,iBAC3C,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,OACxB,IAAIhG,QAAUnB,YAAY9B,YAAYgJ,sBAChCrE,kBAAkB1B,QAAS,CAAC,MAAO,YAG7C8F,GAAG,sCAAuChG,iBACtC,IAAI2G,QAAU,CAAE7D,KAAM,GAAIC,GAAI,GAC1B6D,QAAU,CAAE9D,KAAM,GAAIC,GAAI,GAE9BhF,QAAQyI,aAAa,SAAUG,QAASA,SACxC3I,WAAW4C,aAAagG,SACxB,IAAI1G,QAAUnB,YAAY9B,YAAYgJ,sBAChCrE,kBAAkB1B,QAAS,CAAC,UAAW,cAGjD8F,GAAG,8CAA+ChG,iBAC9C,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5BhF,QAAQyI,aAAa,wBAAyBN,MAAOA,OACrDlI,WAAW4C,aAAasF,OACxB,IAAIhG,QAAUnB,YAAY9B,YAAYgJ,sBAChCzE,oBAAoBtB,QAAS,CAAC,SAAU,aAAc,SAAU,cAG1E8F,GAAG,8CAA+ChG,iBAC9C,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5BhF,QAAQyI,aAAa,wBAAyBN,MAAOA,OACrDlI,WAAW4C,aAAasF,OACxB,IAAIhG,QAAUnB,YAAY9B,YAAYgJ,sBAChCzE,oBAAoBtB,QAAS,CAAC,gBAAiB,UAAW,eAGpE8F,GAAG,6CAA8ChG,iBAC7C,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GACxB8D,QAAU,CAAE/D,KAAM,GAAIC,GAAI,IAC9BhF,QAAQyI,aAAa,6HAAmIN,MAAOA,OAC/JlI,WAAW4C,aAAaiG,SACxB,IAAI3G,QAAUnB,YAAY9B,YAAYgJ,sBAChCzE,oBAAoBtB,QAAS,CAAC,QAAS,WAGjD8F,GAAG,+CAAgDhG,iBAC/C,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GAE5B/E,WAAW4C,aAAasF,OACxB,IAAIhG,QAAUnB,YAAY9B,YAAYgJ,sBAChCrE,kBAAkB1B,QAAS,CAAC,WAGtC8F,GAAG,oDAAqDhG,iBACpD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAC5B/E,WAAW4C,aAAasF,aAClBtC,oBAAoB,CAAC,CAACV,KAAM,KAAMmB,KAAM,UAAW,CAACnB,KAAM,KAAMmB,KAAM,WAAY,KAG5F2B,GAAG,kDAAmDhG,iBAClD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAC5B/E,WAAW4C,aAAasF,OACxB,IAAIhG,QAAUnB,YAAY9B,YAAYgJ,sBAChCrE,kBAAkB1B,QAAS,CAAC,YAAa,eAAgB,UAAW,OAAQ,mBAGtF8F,GAAG,mDAAoDhG,iBACnD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GACxB8D,QAAU,CAAE/D,KAAM,GAAIC,GAAI,IAE9BhF,QAAQyI,aAAa,2BAA4BN,OACjDlI,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,YAAamB,KAAM,WAAY,KAGrE2B,GAAG,kCAAmChG,iBAClC,IAAI6G,QAAU,CAAE/D,KAAM,GAAIC,GAAI,IAE9B/E,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,MAAOmB,KAAM,WAAY,KAG/D2B,GAAG,wDAAyDhG,iBACxD,IAAI6G,QAAU,CAAE/D,KAAM,GAAIC,GAAI,IAE9B/E,WAAW4C,aAAaiG,SACxB9H,YAAY9B,YAAYgJ,sBAClBrC,oBAAoB,GAAI,KAKlCoC,GAAG,oFAAqFhG,iBACpF,IAAI6G,QAAU,CAAE/D,KAAM,IAAKC,GAAI,IAE/B/E,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,IAAKmB,KAAM,oCAAqC,KAGtF2B,GAAG,yCAA0ChG,iBACzC,IAAI6G,QAAU,CAAE/D,KAAM,IAAKC,GAAI,GAE/B/E,WAAW4C,aAAaiG,SACxB,IAAI3G,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,SAAU,aAG3C8F,GAAG,iCAAkChG,iBACjC,IAAIkG,MAAQ,CAAEpD,KAAM,IAAKC,GAAI,GACzB8D,QAAU,CAAE/D,KAAM,IAAKC,GAAI,IAE/BhF,QAAQyI,aAAa,iBAAkBN,OACvClI,WAAW4C,aAAaiG,eAClBjD,oBAAoB,GAAI,KAGlCoC,GAAG,iFAAkFhG,iBACjF,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GACxBwD,OAAS,CAAEzD,KAAM,GAAIC,GAAI,GACzBoD,IAAM,CAAErD,KAAM,GAAIC,GAAI,IAE1BhF,QAAQyI,aAAa,QAASN,MAAOA,OACrClI,WAAW4C,aAAa2F,QACxB,IAAIrG,QAAUnB,YAAY9B,YAAYgJ,sBAChC/D,WAAWjF,YAAYgJ,eAAgB/F,QAAS,UACtDf,OAAOP,OAAOZ,WAAWyE,iBAAiB4D,MAAMzH,OAAOuH,MACvDhH,OAAOpB,QAAQqI,SAASF,MAAOC,MAAME,MAAM,iBAC3ClH,OAAOpB,QAAQ0I,QAAQN,IAAIrD,MAAMjD,QAAQwG,MAAM,MAGnDL,GAAG,4FAA6FhG,iBAC5F,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GACxBwD,OAAS,CAAEzD,KAAM,GAAIC,GAAI,GACzBoD,IAAM,CAAErD,KAAM,GAAIC,GAAI,IAE1BhF,QAAQyI,aAAa,OAAQN,MAAOA,OACpClI,WAAW4C,aAAa2F,QACxB,IAAIrG,QAAUnB,YAAY9B,YAAYgJ,sBAChC/D,WAAWjF,YAAYgJ,eAAgB/F,QAAS,UACtDf,OAAOP,OAAOZ,WAAWyE,iBAAiB4D,MAAMzH,OAAOuH,MACvDhH,OAAOpB,QAAQqI,SAASF,MAAOC,MAAME,MAAM,iBAC3ClH,OAAOpB,QAAQ0I,QAAQN,IAAIrD,MAAMjD,QAAQwG,MAAM,MAGnDL,GAAG,4EAA6EhG,iBAC5E,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GACxBwD,OAAS,CAAEzD,KAAM,GAAIC,GAAI,GACzBoD,IAAM,CAAErD,KAAM,GAAIC,GAAI,GAE1BhF,QAAQyI,aAAa,QAASN,MAAOA,OACrClI,WAAW4C,aAAa2F,QACxB,IAAIrG,QAAUnB,YAAY9B,YAAYgJ,sBAChC/D,WAAWjF,YAAYgJ,eAAgB/F,QAAS,OACtDf,OAAOP,OAAOZ,WAAWyE,iBAAiB4D,MAAMzH,OAAOuH,MACvDhH,OAAOpB,QAAQqI,SAASF,MAAOC,MAAME,MAAM,WAC3ClH,OAAOpB,QAAQ0I,QAAQN,IAAIrD,MAAMjD,QAAQwG,MAAM,KAGnDL,GAAG,0BAA2BhG,iBAC1B,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,EAAGC,GAAI,OAGrCiD,GAAG,qBAAsBhG,iBACrB,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,EAAGC,GAAI,MAGrCiD,GAAG,4CAA6ChG,iBAC5C,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,GAAIC,GAAI,OAGtCiD,GAAG,mDAAoDhG,iBACnD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,EAAGC,GAAI,GAAIC,KAAM,kBAG/CgD,GAAG,qDAAsDhG,iBACrD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,GAAIC,GAAI,OAGtCiD,GAAG,gDAAiDhG,iBAChD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,GAAIC,GAAI,OAGtCiD,GAAG,sDAAuDhG,iBACtD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,GAAIC,GAAI,OAGtCiD,GAAG,8BAA+BhG,iBAC9B,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,GAAIC,GAAI,OAGtCiD,GAAG,0EAA2EhG,iBAC1E,IAAIkG,MAAQ,CAAEpD,KAAM,IAAKC,GAAI,IAE7B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,GAAIC,GAAI,GAAIC,KAAM,kBAGhDgD,GAAG,qDAAsDhG,iBACrD,IAAI8G,KAAO,CAAEhE,KAAM,EAAGC,GAAI,IACtBgE,MAAQ,CAAEjE,KAAM,EAAGC,GAAI,IACvBiE,SAAW,CAAElE,KAAM,GAAIC,GAAI,IAE/B/E,WAAW4C,aAAakG,YAClB3D,wBACNnF,WAAW4C,aAAamG,OACxBxH,cAActC,YAAYgJ,gBAC1BjI,WAAW4C,aAAaoG,UACxBzH,cAActC,YAAYgJ,kBAG9BD,GAAG,6CAA8ChG,iBAC7ChC,WAAW4C,aAAa,CAAEkC,KAAM,IAAKC,GAAI,IACzC,IAAI7C,QAAUnB,YAAY9B,YAAYgJ,sBAChCzE,oBAAoBtB,QAAS,CAAC,KAAM,KAAM,KAAM,OAAQ,UAGlE8F,GAAG,8CAA+ChG,iBAC9C,IAAIkG,MAAQ,CAAEpD,KAAM,IAAKC,GAAI,GACzBoD,IAAQ,CAAErD,KAAM,IAAKC,GAAI,GAE7BhF,QAAQyI,aAAa,QAASN,MAAOA,OACrClI,WAAW4C,aAAauF,KACxB,IAAIjG,QAAUnB,YAAY9B,YAAYgJ,sBAEhCzE,oBAAoBtB,QAAS,CAAC,QAAS,aAAc,aAG/D8F,GAAG,8EAA+EhG,iBAC9E,IAAIkG,MAAQ,CAAEpD,KAAM,IAAKC,GAAI,GACzBoD,IAAQ,CAAErD,KAAM,IAAKC,GAAI,GAE7BhF,QAAQyI,aAAa,UAAWN,MAAOA,OACvClI,WAAW4C,aAAauF,KACxB,IAAIjG,QAAUnB,YAAY9B,YAAYgJ,sBAEhCzE,oBAAoBtB,QAAS,CAAC,QAAS,eAGjD8F,GAAG,8DAA+DhG,iBAC9D,IAAIkG,MAAQ,CAAEpD,KAAM,IAAKC,GAAI,GACzBoD,IAAQ,CAAErD,KAAM,IAAKC,GAAI,IAE7BhF,QAAQyI,aAAa,gBAAiBN,MAAOA,OAC7ClI,WAAW4C,aAAauF,KACxB,IAAIjG,QAAUnB,YAAY9B,YAAYgJ,sBAEhCzE,oBAAoBtB,QAAS,CAAC,kBAGxC8F,GAAG,mEAAoEhG,iBACnE,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GACxB8D,QAAU,CAAE/D,KAAM,GAAIC,GAAI,IAC9BhF,QAAQyI,aAAa,8BAA+BN,OACpDlI,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,YAAamB,KAAM,WAAY,KAGrE2B,GAAG,wDAAyDhG,iBACxD,IAAI6G,QAAU,CAAE/D,KAAM,IAAKC,GAAI,IAE/B/E,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,IAAKmB,KAAM,mCAAoC,KAGrF2B,GAAG,qDAAsDhG,iBACrD,IAAI6G,QAAU,CAAE/D,KAAM,IAAKC,GAAI,IAE/B/E,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,IAAKmB,KAAM,SAAUC,YAAY,GAAO,CAACpB,KAAM,IAAKmB,KAAM,SAAUC,YAAY,IAAQ,KAG9H0B,GAAG,sDAAuDhG,iBACtD,IAAI6G,QAAU,CAAE/D,KAAM,IAAKC,GAAI,IAE/B/E,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,UAC9BmB,KAAM,kCACNC,YAAY,KAAS,KAG7B0B,GAAG,oDAAqDhG,iBACpD,IAAI6G,QAAU,CAAE/D,KAAM,IAAKC,GAAI,IAC/B/E,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,QAASmB,KAAM,oBAAqB,KAG1E2B,GAAG,2DAA4DhG,iBAC3D,IAAI6G,QAAU,CAAE/D,KAAM,IAAKC,GAAI,IAC/B/E,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,IAAKmB,KAAM,mBAAoB,KAGrE2B,GAAG,qDAAsDhG,iBACrD,IAAI6G,QAAU,CAAE/D,KAAM,IAAKC,GAAI,IAC3BkE,OAAU,CAAEnE,KAAM,IAAKC,GAAI,IAC/B/E,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,QAASmB,KAAM,oBAAqB,GAEtErG,WAAW4C,aAAaqG,cAClBvD,8BAGVsC,GAAG,yEAA0EhG,iBACzE,IAAI6G,QAAU,CAAE/D,KAAM,IAAKC,GAAI,IAC3BrC,OAAU,CAAEoC,KAAM,IAAKC,GAAI,IAC/B/E,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,QAASmB,KAAM,oBAAqB,GAEtErG,WAAW4C,aAAaF,cAClBgD,8BAGVsC,GAAG,sDAAuDhG,iBACtD,IAAI6G,QAAU,CAAE/D,KAAM,IAAKC,GAAI,IAC3BrC,OAAU,CAAEoC,KAAM,IAAKC,GAAI,IAC/B/E,WAAW4C,aAAaiG,eAClBjD,oBAAoB,CAAC,CAACV,KAAM,OAAQmB,KAAM,UAC5C,CAACnB,KAAM,OAAQmB,KAAM,SAAUC,YAAY,IAAQ,GAEvDtG,WAAW4C,aAAaF,cAClBkD,oBAAoB,CAAC,CAACV,KAAM,OAAQmB,KAAM,UAC5C,CAACnB,KAAM,OAAQmB,KAAM,SAAUC,YAAY,IAAQ,KAI3D0B,GAAG,yDAA0D,WACzD,IAAIkB,aAAenK,mBAAmBoK,IAAI,4BAE1CnJ,WAAW4C,aAAa,CAAEkC,KAAM,GAAIC,GAAI,KAGxC5D,OAAO+H,cAAc3C,YAGrBxF,YAAY9B,YAAYgJ,eAAgB,KAGxClJ,mBAAmBqK,IAAI,4BAA4B,GAGnD7H,cAActC,YAAYgJ,eAAgB,KAG1ClJ,mBAAmBqK,IAAI,6BAA8BF,kBAI7DvI,SAAS,yCAA0C,WAE/CmH,WAAW9F,uBACD0E,UAAU5G,cAAc,KAGlCiI,UAAU,WACNV,iBAGJW,GAAG,+BAAgChG,iBAC/B,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,GACxBoD,IAAQ,CAAErD,KAAM,GAAIC,GAAI,IAE5BhF,QAAQyI,aAAa,QAASN,OAC9BlI,WAAW4C,aAAauF,KACxB,IAAIjG,QAAUnB,YAAY9B,YAAYgJ,sBAChCzE,oBAAoBtB,QAAS,CAAC,SAAU,aAAc,SAAU,cAG1E8F,GAAG,kCAAmChG,iBAClC,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBtC,oBAAoB,CAAC,CAACV,KAAM,IAAKmB,KAAM,WAAY,KAG7D2B,GAAG,mFAAoFhG,iBACnF,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBtC,oBAAoB,CAAC,CAACV,KAAM,IAAKmB,KAAM,UAAW,CAACnB,KAAM,IAAKmB,KAAM,WAAY,KAG1F2B,GAAG,2FAA4FhG,iBAC3F,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBtC,oBAAoB,CAAC,CAACV,KAAM,UAAWmB,KAAM,MAAO,CAACnB,KAAM,UAAWmB,KAAM,WAAY,KAGlG2B,GAAG,sEAAuEhG,iBACtE,IAAIkG,MAAe,CAAEpD,KAAM,GAAIC,GAAI,GAC/BoD,IAAe,CAAErD,KAAM,GAAIC,GAAI,IAC/BsE,aAAe,CAAEvE,KAAM,GAAIC,GAAI,IAC/BuE,WAAe,CAAExE,KAAM,GAAIC,GAAI,IAEnChF,QAAQyI,aAAa,QAASN,OAE9BlI,WAAW4C,aAAauF,KACxB,IAAIjG,QAAUnB,YAAY9B,YAAYgJ,sBAChC7E,aAAalB,QAAS,CAAC,iBACvBgC,WAAWjF,YAAYgJ,eAAgB/F,QAAS,UACtDf,OAAOpB,QAAQqI,SAASiB,aAAcC,aAAajB,MAAM,gBAG7DL,GAAG,6CAA8ChG,iBAC7C,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,GAAIC,GAAI,OAGtCiD,GAAG,oDAAqDhG,iBACpD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,GAAIC,GAAI,OAGtCiD,GAAG,oDAAqDhG,iBACpD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,EAAGC,GAAI,OAGrCiD,GAAG,qDAAsDhG,iBACrD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,EAAGC,GAAI,OAGrCiD,GAAG,qDAAsDhG,iBACrD,IAAIkG,MAAQ,CAAEpD,KAAM,GAAIC,GAAI,IAE5B/E,WAAW4C,aAAasF,aAClBxD,aAAa,CAACI,KAAM,EAAGC,GAAI","sourcesContent":["/*\n * Copyright (c) 2013 - present Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*jslint regexp: true */\n/*global describe, it, expect, beforeEach, afterEach, awaitsFor,\nawaitsForDone, awaitsForFail, beforeAll, afterAll, awaits */\n\ndefine(function (require, exports, module) {\n\n    var Commands             = brackets.getModule(\"command/Commands\"),\n        CommandManager       = brackets.getModule(\"command/CommandManager\"),\n        MainViewManager      = brackets.getModule(\"view/MainViewManager\"),\n        DocumentManager      = brackets.getModule(\"document/DocumentManager\"),\n        EditorManager        = brackets.getModule(\"editor/EditorManager\"),\n        FileSystem           = brackets.getModule(\"filesystem/FileSystem\"),\n        FileUtils            = brackets.getModule(\"file/FileUtils\"),\n        PreferencesManager   = brackets.getModule(\"preferences/PreferencesManager\"),\n        SpecRunnerUtils      = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        JSCodeHints          = require(\"main\"),\n        Preferences          = brackets.getModule(\"JSUtils/Preferences\"),\n        Session              = brackets.getModule(\"JSUtils/Session\"),\n        ScopeManager         = brackets.getModule(\"JSUtils/ScopeManager\"),\n        HintUtils            = brackets.getModule(\"JSUtils/HintUtils\"),\n        HintUtils2           = require(\"HintUtils2\"),\n        ParameterHintProvider = require(\"ParameterHintsProvider\").JSParameterHintsProvider,\n        phProvider            = new ParameterHintProvider();\n\n    var extensionPath   = SpecRunnerUtils.getTestPath(\"/spec/JSCodeHints-ext-unittest-files/\"),\n        testFolder      = extensionPath + \"basic-test-files/\",\n        testPath        = extensionPath + \"basic-test-files/file1.js\",\n        testHtmlPath    = extensionPath + \"basic-test-files/index.html\",\n        testDoc         = null,\n        testEditor,\n        preTestText;\n\n    CommandManager.register(\"test-file-open\", Commands.FILE_OPEN, function (fileInfo) {\n        // Register a command for FILE_OPEN, which the jump to def code will call\n        return DocumentManager.getDocumentForPath(fileInfo.fullPath).done(function (doc) {\n            MainViewManager._edit(MainViewManager.ACTIVE_PANE, doc);\n        });\n    });\n\n    describe(\"individualrun:JavaScript Code Hinting\", function () {\n\n        // Helper function for testing cursor position\n        function fixPos(pos) {\n            if (!(\"sticky\" in pos)) {\n                pos.sticky = null;\n            }\n            return pos;\n        }\n\n        /*\n         * Ask provider for hints at current cursor position; expect it to\n         * return some\n         *\n         * @param {Object} provider - a CodeHintProvider object\n         * @param {string} key - the charCode of a key press that triggers the\n         *      CodeHint provider\n         * @return {boolean} - whether the provider has hints in the context of\n         *      the test editor\n         */\n        function expectHints(provider, key) {\n            if (key === undefined) {\n                key = null;\n            }\n\n            expect(provider.hasHints(testEditor, key)).toBe(true);\n            return provider.getHints(null);\n        }\n\n        /*\n         * Ask provider for hints at current cursor position; expect it NOT to\n         * return any\n         *\n         * @param {Object} provider - a CodeHintProvider object\n         * @param {string} key - the charCode of a key press that triggers the\n         *      CodeHint provider\n         */\n        function expectNoHints(provider, key) {\n\n            if (key === undefined) {\n                key = null;\n            }\n\n            expect(provider.hasHints(testEditor, key)).toBe(false);\n        }\n\n        /*\n         * Return the index at which hint occurs in hintList\n         *\n         * @param {Array.<Object>} hintList - the list of hints\n         * @param {string} hint - the hint to search for\n         * @return {number} - the index into hintList at which the hint occurs,\n         * or -1 if it does not\n         */\n        function _indexOf(hintList, hint) {\n            var index = -1,\n                counter = 0;\n\n            for (counter; counter < hintList.length; counter++) {\n                if (hintList[counter].data(\"token\").value === hint) {\n                    index = counter;\n                    break;\n                }\n            }\n            return index;\n        }\n\n        /*\n         * Wait for a hint response object to resolve, then apply a callback\n         * to the result\n         *\n         * @param {Object + jQuery.Deferred} hintObj - a hint response object,\n         *      possibly deferred\n         * @param {Function} callback - the callback to apply to the resolved\n         *      hint response object\n         */\n        async function _waitForHints(hintObj, callback) {\n            var complete = false,\n                hintList = null;\n\n            if (hintObj.hasOwnProperty(\"hints\")) {\n                complete = true;\n                hintList = hintObj.hints;\n            } else {\n                hintObj.done(function (obj) {\n                    complete = true;\n                    hintList = obj.hints;\n                });\n            }\n\n            await awaitsFor(function () {\n                return complete;\n            }, \"Expected hints did not resolve\", 3000);\n\n            callback(hintList);\n        }\n\n        /*\n         * Test if hints should be closed or not closed at a given position.\n         *\n         * @param {Object} provider - a CodeHintProvider object\n         * @param {Object + jQuery.Deferred} hintObj - a hint response object,\n         *      possibly deferred\n         * @param {line: number, ch: number} newPos - new position to move to\n         * after hints are received.\n         * @param {boolean} expectedValue - true if hints should close,\n         * false otherwise.\n         */\n        async function expectCloseHints(provider, hintObj, newPos, expectedValue) {\n            await _waitForHints(hintObj, function (hintList) {\n                testEditor.setCursorPos(newPos);\n                expect(provider.shouldCloseHints(JSCodeHints.getSession())).toBe(expectedValue);\n            });\n        }\n\n        /*\n         * Expect a given list of hints to be absent from a given hint\n         * response object\n         *\n         * @param {Object + jQuery.Deferred} hintObj - a hint response object,\n         *      possibly deferred\n         * @param {Array.<string>} absentHints - a list of hints that should not\n         *      be present in the hint response\n         */\n        async function hintsAbsent(hintObj, absentHints) {\n            await _waitForHints(hintObj, function (hintList) {\n                expect(hintList).toBeTruthy();\n                absentHints.forEach(function (absentHint) {\n                    expect(_indexOf(hintList, absentHint)).toBe(-1);\n                });\n            });\n        }\n\n        /*\n         * Expect a given list of hints to be present in a given hint\n         * response object\n         *\n         * @param {Object + jQuery.Deferred} hintObj - a hint response object,\n         *      possibly deferred\n         * @param {Array.<string>} expectedHints - a list of hints that should be\n         *      present in the hint response\n         */\n        async function hintsPresent(hintObj, expectedHints) {\n            await _waitForHints(hintObj, function (hintList) {\n                expect(hintList).toBeTruthy();\n                expectedHints.forEach(function (expectedHint) {\n                    expect(_indexOf(hintList, expectedHint)).not.toBe(-1);\n                });\n            });\n        }\n\n        /*\n         * Expect a given list of hints to be present in the given order in a\n         * given hint response object\n         *\n         * @param {Object + jQuery.Deferred} hintObj - a hint response object,\n         *      possibly deferred\n         * @param {Array.<string>} expectedHints - a list of hints that should be\n         *      present in the given order in the hint response\n         */\n        async function hintsPresentOrdered(hintObj, expectedHints) {\n            var prevIndex = -1,\n                currIndex;\n\n            await _waitForHints(hintObj, function (hintList) {\n                expect(hintList).toBeTruthy();\n                expectedHints.forEach(function (expectedHint) {\n                    currIndex = _indexOf(hintList, expectedHint);\n                    expect(currIndex).toBeGreaterThan(prevIndex);\n                    prevIndex = currIndex;\n                });\n            });\n        }\n\n        /*\n         * Expect a given list of hints to be present in a given hint\n         * response object, and no more.\n         *\n         * @param {Object + jQuery.Deferred} hintObj - a hint response object,\n         *      possibly deferred\n         * @param {Array.<string>} expectedHints - a list of hints that should be\n         *      present in the hint response, and no more.\n         */\n        async function hintsPresentExact(hintObj, expectedHints) {\n            await _waitForHints(hintObj, function (hintList) {\n                expect(hintList).toBeTruthy();\n                expect(hintList.length).toBe(expectedHints.length);\n                expectedHints.forEach(function (expectedHint, index) {\n                    expect(hintList[index].data(\"token\").value).toBe(expectedHint);\n                });\n            });\n        }\n\n        /**\n         * Find the index of a string in a list of hints.\n         * @param {Array} hintList - the list of hints\n         * @param {string} hintSelection - the string represenation of the hint\n         *  to find the index of\n         * @return {number} the index of the hint corresponding to the hintSelection\n         */\n        function findHint(hintList, hintSelection) {\n            var i, l;\n            for (i = 0, l = hintList.length; i < l; ++i) {\n                var current = hintList[i].data(\"token\");\n                if (hintSelection === current.value) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        /*\n         * Simulation of selection of a particular hint in a hint list.\n         * Presumably results in side effects in the hint provider's\n         * current editor context.\n         *\n         * @param {Object} provider - a CodeHint provider object\n         * @param {Object} hintObj - a hint response object from that provider,\n         *      possibly deferred\n         * @param {string} hintSelection - the hint to select\n         */\n        async function selectHint(provider, hintObj, hintSelection) {\n            expectHints(provider);\n            await _waitForHints(hintObj, function (hintList) {\n                expect(hintList).toBeTruthy();\n                var index = findHint(hintList, hintSelection);\n                expect(hintList[index].data(\"token\")).toBeTruthy();\n                expect(provider.insertHint(hintList[index])).toBe(false);\n            });\n        }\n\n        /**\n         * Wait for the editor to change positions, such as after a jump to\n         * definition has been triggered.  Will timeout after 3 seconds\n         *\n         * @param {{line:number, ch:number}} oldLocation - the original line/col\n         * @param {Function} callback - the callback to apply once the editor has changed position\n         */\n        async function _waitForJump(jumpPromise, callback) {\n            var cursor = null,\n                complete = false;\n\n            jumpPromise.done(function () {\n                complete = true;\n            });\n\n            await awaitsFor(function () {\n                var activeEditor = EditorManager.getActiveEditor();\n                cursor = activeEditor.getCursorPos();\n                return complete;\n            }, \"Expected jump did not occur\", 3000);\n\n            callback(cursor);\n        }\n\n        /**\n         * Trigger a jump to definition, and verify that the editor jumped to\n         * the expected location. The new location is the variable definition\n         * or function definition of the variable or function at the current\n         * cursor location. Jumping to the new location will cause a new editor\n         * to be opened or open an existing editor.\n         *\n         * @param {{line:number, ch:number, file:string}} expectedLocation - the\n         *  line, column, and optionally the new file the editor should jump to.  If the\n         *  editor is expected to stay in the same file, then file may be omitted.\n         */\n        async function editorJumped(expectedLocation) {\n            var jumpPromise = JSCodeHints.handleJumpToDefinition();\n\n\n            await _waitForJump(jumpPromise, function (newCursor) {\n                expect(newCursor.line).toBe(expectedLocation.line);\n                expect(newCursor.ch).toBe(expectedLocation.ch);\n                if (expectedLocation.file) {\n                    var activeEditor = EditorManager.getActiveEditor();\n                    expect(activeEditor.document.file.name).toBe(expectedLocation.file);\n                }\n            });\n\n        }\n\n        /**\n         * Verify there is no parameter hint at the current cursor.\n         */\n        async function expectNoParameterHint() {\n            var requestStatus = undefined;\n            var request = phProvider._getParameterHint();\n            request.fail(function (status) {\n                requestStatus = status;\n            });\n\n            await awaitsForFail(request, \"ParameterHints\");\n\n            expect(requestStatus).toBe(null);\n        }\n\n        /**\n         * Verify the parameter hint is not visible.\n         */\n        function expectParameterHintClosed() {\n            expect(phProvider.isHintDisplayed()).toBe(false);\n        }\n\n        /**\n         * Show a function hint based on the code at the cursor. Verify the\n         * hint matches the passed in value.\n         *\n         * @param {Array<{name: string, type: string, isOptional: boolean}>}\n         * expectedParams - array of records, where each element of the array\n         * describes a function parameter. If null, then no hint is expected.\n         * @param {number} expectedParameter - the parameter at cursor.\n         */\n        async function expectParameterHint(expectedParams, expectedParameter) {\n            var requestHints = undefined,\n                request = null;\n\n            function expectHint(hint) {\n                var params = hint.parameters,\n                    n = params.length,\n                    i;\n\n                // compare params to expected params\n                expect(params.length).toBe(expectedParams.length);\n                expect(hint.currentIndex).toBe(expectedParameter);\n\n                for (i = 0; i < n; i++) {\n\n                    expect(params[i].name).toBe(expectedParams[i].name);\n                    expect(params[i].type).toBe(expectedParams[i].type);\n                    if (params[i].isOptional) {\n                        expect(expectedParams[i].isOptional).toBeTruthy();\n                    } else {\n                        expect(expectedParams[i].isOptional).toBeFalsy();\n                    }\n                }\n\n            }\n\n            request = phProvider._getParameterHint();\n\n            if (expectedParams === null) {\n                request.fail(function (result) {\n                    requestHints = result;\n                });\n\n                await awaitsForFail(request, \"ParameterHints\");\n            } else {\n                request.done(function (result) {\n                    requestHints = result;\n                });\n\n                await awaitsForDone(request, \"ParameterHints\");\n            }\n\n            if (expectedParams === null) {\n                expect(requestHints).toBe(null);\n            } else {\n                expectHint(requestHints);\n            }\n        }\n\n        async function setupTest(path, primePump) { // FIXME: primePump argument ignored even though used below\n            DocumentManager.getDocumentForPath(path).done(function (doc) {\n                testDoc = doc;\n            });\n\n            await awaitsFor(function () {\n                return testDoc !== null;\n            }, \"Unable to open test document\", 10000);\n\n            // create Editor instance (containing a CodeMirror instance)\n            testEditor = SpecRunnerUtils.createMockEditorForDocument(testDoc);\n            ScopeManager.handleProjectOpen(testFolder);\n            await awaits(100); // wait for code indexing workers to prime\n            let session = new Session(testEditor);\n            ScopeManager.handleEditorChange(session, testEditor.document, null);\n            preTestText = testDoc.getText();\n            await awaitsForDone(ScopeManager._readyPromise());\n            await awaitsForDone(ScopeManager._maybeReset(JSCodeHints.getSession(), testDoc, true));\n        }\n\n        function tearDownTest() {\n            // Restore the pre-test version of the text here because the hinter\n            // will update the contents of the previous document in tern.\n            testDoc.setText(preTestText);\n\n            // The following call ensures that the document is reloaded\n            // from disk before each test\n            MainViewManager._closeAll(MainViewManager.ALL_PANES);\n            SpecRunnerUtils.destroyMockEditor(testDoc);\n            testEditor = null;\n            testDoc = null;\n        }\n\n        describe(\"JavaScript Code Hinting Basic\", function () {\n            beforeAll(function () {\n                brackets._configureJSCodeHints({\n                    noReset: true\n                });\n            });\n\n            afterAll(function () {\n                brackets._configureJSCodeHints({\n                    noReset: false\n                });\n            });\n\n            beforeEach(async function () {\n                await setupTest(testPath, false);\n            });\n\n            afterEach(function () {\n                tearDownTest();\n            });\n\n            it(\"should not list hints in string literal\", function () {\n                testEditor.setCursorPos({ line: 20, ch: 22 });\n                expectNoHints(JSCodeHints.jsHintProvider);\n            }, 1000000);\n\n            it(\"should list declared variable and function names in outer scope\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"A2\", \"A3\", \"funB\", \"A1\"]);\n            });\n\n            it(\"should filter hints by query\", async function () {\n                testEditor.setCursorPos({ line: 5, ch: 10 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"A1\", \"A2\", \"A3\"]);\n                await hintsAbsent(hintObj, [\"funB\"]);\n            });\n\n            it(\"should list keywords\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"break\", \"case\", \"catch\"]);\n            });\n\n            it(\"should NOT list implicitly defined globals from missing JSLint annotations\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsAbsent(hintObj, [\"ActiveXObject\", \"CScript\", \"VBArray\"]);\n            });\n\n            it(\"should NOT list explicitly defined globals from JSLint annotations in other files\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsAbsent(hintObj, [\"crazyGlobal\", \"anotherCrazyGlobal\"]);\n            });\n\n            it(\"should NOT list implicitly defined globals from JSLint annotations in other files\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsAbsent(hintObj, [\"spawn\", \"version\", \"toint32\"]);\n            });\n\n            it(\"should list literal constants\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"null\", \"undefined\", \"true\", \"false\"]);\n            });\n\n            it(\"should NOT list variables, function names and parameter names out of scope\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsAbsent(hintObj, [\"paramB2\", \"paramB1\"]);\n            });\n\n            it(\"should NOT list variables, function names and parameter names in other files\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsAbsent(hintObj, [\"E1\", \"E2\"]);\n            });\n\n            it(\"should NOT list property names on value lookups\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsAbsent(hintObj, [\"propA\", \"propB\", \"propC\"]);\n            });\n\n            it(\"should list declared variable, function and parameter names in inner scope\", async function () {\n                testEditor.setCursorPos({ line: 12, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"B1\", \"B2\", \"funC\", \"paramB1\", \"paramB2\", \"funB\", \"A1\", \"A2\", \"A3\"]);\n            });\n\n            it(\"should NOT list string literals from other files\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsAbsent(hintObj, [\"a very nice string\"]);\n            });\n\n            it(\"should list property names that have been declared in the file\", async function () {\n                testEditor.setCursorPos({ line: 17, ch: 11 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"propB\"]);\n            });\n\n            it(\"should list identifier names that occur in other files\", async function () {\n                testEditor.setCursorPos({ line: 16, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"D1\", \"D2\"]);\n            });\n\n            it(\"should NOT list variable, parameter or function names on property lookups\", async function () {\n                testEditor.setCursorPos({ line: 17, ch: 11 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsAbsent(hintObj, [\"A1\", \"A2\", \"funB\", \"paramB1\", \"paramB2\", \"B1\", \"B2\", \"funC\", \"paramC1\", \"paramC2\"]);\n            });\n\n            it(\"should NOT list keywords on property lookups\", async function () {\n                testEditor.setCursorPos({ line: 17, ch: 11 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsAbsent(hintObj, [\"case\", \"function\", \"var\"]);\n            });\n\n            it(\"should close hints when move over '.' \", async function () {\n                testEditor.setCursorPos({ line: 17, ch: 11 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 17, ch: 10 }, true);\n            });\n\n            it(\"should close hints only when move off the end of a property \", async function () {\n                testEditor.setCursorPos({ line: 17, ch: 11 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 17, ch: 12 }, false);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 17, ch: 13 }, false);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 17, ch: 14 }, false);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 17, ch: 15 }, false);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 17, ch: 16 }, false);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 17, ch: 17 }, true);\n            });\n\n            it(\"should close hints only when move off the beginning of an identifier \", async function () {\n                testEditor.setCursorPos({ line: 17, ch: 10 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 17, ch: 9 }, false);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 17, ch: 8 }, false);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 17, ch: 7 }, true);\n            });\n\n            it(\"should close hints only when move off the beginning of a keyword \", async function () {\n                testEditor.setCursorPos({ line: 24, ch: 7 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"var\"]);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 24, ch: 6 }, false);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 24, ch: 5 }, false);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 24, ch: 4 }, false);\n                await expectCloseHints(JSCodeHints.jsHintProvider, hintObj,\n                    { line: 24, ch: 3 }, true);\n            });\n\n            it(\"should NOT list implicit hints on left-brace\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                expectNoHints(JSCodeHints.jsHintProvider, \"{\");\n            });\n\n            it(\"should list explicit hints for variable and function names\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider, null);\n                await hintsPresent(hintObj, [\"A2\", \"A3\", \"funB\", \"A1\"]);\n            });\n\n            it(\"should list implicit hints when typing property lookups\", async function () {\n                testEditor.setCursorPos({ line: 17, ch: 10 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider, \".\");\n                await hintsPresent(hintObj, [\"B1\", \"paramB1\"]);\n            });\n\n            it(\"should give priority to identifier names associated with the current context\", async function () {\n                testEditor.setCursorPos({ line: 16, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentOrdered(hintObj, [\"C1\", \"B1\"]);\n                await hintsPresentOrdered(hintObj, [\"C2\", \"B2\"]);\n            });\n\n            it(\"should give priority to property names associated with the current context from other files\", async function () {\n                testEditor.setCursorPos({ line: 16, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentOrdered(hintObj, [\"C1\", \"D1\"]);\n                await hintsPresentOrdered(hintObj, [\"B1\", \"D1\"]);\n                await hintsPresentOrdered(hintObj, [\"A1\", \"D1\"]);\n                await hintsPresentOrdered(hintObj, [\"funB\", \"funE\"]);\n            });\n\n            it(\"should insert value hints with no current query\", async function () {\n                var start = { line: 6, ch: 0 },\n                    end   = { line: 6, ch: 2 };\n\n                testEditor.setCursorPos(start);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"A2\");\n                //expect(testEditor.getCursorPos()).toEql(end);\n                expect(testDoc.getRange(start, end)).toEql(\"A2\");\n            });\n\n            it(\"should insert value hints replacing the current query\", async function () {\n                var start   = { line: 5, ch: 10 }, // A3 = A<here>2;\n                    before  = { line: 5, ch: 9 },\n                    end     = { line: 5, ch: 11 };\n\n                testEditor.setCursorPos(start);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"A1\", \"A2\", \"A3\"]);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"A1\");\n                //expect(testEditor.getCursorPos()).toEql(end);\n                expect(testDoc.getRange(before, end)).toEql(\"A1\");\n            });\n\n            it(\"should insert property hints with no current query\", async function () {\n                var start   = { line: 6, ch: 0 },\n                    middle  = { line: 6, ch: 3 },\n                    end     = { line: 6, ch: 8 };\n\n                testDoc.replaceRange(\"A1.\", start, start);\n                testEditor.setCursorPos(middle);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"propA\");\n\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(end));\n                expect(testDoc.getRange(start, end)).toEql(\"A1.propA\");\n                expect(testDoc.getLine(end.line).length).toEql(8);\n            });\n\n            it(\"should insert, not replace, property hints with no current query\", async function () {\n                var start   = { line: 6, ch: 0 },\n                    middle  = { line: 6, ch: 3 },\n                    end     = { line: 6, ch: 8 },\n                    endplus = { line: 6, ch: 12 };\n\n                testDoc.replaceRange(\"A1.prop\", start, start);\n                testEditor.setCursorPos(middle);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"propA\");\n\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(end));\n                expect(testDoc.getRange(start, endplus)).toEql(\"A1.propAprop\");\n                expect(testDoc.getLine(end.line).length).toEql(12);\n            });\n\n            it(\"should insert, not replace, property hints with a partial current query\", async function () {\n                var start   = { line: 6, ch: 0 },\n                    middle  = { line: 6, ch: 6 },\n                    end     = { line: 6, ch: 8 };\n\n                testDoc.replaceRange(\"A1.pro\", start, start);\n                testEditor.setCursorPos(middle);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"propA\");\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(end));\n                expect(testDoc.getRange(start, end)).toEql(\"A1.propA\");\n                expect(testDoc.getLine(end.line).length).toEql(8);\n            });\n\n            it(\"should replace property hints replacing a partial current query\", async function () {\n                var start   = { line: 6, ch: 0 },\n                    middle  = { line: 6, ch: 6 },\n                    end     = { line: 6, ch: 8 },\n                    endplus = { line: 6, ch: 10 };\n\n                testDoc.replaceRange(\"A1.propB\", start, start);\n                testEditor.setCursorPos(middle);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"propA\");\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(end));\n                expect(testDoc.getRange(start, endplus)).toEql(\"A1.propApB\");\n                expect(testDoc.getLine(end.line).length).toEql(10);\n            });\n\n            it(\"should replace property hints but not following delimiters\", async function () {\n                var start   = { line: 6, ch: 0 },\n                    middle  = { line: 6, ch: 4 },\n                    end     = { line: 6, ch: 9 },\n                    endplus = { line: 6, ch: 14 };\n\n                testDoc.replaceRange(\"(A1.prop)\", start, start);\n                testEditor.setCursorPos(middle);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"propA\");\n\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(end));\n                expect(testDoc.getRange(start, endplus)).toEql(\"(A1.propAprop)\");\n                expect(testDoc.getLine(endplus.line).length).toEql(14);\n            });\n\n            it(\"should list hints for string, as string assigned to 's', 's' assigned to 'r' and 'r' assigned to 't'\", async function () {\n                var start = { line: 26, ch: 0 },\n                    middle = { line: 26, ch: 6 };\n\n                // pad spaces here as tern has issue,without space, no code hint\n                testDoc.replaceRange(\"    t.\", start);\n                testEditor.setCursorPos(middle);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentOrdered(hintObj, [\"charAt\", \"charCodeAt\", \"concat\", \"indexOf\"]);\n            });\n\n            it(\"should list function type\", async function () {\n                var start = { line: 37, ch: 0 },\n                    middle = { line: 37, ch: 5 };\n\n                testDoc.replaceRange(\"funD(\", start, start);\n                testEditor.setCursorPos(middle);\n                await expectParameterHint([{name: \"a\", type: \"String\"},\n                    {name: \"b\", type: \"Number\"}], 0);\n            });\n\n            it(\"should list exports from a requirejs module\", async function () {\n                var start = { line: 40, ch: 21 };\n\n                testEditor.setCursorPos(start);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentExact(hintObj, [\"a\", \"b\", \"c\", \"j\"]);\n            });\n\n            it(\"should list later defined property names\", async function () {\n                var start = { line: 17, ch: 11 };\n\n                testEditor.setCursorPos(start);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentExact(hintObj, [\"foo\", \"propB\"]);\n            });\n\n            it(\"should list matching property names\", async function () {\n                var cursor1 = { line: 12, ch: 0 },\n                    cursor2 = { line: 12, ch: 6 };\n\n                testDoc.replaceRange(\"paramB\", cursor1, cursor1);\n                testEditor.setCursorPos(cursor2);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentExact(hintObj, [\"paramB1\", \"paramB2\"]);\n            });\n\n            it(\"should take anotation parameter type:String\", async function () {\n                var start = { line: 37, ch: 21 };\n\n                testDoc.replaceRange(\"var k= funD(10,11).x.\", start, start);\n                testEditor.setCursorPos(start);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentOrdered(hintObj, [\"charAt\", \"charCodeAt\", \"concat\", \"indexOf\"]);\n            });\n\n            it(\"should take anotation parameter type:Number\", async function () {\n                var start = { line: 37, ch: 21 };\n\n                testDoc.replaceRange(\"var k= funD(10,11).y.\", start, start);\n                testEditor.setCursorPos(start);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentOrdered(hintObj, [\"toExponential\", \"toFixed\", \"toString\"]);\n            });\n\n            it(\"should add new method on String .prototype\", async function () {\n                var start = { line: 37, ch: 0 };\n                var testPos = { line: 40, ch: 12 };\n                testDoc.replaceRange(\"String.prototype.times = function (count) {\\n\" + \"\\treturn count < 1 ? '' : new Array[count + 1].join(this);\\n};\\n\\\"hello\\\".tim\", start, start);\n                testEditor.setCursorPos(testPos);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentOrdered(hintObj, [\"times\", \"trim\"]);\n            });\n\n            it(\"should list function defined from .prototype\", async function () {\n                var start = { line: 59, ch: 5 };\n\n                testEditor.setCursorPos(start);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentExact(hintObj, [\"calc\"]);\n            });\n\n            it(\"should list function type defined from .prototype\", async function () {\n                var start = { line: 59, ch: 10 };\n                testEditor.setCursorPos(start);\n                await expectParameterHint([{name: \"a4\", type: \"Number\"}, {name: \"b4\", type: \"Number\"}], 0);\n            });\n\n            it(\"should list function inherited from super class\", async function () {\n                var start = { line: 79, ch: 11 };\n                testEditor.setCursorPos(start);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentExact(hintObj, [\"amountDue\", \"getAmountDue\", \"getName\", \"name\", \"setAmountDue\"]);\n            });\n\n            it(\"should show argument from from .prototype.Method\", async function () {\n                var start = { line: 80, ch: 0 },\n                    testPos = { line: 80, ch: 24 };\n\n                testDoc.replaceRange(\"myCustomer.setAmountDue(\", start);\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"amountDue\", type: \"Object\"}], 0);\n            });\n\n            it(\"should show inner function type\", async function () {\n                var testPos = { line: 96, ch: 23 };\n\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"arg\", type: \"String\"}], 0);\n            });\n\n            it(\"should show type for inner function returned function\", async function () {\n                var testPos = { line: 96, ch: 33 };\n\n                testEditor.setCursorPos(testPos);\n                expectHints(JSCodeHints.jsHintProvider);\n                await expectParameterHint([], 0);\n\n            });\n\n            // parameter type annotation tests\n            it(\"should list parameter function type and best guess for function call/return types\", async function () {\n                var testPos = { line: 139, ch: 12 };\n\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"f\", type: \"function(String, Number):String\"}], 0);\n            });\n\n            it(\"should list array containing functions\", async function () {\n                var testPos = { line: 142, ch: 7 };\n\n                testEditor.setCursorPos(testPos);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"index1\", \"index2\"]);\n            });\n\n            it(\"should list function reference\", async function () {\n                var start = { line: 144, ch: 0 },\n                    testPos = { line: 144, ch: 14 };\n\n                testDoc.replaceRange(\"funArr.index1(\", start);\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([], 0);\n            });\n\n            it(\"should insert hint as [\\\"my-key\\\"] since 'my-key' is not a valid property name\", async function () {\n                var start = { line: 49, ch: 0 },\n                    middle = { line: 49, ch: 5 },\n                    end = { line: 49, ch: 13 };\n\n                testDoc.replaceRange(\"arr.m\", start, start);\n                testEditor.setCursorPos(middle);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"my-key\");\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(end));\n                expect(testDoc.getRange(start, end)).toEql(\"arr[\\\"my-key\\\"]\");\n                expect(testDoc.getLine(end.line).length).toEql(13);\n            });\n\n            it(\"should insert hint as [\\\"my-key\\\"] make sure this works if nothing is typed after the '.'\", async function () {\n                var start = { line: 49, ch: 0 },\n                    middle = { line: 49, ch: 4 },\n                    end = { line: 49, ch: 13 };\n\n                testDoc.replaceRange(\"arr.\", start, start);\n                testEditor.setCursorPos(middle);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"my-key\");\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(end));\n                expect(testDoc.getRange(start, end)).toEql(\"arr[\\\"my-key\\\"]\");\n                expect(testDoc.getLine(end.line).length).toEql(13);\n            });\n\n            it(\"should insert hint as '.for' since keywords can be used as property names\", async function () {\n                var start = { line: 49, ch: 0 },\n                    middle = { line: 49, ch: 5 },\n                    end = { line: 49, ch: 7 };\n\n                testDoc.replaceRange(\"arr.f\", start, start);\n                testEditor.setCursorPos(middle);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"for\");\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(end));\n                expect(testDoc.getRange(start, end)).toEql(\"arr.for\");\n                expect(testDoc.getLine(end.line).length).toEql(7);\n            });\n\n            it(\"should jump to function\", async function () {\n                var start = { line: 43, ch: 0 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 7, ch: 13});\n            });\n\n            it(\"should jump to var\", async function () {\n                var start = { line: 44, ch: 10 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 3, ch: 6});\n            });\n\n            it(\"should jump to closure, early defined var\", async function () {\n                var start = { line: 17, ch: 9 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 10, ch: 10});\n            });\n\n            it(\"should jump to the definition in new module file\", async function () {\n                var start = { line: 40, ch: 22 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 4, ch: 13, file: \"MyModule.js\"}); //jump to another file\n            });\n\n            it(\"should jump to the method definition in .prototype\", async function () {\n                var start = { line: 59, ch: 8 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 53, ch: 21}); //jump to prototype.calc\n            });\n\n            it(\"should jump to parameter passed in the method\", async function () {\n                var start = { line: 63, ch: 20 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 61, ch: 27});\n            });\n\n            it(\"should jump to parameter passed in anonymous method\", async function () {\n                var start = { line: 83, ch: 25 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 81, ch: 53});\n            });\n\n            it(\"should jump to inner method\", async function () {\n                var start = { line: 96, ch: 32 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 94, ch: 17});\n            });\n\n            it(\"should jump to the actual function definition, and not the exports line\", async function () {\n                var start = { line: 159, ch: 22 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 11, ch: 14, file: \"MyModule.js\"}); //jump to another file\n            });\n\n            it(\"should not hint function, variable, or param decls\", async function () {\n                var func = { line: 7, ch: 12 },\n                    param = { line: 7, ch: 18 },\n                    variable = { line: 10, ch: 10 };\n\n                testEditor.setCursorPos(func);\n                await expectNoParameterHint();\n                testEditor.setCursorPos(param);\n                expectNoHints(JSCodeHints.jsHintProvider);\n                testEditor.setCursorPos(variable);\n                expectNoHints(JSCodeHints.jsHintProvider);\n            });\n\n            it(\"should sort underscore names to the bottom\", async function () {\n                testEditor.setCursorPos({ line: 146, ch: 0 });\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentOrdered(hintObj, [\"A1\", \"A2\", \"A3\", \"funB\", \"_A1\"]);\n            });\n\n            it(\"should list all properties for unknown type\", async function () {\n                var start = { line: 149, ch: 0 },\n                    end   = { line: 149, ch: 5 };\n\n                testDoc.replaceRange(\"help.\", start, start);\n                testEditor.setCursorPos(end);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                // check we have a properties from \"Function\", \"String\", and \"Array\"\n                await hintsPresentOrdered(hintObj, [\"apply\", \"charCodeAt\", \"concat\"]);\n            });\n\n            it(\"should switch to guesses after typing a query that does not match any hints\", async function () {\n                var start = { line: 150, ch: 0 },\n                    end   = { line: 150, ch: 5 };\n\n                testDoc.replaceRange(\"s.shift\", start, start);\n                testEditor.setCursorPos(end);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                // check we have a properties that start with \"shift\"\n                await hintsPresentOrdered(hintObj, [\"shift\", \"shiftKey\"]);\n            });\n\n            it(\"should handle valid non-ascii characters in a property name\", async function () {\n                var start = { line: 153, ch: 0 },\n                    end   = { line: 153, ch: 13 };\n\n                testDoc.replaceRange(\"hope.frenchçP\", start, start);\n                testEditor.setCursorPos(end);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                // check we have a properties that start with \"shift\"\n                await hintsPresentOrdered(hintObj, [\"frenchçProp\"]);\n            });\n\n            it(\"should show guessed argument type from current passing parameter\", async function () {\n                var start = { line: 80, ch: 0 },\n                    testPos = { line: 80, ch: 24 };\n                testDoc.replaceRange(\"myCustomer.setAmountDue(10)\", start);\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"amountDue\", type: \"Number\"}], 0);\n            });\n\n            it(\"should list parameter hint for record type annotation\", async function () {\n                var testPos = { line: 178, ch: 25 };\n\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"t\", type: \"{index: Number, name: String}\"}], -1);\n            });\n\n            it(\"should list parameter hint for optional parameters\", async function () {\n                var testPos = { line: 214, ch: 17 };\n\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"a\", type: \"Number\", isOptional: true}, {name: \"b\", type: \"String\", isOptional: true}], 0);\n            });\n\n            it(\"should list parameter hint for a function parameter\", async function () {\n                var testPos = { line: 181, ch: 12 };\n\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"compare\",\n                    type: \"function(Object, Object):Number\",\n                    isOptional: true}], -1);\n            });\n\n            it(\"should list parameter hint for an array parameter\", async function () {\n                var testPos = { line: 184, ch: 12 };\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"other\", type: \"Array.<Object>\"}], -1);\n            });\n\n            it(\"should list parameter hint for a source array annotation\", async function () {\n                var testPos = { line: 200, ch: 20 };\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"a\", type: \"Array.<String>\"}], 0);\n            });\n\n            it(\"should close parameter hint when move off function\", async function () {\n                var testPos = { line: 184, ch: 12 },\n                    endPos  = { line: 184, ch: 19 };\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"other\", type: \"Array.<Object>\"}], -1);\n\n                testEditor.setCursorPos(endPos);\n                await expectParameterHintClosed();\n            });\n\n            it(\"should close parameter hint when move off function to another function\", async function () {\n                var testPos = { line: 184, ch: 12 },\n                    newPos  = { line: 181, ch: 12 };\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"other\", type: \"Array.<Object>\"}], -1);\n\n                testEditor.setCursorPos(newPos);\n                await expectParameterHintClosed();\n            });\n\n            it(\"should update current parameter as the cursor moves\", async function () {\n                var testPos = { line: 186, ch: 19 },\n                    newPos  = { line: 186, ch: 20 };\n                testEditor.setCursorPos(testPos);\n                await expectParameterHint([{name: \"char\", type: \"String\"},\n                    {name: \"from\", type: \"Number\", isOptional: true}], 0);\n\n                testEditor.setCursorPos(newPos);\n                await expectParameterHint([{name: \"char\", type: \"String\"},\n                    {name: \"from\", type: \"Number\", isOptional: true}], 1);\n            });\n\n            // Test `jscodehints.noHintsOnDot` preference\n            it(\"should consider dot a hintable key based on preference\", function () {\n                var noHintsOnDot = PreferencesManager.get(\"jscodehints.noHintsOnDot\");\n\n                testEditor.setCursorPos({ line: 44, ch: 10 });\n\n                // Default is falsey\n                expect(noHintsOnDot).toBeFalsy();\n\n                // Should get hints after dot\n                expectHints(JSCodeHints.jsHintProvider, \".\");\n\n                // Set preference to true\n                PreferencesManager.set(\"jscodehints.noHintsOnDot\", true);\n\n                // Should no longer get hints after dot\n                expectNoHints(JSCodeHints.jsHintProvider, \".\");\n\n                // Set preference back to original value (converted to boolean)\n                PreferencesManager.set(\"jscodehints.noHintsOnDot\", !!noHintsOnDot);\n            });\n        });\n\n        describe(\"JavaScript Code Hinting in a HTML file\", function () {\n\n            beforeEach(async function () {\n                await setupTest(testHtmlPath, false);\n            });\n\n            afterEach(function () {\n                tearDownTest();\n            });\n\n            it(\"basic codehints in html file\", async function () {\n                var start = { line: 37, ch: 9 },\n                    end   = { line: 37, ch: 13};\n\n                testDoc.replaceRange(\"x100.\", start);\n                testEditor.setCursorPos(end);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresentOrdered(hintObj, [\"charAt\", \"charCodeAt\", \"concat\", \"indexOf\"]);\n            });\n\n            it(\"function type hint in html file\", async function () {\n                var start = { line: 36, ch: 12 };\n\n                testEditor.setCursorPos(start);\n                await expectParameterHint([{name: \"a\", type: \"Number\"}], 0);\n            });\n\n            it(\"should show function type code hint for function in script file inside html file\", async function () {\n                var start = { line: 22, ch: 17 };\n\n                testEditor.setCursorPos(start);\n                await expectParameterHint([{name: \"a\", type: \"String\"}, {name: \"b\", type: \"Number\"}], 0);\n            });\n\n            it(\"should show function type code hint for function in another script file inside html file\", async function () {\n                var start = { line: 23, ch: 17 };\n\n                testEditor.setCursorPos(start);\n                await expectParameterHint([{name: \"paramE1\", type: \"D1\"}, {name: \"paramE2\", type: \"Number\"}], 0);\n            });\n\n            it(\"should show global variable in another script file inside html file\", async function () {\n                var start        = { line: 27, ch: 8 },\n                    end          = { line: 27, ch: 13},\n                    testPosStart = { line: 27, ch: 11},\n                    testPosEnd   = { line: 27, ch: 21};\n\n                testDoc.replaceRange(\"arr.m\", start);\n\n                testEditor.setCursorPos(end);\n                var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                await hintsPresent(hintObj, [\"my-key\"]);\n                await selectHint(JSCodeHints.jsHintProvider, hintObj, \"my-key\");\n                expect(testDoc.getRange(testPosStart, testPosEnd)).toEql(\"[\\\"my-key\\\"]\");\n            });\n\n            it(\"should jump to definition inside html file\", async function () {\n                var start = { line: 36, ch: 10 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 19, ch: 20});\n            });\n\n            it(\"should jump to funtion definition to loaded file1\", async function () {\n                var start = { line: 22, ch: 15 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 33, ch: 13});\n            });\n\n            it(\"should jump to funtion definition to loaded file2\", async function () {\n                var start = { line: 23, ch: 15 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 6, ch: 13});\n            });\n\n            it(\"should jump to property definition to loaded file1\", async function () {\n                var start = { line: 23, ch: 28 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 4, ch: 16});\n            });\n\n            it(\"should jump to property definition to loaded file2\", async function () {\n                var start = { line: 23, ch: 18 };\n\n                testEditor.setCursorPos(start);\n                await editorJumped({line: 3, ch: 6});\n            });\n\n\n        });\n\n /*       describe(\"JavaScript Code Hinting with modules\", function () {\n            var testPath = extensionPath + \"module-test-files/module_tests.js\";\n\n            beforeEach(function () {\n                await setupTest(testPath, true);\n            });\n\n            afterEach(function () {\n                tearDownTest();\n            });\n\n            it(\"should read methods created in submodule on this\", function () {\n                var start = { line: 8, ch: 17 };\n\n                runs(function () {\n                    testEditor.setCursorPos(start);\n                    var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                    await hintsPresentExact(hintObj, [\"addMessage\", \"name\", \"privilegedMethod\", \"publicMethod1\"]);\n                });\n            });\n\n            // bug: wait for fix in tern\n            it(\"should read methods created in submodule\", function () {\n                var start = { line: 19, ch: 15 };\n\n                runs(function () {\n                    testEditor.setCursorPos(start);\n                    var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                    await hintsPresentExact(hintObj, [\"addMessage\", \"name\", \"privilegedMethod\", \"publicMethod1\"]);\n                });\n            });\n\n            it(\"should read properties created in parent module\", function () {\n                var start        = { line: 30, ch: 8 },\n                    testPos          = { line: 30, ch: 15};\n\n                testDoc.replaceRange(\"parent.\", start);\n                runs(function () {\n                    testEditor.setCursorPos(testPos);\n                    var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                    await hintsPresentExact(hintObj, [\"addMessage\", \"name\", \"privilegedMethod\", \"publicMethod1\"]);\n                });\n            });\n\n            // bug: wait for tern\n            it(\"should read methods created in submodule module\", function () {\n                var start        = { line: 62, ch: 0 },\n                    testPos          = { line: 62, ch: 13};\n\n                testDoc.replaceRange(\"SearchEngine.\", start);\n                runs(function () {\n                    testEditor.setCursorPos(testPos);\n                    var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                    await hintsPresentExact(hintObj, [\"getYourLuckyNumber\", \"subSearch\"]);\n                });\n            });\n\n            it(\"should read methods created in parent module\", function () {\n                var start        = { line: 78, ch: 41 };\n\n                runs(function () {\n                    testEditor.setCursorPos(start);\n                    var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                    await hintsPresentExact(hintObj, [\"getYourLuckyNumber\", \"subSearch\"]);\n                });\n            });\n\n            it(\"should load module by file path from require\", function () {\n                var start        = { line: 88, ch: 20 };\n\n                runs(function () {\n                    testEditor.setCursorPos(start);\n                    var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                    await hintsPresentExact(hintObj, [\"color\", \"material\", \"size\"]);\n                });\n            });\n\n            // tern bug: https://github.com/marijnh/tern/issues/147\n            it(\"should read properties from exported module\", function () {\n                var start        = { line: 96, ch: 0 },\n                    testPos          = { line: 96, ch: 9};\n\n                testDoc.replaceRange(\"hondaCar.\", start);\n                runs(function () {\n                    testEditor.setCursorPos(testPos);\n                    var hintObj = expectHints(JSCodeHints.jsHintProvider);\n                    await hintsPresentExact(hintObj, [\"model\", \"name\"]);\n                });\n            });\n\n            // xit bug in test framework? can't run sequential jump, verification is wrong\n            it(\"should jump to a module, depending module\", function () {\n                var start        = { line: 93, ch: 25 },\n                    testPos      = { line: 8, ch: 35 };\n\n                testEditor.setCursorPos(start);\n                runs(function () {\n                    await editorJumped({line: 5, ch: 23});\n                });\n                testEditor.setCursorPos(testPos);\n                runs(function () {\n                    await editorJumped({line: 5, ch: 23});\n                });\n            });\n        });\n\n        describe(\"JavaScript Code Hinting preference tests\", function () {\n            var testPath = extensionPath + \"preference-test-files/\",\n                preferences;\n\n            function getPreferences(path) {\n                preferences = null;\n\n                FileSystem.resolve(path, function (err, file) {\n                    if (!err) {\n                        FileUtils.readAsText(file).done(function (text) {\n                            var configObj = null;\n                            try {\n                                configObj = JSON.parse(text);\n                            } catch (e) {\n                                // continue with null configObj\n                                console.log(e);\n                            }\n                            preferences = new Preferences(configObj);\n                        }).fail(function (error) {\n                            preferences = new Preferences();\n                        });\n                    } else {\n                        preferences = new Preferences();\n                    }\n                });\n            }\n\n            // Test preferences file with no entries. Preferences should contain\n            // default values.\n            it(\"should handle reading an empty configuration file\", function () {\n                getPreferences(testPath + \"defaults-test/.jscodehints\");\n                await awaitsFor(function () {\n                    return preferences !== null;\n                });\n\n                runs(function () {\n                    expect(preferences.getExcludedDirectories()).toEql(/node_modules/);\n                    expect(preferences.getExcludedFiles().source).\n                        toBe(/^require.*\\.js$|^jquery.*\\.js$/.source);\n                    expect(preferences.getMaxFileCount()).toBe(100);\n                    expect(preferences.getMaxFileSize()).toBe(512 * 1024);\n                });\n            });\n\n            // Test preferences file with empty or out of ranges values. Preferences\n            // should contain default values.\n            it(\"should handle reading an invalid configuration file\", function () {\n                getPreferences(testPath + \"negative-test/.jscodehints\");\n                await awaitsFor(function () {\n                    return preferences !== null;\n                });\n\n                runs(function () {\n                    expect(preferences.getExcludedDirectories()).toEql(/node_modules/);\n                    expect(preferences.getExcludedFiles().source).\n                        toBe(/^require.*\\.js$|^jquery.*\\.js$/.source);\n                    expect(preferences.getMaxFileCount()).toBe(100);\n                    expect(preferences.getMaxFileSize()).toBe(512 * 1024);\n                });\n            });\n\n            // Positive test. Test pattern matching.\n            it(\"should handle a valid configuration file\", function () {\n                getPreferences(testPath + \"positive-test/.jscodehints\");\n                await awaitsFor(function () {\n                    return preferences !== null;\n                });\n\n                runs(function () {\n                    var excludedDirs = preferences.getExcludedDirectories(),\n                        excludedFiles = preferences.getExcludedFiles();\n\n                    // test \"excluded-dir1\"\n                    expect(excludedDirs.test(\"excluded-dir1\")).toBeTruthy();\n                    expect(excludedDirs.test(\"xexcluded-dir1\")).toBeFalsy();\n\n                    // test \"excluded-dir2-*\"\n                    expect(excludedDirs.test(\"excluded-dir2-1\")).toBeTruthy();\n                    expect(excludedDirs.test(\"excluded-dir2-12\")).toBeFalsy();\n                    expect(excludedDirs.test(\"excluded-dir2-z\")).toBeFalsy();\n                    expect(excludedDirs.test(\"excluded-dir2-\")).toBeFalsy();\n                    expect(excludedDirs.test(\"xexcluded-dir2-1\")).toBeFalsy();\n\n                    // test \"file1?.js\"\n                    expect(excludedFiles.test(\"file1.js\")).toBeTruthy();\n                    expect(excludedFiles.test(\"file12.js\")).toBeTruthy();\n                    expect(excludedFiles.test(\"file123.js\")).toBeFalsy();\n\n                    // test \"file2*.js\"\n                    expect(excludedFiles.test(\"file2.js\")).toBeTruthy();\n                    expect(excludedFiles.test(\"file2xxx.js\")).toBeTruthy();\n                    expect(excludedFiles.test(\"filexxxx.js\")).toBeFalsy();\n\n                    // test \"file3.js\"\n                    expect(excludedFiles.test(\"file3.js\")).toBeTruthy();\n                    expect(excludedFiles.test(\"xfile3.js\")).toBeFalsy();\n\n                    // test \"/file4[x|y|z]?.js/\"\n                    expect(excludedFiles.test(\"file4.js\")).toBeTruthy();\n                    expect(excludedFiles.test(\"file4x.js\")).toBeTruthy();\n                    expect(excludedFiles.test(\"file4y.js\")).toBeTruthy();\n                    expect(excludedFiles.test(\"file4z.js\")).toBeTruthy();\n                    expect(excludedFiles.test(\"file4b.js\")).toBeFalsy();\n                    expect(excludedFiles.test(\"file4xyz.js\")).toBeFalsy();\n                    expect(excludedFiles.test(\"xfile4.js\")).toBeTruthy();\n\n                    // test builtin exclusions are also present\n                    expect(excludedFiles.test(\"require.js\")).toBeTruthy();\n                    expect(excludedFiles.test(\"jquery.js\")).toBeTruthy();\n\n                    expect(preferences.getMaxFileCount()).toBe(512);\n                    expect(preferences.getMaxFileSize()).toBe(100000);\n                });\n            });\n        });\n\n        describe(\"regression tests\", function () {\n\n            it(\"should return true for valid identifier, false for invalid one\", function () {\n                var identifierList = [\"ᾩ\", \"ĦĔĽĻŎ\", \"〱〱〱〱\", \"जावास्क्रि\",\n                                      \"KingGeorgeⅦ\", \"π\", \"ಠ_ಠ\",\n                                      \"price_9̶9̶_89\", \"$_3423\", \"TRUE\", \"FALSE\", \"IV\"];\n                var invalidIdentifierList = [\" break\", \"\\tif\", \"\\ntrade\"];\n\n                invalidIdentifierList.forEach(function (element) {\n                    var result = HintUtils.maybeIdentifier(element);\n                    expect(result).toBe(false);\n                });\n\n                identifierList.forEach(function (element) {\n                    var result = HintUtils.maybeIdentifier(element);\n                    expect(result).toBe(true);\n                });\n            });\n        });\n\n        describe(\"JavaScript Code Hinting with test.html file\", function () {\n            var testFile = extensionPath + \"basic-test-files/test.html\";\n\n            beforeEach(function () {\n                await setupTest(testFile, true);\n            });\n\n            afterEach(function () {\n                tearDownTest();\n\n            });\n\n            it(\"should jump to function name with double byte chars\", function () {\n                var start        = { line: 16, ch: 9 };\n\n                testEditor.setCursorPos(start);\n                runs(function () {\n                    await editorJumped({line: 12, ch: 20});\n                });\n            });\n\n            it(\"should jump to function name with non ascii chars\", function () {\n                var start        = { line: 16, ch: 12 };\n\n                testEditor.setCursorPos(start);\n                runs(function () {\n                    await editorJumped({line: 12, ch: 20});\n                });\n            });\n        });\n\n        describe(\"JavaScript Code Hinting format parameters tests\", function () {\n\n            it(\"should format parameters with no params\", function () {\n                var params = [];\n\n                expect(HintUtils2.formatParameterHint(params)).toBe(\"\");\n            });\n\n            it(\"should format parameters with one param\", function () {\n                var params = [{name: \"param1\", type: \"String\"}];\n\n                expect(HintUtils2.formatParameterHint(params)).toBe(\"String param1\");\n            });\n\n            it(\"should format parameters with one optional param\", function () {\n                var params = [{name: \"param1\", type: \"String\", isOptional: true}];\n\n                expect(HintUtils2.formatParameterHint(params)).toBe(\"[String param1]\");\n            });\n\n            it(\"should format parameters with one required, one optional param\", function () {\n                var params = [{name: \"param1\", type: \"String\"},\n                              {name: \"param2\", type: \"String\", isOptional: true}];\n\n                expect(HintUtils2.formatParameterHint(params)).toBe(\"String param1, [String param2]\");\n            });\n\n            it(\"should format parameters with required param following an optional param\", function () {\n                var params = [{name: \"param1\", type: \"String\"},\n                    {name: \"param2\", type: \"String\", isOptional: true},\n                    {name: \"param3\", type: \"String\"}];\n\n                expect(HintUtils2.formatParameterHint(params)).toBe(\"String param1, [String param2, String param3]\");\n            });\n\n            it(\"should format parameters with optional param following an optional param\", function () {\n                var params = [{name: \"param1\", type: \"String\"},\n                    {name: \"param2\", type: \"String\", isOptional: true},\n                    {name: \"param3\", type: \"String\", isOptional: true}];\n\n                expect(HintUtils2.formatParameterHint(params)).toBe(\"String param1, [String param2], [String param3]\");\n            });\n\n            it(\"should format parameters with optional param following optional and required params\", function () {\n                var params = [{name: \"param1\", type: \"String\"},\n                    {name: \"param2\", type: \"String\", isOptional: true},\n                    {name: \"param3\", type: \"String\"},\n                    {name: \"param4\", type: \"String\", isOptional: true}];\n\n                expect(HintUtils2.formatParameterHint(params)).toBe(\"String param1, [String param2, String param3], [String param4]\");\n            });\n\n        });*/\n    });\n});\n"],"file":"unittests.js"}