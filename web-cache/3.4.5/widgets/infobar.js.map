{"version":3,"sources":["widgets/infobar.js"],"names":["define","require","exports","module","MainViewManager","Mustache","EventDispatcher","InfoBarHtml","_","makeEventDispatcher","ESC_KEY","generateJsonForMustache","msgObj","msgJsonObj","type","title","description","cleanInfoBar","$infoBar","$","length","remove","window","document","off","showInfoBar","jsonToMustache","$infoBarElement","render","prependTo","$infoContent","find","$contentContainer","$iconContainer","$closeIconContainer","$heading","$description","$closeIcon","scrollWidth","innerWidth","attr","text","resizeContentContainer","newWidth","outerWidth","css","maxWidth","on","debounce","click","focusActivePane","event","code","which","stopImmediatePropagation"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,gBAAsBH,QAAQ,wBAC9BI,SAAsBJ,QAAQ,gCAC9BK,gBAAsBL,QAAQ,yBAC9BM,YAAsBN,QAAQ,0CAC9BO,EAAuBP,QAAQ,qBAEnCK,gBAAgBG,oBAAoBP,SAGpC,IAAIQ,QAAY,GAOhB,SAASC,wBAAwBC,QAC7B,IAAIC,WAAa,GAMjB,OALID,OAAOE,OACPD,WAAWC,KAAO,IAAMF,OAAOE,KAAO,KAE1CD,WAAWE,MAAQH,OAAOG,MAC1BF,WAAWG,YAAcJ,OAAOI,YACzBH,WAKX,SAASI,eACL,IAAIC,SAAWC,EAAE,sBACbD,SAASE,OAAS,GAClBF,SAASG,SAEbF,EAAEG,OAAOC,UAAUC,IAAI,8BACvBL,EAAEG,QAAQE,IAAI,0BAQlB,SAASC,YAAYb,QACjB,IAAIc,eAAiBf,wBAAwBC,QACzCe,gBAAkBR,EAAEd,SAASuB,OAAOrB,YAAamB,iBAErDT,eACAU,gBAAgBE,UAAU,YAE1B,IAAIX,SAAWC,EAAE,sBACbW,aAAeZ,SAASa,KAAK,iBAC7BC,kBAAoBd,SAASa,KAAK,sBAClCE,eAAiBf,SAASa,KAAK,mBAC/BG,oBAAsBhB,SAASa,KAAK,yBACpCI,SAAWjB,SAASa,KAAK,YACzBK,aAAelB,SAASa,KAAK,gBAC7BM,WAAanB,SAASa,KAAK,eAE3BD,aAAaV,OAAS,GAClBU,aAAa,GAAGQ,YAAcR,aAAaS,cAEvCP,kBAAkBZ,OAAS,GACvBe,SAASf,OAAS,GAClBgB,aAAahB,OAAS,GAC1BY,kBAAkBQ,KAAK,QAASL,SAASM,OAASL,aAAaK,QAM3E,IAAIC,uBAAyB,WACzB,GAAGZ,aAAaV,OAAS,GAAKY,kBAAkBZ,OAAS,GAAKF,SAASE,OAAS,EAAG,CAC/E,IAAIuB,SAAWzB,SAAS0B,aAAe,GACpCX,eAAeb,OAAS,IACvBuB,UAAsBV,eAAeW,cAEtCV,oBAAoBd,OAAS,IAC5BuB,UAAsBT,oBAAoBU,cAG9CZ,kBAAkBa,IAAI,CAClBC,SAAYH,aAKxBD,yBACAvB,EAAEG,QAAQyB,GAAG,yBAA0BvC,EAAEwC,SAASN,uBAAwB,MAItEL,WAAWjB,OAAS,GACpBiB,WAAWY,MAAM,WACbhC,eACAb,gBAAgB8C,oBAGxB/B,EAAEG,OAAOC,UAAUwB,GAAG,6BAA8B,SAAUI,OAC1D,IAAIC,KAAOD,MAAME,QACJ3C,UAETO,eACAb,gBAAgB8C,kBAChBC,MAAMG,8BAIlBpD,QAAQuB,YAAcA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2018 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var MainViewManager     = require(\"view/MainViewManager\"),\n        Mustache            = require(\"thirdparty/mustache/mustache\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        InfoBarHtml         = require(\"text!htmlContent/infobar-template.html\"),\n        _                   =  require(\"thirdparty/lodash\");\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    // Key handlers for buttons in UI\n    var ESC_KEY   = 27; // keycode for escape key\n\n    /**\n     * Generates the json to be used by Mustache for rendering\n     * @param   {object}   msgObj - json object containing message information to be displayed\n     * @returns {object} - the generated json object\n     */\n    function generateJsonForMustache(msgObj) {\n        var msgJsonObj = {};\n        if (msgObj.type) {\n            msgJsonObj.type = \"'\" + msgObj.type + \"'\";\n        }\n        msgJsonObj.title = msgObj.title;\n        msgJsonObj.description = msgObj.description;\n        return msgJsonObj;\n    }\n    /**\n     * Removes and cleans up the info bar from DOM\n     */\n    function cleanInfoBar() {\n        var $infoBar = $('#info-bar-template');\n        if ($infoBar.length > 0) {\n            $infoBar.remove();\n        }\n        $(window.document).off(\"keydown.InfoBarTemplateDoc\");\n        $(window).off('resize.InfoBarTemplate');\n    }\n\n    /**\n     * Displays the Info Bar UI\n     * @param   {object} msgObj - json object containing message info to be displayed\n     *\n     */\n    function showInfoBar(msgObj) {\n        var jsonToMustache = generateJsonForMustache(msgObj),\n            $infoBarElement = $(Mustache.render(InfoBarHtml, jsonToMustache));\n\n        cleanInfoBar(); //Remove an already existing info bar, if any\n        $infoBarElement.prependTo(\".content\");\n\n        var $infoBar = $('#info-bar-template'),\n            $infoContent = $infoBar.find('#info-content'),\n            $contentContainer = $infoBar.find('#content-container'),\n            $iconContainer = $infoBar.find('#icon-container'),\n            $closeIconContainer = $infoBar.find('#close-icon-container'),\n            $heading = $infoBar.find('#heading'),\n            $description = $infoBar.find('#description'),\n            $closeIcon = $infoBar.find('#close-icon');\n\n        if ($infoContent.length > 0) {\n            if ($infoContent[0].scrollWidth > $infoContent.innerWidth()) {\n            //Text has over-flown, show the info content as tooltip message\n                if ($contentContainer.length > 0 &&\n                        $heading.length > 0 &&\n                        $description.length > 0) {\n                    $contentContainer.attr(\"title\", $heading.text() + $description.text());\n                }\n            }\n        }\n        // Content Container Width between Icon Container and Button Container or Close Icon Container\n        // will be assigned when window will be rezied.\n        var resizeContentContainer = function () {\n            if($infoContent.length > 0 && $contentContainer.length > 0 && $infoBar.length > 0) {\n                var newWidth = $infoBar.outerWidth() - 38;\n                if($iconContainer.length > 0) {\n                    newWidth = newWidth - $iconContainer.outerWidth();\n                }\n                if($closeIconContainer.length > 0) {\n                    newWidth = newWidth - $closeIconContainer.outerWidth();\n                }\n\n                $contentContainer.css({\n                    \"maxWidth\": newWidth\n                });\n            }\n        };\n\n        resizeContentContainer();\n        $(window).on('resize.InfoBarTemplate', _.debounce(resizeContentContainer, 150));\n\n        //Event handlers on the Info Bar\n        // Click and key handlers on Close button\n        if ($closeIcon.length > 0) {\n            $closeIcon.click(function () {\n                cleanInfoBar();\n                MainViewManager.focusActivePane();\n            });\n        }\n        $(window.document).on(\"keydown.InfoBarTemplateDoc\", function (event) {\n            var code = event.which;\n            if (code === ESC_KEY) {\n                // Keyboard input of Esc key on Info Bar dismisses and removes the bar\n                cleanInfoBar();\n                MainViewManager.focusActivePane();\n                event.stopImmediatePropagation();\n            }\n        });\n    }\n    exports.showInfoBar = showInfoBar;\n});\n"],"file":"infobar.js"}