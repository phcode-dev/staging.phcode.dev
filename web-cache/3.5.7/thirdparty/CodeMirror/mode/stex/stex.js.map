{"version":3,"sources":["thirdparty/CodeMirror/mode/stex/stex.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_config","parserConfig","pushCommand","state","command","cmdState","push","peekCommand","length","popCommand","plug","pop","closeBracket","getMostPowerful","context","i","name","styleIdentifier","addPluginPattern","pluginName","cmdStyle","styles","this","bracketNo","style","argument","openBracket","plugins","setState","f","normal","source","match","cmdName","current","slice","hasOwnProperty","beginParams","inMathMode","ch","next","skipToEnd","test","eatWhile","endModeSeq","eatSpace","peek","lastPlug","eat","startState","copyState","s","token","stream","blankLine","lineComment","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/*\n * Author: Constantin Jucovschi (c.jucovschi@jacobs-university.de)\n * Licence: MIT\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"stex\", function(_config, parserConfig) {\n    \"use strict\";\n\n    function pushCommand(state, command) {\n      state.cmdState.push(command);\n    }\n\n    function peekCommand(state) {\n      if (state.cmdState.length > 0) {\n        return state.cmdState[state.cmdState.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    function popCommand(state) {\n      var plug = state.cmdState.pop();\n      if (plug) {\n        plug.closeBracket();\n      }\n    }\n\n    // returns the non-default plugin closest to the end of the list\n    function getMostPowerful(state) {\n      var context = state.cmdState;\n      for (var i = context.length - 1; i >= 0; i--) {\n        var plug = context[i];\n        if (plug.name == \"DEFAULT\") {\n          continue;\n        }\n        return plug;\n      }\n      return { styleIdentifier: function() { return null; } };\n    }\n\n    function addPluginPattern(pluginName, cmdStyle, styles) {\n      return function () {\n        this.name = pluginName;\n        this.bracketNo = 0;\n        this.style = cmdStyle;\n        this.styles = styles;\n        this.argument = null;   // \\begin and \\end have arguments that follow. These are stored in the plugin\n\n        this.styleIdentifier = function() {\n          return this.styles[this.bracketNo - 1] || null;\n        };\n        this.openBracket = function() {\n          this.bracketNo++;\n          return \"bracket\";\n        };\n        this.closeBracket = function() {};\n      };\n    }\n\n    var plugins = {};\n\n    plugins[\"importmodule\"] = addPluginPattern(\"importmodule\", \"tag\", [\"string\", \"builtin\"]);\n    plugins[\"documentclass\"] = addPluginPattern(\"documentclass\", \"tag\", [\"\", \"atom\"]);\n    plugins[\"usepackage\"] = addPluginPattern(\"usepackage\", \"tag\", [\"atom\"]);\n    plugins[\"begin\"] = addPluginPattern(\"begin\", \"tag\", [\"atom\"]);\n    plugins[\"end\"] = addPluginPattern(\"end\", \"tag\", [\"atom\"]);\n\n    plugins[\"label\"    ] = addPluginPattern(\"label\"    , \"tag\", [\"atom\"]);\n    plugins[\"ref\"      ] = addPluginPattern(\"ref\"      , \"tag\", [\"atom\"]);\n    plugins[\"eqref\"    ] = addPluginPattern(\"eqref\"    , \"tag\", [\"atom\"]);\n    plugins[\"cite\"     ] = addPluginPattern(\"cite\"     , \"tag\", [\"atom\"]);\n    plugins[\"bibitem\"  ] = addPluginPattern(\"bibitem\"  , \"tag\", [\"atom\"]);\n    plugins[\"Bibitem\"  ] = addPluginPattern(\"Bibitem\"  , \"tag\", [\"atom\"]);\n    plugins[\"RBibitem\" ] = addPluginPattern(\"RBibitem\" , \"tag\", [\"atom\"]);\n\n    plugins[\"DEFAULT\"] = function () {\n      this.name = \"DEFAULT\";\n      this.style = \"tag\";\n\n      this.styleIdentifier = this.openBracket = this.closeBracket = function() {};\n    };\n\n    function setState(state, f) {\n      state.f = f;\n    }\n\n    // called when in a normal (no environment) context\n    function normal(source, state) {\n      var plug;\n      // Do we look like '\\command' ?  If so, attempt to apply the plugin 'command'\n      if (source.match(/^\\\\[a-zA-Z@]+/)) {\n        var cmdName = source.current().slice(1);\n        plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins[\"DEFAULT\"];\n        plug = new plug();\n        pushCommand(state, plug);\n        setState(state, beginParams);\n        return plug.style;\n      }\n\n      // escape characters\n      if (source.match(/^\\\\[$&%#{}_]/)) {\n        return \"tag\";\n      }\n\n      // white space control characters\n      if (source.match(/^\\\\[,;!\\/\\\\]/)) {\n        return \"tag\";\n      }\n\n      // find if we're starting various math modes\n      if (source.match(\"\\\\[\")) {\n        setState(state, function(source, state){ return inMathMode(source, state, \"\\\\]\"); });\n        return \"keyword\";\n      }\n      if (source.match(\"\\\\(\")) {\n        setState(state, function(source, state){ return inMathMode(source, state, \"\\\\)\"); });\n        return \"keyword\";\n      }\n      if (source.match(\"$$\")) {\n        setState(state, function(source, state){ return inMathMode(source, state, \"$$\"); });\n        return \"keyword\";\n      }\n      if (source.match(\"$\")) {\n        setState(state, function(source, state){ return inMathMode(source, state, \"$\"); });\n        return \"keyword\";\n      }\n\n      var ch = source.next();\n      if (ch == \"%\") {\n        source.skipToEnd();\n        return \"comment\";\n      } else if (ch == '}' || ch == ']') {\n        plug = peekCommand(state);\n        if (plug) {\n          plug.closeBracket(ch);\n          setState(state, beginParams);\n        } else {\n          return \"error\";\n        }\n        return \"bracket\";\n      } else if (ch == '{' || ch == '[') {\n        plug = plugins[\"DEFAULT\"];\n        plug = new plug();\n        pushCommand(state, plug);\n        return \"bracket\";\n      } else if (/\\d/.test(ch)) {\n        source.eatWhile(/[\\w.%]/);\n        return \"atom\";\n      } else {\n        source.eatWhile(/[\\w\\-_]/);\n        plug = getMostPowerful(state);\n        if (plug.name == 'begin') {\n          plug.argument = source.current();\n        }\n        return plug.styleIdentifier();\n      }\n    }\n\n    function inMathMode(source, state, endModeSeq) {\n      if (source.eatSpace()) {\n        return null;\n      }\n      if (endModeSeq && source.match(endModeSeq)) {\n        setState(state, normal);\n        return \"keyword\";\n      }\n      if (source.match(/^\\\\[a-zA-Z@]+/)) {\n        return \"tag\";\n      }\n      if (source.match(/^[a-zA-Z]+/)) {\n        return \"variable-2\";\n      }\n      // escape characters\n      if (source.match(/^\\\\[$&%#{}_]/)) {\n        return \"tag\";\n      }\n      // white space control characters\n      if (source.match(/^\\\\[,;!\\/]/)) {\n        return \"tag\";\n      }\n      // special math-mode characters\n      if (source.match(/^[\\^_&]/)) {\n        return \"tag\";\n      }\n      // non-special characters\n      if (source.match(/^[+\\-<>|=,\\/@!*:;'\"`~#?]/)) {\n        return null;\n      }\n      if (source.match(/^(\\d+\\.\\d*|\\d*\\.\\d+|\\d+)/)) {\n        return \"number\";\n      }\n      var ch = source.next();\n      if (ch == \"{\" || ch == \"}\" || ch == \"[\" || ch == \"]\" || ch == \"(\" || ch == \")\") {\n        return \"bracket\";\n      }\n\n      if (ch == \"%\") {\n        source.skipToEnd();\n        return \"comment\";\n      }\n      return \"error\";\n    }\n\n    function beginParams(source, state) {\n      var ch = source.peek(), lastPlug;\n      if (ch == '{' || ch == '[') {\n        lastPlug = peekCommand(state);\n        lastPlug.openBracket(ch);\n        source.eat(ch);\n        setState(state, normal);\n        return \"bracket\";\n      }\n      if (/[ \\t\\r]/.test(ch)) {\n        source.eat(ch);\n        return null;\n      }\n      setState(state, normal);\n      popCommand(state);\n\n      return normal(source, state);\n    }\n\n    return {\n      startState: function() {\n        var f = parserConfig.inMathMode ? function(source, state){ return inMathMode(source, state); } : normal;\n        return {\n          cmdState: [],\n          f: f\n        };\n      },\n      copyState: function(s) {\n        return {\n          cmdState: s.cmdState.slice(),\n          f: s.f\n        };\n      },\n      token: function(stream, state) {\n        return state.f(stream, state);\n      },\n      blankLine: function(state) {\n        state.f = normal;\n        state.cmdState.length = 0;\n      },\n      lineComment: \"%\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-stex\", \"stex\");\n  CodeMirror.defineMIME(\"text/x-latex\", \"stex\");\n\n});\n"],"file":"stex.js"}