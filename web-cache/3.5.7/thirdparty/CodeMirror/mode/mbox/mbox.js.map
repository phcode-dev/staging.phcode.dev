{"version":3,"sources":["thirdparty/CodeMirror/mode/mbox/mbox.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","rfc2822","rfc2822NoEmail","registerHelper","concat","whitespace","separator","rfc2822Header","RegExp","join","rfc2822HeaderNoEmail","header","email","untilEmail","bracketedEmail","untilBracketedEmail","styleForHeader","readToken","stream","state","sol","inSeparator","inHeader","match","inHeaders","emailPermitted","skipToEnd","style","defineMode","startState","token","blankLine","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEA,IAAIC,QAAU,CACZ,OAAQ,SAAU,WAAY,KAAM,KAAM,MAAO,aACjD,cAAe,aAAc,cAAe,gBAAiB,YAC7D,YAAa,aAAc,oBAAqB,cAAe,YAE7DC,eAAiB,CACnB,OAAQ,UAAW,WAAY,WAAY,eAG7CF,WAAWG,eAAe,YAAa,OAAQF,QAAQG,OAAOF,iBAE9D,IAAIG,WAAa,SACbC,UAAY,SACZC,cAAgB,IAAIC,OAAO,KAAOP,QAAQQ,KAAK,KAAO,OACtDC,qBAAuB,IAAIF,OAAO,KAAON,eAAeO,KAAK,KAAO,OACpEE,OAAS,UACTC,MAAQ,eACRC,WAAa,uBACbC,eAAiB,SACjBC,oBAAsB,eAE1B,SAASC,eAAeL,QACtB,MAAe,YAAXA,OAA6B,SAC1B,SAGT,SAASM,UAAUC,OAAQC,OACzB,GAAID,OAAOE,MAAO,CAGhB,GADAD,MAAME,aAAc,EAChBF,MAAMG,UAAYJ,OAAOK,MAAMlB,YAEjC,OAAO,KAMT,GAJEc,MAAMG,UAAW,EACjBH,MAAMR,OAAS,KAGbO,OAAOK,MAAMjB,WAGf,OAFAa,MAAMK,WAAY,EAClBL,MAAME,aAAc,EACb,OAGT,IAAIE,MACAE,gBAAiB,EACrB,OAAKF,MAAQL,OAAOK,MAAMb,yBACrBe,gBAAiB,KAAUF,MAAQL,OAAOK,MAAMhB,iBACnDY,MAAMK,WAAY,EAClBL,MAAMG,UAAW,EACjBH,MAAMM,eAAiBA,eACvBN,MAAMR,OAASY,MAAM,GACd,QAKLJ,MAAMK,YAAcD,MAAQL,OAAOK,MAAMZ,UAC3CQ,MAAMG,UAAW,EACjBH,MAAMM,gBAAiB,EACvBN,MAAMR,OAASY,MAAM,GACd,SAGTJ,MAAMK,WAAY,EAClBN,OAAOQ,YACA,MAGT,GAAIP,MAAME,YACR,OAAIH,OAAOK,MAAMX,OAAe,OAC5BM,OAAOK,MAAMV,YAAoB,QACrCK,OAAOQ,YACA,QAGT,GAAIP,MAAMG,SAAU,CAClB,IAAIK,MAAQX,eAAeG,MAAMR,QAEjC,GAAIQ,MAAMM,eAAgB,CACxB,GAAIP,OAAOK,MAAMT,gBAAiB,OAAOa,MAAQ,QACjD,GAAIT,OAAOK,MAAMR,qBAAsB,OAAOY,MAGhD,OADAT,OAAOQ,YACAC,MAIT,OADAT,OAAOQ,YACA,KAGT1B,WAAW4B,WAAW,OAAQ,WAC5B,MAAO,CACLC,WAAY,WACV,MAAO,CAELR,aAAa,EAEbC,UAAU,EAEVG,gBAAgB,EAEhBd,OAAQ,KAERa,WAAW,IAGfM,MAAOb,UACPc,UAAW,SAASZ,OAClBA,MAAMK,UAAYL,MAAME,YAAcF,MAAMG,UAAW,MAK7DtB,WAAWgC,WAAW,mBAAoB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nCodeMirror.registerHelper(\"hintWords\", \"mbox\", rfc2822.concat(rfc2822NoEmail));\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nCodeMirror.defineMode(\"mbox\", function() {\n  return {\n    startState: function() {\n      return {\n        // Is in a mbox separator\n        inSeparator: false,\n        // Is in a mail header\n        inHeader: false,\n        // If bracketed email is permitted. Only applicable when inHeader\n        emailPermitted: false,\n        // Name of current header\n        header: null,\n        // Is in a region of mail headers\n        inHeaders: false\n      };\n    },\n    token: readToken,\n    blankLine: function(state) {\n      state.inHeaders = state.inSeparator = state.inHeader = false;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"application/mbox\", \"mbox\");\n});\n"],"file":"mbox.js"}