{"version":3,"sources":["thirdparty/CodeMirror/mode/dylan/dylan.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","forEach","arr","f","i","length","some","defineMode","_config","words","unnamedDefinition","namedDefinition","typeParameterizedDefinition","otherParameterizedDefinition","constantSimpleDefinition","variableSimpleDefinition","otherSimpleDefinition","statement","separator","other","signalingCalls","concat","symbolPattern","symbol","RegExp","patterns","symbolKeyword","symbolClass","symbolGlobal","symbolConstant","patternStyles","patternName","hasOwnProperty","styles","keyword","definition","simpleDefinition","wordLookup","styleLookup","chain","stream","state","tokenize","tokenBase","ch","peek","next","tokenString","eat","tokenComment","skipToEnd","backUp","test","match","eatWhile","indexOf","name","pattern","Array","p","current","maybeEnd","maybeNested","nestedCount","quote","style","escaped","end","type","word","startState","currentIndent","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEA,SAASC,QAAQC,IAAKC,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,IAAIG,OAAQD,IAAKD,EAAED,IAAIE,GAAIA,GAEjD,SAASE,KAAKJ,IAAKC,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,IAAIG,OAAQD,IAAK,GAAID,EAAED,IAAIE,GAAIA,GAAI,OAAO,EAC9D,OAAO,EAGTJ,WAAWO,WAAW,QAAS,SAASC,SAEtC,IAAIC,MAAQ,CAEVC,kBAAmB,CAAC,aAGpBC,gBAAiB,CAAC,SAAU,UAAW,QACrB,WAAY,UACZ,aAAc,sBAMhCC,4BAA6B,CAAC,QAAS,YAAa,oBAIpDC,6BAA8B,CAAC,SAAU,WACV,aAAc,aAM7CC,yBAA0B,CAAC,YAK3BC,yBAA0B,CAAC,YAI3BC,sBAAuB,CAAC,UAAW,SACX,iBACA,SAIxBC,UAAW,CAAC,KAAM,QAAS,QAAS,SAAU,OAClC,MAAO,SAAU,OAAQ,SAAU,QACnC,QAAS,UAAW,YAAa,gBAM7CC,UAAW,CAAC,UAAW,YAAa,UAAW,OACnC,SAAU,cAKtBC,MAAO,CAAC,QAAS,QAAS,KAAM,OAAQ,UAAW,KAC3C,WAAY,MAAO,QAAS,YAAa,OACzC,WAAY,OAAQ,KAAM,WAAY,WAI9CC,eAAgB,CAAC,SAAU,QAAS,SACnB,QAAS,aAAc,UAI1CX,MAAuB,gBACrBA,MAAyB,kBACxBY,OAAOZ,MAAuB,iBAC9BY,OAAOZ,MAAoC,8BAE9CA,MAAkB,WAChBA,MAAmC,4BAClCY,OAAOZ,MAAuB,iBAEjCA,MAA+B,wBAC7BA,MAAmC,4BAClCY,OAAOZ,MAAoC,8BAE9CA,MAAwB,iBACtBA,MAAgC,yBAC/BY,OAAOZ,MAAgC,0BACvCY,OAAOZ,MAA6B,uBAEvCA,MAAe,QACbA,MAAiB,UAChBY,OAAOZ,MAAiB,WACxBY,OAAOZ,MAAa,OAGvB,IAAIa,cAAgB,sBAChBC,OAAS,IAAIC,OAAO,IAAMF,eAC1BG,SAAW,CAEbC,cAAeJ,cAAgB,IAC/BK,YAAa,IAAML,cAAgB,IACnCM,aAAc,MAAQN,cAAgB,MACtCO,eAAgB,MAAQP,eAEtBQ,cAAgB,CAClBJ,cAAe,OACfC,YAAa,MACbC,aAAc,aACdC,eAAgB,cAIlB,IAAK,IAAIE,eAAeN,SAClBA,SAASO,eAAeD,eAC1BN,SAASM,aAAe,IAAIP,OAAO,IAAMC,SAASM,eAItDN,SAAkB,QAAI,CAAC,qCAEvB,IAAIQ,OAAS,CACbC,QAAoB,UACpBC,WAAuB,MACvBC,iBAA6B,MAC7BhB,eAA2B,WAGvBiB,WAAa,GACbC,YAAc,GAelB,SAASC,MAAMC,OAAQC,MAAOtC,GAE5B,OADAsC,MAAMC,SAAWvC,EACVA,EAAEqC,OAAQC,OAGnB,SAASE,UAAUH,OAAQC,OAEzB,IAAIG,GAAKJ,OAAOK,OAChB,GAAU,KAAND,IAAmB,KAANA,GAEf,OADAJ,OAAOM,OACAP,MAAMC,OAAQC,MAAOM,YAAYH,GAAI,WAGzC,GAAU,KAANA,GAAW,CAElB,GADAJ,OAAOM,OACHN,OAAOQ,IAAI,KACb,OAAOT,MAAMC,OAAQC,MAAOQ,cACvB,GAAIT,OAAOQ,IAAI,KAEpB,OADAR,OAAOU,YACA,UAETV,OAAOW,OAAO,QAGX,GAAI,YAAYC,KAAKR,KACxB,GAAIJ,OAAOa,MAAM,8CACbb,OAAOa,MAAM,qCACbb,OAAOa,MAAM,aACf,MAAO,aAIN,CAAA,GAAU,KAANT,GAIP,OAHAJ,OAAOM,OAGG,MADVF,GAAKJ,OAAOK,SAEVL,OAAOM,OACAP,MAAMC,OAAQC,MAAOM,YAAY,IAAK,YAGhC,KAANH,IACPJ,OAAOM,OACPN,OAAOc,SAAS,QACT,UAGM,KAANV,IACPJ,OAAOM,OACPN,OAAOc,SAAS,YACT,UAGM,KAANV,IACPJ,OAAOM,OACPN,OAAOc,SAAS,SACT,UAGM,KAANV,IACPJ,OAAOM,OACA,eAGO,KAANF,IAAqB,KAANA,IACvBJ,OAAOM,OACA,WAEEN,OAAOa,MAAM,uCACf,QAEPb,OAAOc,SAAS,aACT,SAEJ,GAAU,KAANV,GAGT,OAFAJ,OAAOM,OAEG,MADVF,GAAKJ,OAAOK,SAEVL,OAAOM,OAEG,MADVF,GAAKJ,OAAOK,SAEVL,OAAOM,OACA,YAEF,YAEF,WACF,GAAU,KAANF,GAAW,CAGpB,GAFAJ,OAAOM,OAEG,MADVF,GAAKJ,OAAOK,QAGV,OADAL,OAAOM,OACA,WACF,GAAU,KAANF,GAET,OADAJ,OAAOM,OACA,kBAEJ,CAAA,IAA6B,GAAzB,SAASS,QAAQX,IAE1B,OADAJ,OAAOM,OACA,UACF,IAAyB,GAArB,KAAKS,QAAQX,IAEtB,OADAJ,OAAOM,OACA,cACF,GAAIN,OAAOa,MAAM,OACtB,MAAO,WAET,IAAK,IAAIG,QAAQ/B,SACf,GAAIA,SAASO,eAAewB,MAAO,CACjC,IAAIC,QAAUhC,SAAS+B,MACvB,GAAKC,mBAAmBC,OAASpD,KAAKmD,QAAS,SAASE,GACtD,OAAOnB,OAAOa,MAAMM,MACfnB,OAAOa,MAAMI,SAClB,OAAO3B,cAAc0B,MAG3B,MAAI,iBAAiBJ,KAAKR,KACxBJ,OAAOM,OACA,YAELN,OAAOa,MAAM,UACR,OAEPb,OAAOc,SAAS,UAEZjB,WAAWL,eAAeQ,OAAOoB,WAC5BtB,YAAYE,OAAOoB,WACjBpB,OAAOoB,UAAUP,MAAM9B,QACzB,YAEPiB,OAAOM,OACA,eAKb,SAASG,aAAaT,OAAQC,OAE5B,IADA,IAAIoB,UAAW,EAAOC,aAAc,EAAOC,YAAc,EAAGnB,GACpDA,GAAKJ,OAAOM,QAAS,CAC3B,GAAU,KAANF,IAAaiB,SAAU,CACzB,KAAIE,YAAc,GAEX,CACLtB,MAAMC,SAAWC,UACjB,MAHAoB,kBAKa,KAANnB,IAAakB,aACtBC,cAEFF,SAAkB,KAANjB,GACZkB,YAAqB,KAANlB,GAEjB,MAAO,UAGT,SAASG,YAAYiB,MAAOC,OAC1B,OAAO,SAASzB,OAAQC,OAEtB,IADA,IAAIyB,SAAU,EAAOpB,KAAMqB,KAAM,EACA,OAAzBrB,KAAON,OAAOM,SAAiB,CACrC,GAAIA,MAAQkB,QAAUE,QAAS,CAC7BC,KAAM,EACN,MAEFD,SAAWA,SAAmB,MAARpB,KAKxB,OAHIqB,KAAQD,UACVzB,MAAMC,SAAWC,WAEZsB,OAKX,OAzLAhE,QAAQ,CACN,UACA,aACA,mBACA,kBACC,SAASmE,MACVnE,QAAQQ,MAAM2D,MAAO,SAASC,MAC5BhC,WAAWgC,MAAQD,KACnB9B,YAAY+B,MAAQpC,OAAOmC,UAiLxB,CACLE,WAAY,WACV,MAAO,CACL5B,SAAUC,UACV4B,cAAe,IAGnBC,MAAO,SAAShC,OAAQC,OACtB,OAAID,OAAOiC,WACF,KACGhC,MAAMC,SAASF,OAAQC,OAAnC,IAAIwB,OAGNS,kBAAmB,KACnBC,gBAAiB,QAIrB3E,WAAW4E,WAAW,eAAgB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction forEach(arr, f) {\n  for (var i = 0; i < arr.length; i++) f(arr[i], i)\n}\nfunction some(arr, f) {\n  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true\n  return false\n}\n\nCodeMirror.defineMode(\"dylan\", function(_config) {\n  // Words\n  var words = {\n    // Words that introduce unnamed definitions like \"define interface\"\n    unnamedDefinition: [\"interface\"],\n\n    // Words that introduce simple named definitions like \"define library\"\n    namedDefinition: [\"module\", \"library\", \"macro\",\n                      \"C-struct\", \"C-union\",\n                      \"C-function\", \"C-callable-wrapper\"\n                     ],\n\n    // Words that introduce type definitions like \"define class\".\n    // These are also parameterized like \"define method\" and are\n    // appended to otherParameterizedDefinitionWords\n    typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n\n    // Words that introduce trickier definitions like \"define method\".\n    // These require special definitions to be added to startExpressions\n    otherParameterizedDefinition: [\"method\", \"function\",\n                                   \"C-variable\", \"C-address\"\n                                  ],\n\n    // Words that introduce module constant definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    constantSimpleDefinition: [\"constant\"],\n\n    // Words that introduce module variable definitions.\n    // These must also be simple definitions and are\n    // appended to otherSimpleDefinitionWords\n    variableSimpleDefinition: [\"variable\"],\n\n    // Other words that introduce simple definitions\n    // (without implicit bodies).\n    otherSimpleDefinition: [\"generic\", \"domain\",\n                            \"C-pointer-type\",\n                            \"table\"\n                           ],\n\n    // Words that begin statements with implicit bodies.\n    statement: [\"if\", \"block\", \"begin\", \"method\", \"case\",\n                \"for\", \"select\", \"when\", \"unless\", \"until\",\n                \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"\n               ],\n\n    // Patterns that act as separators in compound statements.\n    // This may include any general pattern that must be indented\n    // specially.\n    separator: [\"finally\", \"exception\", \"cleanup\", \"else\",\n                \"elseif\", \"afterwards\"\n               ],\n\n    // Keywords that do not require special indentation handling,\n    // but which should be highlighted\n    other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\",\n            \"instance\", \"let\", \"local\", \"otherwise\", \"slot\",\n            \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"\n           ],\n\n    // Condition signaling function calls\n    signalingCalls: [\"signal\", \"error\", \"cerror\",\n                     \"break\", \"check-type\", \"abort\"\n                    ]\n  };\n\n  words[\"otherDefinition\"] =\n    words[\"unnamedDefinition\"]\n    .concat(words[\"namedDefinition\"])\n    .concat(words[\"otherParameterizedDefinition\"]);\n\n  words[\"definition\"] =\n    words[\"typeParameterizedDefinition\"]\n    .concat(words[\"otherDefinition\"]);\n\n  words[\"parameterizedDefinition\"] =\n    words[\"typeParameterizedDefinition\"]\n    .concat(words[\"otherParameterizedDefinition\"]);\n\n  words[\"simpleDefinition\"] =\n    words[\"constantSimpleDefinition\"]\n    .concat(words[\"variableSimpleDefinition\"])\n    .concat(words[\"otherSimpleDefinition\"]);\n\n  words[\"keyword\"] =\n    words[\"statement\"]\n    .concat(words[\"separator\"])\n    .concat(words[\"other\"]);\n\n  // Patterns\n  var symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\n  var symbol = new RegExp(\"^\" + symbolPattern);\n  var patterns = {\n    // Symbols with special syntax\n    symbolKeyword: symbolPattern + \":\",\n    symbolClass: \"<\" + symbolPattern + \">\",\n    symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n    symbolConstant: \"\\\\$\" + symbolPattern\n  };\n  var patternStyles = {\n    symbolKeyword: \"atom\",\n    symbolClass: \"tag\",\n    symbolGlobal: \"variable-2\",\n    symbolConstant: \"variable-3\"\n  };\n\n  // Compile all patterns to regular expressions\n  for (var patternName in patterns)\n    if (patterns.hasOwnProperty(patternName))\n      patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n  // Names beginning \"with-\" and \"without-\" are commonly\n  // used as statement macro\n  patterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\n\n  var styles = {};\n  styles[\"keyword\"] = \"keyword\";\n  styles[\"definition\"] = \"def\";\n  styles[\"simpleDefinition\"] = \"def\";\n  styles[\"signalingCalls\"] = \"builtin\";\n\n  // protected words lookup table\n  var wordLookup = {};\n  var styleLookup = {};\n\n  forEach([\n    \"keyword\",\n    \"definition\",\n    \"simpleDefinition\",\n    \"signalingCalls\"\n  ], function(type) {\n    forEach(words[type], function(word) {\n      wordLookup[word] = type;\n      styleLookup[word] = styles[type];\n    });\n  });\n\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenBase(stream, state) {\n    // String\n    var ch = stream.peek();\n    if (ch == \"'\" || ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString(ch, \"string\"));\n    }\n    // Comment\n    else if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n    // Decimal\n    else if (/[+\\-\\d\\.]/.test(ch)) {\n      if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||\n          stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||\n          stream.match(/^[+-]?\\d+/)) {\n        return \"number\";\n      }\n    }\n    // Hash\n    else if (ch == \"#\") {\n      stream.next();\n      // Symbol with string syntax\n      ch = stream.peek();\n      if (ch == '\"') {\n        stream.next();\n        return chain(stream, state, tokenString('\"', \"string\"));\n      }\n      // Binary number\n      else if (ch == \"b\") {\n        stream.next();\n        stream.eatWhile(/[01]/);\n        return \"number\";\n      }\n      // Hex number\n      else if (ch == \"x\") {\n        stream.next();\n        stream.eatWhile(/[\\da-f]/i);\n        return \"number\";\n      }\n      // Octal number\n      else if (ch == \"o\") {\n        stream.next();\n        stream.eatWhile(/[0-7]/);\n        return \"number\";\n      }\n      // Token concatenation in macros\n      else if (ch == '#') {\n        stream.next();\n        return \"punctuation\";\n      }\n      // Sequence literals\n      else if ((ch == '[') || (ch == '(')) {\n        stream.next();\n        return \"bracket\";\n      // Hash symbol\n      } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n        return \"atom\";\n      } else {\n        stream.eatWhile(/[-a-zA-Z]/);\n        return \"error\";\n      }\n    } else if (ch == \"~\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        ch = stream.peek();\n        if (ch == \"=\") {\n          stream.next();\n          return \"operator\";\n        }\n        return \"operator\";\n      }\n      return \"operator\";\n    } else if (ch == \":\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        return \"operator\";\n      } else if (ch == \":\") {\n        stream.next();\n        return \"punctuation\";\n      }\n    } else if (\"[](){}\".indexOf(ch) != -1) {\n      stream.next();\n      return \"bracket\";\n    } else if (\".,\".indexOf(ch) != -1) {\n      stream.next();\n      return \"punctuation\";\n    } else if (stream.match(\"end\")) {\n      return \"keyword\";\n    }\n    for (var name in patterns) {\n      if (patterns.hasOwnProperty(name)) {\n        var pattern = patterns[name];\n        if ((pattern instanceof Array && some(pattern, function(p) {\n          return stream.match(p);\n        })) || stream.match(pattern))\n          return patternStyles[name];\n      }\n    }\n    if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n      stream.next();\n      return \"operator\";\n    }\n    if (stream.match(\"define\")) {\n      return \"def\";\n    } else {\n      stream.eatWhile(/[\\w\\-]/);\n      // Keyword\n      if (wordLookup.hasOwnProperty(stream.current())) {\n        return styleLookup[stream.current()];\n      } else if (stream.current().match(symbol)) {\n        return \"variable\";\n      } else {\n        stream.next();\n        return \"variable-2\";\n      }\n    }\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n    while ((ch = stream.next())) {\n      if (ch == \"/\" && maybeEnd) {\n        if (nestedCount > 0) {\n          nestedCount--;\n        } else {\n          state.tokenize = tokenBase;\n          break;\n        }\n      } else if (ch == \"*\" && maybeNested) {\n        nestedCount++;\n      }\n      maybeEnd = (ch == \"*\");\n      maybeNested = (ch == \"/\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote, style) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) {\n        state.tokenize = tokenBase;\n      }\n      return style;\n    };\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        currentIndent: 0\n      };\n    },\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    },\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-dylan\", \"dylan\");\n\n});\n"],"file":"dylan.js"}