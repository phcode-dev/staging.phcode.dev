{"version":3,"sources":["thirdparty/CodeMirror/addon/fold/brace-fold.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","bracketFolding","pairs","cm","start","line","lineText","getLine","findOpening","pair","tokenType","at","ch","pass","found","lastIndexOf","getTokenTypeAt","Pos","test","length","findRange","count","lastLine","end","startCh","endCh","outer","i","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to","open","push","sort","a","b","range","registerHelper","hasImport","firstLine","getTokenAt","string","type","e","semi","startLine","has","prev","next","clipPos","hasInclude","slice"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction bracketFolding(pairs) {\n  return function(cm, start) {\n    var line = start.line, lineText = cm.getLine(line);\n\n    function findOpening(pair) {\n      var tokenType;\n      for (var at = start.ch, pass = 0;;) {\n        var found = at <= 0 ? -1 : lineText.lastIndexOf(pair[0], at - 1);\n        if (found == -1) {\n          if (pass == 1) break;\n          pass = 1;\n          at = lineText.length;\n          continue;\n        }\n        if (pass == 1 && found < start.ch) break;\n        tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n        if (!/^(comment|string)/.test(tokenType)) return {ch: found + 1, tokenType: tokenType, pair: pair};\n        at = found - 1;\n      }\n    }\n\n    function findRange(found) {\n      var count = 1, lastLine = cm.lastLine(), end, startCh = found.ch, endCh\n      outer: for (var i = line; i <= lastLine; ++i) {\n        var text = cm.getLine(i), pos = i == line ? startCh : 0;\n        for (;;) {\n          var nextOpen = text.indexOf(found.pair[0], pos), nextClose = text.indexOf(found.pair[1], pos);\n          if (nextOpen < 0) nextOpen = text.length;\n          if (nextClose < 0) nextClose = text.length;\n          pos = Math.min(nextOpen, nextClose);\n          if (pos == text.length) break;\n          if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == found.tokenType) {\n            if (pos == nextOpen) ++count;\n            else if (!--count) { end = i; endCh = pos; break outer; }\n          }\n          ++pos;\n        }\n      }\n\n      if (end == null || line == end) return null\n      return {from: CodeMirror.Pos(line, startCh),\n              to: CodeMirror.Pos(end, endCh)};\n    }\n\n    var found = []\n    for (var i = 0; i < pairs.length; i++) {\n      var open = findOpening(pairs[i])\n      if (open) found.push(open)\n    }\n    found.sort(function(a, b) { return a.ch - b.ch })\n    for (var i = 0; i < found.length; i++) {\n      var range = findRange(found[i])\n      if (range) return range\n    }\n    return null\n  }\n}\n\nCodeMirror.registerHelper(\"fold\", \"brace\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"]]));\n\nCodeMirror.registerHelper(\"fold\", \"brace-paren\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]));\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n"],"file":"brace-fold.js"}