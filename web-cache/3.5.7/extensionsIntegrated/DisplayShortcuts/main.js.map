{"version":3,"sources":["extensionsIntegrated/DisplayShortcuts/main.js"],"names":["define","require","exports","module","_","CodeMirror","CommandManager","Commands","KeyBindingManager","MainViewManager","Menus","Mustache","EditorManager","Dialogs","Metrics","WorkspaceManager","AppInit","Strings","panelHtml","shortcutsHtml","TOGGLE_SHORTCUTS_ID","HELP_TOGGLE_SHORTCUTS_PANEL","keyList","panel","$shortcutsPanel","$filterField","currentFilter","_updateKeyBindings","sortByBase","sortByBinding","sortByCmdId","sortByCmdName","sortByOrig","sortColumn","sortAscending","origBrackets","APP_NAME","origCodeMirror","window","debugMode","origExtension","KEYBOARD_SHORTCUT_ORIG_EXTENSION","_getBaseKey","keyBinding","keyBase","replace","brackets","platform","_findKeyBinding","kl","j","length","_ucFirst","string","charAt","toUpperCase","slice","_humanizeString","split","map","join","_getOriginFromCommandId","cmdID","idArray","defaultCommands","Object","values","q1","toLowerCase","includes","startsWith","_filterFromKeyBinding","text","_getkeyList","i","base","command","key","bracketsKeymap","getKeymap","hasOwnProperty","get","commandID","on","push","formatKeyDescriptor","keyBindingDisplay","commandName","getName","origin","filter","keyMap","cmKeymap","macDefault","pcDefault","_strcmp","a","b","_stricmp","_keyBaseSort","a2","b2","c","_keyBindingSort","_keyCmdIdSort","_keyCmdNameSort","_keyOrigSort","_getSortFunc","_getShortcutsHtml","msData","sort","render","_changeSorting","newSortColumn","_showShortcuts","_filterShortcuts","forceFiltering","terms","val","trim","toLocaleLowerCase","$","each","match","term","indexOf","filterMatch","_clearSortingEventHandlers","$shortcuts","off","find","html","eq","addClass","_showCommandIdsInPanelIfNeeded","click","event","commandId","target","getAttribute","Phoenix","app","copyToClipboard","initKeyList","destroyKeyList","_handleShowHideShortcuts","isVisible","hide","setChecked","focusActivePane","countEvent","EVENT_TYPE","KEYBOARD","show","focus","recomputeLayout","editor","getActiveEditor","document","file","fullPath","_getUserKeyMapFilePath","removeClass","debounce","appReady","s","file_menu","register","KEYBOARD_SHORTCUT_MENU_SHOW_SHORTCUTS","getMenu","AppMenuBar","FILE_MENU","addMenuItem","BEFORE","FILE_EXTENSION_MANAGER","createBottomPanel","e","$rowEl","closest","showShortcutSelectionDialog","dataset","commandid","execute","showConfirmDialog","KEYBOARD_SHORTCUT_RESET_DIALOG_TITLE","KEYBOARD_SHORTCUT_RESET_DIALOG_MESSAGE","done","selection","DIALOG_BTN_OK","resetUserShortcutsAsync","_event","newEditor","getChecked"],"mappings":"AAyBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,MAAMC,EAAsBH,QAAQ,qBAChCI,WAAsBJ,QAAQ,wCAC9BK,eAAsBL,QAAQ,0BAC9BM,SAAsBN,QAAQ,oBAC9BO,kBAAsBP,QAAQ,6BAC9BQ,gBAAsBR,QAAQ,wBAC9BS,MAAsBT,QAAQ,iBAC9BU,SAAsBV,QAAQ,gCAC9BW,cAAsBX,QAAQ,wBAC9BY,QAAsBZ,QAAQ,mBAC9Ba,QAAgBb,QAAQ,iBACxBc,iBAAsBd,QAAQ,yBAC9Be,QAAsBf,QAAQ,iBAC9BgB,QAAsBhB,QAAQ,WAE5BiB,UAAsBjB,QAAQ,sCAChCkB,cAAsBlB,QAAQ,wCAC9BmB,oBAAsBb,SAASc,4BACnC,IAAIC,QAAU,GACVC,MACAC,gBACAC,aACAC,cACAC,mBAEAC,WAAa,EACbC,cAAgB,EAChBC,YAAc,EACdC,cAAgB,EAChBC,WAAa,EACbC,WAAaL,WACbM,eAAgB,EAEhBC,aAAelB,QAAQmB,SACvBC,eAAiBC,OAAOC,UAAW,aAActB,QAAQmB,SACzDI,cAAgBvB,QAAQwB,iCAG5B,SAASC,YAAYC,YACjB,IAAIC,QAAUD,WACTE,QAAQ,QAAS,IACjBA,QAAQ,SAAU,IAClBA,QAAQ,OAAQ,IAIrB,MAH0B,QAAtBC,SAASC,WACTH,QAAUA,QAAQC,QAAQ,OAAQ,KAE/BD,QAGX,SAASI,gBAAgBC,GAAIN,YACzB,IAAIO,EACJ,IAAKA,EAAI,EAAGA,EAAID,GAAGE,OAAQD,IACvB,GAAIP,aAAeM,GAAGC,GAAGP,WACrB,OAAOO,EAGf,OAAQ,EAGZ,SAASE,SAASC,QACd,OAAOA,OAAOC,OAAO,GAAGC,cAAgBF,OAAOG,MAAM,GAKzD,SAASC,gBAAgBJ,QAQrB,OAFAA,QAFAA,QAFAA,OAASA,OAAOR,QAAQ,KAAM,KAAKA,QAAQ,WAAY,QAEvCA,QAAQ,SAAU,IAAIA,QAAQ,SAAU,KAExCa,MAAM,OAAOC,IAAIP,UAAUQ,KAAK,KAKpD,SAASC,wBAAwBC,OAK7B,IAAIC,QAAUD,MAAMJ,MAAM,KAC1B,MAAMM,gBAAkBC,OAAOC,OAAO3D,UAGtC,IAAI4D,GAAKJ,QAAQ,GAAGK,cACpB,OAAIJ,gBAAgBK,SAASP,QAAiB,SAAPK,IAAwB,SAAPA,IAAwB,SAAPA,IAAwB,aAAPA,IAA4B,UAAPA,IAAyB,SAAPA,IAC7HL,MAAMQ,WAAW,aAAeR,MAAMQ,WAAW,iBAAmBR,MAAMQ,WAAW,gBAAkBR,MAAMQ,WAAW,iBACxHR,MAAMQ,WAAW,iBAAmBR,MAAMQ,WAAW,mBAA8B,sBAATR,MACnE3B,aAEP4B,QAAQZ,OAAS,EAEVX,cAAgB,KAAOiB,gBAAgBM,QAAQ,IAAM,KACrDA,QAAQZ,OAERX,eAOf,SAAS+B,sBAAsBC,MAG3B,UADAA,KAAOA,MAAQ,IACAJ,iBAAiBI,KAAK3B,QAAQ,IAAK,KAAKuB,gBAK3D,SAASK,cACL,IAAIC,EACAC,KACAC,QACAC,IAGAC,eAAiBtE,kBAAkBuE,YACvC,GAAID,eACA,IAAKJ,KAAKI,eACN,GAAIA,eAAeE,eAAeN,KAC9BG,IAAMC,eAAeJ,IACZ,CAGL,GAFAC,KAAOjC,YAAYgC,KACnBE,QAAUtE,eAAe2E,IAAIJ,IAAIK,YAE7B,SAIJN,QAAQO,GAAG,4CAA6CxD,oBAExDL,QAAQ8D,KAAK,CACTxC,QAASpC,kBAAkB6E,oBAAoBV,MAC/ChC,WAAY+B,EACZY,kBAAmB9E,kBAAkB6E,oBAAoBX,GACzDE,QAASA,QACTM,UAAWL,IAAIK,UACfK,YAAaX,QAAQY,UACrBC,OAAQ5B,wBAAwBgB,IAAIK,WACpCQ,OAAQd,QAAQY,UAAUpB,cAAiBG,sBAAsBG,KAQrF,GAAIrE,WAAWsF,OAAQ,CACnB,IAAIC,SAAkC,QAAtB9C,SAASC,SAAsB1C,WAAWsF,OAAOE,WAAaxF,WAAWsF,OAAOG,UAChG,GAAIF,SACA,IAAKlB,KAAKkB,SAGFA,SAASZ,eAAeN,IACb,gBAANA,IACiC,IAAjC1B,gBAAgB1B,QAASoD,KAC9BC,KAAOjC,YAAYgC,GACnBpD,QAAQ8D,KAAK,CACTxC,QAASpC,kBAAkB6E,oBAAoBV,MAC/ChC,WAAY+B,EACZY,kBAAmB9E,kBAAkB6E,oBAAoBX,GACzDQ,UAAWU,SAASlB,GACpBa,YAAaK,SAASlB,GACtBe,OAAQpD,eACRqD,OAAQE,SAASlB,GAAGN,cAAiBG,sBAAsBG,MAO/E,OAAOpD,QAGX,SAASyE,QAAQC,EAAGC,GAChB,OAAID,EAAIC,EACI/D,eAAiB,EAAI,EACtB8D,EAAIC,EACH/D,cAAgB,GAAK,EAE1B,EAGX,SAASgE,SAASF,EAAGC,GACjB,OAAOF,QAAQC,EAAE5B,cAAe6B,EAAE7B,eAGtC,SAAS+B,aAAaH,EAAGC,GAGrB,IAAIG,GACAC,GACAC,EAAIP,SAFwB,IAArBC,EAAEpD,QAAQO,OAAgB,IAAM,KAAO6C,EAAEpD,SACpB,IAArBqD,EAAErD,QAAQO,OAAgB,IAAM,KAAO8C,EAAErD,SAGpD,OAAU,IAAN0D,EACOA,EAEAP,QAAQC,EAAErD,WAAYsD,EAAEtD,YAIvC,SAAS4D,gBAAgBP,EAAGC,GACxB,OAAOF,QAAQC,EAAErD,WAAYsD,EAAEtD,YAGnC,SAAS6D,cAAcR,EAAGC,GACtB,OAAOC,SAASF,EAAEd,UAAWe,EAAEf,WAGnC,SAASuB,gBAAgBT,EAAGC,GACxB,OAAOF,QAAQC,EAAET,YAAaU,EAAEV,aAGpC,SAASmB,aAAaV,EAAGC,GACrB,OAAOF,QAAQC,EAAEP,OAAQQ,EAAER,QAG/B,SAASkB,eACL,OAAI1E,aAAeJ,cACR0E,gBACAtE,aAAeH,YACf0E,cACAvE,aAAeF,cACf0E,gBACAxE,aAAeD,WACf0E,aAEJP,aAGX,SAASS,oBACL,IAAIC,OAAS,GAGb,OAFAA,OAAOvF,QAAUA,QAAQwF,KAAKH,gBAC9BE,OAAO5F,QAAUA,QACVN,SAASoG,OAAO5F,cAAe0F,QAG1C,SAASG,eAAeC,eAChBA,gBAAkBhF,WAElBC,eAAiBA,cAGjBD,WAAagF,cAIjBC,iBAGJ,SAASC,iBAAiBC,gBACtB,IAAIC,MAAQ5F,aAAa6F,MAAMC,OAAOC,qBAClCJ,gBAAkBC,QAAU3F,iBAC5BA,cAAgB2F,MAChBA,MAAQA,MAAM3D,MAAM,QACpB+D,EAAEC,KAAKpG,QAAS,SAAUoD,EAAGG,KACzB,IAAI8C,MACU,KAAVN,MACAM,OAAQ,EAERF,EAAEC,KAAKL,MAAO,SAAU3C,EAAGkD,OACT,IAAVD,QACAA,MAAQ9C,IAAIa,OAAOmC,QAAQD,OAAS,KAIhD/C,IAAIiD,YAAcH,SAK9B,SAASI,6BACL,IAAIC,WAAaP,EAAE,oBACnBA,EAAE,yBAA0BO,YAAYC,IAAI,SAC5CR,EAAE,4BAA6BO,YAAYC,IAAI,SAC/CR,EAAE,2BAA4BO,YAAYC,IAAI,SAC9CR,EAAE,6BAA8BO,YAAYC,IAAI,SAChDR,EAAE,yBAA0BO,YAAYC,IAAI,SAGhD,SAASf,iBACL,IAAIc,WAAaP,EAAE,oBAGnBN,kBAAiB,GAGjBY,6BAGAC,WAAWE,KAAK,sBAAsBC,KAAKvB,qBAC3CoB,WAAWE,KAAK,YAAYE,GAAGnG,WAAa,GAAGoG,SAAS,SAAWnG,cAAgB,YAAc,eAGjGuF,EAAE,yBAA0BO,YAAY7C,GAAG,QAAS,WAChD6B,eAAepF,cAEnB6F,EAAE,4BAA6BO,YAAY7C,GAAG,QAAS,WACnD6B,eAAenF,iBAEnB4F,EAAE,2BAA4BO,YAAY7C,GAAG,QAAS,WAClD6B,eAAelF,eAEnB2F,EAAE,6BAA8BO,YAAY7C,GAAG,QAAS,WACpD6B,eAAejF,iBAEnB0F,EAAE,yBAA0BO,YAAY7C,GAAG,QAAS,WAChD6B,eAAehF,cAEnBsG,iCACA9G,gBAAgB0G,KAAK,iBAAiBK,MAAOC,QACzC,MAAMC,UAAYD,MAAME,OAAOC,aAAa,kBAC5CC,QAAQC,IAAIC,gBAAgBL,aAIpC,SAASM,cAEkB,IAAnBzH,QAAQ6B,SACR7B,QAAUmD,eAIlB,SAASuE,iBAELvB,EAAEC,KAAKpG,QAAS,SAAUoD,EAAGG,KAErBA,IAAID,SACJC,IAAID,QAAQqD,IAAI,UAIxB3G,QAAU,GAYd,SAAS2H,2BACD1H,MAAM2H,aAGNF,iBACAjB,6BACAxG,MAAM4H,OACN7I,eAAe2E,IAAI7D,qBAAqBgI,YAAW,GACnD3I,gBAAgB4I,oBAEhBvI,QAAQwI,WAAWxI,QAAQyI,WAAWC,SAAU,gBAAiB,SACjEjI,MAAMkI,OACNnJ,eAAe2E,IAAI7D,qBAAqBgI,YAAW,GACnD3H,aAAa6F,IAAI,IAAIoC,QACrBX,cACA7B,kBAEJnG,iBAAiB4I,kBAIrB,SAASrB,iCACL,MAAMsB,OAAShJ,cAAciJ,kBAC1BD,QAAUA,OAAOE,UAAYF,OAAOE,SAASC,KAAKC,WAAaxJ,kBAAkByJ,yBAChFzI,gBAAgB0G,KAAK,qCAAqCgC,YAAY,qBAEtE1I,gBAAgB0G,KAAK,qCAAqCG,SAAS,qBAnC3E1G,mBAAqBvB,EAAE+J,SAAS,WAE5BnB,iBACAD,cAGA7B,kBACD,KAgCHlG,QAAQoJ,SAAS,WACb,IAAIC,EAAGC,UAGPhK,eAAeiK,SAAStJ,QAAQuJ,sCAAuCpJ,oBAAqB6H,2BAG5FqB,UAAY5J,MAAM+J,QAAQ/J,MAAMgK,WAAWC,aAEvCL,UAAUM,YAAYxJ,oBAAqB,GAAIV,MAAMmK,OAAQtK,SAASuK,wBAI1ET,EAAI1J,SAASoG,OAAO7F,UAAWD,UAI/BM,MAAQR,iBAAiBgK,kBAAkB3J,oBAAqBqG,EAAE4C,GAAI,MAChElB,QAEN3H,gBAAkBiG,EAAE,qBAGJtC,GAAG,WAAY,SAAU6F,GACrC,IAAIC,OAASxD,EAAEuD,EAAEtC,QAAQwC,QAAQ,MAC7BD,OAAO9H,OAAS,GAChB3C,kBAAkB2K,4BACd7K,eAAe2E,IAAIgG,OAAO,GAAGG,QAAQC,cAKjD7J,gBAAgB0G,KAAK,UAAUK,MAAM,WACjCjI,eAAegL,QAAQlK,uBAG3BI,gBAAgB0G,KAAK,qBAAqBK,MAAM,WAC5C1H,QAAQ0K,kBACJtK,QAAQuK,qCACRvK,QAAQwK,wCACVC,KAAK,SAAUC,WACVA,YAAc9K,QAAQ+K,gBACrB9K,QAAQwI,WAAWxI,QAAQyI,WAAWC,SAAU,WAAY,SAC5DhJ,kBAAkBqL,gCAK9BpK,aAAeD,gBAAgB0G,KAAK,qBACvB/C,GAAG,QAAUqD,QACnBA,OAAuB,WAAdA,MAAM3D,IACdpE,gBAAgB4I,kBAGpBnC,mBAEJtG,cAAcuE,GAAG,qBAAsB,CAAC2G,OAAQC,aACzCA,WAAaA,UAAUjC,UAAYiC,UAAUjC,SAASC,KAAKC,WAAaxJ,kBAAkByJ,2BACrF3J,eAAe2E,IAAI7D,qBAAqB4K,cACxC1L,eAAe2E,IAAI7D,qBAAqBkK,WAGhDhD","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2018 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\n/*global define, brackets, $, CodeMirror, _showShortcuts, window */\n\ndefine(function (require, exports, module) {\n    \n    // Brackets modules\n    const _                   = require(\"thirdparty/lodash\"),\n        CodeMirror          = require(\"thirdparty/CodeMirror/lib/codemirror\"),\n        CommandManager      = require(\"command/CommandManager\"),\n        Commands            = require(\"command/Commands\"),\n        KeyBindingManager   = require(\"command/KeyBindingManager\"),\n        MainViewManager     = require(\"view/MainViewManager\"),\n        Menus               = require(\"command/Menus\"),\n        Mustache            = require(\"thirdparty/mustache/mustache\"),\n        EditorManager       = require(\"editor/EditorManager\"),\n        Dialogs             = require(\"widgets/Dialogs\"),\n        Metrics       = require(\"utils/Metrics\"),\n        WorkspaceManager    = require(\"view/WorkspaceManager\"),\n        AppInit             = require(\"utils/AppInit\"),\n        Strings             = require(\"strings\");\n\n    const panelHtml           = require(\"text!./templates/bottom-panel.html\"),\n        shortcutsHtml       = require(\"text!./templates/shortcut-table.html\"),\n        TOGGLE_SHORTCUTS_ID = Commands.HELP_TOGGLE_SHORTCUTS_PANEL;\n    let keyList = [],\n        panel,\n        $shortcutsPanel,\n        $filterField,\n        currentFilter,\n        _updateKeyBindings;\n\n    let sortByBase = 1,\n        sortByBinding = 2,\n        sortByCmdId = 3,\n        sortByCmdName = 4,\n        sortByOrig = 5,\n        sortColumn = sortByBase,\n        sortAscending = true;\n\n    let origBrackets = Strings.APP_NAME,\n        origCodeMirror = window.debugMode? \"CodeMirror\" :Strings.APP_NAME,\n        origExtension = Strings.KEYBOARD_SHORTCUT_ORIG_EXTENSION;\n\n    // Determine base key by stripping modifier keys\n    function _getBaseKey(keyBinding) {\n        let keyBase = keyBinding\n            .replace(/Ctrl-/, \"\")\n            .replace(/Shift-/, \"\")\n            .replace(/Alt-/, \"\");\n        if (brackets.platform === \"mac\") {\n            keyBase = keyBase.replace(/Cmd-/, \"\");\n        }\n        return keyBase;\n    }\n\n    function _findKeyBinding(kl, keyBinding) {\n        let j;\n        for (j = 0; j < kl.length; j++) {\n            if (keyBinding === kl[j].keyBinding) {\n                return j;\n            }\n        }\n        return -1;\n    }\n\n    function _ucFirst(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    // \"ReloadInBrowser\" => \"Reload In Browser\"\n    // \"extension_manager\" => \"Extension Manager\"\n    function _humanizeString(string) {\n        // Replace \"foo_bar\" with \"foo bar\" and \"FooBar\" with \" Foo Bar\"\n        string = string.replace(/_/g, \" \").replace(/([A-Z])/g, \" $1\");\n        // Trim whitespace\n        string = string.replace(/(^\\s+)/, \"\").replace(/(\\s+$)/, \"\");\n        // Split words by whitespace, uppercase the first letter, join with a space\n        string = string.split(/\\s+/).map(_ucFirst).join(\" \");\n\n        return string;\n    }\n\n    function _getOriginFromCommandId(cmdID) {\n        // According to CommandManager.register() documentation:\n        //  Core commands in Brackets use a simple command title as an id, for example \"open.file\".\n        //  Extensions should use the following format: \"author.myextension.mycommandname\". \n        //  For example, \"lschmitt.csswizard.format.css\".\n        let idArray = cmdID.split(\".\");\n        const defaultCommands = Object.values(Commands);\n\n        // check for a brackets menu\n        let q1 = idArray[0].toLowerCase();\n        if (defaultCommands.includes(cmdID) || q1 === \"file\" || q1 === \"edit\" || q1 === \"view\" || q1 === \"navigate\" || q1 === \"debug\" || q1 === \"help\" ||\n            cmdID.startsWith(\"AltMenu-\") || cmdID.startsWith(\"codefolding.\") || cmdID.startsWith(\"navigation.\") || cmdID.startsWith(\"recent-files\") ||\n            cmdID.startsWith(\"refactoring.\") || cmdID.startsWith(\"recentProjects\") || cmdID ===\"showParameterHint\") {\n            return origBrackets;\n        }\n        if (idArray.length > 2) {\n            // more than two qualifiers\n            return origExtension + \" (\" + _humanizeString(idArray[1]) + \")\";\n        } else if (idArray.length < 2) {\n            // less than two qualifiers\n            return origExtension;\n        }\n\n        // must be an extension\n        return origExtension;\n    }\n\n    function _filterFromKeyBinding(text) {\n        // text if of form Shift-F1\n        text = text || '';\n        return `${text.toLowerCase()} ${text.replace(\"-\", \"+\").toLowerCase()}`;\n    }\n\n    // CodeMirror and Brackets key maps have different formats, so collect\n    // keys into a normalized array\n    function _getkeyList() {\n        let i,\n            base,\n            command,\n            key;\n\n        // Brackets keymap\n        let bracketsKeymap = KeyBindingManager.getKeymap();\n        if (bracketsKeymap) {\n            for (i in bracketsKeymap) {\n                if (bracketsKeymap.hasOwnProperty(i)) {\n                    key = bracketsKeymap[i];\n                    if (key) {\n                        base = _getBaseKey(i);\n                        command = CommandManager.get(key.commandID);\n                        if (!command) {\n                            continue;\n                        }\n\n                        // Listen for keybinding changes\n                        command.on(\"keyBindingAdded.bds keyBindingRemoved.bds\", _updateKeyBindings);\n\n                        keyList.push({\n                            keyBase: KeyBindingManager.formatKeyDescriptor(base),\n                            keyBinding: i,\n                            keyBindingDisplay: KeyBindingManager.formatKeyDescriptor(i),\n                            command: command,\n                            commandID: key.commandID,\n                            commandName: command.getName(),\n                            origin: _getOriginFromCommandId(key.commandID),\n                            filter: command.getName().toLowerCase() +  _filterFromKeyBinding(i)\n                        });\n                    }\n                }\n            }\n        }\n\n        // CodeMirror keymap\n        if (CodeMirror.keyMap) {\n            let cmKeymap = (brackets.platform === \"mac\") ? CodeMirror.keyMap.macDefault : CodeMirror.keyMap.pcDefault;\n            if (cmKeymap) {\n                for (i in cmKeymap) {\n                    // Note that we only ignore CodeMirror duplicates, but\n                    // we want to see Brackets & Extensions duplicates\n                    if (cmKeymap.hasOwnProperty(i) &&\n                            (i !== \"fallthrough\") &&\n                            (_findKeyBinding(keyList, i) === -1)) {\n                        base = _getBaseKey(i);\n                        keyList.push({\n                            keyBase: KeyBindingManager.formatKeyDescriptor(base),\n                            keyBinding: i,\n                            keyBindingDisplay: KeyBindingManager.formatKeyDescriptor(i),\n                            commandID: cmKeymap[i],\n                            commandName: cmKeymap[i],\n                            origin: origCodeMirror,\n                            filter: cmKeymap[i].toLowerCase() +  _filterFromKeyBinding(i)\n                        });\n                    }\n                }\n            }\n        }\n        \n        return keyList;\n    }\n\n    function _strcmp(a, b) {\n        if (a < b) {\n            return (sortAscending ? -1 : 1);\n        } else if (a > b) {\n            return (sortAscending ? 1 : -1);\n        }\n        return 0;\n    }\n\n    function _stricmp(a, b) {\n        return _strcmp(a.toLowerCase(), b.toLowerCase());\n    }\n\n    function _keyBaseSort(a, b) {\n        // First sort by whether it's a single char or not, so letters are separated from key\n        // names (e.g. Backspace). Then sort by base key, finally key binding string\n        let a2 = ((a.keyBase.length === 1) ? \"0\" : \"1\") + a.keyBase,\n            b2 = ((b.keyBase.length === 1) ? \"0\" : \"1\") + b.keyBase,\n            c = _strcmp(a2, b2);\n\n        if (c !== 0) {\n            return c;\n        } else {\n            return _strcmp(a.keyBinding, b.keyBinding);\n        }\n    }\n\n    function _keyBindingSort(a, b) {\n        return _strcmp(a.keyBinding, b.keyBinding);\n    }\n\n    function _keyCmdIdSort(a, b) {\n        return _stricmp(a.commandID, b.commandID);\n    }\n\n    function _keyCmdNameSort(a, b) {\n        return _strcmp(a.commandName, b.commandName);\n    }\n\n    function _keyOrigSort(a, b) {\n        return _strcmp(a.origin, b.origin);\n    }\n\n    function _getSortFunc() {\n        if (sortColumn === sortByBinding) {\n            return _keyBindingSort;\n        } else if (sortColumn === sortByCmdId) {\n            return _keyCmdIdSort;\n        } else if (sortColumn === sortByCmdName) {\n            return _keyCmdNameSort;\n        } else if (sortColumn === sortByOrig) {\n            return _keyOrigSort;\n        }\n        return _keyBaseSort;\n    }\n\n    function _getShortcutsHtml() {\n        var msData = {};\n        msData.keyList = keyList.sort(_getSortFunc());\n        msData.Strings = Strings;\n        return Mustache.render(shortcutsHtml, msData);\n    }\n\n    function _changeSorting(newSortColumn) {\n        if (newSortColumn === sortColumn) {\n            // Same column, so change sort direction\n            sortAscending = !sortAscending;\n        } else {\n            // New sort column\n            sortColumn = newSortColumn;\n        }\n        \n        // Update page\n        _showShortcuts();\n    }\n\n    function _filterShortcuts(forceFiltering) {\n        var terms = $filterField.val().trim().toLocaleLowerCase();\n        if (forceFiltering || terms !== currentFilter) {\n            currentFilter = terms;\n            terms = terms.split(/\\s+?/);\n            $.each(keyList, function (i, key) {\n                let match;\n                if (terms === \"\") {\n                    match = true;\n                } else {\n                    $.each(terms, function (i, term) {\n                        if (match !== false) {\n                            match = key.filter.indexOf(term) > -1;\n                        }\n                    });\n                }\n                key.filterMatch = match;\n            });\n        }\n    }\n\n    function _clearSortingEventHandlers() {\n        var $shortcuts = $(\"#shortcuts-panel\");\n        $(\"thead .shortcut-base a\", $shortcuts).off(\"click\");\n        $(\"thead .shortcut-binding a\", $shortcuts).off(\"click\");\n        $(\"thead .shortcut-cmd-id a\", $shortcuts).off(\"click\");\n        $(\"thead .shortcut-cmd-name a\", $shortcuts).off(\"click\");\n        $(\"thead .shortcut-orig a\", $shortcuts).off(\"click\");\n    }\n\n    function _showShortcuts() {\n        let $shortcuts = $(\"#shortcuts-panel\");\n        \n        // Apply any active filter\n        _filterShortcuts(true);\n\n        // Clear old header sort button events\n        _clearSortingEventHandlers();\n\n        // Add new markup\n        $shortcuts.find(\".resizable-content\").html(_getShortcutsHtml());\n        $shortcuts.find(\"thead th\").eq(sortColumn - 1).addClass('sort-' + (sortAscending ? 'ascending' : 'descending'));\n\n        // Setup header sort button events\n        $(\"thead .shortcut-base a\", $shortcuts).on(\"click\", function () {\n            _changeSorting(sortByBase);\n        });\n        $(\"thead .shortcut-binding a\", $shortcuts).on(\"click\", function () {\n            _changeSorting(sortByBinding);\n        });\n        $(\"thead .shortcut-cmd-id a\", $shortcuts).on(\"click\", function () {\n            _changeSorting(sortByCmdId);\n        });\n        $(\"thead .shortcut-cmd-name a\", $shortcuts).on(\"click\", function () {\n            _changeSorting(sortByCmdName);\n        });\n        $(\"thead .shortcut-orig a\", $shortcuts).on(\"click\", function () {\n            _changeSorting(sortByOrig);\n        });\n        _showCommandIdsInPanelIfNeeded();\n        $shortcutsPanel.find(\".copy-command\").click((event)=>{\n            const commandId = event.target.getAttribute(\"data-commandID\");\n            Phoenix.app.copyToClipboard(commandId);\n        });\n    }\n\n    function initKeyList() {\n        // Only get data once while panel is open\n        if (keyList.length === 0) {\n            keyList = _getkeyList();\n        }\n    }\n\n    function destroyKeyList() {\n        // cleanup listeners\n        $.each(keyList, function (i, key) {\n            // Only Brackets commands have listeners\n            if (key.command) {\n                key.command.off(\".bds\");\n            }\n        });\n\n        keyList = [];\n    }\n\n    _updateKeyBindings = _.debounce(function () {\n        // Update keylist\n        destroyKeyList();\n        initKeyList();\n\n        // Refresh panel\n        _showShortcuts();\n    }, 300);\n\n    function _handleShowHideShortcuts() {\n        if (panel.isVisible()) {\n            // This panel probably won't get opened very often, so only maintain data\n            // while panel is open (for faster sorting) and discard when closed.\n            destroyKeyList();\n            _clearSortingEventHandlers();\n            panel.hide();\n            CommandManager.get(TOGGLE_SHORTCUTS_ID).setChecked(false);\n            MainViewManager.focusActivePane();\n        } else {\n            Metrics.countEvent(Metrics.EVENT_TYPE.KEYBOARD, 'shortcutPanel', \"shown\");\n            panel.show();\n            CommandManager.get(TOGGLE_SHORTCUTS_ID).setChecked(true);\n            $filterField.val(\"\").focus();\n            initKeyList();\n            _showShortcuts();\n        }\n        WorkspaceManager.recomputeLayout();\n    }\n\n\n    function _showCommandIdsInPanelIfNeeded() {\n        const editor = EditorManager.getActiveEditor();\n        if(editor && editor.document && editor.document.file.fullPath === KeyBindingManager._getUserKeyMapFilePath()){\n            $shortcutsPanel.find(\"#phoenix-keyboard-shortcuts-table\").removeClass(\"hide-third-column\");\n        } else {\n            $shortcutsPanel.find(\"#phoenix-keyboard-shortcuts-table\").addClass(\"hide-third-column\");\n        }\n    }\n\n    AppInit.appReady(function() {\n        let s, file_menu;\n\n        // Register commands\n        CommandManager.register(Strings.KEYBOARD_SHORTCUT_MENU_SHOW_SHORTCUTS, TOGGLE_SHORTCUTS_ID, _handleShowHideShortcuts);\n\n        // Add command to Help menu, if it exists\n        file_menu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        if (file_menu) {\n            file_menu.addMenuItem(TOGGLE_SHORTCUTS_ID, \"\", Menus.BEFORE, Commands.FILE_EXTENSION_MANAGER);\n        }\n\n        // Add the HTML UI\n        s = Mustache.render(panelHtml, Strings);\n\n        // AppInit.htmlReady() has already executed before extensions are loaded\n        // so, for now, we need to call this ourself\n        panel = WorkspaceManager.createBottomPanel(TOGGLE_SHORTCUTS_ID, $(s), 200);\n        panel.hide();\n\n        $shortcutsPanel = $(\"#shortcuts-panel\");\n\n        // Events\n        $shortcutsPanel.on(\"dblclick\", function (e) {\n            var $rowEl = $(e.target).closest(\"tr\");\n            if ($rowEl.length > 0) {\n                KeyBindingManager.showShortcutSelectionDialog(\n                    CommandManager.get($rowEl[0].dataset.commandid)\n                );\n            }\n        });\n\n        $shortcutsPanel.find(\".close\").click(function () {\n            CommandManager.execute(TOGGLE_SHORTCUTS_ID);\n        });\n\n        $shortcutsPanel.find(\".reset-to-default\").click(function () {\n            Dialogs.showConfirmDialog(\n                Strings.KEYBOARD_SHORTCUT_RESET_DIALOG_TITLE,\n                Strings.KEYBOARD_SHORTCUT_RESET_DIALOG_MESSAGE\n            ).done(function (selection) {\n                if(selection === Dialogs.DIALOG_BTN_OK){\n                    Metrics.countEvent(Metrics.EVENT_TYPE.KEYBOARD, 'shortcut', \"reset\");\n                    KeyBindingManager.resetUserShortcutsAsync();\n                }\n            });\n        });\n\n        $filterField = $shortcutsPanel.find(\".toolbar .filter\");\n        $filterField.on(\"keyup\", (event)=>{\n            if(event && event.key === 'Escape') {\n                MainViewManager.focusActivePane();\n                return;\n            }\n            _showShortcuts();\n        });\n        EditorManager.on(\"activeEditorChange\", (_event, newEditor)=>{\n            if(newEditor && newEditor.document && newEditor.document.file.fullPath === KeyBindingManager._getUserKeyMapFilePath()){\n                if(!CommandManager.get(TOGGLE_SHORTCUTS_ID).getChecked()){\n                    CommandManager.get(TOGGLE_SHORTCUTS_ID).execute();\n                }\n            }\n            _showCommandIdsInPanelIfNeeded();\n        });\n    });\n});\n"],"file":"main.js"}