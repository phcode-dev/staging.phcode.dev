{"version":3,"sources":["extensions/default/HealthData/HealthDataPreview.js"],"names":["define","require","exports","module","_","brackets","getModule","Mustache","PreferencesManager","Strings","Dialogs","ExtensionUtils","Metrics","HealthDataPreviewDialog","prefs","getExtensionPrefs","_buildPreviewData","content","auditData","getLoggedDataForAudit","sortedData","Map","entries","sort","displayData","key","value","valueString","count","eventType","AUDIT_TYPE_COUNT","push","sum","AUDIT_TYPE_VALUE","JSON","stringify","escape","replace","previewHealthData","hdPref","get","template","render","$template","$","addLinkTooltips","showModalDialogUsingTemplate","done","id","newHDPref","find","is","set","clearAuditData","loadStyleSheet"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAE/B,IAAIC,EAA0BC,SAASC,UAAU,qBAC7CC,SAA0BF,SAASC,UAAU,gCAC7CE,mBAA0BH,SAASC,UAAU,kCAC7CG,QAA0BJ,SAASC,UAAU,WAC7CI,QAA0BL,SAASC,UAAU,mBAC7CK,eAA0BN,SAASC,UAAU,wBAC7CM,QAA0BP,SAASC,UAAU,iBAC7CO,wBAA0BZ,QAAQ,mDAElCa,MAAQN,mBAAmBO,kBAAkB,cAIjD,SAASC,oBACL,IAAIC,QACAC,UAAYN,QAAQO,wBACpBC,WAAa,IAAIC,IAAI,IAAIH,UAAUI,WAAWC,QAC9CC,YAAc,GAClB,IAAK,MAAOC,IAAKC,SAAUN,WAAWE,UAAW,CAC7C,IAAIK,YAAc,GACfD,MAAME,MAAQ,IACbD,gBAAkBD,MAAME,UAEzBF,MAAMG,YAAcjB,QAAQkB,iBAC3BN,YAAYO,QAAQN,eAAeC,MAAMM,OAAOL,eAC1CD,MAAMG,YAAcjB,QAAQqB,kBAAoC,IAAhBP,MAAME,OAC5DJ,YAAYO,QAAQN,aAAaC,MAAMM,IAAIN,MAAME,SAASD,eAOlE,OAJAV,QAAUiB,KAAKC,UAAUX,YAAa,KAAM,GAG5CP,SADAA,SADAA,QAAUb,EAAEgC,OAAOnB,UACDoB,QAAQ,KAAM,WACdA,QAAQ,kBAAmB,UAOjD,SAASC,oBACL,IAAIC,OAAWzB,MAAM0B,IAAI,sBACrBC,SAAWlC,SAASmC,OAAO7B,wBACvB,CAACJ,QAASA,QAASQ,QAASD,oBAAqBuB,OAAQA,SAC7DI,UAAYC,EAAEH,UAElB/B,QAAQmC,gBAAgBF,WACxBjC,QAAQoC,6BAA6BH,WAAWI,KAAK,SAAUC,IAE3D,GAAW,SAAPA,GAAe,CACf,IAAIC,UAAYN,UAAUO,KAAK,0BAA0BC,GAAG,YACxDZ,SAAWU,WACXnC,MAAMsC,IAAI,qBAAsBH,eAEtB,UAAPD,IACPpC,QAAQyC,mBA3CpB1C,eAAe2C,eAAenD,OAAQ,cAgDtCD,QAAQoC,kBAAoBA","sourcesContent":["/*\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2015 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\ndefine(function (require, exports, module) {\n\n    var _                       = brackets.getModule(\"thirdparty/lodash\"),\n        Mustache                = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        PreferencesManager      = brackets.getModule(\"preferences/PreferencesManager\"),\n        Strings                 = brackets.getModule(\"strings\"),\n        Dialogs                 = brackets.getModule(\"widgets/Dialogs\"),\n        ExtensionUtils          = brackets.getModule(\"utils/ExtensionUtils\"),\n        Metrics                 = brackets.getModule(\"utils/Metrics\"),\n        HealthDataPreviewDialog = require(\"text!htmlContent/healthdata-preview-dialog.html\");\n\n    var prefs = PreferencesManager.getExtensionPrefs(\"healthData\");\n\n    ExtensionUtils.loadStyleSheet(module, \"styles.css\");\n\n    function _buildPreviewData() {\n        let content;\n        let auditData = Metrics.getLoggedDataForAudit();\n        let sortedData = new Map([...auditData.entries()].sort());\n        let displayData = [];\n        for (const [key, value] of sortedData.entries()) {\n            let valueString = \"\";\n            if(value.count > 1) {\n                valueString = `(${value.count})`;\n            }\n            if(value.eventType === Metrics.AUDIT_TYPE_COUNT){\n                displayData.push(`${key}  total: ${value.sum} ${valueString}`);\n            } else if(value.eventType === Metrics.AUDIT_TYPE_VALUE && value.count !== 0){\n                displayData.push(`${key}  avg: ${value.sum/value.count} ${valueString}`);\n            }\n        }\n        content = JSON.stringify(displayData, null, 2);\n        content = _.escape(content);\n        content = content.replace(/ /g, \"&nbsp;\");\n        content = content.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br />\");\n        return content;\n    }\n\n    /**\n     * Show the dialog for previewing the Health Data that will be sent.\n     */\n    function previewHealthData() {\n        let hdPref   = prefs.get(\"healthDataTracking\"),\n            template = Mustache.render(HealthDataPreviewDialog,\n                {Strings: Strings, content: _buildPreviewData(), hdPref: hdPref}),\n            $template = $(template);\n\n        Dialogs.addLinkTooltips($template);\n        Dialogs.showModalDialogUsingTemplate($template).done(function (id) {\n\n            if (id === \"save\") {\n                var newHDPref = $template.find(\"[data-target]:checkbox\").is(\":checked\");\n                if (hdPref !== newHDPref) {\n                    prefs.set(\"healthDataTracking\", newHDPref);\n                }\n            } else if (id === 'clear'){\n                Metrics.clearAuditData();\n            }\n        });\n    }\n\n    exports.previewHealthData = previewHealthData;\n});\n"],"file":"HealthDataPreview.js"}