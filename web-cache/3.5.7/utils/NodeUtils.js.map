{"version":3,"sources":["utils/NodeUtils.js"],"names":["define","require","exports","module","Strings","NodeConnector","UTILS_NODE_CONNECTOR","utilsConnector","async","fetchURLText","url","encoding","Phoenix","browser","isTauri","Error","buffer","execPeer","iconv","decode","Buffer","from","updateNodeLocaleStrings","getPhoenixBinaryVersion","cliArgs","window","__TAURI__","invoke","phoenixBinPath","getLinuxOSFlavorName","platform","createNodeConnector","isNodeAvailable","isNodeReady","NodeUtils"],"mappings":"AAyBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,QAAsBH,QAAQ,WAChCI,cAAgBJ,QAAQ,iBACtBK,qBAAuB,WAE7B,IAAIC,eAMJC,eAAeC,aAAaC,IAAKC,UAC7B,IAAIC,QAAQC,QAAQC,QAChB,MAAM,IAAIC,MAAM,iCAEpB,MAAMC,OAACA,cAAgBT,eAAeU,SAAS,gBAAiB,CAACP,IAAAA,MACjE,OAAOQ,MAAMC,OAAOC,OAAOC,KAAKL,QAASL,UAO7CH,eAAec,0BACX,QAAIV,QAAQC,QAAQC,gBAIdP,eAAeU,SAAS,mBAAoBb,UAC3C,GAGXI,eAAee,0BACX,IAAIX,QAAQC,QAAQC,QAChB,MAAM,IAAIC,MAAM,oDAEpB,MAAMS,cAAgBC,OAAOC,UAAUC,OAAO,yBACxCC,eAAiBJ,QAAQ,GAC/B,OAAOjB,eAAeU,SAAS,0BAA2BW,gBAG9DpB,eAAeqB,uBACX,MAAwB,UAArBjB,QAAQkB,UAAyBlB,QAAQC,QAAQC,QAG7CP,eAAeU,SAAS,wBAFpB,KArCZL,QAAQC,QAAQC,UAEfP,eAAiBF,cAAc0B,oBALN,WAKgD7B,UAwC1EG,cAAc2B,mBAGbV,0BAGJpB,QAAQO,aAAeA,aACvBP,QAAQoB,wBAA0BA,wBAClCpB,QAAQqB,wBAA0BA,wBAClCrB,QAAQ2B,qBAAuBA,qBAC/B3B,QAAQ+B,YAAc5B,cAAc4B,YAEpCR,OAAOS,UAAYhC","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Generic node util APIs connector. see `src-node/utils.js` for node peer\n */\n\ndefine(function (require, exports, module) {\n    const Strings             = require(\"strings\"),\n        NodeConnector = require('NodeConnector');\n    const UTILS_NODE_CONNECTOR = \"ph_utils\";\n\n    let utilsConnector;\n    if(Phoenix.browser.isTauri) {\n        // node not available in browser builds!\n        utilsConnector = NodeConnector.createNodeConnector(UTILS_NODE_CONNECTOR, exports);\n    }\n\n    async function fetchURLText(url, encoding) {\n        if(!Phoenix.browser.isTauri) {\n            throw new Error(\"node not available in browser\");\n        }\n        const {buffer} = await utilsConnector.execPeer(\"getURLContent\", {url});\n        return iconv.decode(Buffer.from(buffer), encoding);\n    }\n\n    /**\n     * updates the localized strings in brackets `Strings` to node.\n     * @return {Promise<boolean>} Promise resolves to true if strings was updated in node, else false(in browser.)\n     */\n    async function updateNodeLocaleStrings() {\n        if(!Phoenix.browser.isTauri) {\n            // this does nothing in browser builds.\n            return false;\n        }\n        await utilsConnector.execPeer(\"setLocaleStrings\", Strings);\n        return true;\n    }\n\n    async function getPhoenixBinaryVersion() {\n        if(!Phoenix.browser.isTauri) {\n            throw new Error(\"getPhoenixBinaryVersion not available in browser\");\n        }\n        const cliArgs = await window.__TAURI__.invoke('_get_commandline_args');\n        const phoenixBinPath = cliArgs[0];\n        return utilsConnector.execPeer(\"getPhoenixBinaryVersion\", phoenixBinPath);\n    }\n\n    async function getLinuxOSFlavorName() {\n        if(Phoenix.platform !== \"linux\" || !Phoenix.browser.isTauri) {\n            return null;\n        }\n        return utilsConnector.execPeer(\"getLinuxOSFlavorName\");\n    }\n\n    if(NodeConnector.isNodeAvailable()) {\n        // todo we need to update the strings if a user extension adds its translations. Since we dont support\n        // node extensions for now, should consider when we support node extensions.\n        updateNodeLocaleStrings();\n    }\n\n    exports.fetchURLText = fetchURLText;\n    exports.updateNodeLocaleStrings = updateNodeLocaleStrings;\n    exports.getPhoenixBinaryVersion = getPhoenixBinaryVersion;\n    exports.getLinuxOSFlavorName = getLinuxOSFlavorName;\n    exports.isNodeReady = NodeConnector.isNodeReady;\n\n    window.NodeUtils = exports;\n});\n"],"file":"NodeUtils.js"}