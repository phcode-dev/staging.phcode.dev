{"version":3,"sources":["thirdparty/CodeMirror/mode/http/http.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","token","eatSpace","blankLine","startState","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,OAAQ,WAC5B,SAASC,cAAcC,OAAQC,OAG7B,OAFAD,OAAOE,YACPD,MAAME,IAAMC,OACL,QAGT,SAASC,MAAML,OAAQC,OACrB,OAAID,OAAOM,MAAM,kBACfL,MAAME,IAAMI,mBACL,WACEP,OAAOM,MAAM,YAAc,QAAQE,KAAKR,OAAOS,SACxDR,MAAME,IAAMO,YACL,WAEAX,cAAcC,OAAQC,OAIjC,SAASM,mBAAmBP,OAAQC,OAClC,IAAIU,KAAOX,OAAOM,MAAM,QACxB,IAAKK,KAAM,OAAOZ,cAAcC,OAAQC,OAExCA,MAAME,IAAMS,mBACZ,IAAIC,OAASC,OAAOH,KAAK,IACzB,OAAIE,QAAU,KAAOA,OAAS,IACrB,yBACEA,QAAU,KAAOA,OAAS,IAC5B,mBACEA,QAAU,KAAOA,OAAS,IAC5B,oBACEA,QAAU,KAAOA,OAAS,IAC5B,wBACEA,QAAU,KAAOA,OAAS,IAC5B,wBAEA,QAIX,SAASD,mBAAmBZ,OAAQC,OAGlC,OAFAD,OAAOE,YACPD,MAAME,IAAMC,OACL,KAGT,SAASM,YAAYV,OAAQC,OAG3B,OAFAD,OAAOe,SAAS,MAChBd,MAAME,IAAMa,gBACL,WAGT,SAASA,gBAAgBhB,OAAQC,OAC/B,OAAID,OAAOM,MAAM,mBACfL,MAAME,IAAMC,OACL,WAEAL,cAAcC,OAAQC,OAIjC,SAASG,OAAOJ,QACd,OAAIA,OAAOiB,QAAUjB,OAAOkB,IAAI,SAC1BlB,OAAOM,MAAM,SACR,QAEPN,OAAOE,YACA,UAGTF,OAAOE,YACA,UAIX,SAASiB,KAAKnB,QAEZ,OADAA,OAAOE,YACA,KAGT,MAAO,CACLkB,MAAO,SAASpB,OAAQC,OACtB,IAAIE,IAAMF,MAAME,IAChB,OAAIA,KAAOC,QAAUD,KAAOgB,MAAQnB,OAAOqB,WAAmB,KACvDlB,IAAIH,OAAQC,QAGrBqB,UAAW,SAASrB,OAClBA,MAAME,IAAMgB,MAGdI,WAAY,WACV,MAAO,CAACpB,IAAKE,WAKnBR,WAAW2B,WAAW,eAAgB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"http\", function() {\n  function failFirstLine(stream, state) {\n    stream.skipToEnd();\n    state.cur = header;\n    return \"error\";\n  }\n\n  function start(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n      state.cur = responseStatusCode;\n      return \"keyword\";\n    } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n      state.cur = requestPath;\n      return \"keyword\";\n    } else {\n      return failFirstLine(stream, state);\n    }\n  }\n\n  function responseStatusCode(stream, state) {\n    var code = stream.match(/^\\d+/);\n    if (!code) return failFirstLine(stream, state);\n\n    state.cur = responseStatusText;\n    var status = Number(code[0]);\n    if (status >= 100 && status < 200) {\n      return \"positive informational\";\n    } else if (status >= 200 && status < 300) {\n      return \"positive success\";\n    } else if (status >= 300 && status < 400) {\n      return \"positive redirect\";\n    } else if (status >= 400 && status < 500) {\n      return \"negative client-error\";\n    } else if (status >= 500 && status < 600) {\n      return \"negative server-error\";\n    } else {\n      return \"error\";\n    }\n  }\n\n  function responseStatusText(stream, state) {\n    stream.skipToEnd();\n    state.cur = header;\n    return null;\n  }\n\n  function requestPath(stream, state) {\n    stream.eatWhile(/\\S/);\n    state.cur = requestProtocol;\n    return \"string-2\";\n  }\n\n  function requestProtocol(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n      state.cur = header;\n      return \"keyword\";\n    } else {\n      return failFirstLine(stream, state);\n    }\n  }\n\n  function header(stream) {\n    if (stream.sol() && !stream.eat(/[ \\t]/)) {\n      if (stream.match(/^.*?:/)) {\n        return \"atom\";\n      } else {\n        stream.skipToEnd();\n        return \"error\";\n      }\n    } else {\n      stream.skipToEnd();\n      return \"string\";\n    }\n  }\n\n  function body(stream) {\n    stream.skipToEnd();\n    return null;\n  }\n\n  return {\n    token: function(stream, state) {\n      var cur = state.cur;\n      if (cur != header && cur != body && stream.eatSpace()) return null;\n      return cur(stream, state);\n    },\n\n    blankLine: function(state) {\n      state.cur = body;\n    },\n\n    startState: function() {\n      return {cur: start};\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"message/http\", \"http\");\n\n});\n"],"file":"http.js"}