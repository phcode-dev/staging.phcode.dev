{"version":3,"sources":["thirdparty/CodeMirror/mode/smarty/smarty.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConf","rightDelimiter","leftDelimiter","version","baseMode","getMode","keyFunctions","regs","operatorChars","validIdentifier","stringChar","last","cont","style","lastType","chain","stream","state","parser","tokenize","doesNotCount","pos","string","length","test","charAt","tokenTop","scan","nextMatch","indexOf","match","eat","tokenBlock","depth","tokenSmarty","slice","token","base","ch","next","eatWhile","tokenAttribute","str","c","i","j","quote","prevChar","currChar","eol","peek","terminator","startState","copyState","innerMode","mode","indent","text","line","Pass","blockCommentStart","blockCommentEnd","defineMIME"],"mappings":"CAOA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACV,aAEAA,WAAWC,WAAW,SAAU,SAASC,OAAQC,YAC/C,IAAIC,eAAiBD,WAAWC,gBAAkB,IAC9CC,cAAgBF,WAAWE,eAAiB,IAC5CC,QAAUH,WAAWG,SAAW,EAChCC,SAAWP,WAAWQ,QAAQN,OAAQC,WAAWI,UAAY,QAE7DE,aAAe,CAAC,QAAS,UAAW,WAAY,UAAW,WAC3DC,KAAO,CACTC,cAAe,gBACfC,gBAAiB,eACjBC,WAAY,QAGVC,KACJ,SAASC,KAAKC,MAAOC,UAEnB,OADAH,KAAOG,SACAD,MAGT,SAASE,MAAMC,OAAQC,MAAOC,QAE5B,OADAD,MAAME,SAAWD,OACVA,OAAOF,OAAQC,OAIxB,SAASG,aAAaJ,OAAQK,KAE5B,OADW,MAAPA,MAAaA,IAAML,OAAOK,KACX,IAAZlB,SAAkC,KAAjBD,gBACrBmB,KAAOL,OAAOM,OAAOC,QAAU,KAAKC,KAAKR,OAAOM,OAAOG,OAAOJ,OAGnE,SAASK,SAASV,OAAQC,OAExB,IADA,IAAIK,OAASN,OAAOM,OACXK,KAAOX,OAAOK,MAAO,CAC5B,IAAIO,UAAYN,OAAOO,QAAQ3B,cAAeyB,MAE9C,GADAA,KAAOC,UAAY1B,cAAcqB,QACf,GAAdK,YAAoBR,aAAaJ,OAAQY,UAAY1B,cAAcqB,QAAS,MAElF,GAAIK,WAAaZ,OAAOK,IAEtB,OADAL,OAAOc,MAAM5B,eACTc,OAAOe,IAAI,KACNhB,MAAMC,OAAQC,MAAOe,WAAW,UAAW,IAAM/B,kBAExDgB,MAAMgB,QACNhB,MAAME,SAAWe,YACjBvB,KAAO,WACA,OAIPiB,WAAa,IAAGZ,OAAOM,OAASA,OAAOa,MAAM,EAAGP,YACpD,IAAIQ,MAAQhC,SAASgC,MAAMpB,OAAQC,MAAMoB,MAEzC,OADIT,WAAa,IAAGZ,OAAOM,OAASA,QAC7Bc,MAIT,SAASF,YAAYlB,OAAQC,OAC3B,GAAID,OAAOc,MAAM7B,gBAAgB,GAS/B,OARgB,IAAZE,SACFc,MAAMgB,QACFhB,MAAMgB,OAAS,IACjBhB,MAAME,SAAWO,WAGnBT,MAAME,SAAWO,SAEZd,KAAK,MAAO,MAGrB,GAAII,OAAOc,MAAM5B,eAAe,GAE9B,OADAe,MAAMgB,QACCrB,KAAK,MAAO,YAGrB,IAAI0B,GAAKtB,OAAOuB,OAChB,GAAU,KAAND,GAEF,OADAtB,OAAOwB,SAASjC,KAAKE,iBACdG,KAAK,aAAc,YACrB,GAAU,KAAN0B,GACT,OAAO1B,KAAK,WAAY,QACnB,GAAU,KAAN0B,GACT,OAAO1B,KAAK,WAAY,YACnB,GAAIL,KAAKG,WAAWc,KAAKc,IAE9B,OADArB,MAAME,SAAWsB,eAAeH,IACzB1B,KAAK,SAAU,UACjB,GAAIL,KAAKC,cAAcgB,KAAKc,IAEjC,OADAtB,OAAOwB,SAASjC,KAAKC,eACdI,KAAK,WAAY,YACnB,GAAU,KAAN0B,IAAmB,KAANA,GACtB,OAAO1B,KAAK,UAAW,WAClB,GAAU,KAAN0B,IAAmB,KAANA,GACtB,OAAO1B,KAAK,UAAW,YAClB,GAAI,KAAKY,KAAKc,IAEnB,OADAtB,OAAOwB,SAAS,MACT5B,KAAK,SAAU,UAGtB,GAAkB,YAAdK,MAAMN,KAAoB,CAC5B,GAAU,KAAN2B,GAEF,OADAtB,OAAOwB,SAASjC,KAAKE,iBACdG,KAAK,WAAY,YACnB,GAAU,KAAN0B,GAET,OADAtB,OAAOwB,SAASjC,KAAKE,iBACdG,KAAK,YAAa,gBAEtB,CAAA,GAAkB,QAAdK,MAAMN,KAEf,OADAK,OAAOwB,SAASjC,KAAKE,iBACdG,KAAK,YAAa,YACpB,GAAkB,cAAdK,MAAMN,KAEf,OADAK,OAAOwB,SAASjC,KAAKE,iBACdG,KAAK,YAAa,YACzB,GAAkB,YAAdK,MAAMN,KAEV,OADAK,OAAOwB,SAASjC,KAAKE,iBACdG,KAAK,WAAY,MACnB,GAAI,KAAKY,KAAKc,IAEnB,OADA3B,KAAO,aACA,KAGT,IAAI+B,IAAM,GACA,KAANJ,KACFI,KAAOJ,IAGT,IADA,IAAIK,EAAI,KACDA,EAAI3B,OAAOe,IAAIxB,KAAKE,kBACzBiC,KAAOC,EAET,IAAK,IAAIC,EAAE,EAAGC,EAAEvC,aAAaiB,OAAQqB,EAAEC,EAAGD,IACxC,GAAItC,aAAasC,IAAMF,IACrB,OAAO9B,KAAK,UAAW,WAG3B,MAAI,KAAKY,KAAKc,IACL,KAEF1B,KAAK,MAAO,OAIvB,SAAS6B,eAAeK,OACtB,OAAO,SAAS9B,OAAQC,OAGtB,IAFA,IAAI8B,SAAW,KACXC,SAAW,MACPhC,OAAOiC,OAAO,CAEpB,GADAD,SAAWhC,OAAOkC,OACdlC,OAAOuB,QAAUO,OAAsB,OAAbC,SAAmB,CAC/C9B,MAAME,SAAWe,YACjB,MAEFa,SAAWC,SAEb,MAAO,UAIX,SAAShB,WAAWnB,MAAOsC,YACzB,OAAO,SAASnC,OAAQC,OACtB,MAAQD,OAAOiC,OAAO,CACpB,GAAIjC,OAAOc,MAAMqB,YAAa,CAC5BlC,MAAME,SAAWO,SACjB,MAEFV,OAAOuB,OAET,OAAO1B,OAIX,MAAO,CACLuC,WAAY,WACV,MAAO,CACLf,KAAMxC,WAAWuD,WAAWhD,UAC5Be,SAAUO,SACVf,KAAM,KACNsB,MAAO,IAGXoB,UAAW,SAASpC,OAClB,MAAO,CACLoB,KAAMxC,WAAWwD,UAAUjD,SAAUa,MAAMoB,MAC3ClB,SAAUF,MAAME,SAChBR,KAAMM,MAAMN,KACZsB,MAAOhB,MAAMgB,QAGjBqB,UAAW,SAASrC,OAClB,GAAIA,MAAME,UAAYO,SACpB,MAAO,CAAC6B,KAAMnD,SAAUa,MAAOA,MAAMoB,OAEzCD,MAAO,SAASpB,OAAQC,OACtB,IAAIJ,MAAQI,MAAME,SAASH,OAAQC,OAEnC,OADAA,MAAMN,KAAOA,KACNE,OAET2C,OAAQ,SAASvC,MAAOwC,KAAMC,MAC5B,OAAIzC,MAAME,UAAYO,UAAYtB,SAASoD,OAClCpD,SAASoD,OAAOvC,MAAMoB,KAAMoB,KAAMC,MAElC7D,WAAW8D,MAEtBC,kBAAmB1D,cAAgB,IACnC2D,gBAAiB,IAAM5D,kBAI3BJ,WAAWiE,WAAW,gBAAiB","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Smarty 2 and 3 mode.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"smarty\", function(config, parserConf) {\n    var rightDelimiter = parserConf.rightDelimiter || \"}\";\n    var leftDelimiter = parserConf.leftDelimiter || \"{\";\n    var version = parserConf.version || 2;\n    var baseMode = CodeMirror.getMode(config, parserConf.baseMode || \"null\");\n\n    var keyFunctions = [\"debug\", \"extends\", \"function\", \"include\", \"literal\"];\n    var regs = {\n      operatorChars: /[+\\-*&%=<>!?]/,\n      validIdentifier: /[a-zA-Z0-9_]/,\n      stringChar: /['\"]/\n    };\n\n    var last;\n    function cont(style, lastType) {\n      last = lastType;\n      return style;\n    }\n\n    function chain(stream, state, parser) {\n      state.tokenize = parser;\n      return parser(stream, state);\n    }\n\n    // Smarty 3 allows { and } surrounded by whitespace to NOT slip into Smarty mode\n    function doesNotCount(stream, pos) {\n      if (pos == null) pos = stream.pos;\n      return version === 3 && leftDelimiter == \"{\" &&\n        (pos == stream.string.length || /\\s/.test(stream.string.charAt(pos)));\n    }\n\n    function tokenTop(stream, state) {\n      var string = stream.string;\n      for (var scan = stream.pos;;) {\n        var nextMatch = string.indexOf(leftDelimiter, scan);\n        scan = nextMatch + leftDelimiter.length;\n        if (nextMatch == -1 || !doesNotCount(stream, nextMatch + leftDelimiter.length)) break;\n      }\n      if (nextMatch == stream.pos) {\n        stream.match(leftDelimiter);\n        if (stream.eat(\"*\")) {\n          return chain(stream, state, tokenBlock(\"comment\", \"*\" + rightDelimiter));\n        } else {\n          state.depth++;\n          state.tokenize = tokenSmarty;\n          last = \"startTag\";\n          return \"tag\";\n        }\n      }\n\n      if (nextMatch > -1) stream.string = string.slice(0, nextMatch);\n      var token = baseMode.token(stream, state.base);\n      if (nextMatch > -1) stream.string = string;\n      return token;\n    }\n\n    // parsing Smarty content\n    function tokenSmarty(stream, state) {\n      if (stream.match(rightDelimiter, true)) {\n        if (version === 3) {\n          state.depth--;\n          if (state.depth <= 0) {\n            state.tokenize = tokenTop;\n          }\n        } else {\n          state.tokenize = tokenTop;\n        }\n        return cont(\"tag\", null);\n      }\n\n      if (stream.match(leftDelimiter, true)) {\n        state.depth++;\n        return cont(\"tag\", \"startTag\");\n      }\n\n      var ch = stream.next();\n      if (ch == \"$\") {\n        stream.eatWhile(regs.validIdentifier);\n        return cont(\"variable-2\", \"variable\");\n      } else if (ch == \"|\") {\n        return cont(\"operator\", \"pipe\");\n      } else if (ch == \".\") {\n        return cont(\"operator\", \"property\");\n      } else if (regs.stringChar.test(ch)) {\n        state.tokenize = tokenAttribute(ch);\n        return cont(\"string\", \"string\");\n      } else if (regs.operatorChars.test(ch)) {\n        stream.eatWhile(regs.operatorChars);\n        return cont(\"operator\", \"operator\");\n      } else if (ch == \"[\" || ch == \"]\") {\n        return cont(\"bracket\", \"bracket\");\n      } else if (ch == \"(\" || ch == \")\") {\n        return cont(\"bracket\", \"operator\");\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/\\d/);\n        return cont(\"number\", \"number\");\n      } else {\n\n        if (state.last == \"variable\") {\n          if (ch == \"@\") {\n            stream.eatWhile(regs.validIdentifier);\n            return cont(\"property\", \"property\");\n          } else if (ch == \"|\") {\n            stream.eatWhile(regs.validIdentifier);\n            return cont(\"qualifier\", \"modifier\");\n          }\n        } else if (state.last == \"pipe\") {\n          stream.eatWhile(regs.validIdentifier);\n          return cont(\"qualifier\", \"modifier\");\n        } else if (state.last == \"whitespace\") {\n          stream.eatWhile(regs.validIdentifier);\n          return cont(\"attribute\", \"modifier\");\n        } if (state.last == \"property\") {\n          stream.eatWhile(regs.validIdentifier);\n          return cont(\"property\", null);\n        } else if (/\\s/.test(ch)) {\n          last = \"whitespace\";\n          return null;\n        }\n\n        var str = \"\";\n        if (ch != \"/\") {\n          str += ch;\n        }\n        var c = null;\n        while (c = stream.eat(regs.validIdentifier)) {\n          str += c;\n        }\n        for (var i=0, j=keyFunctions.length; i<j; i++) {\n          if (keyFunctions[i] == str) {\n            return cont(\"keyword\", \"keyword\");\n          }\n        }\n        if (/\\s/.test(ch)) {\n          return null;\n        }\n        return cont(\"tag\", \"tag\");\n      }\n    }\n\n    function tokenAttribute(quote) {\n      return function(stream, state) {\n        var prevChar = null;\n        var currChar = null;\n        while (!stream.eol()) {\n          currChar = stream.peek();\n          if (stream.next() == quote && prevChar !== '\\\\') {\n            state.tokenize = tokenSmarty;\n            break;\n          }\n          prevChar = currChar;\n        }\n        return \"string\";\n      };\n    }\n\n    function tokenBlock(style, terminator) {\n      return function(stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = tokenTop;\n            break;\n          }\n          stream.next();\n        }\n        return style;\n      };\n    }\n\n    return {\n      startState: function() {\n        return {\n          base: CodeMirror.startState(baseMode),\n          tokenize: tokenTop,\n          last: null,\n          depth: 0\n        };\n      },\n      copyState: function(state) {\n        return {\n          base: CodeMirror.copyState(baseMode, state.base),\n          tokenize: state.tokenize,\n          last: state.last,\n          depth: state.depth\n        };\n      },\n      innerMode: function(state) {\n        if (state.tokenize == tokenTop)\n          return {mode: baseMode, state: state.base};\n      },\n      token: function(stream, state) {\n        var style = state.tokenize(stream, state);\n        state.last = last;\n        return style;\n      },\n      indent: function(state, text, line) {\n        if (state.tokenize == tokenTop && baseMode.indent)\n          return baseMode.indent(state.base, text, line);\n        else\n          return CodeMirror.Pass;\n      },\n      blockCommentStart: leftDelimiter + \"*\",\n      blockCommentEnd: \"*\" + rightDelimiter\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-smarty\", \"smarty\");\n});\n"],"file":"smarty.js"}