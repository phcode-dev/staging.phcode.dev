{"version":3,"sources":["thirdparty/CodeMirror/mode/toml/toml.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","startState","inString","stringType","lhs","inArray","token","stream","state","peek","next","sol","eol","match","skipTo","skipToEnd","eatSpace","eatWhile","c","defineMIME"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,yBACY,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,wBAAyBJ,KAEjCA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,OAAQ,WAC5B,MAAO,CACLC,WAAY,WACV,MAAO,CACLC,UAAU,EACVC,WAAY,GACZC,KAAK,EACLC,QAAS,IAGbC,MAAO,SAAUC,OAAQC,OAWvB,GATKA,MAAMN,UAA+B,KAAjBK,OAAOE,QAAoC,KAAjBF,OAAOE,SACxDD,MAAML,WAAaI,OAAOE,OAC1BF,OAAOG,OACPF,MAAMN,UAAW,GAEfK,OAAOI,OAA2B,IAAlBH,MAAMH,UACxBG,MAAMJ,KAAM,GAGVI,MAAMN,SAAU,CAClB,KAAOM,MAAMN,WAAaK,OAAOK,OAC3BL,OAAOE,SAAWD,MAAML,YAC1BI,OAAOG,OACPF,MAAMN,UAAW,GACU,OAAlBK,OAAOE,QAChBF,OAAOG,OACPH,OAAOG,QAEPH,OAAOM,MAAM,gBAGjB,OAAOL,MAAMJ,IAAM,kBAAoB,SAClC,OAAII,MAAMH,SAA6B,MAAlBE,OAAOE,QACjCF,OAAOG,OACPF,MAAMH,UACC,WACEG,MAAMJ,KAAyB,MAAlBG,OAAOE,QAAkBF,OAAOO,OAAO,MAC7DP,OAAOG,OAEe,MAAlBH,OAAOE,QAAgBF,OAAOG,OAC3B,QACoB,MAAlBH,OAAOE,QAChBF,OAAOQ,YACA,WACER,OAAOS,WACT,KACER,MAAMJ,KAAOG,OAAOU,SAAS,SAAUC,GAAK,MAAY,KAALA,GAAiB,KAALA,IACjE,WACEV,MAAMJ,KAAyB,MAAlBG,OAAOE,QAC7BF,OAAOG,OACPF,MAAMJ,KAAM,EACL,OACGI,MAAMJ,KAAOG,OAAOM,MAAM,0BAC7B,OACGL,MAAMJ,MAAQG,OAAOM,MAAM,UAAWN,OAAOM,MAAM,SAEnDL,MAAMJ,KAAyB,MAAlBG,OAAOE,QAIpBD,MAAMJ,KAAOG,OAAOM,MAAM,qBAC7B,UACGN,OAAOS,YACjBT,OAAOG,OAEF,OARLF,MAAMH,UACNE,OAAOG,OACA,WAJA,WAefX,WAAWoB,WAAW,cAAe","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"toml\", function () {\n  return {\n    startState: function () {\n      return {\n        inString: false,\n        stringType: \"\",\n        lhs: true,\n        inArray: 0\n      };\n    },\n    token: function (stream, state) {\n      //check for state changes\n      if (!state.inString && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.inString = true; // Update state\n      }\n      if (stream.sol() && state.inArray === 0) {\n        state.lhs = true;\n      }\n      //return state\n      if (state.inString) {\n        while (state.inString && !stream.eol()) {\n          if (stream.peek() === state.stringType) {\n            stream.next(); // Skip quote\n            state.inString = false; // Clear flag\n          } else if (stream.peek() === '\\\\') {\n            stream.next();\n            stream.next();\n          } else {\n            stream.match(/^.[^\\\\\\\"\\']*/);\n          }\n        }\n        return state.lhs ? \"property string\" : \"string\"; // Token style\n      } else if (state.inArray && stream.peek() === ']') {\n        stream.next();\n        state.inArray--;\n        return 'bracket';\n      } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n        stream.next();//skip closing ]\n        // array of objects has an extra open & close []\n        if (stream.peek() === ']') stream.next();\n        return \"atom\";\n      } else if (stream.peek() === \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (stream.eatSpace()) {\n        return null;\n      } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {\n        return \"property\";\n      } else if (state.lhs && stream.peek() === \"=\") {\n        stream.next();\n        state.lhs = false;\n        return null;\n      } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n        return 'atom'; //date\n      } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n        return 'atom';\n      } else if (!state.lhs && stream.peek() === '[') {\n        state.inArray++;\n        stream.next();\n        return 'bracket';\n      } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n        return 'number';\n      } else if (!stream.eatSpace()) {\n        stream.next();\n      }\n      return null;\n    }\n  };\n});\n\nCodeMirror.defineMIME('text/x-toml', 'toml');\n\n});\n"],"file":"toml.js"}