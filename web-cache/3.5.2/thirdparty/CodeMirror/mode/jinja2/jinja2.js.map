{"version":3,"sources":["thirdparty/CodeMirror/mode/jinja2/jinja2.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","operator","sign","atom","number","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","match","instring","next","inbraces","inbrackets","lineTag","eat","column","sol","eol","RegExp","join","startState","tokenize","token","style","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function() {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n      \"extends\", \"filter\", \"endfilter\", \"firstof\", \"do\", \"for\",\n      \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n      \"ifequal\", \"endifequal\", \"ifnotequal\", \"set\", \"raw\", \"endraw\",\n      \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n      \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"call\", \"endcall\", \"macro\",\n      \"endmacro\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n      \"closeblock\", \"openvariable\", \"closevariable\", \"without\", \"context\",\n      \"openbrace\", \"closebrace\", \"opencomment\",\n      \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n      \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n      \"endblocktrans\", \"get_available_languages\",\n      \"get_current_language_bidi\", \"pluralize\", \"autoescape\", \"endautoescape\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if(!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if(state.operator) {\n          state.operator = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if(state.sign) {\n          state.sign = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if(state.instring) {\n          if(ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if(ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        }\n        else if (state.inbraces > 0 && ch ==\")\") {\n          stream.next()\n          state.inbraces--;\n        }\n        else if (ch == \"(\") {\n          stream.next()\n          state.inbraces++;\n        }\n        else if (state.inbrackets > 0 && ch ==\"]\") {\n          stream.next()\n          state.inbrackets--;\n        }\n        else if (ch == \"[\") {\n          stream.next()\n          state.inbrackets++;\n        }\n        else if (!state.lineTag && (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\"))) {\n          state.intag = false;\n          return \"tag\";\n        } else if(stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if(stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.column() == 1 && state.lineTag && stream.match(keywords)) {\n            //allow nospace after tag before the keyword\n            return \"keyword\";\n          }\n          if(stream.eat(\" \") || stream.sol()) {\n            if(stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if(stream.match(atom)) {\n              return \"atom\";\n            }\n            if(stream.match(number)) {\n              return \"number\";\n            }\n            if(stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if(!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          state.inbraces = 0;\n          state.inbrackets = 0;\n          if(ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      //Line statements\n      } else if (stream.eat('#')) {\n        if (stream.peek() == '#') {\n          stream.skipToEnd();\n          return \"comment\"\n        }\n        else if (!stream.eol()) {\n          state.intag = true;\n          state.lineTag = true;\n          state.inbraces = 0;\n          state.inbrackets = 0;\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          inbrackets:0,\n          inbraces:0\n        };\n      },\n      token: function(stream, state) {\n        var style = state.tokenize(stream, state);\n        if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {\n          //Close line statement at the EOL\n          state.intag = false\n          state.lineTag = false\n        }\n        return style;\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\",\n      lineComment: \"##\",\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/jinja2\", \"jinja2\");\n});\n"],"file":"jinja2.js"}