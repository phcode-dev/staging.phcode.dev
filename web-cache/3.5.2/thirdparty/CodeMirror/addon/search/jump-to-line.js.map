{"version":3,"sources":["thirdparty/CodeMirror/addon/search/jump-to-line.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","dialog","cm","text","shortText","deflt","f","openDialog","value","selectValueOnOpen","bottom","options","search","prompt","getJumpDialog","phrase","interpretLine","string","num","Number","test","getCursor","line","defineOption","commands","jumpToLine","cur","ch","posStr","match","exec","setCursor","Math","round","lineCount","keyMap"],"mappings":"CAKA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,wBAAyBA,QAAQ,qBACrB,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,uBAAwB,oBAAqBJ,KAErDA,IAAIM,YANR,CAOG,SAASA,YACV,aAKA,SAASC,OAAOC,GAAIC,KAAMC,UAAWC,MAAOC,GACtCJ,GAAGK,WAAYL,GAAGK,WAAWJ,KAAMG,EAAG,CAACE,MAAOH,MAAOI,mBAAmB,EAAMC,OAAQR,GAAGS,QAAQC,OAAOF,SACvGJ,EAAEO,OAAOT,UAAWC,QAG3B,SAASS,cAAcZ,IACrB,OAAOA,GAAGa,OAAO,iBAAmB,sIAAwIb,GAAGa,OAAO,uCAAyC,UAGjO,SAASC,cAAcd,GAAIe,QACzB,IAAIC,IAAMC,OAAOF,QACjB,MAAI,QAAQG,KAAKH,QAAgBf,GAAGmB,YAAYC,KAAOJ,IAC3CA,IAAM,EAdpBlB,WAAWuB,aAAa,SAAU,CAACb,QAAQ,IAiB3CV,WAAWwB,SAASC,WAAa,SAASvB,IACxC,IAAIwB,IAAMxB,GAAGmB,YACbpB,OAAOC,GAAIY,cAAcZ,IAAKA,GAAGa,OAAO,iBAAmBW,IAAIJ,KAAO,EAAK,IAAMI,IAAIC,GAAI,SAASC,QAGhG,IAAIC,MAFJ,GAAKD,OAGL,GAAIC,MAAQ,oCAAoCC,KAAKF,QACnD1B,GAAG6B,UAAUf,cAAcd,GAAI2B,MAAM,IAAKV,OAAOU,MAAM,UAClD,GAAIA,MAAQ,gCAAgCC,KAAKF,QAAS,CAC/D,IAAIN,KAAOU,KAAKC,MAAM/B,GAAGgC,YAAcf,OAAOU,MAAM,IAAM,KACtD,QAAQT,KAAKS,MAAM,MAAKP,KAAOI,IAAIJ,KAAOA,KAAO,GACrDpB,GAAG6B,UAAUT,KAAO,EAAGI,IAAIC,SAClBE,MAAQ,4BAA4BC,KAAKF,UAClD1B,GAAG6B,UAAUf,cAAcd,GAAI2B,MAAM,IAAKH,IAAIC,OAKpD3B,WAAWmC,OAAgB,QAAE,SAAW","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Defines jumpToLine command. Uses dialog.js if present.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  // default search panel location\n  CodeMirror.defineOption(\"search\", {bottom: false});\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true, bottom: cm.options.search.bottom});\n    else f(prompt(shortText, deflt));\n  }\n\n  function getJumpDialog(cm) {\n    return cm.phrase(\"Jump to line:\") + ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use line:column or scroll% syntax)\") + '</span>';\n  }\n\n  function interpretLine(cm, string) {\n    var num = Number(string)\n    if (/^[-+]/.test(string)) return cm.getCursor().line + num\n    else return num - 1\n  }\n\n  CodeMirror.commands.jumpToLine = function(cm) {\n    var cur = cm.getCursor();\n    dialog(cm, getJumpDialog(cm), cm.phrase(\"Jump to line:\"), (cur.line + 1) + \":\" + cur.ch, function(posStr) {\n      if (!posStr) return;\n\n      var match;\n      if (match = /^\\s*([\\+\\-]?\\d+)\\s*\\:\\s*(\\d+)\\s*$/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), Number(match[2]))\n      } else if (match = /^\\s*([\\+\\-]?\\d+(\\.\\d+)?)\\%\\s*/.exec(posStr)) {\n        var line = Math.round(cm.lineCount() * Number(match[1]) / 100);\n        if (/^[-+]/.test(match[1])) line = cur.line + line + 1;\n        cm.setCursor(line - 1, cur.ch);\n      } else if (match = /^\\s*\\:?\\s*([\\+\\-]?\\d+)\\s*/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), cur.ch);\n      }\n    });\n  };\n\n  CodeMirror.keyMap[\"default\"][\"Alt-G\"] = \"jumpToLine\";\n});\n"],"file":"jump-to-line.js"}