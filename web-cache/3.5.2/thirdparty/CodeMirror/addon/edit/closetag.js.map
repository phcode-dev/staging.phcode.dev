{"version":3,"sources":["thirdparty/CodeMirror/addon/edit/closetag.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineOption","cm","val","old","Init","removeKeyMap","map","name","whenClosing","autoCloseSlash","whenOpening","autoCloseGT","addKeyMap","htmlDontClose","htmlIndent","getOption","Pass","ranges","listSelections","replacements","opt","i","length","empty","pos","head","tok","getTokenAt","inner","innerMode","getMode","state","tagInfo","mode","xmlCurrentTag","tagName","html","configuration","dontCloseTags","indentTags","end","ch","slice","lowerTagName","toLowerCase","type","test","string","charAt","close","indexOf","start","closingTagExists","xmlCurrentContext","emptyTags","text","newPos","Pos","line","indent","dontIndentOnAutoClose","info","replaceRange","anchor","sel","setSelections","indentLine","autoCloseCurrent","typingSlash","dontIndentOnSlash","replacement","mixed","context","top","getLine","replaceSelections","collection","elt","e","newTag","scanForClosingTag","Math","min","lastLine","nextClose","tag","onCx","to","next","commands","closeTag"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n * `emptyTags` (default is none)\n *   An array of XML tag names that should be autoclosed with '/>'.\n *\n * See demos/closetag.html for a usage example.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../fold/xml-fold\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../fold/xml-fold\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing !== false)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening !== false)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    var opt = cm.getOption(\"autoCloseTags\");\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      var tagInfo = inner.mode.xmlCurrentTag && inner.mode.xmlCurrentTag(state)\n      var tagName = tagInfo && tagInfo.name\n      if (!tagName) return CodeMirror.Pass\n\n      var html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && tagInfo.close ||\n          tok.string.indexOf(\"/\") == (pos.ch - tok.start - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state) || [], tagName, pos, true))\n        return CodeMirror.Pass;\n\n      var emptyTags = typeof opt == \"object\" && opt.emptyTags;\n      if (emptyTags && indexOf(emptyTags, tagName) > -1) {\n        replacements[i] = { text: \"/>\", newPos: CodeMirror.Pos(pos.line, pos.ch + 2) };\n        continue;\n      }\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    var dontIndentOnAutoClose = (typeof opt == \"object\" && opt.dontIndentOnAutoClose);\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (!dontIndentOnAutoClose && info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    var opt = cm.getOption(\"autoCloseTags\");\n    var dontIndentOnAutoClose = (typeof opt == \"object\" && opt.dontIndentOnSlash);\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement, mixed = inner.mode.name != \"xml\" && cm.getMode().name == \"htmlmixed\"\n      if (mixed && inner.mode.name == \"javascript\") {\n        replacement = head + \"script\";\n      } else if (mixed && inner.mode.name == \"css\") {\n        replacement = head + \"style\";\n      } else {\n        var context = inner.mode.xmlCurrentContext && inner.mode.xmlCurrentContext(state)\n        var top = context.length ? context[context.length - 1] : \"\"\n        if (!context || (context.length && closingTagExists(cm, context, top, pos)))\n          return CodeMirror.Pass;\n        replacement = head + top\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    if (!dontIndentOnAutoClose) {\n        for (var i = 0; i < ranges.length; i++)\n            if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n                cm.indentLine(ranges[i].head.line);\n    }\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, context, tagName, pos, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    var onCx = newTag ? 1 : 0\n    for (var i = context.length - 1; i >= 0; i--) {\n      if (context[i] == tagName) ++onCx\n      else break\n    }\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n"],"file":"closetag.js"}