{"version":3,"sources":["thirdparty/CodeMirror/addon/hint/sql-hint.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","tables","defaultTable","keywords","identifierQuote","CONS","QUERY_DIV","ALIAS_KEYWORD","Pos","cmpPos","isArray","val","Object","prototype","toString","call","getModeConf","editor","field","getModeAt","getCursor","config","resolveMode","getKeywords","getIdentifierQuote","getText","item","text","wrapTable","name","value","columns","parseTables","input","result","i","length","toUpperCase","getTable","shallowClone","object","key","hasOwnProperty","match","string","word","len","sub","substr","addMatches","search","wordlist","formatter","push","displayText","cleanName","charAt","nameParts","split","replace","RegExp","join","insertIdentifierQuotes","escaped","nameCompletion","cur","token","useIdentifierQuotes","start","cont","unshift","getTokenAt","line","w","pop","table","alias","aliasTable","oldTable","findTableByAlias","tableInsert","eachWord","lineText","f","words","doc","fullQuery","getValue","aliasUpperCase","previousWord","separator","validRange","end","lastLine","getLineHandle","indexOfSeparator","indexOf","posFromIndex","prevItem","current","query","getRange","wordUpperCase","registerHelper","options","defaultTableName","disableKeywords","ch","slice","objectOrClass","className","list","from","to"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../mode/sql/sql\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../mode/sql/sql\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var tables;\n  var defaultTable;\n  var keywords;\n  var identifierQuote;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos, cmpPos = CodeMirror.cmpPos;\n\n  function isArray(val) { return Object.prototype.toString.call(val) == \"[object Array]\" }\n\n  function getModeConf(editor, field) {\n    return editor.getModeAt(editor.getCursor()).config[field] || CodeMirror.resolveMode(\"text/x-sql\")[field]\n  }\n\n  function getKeywords(editor) {\n    return getModeConf(editor, \"keywords\") || []\n  }\n\n  function getIdentifierQuote(editor) {\n    return getModeConf(editor, \"identifierQuote\") || \"`\";\n  }\n\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {columns: value}\n    if (!value.text) value.text = name\n    return value\n  }\n\n  function parseTables(input) {\n    var result = {}\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i]\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item)\n      }\n    } else if (input) {\n      for (var name in input)\n        result[name.toUpperCase()] = wrapTable(name, input[name])\n    }\n    return result\n  }\n\n  function getTable(name) {\n    return tables[name.toUpperCase()]\n  }\n\n  function shallowClone(object) {\n    var result = {};\n    for (var key in object) if (object.hasOwnProperty(key))\n      result[key] = object[key];\n    return result;\n  }\n\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++)\n        if (match(search, wordlist[i])) result.push(formatter(wordlist[i]))\n    } else {\n      for (var word in wordlist) if (wordlist.hasOwnProperty(word)) {\n        var val = wordlist[word]\n        if (!val || val === true)\n          val = word\n        else\n          val = val.displayText ? {text: val.text, displayText: val.displayText} : val.text\n        if (match(search, val)) result.push(formatter(val))\n      }\n    }\n  }\n\n  function cleanName(name) {\n    // Get rid name from identifierQuote and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    }\n    // replace duplicated identifierQuotes with single identifierQuotes\n    // and remove single identifierQuotes\n    var nameParts = name.split(identifierQuote+identifierQuote);\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = nameParts[i].replace(new RegExp(identifierQuote,\"g\"), \"\");\n    return nameParts.join(identifierQuote);\n  }\n\n  function insertIdentifierQuotes(name) {\n    var nameParts = getText(name).split(\".\");\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = identifierQuote +\n      // duplicate identifierQuotes\n    nameParts[i].replace(new RegExp(identifierQuote,\"g\"), identifierQuote+identifierQuote) +\n      identifierQuote;\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useIdentifierQuotes = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n    while (cont) {\n      cont = (token.string.charAt(0) == \".\");\n      useIdentifierQuotes = useIdentifierQuotes || (token.string.charAt(0) == identifierQuote);\n\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    }\n\n    // Try to complete table names\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns from defaultTable\n    addMatches(result, string, defaultTable, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n\n    var alias = false;\n    var aliasTable = table;\n    // Check if table is available. If not, find table by Alias\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n\n    var columns = getTable(table);\n    if (columns && columns.columns)\n      columns = columns.columns;\n\n    if (columns) {\n      addMatches(result, string, columns, function(w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n        return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n      });\n    }\n\n    return start;\n  }\n\n  function eachWord(lineText, f) {\n    var words = lineText.split(/\\s+/)\n    for (var i = 0; i < words.length; i++)\n      if (words[i]) f(words[i].replace(/[`,;]/g, ''))\n  }\n\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    };\n\n    //add separator\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n    while(indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator+1);\n    }\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length));\n\n    //find valid range\n    var prevItem = null;\n    var current = editor.getCursor()\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {start: prevItem, end: separator[i]};\n        break;\n      }\n      prevItem = separator[i];\n    }\n\n    if (validRange.start) {\n      var query = doc.getRange(validRange.start, validRange.end, false);\n\n      for (var i = 0; i < query.length; i++) {\n        var lineText = query[i];\n        eachWord(lineText, function(word) {\n          var wordUpperCase = word.toUpperCase();\n          if (wordUpperCase === aliasUpperCase && getTable(previousWord))\n            table = previousWord;\n          if (wordUpperCase !== CONS.ALIAS_KEYWORD)\n            previousWord = word;\n        });\n        if (table) break;\n      }\n    }\n    return table;\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"sql\", function(editor, options) {\n    tables = parseTables(options && options.tables)\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n    identifierQuote = getIdentifierQuote(editor);\n\n    if (defaultTableName && !defaultTable)\n      defaultTable = findTableByAlias(defaultTableName, editor);\n\n    defaultTable = defaultTable || [];\n\n    if (defaultTable.columns)\n      defaultTable = defaultTable.columns;\n\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur), start, end, search;\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    if (token.string.match(/^[.`\"'\\w@][\\w$#]*$/g)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n    if (search.charAt(0) == \".\" || search.charAt(0) == identifierQuote) {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      var objectOrClass = function(w, className) {\n        if (typeof w === \"object\") {\n          w.className = className;\n        } else {\n          w = { text: w, className: className };\n        }\n        return w;\n      };\n      addMatches(result, search, defaultTable, function(w) {\n        return objectOrClass(w, \"CodeMirror-hint-table CodeMirror-hint-default-table\");\n      });\n      addMatches(\n        result,\n        search,\n        tables, function(w) {\n          return objectOrClass(w, \"CodeMirror-hint-table\");\n        }\n      );\n      if (!disableKeywords)\n        addMatches(result, search, keywords, function(w) {\n          return objectOrClass(w.toUpperCase(), \"CodeMirror-hint-keyword\");\n        });\n    }\n\n    return {list: result, from: Pos(cur.line, start), to: Pos(cur.line, end)};\n  });\n});\n"],"file":"sql-hint.js"}