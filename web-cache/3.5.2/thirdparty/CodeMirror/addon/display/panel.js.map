{"version":3,"sources":["thirdparty/CodeMirror/addon/display/panel.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","Panel","cm","node","options","height","this","cleared","initPanels","wrap","getWrapperElement","style","window","getComputedStyle","currentStyle","parseInt","info","state","panels","setHeight","wrapper","document","createElement","hasFocus","scrollPos","getScrollInfo","parentNode","insertBefore","appendChild","scrollTo","left","top","focus","_setSize","setSize","width","newHeight","offsetHeight","px","exec","Number","editorheight","map","p","getBoundingClientRect","reduce","a","b","removePanels","replaceChild","isAtTop","dom","sibling","nextSibling","defineExtension","cmWrapper","replace","after","before","clear","position","firstChild","panel","push","stable","prototype","skipRemove","splice","indexOf","removeChild","length","changed"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  CodeMirror.defineExtension(\"addPanel\", function (node, options) {\n    options = options || {};\n\n    if (!this.state.panels) initPanels(this);\n\n    var info = this.state.panels;\n    var wrapper = info.wrapper;\n    var cmWrapper = this.getWrapperElement();\n    var replace = options.replace instanceof Panel && !options.replace.cleared;\n\n    if (options.after instanceof Panel && !options.after.cleared) {\n      wrapper.insertBefore(node, options.before.node.nextSibling);\n    } else if (options.before instanceof Panel && !options.before.cleared) {\n      wrapper.insertBefore(node, options.before.node);\n    } else if (replace) {\n      wrapper.insertBefore(node, options.replace.node);\n      options.replace.clear(true);\n    } else if (options.position == \"bottom\") {\n      wrapper.appendChild(node);\n    } else if (options.position == \"before-bottom\") {\n      wrapper.insertBefore(node, cmWrapper.nextSibling);\n    } else if (options.position == \"after-top\") {\n      wrapper.insertBefore(node, cmWrapper);\n    } else {\n      wrapper.insertBefore(node, wrapper.firstChild);\n    }\n\n    var height = (options && options.height) || node.offsetHeight;\n\n    var panel = new Panel(this, node, options, height);\n    info.panels.push(panel);\n\n    this.setSize();\n    if (options.stable && isAtTop(this, node))\n      this.scrollTo(null, this.getScrollInfo().top + height);\n\n    return panel;\n  });\n\n  function Panel(cm, node, options, height) {\n    this.cm = cm;\n    this.node = node;\n    this.options = options;\n    this.height = height;\n    this.cleared = false;\n  }\n\n  /* when skipRemove is true, clear() was called from addPanel().\n   * Thus removePanels() should not be called (issue 5518) */\n  Panel.prototype.clear = function (skipRemove) {\n    if (this.cleared) return;\n    this.cleared = true;\n    var info = this.cm.state.panels;\n    info.panels.splice(info.panels.indexOf(this), 1);\n    this.cm.setSize();\n    if (this.options.stable && isAtTop(this.cm, this.node))\n      this.cm.scrollTo(null, this.cm.getScrollInfo().top - this.height)\n    info.wrapper.removeChild(this.node);\n    if (info.panels.length == 0 && !skipRemove) removePanels(this.cm);\n  };\n\n  Panel.prototype.changed = function () {\n    this.height = this.node.getBoundingClientRect().height;\n    this.cm.setSize();\n  };\n\n  function initPanels(cm) {\n    var wrap = cm.getWrapperElement()\n    var style = window.getComputedStyle ? window.getComputedStyle(wrap) : wrap.currentStyle;\n    var height = parseInt(style.height);\n    var info = cm.state.panels = {\n      setHeight: wrap.style.height,\n      panels: [],\n      wrapper: document.createElement(\"div\")\n    };\n    var hasFocus = cm.hasFocus(), scrollPos = cm.getScrollInfo()\n    wrap.parentNode.insertBefore(info.wrapper, wrap);\n    info.wrapper.appendChild(wrap);\n    cm.scrollTo(scrollPos.left, scrollPos.top)\n    if (hasFocus) cm.focus();\n\n    cm._setSize = cm.setSize;\n    if (height != null) cm.setSize = function (width, newHeight) {\n      if (!newHeight) newHeight = info.wrapper.offsetHeight;\n      info.setHeight = newHeight;\n      if (typeof newHeight != \"number\") {\n        var px = /^(\\d+\\.?\\d*)px$/.exec(newHeight);\n        if (px) {\n          newHeight = Number(px[1]);\n        } else {\n          info.wrapper.style.height = newHeight;\n          newHeight = info.wrapper.offsetHeight;\n        }\n      }\n      var editorheight = newHeight - info.panels\n        .map(function (p) { return p.node.getBoundingClientRect().height; })\n        .reduce(function (a, b) { return a + b; }, 0);\n      cm._setSize(width, editorheight);\n      height = newHeight;\n    };\n  }\n\n  function removePanels(cm) {\n    var info = cm.state.panels;\n    cm.state.panels = null;\n\n    var wrap = cm.getWrapperElement()\n    var hasFocus = cm.hasFocus(), scrollPos = cm.getScrollInfo()\n    info.wrapper.parentNode.replaceChild(wrap, info.wrapper);\n    cm.scrollTo(scrollPos.left, scrollPos.top)\n    if (hasFocus) cm.focus();\n    wrap.style.height = info.setHeight;\n    cm.setSize = cm._setSize;\n    cm.setSize();\n  }\n\n  function isAtTop(cm, dom) {\n    for (var sibling = dom.nextSibling; sibling; sibling = sibling.nextSibling)\n      if (sibling == cm.getWrapperElement()) return true\n    return false\n  }\n});\n"],"file":"panel.js"}