{"version":3,"sources":["thirdparty/tern/plugin/modules.js"],"names":["mod","exports","module","require","define","amd","tern","signal","infer","Modules","server","options","this","modules","Object","create","nonRelative","knownModules","resolvers","modNameTests","importTests","completableTypes","resolvePath","parent","sub","test","m","exec","length","lastSlash","lastIndexOf","slice","dirName","path","baseName","defaultResolver","name","parentFile","cx","findFile","fs","isRelative","filter","word","string","query","caseInsensitive","toLowerCase","indexOf","preCondenseReach","state","mods","node","roots","Obj","id","origin","prop","defProp","replace","propagate","postLoadDef","data","me","definitions","props","get","known","findTypeAt","_file","_pos","expr","type","modType","getModType","inner","getType","originNode","doc","url","findCompletions","file","wordEnd","resolvePos","end","types","findExpressionAround","ast","scope","isModName","findModuleCompletions","imp","isImport","findImportCompletions","completions","start","resolveModule","sourceFile","forAllPropertiesOf","obj","depth","protos","addCompletion","outputPos","isSpecifier","argNode","value","raw","quote","charAt","completeFileName","completeModuleName","text","isProperty","map","rec","JSON","stringify","displayName","prototype","mixin","buildWrappingScope","Scope","maybeOverride","hasOwnProperty","override","def","parsePath","topScope","load","over","dontLoad","RegExp","ANull","resolved","relative","i","addFile","AVal","findIn","array","pos","fromObj","useVal","pathsSeen","val","afterSlash","found","dir","_dir","added","modName","getObjType","hasProp","getProp","pDir","projectDir","endSlash","pt","resolve","dirname","base","filePart","basename","readdirSync","forEach","projectPath","normalizeFilename","registerPlugin","on","defineQueryType","takesFile","run","describe","aval","target","toString","span","getSpan","storeSpan","resp"],"mappings":"CAAA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OAChCF,IAAIG,QAAQ,gBAAiBA,QAAQ,eAAgBA,QAAQ,iBAAkBA,SACnE,mBAAVC,QAAwBA,OAAOC,IACjCD,OAAO,CAAC,eAAgB,cAAe,iBAAkBJ,KAClEA,IAAIM,KAAMA,KAAMA,KAAKC,QALvB,CAMG,SAASC,MAAOF,KAAMC,OAAQJ,SAC/B,aAEA,SAASM,QAAQC,OAAQC,SACvBC,KAAKF,OAASA,OACdE,KAAKD,QAAUA,SAAW,GAC1BC,KAAKC,QAAUC,OAAOC,OAAO,MAC7BH,KAAKI,YAAcF,OAAOC,OAAO,MACjCH,KAAKK,aAAeH,OAAOC,OAAO,MAClCH,KAAKM,UAAY,GACjBN,KAAKO,aAAe,GACpBP,KAAKQ,YAAc,GACnBR,KAAKS,iBAAmBP,OAAOC,OAAO,MA4HxC,SAASO,YAAYC,OAAQC,KAC3B,GAAI,eAAeC,KAAKD,KAAM,OAAOA,IAErC,IAAIE,EACJ,IAFIH,SAAW,MAAME,KAAKF,UAASA,QAAkB,KAE9CG,EAAI,aAAaC,KAAKH,MAAM,CACjC,GAAIE,EAAE,IAAMH,OAAOK,OAAS,EAAG,CAC7B,IAAIC,UAAYN,OAAOO,YAAY,IAAKP,OAAOK,OAAS,GACxDL,QAAuB,GAAdM,UAAkB,GAAKN,OAAOQ,MAAM,EAAGF,UAAY,GAE9DL,IAAMA,IAAIO,MAAML,EAAE,GAAGE,QAEvB,OAAOL,OAASC,IAGlB,SAASQ,QAAQC,MACf,IAAIJ,UAAYI,KAAKH,YAAY,KACjC,OAAkB,GAAdD,UAAwB,GACrBI,KAAKF,MAAM,EAAGF,UAAY,GAEnC,SAASK,SAASD,MAChB,IAAIJ,UAAYI,KAAKH,YAAY,KACjC,OAAkB,GAAdD,UAAwBI,KAChBA,KAAKF,MAAMF,UAAY,GAGrC,SAASM,gBAAgBC,KAAMC,YAC7B,GAAK,WAAWZ,KAAKW,MAArB,CACA,IAAIH,KAAOX,YAAYU,QAAQK,YAAaD,MACxC1B,OAASF,MAAM8B,KAAKf,OACxB,OAAIb,OAAO6B,SAASN,MAAcA,KAC9BvB,OAAO6B,SAASN,KAAO,OAAeA,KAAO,WAAjD,GAKY,IACRO,GAAoBP,KA0B1B,SAASQ,WAAWR,MAClB,MAAO,WAAWR,KAAKQ,MAGzB,SAASS,OAAOC,KAAMC,OAAQC,OAC5B,OAAwB,IAAjBA,MAAMH,SAAqBC,MACyC,IAAxEE,MAAMC,gBAAkBF,OAAOG,cAAgBH,QAAQI,QAAQL,MAGpE,SAASM,iBAAiBC,OACxB,IAAIC,KAAO3C,MAAM8B,KAAKf,OAAOvB,IAAIa,QAAQA,QACrCuC,KAAOF,MAAMG,MAAM,YAAc,IAAI7C,MAAM8C,IAAI,MACnD,IAAK,IAAIlB,QAAQe,KAAM,CACrB,IAAInD,IAAMmD,KAAKf,MACXmB,GAAKvD,IAAIwD,QAAUpB,KACnBqB,KAAOL,KAAKM,QAAQH,GAAGI,QAAQ,MAAO,MAC1CF,KAAKD,OAASxD,IAAIwD,OAClBxD,IAAI4D,UAAUH,OAIlB,SAASI,YAAYC,MACnB,IAAIxB,GAAK9B,MAAM8B,KAAMyB,GAAKzB,GAAGf,OAAOvB,IAAIa,QACpCsC,KAAOb,GAAG0B,YAAYF,KAAK,UAAU,YACzC,GAAIX,KAAM,IAAK,IAAIf,QAAQe,KAAKc,MAAO,CACrC,IAAIT,OAASpB,KAAKuB,QAAQ,KAAM,KAC5B3D,IAAM+D,GAAGG,IAAIV,QACjBxD,IAAIwD,OAASA,OACbL,KAAKc,MAAM7B,MAAMwB,UAAU5D,KAE7B,IAAImE,MAAQ7B,GAAG0B,YAAYF,KAAK,UAAU,kBAC1C,GAAIK,MAAO,IAAK,IAAI/B,QAAQ+B,MAAMF,MAChCF,GAAG9C,aAAamB,KAAKuB,QAAQ,KAAM,MAAQQ,MAAMF,MAAM7B,MAG3D,SAASgC,WAAWC,MAAOC,KAAMC,KAAMC,MACrC,IAAKD,KAAM,OAAOC,KAClB,IAAIT,GACAU,QADKjE,MAAM8B,KAAKf,OAAOvB,IAAIa,QACd6D,WAAWH,KAAKnB,MACjC,IAAKqB,QAAS,OAAOD,KAKrB,IAAIG,MAAQF,QAAQG,SAAQ,IAAU,GAQtC,OAPAJ,KAAO1D,OAAOC,OAAOyD,OAChBhB,OAASiB,QAAQjB,QAAUmB,MAAMnB,OACtCgB,KAAKK,WAAaJ,QAAQI,YAAcF,MAAME,WAC1CJ,QAAQK,IAAKN,KAAKM,IAAML,QAAQK,IAC3BH,MAAMG,MAAKN,KAAKM,IAAMH,MAAMG,KACjCL,QAAQM,IAAKP,KAAKO,IAAMN,QAAQM,IAC3BJ,MAAMI,MAAKP,KAAKO,IAAMJ,MAAMI,KAC9BP,KAIT,SAASQ,gBAAgBC,KAAMpC,OAC7B,IAAIkB,GAAKvD,MAAM8B,KAAKf,OAAOvB,IAAIa,QAC3BqE,QAAU5E,KAAK6E,WAAWF,KAAMpC,MAAMuC,KAAMC,MAAQtB,GAAG1C,iBACvDkD,KAAO/D,MAAM8E,qBAAqBL,KAAKM,IAAK,KAAML,QAASD,KAAKO,MAC9B,SAAShB,MAAQ,OAAOA,QAAQa,QACtE,IAAKd,KAAM,OAAO,KAElB,GAAwC,MAApCR,GAAG0B,UAAUlB,KAAKnB,KAAM8B,SAC1B,OAAOQ,sBAAsB3B,GAAIkB,KAAMpC,MAAO0B,KAAKnB,KAAM8B,SAE3D,IAAIS,IAAM5B,GAAG6B,SAASrB,KAAKnB,KAAM8B,SACjC,OAAIS,KAAOA,IAAIvD,MAAoB,MAAZuD,IAAIlC,KAClBoC,sBAAsB9B,GAAIkB,KAAMpC,MAAO0B,KAAKnB,KAAMuC,IAAKT,cADhE,EAIF,SAASW,sBAAsB9B,GAAIkB,KAAMpC,MAAOO,KAAMuC,IAAKT,SACzD,IAAIY,YAAc,GACdnD,KAAOS,KAAKhB,KAAOgB,KAAKhB,KAAKL,MAAM,EAAGmD,QAAU9B,KAAK2C,OAAS,GAC9DlD,MAAMC,kBAAiBH,KAAOA,KAAKI,eAEvC,IAAI0B,QAAUV,GAAGiC,cAAcL,IAAIvD,KAAMgB,KAAK6C,WAAW7D,MAAMwC,UAC/D,OAAKH,SACLjE,MAAM0F,mBAAmBzB,QAAS,SAAShB,KAAM0C,IAAKC,OAChDD,KAAO3F,MAAM8B,KAAK+D,OAAOvF,UACR,IAAjB+B,MAAMH,QAAoBC,MAC4C,KAArEE,MAAMC,gBAAkBW,KAAKV,cAAgBU,MAAMT,QAAQL,OAChErC,KAAKgG,cAAczD,MAAOiD,YAAarC,KAAM0C,KAAOA,IAAIlC,MAAMR,MAAO2C,UAEhE,CACLL,MAAOzF,KAAKiG,UAAU1D,MAAOoC,KAAM7B,KAAKhB,KAAOgB,KAAK2C,MAAQb,SAC5DE,IAAK9E,KAAKiG,UAAU1D,MAAOoC,KAAMC,SACjCY,YAAaA,YACbU,aAAa,IAXM,KAevB,SAASd,sBAAsB3B,GAAIkB,KAAMpC,MAAO4D,QAASvB,SACvD,KAAoB,WAAhBuB,QAAQjC,MAA6C,iBAAjBiC,QAAQC,OAC5CD,QAAQV,MAAQb,SAAWuB,QAAQrB,IAAMF,SAD7C,CAGA,IAAIvC,KAAO8D,QAAQE,IAAI5E,MAAM,EAAGmD,QAAUuB,QAAQV,OAAQa,MAAQH,QAAQE,IAAIE,OAAO,GACjFlE,MAAQA,KAAKkE,OAAOlE,KAAKf,OAAS,IAAMgF,QAC1CjE,KAAOA,KAAKZ,MAAM,EAAGY,KAAKf,OAAS,IACjCiB,MAAMC,kBAAiBH,KAAOA,KAAKI,eAEvC,IAAI+C,YAAc,GAMlB,OALIrD,WAAWE,MAAOoB,GAAG+C,iBAAiBhB,YAAajD,MAAOoC,KAAK7C,KAAMO,MACpEoB,GAAGgD,mBAAmBjB,YAAajD,MAAOF,MAE3C8D,QAAQrB,KAAOF,QAAU,GAAKD,KAAK+B,KAAKH,OAAO3B,UAAY0B,SAC3D1B,QACG,CACLa,MAAOzF,KAAKiG,UAAU1D,MAAOoC,KAAMwB,QAAQV,OAC3CX,IAAK9E,KAAKiG,UAAU1D,MAAOoC,KAAMC,SACjC+B,YAAY,EACZnB,YAAaA,YAAYoB,IAAI,SAASC,KACpC,IAAI/E,KAAqB,iBAAP+E,IAAkBA,IAAMA,IAAI/E,KAC1CQ,OAASwE,KAAKC,UAAUjF,MAE5B,MADa,KAATwE,QAAchE,OAASgE,MAAQhE,OAAOb,MAAM,EAAGa,OAAOhB,OAAQ,GAAG+B,QAAQ,KAAM,OAASiD,OAC1E,iBAAPO,IAAwBvE,QACnCuE,IAAIG,YAAclF,KAClB+E,IAAI/E,KAAOQ,OACJuE,SA7Sb1G,QAAQ8G,UAAYhH,OAAOiH,MAAM,CAC/BC,mBAAoB,SAASlG,OAAQiC,OAAQJ,MAC3C,IAAIoC,MAAQ,IAAIhF,MAAMkH,MAAMnG,OAAQ6B,MAGpC,OAFAoC,MAAMhC,OAASA,OACf5C,KAAKL,OAAO,YAAaiF,OAClBA,OAGTmC,cAAe,SAASvF,MACtB,IAAKxB,KAAKD,QAAQE,UAAYD,KAAKD,QAAQE,QAAQ+G,eAAexF,MAChE,OAAO,EACT,GAAIxB,KAAKC,QAAQuB,MAAO,OAAOxB,KAAKC,QAAQuB,MAE5C,IAAIyF,SAAWjH,KAAKD,QAAQE,QAAQuB,MACpC,GAAwB,iBAAd,UAAgD,KAAtByF,SAAShB,OAAO,GAClD,OAAOrG,MAAMsH,IAAIC,UAAUF,SAAS9F,MAAM,IAE5C,IAAIyD,MAAQ5E,KAAK6G,mBAAmBjH,MAAM8B,KAAK0F,SAAU5F,MAEzD,OADA5B,MAAMsH,IAAIG,KAAKJ,SAAUrC,OAClB5E,KAAKC,QAAQuB,MAAQoD,MAAMvF,SAGpC+F,cAAe,SAAS5D,KAAMC,YAC5B,IAAI6F,KAAOtH,KAAK+G,cAAcvF,MAE1B+B,MAiBAA,MAlBJ,GAAI+D,KAAM,OAAOA,KAEjB,GADI/D,MAAQvD,KAAKK,aAAamB,MACnB,OAAO+B,MAClB,GAA6B,GAAzBvD,KAAKD,QAAQwH,UACbvH,KAAKD,QAAQwH,UAAY,IAAIC,OAAOxH,KAAKD,QAAQwH,UAAU1G,KAAKW,OAChExB,KAAKD,QAAQsH,OAAS,IAAIG,OAAOxH,KAAKD,QAAQsH,MAAMxG,KAAKW,MAC3D,OAAO5B,MAAM6H,MAGf,IADA,IAAIC,SAAUC,SAAW9F,WAAWL,MAC3BoG,EAAI,GAAIF,UAAYE,EAAI5H,KAAKM,UAAUU,OAAQ4G,IACtDF,SAAW1H,KAAKM,UAAUsH,GAAGpG,KAAMC,YAErC,OADKiG,WAAUA,SAAWnG,gBAAgBC,KAAMC,aAC3CiG,SACkB,iBAAZA,UACJC,WAAU3H,KAAKI,YAAYoB,OAAQ,GACjCkG,WAGLnE,MAAQvD,KAAKC,QAAQyH,WACPnE,OAEd,uBAAuB1C,KAAK6G,WAC9B1H,KAAKF,OAAO+H,QAAQH,SAAU,KAAMjG,YACjCkG,WAAU3H,KAAKI,YAAYoB,MAAQkG,UACjC1H,KAAKC,QAAQyH,UAAY,IAAI9H,MAAMkI,MAZpBlI,MAAM6H,OAe9BM,OAAQ,SAASC,MAAOxF,KAAMyF,KAC5B,IAAK,IAAIL,EAAI,EAAGA,EAAII,MAAMhH,OAAQ4G,IAAK,CACrC,IAAIpG,KAAOwG,MAAMJ,GAAGpF,KAAMyF,KAC1B,GAAY,MAARzG,KAAc,OAAOA,OAI7BqD,UAAW,SAASrC,KAAMyF,KAAO,OAAOjI,KAAK+H,OAAO/H,KAAKO,aAAciC,KAAMyF,MAC7EjD,SAAU,SAASxC,KAAMyF,KAAO,OAAOjI,KAAK+H,OAAO/H,KAAKQ,YAAagC,KAAMyF,MAE3E3E,IAAK,SAAS9B,MACZ,OAAOxB,KAAKC,QAAQuB,QAAUxB,KAAKC,QAAQuB,MAAQ,IAAI5B,MAAMkI,OAG/D3B,mBAAoB,SAASjB,YAAajD,MAAOF,MAC/C,SAASmG,QAAQ3C,IAAK4C,QACpB,IAAK,IAAI3G,QAAQ+D,IACXzD,OAAOC,KAAMP,KAAMS,QACrBvC,KAAKgG,cAAczD,MAAOiD,YAAa1D,KAAM2G,QAAU5C,IAAI/D,OAGjE0G,QAAQlI,KAAKK,cAAc,GACvBL,KAAKD,QAAQE,SAASiI,QAAQlI,KAAKD,QAAQE,SAAS,GAExD,IAAImI,UAAYlI,OAAOC,OAAO,MAC9B,IAAK,IAAI0C,QAAQ7C,KAAKI,YAAa,CACjC,IAAIiI,IAAMrI,KAAKI,YAAYyC,MAC3B,GAAW,GAAPwF,MAAqC,GAAtBxF,KAAKT,QAAQ,KAC1BN,OAAOC,KAAMc,KAAMZ,QAAQvC,KAAKgG,cAAczD,MAAOiD,YAAarC,WACjE,GAA0B,GAAtBA,KAAKT,QAAQL,OAAcA,KAAKK,QAAQ,MAAQ,EAAG,CAC5D,IAAIkG,WAAa,YAAYvH,KAAK8B,MAAM,GACpC0F,MAAQF,IAAIjG,QAAQkG,YACxB,GAAIC,OAAS,EAAG,CACd,IAAIC,IAAMH,IAAIlH,MAAM,EAAGoH,QAAU,eAAexH,KAAKgB,MAAM,IAAM,IACjE,GAAIyG,OAAOJ,UAAW,SACtBA,UAAUI,MAAO,EACjBxI,KAAKkG,iBAAiBhB,YAAajD,MAAO,KAAMF,KAAMyG,SAM9DtC,iBAAkB,SAAShB,YAAajD,MAAOR,WAAYM,KAAM0G,MAC/D,IAAIpH,KAAOI,WAAaf,YAAYU,QAAQK,YAAaM,MAAQT,SAASS,MAC1E,IAAK,IAAIc,QAAQ7C,KAAKC,QACpB,GAAI4C,MAAQpB,YAAcK,OAAOT,KAAMwB,KAAMZ,OAAQ,CAC/C,QAAQpB,KAAKgC,QAAOA,KAAOA,KAAK1B,MAAM,EAAG0B,KAAK7B,OAAS,IAC3D,IAAI0H,MAAQ7F,KAAK1B,MAAME,KAAKL,QAC5BtB,KAAKgG,cAAczD,MAAOiD,YAAanD,KAAO2G,MAAO1I,KAAKC,QAAQ4C,SAKxEiB,WAAY,SAAStB,MACnB,IAAImG,QAAU3I,KAAK6E,UAAUrC,MAAOuC,IAAKlC,KAKzC,GAJe,MAAX8F,UAAoB5D,IAAM/E,KAAKgF,SAASxC,SAC1CmG,QAAU5D,IAAIvD,KACdqB,KAAOkC,IAAIlC,MAEE,MAAX8F,QAAJ,CAEA,IAAI/E,KAAO5D,KAAKoF,cAAcuD,QAASnG,KAAK6C,WAAW7D,MACvD,GAAIqB,KAAM,CACR,IAAI0C,IAAM3B,KAAKgF,aACfhF,KAAO2B,KAAOA,IAAIsD,QAAQhG,OAASe,KAAKkF,QAAQjG,MAElD,OAAOe,SAuCPrE,UACEqC,GAAKrC,QAAQ,MAAO8B,KAAO9B,QAAQ,QAEvCM,QAAQ8G,UAAUT,iBAAmB,SAAShB,YAAajD,MAAOR,WAAYM,KAAMyG,KAClF,IAAIO,KAAO/I,KAAKF,OAAOkJ,WACnBC,SAAW,MAAMpI,KAAKkB,MAC1B,GAAIN,WAAY,CACd,IAAIyH,GAAK7H,KAAK8H,QAAQJ,KAAM1H,KAAK+H,QAAQ3H,YAAaM,MACtDyG,IAAMS,SAAWC,GAAK7H,KAAK+H,QAAQF,IAErC,IAAIG,KAAOJ,SAAWlH,KAAOV,KAAK+H,QAAQrH,MAAQ,IAC9CuH,SAAWL,SAAW,GAAK5H,KAAKkI,SAASxH,MAEzCoB,GAAKnD,KACT4B,GAAG4H,YAAYhB,KAAKiB,QAAQ,SAASpF,MACnC,IAAI,MAAMxD,KAAKwD,OACXvC,OAAOwH,SAAUjF,KAAMpC,OAAQ,CACjC,IAAIyH,YAAcvG,GAAGrD,OAAO6J,kBAAkBtI,KAAKsG,SAASoB,KAAM1H,KAAK8H,QAAQX,IAAKnE,QACpF,GAAIqF,aAAejI,WAAY,OAC/B,IAAIqE,MAAQ3C,GAAGlD,QAAQyJ,aACnB,QAAQ7I,KAAKwD,QAAOA,KAAOA,KAAKlD,MAAM,EAAGkD,KAAKrD,OAAS,IAC3DtB,KAAKgG,cAAczD,MAAOiD,YAAamE,KAAOhF,KAAMyB,YAiI5DpG,KAAKkK,eAAe,UAAW,SAAS9J,OAAQC,SAC9CD,OAAOV,IAAIa,QAAU,IAAIJ,QAAQC,OAAQC,SAEzCD,OAAO+J,GAAG,aAAc,SAASxF,MAC/BA,KAAKO,MAAQ5E,KAAKZ,IAAIa,QAAQ4G,mBAAmBxC,KAAKO,MAAOP,KAAK7C,KAAM6C,KAAKM,OAG/E7E,OAAO+J,GAAG,YAAa,SAASxF,MAC9B,IAAIjF,IAAMY,KAAKZ,IAAIa,QAAQqD,IAAIe,KAAK7C,MACpCpC,IAAIwD,OAASyB,KAAK7C,KAClBxB,KAAKZ,IAAIa,QAAQN,OAAO,aAAc0E,KAAMjF,OAG9CU,OAAO+J,GAAG,QAAS,WACjB7J,KAAKZ,IAAIa,QAAQA,QAAUC,OAAOC,OAAO,QAG3CL,OAAO+J,GAAG,mBAAoBxH,kBAC9BvC,OAAO+J,GAAG,cAAe5G,aACzBnD,OAAO+J,GAAG,SAAUrG,YACpB1D,OAAO+J,GAAG,aAAczF,mBAG1B1E,KAAKoK,gBAAgB,UAAW,CAC9BC,WAAW,EACXC,IAAK,SAASlK,OAAQmC,MAAOoC,MAC3B,SAAS4F,SAASC,MAChB,IAAIC,OAAS,GAAIvG,KAAOsG,KAAKlG,SAAQ,GACrCmG,OAAOvG,KAAOhE,MAAMwK,SAASxG,KAAM,GACnC,IAAIM,IAAMgG,KAAKhG,KAAQN,MAAQA,KAAKM,IAAMC,IAAM+F,KAAK/F,KAAQP,MAAQA,KAAKO,IACtED,MAAKiG,OAAOjG,IAAMA,KAClBC,MAAKgG,OAAOhG,IAAMA,KACtB,IAAIkG,KAAO3K,KAAK4K,QAAQJ,OAAUtG,MAAQlE,KAAK4K,QAAQ1G,MAEvD,OADIyG,MAAM3K,KAAK6K,UAAUzK,OAAQmC,MAAOoI,KAAMF,QACvCA,OAGT,IAAI/K,IAAMU,OAAOV,IAAIa,QAASsD,MAAQnE,KAAOA,IAAIa,QAAQoE,KAAK7C,MAC9D,IAAK+B,MAAO,MAAO,GACnB,IAAIiH,KAAOP,SAAS1G,OAChBK,KAAOL,MAAMS,SAAQ,GACzB,GAAIJ,gBAAgBhE,MAAM8C,IAAK,CAC7B,IAAIW,MAAQmH,KAAKnH,MAAQ,GACzB,IAAK,IAAIR,QAAQe,KAAKP,MACpBA,MAAMR,MAAQoH,SAASrG,KAAKP,MAAMR,OAEtC,OAAO2H","sourcesContent":["(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    return mod(require(\"../lib/infer\"), require(\"../lib/tern\"), require(\"../lib/signal\"), require);\n  if (typeof define == \"function\" && define.amd) // AMD\n    return define([\"../lib/infer\", \"../lib/tern\", \"../lib/signal\"], mod);\n  mod(tern, tern, tern.signal);\n})(function(infer, tern, signal, require) {\n  \"use strict\";\n\n  function Modules(server, options) {\n    this.server = server;\n    this.options = options || {};\n    this.modules = Object.create(null);\n    this.nonRelative = Object.create(null);\n    this.knownModules = Object.create(null);\n    this.resolvers = [];\n    this.modNameTests = [];\n    this.importTests = [];\n    this.completableTypes = Object.create(null);\n  }\n\n  Modules.prototype = signal.mixin({\n    buildWrappingScope: function(parent, origin, node) {\n      var scope = new infer.Scope(parent, node);\n      scope.origin = origin;\n      this.signal(\"wrapScope\", scope);\n      return scope;\n    },\n\n    maybeOverride: function(name) {\n      if (!this.options.modules || !this.options.modules.hasOwnProperty(name))\n        return false;\n      if (this.modules[name]) return this.modules[name];\n\n      var override = this.options.modules[name];\n      if (typeof(override) == \"string\" && override.charAt(0) == \"=\")\n        return infer.def.parsePath(override.slice(1));\n\n      var scope = this.buildWrappingScope(infer.cx().topScope, name);\n      infer.def.load(override, scope);\n      return this.modules[name] = scope.exports;\n    },\n\n    resolveModule: function(name, parentFile) {\n      var over = this.maybeOverride(name);\n      if (over) return over;\n      var known = this.knownModules[name];\n      if (known) return known;\n      if (this.options.dontLoad == true ||\n          this.options.dontLoad && new RegExp(this.options.dontLoad).test(name) ||\n          this.options.load && !new RegExp(this.options.load).test(name))\n        return infer.ANull;\n\n      var resolved, relative = isRelative(name);\n      for (var i = 0; !resolved && i < this.resolvers.length; i++)\n        resolved = this.resolvers[i](name, parentFile);\n      if (!resolved) resolved = defaultResolver(name, parentFile);\n      if (!resolved) return infer.ANull;\n      if (typeof resolved != \"string\") {\n        if (!relative) this.nonRelative[name] = true;\n        return resolved;\n      }\n\n      var known = this.modules[resolved];\n      if (known) return known;\n\n      if (/\\.js$|(?:^\\/)[^\\.]+$/.test(resolved))\n        this.server.addFile(resolved, null, parentFile);\n      if (!relative) this.nonRelative[name] = resolved;\n      return this.modules[resolved] = new infer.AVal;\n    },\n\n    findIn: function(array, node, pos) {\n      for (var i = 0; i < array.length; i++) {\n        var name = array[i](node, pos);\n        if (name != null) return name;\n      }\n    },\n\n    isModName: function(node, pos) { return this.findIn(this.modNameTests, node, pos) },\n    isImport: function(node, pos) { return this.findIn(this.importTests, node, pos) },\n\n    get: function(name) {\n      return this.modules[name] || (this.modules[name] = new infer.AVal);\n    },\n\n    completeModuleName: function(completions, query, word) {\n      function fromObj(obj, useVal) {\n        for (var name in obj)\n          if (filter(word, name, query))\n            tern.addCompletion(query, completions, name, useVal && obj[name]);\n      }\n\n      fromObj(this.knownModules, true);\n      if (this.options.modules) fromObj(this.options.modules, false);\n\n      var pathsSeen = Object.create(null);\n      for (var prop in this.nonRelative) {\n        var val = this.nonRelative[prop];\n        if (val == true || prop.indexOf(\"/\") == -1) {\n          if (filter(word, prop, query)) tern.addCompletion(query, completions, prop);\n        } else if (prop.indexOf(word) == 0 && word.indexOf(\"/\") > -1) {\n          var afterSlash = /.*?\\/(.*)/.exec(prop)[1];\n          var found = val.indexOf(afterSlash);\n          if (found > -1) {\n            var dir = val.slice(0, found) + (/.*?\\/(.*\\/)?/.exec(word)[1] || \"\");\n            if (dir in pathsSeen) continue;\n            pathsSeen[dir] = true;\n            this.completeFileName(completions, query, null, word, dir);\n          }\n        }\n      }\n    },\n\n    completeFileName: function(completions, query, parentFile, word, _dir) {\n      var path = parentFile ? resolvePath(dirName(parentFile), word) : baseName(word);\n      for (var prop in this.modules) {\n        if (prop != parentFile && filter(path, prop, query)) {\n          if (/\\.js$/.test(prop)) prop = prop.slice(0, prop.length - 3);\n          var added = prop.slice(path.length);\n          tern.addCompletion(query, completions, word + added, this.modules[prop]);\n        }\n      }\n    },\n\n    getModType: function(node) {\n      var modName = this.isModName(node), imp, prop;\n      if (modName == null && (imp = this.isImport(node))) {\n        modName = imp.name;\n        prop = imp.prop;\n      }\n      if (modName == null) return;\n\n      var type = this.resolveModule(modName, node.sourceFile.name);\n      if (prop) {\n        var obj = type.getObjType();\n        type = obj && obj.hasProp(prop) || type.getProp(prop);\n      }\n      return type;\n    }\n  });\n\n  function resolvePath(parent, sub) {\n    if (/^https?:|^\\//.test(sub)) return sub;\n    if (parent && !/\\/$/.test(parent)) parent = parent + \"/\";\n    var m;\n    while (m = /^\\.(\\.)?\\//.exec(sub)) {\n      if (m[1] && parent.length > 1) {\n        var lastSlash = parent.lastIndexOf(\"/\", parent.length - 2);\n        parent = lastSlash == -1 ? \"\" : parent.slice(0, lastSlash + 1);\n      }\n      sub = sub.slice(m[0].length);\n    }\n    return parent + sub;\n  }\n\n  function dirName(path) {\n    var lastSlash = path.lastIndexOf(\"/\");\n    if (lastSlash == -1) return \"\";\n    return path.slice(0, lastSlash + 1);\n  }\n  function baseName(path) {\n    var lastSlash = path.lastIndexOf(\"/\");\n    if (lastSlash == -1) return path;\n    else return path.slice(lastSlash + 1);\n  }\n\n  function defaultResolver(name, parentFile) {\n    if (!/^\\.\\.?\\//.test(name)) return;\n    var path = resolvePath(dirName(parentFile), name);\n    var server = infer.cx().parent;\n    if (server.findFile(path)) return path;\n    if (server.findFile(path + \".js\")) return path + \".js\";\n  }\n\n  // Under node, replace completeFileName with a version that actually\n  // queries the file system\n  if (require) (function() {\n    var fs = require(\"fs\"), path = require(\"path\");\n\n    Modules.prototype.completeFileName = function(completions, query, parentFile, word, dir) {\n      var pDir = this.server.projectDir;\n      var endSlash = /\\/$/.test(word);\n      if (parentFile) {\n        var pt = path.resolve(pDir, path.dirname(parentFile), word);\n        dir = endSlash ? pt : path.dirname(pt);\n      }\n      var base = endSlash ? word : path.dirname(word) + \"/\";\n      var filePart = endSlash ? \"\" : path.basename(word);\n\n      var me = this;\n      fs.readdirSync(dir).forEach(function(file) {\n        if (/^\\./.test(file)) return;\n        if (filter(filePart, file, query)) {\n          var projectPath = me.server.normalizeFilename(path.relative(pDir, path.resolve(dir, file)));\n          if (projectPath == parentFile) return;\n          var value = me.modules[projectPath];\n          if (/\\.js$/.test(file)) file = file.slice(0, file.length - 3);\n          tern.addCompletion(query, completions, base + file, value);\n        }\n      });\n    };\n  }());\n\n  function isRelative(path) {\n    return /^\\.\\.?\\//.test(path);\n  }\n\n  function filter(word, string, query) {\n    return query.filter === false || !word ||\n      (query.caseInsensitive ? string.toLowerCase() : string).indexOf(word) == 0;\n  }\n\n  function preCondenseReach(state) {\n    var mods = infer.cx().parent.mod.modules.modules;\n    var node = state.roots[\"!modules\"] = new infer.Obj(null);\n    for (var name in mods) {\n      var mod = mods[name];\n      var id = mod.origin || name;\n      var prop = node.defProp(id.replace(/\\./g, \"`\"));\n      prop.origin = mod.origin;\n      mod.propagate(prop);\n    }\n  }\n\n  function postLoadDef(data) {\n    var cx = infer.cx(), me = cx.parent.mod.modules;\n    var mods = cx.definitions[data[\"!name\"]][\"!modules\"];\n    if (mods) for (var name in mods.props) {\n      var origin = name.replace(/`/g, \".\");\n      var mod = me.get(origin);\n      mod.origin = origin;\n      mods.props[name].propagate(mod);\n    }\n    var known = cx.definitions[data[\"!name\"]][\"!known_modules\"];\n    if (known) for (var name in known.props)\n      me.knownModules[name.replace(/`/g, \".\")] = known.props[name];\n  }\n\n  function findTypeAt(_file, _pos, expr, type) {\n    if (!expr) return type;\n    var me = infer.cx().parent.mod.modules;\n    var modType = me.getModType(expr.node);\n    if (!modType) return type;\n\n    // The `type` is a value shared for all string literals.\n    // We must create a copy before modifying `origin` and `originNode`.\n    // Otherwise all string literals would point to the last jump location\n    var inner = modType.getType(false) || {};\n    type = Object.create(type);\n    type.origin = modType.origin || inner.origin;\n    type.originNode = modType.originNode || inner.originNode;\n    if (modType.doc) type.doc = modType.doc;\n    else if (inner.doc) type.doc = inner.doc;\n    if (modType.url) type.url = modType.url;\n    else if (inner.url) type.url = inner.url;\n    return type;\n  }\n\n  // Complete previously seen module names when completing in strings passed to require\n  function findCompletions(file, query) {\n    var me = infer.cx().parent.mod.modules;\n    var wordEnd = tern.resolvePos(file, query.end), types = me.completableTypes;\n    var expr = infer.findExpressionAround(file.ast, null, wordEnd, file.scope,\n                                          function(type) { return type in types });\n    if (!expr) return null;\n\n    if (me.isModName(expr.node, wordEnd) != null)\n      return findModuleCompletions(me, file, query, expr.node, wordEnd);\n\n    var imp = me.isImport(expr.node, wordEnd);\n    if (imp && imp.name && imp.prop != null)\n      return findImportCompletions(me, file, query, expr.node, imp, wordEnd);\n  }\n\n  function findImportCompletions(me, file, query, node, imp, wordEnd) {\n    var completions = [];\n    var word = node.name ? node.name.slice(0, wordEnd - node.start) : \"\";\n    if (query.caseInsensitive) word = word.toLowerCase();\n\n    var modType = me.resolveModule(imp.name, node.sourceFile.name).getType();\n    if (!modType) return null;\n    infer.forAllPropertiesOf(modType, function(prop, obj, depth) {\n      if (obj == infer.cx().protos.Object) return;\n      if (query.filter !== false && word &&\n          (query.caseInsensitive ? prop.toLowerCase() : prop).indexOf(word) !== 0) return;\n      tern.addCompletion(query, completions, prop, obj && obj.props[prop], depth);\n    });\n    return {\n      start: tern.outputPos(query, file, node.name ? node.start : wordEnd),\n      end: tern.outputPos(query, file, wordEnd),\n      completions: completions,\n      isSpecifier: true\n    };\n  }\n\n  function findModuleCompletions(me, file, query, argNode, wordEnd) {\n    if (argNode.type != \"Literal\" || typeof argNode.value != \"string\" ||\n        argNode.start > wordEnd || argNode.end < wordEnd) return;\n\n    var word = argNode.raw.slice(1, wordEnd - argNode.start), quote = argNode.raw.charAt(0);\n    if (word && word.charAt(word.length - 1) == quote)\n      word = word.slice(0, word.length - 1);\n    if (query.caseInsensitive) word = word.toLowerCase();\n\n    var completions = [];\n    if (isRelative(word)) me.completeFileName(completions, query, file.name, word);\n    else me.completeModuleName(completions, query, word);\n\n    if (argNode.end == wordEnd + 1 && file.text.charAt(wordEnd) == quote)\n      ++wordEnd;\n    return {\n      start: tern.outputPos(query, file, argNode.start),\n      end: tern.outputPos(query, file, wordEnd),\n      isProperty: false,\n      completions: completions.map(function(rec) {\n        var name = typeof rec == \"string\" ? rec : rec.name;\n        var string = JSON.stringify(name);\n        if (quote == \"'\") string = quote + string.slice(1, string.length -1).replace(/'/g, \"\\\\'\") + quote;\n        if (typeof rec == \"string\") return string;\n        rec.displayName = name;\n        rec.name = string;\n        return rec;\n      })\n    };\n  }\n\n  tern.registerPlugin(\"modules\", function(server, options) {\n    server.mod.modules = new Modules(server, options);\n\n    server.on(\"beforeLoad\", function(file) {\n      file.scope = this.mod.modules.buildWrappingScope(file.scope, file.name, file.ast);\n    });\n\n    server.on(\"afterLoad\", function(file) {\n      var mod = this.mod.modules.get(file.name);\n      mod.origin = file.name;\n      this.mod.modules.signal(\"getExports\", file, mod);\n    });\n\n    server.on(\"reset\", function() {\n      this.mod.modules.modules = Object.create(null);\n    });\n\n    server.on(\"preCondenseReach\", preCondenseReach);\n    server.on(\"postLoadDef\", postLoadDef);\n    server.on(\"typeAt\", findTypeAt);\n    server.on(\"completion\", findCompletions);\n  });\n\n  tern.defineQueryType(\"exports\", {\n    takesFile: true,\n    run: function(server, query, file) {\n      function describe(aval) {\n        var target = {}, type = aval.getType(false);\n        target.type = infer.toString(type, 3);\n        var doc = aval.doc || (type && type.doc), url = aval.url || (type && type.url);\n        if (doc) target.doc = doc;\n        if (url) target.url = url;\n        var span = tern.getSpan(aval) || (type && tern.getSpan(type));\n        if (span) tern.storeSpan(server, query, span, target);\n        return target;\n      }\n\n      var mod = server.mod.modules, known = mod && mod.modules[file.name];\n      if (!known) return {};\n      var resp = describe(known);\n      var type = known.getType(false);\n      if (type instanceof infer.Obj) {\n        var props = resp.props = {};\n        for (var prop in type.props)\n          props[prop] = describe(type.props[prop]);\n      }\n      return resp;\n    }\n  });\n});\n"],"file":"modules.js"}