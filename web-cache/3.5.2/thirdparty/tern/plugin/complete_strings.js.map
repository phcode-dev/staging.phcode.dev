{"version":3,"sources":["thirdparty/tern/plugin/complete_strings.js"],"names":["mod","exports","module","require","define","amd","tern","acorn","walk","infer","postParse","ast","data","cx","parent","completeStrings","simple","Literal","node","value","length","maxLen","seen","sourceFile","name","complete","file","query","pos","resolvePos","end","lit","findExpressionAround","scope","before","slice","start","matches","str","indexOf","types","docs","urls","origins","rec","JSON","stringify","displayName","push","type","origin","outputPos","text","charAt","isProperty","completions","registerPlugin","server","options","maxLength","Object","create","on"],"mappings":"CAMA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OAChCF,IAAIG,QAAQ,gBAAiBA,QAAQ,eAAgBA,QAAQ,eACjD,mBAAVC,QAAwBA,OAAOC,IACjCD,OAAO,CAAC,eAAgB,cAAe,wBAAyBJ,KACzEA,IAAIM,KAAMA,KAAMC,MAAMC,MALxB,CAMG,SAASC,MAAOH,KAAME,MACvB,aAYA,SAASE,UAAUC,KACjB,IAAIC,KAAOH,MAAMI,KAAKC,OAAOd,IAAIe,gBACjCP,KAAKQ,OAAOL,IAAK,CACfM,QAAS,SAASC,MACS,iBAAdA,KAAKC,OAAqBD,KAAKC,OAASD,KAAKC,MAAMC,OAASR,KAAKS,SAC1ET,KAAKU,KAAKJ,KAAKC,OAASR,IAAIY,WAAWC,SAK/C,SAASC,SAASC,KAAMC,OACtB,IAAIC,IAAMtB,KAAKuB,WAAWH,KAAMC,MAAMG,KAClCC,IAAMtB,MAAMuB,qBAAqBN,KAAKf,IAAK,KAAMiB,IAAKF,KAAKO,MAAO,WACtE,GAAKF,KAAgC,iBAAlBA,IAAIb,KAAKC,MAA5B,CACA,IAAIe,OAASH,IAAIb,KAAKC,MAAMgB,MAAM,EAAGP,IAAMG,IAAIb,KAAKkB,MAAQ,GACxDC,QAAU,GAAIf,KAAOb,MAAMI,KAAKC,OAAOd,IAAIe,gBAAgBO,KAC/D,IAAK,IAAIgB,OAAOhB,KAAM,GAAIgB,IAAIlB,OAASc,OAAOd,QAAiC,GAAvBkB,IAAIC,QAAQL,QAClE,GAAIP,MAAMa,OAASb,MAAMc,MAAQd,MAAMe,MAAQf,MAAMgB,QAAS,CAC5D,IAAIC,IAAM,CAACpB,KAAMqB,KAAKC,UAAUR,KAAMS,YAAaT,KACnDD,QAAQW,KAAKJ,KACTjB,MAAMa,QAAOI,IAAIK,KAAO,UACxBtB,MAAMgB,UAASC,IAAIM,OAAS5B,KAAKgB,WAErCD,QAAQW,KAAKH,KAAKC,UAAUR,MAGhC,OAAID,QAAQjB,OAAe,CACzBgB,MAAO9B,KAAK6C,UAAUxB,MAAOD,KAAMK,IAAIb,KAAKkB,OAC5CN,IAAKxB,KAAK6C,UAAUxB,MAAOD,KAAME,KAAOF,KAAK0B,KAAKC,OAAOzB,MAAQF,KAAK0B,KAAKC,OAAOtB,IAAIb,KAAKkB,OAAS,EAAI,IACxGkB,YAAY,EACZC,YAAalB,cAJf,GApCF/B,KAAKkD,eAAe,mBAAoB,SAASC,OAAQC,SACvDD,OAAOzD,IAAIe,gBAAkB,CAAEM,OAAQqC,SAAWA,QAAQC,WAAa,GAC3CrC,KAAMsC,OAAOC,OAAO,OAChDJ,OAAOK,GAAG,QAAS,WACjBL,OAAOzD,IAAIe,gBAAgBO,KAAOsC,OAAOC,OAAO,QAElDJ,OAAOK,GAAG,YAAapD,WACvB+C,OAAOK,GAAG,aAAcrC","sourcesContent":["// When enabled, this plugin will gather (short) strings in your code,\n// and completing when inside a string will try to complete to\n// previously seen strings. Takes a single option, maxLength, which\n// controls the maximum length of string values to gather, and\n// defaults to 15.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    return mod(require(\"../lib/infer\"), require(\"../lib/tern\"), require(\"acorn-walk\"));\n  if (typeof define == \"function\" && define.amd) // AMD\n    return define([\"../lib/infer\", \"../lib/tern\", \"acorn-walk/dist/walk\"], mod);\n  mod(tern, tern, acorn.walk);\n})(function(infer, tern, walk) {\n  \"use strict\";\n\n  tern.registerPlugin(\"complete_strings\", function(server, options) {\n    server.mod.completeStrings = { maxLen: options && options.maxLength || 15,\n                                seen: Object.create(null) };\n    server.on(\"reset\", function() {\n      server.mod.completeStrings.seen = Object.create(null);\n    });\n    server.on(\"postParse\", postParse);\n    server.on(\"completion\", complete);\n  });\n\n  function postParse(ast) {\n    var data = infer.cx().parent.mod.completeStrings;\n    walk.simple(ast, {\n      Literal: function(node) {\n        if (typeof node.value == \"string\" && node.value && node.value.length < data.maxLen)\n          data.seen[node.value] = ast.sourceFile.name;\n      }\n    });\n  }\n\n  function complete(file, query) {\n    var pos = tern.resolvePos(file, query.end);\n    var lit = infer.findExpressionAround(file.ast, null, pos, file.scope, \"Literal\");\n    if (!lit || typeof lit.node.value != \"string\") return;\n    var before = lit.node.value.slice(0, pos - lit.node.start - 1);\n    var matches = [], seen = infer.cx().parent.mod.completeStrings.seen;\n    for (var str in seen) if (str.length > before.length && str.indexOf(before) == 0) {\n      if (query.types || query.docs || query.urls || query.origins) {\n        var rec = {name: JSON.stringify(str), displayName: str};\n        matches.push(rec);\n        if (query.types) rec.type = \"string\";\n        if (query.origins) rec.origin = seen[str];\n      } else {\n        matches.push(JSON.stringify(str));\n      }\n    }\n    if (matches.length) return {\n      start: tern.outputPos(query, file, lit.node.start),\n      end: tern.outputPos(query, file, pos + (file.text.charAt(pos) == file.text.charAt(lit.node.start) ? 1 : 0)),\n      isProperty: false,\n      completions: matches\n    };\n  }\n});\n"],"file":"complete_strings.js"}