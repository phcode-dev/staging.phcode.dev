{"version":3,"sources":["languageTools/LanguageClient/Connection.js"],"names":["protocol","require","Actions","OnClose","Stop","Restart","OnError","Ignore","ActionController","this","restartsTimes","_getOnCloseHandler","connection","actionController","restartLanguageClient","dispose","error","action","getOnCloseAction","_getOnErrorHandler","stopLanguageClient","errorData","getOnErrorAction","Logger","createConnection","reader","writer","logger","createProtocolConnection","errorHandler","closeHandler","onError","onClose","prototype","errorCount","currentTime","Date","now","push","numRestarts","length","timeBetweenFiveRestarts","shift","message","console","warn","info","log","exports"],"mappings":"CA0BC,WAGG,IAAIA,SAAWC,QAAQ,kCAEnBC,QAAU,CACVC,QAAS,CACLC,KAAM,EACNC,QAAS,GAEbC,QAAS,CACLC,OAAQ,EACRH,KAAM,IAId,SAASI,mBACLC,KAAKC,cAAgB,GA+BzB,SAASC,mBAAmBC,WAAYC,iBAAkBC,uBACtD,OAAO,WACH,IACQF,YACAA,WAAWG,UAEjB,MAAOC,QAET,IAAIC,OAASf,QAAQC,QAAQC,KAC7B,IACIa,OAASJ,iBAAiBK,mBAC5B,MAAOF,QAGLC,SAAWf,QAAQC,QAAQE,SAC3BS,yBAKZ,SAASK,mBAAmBN,iBAAkBO,oBAC1C,OAAO,SAAUC,WACb,IAAIJ,OAASJ,iBAAiBS,iBAAiBD,aAEhCnB,QAAQI,QAAQF,MAC3BgB,sBAKZ,SAASG,UAeT,SAASC,iBAAiBC,OAAQC,OAAQZ,sBAAuBM,oBAC7D,IAAIO,OAAS,IAAIJ,OACbV,iBAAmB,IAAIL,iBACvBI,WAAaZ,SAAS4B,yBAAyBH,OAAQC,OAAQC,QAC/DE,aAAeV,mBAAmBN,iBAAkBO,oBACpDU,aAAenB,mBAAmBC,WAAYC,iBAAkBC,uBAKpE,OAHAF,WAAWmB,QAAQF,cACnBjB,WAAWoB,QAAQF,cAEZlB,WAnFXJ,iBAAiByB,UAAUX,iBAAmB,SAAUD,WACpD,IAAIa,WAEJ,OAFiBb,UAAU,IAET,EACPnB,QAAQI,QAAQC,OAGpBL,QAAQI,QAAQD,SAG3BG,iBAAiByB,UAAUf,iBAAmB,WAC1C,IAAIiB,YAAcC,KAAKC,MACvB5B,KAAKC,cAAc4B,KAAKH,aAExB,IAAII,YAAc9B,KAAKC,cAAc8B,OAKjCC,wBAJJ,OAAIF,YAAc,EACPrC,QAAQC,QAAQE,QAGGI,KAAKC,cAAc6B,YAAc,GAAK9B,KAAKC,cAAc,IACxD,KACpBR,QAAQC,QAAQC,MAG3BK,KAAKC,cAAcgC,QACZxC,QAAQC,QAAQE,UAmC3BkB,OAAOU,UAAUjB,MAAQ,SAAU2B,SAC/BC,QAAQ5B,MAAM2B,UAElBpB,OAAOU,UAAUY,KAAO,SAAUF,SAC9BC,QAAQC,KAAKF,UAEjBpB,OAAOU,UAAUa,KAAO,SAAUH,SAC9BC,QAAQE,KAAKH,UAEjBpB,OAAOU,UAAUc,IAAM,SAAUJ,SAC7BC,QAAQG,IAAIJ,UAgBhBK,QAAQxB,iBAAmBA,iBA1G/B","sourcesContent":["/*\n * Copyright (c) 2019 - present Adobe. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global exports */\n/*eslint no-console: 0*/\n/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n(function () {\n\n\n    var protocol = require(\"vscode-languageserver-protocol\");\n\n    var Actions = {\n        OnClose: {\n            Stop: 0,\n            Restart: 1\n        },\n        OnError: {\n            Ignore: 0,\n            Stop: 1\n        }\n    };\n\n    function ActionController() {\n        this.restartsTimes = [];\n    }\n\n    ActionController.prototype.getOnErrorAction = function (errorData) {\n        var errorCount = errorData[2];\n\n        if (errorCount <= 3) {\n            return Actions.OnError.Ignore;\n        }\n\n        return Actions.OnError.Restart;\n    };\n\n    ActionController.prototype.getOnCloseAction = function () {\n        var currentTime = Date.now();\n        this.restartsTimes.push(currentTime);\n\n        var numRestarts = this.restartsTimes.length;\n        if (numRestarts < 5) {\n            return Actions.OnClose.Restart;\n        }\n\n        var timeBetweenFiveRestarts = this.restartsTimes[numRestarts - 1] - this.restartsTimes[0];\n        if (timeBetweenFiveRestarts <= 3 * 60 * 1000) { //3 minutes\n            return Actions.OnClose.Stop;\n        }\n\n        this.restartsTimes.shift();\n        return Actions.OnClose.Restart;\n    };\n\n    function _getOnCloseHandler(connection, actionController, restartLanguageClient) {\n        return function () {\n            try {\n                if (connection) {\n                    connection.dispose();\n                }\n            } catch (error) {}\n\n            var action = Actions.OnClose.Stop;\n            try {\n                action = actionController.getOnCloseAction();\n            } catch (error) {}\n\n\n            if (action === Actions.OnClose.Restart) {\n                restartLanguageClient();\n            }\n        };\n    }\n\n    function _getOnErrorHandler(actionController, stopLanguageClient) {\n        return function (errorData) {\n            var action = actionController.getOnErrorAction(errorData);\n\n            if (action === Actions.OnError.Stop) {\n                stopLanguageClient();\n            }\n        };\n    }\n\n    function Logger() {}\n\n    Logger.prototype.error = function (message) {\n        console.error(message);\n    };\n    Logger.prototype.warn = function (message) {\n        console.warn(message);\n    };\n    Logger.prototype.info = function (message) {\n        console.info(message);\n    };\n    Logger.prototype.log = function (message) {\n        console.log(message);\n    };\n\n    function createConnection(reader, writer, restartLanguageClient, stopLanguageClient) {\n        var logger = new Logger(),\n            actionController = new ActionController(),\n            connection = protocol.createProtocolConnection(reader, writer, logger),\n            errorHandler = _getOnErrorHandler(actionController, stopLanguageClient),\n            closeHandler = _getOnCloseHandler(connection, actionController, restartLanguageClient);\n\n        connection.onError(errorHandler);\n        connection.onClose(closeHandler);\n\n        return connection;\n    }\n\n    exports.createConnection = createConnection;\n}());\n"],"file":"Connection.js"}