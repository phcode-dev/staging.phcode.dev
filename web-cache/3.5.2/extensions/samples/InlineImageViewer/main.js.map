{"version":3,"sources":["extensions/samples/InlineImageViewer/main.js"],"names":["define","require","exports","module","EditorManager","brackets","getModule","ExtensionUtils","ProjectManager","InlineImageViewer","_getStringAtPos","hostEditor","pos","token","_codeMirror","getTokenAt","test","string","line","ch","type","substr","length","getLine","match","exec","docPath","document","file","fullPath","lastIndexOf","inlineImageViewerProvider","sel","getSelection","start","end","fileName","projectPath","getProjectRoot","indexOf","result","$","Deferred","imageViewer","load","resolve","promise","loadStyleSheet","registerInlineEditProvider"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAI/B,IAAIC,cAA0BC,SAASC,UAAU,wBAC7CC,eAA0BF,SAASC,UAAU,wBAC7CE,eAA0BH,SAASC,UAAU,0BAG7CG,kBAA0BR,QAAQ,qBAStC,SAASS,gBAAgBC,WAAYC,KACjC,IAAIC,MAAQF,WAAWG,YAAYC,WAAWH,KAAK,GAQnD,GAJK,KAAKI,KAAKH,MAAMI,SAA4B,MAAjBJ,MAAMI,SAClCJ,MAAQF,WAAWG,YAAYC,WAAW,CAACG,KAAMN,IAAIM,KAAMC,GAAIP,IAAIO,GAAK,IAAI,IAG7D,WAAfN,MAAMO,KAAmB,CACzB,IAAIH,OAASJ,MAAMI,OAGfE,GAAKF,OAAO,GAShB,MARW,MAAPE,IAAsB,MAAPA,KACfF,OAASA,OAAOI,OAAO,IAGhB,OADXF,GAAKF,OAAOA,OAAOK,OAAS,KACF,MAAPH,KACfF,OAASA,OAAOI,OAAO,EAAGJ,OAAOK,OAAS,IAGvCL,OAIX,IAAIC,KAAOP,WAAWG,YAAYS,QAAQX,IAAIM,MAC1CM,MAAQ,oBAAoBC,KAAKP,MAErC,GAAIM,OAASA,MAAM,GAAI,CAEnB,IAAIE,QAAUf,WAAWgB,SAASC,KAAKC,SAIvC,OAFAH,QAAUA,QAAQL,OAAO,EAAGK,QAAQI,YAAY,OAE/B,IAAMN,MAAM,GAIjC,MAAO,GAaX,SAASO,0BAA0BpB,WAAYC,KAG3C,IAAIoB,IAAMrB,WAAWsB,cAAa,GAClC,GAAID,IAAIE,MAAMhB,OAASc,IAAIG,IAAIjB,KAC3B,OAAO,KAKX,IAAIkB,SAAW1B,gBAAgBC,WAAYA,WAAWsB,cAAa,GAAOC,OAC1E,GAAiB,KAAbE,SACA,OAAO,KAIX,IAAK,4CAA4CpB,KAAKoB,UAClD,OAAO,KAIX,IAAIC,YAAc7B,eAAe8B,iBAAiBT,SAEZ,IAAlCO,SAASG,QAAQF,eACjBD,SAAWC,YAAcD,UAE7B,IAAII,OAAS,IAAIC,EAAEC,SAEfC,YAAc,IAAIlC,kBAAkB2B,SAASf,OAAOe,SAASN,YAAY,MAAOM,UAKpF,OAJAO,YAAYC,KAAKjC,YAEjB6B,OAAOK,QAAQF,aAERH,OAAOM,UAGlBvC,eAAewC,eAAe5C,OAAQ,aACtCC,cAAc4C,2BAA2BjB","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    // Brackets modules\n    var EditorManager           = brackets.getModule(\"editor/EditorManager\"),\n        ExtensionUtils          = brackets.getModule(\"utils/ExtensionUtils\"),\n        ProjectManager          = brackets.getModule(\"project/ProjectManager\");\n\n    // Local modules\n    var InlineImageViewer       = require(\"InlineImageViewer\");\n\n    /**\n     * Return the token string that is at the specified position.\n     *\n     * @param hostEditor {!Editor} editor\n     * @param {!{line:Number, ch:Number}} pos\n     * @return {String} token string at the specified position\n     */\n    function _getStringAtPos(hostEditor, pos) {\n        var token = hostEditor._codeMirror.getTokenAt(pos, true);\n\n        // If the pos is at the beginning of a name, token will be the\n        // preceding whitespace or dot. In that case, try the next pos.\n        if (!/\\S/.test(token.string) || token.string === \".\") {\n            token = hostEditor._codeMirror.getTokenAt({line: pos.line, ch: pos.ch + 1}, true);\n        }\n\n        if (token.type === \"string\") {\n            var string = token.string;\n\n            // Strip quotes\n            var ch = string[0];\n            if (ch === \"\\\"\" || ch === \"'\") {\n                string = string.substr(1);\n            }\n            ch = string[string.length - 1];\n            if (ch === \"\\\"\" || ch === \"'\") {\n                string = string.substr(0, string.length - 1);\n            }\n\n            return string;\n        }\n\n            // Check for url(...);\n        var line = hostEditor._codeMirror.getLine(pos.line);\n        var match = /url\\s*\\(([^)]*)\\)/.exec(line);\n\n        if (match && match[1]) {\n                // URLs are relative to the doc\n            var docPath = hostEditor.document.file.fullPath;\n\n            docPath = docPath.substr(0, docPath.lastIndexOf(\"/\"));\n\n            return docPath + \"/\" + match[1];\n        }\n\n\n        return \"\";\n    }\n\n    /**\n     * This function is registered with EditManager as an inline editor provider. It creates an inline editor\n     * when cursor is on a JavaScript function name, find all functions that match the name\n     * and show (one/all of them) in an inline editor.\n     *\n     * @param {!Editor} editor\n     * @param {!{line:Number, ch:Number}} pos\n     * @return {$.Promise} a promise that will be resolved with an InlineWidget\n     *      or null if we're not going to provide anything.\n     */\n    function inlineImageViewerProvider(hostEditor, pos) {\n\n        // Only provide image viewer if the selection is within a single line\n        var sel = hostEditor.getSelection(false);\n        if (sel.start.line !== sel.end.line) {\n            return null;\n        }\n\n        // Always use the selection start for determining the image file name. The pos\n        // parameter is usually the selection end.\n        var fileName = _getStringAtPos(hostEditor, hostEditor.getSelection(false).start);\n        if (fileName === \"\") {\n            return null;\n        }\n\n        // Check for valid file extensions\n        if (!/(\\.png|\\.jpg|\\.jpeg|\\.gif|\\.webp|\\.svg)$/i.test(fileName)) {\n            return null;\n        }\n\n        // TODO: Check for relative path\n        var projectPath = ProjectManager.getProjectRoot().fullPath;\n\n        if (fileName.indexOf(projectPath) !== 0) {\n            fileName = projectPath + fileName;\n        }\n        var result = new $.Deferred();\n\n        var imageViewer = new InlineImageViewer(fileName.substr(fileName.lastIndexOf(\"/\")), fileName);\n        imageViewer.load(hostEditor);\n\n        result.resolve(imageViewer);\n\n        return result.promise();\n    }\n\n    ExtensionUtils.loadStyleSheet(module, \"style.css\");\n    EditorManager.registerInlineEditProvider(inlineImageViewerProvider);\n});\n"],"file":"main.js"}