{"version":3,"sources":["extensions/default/HTMLCodeHints/HTMLJumpToDef.js"],"names":["define","require","exports","module","AppInit","brackets","getModule","JumpToDefManager","CommandManager","Commands","FileViewController","HTMLJumpToDefProvider","_isSrcOrHrefString","editor","token","type","equalsToken","getPreviousToken","line","ch","start","hrefOrSrcToken","string","includes","jumpTokenTypes","_openFile","fileRelativePath","mainDocPath","startsWith","openAndSelectDocument","PROJECT_MANAGER","targetPath","path","resolve","prototype","canJumpToDef","optionalPosition","pos","getCursorPos","getToken","doJumpToDef","this","$","Deferred","reject","promise","replace","document","file","parentPath","execute","TOGGLE_QUICK_EDIT","appReady","jdProvider","registerJumpToDefProvider"],"mappings":"AAsBAA,OAAO,SAAUC,QAASC,QAASC,QAE/B,MAAMC,QAAUC,SAASC,UAAU,iBAC/BC,iBAAmBF,SAASC,UAAU,6BACtCE,eAAqBH,SAASC,UAAU,0BACxCG,SAAqBJ,SAASC,UAAU,oBACxCI,mBAAqBL,SAASC,UAAU,8BAE5C,SAASK,yBAST,SAASC,mBAAmBC,OAAQC,OAChC,GAAkB,WAAfA,MAAMC,KACL,OAAO,EAEX,MAAMC,YAAcH,OAAOI,iBAAiB,CAACC,KAAMJ,MAAMI,KAAMC,GAAIL,MAAMM,MAAM,IACzEC,eAAiBR,OAAOI,iBAAiB,CAACC,KAAMF,YAAYE,KAAMC,GAAIH,YAAYI,MAAM,IAC9F,MAA+B,MAAvBJ,YAAYM,QAAkB,CAAC,OAAQ,OAAOC,SAASF,eAAeC,QAGlF,MAAME,eAAiB,CAAC,MAAO,UAW/B,SAASC,UAAUC,iBAAkBC,aACjC,GAAGD,iBAAiBE,WAAW,YAAcF,iBAAiBE,WAAW,aAClEF,iBAAiBE,WAAW,eAAiBF,iBAAiBE,WAAW,YAC5E,OAAOlB,mBAAmBmB,sBAAsBH,iBAAkBhB,mBAAmBoB,iBAEzF,MAAMC,WAAaC,KAAKC,QAAQN,YAAaD,kBAC7C,OAAOhB,mBAAmBmB,sBAAsBE,WAAYrB,mBAAmBoB,iBAfnFnB,sBAAsBuB,UAAUC,aAAe,SAAUtB,OAAQuB,kBAC7D,IAAIC,IAAMD,kBAAoBvB,OAAOyB,eACjCxB,MAAQD,OAAO0B,SAASF,KAC5B,SAAGvB,OAASA,MAAMC,MAAQS,eAAeD,SAAST,MAAMC,QAkB5DJ,sBAAsBuB,UAAUM,YAAc,SAAU3B,QACpD,IAAI4B,KAAKN,aAAatB,QAClB,OAAO,IAAI6B,EAAEC,UAAWC,SAASC,UAErC,MAAM/B,MAAQD,OAAO0B,WACrB,OAAG3B,mBAAmBC,OAAQC,OACnBW,UAAUX,MAAMQ,OAAOwB,QAAQ,SAAU,IAAKjC,OAAOkC,SAASC,KAAKC,YAEvEzC,eAAe0C,QAAQzC,SAAS0C,oBAG3C/C,QAAQgD,SAAS,WACb,IAAIC,WAAa,IAAI1C,sBACrBJ,iBAAiB+C,0BAA0BD,WAAY,CAAC,QAAS","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global path */\n\ndefine(function (require, exports, module) {\n\n    const AppInit = brackets.getModule(\"utils/AppInit\"),\n        JumpToDefManager = brackets.getModule(\"features/JumpToDefManager\"),\n        CommandManager     = brackets.getModule(\"command/CommandManager\"),\n        Commands           = brackets.getModule(\"command/Commands\"),\n        FileViewController = brackets.getModule(\"project/FileViewController\");\n\n    function HTMLJumpToDefProvider() {\n    }\n\n    /**\n     * Check to see if the html token under token os of the form href=\"file\" or src=\"file\"\n     * @param editor\n     * @param token\n     * @private\n     */\n    function _isSrcOrHrefString(editor, token) {\n        if(token.type !== \"string\"){\n            return false;\n        }\n        const equalsToken = editor.getPreviousToken({line: token.line, ch: token.start+1}); // possble = token\n        const hrefOrSrcToken = editor.getPreviousToken({line: equalsToken.line, ch: equalsToken.start+1});\n        return (equalsToken.string === \"=\" && [\"href\", \"src\"].includes(hrefOrSrcToken.string));\n    }\n\n    const jumpTokenTypes = [\"tag\", \"string\"];\n\n    HTMLJumpToDefProvider.prototype.canJumpToDef = function (editor, optionalPosition) {\n        let pos = optionalPosition || editor.getCursorPos();\n        let token = editor.getToken(pos);\n        if(token && token.type && jumpTokenTypes.includes(token.type)){\n            return true;\n        }\n        return false;\n    };\n\n    function _openFile(fileRelativePath, mainDocPath) {\n        if(fileRelativePath.startsWith(\"http://\") || fileRelativePath.startsWith(\"https://\")\n            || fileRelativePath.startsWith(\"phtauri://\") || fileRelativePath.startsWith(\"asset://\")){\n            return FileViewController.openAndSelectDocument(fileRelativePath, FileViewController.PROJECT_MANAGER);\n        }\n        const targetPath = path.resolve(mainDocPath, fileRelativePath);\n        return FileViewController.openAndSelectDocument(targetPath, FileViewController.PROJECT_MANAGER);\n    }\n\n    /**\n     * Method to handle jump to definition feature.\n     */\n    HTMLJumpToDefProvider.prototype.doJumpToDef = function (editor) {\n        if(!this.canJumpToDef(editor)){\n            return new $.Deferred().reject().promise();\n        }\n        const token = editor.getToken();\n        if(_isSrcOrHrefString(editor, token)) {\n            return _openFile(token.string.replace(/['\"]+/g, ''), editor.document.file.parentPath);\n        }\n        return CommandManager.execute(Commands.TOGGLE_QUICK_EDIT);\n    };\n\n    AppInit.appReady(function () {\n        var jdProvider = new HTMLJumpToDefProvider();\n        JumpToDefManager.registerJumpToDefProvider(jdProvider, [\"html\"], 0);\n    });\n\n});\n"],"file":"HTMLJumpToDef.js"}