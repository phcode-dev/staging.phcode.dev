define(function(require,exports,module){var SpecRunnerUtils=brackets.getModule("spec/SpecRunnerUtils"),CSSPseudoSelectorCodeHints=require("main"),PseudoStaticDataRaw=require("text!PseudoSelectors.json"),PseudoStaticData=JSON.parse(PseudoStaticDataRaw);describe("unit:CSS Pseudo class/element Code Hinting",function(){var defaultContent=".selector1: { \n} \n.selector2:: { \n} \n.selector3:n { \n} \n.selector4::f { \n} \n",testDocument,testEditor;function expectHints(provider,implicitChar,returnWholeObj){expect(provider.hasHints(testEditor,implicitChar)).toBe(!0);var hintsObj=provider.getHints();return expect(hintsObj).toBeTruthy(),returnWholeObj?hintsObj:hintsObj.hints}function verifyListsAreIdentical(hintList,values){var i;for(expect(hintList.length).toBe(values.length),i=0;i<values.length;i++)expect(hintList[i]).toBe(values[i])}function verifyFirstEntry(hintList,expectedFirstHint){expect(hintList[0]).toBe(expectedFirstHint)}var modesToTest=["css","scss","less"],modeCounter,selectMode=function(){return modesToTest[modeCounter]};describe("Pseudo classes in different style modes",function(){beforeEach(function(){var mock=SpecRunnerUtils.createMockEditor(defaultContent,selectMode());testEditor=mock.editor,testDocument=mock.doc}),afterEach(function(){SpecRunnerUtils.destroyMockEditor(testDocument),testEditor=null,testDocument=null});var testAllHints=function(){testEditor.setCursorPos({line:0,ch:11});var hintList=expectHints(CSSPseudoSelectorCodeHints.pseudoSelectorHints);console.log(JSON.stringify(hintList)),verifyFirstEntry(hintList,"active"),verifyListsAreIdentical(hintList,Object.keys(PseudoStaticData.classes).sort())},testFilteredHints=function(){testEditor.setCursorPos({line:4,ch:12});var hintList=expectHints(CSSPseudoSelectorCodeHints.pseudoSelectorHints);console.log(JSON.stringify(hintList)),verifyFirstEntry(hintList,"not(selectors)"),verifyListsAreIdentical(hintList,["not(selectors)","nth-child(n)","nth-last-child(n)","nth-last-of-type(n)","nth-of-type(n)"])},testNoHints=function(){testEditor.setCursorPos({line:0,ch:10}),expect(CSSPseudoSelectorCodeHints.pseudoSelectorHints.hasHints(testEditor,"a")).toBe(!1)};for(modeCounter in modesToTest)it("should list all Pseudo selectors right after :",testAllHints),it("should list filtered pseudo selectors right after :n",testFilteredHints),it("should not list rule hints if the cursor is before :",testNoHints)}),describe("Pseudo elements in various style modes",function(){beforeEach(function(){var mock=SpecRunnerUtils.createMockEditor(defaultContent,selectMode());testEditor=mock.editor,testDocument=mock.doc}),afterEach(function(){SpecRunnerUtils.destroyMockEditor(testDocument),testEditor=null,testDocument=null});var testAllHints=function(){testEditor.setCursorPos({line:2,ch:12});var hintList=expectHints(CSSPseudoSelectorCodeHints.pseudoSelectorHints);console.log(JSON.stringify(hintList)),verifyFirstEntry(hintList,"after"),verifyListsAreIdentical(hintList,Object.keys(PseudoStaticData.elements).sort())},testFilteredHints=function(){testEditor.setCursorPos({line:6,ch:13});var hintList=expectHints(CSSPseudoSelectorCodeHints.pseudoSelectorHints);console.log(JSON.stringify(hintList)),verifyFirstEntry(hintList,"first-letter"),verifyListsAreIdentical(hintList,["first-letter","first-line"])},testNoHints=function(){testEditor.setCursorPos({line:2,ch:10}),expect(CSSPseudoSelectorCodeHints.pseudoSelectorHints.hasHints(testEditor,"c")).toBe(!1)};for(modeCounter in modesToTest)it("should list all Pseudo selectors right after :",testAllHints),it("should list filtered pseudo selectors right after ::f",testFilteredHints),it("should not list rule hints if the cursor is before :",testNoHints)})})});
//# sourceMappingURL=unittests.js.map
