{"version":3,"sources":["extensions/default/HealthData/SendToAnalytics.js"],"names":["define","require","exports","module","Metrics","brackets","getModule","PreferencesManager","PerfUtils","NodeUtils","themesPref","getExtensionPrefs","PLATFORM","EVENT_TYPE","PERFORMANCE","STORAGE","_emitDeviceTypeMetrics","browser","isDeskTop","countEvent","isMobile","isTablet","_emitMobileMetricsIfPresent","platform","mobile","isIos","isWindows","isAndroid","_emitBrowserMetrics","desktop","isChrome","isChromeBased","isEdgeChromium","isFirefox","isOpera","isOperaChromium","async","_sendStorageMetrics","navigator","storage","estimate","quota","percentageUsed","Math","round","usage","usedMB","console","log","valueEvent","_getPlatformInfo","OS","test","window","userAgent","appVersion","sendPlatformMetrics","app","language","getLocale","metadata","version","Phoenix","isTauri","getLinuxOSFlavorName","then","flavor","_bugsnagPerformance","key","valueMs","isDisabled","BugsnagPerformance","isTestWindow","activityStartTime","Date","activityEndTime","getTime","startSpan","startTime","end","sendStartupPerformanceMetrics","healthReport","getHealthReport","labelAppStart","firstBoot","Number","PhStore","_storageBootstrapTime","_tauriBootVars","bootstrapTime","nodeSetupDonePromise","PhNodeEngine","_nodeLoadTime","catch","_err","_getCurrentTheme","get","sendThemesMetrics","THEMES"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global Phoenix*/\ndefine(function (require, exports, module) {\n    const Metrics = brackets.getModule(\"utils/Metrics\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        PerfUtils           = brackets.getModule(\"utils/PerfUtils\"),\n        NodeUtils           = brackets.getModule(\"utils/NodeUtils\"),\n        themesPref          = PreferencesManager.getExtensionPrefs(\"themes\");\n\n    const PLATFORM = Metrics.EVENT_TYPE.PLATFORM,\n        PERFORMANCE = Metrics.EVENT_TYPE.PERFORMANCE,\n        STORAGE = Metrics.EVENT_TYPE.STORAGE;\n\n    // Platform metrics to be sent at startup\n    function _emitDeviceTypeMetrics() {\n        if(brackets.browser.isDeskTop) {\n            Metrics.countEvent(PLATFORM, \"device\", \"desktop\");\n        }\n        if(brackets.browser.isMobile) {\n            Metrics.countEvent(PLATFORM, \"device\", \"mobile\");\n        }\n        if(brackets.browser.isTablet) {\n            Metrics.countEvent(PLATFORM, \"device\", \"tablet\");\n        }\n    }\n    function _emitMobileMetricsIfPresent() {\n        let platform = \"none\";\n        if(brackets.browser.mobile.isIos) {\n            platform = \"ios\";\n        } else if(brackets.browser.mobile.isWindows) {\n            platform = \"windows\";\n        } else if(brackets.browser.mobile.isAndroid) {\n            platform = \"android\";\n        } else {\n            return;\n        }\n        Metrics.countEvent(PLATFORM, \"mobile\", platform);\n    }\n    function _emitBrowserMetrics() {\n        if(brackets.browser.desktop.isChrome) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"chrome\");\n        }\n        if(brackets.browser.desktop.isChromeBased) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"chromeBased\");\n        }\n        if(brackets.browser.desktop.isEdgeChromium) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"EdgeChromium\");\n        }\n        if(brackets.browser.desktop.isFirefox) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"firefox\");\n        }\n        if(brackets.browser.desktop.isOpera) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"opera\");\n        }\n        if(brackets.browser.desktop.isOperaChromium) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"operaChromium\");\n        }\n    }\n\n    // web storage\n    async function _sendStorageMetrics() {\n        if (navigator.storage && navigator.storage.estimate) {\n            const quota = await navigator.storage.estimate();\n            // quota.usage -> Number of bytes used.\n            // quota.quota -> Maximum number of bytes available.\n            const percentageUsed = Math.round((quota.usage / quota.quota) * 100);\n            const usedMB = Math.round(quota.usage / 1024 / 1024);\n            console.log(`Web Storage quota used: ${percentageUsed}%, ${usedMB}MB`);\n            Metrics.valueEvent(STORAGE, \"browserQuota\", \"percentUsed\", percentageUsed);\n            Metrics.valueEvent(STORAGE, \"browserQuota\", \"usedMB\", usedMB);\n        }\n    }\n\n    function _getPlatformInfo() {\n        let OS = \"\";\n        if (/Windows|Win32|WOW64|Win64/.test(window.navigator.userAgent)) {\n            OS = \"WIN\";\n        } else if (/Mac/.test(window.navigator.userAgent)) {\n            OS = \"OSX\";\n        } else if (/Linux|X11/.test(window.navigator.userAgent)) {\n            OS = \"LINUX32\";\n            if (/x86_64/.test(window.navigator.appVersion + window.navigator.userAgent)) {\n                OS = \"LINUX64\";\n            }\n        }\n\n        return OS;\n    }\n\n    function sendPlatformMetrics() {\n        Metrics.countEvent(PLATFORM, \"os\", brackets.platform);\n        Metrics.countEvent(PLATFORM, \"userAgent\", window.navigator.userAgent);\n        Metrics.countEvent(PLATFORM, \"languageOS\", brackets.app.language);\n        Metrics.countEvent(PLATFORM, \"languageBrackets\", brackets.getLocale());\n        Metrics.countEvent(PLATFORM, \"bracketsVersion\", brackets.metadata.version);\n        if(Phoenix.platform === \"linux\" && Phoenix.browser.isTauri) {\n            NodeUtils.getLinuxOSFlavorName()\n                .then(flavor=>{\n                    if(flavor){\n                        Metrics.countEvent(PLATFORM, \"os.flavor\", flavor);\n                    } else {\n                        Metrics.countEvent(PLATFORM, \"os.flavor\", _getPlatformInfo());\n                    }\n                });\n        } else {\n            Metrics.countEvent(PLATFORM, \"os.flavor\", _getPlatformInfo());\n        }\n        _emitDeviceTypeMetrics();\n        _emitBrowserMetrics();\n        _emitMobileMetricsIfPresent();\n        _sendStorageMetrics();\n    }\n\n    function _bugsnagPerformance(key, valueMs) {\n        if(Metrics.isDisabled() || !window.BugsnagPerformance || Phoenix.isTestWindow){\n            return;\n        }\n        let activityStartTime = new Date();\n        let activityEndTime = new Date(activityStartTime.getTime() + valueMs);\n        window.BugsnagPerformance\n            .startSpan(key, { startTime: activityStartTime })\n            .end(activityEndTime);\n    }\n    \n    // Performance\n    function sendStartupPerformanceMetrics() {\n        const healthReport = PerfUtils.getHealthReport();\n        let labelAppStart = \"AppStartupTime\";\n        if(Phoenix.firstBoot){\n            labelAppStart = \"FirstBootTime\";\n        }\n        Metrics.valueEvent(PERFORMANCE, \"startup\", labelAppStart,\n            Number(healthReport[\"AppStartupTime\"]));\n        _bugsnagPerformance(labelAppStart, Number(healthReport[\"AppStartupTime\"])); // expensive api, use sparsely\n        Metrics.valueEvent(PERFORMANCE, \"startup\", \"ModuleDepsResolved\",\n            Number(healthReport[\"ModuleDepsResolved\"]));\n        _bugsnagPerformance(\"ModuleDepsResolved\", Number(healthReport[\"ModuleDepsResolved\"])); // expensive api, use sparsely\n        Metrics.valueEvent(PERFORMANCE, \"startup\", \"PhStore\", PhStore._storageBootstrapTime);\n        _bugsnagPerformance(\"PhStore\",\n            PhStore._storageBootstrapTime); // expensive api, use sparsely\n        if(Phoenix.browser.isTauri) {\n            Metrics.valueEvent(PERFORMANCE, \"startup\", \"tauriBoot\", window._tauriBootVars.bootstrapTime);\n            _bugsnagPerformance(\"tauriBootVars\",\n                window._tauriBootVars.bootstrapTime); // expensive api, use sparsely\n        }\n        if(window.nodeSetupDonePromise) {\n            window.nodeSetupDonePromise\n                .then(()=>{\n                    if(window.PhNodeEngine && window.PhNodeEngine._nodeLoadTime){\n                        Metrics.valueEvent(PERFORMANCE, \"startup\", \"nodeBoot\", window.PhNodeEngine._nodeLoadTime);\n                        _bugsnagPerformance(\"nodeBoot\",\n                            window.PhNodeEngine._nodeLoadTime); // expensive api, use sparsely\n                    }\n                    Metrics.countEvent(PERFORMANCE, \"nodeBoot\", \"success\", 1);\n                })\n                .catch(_err=>{\n                    Metrics.countEvent(PERFORMANCE, \"nodeBoot\", \"fail\", 1);\n                });\n        }\n    }\n\n    // Themes\n    function _getCurrentTheme() {\n        // TODO: currently phoenix only have default themes, but in future, we should ensure that only themes in the\n        //  registry and user installed are logged for privacy.\n        return themesPref.get(\"theme\") || \"default\";\n    }\n    function sendThemesMetrics() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.THEMES, \"currentTheme\", _getCurrentTheme());\n    }\n\n    exports.sendPlatformMetrics = sendPlatformMetrics;\n    exports.sendStartupPerformanceMetrics = sendStartupPerformanceMetrics;\n    exports.sendThemesMetrics = sendThemesMetrics;\n    // TODO: send extension metrics\n});\n"],"file":"SendToAnalytics.js"}