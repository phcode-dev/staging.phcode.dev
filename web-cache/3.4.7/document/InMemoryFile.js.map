{"version":3,"sources":["document/InMemoryFile.js"],"names":["define","require","exports","module","File","FileSystemError","InMemoryFile","fullPath","fileSystem","call","this","prototype","Object","create","constructor","parentClass","read","options","callback","NOT_FOUND","write","data","encoding","exists","stat","unlink","rename","newName","moveToTrash"],"mappings":"AAiCAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,KAAkBH,QAAQ,mBAC1BI,gBAAkBJ,QAAQ,8BAE9B,SAASK,aAAaC,SAAUC,YAC5BJ,KAAKK,KAAKC,KAAMH,SAAUC,YAG9BF,aAAaK,UAAYC,OAAOC,OAAOT,KAAKO,WAC5CL,aAAaK,UAAUG,YAAcR,aACrCA,aAAaK,UAAUI,YAAcX,KAAKO,UAY1CL,aAAaK,UAAUK,KAAO,SAAUC,QAASC,UACpB,mBAAd,UACPA,SAAWD,SAEfC,SAASb,gBAAgBc,YAW7Bb,aAAaK,UAAUS,MAAQ,SAAUC,KAAMC,SAAUJ,UAC3B,mBAAf,WACPA,SAAWI,UAEfJ,SAASb,gBAAgBc,YAM7Bb,aAAaK,UAAUY,OAAS,SAAUL,UACtCA,SAAS,MAAM,IAGnBZ,aAAaK,UAAUa,KAAO,SAAUN,UACpCA,SAASb,gBAAgBc,YAG7Bb,aAAaK,UAAUc,OAAS,SAAUP,UACtCA,SAASb,gBAAgBc,YAG7Bb,aAAaK,UAAUe,OAAS,SAAUC,QAAST,UAC/CA,SAASb,gBAAgBc,YAG7Bb,aAAaK,UAAUiB,YAAc,SAAUV,UAC3CA,SAASb,gBAAgBc,YAI7BhB,OAAOD,QAAUI","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Represents a file that will never exist on disk - a placeholder backing file for untitled Documents. NO ONE\n * other than DocumentManager should create instances of InMemoryFile. It is valid to test for one (`instanceof\n * InMemoryFile`), but it's better to check `doc.isUntitled` where possible.\n *\n * Attempts to read/write an InMemoryFile will always fail, and exists() always yields false. InMemoryFile.fullPath\n * is just a placeholder, and should not be displayed anywhere in the UI; fullPath IS guaranteed to be unique, however.\n *\n * An InMemoryFile is not added to the filesystem index, so if you ask the filesystem anything about this\n * object, it won't know what you're talking about (`filesystem.getFileForPath(someInMemFile.fullPath)` will not\n * return someInMemFile).\n */\ndefine(function (require, exports, module) {\n\n\n    var File            = require(\"filesystem/File\"),\n        FileSystemError = require(\"filesystem/FileSystemError\");\n\n    function InMemoryFile(fullPath, fileSystem) {\n        File.call(this, fullPath, fileSystem);\n    }\n\n    InMemoryFile.prototype = Object.create(File.prototype);\n    InMemoryFile.prototype.constructor = InMemoryFile;\n    InMemoryFile.prototype.parentClass = File.prototype;\n\n    // Stub out invalid calls inherited from File\n\n    /**\n     * Reject any attempts to read the file.\n     *\n     * Read a file as text.\n     *\n     * @param {Object=} options Currently unused.\n     * @param {function (number, string, object)} callback\n     */\n    InMemoryFile.prototype.read = function (options, callback) {\n        if (typeof (options) === \"function\") {\n            callback = options;\n        }\n        callback(FileSystemError.NOT_FOUND);\n    };\n\n    /**\n     * Rejects any attempts to write the file.\n     *\n     * @param {string} data Data to write.\n     * @param {string=} encoding Encoding for data. Defaults to UTF-8.\n     * @param {!function (err, object)} callback Callback that is passed the\n     *              error code and the file's new stats if the write is successful.\n     */\n    InMemoryFile.prototype.write = function (data, encoding, callback) {\n        if (typeof (encoding) === \"function\") {\n            callback = encoding;\n        }\n        callback(FileSystemError.NOT_FOUND);\n    };\n\n\n    // Stub out invalid calls inherited from FileSystemEntry\n\n    InMemoryFile.prototype.exists = function (callback) {\n        callback(null, false);\n    };\n\n    InMemoryFile.prototype.stat = function (callback) {\n        callback(FileSystemError.NOT_FOUND);\n    };\n\n    InMemoryFile.prototype.unlink = function (callback) {\n        callback(FileSystemError.NOT_FOUND);\n    };\n\n    InMemoryFile.prototype.rename = function (newName, callback) {\n        callback(FileSystemError.NOT_FOUND);\n    };\n\n    InMemoryFile.prototype.moveToTrash = function (callback) {\n        callback(FileSystemError.NOT_FOUND);\n    };\n\n    // Export this class\n    module.exports = InMemoryFile;\n});\n"],"file":"InMemoryFile.js"}