{"version":3,"sources":["JSUtils/Preferences.js"],"names":["define","require","exports","module","StringUtils","settingsToRegExp","settings","baseRegExp","defaultRegExp","regExpString","Array","length","push","source","forEach","value","index","isRegExp","substring","regexEscape","replace","concat","defaultParts","join","RegExp","Preferences","prefs","BASE_EXCLUDED_DIRECTORIES","DEFAULT_EXCLUDED_DIRECTORIES","BASE_EXCLUDED_FILES","DEFAULT_MAX_FILE_COUNT","DEFAULT_MAX_FILE_SIZE","this","_excludedDirectories","_excludedFiles","_maxFileCount","_maxFileSize","FILE_NAME","prototype","getExcludedDirectories","getExcludedFiles","getMaxFileCount","getMaxFileSize"],"mappings":"AA8DAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,YAAmBH,QAAQ,qBAY/B,SAASI,iBAAiBC,SAAUC,WAAYC,eAC5C,IAAIC,aAAe,GAyCnB,GAvCIH,oBAAoBI,OAASJ,SAASK,OAAS,IAI3CJ,YACAD,SAASM,KAAK,IAAML,WAAWM,OAAS,KAK5CP,SAASQ,QAAQ,SAAUC,MAAOC,OAG1B,IAAIC,SADa,iBAAVF,QAIHA,MAHwB,MAAbA,MAAM,IAA0C,MAA5BA,MAAMA,MAAMJ,OAAS,GAG5CI,MAAMG,UAAU,EAAGH,MAAMJ,OAAS,GAWlC,KAHRI,OADAA,OALAA,MAAQX,YAAYe,YAAYJ,QAKlBK,QAAQ,MAAO,OACfA,QAAQ,MAAO,OAGP,IAGtBJ,MAAQ,IACRP,cAAgB,KAGpBA,aAAeA,aAAaY,OAAON,YAK1CN,aAAc,CACf,IAAIa,aAAe,GAOnB,GANIf,YACAe,aAAaV,KAAKL,WAAWM,QAE7BL,eACAc,aAAaV,KAAKJ,cAAcK,UAEhCS,aAAaX,OAAS,GAGtB,OAAO,KAFPF,aAAgBa,aAAaC,KAAK,KAM1C,OAAO,IAAIC,OAAOf,cAStB,SAASgB,YAAYC,OACjB,IAAIC,0BAA4B,KAE5BC,6BAA+B,eAE/BC,oBAAsB,iCACtBC,uBAAyB,IACzBC,sBAAwB,OAExBL,OACAM,KAAKC,qBAAuB5B,iBAAiBqB,MAAM,wBATvB,KAWiBE,8BAC7CI,KAAKE,eAAiB7B,iBAAiBqB,MAAM,kBACzCG,qBACJG,KAAKG,cAAgBT,MAAM,kBAC3BM,KAAKI,aAAeV,MAAM,mBAGrBM,KAAKG,eAAiBH,KAAKG,cAAgB,KAC5CH,KAAKG,cAdgB,OAiBpBH,KAAKI,cAAgBJ,KAAKI,aAAe,KAC1CJ,KAAKI,aAjBe,UAqBxBJ,KAAKC,qBAAuBL,6BAC5BI,KAAKE,eAAiBL,oBACtBG,KAAKG,cAxBoB,IAyBzBH,KAAKI,aAxBmB,QA4BhCX,YAAYY,UAAY,eAQxBZ,YAAYa,UAAUC,uBAAyB,WAC3C,OAAOP,KAAKC,sBAShBR,YAAYa,UAAUE,iBAAmB,WACrC,OAAOR,KAAKE,gBAQhBT,YAAYa,UAAUG,gBAAkB,WACpC,OAAOT,KAAKG,eAShBV,YAAYa,UAAUI,eAAiB,WACnC,OAAOV,KAAKI,cAGhBjC,OAAOD,QAAUuB","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n\n    This class parses configuration values from a JSON object. The expected\n    name of the file is “.jscodehints” but this class does not actually read\n    the file, it just provides a constant, FILE_NAME.\n\n    The following properties are supported:\n\n     \"excluded-directories\" - An array of directory strings that match\n     directories that will be excluded from analysis. Directories may be\n     excluded if they contain automated tests that aren’t relevant for code hinting.\n     The wildcards “*” and “?” are supported in strings.\n\n     \"excluded-files\" - An array of file strings that match files that will\n     be excluded from analysis. Files are typically excluded because\n     their API is in a JSON file or they are known to cause problems with either\n     stability or performance. The wildcards “*” and “?” are supported in strings.\n\n     \"max-file-count\" - Limits the total number of files that can be processed for\n     hints.\n\n     \"max-file-size\" - Files larger than this number of bytes will not be parsed.\n\n     The strings in \"excluded-directories\" or \"excluded-files\" will be treated as a\n     regular expression if the first and last characters of the string are the '/'\n     character. Note the '\\' character in a regular expression needs to be escaped\n     to be valid in a JSON formatted file. For example \"/[\\d]/\" becomes \"/[\\\\d]/\".\n\n     Example file:\n\n     {\n     \"excluded-directories\" : [\"/ex[\\\\w]*ed/\"],\n     \"excluded-files\" : [\"require.js\", \"jquery*.js\", \"less*.min.js\", \"ember*.js\", \"d2?.js\", \"d3*\"],\n     \"max-file-count\": 100,\n     \"max-file-size\": 524288\n     }\n\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    var StringUtils      = require(\"utils/StringUtils\");\n\n    /**\n     *  Convert an array of strings with optional wildcards, to an equivalent\n     *  regular expression.\n     *\n     * @param {Array.<string|RegExp>} settings from the file (note: this may be mutated by this function)\n     * @param {?RegExp} baseRegExp - base regular expression that is always used\n     * @param {?RegExp} defaultRegExp - additional regular expression that is only used if the user has not configured settings\n     * @return {RegExp} Regular expression that captures the array of string\n     * with optional wildcards.\n     */\n    function settingsToRegExp(settings, baseRegExp, defaultRegExp) {\n        var regExpString = \"\";\n\n        if (settings instanceof Array && settings.length > 0) {\n\n            // Append base settings to user settings. The base\n            // settings are builtin and cannot be overridden.\n            if (baseRegExp) {\n                settings.push(\"/\" + baseRegExp.source + \"/\");\n            }\n\n            // convert each string, with optional wildcards to an equivalent\n            // string in a regular expression.\n            settings.forEach(function (value, index) {\n\n                if (typeof value === \"string\") {\n                    var isRegExp = value[0] === '/' && value[value.length - 1] === '/';\n\n                    if (isRegExp) {\n                        value = value.substring(1, value.length - 1);\n                    } else {\n                        value = StringUtils.regexEscape(value);\n\n                        // convert user input wildcard, \"*\" or \"?\", to a regular\n                        // expression. We can just replace the escaped \"*\" or \"?\"\n                        // since we know it is a wildcard.\n                        value = value.replace(\"\\\\?\", \".?\");\n                        value = value.replace(\"\\\\*\", \".*\");\n\n                        // Add \"^\" and \"$\" to prevent matching in the middle of strings.\n                        value = \"^\" + value + \"$\";\n                    }\n\n                    if (index > 0) {\n                        regExpString += \"|\";\n                    }\n\n                    regExpString = regExpString.concat(value);\n                }\n            });\n        }\n\n        if (!regExpString) {\n            var defaultParts = [];\n            if (baseRegExp) {\n                defaultParts.push(baseRegExp.source);\n            }\n            if (defaultRegExp) {\n                defaultParts.push(defaultRegExp.source);\n            }\n            if (defaultParts.length > 0) {\n                regExpString  = defaultParts.join(\"|\");\n            } else {\n                return null;\n            }\n        }\n\n        return new RegExp(regExpString);\n    }\n\n    /**\n     * Constructor to create a default preference object.\n     *\n     * @constructor\n     * @param {Object=} prefs - preference object\n     */\n    function Preferences(prefs) {\n        var BASE_EXCLUDED_DIRECTORIES = null, /* if the user has settings, we don't exclude anything by default */\n            // exclude node_modules for performance reasons and because we don't do full hinting for those anyhow.\n            DEFAULT_EXCLUDED_DIRECTORIES = /node_modules/,\n            // exclude require and jquery since we have special knowledge of those\n            BASE_EXCLUDED_FILES = /^require.*\\.js$|^jquery.*\\.js$/,\n            DEFAULT_MAX_FILE_COUNT = 100,\n            DEFAULT_MAX_FILE_SIZE = 512 * 1024;\n\n        if (prefs) {\n            this._excludedDirectories = settingsToRegExp(prefs[\"excluded-directories\"],\n                                                         BASE_EXCLUDED_DIRECTORIES,\n                                                         DEFAULT_EXCLUDED_DIRECTORIES);\n            this._excludedFiles = settingsToRegExp(prefs[\"excluded-files\"],\n                BASE_EXCLUDED_FILES);\n            this._maxFileCount = prefs[\"max-file-count\"];\n            this._maxFileSize = prefs[\"max-file-size\"];\n\n            // sanity check values\n            if (!this._maxFileCount || this._maxFileCount < 0) {\n                this._maxFileCount = DEFAULT_MAX_FILE_COUNT;\n            }\n\n            if (!this._maxFileSize || this._maxFileSize < 0) {\n                this._maxFileSize = DEFAULT_MAX_FILE_SIZE;\n            }\n\n        } else {\n            this._excludedDirectories = DEFAULT_EXCLUDED_DIRECTORIES;\n            this._excludedFiles = BASE_EXCLUDED_FILES;\n            this._maxFileCount = DEFAULT_MAX_FILE_COUNT;\n            this._maxFileSize = DEFAULT_MAX_FILE_SIZE;\n        }\n    }\n\n    Preferences.FILE_NAME = \".jscodehints\";\n\n    /**\n     * Get the regular expression for excluded directories.\n     *\n     * @return {?RegExp} Regular expression matching the directories that should\n     * be excluded. Returns null if no directories are excluded.\n     */\n    Preferences.prototype.getExcludedDirectories = function () {\n        return this._excludedDirectories;\n    };\n\n    /**\n     * Get the regular expression for excluded files.\n     *\n     * @return {?RegExp} Regular expression matching the files that should\n     * be excluded. Returns null if no files are excluded.\n     */\n    Preferences.prototype.getExcludedFiles = function () {\n        return this._excludedFiles;\n    };\n\n    /**\n     * Get the maximum number of files that will be analyzed.\n     *\n     * @return {number}\n     */\n    Preferences.prototype.getMaxFileCount = function () {\n        return this._maxFileCount;\n    };\n\n    /**\n     * Get the maximum size of a file that will be analyzed. Files that are\n     * larger will be ignored.\n     *\n     * @return {number}\n     */\n    Preferences.prototype.getMaxFileSize = function () {\n        return this._maxFileSize;\n    };\n\n    module.exports = Preferences;\n\n});\n\n"],"file":"Preferences.js"}