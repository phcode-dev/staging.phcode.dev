{"version":3,"sources":["extensionsIntegrated/appUpdater/main.js"],"names":["define","require","exports","module","AppInit","Metrics","Commands","CommandManager","Menus","Dialogs","NodeUtils","DefaultDialogs","Strings","marked","semver","TaskManager","StringUtils","NativeApp","PreferencesManager","updaterWindow","updateTask","updatePendingRestart","updateFailed","TAURI_UPDATER_WINDOW_LABEL","KEY_LAST_UPDATE_CHECK_TIME","KEY_UPDATE_AVAILABLE","showOrHideUpdateIcon","updateAvailable","window","__TAURI__","WebviewWindow","getByLabel","addNewTask","UPDATING_APP","UPDATING_APP_MESSAGE","onSelect","showInfoDialog","UPDATE_READY_RESTART_TITLE","UPDATE_READY_RESTART_MESSAGE","UPDATE_FAILED_TITLE","UPDATE_FAILED_MESSAGE","UPDATING_APP_DIALOG_MESSAGE","show","getViewState","$","removeClass","addClass","fetchJSON","url","fetch","then","response","ok","json","createTauriUpdateWindow","downloadURL","countEvent","EVENT_TYPE","UPDATES","Phoenix","platform","config","environment","encodeURIComponent","title","fullscreen","resizable","height","minHeight","width","minWidth","acceptFirstMouse","visible","async","doUpdate","getUpdatePlatformKey","platformArch","app","getPlatformArch","os","brackets","getUpdateDetails","updatePlatformKey","updateDetails","shouldUpdate","currentVersion","metadata","apiVersion","updateVersion","releaseNotesMarkdown","updatePlatform","updateMetadata","app_update_url","phoenixBinaryVersion","getPhoenixBinaryVersion","phoenixLoadedAppVersion","gt","version","console","log","setViewState","notes","platforms","eq","e","error","isUpgradableLocation","homeDir","path","endsWith","phoenixInstallDir","cliArgs","invoke","phoenixBinLoadedPath","startsWith","logger","reportError","checkForUpdates","isAutoUpdate","click","UPDATE_NOT_AVAILABLE_TITLE","UPDATE_UP_TO_DATE","buttons","className","DIALOG_BTN_CLASS_NORMAL","id","DIALOG_BTN_CANCEL","text","UPDATE_LATER","DIALOG_BTN_CLASS_PRIMARY","DIALOG_BTN_OK","GET_IT_NOW","markdownHtml","parse","showModalDialog","DIALOG_ID_INFO","UPDATE_AVAILABLE_TITLE","done","option","isUpgradableLoc","downloadPage","homepage_url","openURLInDefaultBrowser","UPDATE_COMMANDS","GET_STATUS","GET_DOWNLOAD_PROGRESS","GET_INSTALLER_LOCATION","UPDATE_EVENT","UPDATE_STATUS","_sendUpdateCommand","command","data","event","emit","_refreshUpdateStatus","launchWindowsInstaller","Promise","resolve","reject","appdataDir","_tauriBootVars","appLocalDir","resolveResource","argsArray","nodeSrcPath","shell","Command","sidecar","on","code","signal","stdout","line","stderr","spawn","launchLinuxUpdater","stageValue","execCommand","runCommand","result","execute","Error","getCurrentMacAppPath","fullPath","normalizedPath","normalize","parts","split","sep","appIndex","findIndex","part","appPathParts","slice","join","doMacUpdate","currentAppPath","installerLocation","removeCommand","copyCommand","quitTimeAppUpdateHandler","dialog","failUpdateDialogAndExit","err","close","UPDATE_FAILED_VISIT_SITE_MESSAGE","update_download_page","catch","finally","UPDATE_INSTALLING","UPDATE_INSTALLING_MESSAGE","OK","updateInstalledDialogShown","updateFailedDialogShown","appReady","browser","isTauri","isTestWindow","listen","receivedEvent","eventName","payload","setSucceded","setTitle","UPDATE_DONE","setMessage","UPDATE_RESTART_INSTALL","UPDATE_READY_RESTART_INSTALL_MESSAGE","UPDATE_DOWNLOADING","UPDATE_RESTART","setFailed","progressPercent","fileSize","setProgressPercent","format","UPDATE_DOWNLOAD_PROGRESS","Math","floor","registerQuitTimeAppUpdateHandler","reportErrorMessage","commandID","HELP_CHECK_UPDATES","register","CMD_CHECK_FOR_UPDATE","helpMenu","getMenu","AppMenuBar","HELP_MENU","addMenuItem","AFTER","HELP_GET_INVOLVED","lastUpdateCheckTime","currentTime","Date","now","oneDayInMilliseconds"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global logger, path*/\n\n// this file uses tauri APIs directly and is probably the only place where tauri apis are used outside of the\n// shell.js file. This is app updates are pretty core level even though we do it as an extension here.\n\ndefine(function (require, exports, module) {\n    const AppInit = require(\"utils/AppInit\"),\n        Metrics = require(\"utils/Metrics\"),\n        Commands = require(\"command/Commands\"),\n        CommandManager  = require(\"command/CommandManager\"),\n        Menus = require(\"command/Menus\"),\n        Dialogs = require(\"widgets/Dialogs\"),\n        NodeUtils = require(\"utils/NodeUtils\"),\n        DefaultDialogs  = require(\"widgets/DefaultDialogs\"),\n        Strings     = require(\"strings\"),\n        marked = require('thirdparty/marked.min'),\n        semver = require(\"thirdparty/semver.browser\"),\n        TaskManager = require(\"features/TaskManager\"),\n        StringUtils         = require(\"utils/StringUtils\"),\n        NativeApp           = require(\"utils/NativeApp\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\");\n    let updaterWindow, updateTask, updatePendingRestart, updateFailed;\n\n    const TAURI_UPDATER_WINDOW_LABEL = \"updater\",\n        KEY_LAST_UPDATE_CHECK_TIME = \"PH_LAST_UPDATE_CHECK_TIME\",\n        KEY_UPDATE_AVAILABLE = \"PH_UPDATE_AVAILABLE\";\n\n    function showOrHideUpdateIcon() {\n        if(!updaterWindow){\n            updaterWindow = window.__TAURI__.window.WebviewWindow.getByLabel(TAURI_UPDATER_WINDOW_LABEL);\n        }\n        if(updaterWindow && !updateTask) {\n            updateTask = TaskManager.addNewTask(Strings.UPDATING_APP, Strings.UPDATING_APP_MESSAGE,\n                `<i class=\"fa-solid fa-cogs\"></i>`, {\n                    onSelect: function () {\n                        if(updatePendingRestart){\n                            Dialogs.showInfoDialog(Strings.UPDATE_READY_RESTART_TITLE, Strings.UPDATE_READY_RESTART_MESSAGE);\n                        } else if(updateFailed){\n                            Dialogs.showInfoDialog(Strings.UPDATE_FAILED_TITLE, Strings.UPDATE_FAILED_MESSAGE);\n                        }else {\n                            Dialogs.showInfoDialog(Strings.UPDATING_APP, Strings.UPDATING_APP_DIALOG_MESSAGE);\n                        }\n                    }\n                });\n            updateTask.show();\n        }\n        let updateAvailable = PreferencesManager.getViewState(KEY_UPDATE_AVAILABLE);\n        if(updateAvailable){\n            $(\"#update-notification\").removeClass(\"forced-hidden\");\n        } else {\n            $(\"#update-notification\").addClass(\"forced-hidden\");\n        }\n    }\n\n    function fetchJSON(url) {\n        return fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    return null;\n                }\n                return response.json();\n            });\n    }\n\n    function createTauriUpdateWindow(downloadURL) {\n        if(updaterWindow){\n            return;\n        }\n        Metrics.countEvent(Metrics.EVENT_TYPE.UPDATES, 'window', \"create\"+Phoenix.platform);\n        // as we are a single instance app, and there can be multiple phoenix windows that comes in and goes out,\n        // the updater lives in its own independent hidden window.\n        const url = downloadURL ?\n            `tauri-updater.html?stage=${Phoenix.config.environment}&downloadURL=${encodeURIComponent(downloadURL)}` :\n            `tauri-updater.html?stage=${Phoenix.config.environment}`;\n        updaterWindow = new window.__TAURI__.window.WebviewWindow(TAURI_UPDATER_WINDOW_LABEL, {\n            url: url,\n            title: \"Desktop App Updater\",\n            fullscreen: false,\n            resizable: false,\n            height: 320,\n            minHeight: 320,\n            width: 240,\n            minWidth: 240,\n            acceptFirstMouse: false,\n            visible: false\n        });\n        if(window.__TAURI__.window.WebviewWindow.getByLabel(TAURI_UPDATER_WINDOW_LABEL)){\n            Metrics.countEvent(Metrics.EVENT_TYPE.UPDATES, 'window', \"okCreate\"+Phoenix.platform);\n        }\n    }\n\n    async function doUpdate(downloadURL) {\n        createTauriUpdateWindow(downloadURL);\n        showOrHideUpdateIcon();\n    }\n\n    async function getUpdatePlatformKey() {\n        const platformArch = await Phoenix.app.getPlatformArch();\n        let os = 'windows';\n        if (brackets.platform === \"mac\") {\n            os = \"darwin\";\n        } else if (brackets.platform === \"linux\") {\n            os = \"linux\";\n        }\n        return `${os}-${platformArch}`;\n    }\n\n    async function getUpdateDetails() {\n        const updatePlatformKey = await getUpdatePlatformKey();\n        const updateDetails = {\n            shouldUpdate: false,\n            updatePendingRestart: false,\n            downloadURL: null,\n            currentVersion: Phoenix.metadata.apiVersion,\n            updateVersion: null,\n            releaseNotesMarkdown: null,\n            updatePlatform: updatePlatformKey\n        };\n        try{\n            if(!updaterWindow){\n                updaterWindow = window.__TAURI__.window.WebviewWindow.getByLabel(TAURI_UPDATER_WINDOW_LABEL);\n            }\n            const updateMetadata = await fetchJSON(brackets.config.app_update_url);\n            const phoenixBinaryVersion = await NodeUtils.getPhoenixBinaryVersion();\n            const phoenixLoadedAppVersion = Phoenix.metadata.apiVersion;\n            if(semver.gt(updateMetadata.version, phoenixBinaryVersion)){\n                console.log(\"Update available: \", updateMetadata, \"Detected platform: \", updatePlatformKey);\n                PreferencesManager.setViewState(KEY_UPDATE_AVAILABLE, true);\n                updateDetails.shouldUpdate = true;\n                updateDetails.updateVersion = updateMetadata.version;\n                updateDetails.releaseNotesMarkdown = updateMetadata.notes;\n                if(updateMetadata.platforms && updateMetadata.platforms[updatePlatformKey]){\n                    updateDetails.downloadURL = updateMetadata.platforms[updatePlatformKey].url;\n                }\n            } else if(semver.eq(updateMetadata.version, phoenixBinaryVersion) &&\n                !semver.eq(phoenixLoadedAppVersion, phoenixBinaryVersion) && updaterWindow){\n                // the updaterWindow check is here so that it only makes sense to show restart dialog if the update\n                // was actually done. We have a version number mismatch of 0.0.1 between phoenix-desktop and phoenix\n                // repo, and that means that this can get triggered on statup on development builds. Wont happen in\n                // actual pipeline generated build tho.\n                console.log(\"Updates applied, waiting for app restart: \", phoenixBinaryVersion, phoenixLoadedAppVersion);\n                updateDetails.updatePendingRestart = true;\n                PreferencesManager.setViewState(KEY_UPDATE_AVAILABLE, true);\n            } else {\n                console.log(\"no updates available for platform: \", updateDetails.updatePlatform);\n                PreferencesManager.setViewState(KEY_UPDATE_AVAILABLE, false);\n            }\n            showOrHideUpdateIcon();\n        } catch (e) {\n            console.error(\"Error getting update metadata\", e);\n            updateFailed = true;\n            Metrics.countEvent(Metrics.EVENT_TYPE.UPDATES, 'fail', \"Unknown\"+Phoenix.platform);\n        }\n        return updateDetails;\n    }\n\n    /**\n     * We should only upgrade if the current binary is at an installed location.\n     */\n    async function isUpgradableLocation() {\n        try {\n            if (brackets.platform === \"linux\") {\n                let homeDir = await window.__TAURI__.path.homeDir(); // Eg. \"/home/home/\"\n                if(!homeDir.endsWith(\"/\")){\n                   homeDir = homeDir + \"/\";\n                }\n                const phoenixInstallDir = `${homeDir}.phoenix-code/`;\n                const cliArgs = await window.__TAURI__.invoke('_get_commandline_args');\n                const phoenixBinLoadedPath = cliArgs[0];\n                // we only upgrade if the install location is created by the installer\n                return phoenixBinLoadedPath.startsWith(phoenixInstallDir);\n            }\n        } catch (e) {\n            logger.reportError(e);\n            console.error(e);\n            return false;\n        }\n        // for mac, this is handled by tauri APIs, so we always say yes.\n        // for win, this is handled by windows installer nsis exe, so we always say yes.\n        return true;\n    }\n\n    async function checkForUpdates(isAutoUpdate) {\n        showOrHideUpdateIcon();\n        if(updateTask){\n            $(\"#status-tasks .btn-dropdown\").click();\n            return;\n        }\n        const updateDetails = await getUpdateDetails();\n        if(updateFailed) {\n            Dialogs.showInfoDialog(Strings.UPDATE_FAILED_TITLE, Strings.UPDATE_FAILED_MESSAGE);\n            return;\n        }\n        if(updatePendingRestart || updateDetails.updatePendingRestart){\n            Dialogs.showInfoDialog(Strings.UPDATE_READY_RESTART_TITLE, Strings.UPDATE_READY_RESTART_MESSAGE);\n            return;\n        }\n        if(!updateDetails.shouldUpdate){\n            (!isAutoUpdate) && Dialogs.showInfoDialog(Strings.UPDATE_NOT_AVAILABLE_TITLE, Strings.UPDATE_UP_TO_DATE);\n            return;\n        }\n        const buttons = [\n            { className: Dialogs .DIALOG_BTN_CLASS_NORMAL, id: Dialogs .DIALOG_BTN_CANCEL, text: Strings.UPDATE_LATER },\n            { className: Dialogs .DIALOG_BTN_CLASS_PRIMARY, id: Dialogs .DIALOG_BTN_OK, text: Strings.GET_IT_NOW }\n        ];\n        let markdownHtml = marked.parse(updateDetails.releaseNotesMarkdown || \"\");\n        Metrics.countEvent(Metrics.EVENT_TYPE.UPDATES, 'dialog', \"shown\"+Phoenix.platform);\n        Dialogs.showModalDialog(DefaultDialogs.DIALOG_ID_INFO, Strings.UPDATE_AVAILABLE_TITLE, markdownHtml, buttons)\n            .done(option=>{\n                isUpgradableLocation().then(isUpgradableLoc=>{\n                    if(!isUpgradableLoc) {\n                        // user installed linux as binary without installer, we just open phcode.io\n                        const downloadPage = brackets.config.homepage_url || \"https://phcode.io\";\n                        NativeApp.openURLInDefaultBrowser(downloadPage);\n                        return;\n                    }\n                    if(option === Dialogs.DIALOG_BTN_OK && !updaterWindow){\n                        doUpdate(updateDetails.downloadURL);\n                        return;\n                    }\n                    Metrics.countEvent(Metrics.EVENT_TYPE.UPDATES, 'dialog', \"cancel\"+Phoenix.platform);\n                });\n            });\n    }\n\n    const UPDATE_COMMANDS = {\n        GET_STATUS: \"GET_STATUS\",\n        GET_DOWNLOAD_PROGRESS: \"GET_DOWNLOAD_PROGRESS\",\n        GET_INSTALLER_LOCATION: \"GET_INSTALLER_LOCATION\"\n    };\n    const UPDATE_EVENT = {\n        STATUS: \"STATUS\",\n        LOG_ERROR: \"LOG_ERROR\",\n        DOWNLOAD_PROGRESS: \"DOWNLOAD_PROGRESS\",\n        INSTALLER_LOCATION: \"INSTALLER_LOCATION\"\n    };\n    const UPDATE_STATUS = {\n        STARTED: \"STARTED\",\n        DOWNLOADING: \"DOWNLOADING\",\n        INSTALLER_DOWNLOADED: \"INSTALLER_DOWNLOADED\",\n        FAILED: \"FAILED\",\n        FAILED_UNKNOWN_OS: \"FAILED_UNKNOWN_OS\",\n        INSTALLED: \"INSTALLED\"\n    };\n\n    function _sendUpdateCommand(command, data) {\n        window.__TAURI__.event.emit('updateCommands', {command, data});\n    }\n\n    function _refreshUpdateStatus() {\n        _sendUpdateCommand(UPDATE_COMMANDS.GET_STATUS);\n    }\n\n    async function launchWindowsInstaller() {\n        return new Promise((resolve, reject)=>{\n            const appdataDir = window._tauriBootVars.appLocalDir;\n            window.__TAURI__.path.resolveResource(\"src-node/installer/launch-windows-installer.js\")\n                .then(async nodeSrcPath=>{\n                    // this is not supposed to work in linux.\n                    const argsArray = [nodeSrcPath, appdataDir];\n                    const command = window.__TAURI__.shell.Command.sidecar('phnode', argsArray);\n                    command.on('close', data => {\n                        console.log(`PhNode: command finished with code ${data.code} and signal ${data.signal}`);\n                        if(data.code !== 0) {\n                            console.error(\"Install failed\");\n                            reject();\n                            return;\n                        }\n                        resolve();\n                    });\n                    command.on('error', error => {\n                        console.error(`PhNode: command error: \"${error}\"`);\n                        reject();\n                    });\n                    command.stdout.on('data', line => {\n                        console.log(`PhNode: ${line}`);\n                    });\n                    command.stderr.on('data', line => console.error(`PhNode: ${line}`));\n                    command.spawn();\n                });\n        });\n    }\n\n    async function launchLinuxUpdater() {\n        const stageValue = Phoenix.config.environment;\n        console.log('Stage:', stageValue);\n        let execCommand = 'wget -qO- https://updates.phcode.io/linux/installer.sh | bash -s -- --upgrade';\n        let runCommand = 'run-update-linux-command';\n        if(stageValue === 'dev' || stageValue === 'stage'){\n            runCommand = 'run-update-linux-command-dev';\n            execCommand = \"wget -qO- https://updates.phcode.io/linux/installer-latest-experimental-build.sh | bash -s -- --upgrade\";\n        }\n        const command = new window.__TAURI__.shell\n            .Command(runCommand, ['-e', execCommand]);\n        const result = await command.execute();\n        if(result.code !== 0){\n            throw new Error(\"Update script exit with non-0 exit code: \" + result.code);\n        }\n    }\n\n    async function getCurrentMacAppPath() {\n        const cliArgs = await window.__TAURI__.invoke('_get_commandline_args');\n        let fullPath = cliArgs[0]; // something like /Applications/editor.app/contents/.../Phoenix code\n        const normalizedPath = path.normalize(fullPath);\n        const parts = normalizedPath.split(path.sep);\n        const appIndex = parts.findIndex(part => part.endsWith('.app'));\n\n        // Reconstruct the path up to the .app part\n        if (appIndex !== -1) {\n            const appPathParts = parts.slice(0, appIndex + 1);\n            return appPathParts.join(path.sep); // returns /Applications/editor.app\n        }\n        // .app part is found\n        return null;\n    }\n\n    async function doMacUpdate() {\n        const currentAppPath = await getCurrentMacAppPath();\n        if(!currentAppPath || !installerLocation || !currentAppPath.endsWith(\".app\") ||\n            !installerLocation.endsWith(\".app\")){\n            throw new Error(\"Cannot resolve .app location to copy.\");\n        }\n        const removeCommand = new window.__TAURI__.shell\n            .Command(`recursive-rm-unix`, ['-r', currentAppPath]);\n        let result = await removeCommand.execute();\n        if(result.code !== 0){\n            console.error(\"Could not remove old app: \", currentAppPath);\n            throw new Error(\"Could not remove old app: \" + currentAppPath);\n        }\n        const copyCommand = new window.__TAURI__.shell\n            .Command(`recursive-copy-unix`, ['-r', installerLocation, currentAppPath]);\n        result = await copyCommand.execute();\n        if(result.code !== 0){\n            throw new Error(\"Update script exit with non-0 exit code: \" + result.code);\n        }\n    }\n\n    let installerLocation;\n    async function quitTimeAppUpdateHandler() {\n        if(!installerLocation){\n            return;\n        }\n        console.log(\"Installing update from: \", installerLocation);\n        return new Promise(resolve=>{\n            // this should never reject as it happens in app quit. rejecting wont affect quit, but its unnecessary.\n            let dialog;\n            function failUpdateDialogAndExit(err) {\n                console.error(\"error updating: \", err);\n                dialog && dialog.close();\n                Dialogs.showInfoDialog(Strings.UPDATE_FAILED_TITLE, Strings.UPDATE_FAILED_VISIT_SITE_MESSAGE)\n                    .done(()=>{\n                        NativeApp.openURLInDefaultBrowser(Phoenix.config.update_download_page)\n                            .catch(console.error)\n                            .finally(resolve);\n                    });\n            }\n            if (brackets.platform === \"win\") {\n                launchWindowsInstaller()\n                    .then(resolve)\n                    .catch(failUpdateDialogAndExit);\n                return;\n            }\n            dialog = Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_INFO,\n                Strings.UPDATE_INSTALLING,\n                Strings.UPDATE_INSTALLING_MESSAGE,\n                [\n                    {\n                        className: \"forced-hidden\",\n                        id: Dialogs.DIALOG_BTN_OK,\n                        text: Strings.OK\n                    }\n                ],\n                false\n            );\n            if (brackets.platform === \"linux\") {\n                launchLinuxUpdater()\n                    .then(resolve)\n                    .catch(failUpdateDialogAndExit);\n            } else if (brackets.platform === \"mac\") {\n                doMacUpdate()\n                    .then(resolve)\n                    .catch(failUpdateDialogAndExit);\n            } else {\n                resolve();\n            }\n        });\n    }\n\n    let updateInstalledDialogShown = false, updateFailedDialogShown = false;\n    AppInit.appReady(function () {\n        if(!Phoenix.browser.isTauri || Phoenix.isTestWindow) {\n            // app updates are only for desktop builds\n            return;\n        }\n        updaterWindow = window.__TAURI__.window.WebviewWindow.getByLabel(TAURI_UPDATER_WINDOW_LABEL);\n        window.__TAURI__.event.listen(\"updater-event\", (receivedEvent)=> {\n            console.log(\"received Event updater-event\", receivedEvent);\n            const {eventName, data} = receivedEvent.payload;\n            if(eventName === UPDATE_EVENT.STATUS) {\n                if(data === UPDATE_STATUS.FAILED_UNKNOWN_OS && !updateFailedDialogShown){\n                    updateFailedDialogShown = true;\n                    Metrics.countEvent(Metrics.EVENT_TYPE.UPDATES, 'fail', \"Unknown\"+Phoenix.platform);\n                    updateFailed = true;\n                    updateTask.setFailed();\n                    updateTask.setMessage(Strings.UPDATE_FAILED_TITLE);\n                } else if(data === UPDATE_STATUS.FAILED && !updateFailedDialogShown){\n                    updateFailedDialogShown = true;\n                    Metrics.countEvent(Metrics.EVENT_TYPE.UPDATES, 'fail', Phoenix.platform);\n                    updateFailed = true;\n                    updateTask.setFailed();\n                    updateTask.setMessage(Strings.UPDATE_FAILED_TITLE);\n                    Dialogs.showInfoDialog(Strings.UPDATE_FAILED_TITLE, Strings.UPDATE_FAILED_MESSAGE);\n                } else if(data === UPDATE_STATUS.INSTALLED && !updateInstalledDialogShown){\n                    updateInstalledDialogShown = true;\n                    Metrics.countEvent(Metrics.EVENT_TYPE.UPDATES, 'done', Phoenix.platform);\n                    updatePendingRestart = true;\n                    updateTask.setSucceded();\n                    updateTask.setTitle(Strings.UPDATE_DONE);\n                    updateTask.setMessage(Strings.UPDATE_RESTART);\n                    Dialogs.showInfoDialog(Strings.UPDATE_READY_RESTART_TITLE, Strings.UPDATE_READY_RESTART_MESSAGE);\n                } else if(data === UPDATE_STATUS.INSTALLER_DOWNLOADED){\n                    Metrics.countEvent(Metrics.EVENT_TYPE.UPDATES, 'downloaded', Phoenix.platform);\n                    updatePendingRestart = true;\n                    updateTask.setSucceded();\n                    updateTask.setTitle(Strings.UPDATE_DONE);\n                    updateTask.setMessage(Strings.UPDATE_RESTART_INSTALL);\n                    if(!updateInstalledDialogShown){\n                        Dialogs.showInfoDialog(Strings.UPDATE_READY_RESTART_TITLE, Strings.UPDATE_READY_RESTART_INSTALL_MESSAGE);\n                        updateInstalledDialogShown = true;\n                    }\n                    _sendUpdateCommand(UPDATE_COMMANDS.GET_INSTALLER_LOCATION);\n                } else if(data === UPDATE_STATUS.DOWNLOADING){\n                    updateTask.setMessage(Strings.UPDATE_DOWNLOADING);\n                    _sendUpdateCommand(UPDATE_COMMANDS.GET_DOWNLOAD_PROGRESS);\n                }\n                showOrHideUpdateIcon();\n            } else if(eventName === UPDATE_EVENT.DOWNLOAD_PROGRESS) {\n                const {progressPercent, fileSize} = data;\n                updateTask.setProgressPercent(progressPercent);\n                updateTask.setMessage(StringUtils.format(Strings.UPDATE_DOWNLOAD_PROGRESS,\n                    Math.floor(fileSize*progressPercent/100),\n                    fileSize));\n            } else if(eventName === UPDATE_EVENT.INSTALLER_LOCATION) {\n                installerLocation = data;\n                Phoenix.app.registerQuitTimeAppUpdateHandler(quitTimeAppUpdateHandler);\n            } else if(eventName === UPDATE_EVENT.LOG_ERROR) {\n                logger.reportErrorMessage(data);\n            }\n        });\n        $(\"#update-notification\").click(()=>{\n            checkForUpdates();\n        });\n        const commandID = Commands.HELP_CHECK_UPDATES;\n        CommandManager.register(Strings.CMD_CHECK_FOR_UPDATE, commandID, ()=>{\n            checkForUpdates();\n        });\n        const helpMenu = Menus.getMenu(Menus.AppMenuBar.HELP_MENU);\n        helpMenu.addMenuItem(commandID, \"\", Menus.AFTER, Commands.HELP_GET_INVOLVED);\n        showOrHideUpdateIcon();\n        _refreshUpdateStatus();\n        // check for updates at boot\n        let lastUpdateCheckTime = PreferencesManager.getViewState(KEY_LAST_UPDATE_CHECK_TIME);\n        const currentTime = Date.now();\n        const oneDayInMilliseconds = 24 * 60 * 60 * 1000; // 24 hours * 60 minutes * 60 seconds * 1000 milliseconds\n        if(lastUpdateCheckTime && ((currentTime - lastUpdateCheckTime) < oneDayInMilliseconds)){\n            console.log(\"Skipping update check: last update check was within one day\");\n            return;\n        }\n        PreferencesManager.setViewState(KEY_LAST_UPDATE_CHECK_TIME, currentTime);\n        checkForUpdates(true);\n    });\n});\n"],"file":"main.js"}