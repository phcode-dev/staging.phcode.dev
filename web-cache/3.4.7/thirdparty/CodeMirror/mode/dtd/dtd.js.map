{"version":3,"sources":["thirdparty/CodeMirror/mode/dtd/dtd.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","type","ret","style","tp","tokenBase","stream","state","ch","next","eat","tokenize","inBlock","eatWhile","match","tokenString","sc","current","substr","length","backUp","tokenSGMLComment","dashes","quote","escaped","terminator","eol","startState","base","baseIndent","stack","token","eatSpace","context","push","pop","indent","textAfter","n","charAt","electricChars","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/*\n  DTD mode\n  Ported to CodeMirror by Peter Kroon <plakroon@gmail.com>\n  Report bugs/issues here: https://github.com/codemirror/CodeMirror/issues\n  GitHub: @peterkroon\n*/\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"dtd\", function(config) {\n  var indentUnit = config.indentUnit, type;\n  function ret(style, tp) {type = tp; return style;}\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch == \"<\" && stream.eat(\"!\") ) {\n      if (stream.eatWhile(/[\\-]/)) {\n        state.tokenize = tokenSGMLComment;\n        return tokenSGMLComment(stream, state);\n      } else if (stream.eatWhile(/[\\w]/)) return ret(\"keyword\", \"doindent\");\n    } else if (ch == \"<\" && stream.eat(\"?\")) { //xml declaration\n      state.tokenize = inBlock(\"meta\", \"?>\");\n      return ret(\"meta\", ch);\n    } else if (ch == \"#\" && stream.eatWhile(/[\\w]/)) return ret(\"atom\", \"tag\");\n    else if (ch == \"|\") return ret(\"keyword\", \"separator\");\n    else if (ch.match(/[\\(\\)\\[\\]\\-\\.,\\+\\?>]/)) return ret(null, ch);//if(ch === \">\") return ret(null, \"endtag\"); else\n    else if (ch.match(/[\\[\\]]/)) return ret(\"rule\", ch);\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (stream.eatWhile(/[a-zA-Z\\?\\+\\d]/)) {\n      var sc = stream.current();\n      if( sc.substr(sc.length-1,sc.length).match(/\\?|\\+/) !== null )stream.backUp(1);\n      return ret(\"tag\", \"tag\");\n    } else if (ch == \"%\" || ch == \"*\" ) return ret(\"number\", \"number\");\n    else {\n      stream.eatWhile(/[\\w\\\\\\-_%.{,]/);\n      return ret(null, null);\n    }\n  }\n\n  function tokenSGMLComment(stream, state) {\n    var dashes = 0, ch;\n    while ((ch = stream.next()) != null) {\n      if (dashes >= 2 && ch == \">\") {\n        state.tokenize = tokenBase;\n        break;\n      }\n      dashes = (ch == \"-\") ? dashes + 1 : 0;\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return ret(\"string\", \"tag\");\n    };\n  }\n\n  function inBlock(style, terminator) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        if (stream.match(terminator)) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        stream.next();\n      }\n      return style;\n    };\n  }\n\n  return {\n    startState: function(base) {\n      return {tokenize: tokenBase,\n              baseIndent: base || 0,\n              stack: []};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      var context = state.stack[state.stack.length-1];\n      if (stream.current() == \"[\" || type === \"doindent\" || type == \"[\") state.stack.push(\"rule\");\n      else if (type === \"endtag\") state.stack[state.stack.length-1] = \"endtag\";\n      else if (stream.current() == \"]\" || type == \"]\" || (type == \">\" && context == \"rule\")) state.stack.pop();\n      else if (type == \"[\") state.stack.push(\"[\");\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var n = state.stack.length;\n\n      if( textAfter.charAt(0) === ']' )n--;\n      else if(textAfter.substr(textAfter.length-1, textAfter.length) === \">\"){\n        if(textAfter.substr(0,1) === \"<\") {}\n        else if( type == \"doindent\" && textAfter.length > 1 ) {}\n        else if( type == \"doindent\")n--;\n        else if( type == \">\" && textAfter.length > 1) {}\n        else if( type == \"tag\" && textAfter !== \">\") {}\n        else if( type == \"tag\" && state.stack[state.stack.length-1] == \"rule\")n--;\n        else if( type == \"tag\")n++;\n        else if( textAfter === \">\" && state.stack[state.stack.length-1] == \"rule\" && type === \">\")n--;\n        else if( textAfter === \">\" && state.stack[state.stack.length-1] == \"rule\") {}\n        else if( textAfter.substr(0,1) !== \"<\" && textAfter.substr(0,1) === \">\" )n=n-1;\n        else if( textAfter === \">\") {}\n        else n=n-1;\n        //over rule them all\n        if(type == null || type == \"]\")n--;\n      }\n\n      return state.baseIndent + n * indentUnit;\n    },\n\n    electricChars: \"]>\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/xml-dtd\", \"dtd\");\n\n});\n"],"file":"dtd.js"}