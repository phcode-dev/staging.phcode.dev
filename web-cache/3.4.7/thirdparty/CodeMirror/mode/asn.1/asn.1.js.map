{"version":3,"sources":["thirdparty/CodeMirror/mode/asn.1/asn.1.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","indentUnit","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","afterNext","peek","toLowerCase","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","lineComment","fold","defineMIME","name"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"asn.1\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        cmipVerbs = parserConfig.cmipVerbs || {},\n        compareTypes = parserConfig.compareTypes || {},\n        status = parserConfig.status || {},\n        tags = parserConfig.tags || {},\n        storage = parserConfig.storage || {},\n        modifier = parserConfig.modifier || {},\n        accessTypes = parserConfig.accessTypes|| {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|\\^]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"-\"){\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\-]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (cmipVerbs.propertyIsEnumerable(cur)) return \"variable cmipVerbs\";\n      if (compareTypes.propertyIsEnumerable(cur)) return \"atom compareTypes\";\n      if (status.propertyIsEnumerable(cur)) return \"comment status\";\n      if (tags.propertyIsEnumerable(cur)) return \"variable-3 tags\";\n      if (storage.propertyIsEnumerable(cur)) return \"builtin storage\";\n      if (modifier.propertyIsEnumerable(cur)) return \"string-2 modifier\";\n      if (accessTypes.propertyIsEnumerable(cur)) return \"atom accessTypes\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterNext = stream.peek();\n            //look if the character if the quote is like the B in '10100010'B\n            if (afterNext){\n              afterNext = afterNext.toLowerCase();\n              if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n            && curPunc != ';') || (ctx.type == \"statement\"\n            && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n        return style;\n      },\n\n      electricChars: \"{}\",\n      lineComment: \"--\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-asn\", {\n    name: \"asn.1\",\n    keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" +\n    \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" +\n    \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" +\n    \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" +\n    \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" +\n    \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" +\n    \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" +\n    \" IMPLIED EXPORTS\"),\n    cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n    compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" +\n    \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" +\n    \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" +\n    \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" +\n    \" TEXTUAL-CONVENTION\"),\n    status: words(\"current deprecated mandatory obsolete\"),\n    tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" +\n    \" UNIVERSAL\"),\n    storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" +\n    \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" +\n    \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" +\n    \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" +\n    \" TruthValue RowStatus DisplayString GeneralString\" +\n    \" GraphicString IA5String NumericString\" +\n    \" PrintableString SnmpAdminString TeletexString\" +\n    \" UTF8String VideotexString VisibleString StringStore\" +\n    \" ISO646String T61String UniversalString Unsigned32\" +\n    \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n    modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" +\n    \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" +\n    \" DEFINED\"),\n    accessTypes: words(\"not-accessible accessible-for-notify read-only\" +\n    \" read-create read-write\"),\n    multiLineStrings: true\n  });\n});\n"],"file":"asn.1.js"}