{"version":3,"sources":["thirdparty/CodeMirror/mode/jsx/jsx.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","Context","state","mode","depth","prev","this","copyContext","context","copyState","defineMode","config","modeConfig","xmlMode","getMode","name","allowMissing","multilineTagIndentPastTag","allowMissingTagName","jsMode","base","flatXMLIndent","tagName","result","indent","token","stream","xmlToken","jsToken","cx","match","skipToEnd","peek","skipAttribute","xmlContext","startOfLine","indentUnit","lexical","indented","startState","style","cur","current","stop","test","indexOf","backUp","length","expressionAllowed","skipExpression","textAfter","fullLine","innerMode","defineMIME","typescript"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n\n  // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n  function Context(state, mode, depth, prev) {\n    this.state = state; this.mode = mode; this.depth = depth; this.prev = prev\n  }\n\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state),\n                       context.mode,\n                       context.depth,\n                       context.prev && copyContext(context.prev))\n  }\n\n  CodeMirror.defineMode(\"jsx\", function(config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {name: \"xml\", allowMissing: true, multilineTagIndentPastTag: false, allowMissingTagName: true})\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\")\n\n    function flatXMLIndent(state) {\n      var tagName = state.tagName\n      state.tagName = null\n      var result = xmlMode.indent(state, \"\", \"\")\n      state.tagName = tagName\n      return result\n    }\n\n    function token(stream, state) {\n      if (state.context.mode == xmlMode)\n        return xmlToken(stream, state, state.context)\n      else\n        return jsToken(stream, state, state.context)\n    }\n\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) { // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1\n        else stream.skipToEnd()\n        return \"comment\"\n      }\n\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state)\n\n        var indent = flatXMLIndent(cx.state), xmlContext = cx.state.context\n        // If JS starts on same line as tag\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine)\n            xmlContext = xmlContext.prev\n          // If tag starts the line, use XML indentation level\n          if (xmlContext.startOfLine) indent -= config.indentUnit\n          // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented\n        // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit\n        }\n\n        state.context = new Context(CodeMirror.startState(jsMode, indent),\n                                    jsMode, 0, state.context)\n        return null\n      }\n\n      if (cx.depth == 1) { // Inside of tag\n        if (stream.peek() == \"<\") { // Tag inside of tag\n          xmlMode.skipAttribute(cx.state)\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)),\n                                      xmlMode, 0, state.context)\n          return null\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd()\n          return \"comment\"\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2\n          return token(stream, state)\n        }\n      }\n\n      var style = xmlMode.token(stream, cx.state), cur = stream.current(), stop\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0\n          else state.context = state.context.prev\n        } else if (/^</.test(cur)) {\n          cx.depth = 1\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop)\n      }\n      return style\n    }\n\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && jsMode.expressionAllowed(stream, cx.state)) {\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\", \"\")),\n                                    xmlMode, 0, state.context)\n        jsMode.skipExpression(cx.state)\n        return null\n      }\n\n      var style = jsMode.token(stream, cx.state)\n      if (!style && cx.depth != null) {\n        var cur = stream.current()\n        if (cur == \"{\") {\n          cx.depth++\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev\n        }\n      }\n      return style\n    }\n\n    return {\n      startState: function() {\n        return {context: new Context(CodeMirror.startState(jsMode), jsMode)}\n      },\n\n      copyState: function(state) {\n        return {context: copyContext(state.context)}\n      },\n\n      token: token,\n\n      indent: function(state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine)\n      },\n\n      innerMode: function(state) {\n        return state.context\n      }\n    }\n  }, \"xml\", \"javascript\")\n\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\")\n  CodeMirror.defineMIME(\"text/typescript-jsx\", {name: \"jsx\", base: {name: \"javascript\", typescript: true}})\n});\n"],"file":"jsx.js"}