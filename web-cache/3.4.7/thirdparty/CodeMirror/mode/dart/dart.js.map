{"version":3,"sources":["thirdparty/CodeMirror/mode/dart/dart.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","keywords","split","blockKeywords","atoms","builtins","set","words","obj","i","length","pushInterpolationStack","state","interpolationStack","push","tokenize","popInterpolationStack","pop","sizeInterpolationStack","tokenString","quote","stream","raw","tripleQuoted","eat","tokenStringHelper","escaped","eol","peek","tokenInterpolation","next","match","tokenInterpolationIdentifier","eatWhile","tokenNestedComment","depth","ch","defineMIME","name","builtin","hooks","@","'","\"","r","}","_stream","/","token","_","style","isUpper","RegExp","test","current","registerHelper","concat","defineMode","conf","getMode"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../clike/clike\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../clike/clike\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var keywords = (\"this super static final const abstract class extends external factory \" +\n    \"implements mixin get native set typedef with enum throw rethrow \" +\n    \"assert break case continue default in return new deferred async await covariant \" +\n    \"try catch finally do else for if switch while import library export \" +\n    \"part of show hide is as extension on yield late required\").split(\" \");\n  var blockKeywords = \"try catch finally do else for if switch while\".split(\" \");\n  var atoms = \"true false null\".split(\" \");\n  var builtins = \"void bool num int double dynamic var String Null Never\".split(\" \");\n\n  function set(words) {\n    var obj = {};\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  function pushInterpolationStack(state) {\n    (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);\n  }\n\n  function popInterpolationStack(state) {\n    return (state.interpolationStack || (state.interpolationStack = [])).pop();\n  }\n\n  function sizeInterpolationStack(state) {\n    return state.interpolationStack ? state.interpolationStack.length : 0;\n  }\n\n  CodeMirror.defineMIME(\"application/dart\", {\n    name: \"clike\",\n    keywords: set(keywords),\n    blockKeywords: set(blockKeywords),\n    builtin: set(builtins),\n    atoms: set(atoms),\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\.]/);\n        return \"meta\";\n      },\n\n      // custom string handling to deal with triple-quoted strings and string interpolation\n      \"'\": function(stream, state) {\n        return tokenString(\"'\", stream, state, false);\n      },\n      \"\\\"\": function(stream, state) {\n        return tokenString(\"\\\"\", stream, state, false);\n      },\n      \"r\": function(stream, state) {\n        var peek = stream.peek();\n        if (peek == \"'\" || peek == \"\\\"\") {\n          return tokenString(stream.next(), stream, state, true);\n        }\n        return false;\n      },\n\n      \"}\": function(_stream, state) {\n        // \"}\" is end of interpolation, if interpolation stack is non-empty\n        if (sizeInterpolationStack(state) > 0) {\n          state.tokenize = popInterpolationStack(state);\n          return null;\n        }\n        return false;\n      },\n\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false\n        state.tokenize = tokenNestedComment(1)\n        return state.tokenize(stream, state)\n      },\n      token: function(stream, _, style) {\n        if (style == \"variable\") {\n          // Assume uppercase symbols are classes using variable-2\n          var isUpper = RegExp('^[_$]*[A-Z][a-zA-Z0-9_$]*$','g');\n          if (isUpper.test(stream.current())) {\n            return 'variable-2';\n          }\n        }\n      }\n    }\n  });\n\n  function tokenString(quote, stream, state, raw) {\n    var tripleQuoted = false;\n    if (stream.eat(quote)) {\n      if (stream.eat(quote)) tripleQuoted = true;\n      else return \"string\"; //empty string\n    }\n    function tokenStringHelper(stream, state) {\n      var escaped = false;\n      while (!stream.eol()) {\n        if (!raw && !escaped && stream.peek() == \"$\") {\n          pushInterpolationStack(state);\n          state.tokenize = tokenInterpolation;\n          return \"string\";\n        }\n        var next = stream.next();\n        if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {\n          state.tokenize = null;\n          break;\n        }\n        escaped = !raw && !escaped && next == \"\\\\\";\n      }\n      return \"string\";\n    }\n    state.tokenize = tokenStringHelper;\n    return tokenStringHelper(stream, state);\n  }\n\n  function tokenInterpolation(stream, state) {\n    stream.eat(\"$\");\n    if (stream.eat(\"{\")) {\n      // let clike handle the content of ${...},\n      // we take over again when \"}\" appears (see hooks).\n      state.tokenize = null;\n    } else {\n      state.tokenize = tokenInterpolationIdentifier;\n    }\n    return null;\n  }\n\n  function tokenInterpolationIdentifier(stream, state) {\n    stream.eatWhile(/[\\w_]/);\n    state.tokenize = popInterpolationStack(state);\n    return \"variable\";\n  }\n\n  function tokenNestedComment(depth) {\n    return function (stream, state) {\n      var ch\n      while (ch = stream.next()) {\n        if (ch == \"*\" && stream.eat(\"/\")) {\n          if (depth == 1) {\n            state.tokenize = null\n            break\n          } else {\n            state.tokenize = tokenNestedComment(depth - 1)\n            return state.tokenize(stream, state)\n          }\n        } else if (ch == \"/\" && stream.eat(\"*\")) {\n          state.tokenize = tokenNestedComment(depth + 1)\n          return state.tokenize(stream, state)\n        }\n      }\n      return \"comment\"\n    }\n  }\n\n  CodeMirror.registerHelper(\"hintWords\", \"application/dart\", keywords.concat(atoms).concat(builtins));\n\n  // This is needed to make loading through meta.js work.\n  CodeMirror.defineMode(\"dart\", function(conf) {\n    return CodeMirror.getMode(conf, \"application/dart\");\n  }, \"clike\");\n});\n"],"file":"dart.js"}