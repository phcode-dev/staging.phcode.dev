{"version":3,"sources":["thirdparty/CodeMirror/mode/pegjs/pegjs.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","jsMode","getMode","identifier","stream","match","startState","inString","stringType","inComment","inCharacterClass","braced","lhs","localState","token","state","peek","next","eol","skipToEnd","text","current","i","length","indexOf","eatSpace"],"mappings":"CAGA,SAAUA,KACc,iBAAXC,SAAwC,iBAAVC,OACvCF,IAAIG,QAAQ,wBAAyBA,QAAQ,6BACrB,mBAAVC,QAAwBA,OAAOC,IAC7CD,OAAO,CAAC,uBAAwB,4BAA6BJ,KAE7DA,IAAIM,YANR,CAOG,SAASA,YACZ,aAEAA,WAAWC,WAAW,QAAS,SAAUC,QACvC,IAAIC,OAASH,WAAWI,QAAQF,OAAQ,cAExC,SAASG,WAAWC,QAClB,OAAOA,OAAOC,MAAM,2BAGtB,MAAO,CACLC,WAAY,WACV,MAAO,CACLC,UAAU,EACVC,WAAY,KACZC,WAAW,EACXC,kBAAkB,EAClBC,OAAQ,EACRC,KAAK,EACLC,WAAY,OAGhBC,MAAO,SAAUV,OAAQW,OAcvB,GAbIX,SAGCW,MAAMR,UAAaQ,MAAMN,WAAgC,KAAjBL,OAAOY,QAAoC,KAAjBZ,OAAOY,SAC5ED,MAAMP,WAAaJ,OAAOY,OAC1BZ,OAAOa,OACPF,MAAMR,UAAW,IAEdQ,MAAMR,UAAaQ,MAAMN,YAAaL,OAAOC,MAAM,QACtDU,MAAMN,WAAY,GAIhBM,MAAMR,SAAU,CAClB,KAAOQ,MAAMR,WAAaH,OAAOc,OAC3Bd,OAAOY,SAAWD,MAAMP,YAC1BJ,OAAOa,OACPF,MAAMR,UAAW,GACU,OAAlBH,OAAOY,QAChBZ,OAAOa,OACPb,OAAOa,QAEPb,OAAOC,MAAM,gBAGjB,OAAOU,MAAMH,IAAM,kBAAoB,SAClC,GAAIG,MAAMN,UAAW,CAC1B,KAAOM,MAAMN,YAAcL,OAAOc,OAC5Bd,OAAOC,MAAM,MACfU,MAAMN,WAAY,EAElBL,OAAOC,MAAM,YAGjB,MAAO,UACF,GAAIU,MAAML,iBACb,KAAOK,MAAML,mBAAqBN,OAAOc,OACjCd,OAAOC,MAAM,cAAgBD,OAAOC,MAAM,UAC9CU,MAAML,kBAAmB,OAG1B,CAAA,GAAsB,MAAlBN,OAAOY,OAGhB,OAFAZ,OAAOa,OACPF,MAAML,kBAAmB,EAClB,UACF,GAAIN,OAAOC,MAAM,MAEtB,OADAD,OAAOe,YACA,UACF,GAAIJ,MAAMJ,QAA4B,MAAlBP,OAAOY,OAAgB,CACvB,OAArBD,MAAMF,aACRE,MAAMF,WAAaf,WAAWQ,WAAWL,SAE3C,IAAIa,MAAQb,OAAOa,MAAMV,OAAQW,MAAMF,YACnCO,KAAOhB,OAAOiB,UAClB,IAAKP,MACH,IAAK,IAAIQ,EAAI,EAAGA,EAAIF,KAAKG,OAAQD,IACf,MAAZF,KAAKE,GACPP,MAAMJ,SACe,MAAZS,KAAKE,IACdP,MAAMJ,SAIZ,OAAOG,MACF,GAAIX,WAAWC,QACpB,MAAsB,MAAlBA,OAAOY,OACF,WAEF,aACF,IAAoD,GAAhD,CAAC,IAAK,IAAK,IAAK,KAAKQ,QAAQpB,OAAOY,QAE7C,OADAZ,OAAOa,OACA,UACGb,OAAOqB,YACjBrB,OAAOa,OAET,OAAO,QAGV","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../javascript/javascript\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../javascript/javascript\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pegjs\", function (config) {\n  var jsMode = CodeMirror.getMode(config, \"javascript\");\n\n  function identifier(stream) {\n    return stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/);\n  }\n\n  return {\n    startState: function () {\n      return {\n        inString: false,\n        stringType: null,\n        inComment: false,\n        inCharacterClass: false,\n        braced: 0,\n        lhs: true,\n        localState: null\n      };\n    },\n    token: function (stream, state) {\n      if (stream)\n\n      //check for state changes\n      if (!state.inString && !state.inComment && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.inString = true; // Update state\n      }\n      if (!state.inString && !state.inComment && stream.match('/*')) {\n        state.inComment = true;\n      }\n\n      //return state\n      if (state.inString) {\n        while (state.inString && !stream.eol()) {\n          if (stream.peek() === state.stringType) {\n            stream.next(); // Skip quote\n            state.inString = false; // Clear flag\n          } else if (stream.peek() === '\\\\') {\n            stream.next();\n            stream.next();\n          } else {\n            stream.match(/^.[^\\\\\\\"\\']*/);\n          }\n        }\n        return state.lhs ? \"property string\" : \"string\"; // Token style\n      } else if (state.inComment) {\n        while (state.inComment && !stream.eol()) {\n          if (stream.match('*/')) {\n            state.inComment = false; // Clear flag\n          } else {\n            stream.match(/^.[^\\*]*/);\n          }\n        }\n        return \"comment\";\n      } else if (state.inCharacterClass) {\n          while (state.inCharacterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match(/^\\\\./))) {\n              state.inCharacterClass = false;\n            }\n          }\n      } else if (stream.peek() === '[') {\n        stream.next();\n        state.inCharacterClass = true;\n        return 'bracket';\n      } else if (stream.match('//')) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (state.braced || stream.peek() === '{') {\n        if (state.localState === null) {\n          state.localState = CodeMirror.startState(jsMode);\n        }\n        var token = jsMode.token(stream, state.localState);\n        var text = stream.current();\n        if (!token) {\n          for (var i = 0; i < text.length; i++) {\n            if (text[i] === '{') {\n              state.braced++;\n            } else if (text[i] === '}') {\n              state.braced--;\n            }\n          };\n        }\n        return token;\n      } else if (identifier(stream)) {\n        if (stream.peek() === ':') {\n          return 'variable';\n        }\n        return 'variable-2';\n      } else if (['[', ']', '(', ')'].indexOf(stream.peek()) != -1) {\n        stream.next();\n        return 'bracket';\n      } else if (!stream.eatSpace()) {\n        stream.next();\n      }\n      return null;\n    }\n  };\n}, \"javascript\");\n\n});\n"],"file":"pegjs.js"}