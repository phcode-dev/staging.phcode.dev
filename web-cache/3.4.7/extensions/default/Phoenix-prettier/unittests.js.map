{"version":3,"sources":["extensions/default/Phoenix-prettier/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","Editor","FileUtils","BeautificationManager","PLATFORM_LINE_ENDINGS","getPlatformLineEndings","jsFile","jsPrettyFile","jsPrettySelection","jsPrettySelectionOffset","jsPrettySingleSpace","jsPrettyTabs","htmlFile","htmlPrettyFile","htmlPrettySelection","htmlPrettySelectionOffset","htmlPrettySingleSpace","htmlPrettyTabs","cssFile","cssPrettyFile","cssPrettySelection","mdFile","mdPrettyFile","lessFile","lessPrettyFile","jsonFile","jsonPrettyFile","describe","testEditor","testDocument","createMockEditor","text","language","filename","mock","undefined","editor","doc","afterEach","async","destroyMockEditor","setUseTabChar","setSpaceUnits","it","beautifyEditor","expect","document","getText","toBe","setTabSize","setSelection","line","ch","toBeFalsy","e"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeEach, afterEach, awaitsForDone*/\n\ndefine(function (require, exports, module) {\n\n\n    let SpecRunnerUtils = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        Editor = brackets.getModule(\"editor/Editor\").Editor,\n        FileUtils = brackets.getModule('file/FileUtils'),\n        BeautificationManager = brackets.getModule(\"features/BeautificationManager\");\n\n    const PLATFORM_LINE_ENDINGS = (FileUtils.getPlatformLineEndings() === 'CRLF' ? \"\\r\\n\" : \"\\n\");\n\n    require(\"./main\");\n\n    const jsFile = require(\"text!../../../../test/spec/prettier-test-files/js/test.js\"),\n        jsPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty.js\"),\n        jsPrettySelection = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty-selection.js\"),\n        jsPrettySelectionOffset = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty-selection-offset.js\"),\n        jsPrettySingleSpace = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty-single-space.js\"),\n        jsPrettyTabs = require(\"text!../../../../test/spec/prettier-test-files/js/test-pretty-tabs.txt\");\n\n    const htmlFile = require(\"text!../../../../test/spec/prettier-test-files/html/test.html\"),\n        htmlPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/html/test-pretty.html\"),\n        htmlPrettySelection = require(\"text!../../../../test/spec/prettier-test-files/html/test-pretty-selection.html\"),\n        htmlPrettySelectionOffset = require(\"text!../../../../test/spec/prettier-test-files/html/test-pretty-selection-offset.html\"),\n        htmlPrettySingleSpace = require(\"text!../../../../test/spec/prettier-test-files/html/test-pretty-single-space.html\"),\n        htmlPrettyTabs = require(\"text!../../../../test/spec/prettier-test-files/html/test-pretty-tabs.txt\");\n\n    const cssFile = require(\"text!../../../../test/spec/prettier-test-files/css/test.css\"),\n        cssPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/css/test-pretty.css\"),\n        cssPrettySelection = require(\"text!../../../../test/spec/prettier-test-files/css/test-pretty-selection.css\");\n\n    const mdFile = require(\"text!../../../../test/spec/prettier-test-files/test.md\"),\n        mdPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/test-pretty.md\"),\n        lessFile = require(\"text!../../../../test/spec/prettier-test-files/test.less\"),\n        lessPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/test-pretty.less\"),\n        jsonFile = require(\"text!../../../../test/spec/prettier-test-files/test.json\"),\n        jsonPrettyFile = require(\"text!../../../../test/spec/prettier-test-files/test-pretty.json\");\n\n    describe(\"integration: Phoenix Prettier\", function () {\n        let testEditor, testDocument;\n\n        function createMockEditor(text, language, filename) {\n            let mock = SpecRunnerUtils.createMockEditor(text, language, undefined,\n                {filename: filename});\n            testEditor = mock.editor;\n            testDocument = mock.doc;\n        }\n\n        describe(\"JS Beautify\", function (){\n            afterEach(async function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(4);\n            });\n\n            it(\"should beautify editor for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettyFile);\n            });\n\n            it(\"should beautify editor respect space options for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(1);\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettySingleSpace);\n            });\n\n            it(\"should beautify editor respect tab options for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                Editor.setUseTabChar(true);\n                Editor.setTabSize(4);\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettyTabs);\n            });\n\n            it(\"should beautify editor selection for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 39});\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsPrettySelection);\n            });\n\n            it(\"should beautify editor selection with offset for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                testEditor.setSelection({line: 4, ch: 0}, {line: 6, ch: 0});\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)+ PLATFORM_LINE_ENDINGS).toBe(jsPrettySelectionOffset);\n            });\n\n            it(\"should not beautify editor on incomplete syntax selection for js\", async function () {\n                createMockEditor(jsFile, \"javascript\", \"/test.js\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 35});\n                try{\n                    await BeautificationManager.beautifyEditor(testEditor);\n                    expect(\"should have not beautified\").toBeFalsy();\n                } catch (e) {\n                    expect(testEditor.document.getText(true)).toBe(jsFile);\n                }\n            });\n        });\n\n        describe(\"HTML Beautify\", function (){\n            afterEach(async function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(4);\n            });\n\n            it(\"should beautify editor for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(htmlPrettyFile);\n            });\n\n            it(\"should beautify editor respect space options for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(1);\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(htmlPrettySingleSpace);\n            });\n\n            it(\"should beautify editor respect tab options for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                Editor.setUseTabChar(true);\n                Editor.setTabSize(4);\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(htmlPrettyTabs);\n            });\n\n            it(\"should beautify editor selection for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 39});\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(htmlPrettySelection);\n            });\n\n            it(\"should beautify editor selection with offset for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                testEditor.setSelection({line: 4, ch: 0}, {line: 6, ch: 0});\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)+ PLATFORM_LINE_ENDINGS).toBe(htmlPrettySelectionOffset);\n            });\n\n            it(\"should not beautify editor on incomplete syntax selection for html\", async function () {\n                createMockEditor(htmlFile, \"html\", \"/test.html\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 10});\n                try{\n                    await BeautificationManager.beautifyEditor(testEditor);\n                    expect(\"should have not beautified\").toBeFalsy();\n                } catch (e) {\n                    expect(testEditor.document.getText(true)).toBe(htmlFile);\n                }\n            });\n        });\n\n        describe(\"CSS Beautify\", function (){\n            afterEach(async function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(4);\n            });\n\n            it(\"should beautify editor for css\", async function () {\n                createMockEditor(cssFile, \"css\", \"/test.css\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(cssPrettyFile);\n            });\n\n            it(\"should beautify editor selection for css\", async function () {\n                createMockEditor(cssFile, \"css\", \"/test.css\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 39});\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(cssPrettySelection);\n            });\n\n            it(\"should not beautify editor on incomplete syntax selection for css\", async function () {\n                createMockEditor(cssFile, \"css\", \"/test.css\");\n                testEditor.setSelection({line: 0, ch: 0}, {line: 0, ch: 10});\n                try{\n                    await BeautificationManager.beautifyEditor(testEditor);\n                    expect(\"should have not beautified\").toBeFalsy();\n                } catch (e) {\n                    expect(testEditor.document.getText(true)).toBe(cssFile);\n                }\n            });\n        });\n\n        describe(\"MD, less, json Beautify\", function (){\n            afterEach(async function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                Editor.setUseTabChar(false);\n                Editor.setSpaceUnits(4);\n            });\n\n            it(\"should beautify editor for markdown\", async function () {\n                createMockEditor(mdFile, \"css\", \"/test.md\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(mdPrettyFile);\n            });\n\n            it(\"should beautify editor for less\", async function () {\n                createMockEditor(lessFile, \"less\", \"/test.less\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(lessPrettyFile);\n            });\n\n            it(\"should beautify editor for scss\", async function () {\n                createMockEditor(\"body{$font-stack: Helvetica, sans-serif;}\", \"scss\", \"/test.scss\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe(\"body {\\n\" +\n                    \"    $font-stack: Helvetica, sans-serif;\\n\" +\n                    \"}\\n\");\n            });\n\n            it(\"should beautify editor for json\", async function () {\n                createMockEditor(jsonFile, \"json\", \"/test.json\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText(true)).toBe(jsonPrettyFile);\n            });\n\n            it(\"should beautify editor for xml\", async function () {\n                createMockEditor(\"<a id='1'></a>\", \"xml\", \"/test.xml\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('<a id=\"1\"></a>\\n');\n            });\n\n            it(\"should beautify editor for svg\", async function () {\n                createMockEditor(\"<svg id='1'></svg>\", \"svg\", \"/test.svg\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('<svg id=\"1\"></svg>\\n');\n            });\n\n            it(\"should beautify editor for yaml\", async function () {\n                createMockEditor(\"x:\\n y\", \"typescript\", \"/test.yaml\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('x: y\\n');\n            });\n\n            it(\"should beautify editor for jsx\", async function () {\n                createMockEditor(\"const element = <h1>\\nHello, {name}</h1>;\", \"jsx\", \"/test.jsx\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('const element = <h1>Hello, {name}</h1>;\\n');\n            });\n\n            it(\"should beautify editor for typescript\", async function () {\n                createMockEditor(\"function x(){x;}\", \"typescript\", \"/test.ts\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe('function x() {\\n' +\n                    '    x;\\n' +\n                    '}\\n');\n            });\n\n            it(\"should beautify editor for php\", async function () {\n                createMockEditor(\"<?php\\n\" +\n                    \"echo \\\"Hello World!\\\";\\n\" +\n                    \"?> \", \"php\", \"/test.php\");\n                await BeautificationManager.beautifyEditor(testEditor);\n                expect(testEditor.document.getText()).toBe(\"<?php\\n\" +\n                    \"echo \\\"Hello World!\\\"; ?>  ?>\");\n            });\n        });\n    });\n});\n"],"file":"unittests.js"}