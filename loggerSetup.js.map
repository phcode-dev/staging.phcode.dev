{"version":3,"sources":["loggerSetup.js"],"names":["isLocalHost","window","location","hostname","urlParams","URLSearchParams","search","isBugsnagEnabled","testEnvironment","CustomBugSnagError","Error","[object Object]","message","err","super","this","name","constructor","stack","logger","error","console","warn","reportError","Bugsnag","notify","leaveTrail","log","leaveBreadcrumb","loggingOptions","LOCAL_STORAGE_KEYS","LOG_TO_CONSOLE_KEY","LOG_LIVE_PREVIEW","healthDataDisabled","logLivePreview","livePreview","args","swallowLogs","savedLoggingFn","savedInfoFn","info","_shouldDiscardError","errors","fsServerUrl","Phoenix","VFS","fileURL","extensionName","userFsURLFound","userExtensionsURL","slice","getUserExtensionDir","stacktrace","file","startsWith","replace","split","Metrics","countEvent","EVENT_TYPE","ERROR","type","errorClass","onError","event","reportedStatus","shouldReport","e","addMetadata","setupLogging","logToConsoleOverride","get","logToConsolePref","localStorage","getItem","toLowerCase","debugMode","isLoggingEnabled","key","loggingEnabled","toggleLoggingKey","setItem","context","browser","isTablet","isMobile","isTauri","device","mobile","isAndroid","isIos","isWindows","isDeskTop","desktop","isOperaChromium","isEdgeChromium","isChrome","isChromeBased","isFirefox","isOpera","platform","isSupportedBrowser","supportContextName","start","apiKey","appType","collectUserIp","appVersion","AppConfig","version","enabledReleaseStages","releaseStage","__TAURI__","config","bugsnagEnv","enabledBreadcrumbTypes","maxEvents","maxBreadcrumbs","cacheClearError"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals Bugsnag, AppConfig, Phoenix*/\n// window.AppConfig comes from appConfig.js built by gulp scripts at build time\n\n(function(){\n    const isLocalHost = (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1');\n    const urlParams = new URLSearchParams(window.location.search || \"\");\n    const isBugsnagEnabled = (!window.testEnvironment && !isLocalHost);\n\n    class CustomBugSnagError extends Error {\n        constructor(message, err){\n            super(message + (err.message || \"\"));\n            this.name = (err.constructor && err.constructor.name) || this.constructor.name;\n            this.stack= message +\" : \"+ err.stack;\n        }\n    }\n\n    const logger = {\n        error: console.error,\n        warn: console.warn,\n        /**\n         * By default all uncaught exceptions and promise rejections are sent to logger utility. But in some cases\n         * you may want to sent handled errors too if it is critical. use this function to report those\n         * @param {Error} error\n         * @param {string} [message] optional message\n         */\n        reportError: function (error, message) {\n            if(isBugsnagEnabled) {\n                Bugsnag.notify(message?\n                    new CustomBugSnagError(message, error)\n                    :error);\n            }\n        },\n\n        /**\n         * This will help to provide additional context to error reporting. The trail will serve as a series of\n         * events that happened before an error and will help to backtrack the error.\n         * @param {string} message\n         */\n        leaveTrail: function (message) {\n            console.log(\"[Trail] : \", message);\n            if(isBugsnagEnabled) {\n                Bugsnag.leaveBreadcrumb(message);\n            }\n        },\n\n        loggingOptions: {\n            LOCAL_STORAGE_KEYS: {\n                // change these keys in devEnable.html too\n                LOG_TO_CONSOLE_KEY: \"logToConsole\",\n                LOG_LIVE_PREVIEW: \"logLivePreview\"\n            },\n            healthDataDisabled: false,\n            logLivePreview: false // logLivePreview will be setup below\n        },\n        livePreview: {\n            log: function (...args) {\n                if(logger.loggingOptions.logLivePreview){\n                    logger.log(...args);\n                }\n            }\n        }\n        // other API setup below\n    };\n    window.logger = logger;\n\n    // logger setup\n    function swallowLogs() {\n        // Do nothing\n    }\n    const savedLoggingFn = console.log;\n    const savedInfoFn = console.info;\n\n    /**\n     * interceptors for console.log and info\n     * @returns {boolean}\n     */\n    window.setupLogging = function () {\n        const logToConsoleOverride = urlParams.get(logger.loggingOptions.LOCAL_STORAGE_KEYS.LOG_TO_CONSOLE_KEY);\n        const logToConsolePref = localStorage.getItem(logger.loggingOptions.LOCAL_STORAGE_KEYS.LOG_TO_CONSOLE_KEY);\n        if((logToConsoleOverride && logToConsoleOverride.toLowerCase() === 'true')\n            || (logToConsolePref && logToConsolePref.toLowerCase() === 'true' && !logToConsoleOverride)){\n            console.log= savedLoggingFn;\n            console.info= savedInfoFn;\n            logger.log = console.log;\n            logger.info = console.info;\n            logger.logToConsolePref = 'true';\n            window.debugMode = true;\n            return true;\n        } else {\n            console.info = console.log = swallowLogs;\n            logger.info = logger.log = swallowLogs;\n            logger.logToConsolePref = 'false';\n            window.debugMode = false;\n            return false;\n        }\n    };\n    window.setupLogging();\n\n    window.isLoggingEnabled = function (key) {\n        let loggingEnabled = localStorage.getItem(key) || \"false\";\n        return loggingEnabled.toLowerCase() === 'true';\n    };\n\n    window.toggleLoggingKey = function(key) {\n        if(window.isLoggingEnabled(key)){\n            localStorage.setItem(key, 'false');\n        } else {\n            localStorage.setItem(key, 'true');\n        }\n    };\n\n\n    logger.loggingOptions.logLivePreview = window.isLoggingEnabled(\n        logger.loggingOptions.LOCAL_STORAGE_KEYS.LOG_LIVE_PREVIEW);\n\n    function _shouldDiscardError(errors = []) {\n        if(!window.fsServerUrl || !window.Phoenix || !window.Phoenix.VFS){\n            return false;\n        }\n        let fileURL, extensionName, userFsURLFound = false,\n            userExtensionsURL = window.fsServerUrl.slice(0, -1) + window.Phoenix.VFS.getUserExtensionDir() + \"/\";\n\n        // errors with stacks originating from any folder or files from the user file system are not logged for privacy\n        for(let error of errors){\n            if(error.stacktrace && error.stacktrace[0]) {\n                for(let stack of error.stacktrace){\n                    fileURL = stack.file || \"\";\n                    if(fileURL.startsWith(userExtensionsURL)) {\n                        // an extension installed from extension store has error. we dont log, but raise metric\n                        extensionName = fileURL.replace(userExtensionsURL, \"\");\n                        extensionName = extensionName.split(\"/\")[0];\n                        window.Metrics.countEvent(window.Metrics.EVENT_TYPE.ERROR, `extn-${extensionName}`,\n                            error.type);\n                        window.Metrics.countEvent(window.Metrics.EVENT_TYPE.ERROR, `extn-${extensionName}`,\n                            error.errorClass);\n                        logger.leaveTrail(`Extension Error for ${extensionName} of type ${error.type} class ${error.errorClass}`);\n                        return true;\n                    }\n                    if(fileURL.startsWith(window.fsServerUrl)) {\n                        userFsURLFound = true;\n                    }\n                }\n            }\n        }\n        if(userFsURLFound) {\n            return true;\n        }\n        return false;\n    }\n\n    function onError(event) {\n        // for more info https://docs.bugsnag.com/platforms/javascript/customizing-error-reports\n        try{\n            let reportedStatus =  \"Reported\";\n            let shouldReport = true;\n            if(logger.loggingOptions.healthDataDisabled){\n                reportedStatus = \"Not Reported as health data disabled.\";\n                shouldReport = false;\n            } else if(_shouldDiscardError(event.errors)){\n                reportedStatus = \"Not Reported error from user extension or fs.\";\n                shouldReport = false;\n            }\n\n            // change health logger popup string before changing the below to anything other than \"Caught Critical error\"\n            console.error(`Caught Critical error, ${reportedStatus}: `, event);\n            if(window.Metrics) {\n                window.Metrics.countEvent(window.Metrics.EVENT_TYPE.ERROR, \"uncaught\", \"logger\");\n            }\n\n            return shouldReport;\n        } catch (e) {\n            console.error(\"exception occurred while reposting error: \", e);\n            event.addMetadata('onError', 'exception', e.message);\n        }\n    }\n\n    let context = 'desktop';\n    if(Phoenix.browser.isTablet) {\n        context = 'tablet';\n    } else if(Phoenix.browser.isMobile) {\n        context = 'mobile';\n    }\n    if(Phoenix.browser.isTauri) {\n        context = `tauri-${context}`;\n    }\n    if(Phoenix.browser.isMobile || Phoenix.browser.isTablet) {\n        let device = 'unknownDevice';\n        if(Phoenix.browser.mobile.isAndroid){\n            device = 'android';\n        } else if(Phoenix.browser.mobile.isIos){\n            device = 'ios';\n        } else if(Phoenix.browser.mobile.isWindows){\n            device = 'windows';\n        }\n        context = `${context}-${device}`;\n    }\n    if(Phoenix.browser.isDeskTop) {\n        let browser = 'unknownBrowser';\n        if(Phoenix.browser.desktop.isOperaChromium){\n            browser = 'operaChrome';\n        } else if(Phoenix.browser.desktop.isEdgeChromium){\n            browser = 'edgeChrome';\n        } else if(Phoenix.browser.desktop.isChrome){\n            browser = 'googleChrome';\n        } else if(Phoenix.browser.desktop.isChromeBased){\n            browser = 'chromeLike';\n        } else if(Phoenix.browser.desktop.isFirefox){\n            browser = 'firefox';\n        } else if(Phoenix.browser.desktop.isOpera){\n            browser = 'operaLegacy';\n        }\n        context = `${context}-${Phoenix.platform}-${browser}`;\n    }\n    context = Phoenix.isSupportedBrowser ? `supported-${context}` : `unsupported-${context}`;\n    Phoenix.supportContextName = context;\n    console.log(\"BugSnag context is - \", context);\n\n    if(isBugsnagEnabled) {\n        Bugsnag.start({\n            apiKey: 'a899c29d251bfdf30c3222016a2a7ea7',\n            context: context,\n            appType: Phoenix.browser && Phoenix.browser.isTauri ? \"tauri\" : \"browser\",\n            collectUserIp: false,\n            appVersion: AppConfig.version,\n            enabledReleaseStages: [ 'development', 'production', 'staging',\n                'tauri-development', 'tauri-production', 'tauri-staging'],\n            releaseStage: window.__TAURI__ ? \"tauri-\" + AppConfig.config.bugsnagEnv : AppConfig.config.bugsnagEnv,\n            // https://docs.bugsnag.com/platforms/javascript/#logging-breadcrumbs\n            // breadcrumbs is disabled as it seems a bit intrusive in Pheonix even-though it might help with debugging.\n            // only manual explicit privacy ready breadcrumbs are allowed\n            enabledBreadcrumbTypes: ['manual'],\n            // https://docs.bugsnag.com/platforms/javascript/configuration-options/#maxevents\n            maxEvents: 10,\n            maxBreadcrumbs: 50,\n            onError\n        });\n        if(window.cacheClearError){\n            logger.reportError(window.cacheClearError);\n        }\n    } else {\n        console.warn(\"Logging to Bugsnag is disabled as current environment is localhost.\");\n    }\n}());"],"file":"loggerSetup.js"}