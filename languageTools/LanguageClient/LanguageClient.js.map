{"version":3,"sources":["languageTools/LanguageClient/LanguageClient.js"],"names":["ProtocolAdapter","require","ServerUtils","Connection","NodeToBracketsInterface","ToolingInfo","LanguageClientInfo","toolingInfo","MESSAGE_TYPE","BRACKETS","SERVER","validateHandler","handler","retval","console","warn","LanguageClient","clientName","domainManager","options","this","_clientName","_bracketsInterface","_notifyBrackets","_requestBrackets","_connection","_startUpParams","_initialized","_onRequestHandler","_onNotificationHandlers","_options","_init","prototype","_createConnection","serverOptions","Promise","reject","restartLanguageClient","start","bind","stopLanguageClient","stop","startServerAndGetConnectionArgs","then","connectionArgs","createConnection","reader","writer","catch","err","error","setOptions","params","self","resolve","capabilities","defaultBracketsCapabilities","connection","listen","initialize","result","attachOnNotificationHandlers","attachOnRequestHandlers","initialized","shutdown","exit","dispose","request","messageParams","messageType","type","log","requestHandler","call","processRequest","notify","notificationHandlers","Array","isArray","length","forEach","processNotification","addOnRequestHandler","addOnNotificationHandler","push","registerMethods","methodName","LANGUAGE_SERVICE","START","methodHandle","STOP","REQUEST","NOTIFY","createInterface","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 - present Adobe. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global exports, Promise, LanguageClientInfo */\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/*eslint max-len: [\"error\", { \"code\": 200 }]*/\n\n\nvar ProtocolAdapter = require(\"./ProtocolAdapter\"),\n    ServerUtils = require(\"./ServerUtils\"),\n    Connection = require(\"./Connection\"),\n    NodeToBracketsInterface = require(\"./NodeToBracketsInterface\").NodeToBracketsInterface,\n    ToolingInfo = LanguageClientInfo.toolingInfo,\n    MESSAGE_TYPE = {\n        BRACKETS: \"brackets\",\n        SERVER: \"server\"\n    };\n\nfunction validateHandler(handler) {\n    var retval = false;\n\n    if (handler && typeof handler === \"function\") {\n        retval = true;\n    } else {\n        console.warn(\"Handler validation failed. Handler should be of type 'function'. Provided handler is of type :\", typeof handler);\n    }\n\n    return retval;\n}\n\nfunction LanguageClient(clientName, domainManager, options) {\n    this._clientName = clientName;\n    this._bracketsInterface = null;\n    this._notifyBrackets = null;\n    this._requestBrackets = null;\n    this._connection = null,\n    this._startUpParams = null, //_projectRoot, capabilties, workspaceFolders etc.\n    this._initialized = false,\n    this._onRequestHandler = {};\n    this._onNotificationHandlers = {};\n    this._options = options || null;\n\n\n    this._init(domainManager);\n}\n\n\nLanguageClient.prototype._createConnection = function () {\n    if (!this._options || !this._options.serverOptions) {\n        return Promise.reject(\"No valid options provided for client :\", this._clientName);\n    }\n\n    var restartLanguageClient = this.start.bind(this),\n        stopLanguageClient = this.stop.bind(this);\n\n    var serverOptions = this._options.serverOptions;\n    return ServerUtils.startServerAndGetConnectionArgs(serverOptions)\n        .then(function (connectionArgs) {\n            return Connection.createConnection(connectionArgs.reader, connectionArgs.writer, restartLanguageClient, stopLanguageClient);\n        }).catch(function (err) {\n            console.error(\"Couldn't establish connection\", err);\n        });\n};\n\nLanguageClient.prototype.setOptions = function (options) {\n    if (options && typeof options === \"object\") {\n        this._options = options;\n    } else {\n        console.error(\"Invalid options provided for client :\", this._clientName);\n    }\n};\n\nLanguageClient.prototype.start = function (params) {\n    var self = this;\n\n    //Check to see if a connection to a language server already exists.\n    if (self._connection) {\n        return Promise.resolve(true);\n    }\n\n    self._connection = null;\n    self._startUpParams = params || self._startUpParams;\n\n    //We default to standard capabilties\n    if (!self._startUpParams.capabilities) {\n        self._startUpParams.capabilities = LanguageClientInfo.defaultBracketsCapabilities;\n    }\n\n    return self._createConnection()\n        .then(function (connection) {\n            connection.listen();\n            self._connection = connection;\n\n            return ProtocolAdapter.initialize(connection, self._startUpParams);\n        }).then(function (result) {\n            self._initialized = result;\n            ProtocolAdapter.attachOnNotificationHandlers(self._connection, self._notifyBrackets);\n            ProtocolAdapter.attachOnRequestHandlers(self._connection, self._requestBrackets);\n            ProtocolAdapter.initialized(self._connection);\n            return result;\n        }).catch(function (error) {\n            console.error('Starting client failed because :', error);\n            console.error('Couldn\\'t start client :', self._clientName);\n\n            return error;\n        });\n};\n\nLanguageClient.prototype.stop = function () {\n    var self = this;\n\n    self._initialized = false;\n    if (!self._connection) {\n        return Promise.resolve(true);\n    }\n\n\n    return ProtocolAdapter.shutdown(self._connection).then(function () {\n        ProtocolAdapter.exit(self._connection);\n        self._connection.dispose();\n        self._connection = null;\n    });\n};\n\nLanguageClient.prototype.request = function (params) {\n    var messageParams = params.params;\n    if (messageParams && messageParams.messageType === MESSAGE_TYPE.BRACKETS) {\n        if (!messageParams.type) {\n            console.log(\"Invalid brackets request\");\n            return Promise.reject();\n        }\n\n        var requestHandler = this._onRequestHandler[messageParams.type];\n        if(validateHandler(requestHandler)) {\n            return requestHandler.call(null, messageParams.params);\n        }\n        console.log(\"No handler provided for brackets request type : \", messageParams.type);\n        return Promise.reject();\n    }\n    return ProtocolAdapter.processRequest(this._connection, params);\n\n};\n\nLanguageClient.prototype.notify = function (params) {\n    var messageParams = params.params;\n    if (messageParams && messageParams.messageType === MESSAGE_TYPE.BRACKETS) {\n        if (!messageParams.type) {\n            console.log(\"Invalid brackets notification\");\n            return;\n        }\n\n        var notificationHandlers = this._onNotificationHandlers[messageParams.type];\n        if(notificationHandlers && Array.isArray(notificationHandlers) && notificationHandlers.length) {\n            notificationHandlers.forEach(function (handler) {\n                if(validateHandler(handler)) {\n                    handler.call(null, messageParams.params);\n                }\n            });\n        } else {\n            console.log(\"No handlers provided for brackets notification type : \", messageParams.type);\n        }\n    } else {\n        ProtocolAdapter.processNotification(this._connection, params);\n    }\n};\n\nLanguageClient.prototype.addOnRequestHandler = function (type, handler) {\n    if (validateHandler(handler)) {\n        this._onRequestHandler[type] = handler;\n    }\n};\n\nLanguageClient.prototype.addOnNotificationHandler = function (type, handler) {\n    if (validateHandler(handler)) {\n        if (!this._onNotificationHandlers[type]) {\n            this._onNotificationHandlers[type] = [];\n        }\n\n        this._onNotificationHandlers[type].push(handler);\n    }\n};\n\nLanguageClient.prototype._init = function (domainManager) {\n    this._bracketsInterface = new NodeToBracketsInterface(domainManager, this._clientName);\n\n    //Expose own methods for interfaceing. All these are async except notify.\n    this._bracketsInterface.registerMethods([\n        {\n            methodName: ToolingInfo.LANGUAGE_SERVICE.START,\n            methodHandle: this.start.bind(this)\n        },\n        {\n            methodName: ToolingInfo.LANGUAGE_SERVICE.STOP,\n            methodHandle: this.stop.bind(this)\n        },\n        {\n            methodName: ToolingInfo.LANGUAGE_SERVICE.REQUEST,\n            methodHandle: this.request.bind(this)\n        },\n        {\n            methodName: ToolingInfo.LANGUAGE_SERVICE.NOTIFY,\n            methodHandle: this.notify.bind(this)\n        }\n    ]);\n\n    //create function interfaces for Brackets\n    this._notifyBrackets = this._bracketsInterface.createInterface(ToolingInfo.LANGUAGE_SERVICE.NOTIFY);\n    this._requestBrackets = this._bracketsInterface.createInterface(ToolingInfo.LANGUAGE_SERVICE.REQUEST, true);\n};\n\nexports.LanguageClient = LanguageClient;\n"],"file":"LanguageClient.js"}