{"version":3,"sources":["extensions/default/Phoenix-live-preview/main.js"],"names":["define","require","exports","module","ExtensionUtils","brackets","getModule","EditorManager","CommandManager","Commands","Menus","WorkspaceManager","AppInit","ProjectManager","MainViewManager","DocumentManager","Strings","Mustache","Metrics","FileViewController","NotificationUI","LiveDevelopment","marked","utils","LIVE_PREVIEW_PANEL_ID","setOptions","renderer","Renderer","pedantic","gfm","breaks","sanitize","smartLists","smartypants","xhtml","panelHTML","markdownHTMLTemplate","$icon","$iframe","$panel","$pinUrlBtn","$highlightBtn","$livePreviewPopBtn","$reloadBtn","loadStyleSheet","panel","urlPinned","tab","_setPanelVisibility","isVisible","toggleClass","show","_loadPreview","attr","hide","_startOrStopLivePreviewIfRequired","explicitClickOnLPIcon","visible","isInactive","openLivePreview","closeLivePreview","getConnectionIds","length","closed","_toggleVisibilityOnClick","_togglePinUrl","pinStatus","hasClass","removeClass","addClass","setLivePreviewPinned","countEvent","EVENT_TYPE","LIVE_PREVIEW","_updateLiveHighlightToggleStatus","isHighlightEnabled","get","FILE_LIVE_HIGHLIGHT","getChecked","_toggleLiveHighlights","execute","_popoutLivePreview","open","_setTitle","fileName","message","LIVE_DEV_SELECT_FILE_TO_PREVIEW","tooltip","LIVE_DEV_STATUS_TIP_OUT_OF_SYNC","document","getElementById","textContent","title","async","_createExtensionPanel","templateVars","livePreview","clickToReload","LIVE_DEV_CLICK_TO_RELOAD_PAGE","toggleLiveHighlight","LIVE_DEV_TOGGLE_LIVE_HIGHLIGHT","clickToPopout","LIVE_DEV_CLICK_POPOUT","clickToPinUnpin","LIVE_DEV_CLICK_TO_PIN_UNPIN","PANEL_MIN_SIZE","INITIAL_PANEL_SIZE","body","clientWidth","$","click","render","find","onload","createPluginPanel","recomputeLayout","_renderMarkdown","fullPath","getDocumentForPath","done","doc","text","getText","markdownHtml","markdownContent","parse","BOOTSTRAP_LIB_CSS","window","parent","Phoenix","baseURL","HIGHLIGHT_JS_CSS","HIGHLIGHT_JS","GFM_CSS","html","location","setTimeout","write","fail","err","console","error","_renderPreview","previewDetails","newSrc","isMarkdownFile","getExtension","savedScrollPositions","_saveScrollPositionsIfPossible","currentSrc","src","getNoPreviewURL","scrollX","contentWindow","scrollY","e","force","saved","getPreviewDetails","URL","encodeURI","filePath","scrollTo","savedPositions","_projectFileChanges","evt","changedFile","isFile","isActive","isHTMLFile","_showPopoutNotificationIfNeeded","livePreviewEnabledOnProjectSwitch","_projectOpened","openAndSelectDocument","PROJECT_MANAGER","_projectClosed","_activeDocChanged","path","notificationKey","popoutMessageShown","localStorage","getItem","isPanelVisible","endsWith","createFromTemplate","GUIDED_LIVE_PREVIEW_POPOUT","allowedPlacements","autoCloseTimeS","dismissOnClick","setItem","_openLivePreviewURL","_event","currentPreviewDetails","appReady","fileMenu","on","EVENT_PROJECT_FILE_CHANGED","EVENT_PROJECT_OPEN","EVENT_PROJECT_CLOSE","register","CMD_LIVE_FILE_PREVIEW","FILE_LIVE_FILE_PREVIEW","getMenu","AppMenuBar","FILE_MENU","addMenuItem","EVENT_OPEN_PREVIEW_URL","EVENT_CONNECTION_CLOSE","EVENT_LIVE_HIGHLIGHT_PREF_CHANGED"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global define, brackets */\n//jshint-ignore:no-start\n\ndefine(function (require, exports, module) {\n    const ExtensionUtils   = brackets.getModule(\"utils/ExtensionUtils\"),\n        EditorManager      = brackets.getModule(\"editor/EditorManager\"),\n        CommandManager     = brackets.getModule(\"command/CommandManager\"),\n        Commands           = brackets.getModule(\"command/Commands\"),\n        Menus              = brackets.getModule(\"command/Menus\"),\n        WorkspaceManager   = brackets.getModule(\"view/WorkspaceManager\"),\n        AppInit            = brackets.getModule(\"utils/AppInit\"),\n        ProjectManager     = brackets.getModule(\"project/ProjectManager\"),\n        MainViewManager    = brackets.getModule(\"view/MainViewManager\"),\n        DocumentManager    = brackets.getModule(\"document/DocumentManager\"),\n        Strings            = brackets.getModule(\"strings\"),\n        Mustache           = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        Metrics            = brackets.getModule(\"utils/Metrics\"),\n        FileViewController = brackets.getModule(\"project/FileViewController\"),\n        NotificationUI = brackets.getModule(\"widgets/NotificationUI\"),\n        LiveDevelopment = brackets.getModule(\"LiveDevelopment/main\"),\n        marked = require('thirdparty/marked.min'),\n        utils = require('utils');\n\n    const LIVE_PREVIEW_PANEL_ID = \"live-preview-panel\";\n\n    // TODO markdown advanced rendering options https://marked.js.org/using_advanced\n    marked.setOptions({\n        renderer: new marked.Renderer(),\n        // highlight: function(code, lang) {\n        //     const hljs = require('highlight.js');\n        //     const language = hljs.getLanguage(lang) ? lang : 'plaintext';\n        //     return hljs.highlight(code, { language }).value;\n        // },\n        // langPrefix: 'hljs language-', // highlight.js css expects a top-level 'hljs' class.\n        pedantic: false,\n        gfm: true,\n        breaks: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: false,\n        xhtml: false\n    });\n\n\n    // Templates\n    let panelHTML       = require(\"text!panel.html\"),\n        markdownHTMLTemplate = require(\"text!markdown.html\");\n    ExtensionUtils.loadStyleSheet(module, \"live-preview.css\");\n\n    // jQuery objects\n    let $icon,\n        $iframe,\n        $panel,\n        $pinUrlBtn,\n        $highlightBtn,\n        $livePreviewPopBtn,\n        $reloadBtn;\n\n    // Other vars\n    let panel,\n        urlPinned,\n        tab = null;\n\n    function _setPanelVisibility(isVisible) {\n        if (isVisible) {\n            $icon.toggleClass(\"active\");\n            panel.show();\n            _loadPreview(true);\n        } else {\n            $icon.toggleClass(\"active\");\n            $iframe.attr('src', 'about:blank');\n            panel.hide();\n        }\n    }\n\n    function _startOrStopLivePreviewIfRequired(explicitClickOnLPIcon) {\n        let visible = panel.isVisible();\n        if(visible && LiveDevelopment.isInactive()) {\n            LiveDevelopment.openLivePreview();\n        } else if(visible && explicitClickOnLPIcon) {\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n        } else if(!visible && LiveDevelopment.getConnectionIds().length === 0 && (!tab || tab.closed)) {\n            LiveDevelopment.closeLivePreview();\n        }\n    }\n    function _toggleVisibilityOnClick() {\n        let visible = !panel.isVisible();\n        _setPanelVisibility(visible);\n        _startOrStopLivePreviewIfRequired(true);\n    }\n\n    function _togglePinUrl() {\n        let pinStatus = $pinUrlBtn.hasClass('pin-icon');\n        if(pinStatus){\n            $pinUrlBtn.removeClass('pin-icon').addClass('unpin-icon');\n        } else {\n            $pinUrlBtn.removeClass('unpin-icon').addClass('pin-icon');\n        }\n        urlPinned = !pinStatus;\n        LiveDevelopment.setLivePreviewPinned(urlPinned);\n        _loadPreview();\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"pinURLBtn\", \"click\");\n    }\n\n    function _updateLiveHighlightToggleStatus() {\n        let isHighlightEnabled = CommandManager.get(Commands.FILE_LIVE_HIGHLIGHT).getChecked();\n        if(isHighlightEnabled){\n            $highlightBtn.removeClass('pointer-icon').addClass('pointer-fill-icon');\n        } else {\n            $highlightBtn.removeClass('pointer-fill-icon').addClass('pointer-icon');\n        }\n    }\n\n    function _toggleLiveHighlights() {\n        CommandManager.execute(Commands.FILE_LIVE_HIGHLIGHT);\n        Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"HighlightBtn\", \"click\");\n    }\n\n    function _popoutLivePreview() {\n        if(!tab || tab.closed){\n            tab = open();\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"popoutBtn\", \"click\");\n        }\n        _loadPreview(true);\n    }\n\n    function _setTitle(fileName) {\n        let message = Strings.LIVE_DEV_SELECT_FILE_TO_PREVIEW,\n            tooltip = message;\n        if(fileName){\n            message = `${fileName} - ${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC}`;\n            tooltip = `${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC} - ${fileName}`;\n        }\n        document.getElementById(\"panel-live-preview-title\").textContent = message;\n        document.getElementById(\"live-preview-plugin-toolbar\").title = tooltip;\n    }\n\n    async function _createExtensionPanel() {\n        let templateVars = {\n            Strings: Strings,\n            livePreview: Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC,\n            clickToReload: Strings.LIVE_DEV_CLICK_TO_RELOAD_PAGE,\n            toggleLiveHighlight: Strings.LIVE_DEV_TOGGLE_LIVE_HIGHLIGHT,\n            clickToPopout: Strings.LIVE_DEV_CLICK_POPOUT,\n            clickToPinUnpin: Strings.LIVE_DEV_CLICK_TO_PIN_UNPIN\n        };\n        const PANEL_MIN_SIZE = 50;\n        const INITIAL_PANEL_SIZE = document.body.clientWidth/2.5;\n        $icon = $(\"#toolbar-go-live\");\n        $icon.click(_toggleVisibilityOnClick);\n        $panel = $(Mustache.render(panelHTML, templateVars));\n        $iframe = $panel.find(\"#panel-live-preview-frame\");\n        $pinUrlBtn = $panel.find(\"#pinURLButton\");\n        $highlightBtn = $panel.find(\"#highlightLPButton\");\n        $reloadBtn = $panel.find(\"#reloadLivePreviewButton\");\n        $livePreviewPopBtn = $panel.find(\"#livePreviewPopoutButton\");\n        $iframe[0].onload = function () {\n            $iframe.attr('srcdoc', null);\n        };\n\n        panel = WorkspaceManager.createPluginPanel(LIVE_PREVIEW_PANEL_ID, $panel,\n            PANEL_MIN_SIZE, $icon, INITIAL_PANEL_SIZE);\n\n        WorkspaceManager.recomputeLayout(false);\n        _updateLiveHighlightToggleStatus();\n        $pinUrlBtn.click(_togglePinUrl);\n        $highlightBtn.click(_toggleLiveHighlights);\n        $livePreviewPopBtn.click(_popoutLivePreview);\n        $reloadBtn.click(()=>{\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n            _loadPreview(true);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"reloadBtn\", \"click\");\n        });\n    }\n\n    function _renderMarkdown(fullPath) {\n        DocumentManager.getDocumentForPath(fullPath)\n            .done(function (doc) {\n                let text = doc.getText();\n                let markdownHtml = marked.parse(text);\n                let templateVars = {\n                    markdownContent: markdownHtml,\n                    BOOTSTRAP_LIB_CSS: `${window.parent.Phoenix.baseURL}thirdparty/bootstrap/bootstrap.min.css`,\n                    HIGHLIGHT_JS_CSS: `${window.parent.Phoenix.baseURL}thirdparty/highlight.js/styles/github.min.css`,\n                    HIGHLIGHT_JS: `${window.parent.Phoenix.baseURL}thirdparty/highlight.js/highlight.min.js`,\n                    GFM_CSS: `${window.parent.Phoenix.baseURL}thirdparty/gfm.min.css`\n                };\n                let html = Mustache.render(markdownHTMLTemplate, templateVars);\n                $iframe.attr('srcdoc', html);\n                if(tab && !tab.closed){\n                    tab.location = \"about:blank\";\n                    setTimeout(()=>{\n                        tab.window.document.write(html);\n                    }, 10); // timer hack, location and content cannot be set in a row,\n                    // we should move to iframe embedded controls\n                }\n            })\n            .fail(function (err) {\n                console.error(`Markdown rendering failed for ${fullPath}: `, err);\n            });\n    }\n\n    function _renderPreview(previewDetails, newSrc) {\n        let fullPath = previewDetails.fullPath;\n        if(previewDetails.isMarkdownFile){\n            $iframe.attr('src', 'about:blank');\n            _renderMarkdown(fullPath);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\", \"markdown\");\n        } else {\n            $iframe.attr('srcdoc', null);\n            $iframe.attr('src', newSrc);\n            if(tab && !tab.closed){\n                tab.location = newSrc;\n            }\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\", utils.getExtension(fullPath));\n        }\n    }\n\n    let savedScrollPositions = {};\n\n    function _saveScrollPositionsIfPossible() {\n        let currentSrc = $iframe.src || utils.getNoPreviewURL();\n        try{\n            let scrollX = $iframe[0].contentWindow.scrollX;\n            let scrollY = $iframe[0].contentWindow.scrollY;\n            savedScrollPositions[currentSrc] = {\n                scrollX: scrollX,\n                scrollY: scrollY\n            };\n            return {scrollX, scrollY, currentSrc};\n        }catch (e) {\n            return {scrollX: 0, scrollY: 0 , currentSrc};\n        }\n    }\n\n    async function _loadPreview(force) {\n        if(panel.isVisible() || (tab && !tab.closed)){\n            let saved = _saveScrollPositionsIfPossible();\n            // panel-live-preview-title\n            let previewDetails = await utils.getPreviewDetails();\n            let newSrc = saved.currentSrc;\n            if (!urlPinned && previewDetails.URL) {\n                newSrc = encodeURI(previewDetails.URL);\n                _setTitle(previewDetails.filePath);\n            }\n            $iframe[0].onload = function () {\n                if(saved.currentSrc === newSrc){\n                    $iframe[0].contentWindow.scrollTo(saved.scrollX, saved.scrollY);\n                } else {\n                    let savedPositions = savedScrollPositions[newSrc];\n                    if(savedPositions){\n                        $iframe[0].contentWindow.scrollTo(savedPositions.scrollX, savedPositions.scrollY);\n                    }\n                }\n            };\n            if(saved.currentSrc !== newSrc || force === true){\n                $iframe.src = newSrc;\n                _renderPreview(previewDetails, newSrc);\n            }\n        }\n    }\n\n    async function _projectFileChanges(evt, changedFile) {\n        if(changedFile && changedFile.isFile && changedFile.fullPath && changedFile.fullPath !== '/fs/app/state.json'){\n            // we are getting this change event somehow.\n            // bug, investigate why we get this change event as a project file change.\n            const previewDetails = await utils.getPreviewDetails();\n            if(!(LiveDevelopment.isActive() && previewDetails.isHTMLFile)) {\n                // We force reload live preview on save for all non html preview-able file or\n                // if html file and live preview isnt active.\n                _loadPreview(true);\n            }\n            _showPopoutNotificationIfNeeded(changedFile.fullPath);\n        }\n    }\n\n    let livePreviewEnabledOnProjectSwitch = false;\n    async function _projectOpened() {\n        if(urlPinned){\n            _togglePinUrl();\n        }\n        $iframe[0].src = utils.getNoPreviewURL();\n        if(tab && !tab.closed){\n            tab.location = utils.getNoPreviewURL();\n        }\n        if(!panel.isVisible()){\n            return;\n        }\n        let previewDetails = await utils.getPreviewDetails();\n        if(previewDetails.fullPath){\n            FileViewController.openAndSelectDocument(previewDetails.fullPath, FileViewController.PROJECT_MANAGER)\n                .done(()=>{\n                    LiveDevelopment.closeLivePreview();\n                    LiveDevelopment.openLivePreview();\n                    _loadPreview(true);\n                });\n        }\n        _loadPreview(true);\n    }\n\n    function _projectClosed() {\n        LiveDevelopment.closeLivePreview();\n        livePreviewEnabledOnProjectSwitch = false;\n    }\n\n    function _activeDocChanged() {\n        if(!LiveDevelopment.isActive() && !livePreviewEnabledOnProjectSwitch\n            && (panel.isVisible() || (tab && !tab.closed))) {\n            // we do this only once after project switch if live preview for a doc is not active.\n            LiveDevelopment.closeLivePreview();\n            LiveDevelopment.openLivePreview();\n            livePreviewEnabledOnProjectSwitch = true;\n        }\n    }\n\n    function _showPopoutNotificationIfNeeded(path) {\n        let notificationKey = 'livePreviewPopoutShown';\n        let popoutMessageShown = localStorage.getItem(notificationKey);\n        if(!popoutMessageShown && WorkspaceManager.isPanelVisible(LIVE_PREVIEW_PANEL_ID)\n            && (path.endsWith('.html') || path.endsWith('.htm'))){\n            NotificationUI.createFromTemplate(Strings.GUIDED_LIVE_PREVIEW_POPOUT,\n                \"livePreviewPopoutButton\", {\n                    allowedPlacements: ['bottom'],\n                    autoCloseTimeS: 15,\n                    dismissOnClick: true}\n            );\n            localStorage.setItem(notificationKey, \"true\");\n        }\n    }\n\n    /**\n     * EVENT_OPEN_PREVIEW_URL triggers this once live preview infrastructure is instrumented and ready to accept live\n     * preview connections from browsers. So, if we have loaded an earlier live preview, that is most likely not\n     * instrumented code and just plain html for the previewed file. We force load the live preview again here to\n     * load the instrumented live preview code.\n     * @param _event\n     * @param previewDetails\n     * @return {Promise<void>}\n     * @private\n     */\n    async function _openLivePreviewURL(_event, previewDetails) {\n        _loadPreview(true);\n        const currentPreviewDetails = await utils.getPreviewDetails();\n        if(!currentPreviewDetails.isMarkdownFile && currentPreviewDetails.fullPath !== previewDetails.fullPath){\n            console.error(\"Live preview URLs differ between phoenix live preview extension and core live preview\",\n                currentPreviewDetails, previewDetails);\n        }\n    }\n\n    AppInit.appReady(function () {\n        _createExtensionPanel();\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED, _projectFileChanges);\n        MainViewManager.on(\"currentFileChange\", _loadPreview);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _projectOpened);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_CLOSE, _projectClosed);\n        EditorManager.on(\"activeEditorChange\", _activeDocChanged);\n        CommandManager.register(Strings.CMD_LIVE_FILE_PREVIEW,  Commands.FILE_LIVE_FILE_PREVIEW, function () {\n            _toggleVisibilityOnClick();\n        });\n        let fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        fileMenu.addMenuItem(Commands.FILE_LIVE_FILE_PREVIEW, \"\");\n        // We always show the live preview panel on startup if there is a preview file\n        setTimeout(async ()=>{\n            LiveDevelopment.openLivePreview();\n            let previewDetails = await utils.getPreviewDetails();\n            if(previewDetails.filePath){\n                // only show if there is some file to preview and not the default no-preview preview on startup\n                _setPanelVisibility(true);\n            }\n        }, 1000);\n        LiveDevelopment.on(LiveDevelopment.EVENT_OPEN_PREVIEW_URL, _openLivePreviewURL);\n        LiveDevelopment.on(LiveDevelopment.EVENT_CONNECTION_CLOSE, function () {\n            // the connection close pool will take some time to settle\n            setTimeout(_startOrStopLivePreviewIfRequired, 15000);\n        });\n        LiveDevelopment.on(LiveDevelopment.EVENT_LIVE_HIGHLIGHT_PREF_CHANGED, _updateLiveHighlightToggleStatus);\n    });\n});\n\n\n"],"file":"main.js"}