{"version":3,"sources":["extensions/default/Phoenix-live-preview/main.js"],"names":["define","require","exports","module","ExtensionUtils","brackets","getModule","CommandManager","Commands","Menus","WorkspaceManager","AppInit","ProjectManager","MainViewManager","DocumentManager","Strings","Mustache","Metrics","NotificationUI","marked","utils","LIVE_PREVIEW_PANEL_ID","setOptions","renderer","Renderer","pedantic","gfm","breaks","sanitize","smartLists","smartypants","xhtml","panelHTML","markdownHTMLTemplate","$icon","$iframe","$panel","$pinUrlBtn","$livePreviewPopBtn","$reloadBtn","loadStyleSheet","panel","urlPinned","tab","_setPanelVisibility","isVisible","toggleClass","show","_loadPreview","hide","_toggleVisibility","visible","_togglePinUrl","pinStatus","hasClass","removeClass","addClass","_popoutLivePreview","closed","open","_setTitle","fileName","message","LIVE_DEV_SELECT_FILE_TO_PREVIEW","LIVE_DEV_STATUS_TIP_OUT_OF_SYNC","document","getElementById","textContent","async","_createExtensionPanel","templateVars","livePreview","clickToReload","LIVE_DEV_CLICK_TO_RELOAD_PAGE","clickToPopout","LIVE_DEV_CLICK_POPOUT","clickToPinUnpin","LIVE_DEV_CLICK_TO_PIN_UNPIN","PANEL_MIN_SIZE","INITIAL_PANEL_SIZE","body","clientWidth","$","click","render","find","onload","attr","createPluginPanel","recomputeLayout","_renderMarkdown","fullPath","getDocumentForPath","done","doc","text","getText","markdownHtml","markdownContent","parse","BOOTSTRAP_LIB_CSS","window","parent","Phoenix","baseURL","HIGHLIGHT_JS_CSS","HIGHLIGHT_JS","GFM_CSS","html","location","setTimeout","write","fail","err","console","error","_renderPreview","previewDetails","newSrc","isMarkdownFile","countEvent","EVENT_TYPE","LIVE_PREVIEW","getExtension","savedScrollPositions","_saveScrollPositionsIfPossible","currentSrc","src","getNoPreviewURL","scrollX","contentWindow","scrollY","e","force","saved","getPreviewDetails","URL","encodeURI","filePath","scrollTo","savedPositions","_projectFileChanges","evt","changedFile","isFile","_showPopoutNotificationIfNeeded","_projectOpened","path","notificationKey","popoutMessageShown","localStorage","getItem","isPanelVisible","endsWith","createFromTemplate","GUIDED_LIVE_PREVIEW_POPOUT","allowedPlacements","autoCloseTimeS","dismissOnClick","setItem","appReady","fileMenu","on","EVENT_PROJECT_OPEN","EVENT_PROJECT_FILE_CHANGED","register","CMD_LIVE_FILE_PREVIEW","FILE_LIVE_FILE_PREVIEW","getMenu","AppMenuBar","FILE_MENU","addMenuItem"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global define, brackets */\n//jshint-ignore:no-start\n\ndefine(function (require, exports, module) {\n    const ExtensionUtils     = brackets.getModule(\"utils/ExtensionUtils\"),\n        CommandManager     = brackets.getModule(\"command/CommandManager\"),\n        Commands           = brackets.getModule(\"command/Commands\"),\n        Menus              = brackets.getModule(\"command/Menus\"),\n        WorkspaceManager   = brackets.getModule(\"view/WorkspaceManager\"),\n        AppInit            = brackets.getModule(\"utils/AppInit\"),\n        ProjectManager     = brackets.getModule(\"project/ProjectManager\"),\n        MainViewManager    = brackets.getModule(\"view/MainViewManager\"),\n        DocumentManager    = brackets.getModule(\"document/DocumentManager\"),\n        Strings            = brackets.getModule(\"strings\"),\n        Mustache           = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        Metrics             = brackets.getModule(\"utils/Metrics\"),\n        NotificationUI = brackets.getModule(\"widgets/NotificationUI\"),\n        marked = require('thirdparty/marked.min'),\n        utils = require('utils');\n\n    const LIVE_PREVIEW_PANEL_ID = \"live-preview-panel\";\n\n    // TODO markdown advanced rendering options https://marked.js.org/using_advanced\n    marked.setOptions({\n        renderer: new marked.Renderer(),\n        // highlight: function(code, lang) {\n        //     const hljs = require('highlight.js');\n        //     const language = hljs.getLanguage(lang) ? lang : 'plaintext';\n        //     return hljs.highlight(code, { language }).value;\n        // },\n        // langPrefix: 'hljs language-', // highlight.js css expects a top-level 'hljs' class.\n        pedantic: false,\n        gfm: true,\n        breaks: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: false,\n        xhtml: false\n    });\n\n\n    // Templates\n    let panelHTML       = require(\"text!panel.html\"),\n        markdownHTMLTemplate = require(\"text!markdown.html\");\n    ExtensionUtils.loadStyleSheet(module, \"live-preview.css\");\n\n    // jQuery objects\n    let $icon,\n        $iframe,\n        $panel,\n        $pinUrlBtn,\n        $livePreviewPopBtn,\n        $reloadBtn;\n\n    // Other vars\n    let panel,\n        urlPinned,\n        tab = null;\n\n    function _setPanelVisibility(isVisible) {\n        if (isVisible) {\n            $icon.toggleClass(\"active\");\n            panel.show();\n            _loadPreview(true);\n        } else {\n            $icon.toggleClass(\"active\");\n            panel.hide();\n        }\n    }\n\n    function _toggleVisibility() {\n        let visible = !panel.isVisible();\n        _setPanelVisibility(visible);\n    }\n\n    function _togglePinUrl() {\n        let pinStatus = $pinUrlBtn.hasClass('pin-icon');\n        if(pinStatus){\n            $pinUrlBtn.removeClass('pin-icon').addClass('unpin-icon');\n        } else {\n            $pinUrlBtn.removeClass('unpin-icon').addClass('pin-icon');\n        }\n        urlPinned = !pinStatus;\n        _loadPreview();\n    }\n\n    function _popoutLivePreview() {\n        if(!tab || tab.closed){\n            tab = open();\n        }\n        _loadPreview(true);\n    }\n\n    function _setTitle(fileName) {\n        let message = Strings.LIVE_DEV_SELECT_FILE_TO_PREVIEW;\n        if(fileName){\n            message = `${fileName} - ${Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC}`;\n        }\n        document.getElementById(\"panel-live-preview-title\").textContent = `${message}`;\n    }\n\n    async function _createExtensionPanel() {\n        let templateVars = {\n            Strings: Strings,\n            livePreview: Strings.LIVE_DEV_STATUS_TIP_OUT_OF_SYNC,\n            clickToReload: Strings.LIVE_DEV_CLICK_TO_RELOAD_PAGE,\n            clickToPopout: Strings.LIVE_DEV_CLICK_POPOUT,\n            clickToPinUnpin: Strings.LIVE_DEV_CLICK_TO_PIN_UNPIN\n        };\n        const PANEL_MIN_SIZE = 50;\n        const INITIAL_PANEL_SIZE = document.body.clientWidth/2.5;\n        $icon = $(\"#toolbar-go-live\");\n        $icon.click(_toggleVisibility);\n        $panel = $(Mustache.render(panelHTML, templateVars));\n        $iframe = $panel.find(\"#panel-live-preview-frame\");\n        $pinUrlBtn = $panel.find(\"#pinURLButton\");\n        $reloadBtn = $panel.find(\"#reloadButton\");\n        $livePreviewPopBtn = $panel.find(\"#livePreviewPopoutButton\");\n        $iframe[0].onload = function () {\n            $iframe.attr('srcdoc', null);\n        };\n\n        panel = WorkspaceManager.createPluginPanel(LIVE_PREVIEW_PANEL_ID, $panel,\n            PANEL_MIN_SIZE, $icon, INITIAL_PANEL_SIZE);\n\n        WorkspaceManager.recomputeLayout(false);\n        $pinUrlBtn.click(_togglePinUrl);\n        $livePreviewPopBtn.click(_popoutLivePreview);\n        $reloadBtn.click(()=>{\n            _loadPreview(true);\n        });\n    }\n\n    function _renderMarkdown(fullPath) {\n        DocumentManager.getDocumentForPath(fullPath)\n            .done(function (doc) {\n                let text = doc.getText();\n                let markdownHtml = marked.parse(text);\n                let templateVars = {\n                    markdownContent: markdownHtml,\n                    BOOTSTRAP_LIB_CSS: `${window.parent.Phoenix.baseURL}thirdparty/bootstrap/bootstrap.min.css`,\n                    HIGHLIGHT_JS_CSS: `${window.parent.Phoenix.baseURL}thirdparty/highlight.js/styles/github.min.css`,\n                    HIGHLIGHT_JS: `${window.parent.Phoenix.baseURL}thirdparty/highlight.js/highlight.min.js`,\n                    GFM_CSS: `${window.parent.Phoenix.baseURL}thirdparty/gfm.min.css`\n                };\n                let html = Mustache.render(markdownHTMLTemplate, templateVars);\n                $iframe.attr('srcdoc', html);\n                if(tab && !tab.closed){\n                    tab.location = \"about:blank\";\n                    setTimeout(()=>{\n                        tab.window.document.write(html);\n                    }, 10); // timer hack, location and content cannot be set in a row,\n                    // we should move to iframe embedded controls\n                }\n            })\n            .fail(function (err) {\n                console.error(`Markdown rendering failed for ${fullPath}: `, err);\n            });\n    }\n\n    function _renderPreview(previewDetails, newSrc) {\n        let fullPath = previewDetails.fullPath;\n        if(previewDetails.isMarkdownFile){\n            $iframe.attr('src', 'about:blank');\n            _renderMarkdown(fullPath);\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\", \"markdown\");\n        } else {\n            $iframe.attr('srcdoc', null);\n            $iframe.attr('src', newSrc);\n            if(tab && !tab.closed){\n                tab.location = newSrc;\n            }\n            Metrics.countEvent(Metrics.EVENT_TYPE.LIVE_PREVIEW, \"render\", utils.getExtension(fullPath));\n        }\n    }\n\n    let savedScrollPositions = {};\n\n    function _saveScrollPositionsIfPossible() {\n        let currentSrc = $iframe.src || utils.getNoPreviewURL();\n        try{\n            let scrollX = $iframe[0].contentWindow.scrollX;\n            let scrollY = $iframe[0].contentWindow.scrollY;\n            savedScrollPositions[currentSrc] = {\n                scrollX: scrollX,\n                scrollY: scrollY\n            };\n            return {scrollX, scrollY, currentSrc};\n        }catch (e) {\n            return {scrollX: 0, scrollY: 0 , currentSrc};\n        }\n    }\n\n    async function _loadPreview(force) {\n        if(panel.isVisible() || (tab && !tab.closed)){\n            let saved = _saveScrollPositionsIfPossible();\n            // panel-live-preview-title\n            let previewDetails = await utils.getPreviewDetails();\n            let newSrc = saved.currentSrc;\n            if (!urlPinned && previewDetails.URL) {\n                newSrc = encodeURI(previewDetails.URL);\n                _setTitle(previewDetails.filePath);\n            }\n            $iframe[0].onload = function () {\n                if(saved.currentSrc === newSrc){\n                    $iframe[0].contentWindow.scrollTo(saved.scrollX, saved.scrollY);\n                } else {\n                    let savedPositions = savedScrollPositions[newSrc];\n                    if(savedPositions){\n                        $iframe[0].contentWindow.scrollTo(savedPositions.scrollX, savedPositions.scrollY);\n                    }\n                }\n            };\n            if(saved.currentSrc !== newSrc || force === true){\n                $iframe.src = newSrc;\n                _renderPreview(previewDetails, newSrc);\n            }\n        }\n    }\n\n    function _projectFileChanges(evt, changedFile) {\n        if(changedFile && changedFile.isFile && changedFile.fullPath && changedFile.fullPath !== '/fs/app/state.json'){\n            // we are getting this change event somehow.\n            // bug, investigate why we get this change event as a project file change.\n            _loadPreview(true);\n            _showPopoutNotificationIfNeeded(changedFile.fullPath);\n        }\n    }\n\n    function _projectOpened() {\n        if(urlPinned){\n            _togglePinUrl();\n        }\n        $iframe[0].src = utils.getNoPreviewURL();\n        if(tab && !tab.closed){\n            tab.location = utils.getNoPreviewURL();\n        }\n        if(!panel.isVisible()){\n            return;\n        }\n        _loadPreview(true);\n    }\n\n    function _showPopoutNotificationIfNeeded(path) {\n        let notificationKey = 'livePreviewPopoutShown';\n        let popoutMessageShown = localStorage.getItem(notificationKey);\n        if(!popoutMessageShown && WorkspaceManager.isPanelVisible(LIVE_PREVIEW_PANEL_ID)\n            && (path.endsWith('.html') || path.endsWith('.htm'))){\n            NotificationUI.createFromTemplate(Strings.GUIDED_LIVE_PREVIEW_POPOUT,\n                \"livePreviewPopoutButton\", {\n                    allowedPlacements: ['bottom'],\n                    autoCloseTimeS: 15,\n                    dismissOnClick: true}\n            );\n            localStorage.setItem(notificationKey, \"true\");\n        }\n    }\n\n    AppInit.appReady(function () {\n        _createExtensionPanel();\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _loadPreview);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED, _projectFileChanges);\n        MainViewManager.on(\"currentFileChange\", _loadPreview);\n        ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN, _projectOpened);\n        CommandManager.register(Strings.CMD_LIVE_FILE_PREVIEW,  Commands.FILE_LIVE_FILE_PREVIEW, function () {\n            _toggleVisibility();\n        });\n        let fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        fileMenu.addMenuItem(Commands.FILE_LIVE_FILE_PREVIEW, \"\");\n        // We always show the live preview panel on startup if there is a preview file\n        setTimeout(async ()=>{\n            let previewDetails = await utils.getPreviewDetails();\n            if(previewDetails.filePath){\n                // only show if there is some file to preview and not the default no-preview preview on startup\n                _setPanelVisibility(true);\n            }\n        }, 1000);\n    });\n});\n\n\n"],"file":"main.js"}