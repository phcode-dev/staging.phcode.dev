{"version":3,"sources":["extensions/default/Phoenix-live-preview/utils.js"],"names":["define","require","exports","module","ProjectManager","brackets","getModule","Strings","DocumentManager","getExtension","filePath","pathSplit","split","length","isPreviewableFile","extension","includes","toLowerCase","_isMarkdownFile","_isHTMLFile","getNoPreviewURL","window","Phoenix","baseURL","encodeURIComponent","DESCRIPTION_LIVEDEV_NO_PREVIEW","DESCRIPTION_LIVEDEV_NO_PREVIEW_DETAILS","async","getPreviewDetails","Promise","resolve","reject","projectRoot","getProjectRoot","fullPath","projectRootUrl","fsServerUrl","PHOENIX_INSTANCE_ID","currentDocument","getCurrentDocument","currentFile","file","getSelectedItem","httpFilePath","startsWith","path","relative","URL","isMarkdownFile","isHTMLFile","isNoPreview","e"],"mappings":"AAyCAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,eAA0BC,SAASC,UAAU,0BAC/CC,QAA4BF,SAASC,UAAU,WAC/CE,gBAAsBH,SAASC,UAAU,4BAE7C,SAASG,aAAaC,UAElB,IAAIC,WADJD,SAAWA,UAAY,IACEE,MAAM,KAC/B,OAAOD,WAAaA,UAAUE,OAAO,EAAIF,UAAUA,UAAUE,OAAO,GAAK,GAG7E,SAASC,kBAAkBJ,UACvB,IAAIK,UAAYN,aAAaC,UAC7B,MAAO,CAAC,OAAQ,MAAO,MAAO,OAAQ,MAAO,MAAO,MAAO,KAAM,YAAYM,SAASD,UAAUE,eAGpG,SAASC,gBAAgBR,UACrB,IAAIK,UAAYN,aAAaC,UAC7B,MAAO,CAAC,KAAM,YAAYM,SAASD,UAAUE,eAGjD,SAASE,YAAYT,UACjB,IAAIK,UAAYN,aAAaC,UAC7B,MAAO,CAAC,OAAQ,OAAOM,SAASD,UAAUE,eAG9C,SAASG,kBACL,SAAUC,OAAOC,QAAQC,0DACrBC,kCAAkCjB,QAAQkB,iDACvBlB,QAAQmB,4CAQnCC,eAAeC,oBACX,OAAO,IAAIC,QAAQF,MAAOG,QAASC,UAE/B,IACI,MAAMC,YAAc5B,eAAe6B,iBAAiBC,SAC9CC,kBAAoBd,OAAOe,mCAAmCd,QAAQe,sBAAsBL,cAC5FM,gBAAkB9B,gBAAgB+B,qBAClCC,YAAcF,gBAAiBA,gBAAgBG,KAAOrC,eAAesC,kBAC3E,GAAGF,YAAY,CACX,IAAIN,SAAWM,YAAYN,SACvBS,aAAe,KAInB,IAHGT,SAASU,WAAW,YAAcV,SAASU,WAAW,eACrDD,aAAeT,UAEhBpB,kBAAkBoB,UAAU,CAC3B,MAAMxB,SAAWiC,cAAgBE,KAAKC,SAASd,YAAaE,UAC5D,IAAIa,IAQJ,YAPAjB,QAAQ,CACJiB,IAFMJ,iBAAmBR,iBAAiBzB,WAG1CA,SAAUA,SACVwB,SAAUA,SACVc,eAAgB9B,gBAAgBgB,UAChCe,WAAY9B,YAAYe,aAKpCJ,QAAQ,CACJiB,IAAK3B,kBACL8B,aAAa,IAEpB,MAAOC,GACJpB,OAAOoB,MAKnBjD,QAAQ0B,kBAAoBA,kBAC5B1B,QAAQkB,gBAAkBA,gBAC1BlB,QAAQO,aAAeA,aACvBP,QAAQY,kBAAoBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global define, brackets, fs, Phoenix, path */\n//jshint-ignore:no-start\n\ndefine(function (require, exports, module) {\n    const ProjectManager          = brackets.getModule(\"project/ProjectManager\"),\n        Strings                   = brackets.getModule(\"strings\"),\n        DocumentManager     = brackets.getModule(\"document/DocumentManager\");\n\n    function getExtension(filePath) {\n        filePath = filePath || '';\n        let pathSplit = filePath.split('.');\n        return pathSplit && pathSplit.length>1 ? pathSplit[pathSplit.length-1] : '';\n    }\n\n    function isPreviewableFile(filePath) {\n        let extension = getExtension(filePath);\n        return ['html', 'htm', 'jpg', 'jpeg', 'png', 'svg', 'pdf', 'md', 'markdown'].includes(extension.toLowerCase());\n    }\n\n    function _isMarkdownFile(filePath) {\n        let extension = getExtension(filePath);\n        return ['md', 'markdown'].includes(extension.toLowerCase());\n    }\n\n    function _isHTMLFile(filePath) {\n        let extension = getExtension(filePath);\n        return ['html', 'htm'].includes(extension.toLowerCase());\n    }\n\n    function getNoPreviewURL(){\n        return `${window.Phoenix.baseURL}assets/phoenix-splash/no-preview.html?jsonInput=`+\n            encodeURIComponent(`{\"heading\":\"${Strings.DESCRIPTION_LIVEDEV_NO_PREVIEW}\",`\n                +`\"details\":\"${Strings.DESCRIPTION_LIVEDEV_NO_PREVIEW_DETAILS}\"}`);\n    }\n\n    /**\n     * Finds out a {URL,filePath} to live preview from the project. Will return and empty object if the current\n     * file is not previewable.\n     * @return {Promise<*>}\n     */\n    async function getPreviewDetails() {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            // async is explicitly caught\n            try {\n                const projectRoot = ProjectManager.getProjectRoot().fullPath;\n                const projectRootUrl = `${window.fsServerUrl}PHOENIX_LIVE_PREVIEW_${Phoenix.PHOENIX_INSTANCE_ID}${projectRoot}`;\n                const currentDocument = DocumentManager.getCurrentDocument();\n                const currentFile = currentDocument? currentDocument.file : ProjectManager.getSelectedItem();\n                if(currentFile){\n                    let fullPath = currentFile.fullPath;\n                    let httpFilePath = null;\n                    if(fullPath.startsWith(\"http://\") || fullPath.startsWith(\"https://\")){\n                        httpFilePath = fullPath;\n                    }\n                    if(isPreviewableFile(fullPath)){\n                        const filePath = httpFilePath || path.relative(projectRoot, fullPath);\n                        let URL = httpFilePath || `${projectRootUrl}${filePath}`;\n                        resolve({\n                            URL,\n                            filePath: filePath,\n                            fullPath: fullPath,\n                            isMarkdownFile: _isMarkdownFile(fullPath),\n                            isHTMLFile: _isHTMLFile(fullPath)\n                        });\n                        return;\n                    }\n                }\n                resolve({\n                    URL: getNoPreviewURL(),\n                    isNoPreview: true\n                });\n            }catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    exports.getPreviewDetails = getPreviewDetails;\n    exports.getNoPreviewURL = getNoPreviewURL;\n    exports.getExtension = getExtension;\n    exports.isPreviewableFile = isPreviewableFile;\n});\n\n\n"],"file":"utils.js"}