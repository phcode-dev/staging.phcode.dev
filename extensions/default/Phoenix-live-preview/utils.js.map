{"version":3,"sources":["extensions/default/Phoenix-live-preview/utils.js"],"names":["define","require","exports","module","ProjectManager","brackets","getModule","Strings","DocumentManager","LiveDevelopment","LiveDevServerManager","LivePreviewTransport","getExtension","filePath","pathSplit","split","length","isPreviewableFile","extension","isImage","_isMarkdownFile","_isHTMLFile","includes","toLowerCase","getNoPreviewURL","window","Phoenix","baseURL","encodeURIComponent","DESCRIPTION_LIVEDEV_NO_PREVIEW","DESCRIPTION_LIVEDEV_NO_PREVIEW_DETAILS","getLivePreviewNotSupportedURL","DESCRIPTION_LIVEDEV_MAIN_HEADING","DESCRIPTION_LIVEDEV_MAIN_SPAN","getPageLoaderURL","url","getStaticServerBaseURLs","BROADCAST_CHANNEL_ID","_isLivePreviewSupported","browser","isTauri","desktop","isSafari","mobile","isIos","async","getPreviewDetails","Promise","resolve","reject","URL","isNoPreview","projectRoot","getProjectRoot","fullPath","projectRootUrl","getLivePreviewBaseURL","currentDocument","getCurrentDocument","currentFile","file","getSelectedItem","httpFilePath","startsWith","path","relative","isMarkdownFile","isHTMLFile","e"],"mappings":"AAyCAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,eAA0BC,SAASC,UAAU,0BAC/CC,QAA4BF,SAASC,UAAU,WAC/CE,gBAAsBH,SAASC,UAAU,4BACzCG,gBAAqBJ,SAASC,UAAU,wBACxCI,qBAAuBL,SAASC,UAAU,wCAC1CK,qBAAwBN,SAASC,UAAU,oEAE/C,SAASM,aAAaC,UAElB,IAAIC,WADJD,SAAWA,UAAY,IACEE,MAAM,KAC/B,OAAOD,WAAaA,UAAUE,OAAO,EAAIF,UAAUA,UAAUE,OAAO,GAAK,GAG7E,SAASC,kBAAkBJ,UACvB,IAAIK,UAAYN,aAAaC,UAC7B,OAAOM,QAAQN,WAAaO,gBAAgBP,WAAaQ,YAAYR,WACjE,CAAC,OAAOS,SAASJ,UAAUK,eAGnC,SAASJ,QAAQN,UACb,IAAIK,UAAYN,aAAaC,UAC7B,MAAO,CAAC,MAAO,OAAQ,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,QAC7DS,SAASJ,UAAUK,eAG5B,SAASH,gBAAgBP,UACrB,IAAIK,UAAYN,aAAaC,UAC7B,MAAO,CAAC,KAAM,YAAYS,SAASJ,UAAUK,eAGjD,SAASF,YAAYR,UACjB,IAAIK,UAAYN,aAAaC,UAC7B,MAAO,CAAC,OAAQ,MAAO,SAASS,SAASJ,UAAUK,eAGvD,SAASC,kBACL,SAAUC,OAAOC,QAAQC,0DACrBC,kCAAkCrB,QAAQsB,iDACvBtB,QAAQuB,4CAGnC,SAASC,gCACL,SAAUN,OAAOC,QAAQC,oEACrBC,sBAAsBrB,QAAQyB,oCAAsC,aACpEJ,sBAAsBrB,QAAQ0B,iCAGtC,SAASC,iBAAiBC,KACtB,SAAUzB,qBAAqB0B,0BAA0BT,8CAChChB,qBAAqB0B,4BAA4BT,mBAAmBO,OAGjG,SAASG,0BAKL,OAAOZ,QAAQa,QAAQC,WAAad,QAAQa,QAAQE,QAAQC,UAAYhB,QAAQa,QAAQI,OAAOC,OAQnGC,eAAeC,oBACX,OAAO,IAAIC,QAAQF,MAAOG,QAASC,UAE/B,IACI,IAAIX,0BAKA,YAJAU,QAAQ,CACJE,IAAKnB,gCACLoB,aAAa,IAIrB,MAAMC,YAAchD,eAAeiD,iBAAiBC,SAC9CC,kBAAoB9C,gBAAgB+C,0BAA0BJ,cAC9DK,gBAAkBjD,gBAAgBkD,qBAClCC,YAAcF,gBAAiBA,gBAAgBG,KAAOxD,eAAeyD,kBAC3E,GAAGF,YAAY,CACX,IAAIL,SAAWK,YAAYL,SACvBQ,aAAe,KAInB,IAHGR,SAASS,WAAW,YAAcT,SAASS,WAAW,eACrDD,aAAeR,UAEhBrC,kBAAkBqC,UAAU,CAC3B,MAAMzC,SAAWiD,cAAgBE,KAAKC,SAASb,YAAaE,UAC5D,IAAIJ,IAQJ,YAPAF,QAAQ,CACJE,IAFMY,iBAAmBP,iBAAiB1C,WAG1CA,SAAUA,SACVyC,SAAUA,SACVY,eAAgB9C,gBAAgBkC,UAChCa,WAAY9C,YAAYiC,aAKpCN,QAAQ,CACJE,IAAK1B,kBACL2B,aAAa,IAEpB,MAAOiB,GACJnB,OAAOmB,MAKnBlE,QAAQ4C,kBAAoBA,kBAC5B5C,QAAQsB,gBAAkBA,gBAC1BtB,QAAQU,aAAeA,aACvBV,QAAQgC,iBAAmBA,iBAC3BhC,QAAQe,kBAAoBA,kBAC5Bf,QAAQiB,QAAUA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global define, brackets, fs, Phoenix, path */\n//jshint-ignore:no-start\n\ndefine(function (require, exports, module) {\n    const ProjectManager          = brackets.getModule(\"project/ProjectManager\"),\n        Strings                   = brackets.getModule(\"strings\"),\n        DocumentManager     = brackets.getModule(\"document/DocumentManager\"),\n        LiveDevelopment    = brackets.getModule(\"LiveDevelopment/main\"),\n        LiveDevServerManager = brackets.getModule(\"LiveDevelopment/LiveDevServerManager\"),\n        LivePreviewTransport  = brackets.getModule(\"LiveDevelopment/MultiBrowserImpl/transports/LivePreviewTransport\");\n\n    function getExtension(filePath) {\n        filePath = filePath || '';\n        let pathSplit = filePath.split('.');\n        return pathSplit && pathSplit.length>1 ? pathSplit[pathSplit.length-1] : '';\n    }\n\n    function isPreviewableFile(filePath) {\n        let extension = getExtension(filePath);\n        return isImage(filePath) || _isMarkdownFile(filePath) || _isHTMLFile(filePath) ||\n            ['pdf'].includes(extension.toLowerCase());\n    }\n\n    function isImage(filePath) {\n        let extension = getExtension(filePath);\n        return [\"jpg\", \"jpeg\", \"png\", \"gif\", \"svg\", \"webp\", \"bmp\", \"ico\", \"avif\"]\n            .includes(extension.toLowerCase());\n    }\n\n    function _isMarkdownFile(filePath) {\n        let extension = getExtension(filePath);\n        return ['md', 'markdown'].includes(extension.toLowerCase());\n    }\n\n    function _isHTMLFile(filePath) {\n        let extension = getExtension(filePath);\n        return ['html', 'htm', 'xhtml'].includes(extension.toLowerCase());\n    }\n\n    function getNoPreviewURL(){\n        return `${window.Phoenix.baseURL}assets/phoenix-splash/no-preview.html?jsonInput=`+\n            encodeURIComponent(`{\"heading\":\"${Strings.DESCRIPTION_LIVEDEV_NO_PREVIEW}\",`\n                +`\"details\":\"${Strings.DESCRIPTION_LIVEDEV_NO_PREVIEW_DETAILS}\"}`);\n    }\n\n    function getLivePreviewNotSupportedURL() {\n        return `${window.Phoenix.baseURL}assets/phoenix-splash/live-preview-error.html?mainHeading=`+\n            encodeURIComponent(`${Strings.DESCRIPTION_LIVEDEV_MAIN_HEADING}`) + \"&mainSpan=\"+\n            encodeURIComponent(`${Strings.DESCRIPTION_LIVEDEV_MAIN_SPAN}`);\n    }\n\n    function getPageLoaderURL(url) {\n        return `${LiveDevServerManager.getStaticServerBaseURLs().baseURL}pageLoader.html?`\n            +`broadcastChannel=${LivePreviewTransport.BROADCAST_CHANNEL_ID}&URL=${encodeURIComponent(url)}`;\n    }\n\n    function _isLivePreviewSupported() {\n        // in safari, service workers are disabled in third party iframes. We use phcode.live for secure sandboxing\n        // live previews into its own domain apart from phcode.dev. Since safari doesn't support this, we are left\n        // with using phcode.dev domain directly for live previews. That is a large attack surface for untrusted\n        // code execution. so we will disable live previews in safari instead of shipping a security vulnerability.\n        return Phoenix.browser.isTauri || !(Phoenix.browser.desktop.isSafari || Phoenix.browser.mobile.isIos);\n    }\n\n    /**\n     * Finds out a {URL,filePath} to live preview from the project. Will return and empty object if the current\n     * file is not previewable.\n     * @return {Promise<*>}\n     */\n    async function getPreviewDetails() {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            // async is explicitly caught\n            try {\n                if(!_isLivePreviewSupported()){\n                    resolve({\n                        URL: getLivePreviewNotSupportedURL(),\n                        isNoPreview: true\n                    });\n                    return;\n                }\n                const projectRoot = ProjectManager.getProjectRoot().fullPath;\n                const projectRootUrl = `${LiveDevelopment.getLivePreviewBaseURL()}${projectRoot}`;\n                const currentDocument = DocumentManager.getCurrentDocument();\n                const currentFile = currentDocument? currentDocument.file : ProjectManager.getSelectedItem();\n                if(currentFile){\n                    let fullPath = currentFile.fullPath;\n                    let httpFilePath = null;\n                    if(fullPath.startsWith(\"http://\") || fullPath.startsWith(\"https://\")){\n                        httpFilePath = fullPath;\n                    }\n                    if(isPreviewableFile(fullPath)){\n                        const filePath = httpFilePath || path.relative(projectRoot, fullPath);\n                        let URL = httpFilePath || `${projectRootUrl}${filePath}`;\n                        resolve({\n                            URL,\n                            filePath: filePath,\n                            fullPath: fullPath,\n                            isMarkdownFile: _isMarkdownFile(fullPath),\n                            isHTMLFile: _isHTMLFile(fullPath)\n                        });\n                        return;\n                    }\n                }\n                resolve({\n                    URL: getNoPreviewURL(),\n                    isNoPreview: true\n                });\n            }catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    exports.getPreviewDetails = getPreviewDetails;\n    exports.getNoPreviewURL = getNoPreviewURL;\n    exports.getExtension = getExtension;\n    exports.getPageLoaderURL = getPageLoaderURL;\n    exports.isPreviewableFile = isPreviewableFile;\n    exports.isImage = isImage;\n});\n\n\n"],"file":"utils.js"}