{"version":3,"sources":["extensions/default/HealthData/SendToAnalytics.js"],"names":["define","require","exports","module","Metrics","brackets","getModule","PreferencesManager","PerfUtils","themesPref","getExtensionPrefs","PLATFORM","EVENT_TYPE","PERFORMANCE","_emitDeviceTypeMetrics","browser","isDeskTop","countEvent","isMobile","isTablet","_emitMobileMetricsIfPresent","platform","mobile","isIos","isWindows","isAndroid","_emitBrowserMetrics","desktop","isChrome","isChromeBased","isEdgeChromium","isFirefox","isOpera","isOperaChromium","sendPlatformMetrics","getPlatformInfo","window","navigator","userAgent","app","language","getLocale","metadata","version","sendStartupPerformanceMetrics","healthReport","getHealthReport","valueEvent","Number","_getCurrentTheme","get","sendThemesMetrics","THEMES"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,QAAUC,SAASC,UAAU,iBAC/BC,mBAAsBF,SAASC,UAAU,kCACzCE,UAAsBH,SAASC,UAAU,mBACzCG,WAAsBF,mBAAmBG,kBAAkB,UAEzDC,SAAWP,QAAQQ,WAAWD,SAChCE,YAAcT,QAAQQ,WAAWC,YAGrC,SAASC,yBACFT,SAASU,QAAQC,WAChBZ,QAAQa,WAAWN,SAAU,SAAU,WAExCN,SAASU,QAAQG,UAChBd,QAAQa,WAAWN,SAAU,SAAU,UAExCN,SAASU,QAAQI,UAChBf,QAAQa,WAAWN,SAAU,SAAU,UAG/C,SAASS,8BACL,IAAIC,SAAW,OACf,GAAGhB,SAASU,QAAQO,OAAOC,MACvBF,SAAW,WACR,GAAGhB,SAASU,QAAQO,OAAOE,UAC9BH,SAAW,cACR,CAAA,IAAGhB,SAASU,QAAQO,OAAOG,UAG9B,OAFAJ,SAAW,UAIfjB,QAAQa,WAAWN,SAAU,SAAUU,UAE3C,SAASK,sBACFrB,SAASU,QAAQY,QAAQC,UACxBxB,QAAQa,WAAWN,SAAU,UAAW,UAEzCN,SAASU,QAAQY,QAAQE,eACxBzB,QAAQa,WAAWN,SAAU,UAAW,eAEzCN,SAASU,QAAQY,QAAQG,gBACxB1B,QAAQa,WAAWN,SAAU,UAAW,gBAEzCN,SAASU,QAAQY,QAAQI,WACxB3B,QAAQa,WAAWN,SAAU,UAAW,WAEzCN,SAASU,QAAQY,QAAQK,SACxB5B,QAAQa,WAAWN,SAAU,UAAW,SAEzCN,SAASU,QAAQY,QAAQM,iBACxB7B,QAAQa,WAAWN,SAAU,UAAW,iBAGhD,SAASuB,sBACL9B,QAAQa,WAAWN,SAAU,KAAMN,SAASgB,UAC5CjB,QAAQa,WAAWN,SAAU,YAAaN,SAAS8B,mBACnD/B,QAAQa,WAAWN,SAAU,YAAayB,OAAOC,UAAUC,WAC3DlC,QAAQa,WAAWN,SAAU,aAAcN,SAASkC,IAAIC,UACxDpC,QAAQa,WAAWN,SAAU,mBAAoBN,SAASoC,aAC1DrC,QAAQa,WAAWN,SAAU,kBAAmBN,SAASqC,SAASC,SAClE7B,yBACAY,sBACAN,8BAIJ,SAASwB,gCACL,MAAMC,aAAerC,UAAUsC,kBAC/B1C,QAAQ2C,WAAWlC,YAAa,UAAW,iBACvCmC,OAAOH,aAA6B,iBACxCzC,QAAQ2C,WAAWlC,YAAa,UAAW,qBACvCmC,OAAOH,aAAiC,qBAIhD,SAASI,mBAGL,OAAOxC,WAAWyC,IAAI,UAAY,UAEtC,SAASC,oBACL/C,QAAQa,WAAWb,QAAQQ,WAAWwC,OAAQ,eAAgBH,oBAGlE/C,QAAQgC,oBAAsBA,oBAC9BhC,QAAQ0C,8BAAgCA,8BACxC1C,QAAQiD,kBAAoBA","sourcesContent":["/*\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global define*/\ndefine(function (require, exports, module) {\n    const Metrics = brackets.getModule(\"utils/Metrics\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        PerfUtils           = brackets.getModule(\"utils/PerfUtils\"),\n        themesPref          = PreferencesManager.getExtensionPrefs(\"themes\");\n\n    const PLATFORM = Metrics.EVENT_TYPE.PLATFORM,\n        PERFORMANCE = Metrics.EVENT_TYPE.PERFORMANCE;\n\n    // Platform metrics to be sent at startup\n    function _emitDeviceTypeMetrics() {\n        if(brackets.browser.isDeskTop) {\n            Metrics.countEvent(PLATFORM, \"device\", \"desktop\");\n        }\n        if(brackets.browser.isMobile) {\n            Metrics.countEvent(PLATFORM, \"device\", \"mobile\");\n        }\n        if(brackets.browser.isTablet) {\n            Metrics.countEvent(PLATFORM, \"device\", \"tablet\");\n        }\n    }\n    function _emitMobileMetricsIfPresent() {\n        let platform = \"none\";\n        if(brackets.browser.mobile.isIos) {\n            platform = \"ios\";\n        } else if(brackets.browser.mobile.isWindows) {\n            platform = \"windows\";\n        } else if(brackets.browser.mobile.isAndroid) {\n            platform = \"android\";\n        } else {\n            return;\n        }\n        Metrics.countEvent(PLATFORM, \"mobile\", platform);\n    }\n    function _emitBrowserMetrics() {\n        if(brackets.browser.desktop.isChrome) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"chrome\");\n        }\n        if(brackets.browser.desktop.isChromeBased) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"chromeBased\");\n        }\n        if(brackets.browser.desktop.isEdgeChromium) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"EdgeChromium\");\n        }\n        if(brackets.browser.desktop.isFirefox) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"firefox\");\n        }\n        if(brackets.browser.desktop.isOpera) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"opera\");\n        }\n        if(brackets.browser.desktop.isOperaChromium) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"operaChromium\");\n        }\n    }\n    function sendPlatformMetrics() {\n        Metrics.countEvent(PLATFORM, \"os\", brackets.platform);\n        Metrics.countEvent(PLATFORM, \"os.flavor\", brackets.getPlatformInfo());\n        Metrics.countEvent(PLATFORM, \"userAgent\", window.navigator.userAgent);\n        Metrics.countEvent(PLATFORM, \"languageOS\", brackets.app.language);\n        Metrics.countEvent(PLATFORM, \"languageBrackets\", brackets.getLocale());\n        Metrics.countEvent(PLATFORM, \"bracketsVersion\", brackets.metadata.version);\n        _emitDeviceTypeMetrics();\n        _emitBrowserMetrics();\n        _emitMobileMetricsIfPresent();\n    }\n\n    // Performance\n    function sendStartupPerformanceMetrics() {\n        const healthReport = PerfUtils.getHealthReport();\n        Metrics.valueEvent(PERFORMANCE, \"startup\", \"AppStartupTime\",\n            Number(healthReport[\"AppStartupTime\"]));\n        Metrics.valueEvent(PERFORMANCE, \"startup\", \"ModuleDepsResolved\",\n            Number(healthReport[\"ModuleDepsResolved\"]));\n    }\n\n    // Themes\n    function _getCurrentTheme() {\n        // TODO: currently phoenix only have default themes, but in future, we should ensure that only themes in the\n        //  registry and user installed are logged for privacy.\n        return themesPref.get(\"theme\") || \"default\";\n    }\n    function sendThemesMetrics() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.THEMES, \"currentTheme\", _getCurrentTheme());\n    }\n\n    exports.sendPlatformMetrics = sendPlatformMetrics;\n    exports.sendStartupPerformanceMetrics = sendStartupPerformanceMetrics;\n    exports.sendThemesMetrics = sendThemesMetrics;\n    // TODO: send extension metrics\n});\n"],"file":"SendToAnalytics.js"}