{"version":3,"sources":["extensions/default/HealthData/SendToAnalytics.js"],"names":["define","require","exports","module","Metrics","brackets","getModule","PreferencesManager","PerfUtils","themesPref","getExtensionPrefs","PLATFORM","EVENT_TYPE","PERFORMANCE","STORAGE","_emitDeviceTypeMetrics","browser","isDeskTop","countEvent","isMobile","isTablet","_emitMobileMetricsIfPresent","platform","mobile","isIos","isWindows","isAndroid","_emitBrowserMetrics","desktop","isChrome","isChromeBased","isEdgeChromium","isFirefox","isOpera","isOperaChromium","async","_sendStorageMetrics","navigator","storage","estimate","quota","percentageUsed","Math","round","usage","usedMB","console","log","valueEvent","sendPlatformMetrics","getPlatformInfo","window","userAgent","app","language","getLocale","metadata","version","sendStartupPerformanceMetrics","healthReport","getHealthReport","Number","_getCurrentTheme","get","sendThemesMetrics","THEMES"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,QAAUC,SAASC,UAAU,iBAC/BC,mBAAsBF,SAASC,UAAU,kCACzCE,UAAsBH,SAASC,UAAU,mBACzCG,WAAsBF,mBAAmBG,kBAAkB,UAEzDC,SAAWP,QAAQQ,WAAWD,SAChCE,YAAcT,QAAQQ,WAAWC,YACjCC,QAAUV,QAAQQ,WAAWE,QAGjC,SAASC,yBACFV,SAASW,QAAQC,WAChBb,QAAQc,WAAWP,SAAU,SAAU,WAExCN,SAASW,QAAQG,UAChBf,QAAQc,WAAWP,SAAU,SAAU,UAExCN,SAASW,QAAQI,UAChBhB,QAAQc,WAAWP,SAAU,SAAU,UAG/C,SAASU,8BACL,IAAIC,SAAW,OACf,GAAGjB,SAASW,QAAQO,OAAOC,MACvBF,SAAW,WACR,GAAGjB,SAASW,QAAQO,OAAOE,UAC9BH,SAAW,cACR,CAAA,IAAGjB,SAASW,QAAQO,OAAOG,UAG9B,OAFAJ,SAAW,UAIflB,QAAQc,WAAWP,SAAU,SAAUW,UAE3C,SAASK,sBACFtB,SAASW,QAAQY,QAAQC,UACxBzB,QAAQc,WAAWP,SAAU,UAAW,UAEzCN,SAASW,QAAQY,QAAQE,eACxB1B,QAAQc,WAAWP,SAAU,UAAW,eAEzCN,SAASW,QAAQY,QAAQG,gBACxB3B,QAAQc,WAAWP,SAAU,UAAW,gBAEzCN,SAASW,QAAQY,QAAQI,WACxB5B,QAAQc,WAAWP,SAAU,UAAW,WAEzCN,SAASW,QAAQY,QAAQK,SACxB7B,QAAQc,WAAWP,SAAU,UAAW,SAEzCN,SAASW,QAAQY,QAAQM,iBACxB9B,QAAQc,WAAWP,SAAU,UAAW,iBAKhDwB,eAAeC,sBACX,GAAIC,UAAUC,SAAWD,UAAUC,QAAQC,SAAU,CACjD,MAAMC,YAAcH,UAAUC,QAAQC,WAGhCE,eAAiBC,KAAKC,MAAOH,MAAMI,MAAQJ,MAAMA,MAAS,KAC1DK,OAASH,KAAKC,MAAMH,MAAMI,MAAQ,KAAO,MAC/CE,QAAQC,+BAA+BN,oBAAoBI,YAC3DzC,QAAQ4C,WAAWlC,QAAS,eAAgB,cAAe2B,gBAC3DrC,QAAQ4C,WAAWlC,QAAS,eAAgB,SAAU+B,SAG9D,SAASI,sBACL7C,QAAQc,WAAWP,SAAU,KAAMN,SAASiB,UAC5ClB,QAAQc,WAAWP,SAAU,YAAaN,SAAS6C,mBACnD9C,QAAQc,WAAWP,SAAU,YAAawC,OAAOd,UAAUe,WAC3DhD,QAAQc,WAAWP,SAAU,aAAcN,SAASgD,IAAIC,UACxDlD,QAAQc,WAAWP,SAAU,mBAAoBN,SAASkD,aAC1DnD,QAAQc,WAAWP,SAAU,kBAAmBN,SAASmD,SAASC,SAClE1C,yBACAY,sBACAN,8BACAe,sBAIJ,SAASsB,gCACL,MAAMC,aAAenD,UAAUoD,kBAC/BxD,QAAQ4C,WAAWnC,YAAa,UAAW,iBACvCgD,OAAOF,aAA6B,iBACxCvD,QAAQ4C,WAAWnC,YAAa,UAAW,qBACvCgD,OAAOF,aAAiC,qBAIhD,SAASG,mBAGL,OAAOrD,WAAWsD,IAAI,UAAY,UAEtC,SAASC,oBACL5D,QAAQc,WAAWd,QAAQQ,WAAWqD,OAAQ,eAAgBH,oBAGlE5D,QAAQ+C,oBAAsBA,oBAC9B/C,QAAQwD,8BAAgCA,8BACxCxD,QAAQ8D,kBAAoBA","sourcesContent":["/*\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global define*/\ndefine(function (require, exports, module) {\n    const Metrics = brackets.getModule(\"utils/Metrics\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        PerfUtils           = brackets.getModule(\"utils/PerfUtils\"),\n        themesPref          = PreferencesManager.getExtensionPrefs(\"themes\");\n\n    const PLATFORM = Metrics.EVENT_TYPE.PLATFORM,\n        PERFORMANCE = Metrics.EVENT_TYPE.PERFORMANCE,\n        STORAGE = Metrics.EVENT_TYPE.STORAGE;\n\n    // Platform metrics to be sent at startup\n    function _emitDeviceTypeMetrics() {\n        if(brackets.browser.isDeskTop) {\n            Metrics.countEvent(PLATFORM, \"device\", \"desktop\");\n        }\n        if(brackets.browser.isMobile) {\n            Metrics.countEvent(PLATFORM, \"device\", \"mobile\");\n        }\n        if(brackets.browser.isTablet) {\n            Metrics.countEvent(PLATFORM, \"device\", \"tablet\");\n        }\n    }\n    function _emitMobileMetricsIfPresent() {\n        let platform = \"none\";\n        if(brackets.browser.mobile.isIos) {\n            platform = \"ios\";\n        } else if(brackets.browser.mobile.isWindows) {\n            platform = \"windows\";\n        } else if(brackets.browser.mobile.isAndroid) {\n            platform = \"android\";\n        } else {\n            return;\n        }\n        Metrics.countEvent(PLATFORM, \"mobile\", platform);\n    }\n    function _emitBrowserMetrics() {\n        if(brackets.browser.desktop.isChrome) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"chrome\");\n        }\n        if(brackets.browser.desktop.isChromeBased) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"chromeBased\");\n        }\n        if(brackets.browser.desktop.isEdgeChromium) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"EdgeChromium\");\n        }\n        if(brackets.browser.desktop.isFirefox) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"firefox\");\n        }\n        if(brackets.browser.desktop.isOpera) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"opera\");\n        }\n        if(brackets.browser.desktop.isOperaChromium) {\n            Metrics.countEvent(PLATFORM, \"browser\", \"operaChromium\");\n        }\n    }\n\n    // web storage\n    async function _sendStorageMetrics() {\n        if (navigator.storage && navigator.storage.estimate) {\n            const quota = await navigator.storage.estimate();\n            // quota.usage -> Number of bytes used.\n            // quota.quota -> Maximum number of bytes available.\n            const percentageUsed = Math.round((quota.usage / quota.quota) * 100);\n            const usedMB = Math.round(quota.usage / 1024 / 1024);\n            console.log(`Web Storage quota used: ${percentageUsed}%, ${usedMB}MB`);\n            Metrics.valueEvent(STORAGE, \"browserQuota\", \"percentUsed\", percentageUsed);\n            Metrics.valueEvent(STORAGE, \"browserQuota\", \"usedMB\", usedMB);\n        }\n    }\n    function sendPlatformMetrics() {\n        Metrics.countEvent(PLATFORM, \"os\", brackets.platform);\n        Metrics.countEvent(PLATFORM, \"os.flavor\", brackets.getPlatformInfo());\n        Metrics.countEvent(PLATFORM, \"userAgent\", window.navigator.userAgent);\n        Metrics.countEvent(PLATFORM, \"languageOS\", brackets.app.language);\n        Metrics.countEvent(PLATFORM, \"languageBrackets\", brackets.getLocale());\n        Metrics.countEvent(PLATFORM, \"bracketsVersion\", brackets.metadata.version);\n        _emitDeviceTypeMetrics();\n        _emitBrowserMetrics();\n        _emitMobileMetricsIfPresent();\n        _sendStorageMetrics();\n    }\n\n    // Performance\n    function sendStartupPerformanceMetrics() {\n        const healthReport = PerfUtils.getHealthReport();\n        Metrics.valueEvent(PERFORMANCE, \"startup\", \"AppStartupTime\",\n            Number(healthReport[\"AppStartupTime\"]));\n        Metrics.valueEvent(PERFORMANCE, \"startup\", \"ModuleDepsResolved\",\n            Number(healthReport[\"ModuleDepsResolved\"]));\n    }\n\n    // Themes\n    function _getCurrentTheme() {\n        // TODO: currently phoenix only have default themes, but in future, we should ensure that only themes in the\n        //  registry and user installed are logged for privacy.\n        return themesPref.get(\"theme\") || \"default\";\n    }\n    function sendThemesMetrics() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.THEMES, \"currentTheme\", _getCurrentTheme());\n    }\n\n    exports.sendPlatformMetrics = sendPlatformMetrics;\n    exports.sendStartupPerformanceMetrics = sendStartupPerformanceMetrics;\n    exports.sendThemesMetrics = sendThemesMetrics;\n    // TODO: send extension metrics\n});\n"],"file":"SendToAnalytics.js"}