{"version":3,"sources":["extensions/default/Phoenix-Markdown/paragraphs.js"],"names":["define","require","exports","module","PreferencesManager","prefs","brackets","getModule","getExtensionPrefs","BLANK_LINE","NEW_PARA","START_MATTER","LAST_WHITESPACE","_repeat","str","n","i","output","_makeLineParagraph","editor","lineNum","thisLine","document","getLine","test","nextLine","loc","line","ch","replaceRange","_findParagraphStart","fromLine","curLine","_reflowParagraph","startLine","maxLength","input","startMatter","startSearch","exec","length","search","substring","result","index","trim","start","end","_reflowSelections","selections","getSelections","j","firstLine","Number","MAX_VALUE","endLine","paraStart","_insertLine","lineno","pos","paragraph","hasSelection","cursor","getCursorPos","reflow","get","codeblock","setCursorPos"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2016 Alan Hohn\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\n/*global define, brackets */\n\ndefine(function (require, exports, module) {\n\n\n    var PreferencesManager = brackets.getModule(\"preferences/PreferencesManager\");\n\n    var prefs = PreferencesManager.getExtensionPrefs(\"markdownbar\");\n\n    var BLANK_LINE = /^\\s*$/;\n    var NEW_PARA = /^(\\s*$|\\*\\s|\\s*\\*\\s|\\d\\.\\s|\\s*\\d\\.\\s|>\\s|\\|)/;\n    var START_MATTER = /^\\s*(\\*\\s+|\\d\\.\\s+|>\\s+|\\|\\s+)/;\n    var LAST_WHITESPACE = /\\s\\S*$/;\n\n    function _repeat(str, n) {\n        var i, output = '';\n        for (i = 0; i < n; i++) {\n            output += str;\n        }\n        return output;\n    }\n\n    function _makeLineParagraph(editor, lineNum) {\n        var thisLine = editor.document.getLine(lineNum);\n        if (!BLANK_LINE.test(thisLine)) {\n            var nextLine = editor.document.getLine(lineNum + 1);\n            if (!NEW_PARA.test(nextLine)) {\n                var loc = {line: lineNum + 1, ch: 0};\n                editor.document.replaceRange('\\n', loc, loc, \"+mdpara\");\n            }\n        }\n    }\n\n    function _findParagraphStart(editor, fromLine) {\n        var curLine = fromLine;\n        while (curLine > 0) {\n            var line = editor.document.getLine(curLine);\n            if (BLANK_LINE.test(line)) {\n                return curLine + 1;\n            } else if (NEW_PARA.test(line)) {\n                return curLine;\n            }\n            curLine--;\n        }\n        return 0;\n    }\n\n    function _reflowParagraph(editor, startLine, maxLength) {\n        var curLine = startLine;\n        var line = editor.document.getLine(curLine);\n        if (!line) {\n            return;\n        }\n        var input = line;\n        var output = \"\";\n        var startMatter = \"\";\n        var startSearch = START_MATTER.exec(line);\n        if (startSearch) {\n            startMatter = _repeat(\" \", startSearch[0].length);\n        }\n        while (true) {\n            while (input.length > maxLength) {\n                var search = input.substring(0, maxLength - 1);\n                var result = LAST_WHITESPACE.exec(search);\n                if (result) {\n                    output += input.substring(0, result.index) + \"\\n\" + startMatter;\n                    input = input.substring(result.index + 1);\n                } else {\n                    // Line with no whitespace, bail\n                    break;\n                }\n            }\n            line = editor.document.getLine(curLine + 1);\n            if (line && !NEW_PARA.test(line)) {\n                curLine++;\n                input = input.trim() + \" \" + line.trim();\n            } else {\n                break;\n            }\n        }\n        output += input + \"\\n\";\n        var start = {line: startLine, ch: 0};\n        var end = {line: curLine + 1, ch: 0};\n        editor.document.replaceRange(output, start, end, \"+mdflow\");\n    }\n\n    function _reflowSelections(editor, maxLength) {\n        var selections = editor.getSelections();\n        var i, j, firstLine = Number.MAX_VALUE;\n        for (i = selections.length - 1; i >= 0; i--) {\n            var startLine = selections[i].start.line;\n            var endLine = selections[i].end.line;\n            if (selections[i].end.ch === 0) {\n                endLine--;\n            }\n            for (j = endLine; j >= startLine; j--) {\n                if (j < firstLine) {\n                    var paraStart = _findParagraphStart(editor, j);\n                    firstLine = paraStart;\n                    _reflowParagraph(editor, paraStart, maxLength);\n                }\n            }\n        }\n    }\n\n    function _insertLine(editor, lineno, line) {\n        var pos = {line: lineno, ch: 0};\n        editor.document.replaceRange(line, pos, pos, \"+mdbar\");\n    }\n\n    exports.paragraph = function (editor) {\n        if (editor.hasSelection()) {\n            var selections = editor.getSelections();\n            var i, j;\n            for (i = selections.length - 1; i >= 0; i--) {\n                var startLine = selections[i].start.line;\n                var endLine = selections[i].end.line;\n                if (selections[i].end.ch === 0) {\n                    endLine--;\n                }\n                for (j = endLine; j >= startLine; j--) {\n                    _makeLineParagraph(editor, j);\n                }\n            }\n        } else {\n            var cursor = editor.getCursorPos(false, \"to\");\n            _makeLineParagraph(editor, cursor.line);\n        }\n    };\n\n    exports.reflow = function (editor) {\n        var maxLength = prefs.get(\"maxLength\");\n        if (editor.hasSelection()) {\n            _reflowSelections(editor, maxLength);\n        } else {\n            var cursor = editor.getCursorPos(false, \"to\");\n            var startLine = _findParagraphStart(editor, cursor.line);\n            _reflowParagraph(editor, startLine, maxLength);\n        }\n    };\n\n    exports.codeblock = function (editor) {\n        if (editor.hasSelection()) {\n            var i, selections = editor.getSelections();\n            for (i = selections.length - 1; i >= 0; i--) {\n                var startLine = selections[i].start.line;\n                var endLine = selections[i].end.line + 1;\n                if (selections[i].end.ch === 0) {\n                    endLine--;\n                }\n                _insertLine(editor, endLine, '```\\n\\n');\n                _insertLine(editor, startLine, '\\n```\\n');\n            }\n        } else {\n            var cursor = editor.getCursorPos(false, \"to\");\n            _insertLine(editor, cursor.line, '\\n```\\n\\n```\\n\\n');\n            editor.setCursorPos({line: cursor.line + 2, ch: 0});\n        }\n    };\n\n});\n"],"file":"paragraphs.js"}