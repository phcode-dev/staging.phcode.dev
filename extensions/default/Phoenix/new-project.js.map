{"version":3,"sources":["extensions/default/Phoenix/new-project.js"],"names":["define","require","exports","module","Dialogs","brackets","getModule","Mustache","newProjectTemplate","Strings","StringUtils","ExtensionInterface","CommandManager","Commands","Menus","Metrics","DefaultDialogs","FileSystem","FileUtils","ProjectManager","EventDispatcher","createProjectDialogue","replaceProjectDialogue","replaceKeepProjectDialogue","guidedTour","utils","makeEventDispatcher","NEW_PROJECT_INTERFACE","MAX_DEDUPE_COUNT","registerExtensionInterface","newProjectDialogueObj","createProjectDialogueObj","downloadCancelled","_showNewProjectDialogue","window","testEnvironment","templateVars","newProjectURL","Phoenix","baseURL","dialogueContents","render","showModalDialogUsingTemplate","setTimeout","document","getElementById","contentWindow","focus","countEvent","EVENT_TYPE","NEW_PROJECT","_addMenuEntries","register","CMD_PROJECT_NEW","FILE_NEW_PROJECT","fileMenu","getMenu","AppMenuBar","FILE_MENU","addMenuItem","AFTER","FILE_NEW","closeDialogue","close","trigger","EVENT_NEW_PROJECT_DIALOGUE_CLOSED","startTourIfNeeded","showErrorDialogue","title","message","showModalDialog","DIALOG_ID_ERROR","openFolder","showOpenFilePicker","UNSUPPORTED_BROWSER","UNSUPPORTED_BROWSER_OPEN_FOLDER","execute","FILE_OPEN_FOLDER","then","init","_showProjectErrorDialogue","desc","projectPath","err","format","ERROR_LOADING_PROJECT","_showReplaceProjectConfirmDialogue","DIRECTORY_REPLACE_MESSAGE","MESSAGE","_showReplaceKeepProjectConfirmDialogue","_checkIfPathIsWritable","path","Promise","resolve","reject","file","getFileForPath","writeText","done","fail","async","_validateProjectFolder","dir","getDirectoryForPath","displayPath","replace","VFS","getMountDir","REQUEST_NATIVE_FILE_SYSTEM_ERROR","NOT_FOUND_ERR","getContents","contents","READ_DIRECTORY_ENTRIES_ERROR","_resolveIfWritable","catch","length","id","DIALOG_BTN_OK","_findFreeFolderName","basePath","i","newPath","exists","existsAsync","ensureExistsDirAsync","e","alreadyExists","suggestedProjectName","getLocalProjectsPath","_getSuggestedProjectDir","DIALOG_BTN_CANCEL","_showCreateProjectDialogue","TITLE","_closeCreateProjectDialogue","_updateCreateProjectDialogueMessage","el","textContent","_unzipProject","data","flattenFirstLevelInZip","UNZIP_IN_PROGRESS","DOWNLOAD_COMPLETE","unzipFileToLocation","downloadAndOpenProject","downloadURL","console","log","SETTING_UP_PROJECT","DOWNLOADING","JSZipUtils","getBinaryContent","callback","error","DOWNLOAD_FAILED","DOWNLOAD_FAILED_MESSAGE","openProject","UNZIP_FAILED","progress","status","percent","Math","round","abortCheck","showFolderSelect","showOpenDialog","CHOOSE_FOLDER","files","getWelcomeProjectPath","getExploreProjectPath"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global Phoenix*/\n\ndefine(function (require, exports, module) {\n    const Dialogs = brackets.getModule(\"widgets/Dialogs\"),\n        Mustache = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        newProjectTemplate = require(\"text!html/new-project-template.html\"),\n        Strings = brackets.getModule(\"strings\"),\n        StringUtils = brackets.getModule(\"utils/StringUtils\"),\n        ExtensionInterface = brackets.getModule(\"utils/ExtensionInterface\"),\n        CommandManager = brackets.getModule(\"command/CommandManager\"),\n        Commands = brackets.getModule(\"command/Commands\"),\n        Menus = brackets.getModule(\"command/Menus\"),\n        Metrics = brackets.getModule(\"utils/Metrics\"),\n        DefaultDialogs = brackets.getModule(\"widgets/DefaultDialogs\"),\n        FileSystem = brackets.getModule(\"filesystem/FileSystem\"),\n        FileUtils = brackets.getModule(\"file/FileUtils\"),\n        ProjectManager = brackets.getModule(\"project/ProjectManager\"),\n        EventDispatcher     = brackets.getModule(\"utils/EventDispatcher\"),\n        createProjectDialogue = require(\"text!html/create-project-dialogue.html\"),\n        replaceProjectDialogue = require(\"text!html/replace-project-dialogue.html\"),\n        replaceKeepProjectDialogue = require(\"text!html/replace-keep-project-dialogue.html\"),\n        guidedTour = require(\"guided-tour\"),\n        utils = require(\"utils\");\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    const NEW_PROJECT_INTERFACE = \"Extn.Phoenix.newProject\",\n        MAX_DEDUPE_COUNT = 10000;\n\n    ExtensionInterface.registerExtensionInterface(NEW_PROJECT_INTERFACE, exports);\n\n    let newProjectDialogueObj,\n        createProjectDialogueObj,\n        downloadCancelled = false;\n\n    function _showNewProjectDialogue() {\n        if(window.testEnvironment){\n            return;\n        }\n        let templateVars = {\n            Strings: Strings,\n            newProjectURL: `${window.Phoenix.baseURL}assets/new-project/code-editor.html`\n        };\n        let dialogueContents = Mustache.render(newProjectTemplate, templateVars);\n        newProjectDialogueObj = Dialogs.showModalDialogUsingTemplate(dialogueContents, true);\n        setTimeout(()=>{\n            document.getElementById(\"newProjectFrame\").contentWindow.focus();\n        }, 100);\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"dialogue\", \"open\");\n    }\n\n    function _addMenuEntries() {\n        CommandManager.register(Strings.CMD_PROJECT_NEW, Commands.FILE_NEW_PROJECT, _showNewProjectDialogue);\n        const fileMenu = Menus.getMenu(Menus.AppMenuBar.FILE_MENU);\n        fileMenu.addMenuItem(Commands.FILE_NEW_PROJECT, \"Alt-Shift-N\", Menus.AFTER, Commands.FILE_NEW);\n    }\n\n    function closeDialogue() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.NEW_PROJECT, \"dialogue\", \"open\");\n        newProjectDialogueObj.close();\n        exports.trigger(exports.EVENT_NEW_PROJECT_DIALOGUE_CLOSED);\n        guidedTour.startTourIfNeeded();\n    }\n\n    function showErrorDialogue(title, message) {\n        Dialogs.showModalDialog(\n            DefaultDialogs.DIALOG_ID_ERROR,\n            title,\n            message\n        );\n    }\n\n    function openFolder () {\n        if(!window.showOpenFilePicker){\n            showErrorDialogue(\n                Strings.UNSUPPORTED_BROWSER,\n                Strings.UNSUPPORTED_BROWSER_OPEN_FOLDER\n            );\n        }\n        CommandManager.execute(Commands.FILE_OPEN_FOLDER).then(closeDialogue);\n    }\n\n    function init() {\n        _addMenuEntries();\n        _showNewProjectDialogue();\n    }\n\n    function _showProjectErrorDialogue(desc, projectPath, err) {\n        let message = StringUtils.format(desc, projectPath, err);\n        showErrorDialogue(Strings.ERROR_LOADING_PROJECT, message);\n    }\n\n    function _showReplaceProjectConfirmDialogue(projectPath) {\n        let message = StringUtils.format(Strings.DIRECTORY_REPLACE_MESSAGE, projectPath);\n        let templateVars = {\n            Strings: Strings,\n            MESSAGE: message\n        };\n        return Dialogs.showModalDialogUsingTemplate(Mustache.render(replaceProjectDialogue, templateVars));\n    }\n\n    function _showReplaceKeepProjectConfirmDialogue(projectPath) {\n        let message = StringUtils.format(Strings.DIRECTORY_REPLACE_MESSAGE, projectPath);\n        let templateVars = {\n            Strings: Strings,\n            MESSAGE: message\n        };\n        return Dialogs.showModalDialogUsingTemplate(Mustache.render(replaceKeepProjectDialogue, templateVars));\n    }\n\n    function _checkIfPathIsWritable(path) {\n        // this is needed as for fs access APIs in native folders, the browser will ask an additional write permission\n        // to the user. We have to validate that before proceeding.\n        // We do this by writing a file `.brackets.json` to the folder\n        return new Promise((resolve, reject)=>{\n            let file = FileSystem.getFileForPath(`${path}/.brackets.json`);\n            FileUtils.writeText(file, \"{}\", true)\n                .done(resolve)\n                .fail(reject);\n        });\n    }\n\n    async function _validateProjectFolder(projectPath) {\n        return new Promise((resolve, reject)=>{\n            let dir = FileSystem.getDirectoryForPath(projectPath);\n            let displayPath = projectPath.replace(Phoenix.VFS.getMountDir(), \"\");\n            if(!dir){\n                _showProjectErrorDialogue(Strings.REQUEST_NATIVE_FILE_SYSTEM_ERROR, displayPath, Strings.NOT_FOUND_ERR);\n                reject();\n            }\n            dir.getContents(function (err, contents) {\n                if (err) {\n                    _showProjectErrorDialogue(Strings.READ_DIRECTORY_ENTRIES_ERROR, displayPath, Strings.NOT_FOUND_ERR);\n                    reject();\n                    return;\n                }\n                function _resolveIfWritable() {\n                    _checkIfPathIsWritable(projectPath)\n                        .then(resolve)\n                        .catch(reject);\n                }\n                if(contents.length >0){\n                    _showReplaceProjectConfirmDialogue(displayPath).done(function (id) {\n                        if (id === Dialogs.DIALOG_BTN_OK) {\n                            _resolveIfWritable();\n                            return;\n                        }\n                        reject();\n                    });\n                } else {\n                    _resolveIfWritable();\n                }\n            });\n        });\n    }\n\n    async function _findFreeFolderName(basePath) {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            try {\n                for(let i=0; i< MAX_DEDUPE_COUNT; i++){\n                    let newPath = `${basePath}-${i}`;\n                    let exists = await window.Phoenix.VFS.existsAsync(newPath);\n                    if(!exists){\n                        await window.Phoenix.VFS.ensureExistsDirAsync(newPath);\n                        resolve(newPath);\n                        return;\n                    }\n                }\n                reject();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async function alreadyExists(suggestedProjectName) {\n        let projectPath = `${ProjectManager.getLocalProjectsPath()}${suggestedProjectName}`; // try suggested path first\n        return window.Phoenix.VFS.existsAsync(projectPath);\n    }\n\n    async function _getSuggestedProjectDir(suggestedProjectName) {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            try{\n                // try suggested path first\n                let projectPath = `${ProjectManager.getLocalProjectsPath()}${suggestedProjectName}`;\n                let exists = await window.Phoenix.VFS.existsAsync(projectPath);\n                if(!exists){\n                    resolve(projectPath);\n                    return;\n                }\n                _showReplaceKeepProjectConfirmDialogue(suggestedProjectName).done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_OK) {\n                        resolve(projectPath);\n                        return;\n                    } else if(id === Dialogs.DIALOG_BTN_CANCEL){\n                        reject();\n                        return;\n                    }\n                    _findFreeFolderName(projectPath)\n                        .then(projectPath=>resolve(projectPath))\n                        .catch(reject);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    function _showCreateProjectDialogue(title, message) {\n        let templateVars = {\n            Strings: Strings,\n            TITLE: title,\n            MESSAGE: message\n        };\n        createProjectDialogueObj=\n            Dialogs.showModalDialogUsingTemplate(Mustache.render(createProjectDialogue, templateVars));\n        return createProjectDialogueObj;\n    }\n\n    function _closeCreateProjectDialogue() {\n        createProjectDialogueObj.close();\n    }\n\n    function _updateCreateProjectDialogueMessage(message, title) {\n        let el = document.getElementById('new-prj-msg-dlg-message');\n        if(el){\n            el.textContent = message;\n        }\n        el = document.getElementById('new-prj-msg-dlg-title');\n        if(el && title){\n            el.textContent = title;\n        }\n    }\n\n    function _unzipProject(data, projectPath, flattenFirstLevelInZip) {\n        return new Promise((resolve, reject)=>{\n            _updateCreateProjectDialogueMessage(Strings.UNZIP_IN_PROGRESS, Strings.DOWNLOAD_COMPLETE);\n            utils.unzipFileToLocation(data, projectPath, flattenFirstLevelInZip)\n                .then(resolve)\n                .catch(reject);\n        });\n    }\n\n    /**\n     *\n     * @param downloadURL\n     * @param projectPath\n     * @param suggestedProjectName\n     * @param flattenFirstLevelInZip if set to true, then if zip contents are nested inside a directory, the nexted dir\n     * will be removed in the path structure in destination. For Eg. some Zip may contain a `contents` folder inside the\n     * zip which has all the contents. If we blindly extract the zio, all the contents will be placed inside a\n     * `contents` folder in root and not the root dir itself.\n     * See a sample zip file here: https://api.github.com/repos/StartBootstrap/startbootstrap-grayscales/zipball\n     * @returns {Promise<void>}\n     */\n    async function downloadAndOpenProject(downloadURL, projectPath, suggestedProjectName, flattenFirstLevelInZip) {\n        return new Promise(async (resolve, reject)=>{ // eslint-disable-line\n            try {\n                // if project path is null, create one in default folder\n                if(!projectPath){\n                    projectPath = await _getSuggestedProjectDir(suggestedProjectName);\n                } else {\n                    await _validateProjectFolder(projectPath);\n                }\n                console.log(\n                    `downloadAndOpenProject ${suggestedProjectName} from URL: ${downloadURL} to: ${projectPath}`);\n\n                downloadCancelled = false;\n                _showCreateProjectDialogue(Strings.SETTING_UP_PROJECT, Strings.DOWNLOADING).done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_CANCEL) {\n                        downloadCancelled = true;\n                    }\n                });\n                window.JSZipUtils.getBinaryContent(downloadURL, {\n                    callback: async function(err, data) {\n                        if(downloadCancelled){\n                            reject();\n                        } else if(err) {\n                            console.error(\"could not load phoenix default project from zip file!\", err);\n                            _closeCreateProjectDialogue();\n                            showErrorDialogue(Strings.DOWNLOAD_FAILED, Strings.DOWNLOAD_FAILED_MESSAGE);\n                            reject();\n                        } else {\n                            _unzipProject(data, projectPath, flattenFirstLevelInZip)\n                                .then(()=>{\n                                    _closeCreateProjectDialogue();\n                                    ProjectManager.openProject(projectPath)\n                                        .then(resolve)\n                                        .fail(reject);\n                                    console.log(\"Project Setup complete: \", projectPath);\n                                })\n                                .catch(()=>{\n                                    _closeCreateProjectDialogue();\n                                    showErrorDialogue(Strings.ERROR_LOADING_PROJECT, Strings.UNZIP_FAILED);\n                                    reject();\n                                });\n                        }\n                    },\n                    progress: function (status){\n                        if(status.percent > 0){\n                            _updateCreateProjectDialogueMessage(\n                                `${Strings.DOWNLOADING} ${Math.round(status.percent)}%`);\n                        }\n                    },\n                    abortCheck: function (){\n                        return downloadCancelled;\n                    }\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    function showFolderSelect() {\n        return new Promise((resolve, reject)=>{\n            FileSystem.showOpenDialog(false, true, Strings.CHOOSE_FOLDER, '', null, function (err, files) {\n                if(err || files.length !== 1){\n                    reject();\n                    return;\n                }\n                resolve(files[0]);\n            });\n        });\n    }\n\n    exports.init = init;\n    exports.openFolder = openFolder;\n    exports.closeDialogue = closeDialogue;\n    exports.downloadAndOpenProject = downloadAndOpenProject;\n    exports.showFolderSelect = showFolderSelect;\n    exports.showErrorDialogue = showErrorDialogue;\n    exports.alreadyExists = alreadyExists;\n    exports.Metrics = Metrics;\n    exports.EVENT_NEW_PROJECT_DIALOGUE_CLOSED = \"newProjectDlgClosed\";\n    exports.getWelcomeProjectPath = ProjectManager.getWelcomeProjectPath;\n    exports.getExploreProjectPath = ProjectManager.getExploreProjectPath;\n    exports.getLocalProjectsPath = ProjectManager.getLocalProjectsPath;\n    exports.getMountDir = Phoenix.VFS.getMountDir;\n});\n"],"file":"new-project.js"}