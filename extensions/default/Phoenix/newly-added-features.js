define(function(require,exports,module){const FileViewController=brackets.getModule("project/FileViewController"),DocumentManager=brackets.getModule("document/DocumentManager"),FileSystem=brackets.getModule("filesystem/FileSystem"),FileUtils=brackets.getModule("file/FileUtils"),Dialogs=brackets.getModule("widgets/Dialogs"),DefaultDialogs=brackets.getModule("widgets/DefaultDialogs"),Strings=brackets.getModule("strings"),Metrics=brackets.getModule("utils/Metrics");function _getUpdateMarkdownURL(){return Phoenix.baseURL+"assets/default-project/en/Newly_added_features.md"}function _getUpdateMarkdownLocalPath(){return Phoenix.VFS.getDefaultProjectDir()+"Newly_added_features.md"}async function _digestMessage(message){const msgUint8=(new TextEncoder).encode(message),hashBuffer=await crypto.subtle.digest("SHA-256",msgUint8),hashArray=Array.from(new Uint8Array(hashBuffer)),hashHex=hashArray.map(b=>b.toString(16).padStart(2,"0")).join("");return hashHex}async function _getUpdateMarkdownText(){return new Promise((resolve,reject)=>{fetch(_getUpdateMarkdownURL()).then(response=>response.text()).then(async function(text){resolve(text)}).catch(reject)})}function _showNewFeatureMarkdownDoc(){setTimeout(()=>{FileViewController.openFileAndAddToWorkingSet(_getUpdateMarkdownLocalPath()),Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM,"newFeatMD","shown")},3e3)}function _showReloadForUpdateDialog(){setTimeout(()=>{window.Phoenix.updatePendingReload&&(Dialogs.showModalDialog(DefaultDialogs.DIALOG_ID_INFO,Strings.UPDATE_AVAILABLE_TITLE,Strings.UPDATE_RELOAD_APP),Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM,"updateDlg","shown"))},5e3)}async function _readMarkdownTextFile(){try{let markdownFile=FileSystem.getFileForPath(_getUpdateMarkdownLocalPath());return await window.jsPromise(DocumentManager.getDocumentText(markdownFile))}catch(e){return""}}async function _showNewUpdatesIfPresent(){let newMarkdownText=await _getUpdateMarkdownText(),currentMarkdownText=await _readMarkdownTextFile();const hash=await _digestMessage(newMarkdownText),lastShownHash=await _digestMessage(currentMarkdownText);if(hash!==lastShownHash){let markdownFile=FileSystem.getFileForPath(_getUpdateMarkdownLocalPath());FileUtils.writeText(markdownFile,newMarkdownText,!0).done(_showNewFeatureMarkdownDoc).fail(e=>{console.error("Error while showing new feature markdown on update",e)})}_showReloadForUpdateDialog()}exports.init=function(){Phoenix.firstBoot||window.testEnvironment||_showNewUpdatesIfPresent()}});
//# sourceMappingURL=newly-added-features.js.map
