{"version":3,"sources":["extensions/default/Phoenix/newly-added-features.js"],"names":["define","require","exports","module","CommandManager","brackets","getModule","Commands","NEW_FEATURE_MARKDOWN_SHOWN_HASH","_getUpdateMarkdownPath","Phoenix","baseURL","async","_digestMessage","message","msgUint8","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","_getUpdateMarkdownText","Promise","resolve","reject","fetch","then","response","text","catch","_setUpdateShown","markdownText","hash","localStorage","setItem","_showNewFeatureMarkdownDoc","setTimeout","execute","FILE_OPEN","fullPath","_showNewUpdatesIfPresent","lastShownHash","getItem","init","firstBoot","window","testEnvironment"],"mappings":"AAsBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,eAAqBC,SAASC,UAAU,0BAC1CC,SAAqBF,SAASC,UAAU,oBAEtCE,gCAAkC,qCAExC,SAASC,yBACL,OAAOC,QAAQC,QAAU,oDAG7BC,eAAeC,eAAeC,SAC1B,MAAMC,UAAW,IAAIC,aAAcC,OAAOH,SACpCI,iBAAmBC,OAAOC,OAAOC,OAAO,UAAWN,UACnDO,UAAYC,MAAMC,KAAK,IAAIC,WAAWP,aACtCQ,QAAUJ,UAAUK,IAAIC,GAAKA,EAAEC,SAAS,IAAIC,SAAS,EAAG,MAAMC,KAAK,IACzE,OAAOL,QAGXd,eAAeoB,yBACX,OAAO,IAAIC,QAAQ,CAACC,QAASC,UACzBC,MAAM3B,0BACD4B,KAAKC,UAAYA,SAASC,QAC1BF,KAAKzB,eAAgB2B,MAClBL,QAAQK,QAEXC,MAAML,UAInBvB,eAAe6B,kBACX,IAAIC,mBAAqBV,yBACzB,MAAMW,WAAa9B,eAAe6B,cAClCE,aAAaC,QAAQrC,gCAAiCmC,MAG1D,SAASG,6BAELC,WAAW,KACP3C,eAAe4C,QAAQzC,SAAS0C,UAAW,CACvCC,SAAUzC,4BAEf,KAGPG,eAAeuC,2BACX,IAAIT,mBAAqBV,yBACzB,MAAMW,WAAa9B,eAAe6B,cAC5BU,cAAgBR,aAAaS,QAAQ7C,iCACxCmC,OAASS,gBACRN,mCACML,mBAIdvC,QAAQoD,KAAO,WACP5C,QAAQ6C,WAAcC,OAAOC,gBAIjChB,kBAHIU","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals Phoenix, JSZip, Filer*/\n\ndefine(function (require, exports, module) {\n    const CommandManager     = brackets.getModule(\"command/CommandManager\"),\n        Commands           = brackets.getModule(\"command/Commands\");\n\n    const NEW_FEATURE_MARKDOWN_SHOWN_HASH = \"Newly_added_features.md.shown.hash\";\n\n    function _getUpdateMarkdownPath() {\n        return Phoenix.baseURL + \"assets/default-project/en/Newly_added_features.md\";\n    }\n\n    async function _digestMessage(message) {\n        const msgUint8 = new TextEncoder().encode(message);                           // encode as (utf-8) Uint8Array\n        const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);           // hash the message\n        const hashArray = Array.from(new Uint8Array(hashBuffer));                     // convert buffer to byte array\n        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); // convert bytes to hex string\n        return hashHex;\n    }\n\n    async function _getUpdateMarkdownText() {\n        return new Promise((resolve, reject)=>{\n            fetch(_getUpdateMarkdownPath())\n                .then(response => response.text())\n                .then(async function (text) {\n                    resolve(text);\n                })\n                .catch(reject);\n        });\n    }\n\n    async function _setUpdateShown() {\n        let markdownText = await _getUpdateMarkdownText();\n        const hash = await _digestMessage(markdownText);\n        localStorage.setItem(NEW_FEATURE_MARKDOWN_SHOWN_HASH, hash);\n    }\n\n    function _showNewFeatureMarkdownDoc() {\n        // We wait for few seconds after boot to grab user attention\n        setTimeout(()=>{\n            CommandManager.execute(Commands.FILE_OPEN, {\n                fullPath: _getUpdateMarkdownPath()\n            });\n        }, 3000);\n    }\n\n    async function _showNewUpdatesIfPresent() {\n        let markdownText = await _getUpdateMarkdownText();\n        const hash = await _digestMessage(markdownText);\n        const lastShownHash = localStorage.getItem(NEW_FEATURE_MARKDOWN_SHOWN_HASH);\n        if(hash !== lastShownHash){\n            _showNewFeatureMarkdownDoc();\n            await _setUpdateShown();\n        }\n    }\n\n    exports.init = function () {\n        if(!Phoenix.firstBoot && !window.testEnvironment){\n            _showNewUpdatesIfPresent();\n            return;\n        }\n        _setUpdateShown();\n    };\n});\n"],"file":"newly-added-features.js"}