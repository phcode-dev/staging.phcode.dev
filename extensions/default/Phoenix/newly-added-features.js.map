{"version":3,"sources":["extensions/default/Phoenix/newly-added-features.js"],"names":["define","require","exports","module","FileViewController","brackets","getModule","DocumentManager","FileSystem","FileUtils","Dialogs","DefaultDialogs","Strings","Metrics","_getUpdateMarkdownURL","Phoenix","baseURL","_getUpdateMarkdownLocalPath","VFS","getDefaultProjectDir","async","_digestMessage","message","msgUint8","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","_getUpdateMarkdownText","Promise","resolve","reject","fetch","then","response","text","catch","_showNewFeatureMarkdownDoc","setTimeout","openFileAndAddToWorkingSet","countEvent","EVENT_TYPE","PLATFORM","_showReloadForUpdateDialog","window","updatePendingReload","showModalDialog","DIALOG_ID_INFO","UPDATE_AVAILABLE_TITLE","UPDATE_RELOAD_APP","_readMarkdownTextFile","markdownFile","getFileForPath","jsPromise","getDocumentText","e","_showNewUpdatesIfPresent","newMarkdownText","currentMarkdownText","hash","lastShownHash","writeText","done","fail","console","error","init","firstBoot","testEnvironment"],"mappings":"AAsBAA,OAAO,SAAUC,QAASC,QAASC,QAC/B,MAAMC,mBAAwBC,SAASC,UAAU,8BAC7CC,gBAAkBF,SAASC,UAAU,4BACrCE,WAAaH,SAASC,UAAU,yBAChCG,UAAYJ,SAASC,UAAU,kBAC/BI,QAAUL,SAASC,UAAU,mBAC7BK,eAAiBN,SAASC,UAAU,0BACpCM,QAAUP,SAASC,UAAU,WAC7BO,QAAUR,SAASC,UAAU,iBAEjC,SAASQ,wBACL,OAAOC,QAAQC,QAAU,oDAG7B,SAASC,8BACL,OAAOF,QAAQG,IAAIC,uBAAyB,0BAGhDC,eAAeC,eAAeC,SAC1B,MAAMC,UAAW,IAAIC,aAAcC,OAAOH,SACpCI,iBAAmBC,OAAOC,OAAOC,OAAO,UAAWN,UACnDO,UAAYC,MAAMC,KAAK,IAAIC,WAAWP,aACtCQ,QAAUJ,UAAUK,IAAIC,GAAKA,EAAEC,SAAS,IAAIC,SAAS,EAAG,MAAMC,KAAK,IACzE,OAAOL,QAGXd,eAAeoB,yBACX,OAAO,IAAIC,QAAQ,CAACC,QAASC,UACzBC,MAAM9B,yBACD+B,KAAKC,UAAYA,SAASC,QAC1BF,KAAKzB,eAAgB2B,MAClBL,QAAQK,QAEXC,MAAML,UAInB,SAASM,6BAELC,WAAW,KACP9C,mBAAmB+C,2BAA2BlC,+BAC9CJ,QAAQuC,WAAWvC,QAAQwC,WAAWC,SAAU,YAAa,UAC9D,KAGP,SAASC,6BACLL,WAAW,KACJM,OAAOzC,QAAQ0C,sBACd/C,QAAQgD,gBACJ/C,eAAegD,eACf/C,QAAQgD,uBACRhD,QAAQiD,mBAEZhD,QAAQuC,WAAWvC,QAAQwC,WAAWC,SAAU,YAAa,WAElE,KAGPlC,eAAe0C,wBACX,IACI,IAAIC,aAAevD,WAAWwD,eAAe/C,+BAC7C,aAAauC,OAAOS,UAAU1D,gBAAgB2D,gBAAgBH,eAChE,MAAMI,GACJ,MAAO,IAIf/C,eAAegD,2BACX,IAAIC,sBAAwB7B,yBACxB8B,0BAA4BR,wBAChC,MAAMS,WAAalD,eAAegD,iBAC5BG,oBAAsBnD,eAAeiD,qBAC3C,GAAGC,OAASC,cAAc,CACtB,IAAIT,aAAevD,WAAWwD,eAAe/C,+BAE7CR,UAAUgE,UAAUV,aAAcM,iBAAiB,GAC9CK,KAAKzB,4BACL0B,KAAMR,IACHS,QAAQC,MAAM,qDAAsDV,KAGhFZ,6BAGJrD,QAAQ4E,KAAO,WACP/D,QAAQgE,WAAcvB,OAAOwB,iBAC7BZ","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals Phoenix*/\n\ndefine(function (require, exports, module) {\n    const FileViewController    = brackets.getModule(\"project/FileViewController\"),\n        DocumentManager = brackets.getModule(\"document/DocumentManager\"),\n        FileSystem = brackets.getModule(\"filesystem/FileSystem\"),\n        FileUtils = brackets.getModule(\"file/FileUtils\"),\n        Dialogs = brackets.getModule(\"widgets/Dialogs\"),\n        DefaultDialogs = brackets.getModule(\"widgets/DefaultDialogs\"),\n        Strings = brackets.getModule(\"strings\"),\n        Metrics = brackets.getModule(\"utils/Metrics\");\n\n    function _getUpdateMarkdownURL() {\n        return Phoenix.baseURL + \"assets/default-project/en/Newly_added_features.md\";\n    }\n\n    function _getUpdateMarkdownLocalPath() {\n        return Phoenix.VFS.getDefaultProjectDir() + \"Newly_added_features.md\";\n    }\n\n    async function _digestMessage(message) {\n        const msgUint8 = new TextEncoder().encode(message);                           // encode as (utf-8) Uint8Array\n        const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);           // hash the message\n        const hashArray = Array.from(new Uint8Array(hashBuffer));                     // convert buffer to byte array\n        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); // convert bytes to hex string\n        return hashHex;\n    }\n\n    async function _getUpdateMarkdownText() {\n        return new Promise((resolve, reject)=>{\n            fetch(_getUpdateMarkdownURL())\n                .then(response => response.text())\n                .then(async function (text) {\n                    resolve(text);\n                })\n                .catch(reject);\n        });\n    }\n\n    function _showNewFeatureMarkdownDoc() {\n        // We wait for few seconds after boot to grab user attention\n        setTimeout(()=>{\n            FileViewController.openFileAndAddToWorkingSet(_getUpdateMarkdownLocalPath());\n            Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"newFeatMD\", \"shown\");\n        }, 3000);\n    }\n\n    function _showReloadForUpdateDialog() {\n        setTimeout(()=>{\n            if(window.Phoenix.updatePendingReload){\n                Dialogs.showModalDialog(\n                    DefaultDialogs.DIALOG_ID_INFO,\n                    Strings.UPDATE_AVAILABLE_TITLE,\n                    Strings.UPDATE_RELOAD_APP\n                );\n                Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM, \"updateDlg\", \"shown\");\n            }\n        }, 5000);\n    }\n\n    async function _readMarkdownTextFile() {\n        try{\n            let markdownFile = FileSystem.getFileForPath(_getUpdateMarkdownLocalPath());\n            return await window.jsPromise(DocumentManager.getDocumentText(markdownFile));\n        } catch(e){\n            return \"\";\n        }\n    }\n\n    async function _showNewUpdatesIfPresent() {\n        let newMarkdownText = await _getUpdateMarkdownText();\n        let currentMarkdownText = await _readMarkdownTextFile();\n        const hash = await _digestMessage(newMarkdownText);\n        const lastShownHash = await _digestMessage(currentMarkdownText);\n        if(hash !== lastShownHash){\n            let markdownFile = FileSystem.getFileForPath(_getUpdateMarkdownLocalPath());\n            // if the user overwrites the markdown file, then the user edited content will be nuked here.\n            FileUtils.writeText(markdownFile, newMarkdownText, true)\n                .done(_showNewFeatureMarkdownDoc)\n                .fail((e)=>{\n                    console.error(\"Error while showing new feature markdown on update\", e);\n                });\n        }\n        _showReloadForUpdateDialog();\n    }\n\n    exports.init = function () {\n        if(!Phoenix.firstBoot && !window.testEnvironment){\n            _showNewUpdatesIfPresent();\n            return;\n        }\n    };\n});\n"],"file":"newly-added-features.js"}