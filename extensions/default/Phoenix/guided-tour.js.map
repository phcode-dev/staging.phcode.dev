{"version":3,"sources":["extensions/default/Phoenix/guided-tour.js"],"names":["define","require","exports","module","NotificationUI","brackets","getModule","LiveDevelopment","ExtensionInterface","WorkspaceManager","MainViewManager","CommandManager","Commands","Strings","Menus","StringUtils","KeyBindingManager","Metrics","Dialogs","Mustache","PreferencesManager","SurveyTemplate","NOTIFICATION_BACKOFF","GUIDED_TOUR_LOCAL_STORAGE_KEY","GITHUB_STARS_POPUP_TIME","POWER_USER_SURVEY_TIME","GENERAL_SURVEY_TIME","TWO_WEEKS_IN_DAYS","USAGE_COUNTS_KEY","userAlreadyDidAction","localStorage","getItem","JSON","parse","version","clickedNewProjectIcon","beautifyCodeShown","generalSurveyShownVersion","currentlyShowingNotification","_shouldContinueCommandTracking","_startCommandTracking","commandTracker","_event","commandID","write","FILE_NEW_PROJECT","setItem","stringify","off","EVENT_BEFORE_EXECUTE_COMMAND","on","_showBeautifyNotification","editorContextMenu","getContextMenu","ContextMenuIds","EDITOR_MENU","_showNotification","setTimeout","keyboardShortcut","getKeyBindings","EDIT_BEAUTIFY_CODE","displayKey","countEvent","EVENT_TYPE","UI","createFromTemplate","format","BEAUTIFY_CODE_NOTIFICATION","allowedPlacements","autoCloseTimeS","dismissOnClick","done","EVENT_BEFORE_CONTEXT_MENU_OPEN","_showNewProjectNotification","NEW_PROJECT_NOTIFICATION","EVENT_CURRENT_FILE_CHANGE","_showPopoutLivePreviewNotification","waitAndGetExtensionInterface","_DEFAULT_EXTENSIONS_INTERFACE_NAMES","PHOENIX_LIVE_PREVIEW","then","livePreviewExtension","notificationKey","popoutMessageShown","isPanelVisible","LIVE_PREVIEW_PANEL_ID","GUIDED_LIVE_PREVIEW_POPOUT","EVENT_LIVE_PREVIEW_CLICKED","_showLivePreviewNotification","livePreviewNotificationKey","livePreviewNotificationShown","GUIDED_LIVE_PREVIEW","_loadTwitterScripts","window","twttr","twitterScript","document","createElement","setAttribute","body","appendChild","addEventListener","events","bind","ev","USER","console","error","_openStarsPopup","notification","$","GITHUB_STARS_POPUP","GITHUB_STARS_POPUP_TWITTER","find","click","createToastFromTemplate","ENJOYING_APP","_showRequestStarsPopup","lastShownDate","lastShownGithubStarsDate","nextShowDate","Date","setUTCDate","getUTCDate","currentDate","now","_showGeneralSurvey","surveyVersion","templateVars","surveyURL","showModalDialogUsingTemplate","render","_isPowerUser","usageData","getViewState","dateKeys","Object","keys","dateBefore14Days","totalUsageMinutes","totalUsageDays","dateKey","date","_openPowerUserSurvey","_showPowerUserSurvey","lastShownPowerSurveyDate","$content","POWER_USER_POPUP_TEXT","POWER_USER_POPUP_TITLE","tourStarted","startTourIfNeeded"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n    const NotificationUI = brackets.getModule(\"widgets/NotificationUI\"),\n        LiveDevelopment  = brackets.getModule(\"LiveDevelopment/main\"),\n        ExtensionInterface = brackets.getModule(\"utils/ExtensionInterface\"),\n        WorkspaceManager = brackets.getModule(\"view/WorkspaceManager\"),\n        MainViewManager  = brackets.getModule(\"view/MainViewManager\"),\n        CommandManager = brackets.getModule(\"command/CommandManager\"),\n        Commands = brackets.getModule(\"command/Commands\"),\n        Strings = brackets.getModule(\"strings\"),\n        Menus = brackets.getModule(\"command/Menus\"),\n        StringUtils = brackets.getModule(\"utils/StringUtils\"),\n        KeyBindingManager = brackets.getModule(\"command/KeyBindingManager\"),\n        Metrics = brackets.getModule(\"utils/Metrics\"),\n        Dialogs = brackets.getModule(\"widgets/Dialogs\"),\n        Mustache = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        PreferencesManager = brackets.getModule(\"preferences/PreferencesManager\"),\n        SurveyTemplate = require(\"text!html/survey-template.html\"),\n        NOTIFICATION_BACKOFF = 10000,\n        GUIDED_TOUR_LOCAL_STORAGE_KEY = \"guidedTourActions\";\n\n    const GITHUB_STARS_POPUP_TIME = 120000, // 2 min\n        POWER_USER_SURVEY_TIME = 180000, // 3 min\n        GENERAL_SURVEY_TIME = 600000, // 10 min\n        TWO_WEEKS_IN_DAYS = 14,\n        USAGE_COUNTS_KEY    = \"healthDataUsage\"; // private to phoenix, set from health data extension\n\n    const userAlreadyDidAction = localStorage.getItem(GUIDED_TOUR_LOCAL_STORAGE_KEY)\n        ? JSON.parse(localStorage.getItem(GUIDED_TOUR_LOCAL_STORAGE_KEY)) : {\n            version: 1,\n            clickedNewProjectIcon: false,\n            beautifyCodeShown: false,\n            generalSurveyShownVersion: 0\n        };\n\n    // we should only show one notification at a time\n    let currentlyShowingNotification;\n\n    function _shouldContinueCommandTracking() {\n        return (!userAlreadyDidAction.clickedNewProjectIcon); // use or ||\n    }\n\n    function _startCommandTracking() {\n        if(!_shouldContinueCommandTracking()){\n            return;\n        }\n        function commandTracker(_event, commandID) {\n            let write = false;\n            switch(commandID) {\n            case Commands.FILE_NEW_PROJECT: userAlreadyDidAction.clickedNewProjectIcon = true; write = true; break;\n            }\n            if(write){\n                localStorage.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            }\n            if(!_shouldContinueCommandTracking()){\n                CommandManager.off(CommandManager.EVENT_BEFORE_EXECUTE_COMMAND, commandTracker);\n            }\n        }\n        CommandManager.on(CommandManager.EVENT_BEFORE_EXECUTE_COMMAND, commandTracker);\n    }\n\n    /* Order of things in first boot now:\n    *  1. First we show the popup in new project window to select default project - see the html in assets folder\n    *  2. Then after user opens default project, we show \"edit code for live preview popup\"\n    *  3. When user changes file by clicking on files panel, we show \"click here to open new project window\"\n    *     this will continue showing every session until user clicks on the new project icon\n    *  4. After about 2 minutes, the GitHub stars popup will show, if not shown in the past two weeks. Repeats 2 weeks.\n    *  5. After about 3 minutes, the health popup will show up.\n    *  6. power user survey shows up if the user has used brackets for 3 days or 8 hours in the last two weeks after 3\n    *     minutes. This will not coincide with health popup due to the power user check.\n    *  7. After about 10 minutes, survey shows up.\n    *  // the rest are by user actions\n    *  a. When user clicks on live preview, we show \"click here to popout live preview\"\n    *  b. Beautification notification when user opened the editor context menu and have not done any beautification yet.\n    * */\n\n    // 3. Beautification notification when user opened the editor context menu for the first time\n    function _showBeautifyNotification() {\n        if(userAlreadyDidAction.beautifyCodeShown){\n            return;\n        }\n        let editorContextMenu = Menus.getContextMenu(Menus.ContextMenuIds.EDITOR_MENU);\n        function _showNotification() {\n            if(currentlyShowingNotification){\n                return;\n            }\n            setTimeout(()=>{\n                let keyboardShortcut = KeyBindingManager.getKeyBindings(Commands.EDIT_BEAUTIFY_CODE);\n                keyboardShortcut = (keyboardShortcut && keyboardShortcut[0]) ? keyboardShortcut[0].displayKey : \"-\";\n                userAlreadyDidAction.beautifyCodeShown =  true;\n                localStorage.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n                Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"beautify\");\n                currentlyShowingNotification = NotificationUI.createFromTemplate(\n                    StringUtils.format(Strings.BEAUTIFY_CODE_NOTIFICATION, keyboardShortcut),\n                    \"editor-context-menu-edit.beautifyCode\", {\n                        allowedPlacements: ['left', 'right'],\n                        autoCloseTimeS: 15,\n                        dismissOnClick: true}\n                );\n                currentlyShowingNotification.done(()=>{\n                    currentlyShowingNotification = null;\n                });\n                editorContextMenu.off(Menus.EVENT_BEFORE_CONTEXT_MENU_OPEN, _showNotification);\n            }, 500);\n        }\n        editorContextMenu.on(Menus.EVENT_BEFORE_CONTEXT_MENU_OPEN, _showNotification);\n    }\n\n    // 3. When user changes file by clicking on files panel, we show \"click here to open new project window\"\n    // this will continue showing every session until user clicks on the new project icon\n    function _showNewProjectNotification() {\n        if(userAlreadyDidAction.clickedNewProjectIcon){\n            return;\n        }\n        function _showNotification() {\n            if(currentlyShowingNotification){\n                return;\n            }\n            Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"newProj\");\n            currentlyShowingNotification = NotificationUI.createFromTemplate(Strings.NEW_PROJECT_NOTIFICATION,\n                \"newProject\", {\n                    allowedPlacements: ['top', 'bottom'],\n                    autoCloseTimeS: 15,\n                    dismissOnClick: true}\n            );\n            currentlyShowingNotification.done(()=>{\n                currentlyShowingNotification = null;\n            });\n            MainViewManager.off(MainViewManager.EVENT_CURRENT_FILE_CHANGE, _showNotification);\n        }\n        MainViewManager.on(MainViewManager.EVENT_CURRENT_FILE_CHANGE, _showNotification);\n    }\n\n    // 1. When user clicks on live preview, we show \"click here to popout live preview\". only shown once.\n    function _showPopoutLivePreviewNotification() {\n        ExtensionInterface.waitAndGetExtensionInterface(\n            ExtensionInterface._DEFAULT_EXTENSIONS_INTERFACE_NAMES.PHOENIX_LIVE_PREVIEW).then((livePreviewExtension)=>{\n            function _showNotification() {\n                // legacy key. cant change without triggering the user base\n                let notificationKey = 'livePreviewPopoutShown', version = \"v1\";\n                let popoutMessageShown = localStorage.getItem(notificationKey);\n                if(popoutMessageShown === version){\n                    // already shown\n                    LiveDevelopment.off(LiveDevelopment.EVENT_LIVE_PREVIEW_CLICKED, _showNotification);\n                    return;\n                }\n                if(currentlyShowingNotification){\n                    return;\n                }\n                if(WorkspaceManager.isPanelVisible(livePreviewExtension.LIVE_PREVIEW_PANEL_ID)){\n                    Metrics.countEvent(Metrics.EVENT_TYPE.UI, \"guide\", \"lp_popout\");\n                    currentlyShowingNotification = NotificationUI.createFromTemplate(Strings.GUIDED_LIVE_PREVIEW_POPOUT,\n                        \"livePreviewPopoutButton\", {\n                            allowedPlacements: ['bottom'],\n                            autoCloseTimeS: 15,\n                            dismissOnClick: true}\n                    );\n                    currentlyShowingNotification.done(()=>{\n                        currentlyShowingNotification = null;\n                    });\n                    localStorage.setItem(notificationKey, version);\n                }\n                LiveDevelopment.off(LiveDevelopment.EVENT_LIVE_PREVIEW_CLICKED, _showNotification);\n            }\n            LiveDevelopment.on(LiveDevelopment.EVENT_LIVE_PREVIEW_CLICKED, _showNotification);\n        });\n    }\n\n    // only shown once on first boot\n    // order: 2. Then after user opens default project, we show \"edit code for live preview popup\"\n    function _showLivePreviewNotification() {\n        // legacy reasons live preview notification is called new project notification.\n        const livePreviewNotificationKey = \"newProjectNotificationShown\";\n        const livePreviewNotificationShown = localStorage.getItem(livePreviewNotificationKey);\n        if(livePreviewNotificationShown){\n            return;\n        }\n        if(currentlyShowingNotification){\n            setTimeout(_showLivePreviewNotification, NOTIFICATION_BACKOFF);\n            return;\n        }\n        currentlyShowingNotification = NotificationUI.createFromTemplate(Strings.GUIDED_LIVE_PREVIEW,\n            \"main-toolbar\", {\n                allowedPlacements: ['left'],\n                autoCloseTimeS: 15,\n                dismissOnClick: true}\n        );\n        localStorage.setItem(livePreviewNotificationKey, \"true\");\n        currentlyShowingNotification.done(()=>{\n            currentlyShowingNotification = null;\n        });\n    }\n\n    function _loadTwitterScripts() {\n        // https://developer.twitter.com/en/docs/twitter-for-websites/javascript-api/guides/javascript-api\n        // we maily do this to metric the users who clicked on the tweet button\n        if(window.twttr){\n            return;\n        }\n        const twitterScript = document.createElement( 'script' );\n        twitterScript.setAttribute( 'src', \"https://platform.twitter.com/widgets.js\" );\n        document.body.appendChild( twitterScript );\n        twitterScript.addEventListener(\"load\", ()=>{\n            if(!window.twttr){\n                console.error(\"twitter scripts not loaded\");\n                return;\n            }\n            window.twttr.events.bind('click', function (ev) {\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"twit.click\", 1);\n            });\n        });\n    }\n\n    function _openStarsPopup() {\n        _loadTwitterScripts();\n        let notification = $(`${Strings.GITHUB_STARS_POPUP}\n                        <div class=\"gtstarph\" style=\"display: flex;justify-content: space-around;margin-top: 6px;\">\n                            <a class=\"github-button\"\n                             href=\"https://github.com/phcode-dev/phoenix\"\n                             data-color-scheme=\"no-preference: dark; light: dark; dark: dark;\"\n                             data-icon=\"octicon-star\"\n                             data-size=\"large\"\n                             data-show-count=\"true\"\n                             title=\"Star phcode.dev on GitHub\"\n                             aria-label=\"Star phcode-dev/phoenix on GitHub\">Star</a>\n                           <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n                        </div>\n                       ${Strings.GITHUB_STARS_POPUP_TWITTER}\n                       <div class=\"twbnpop\" style=\"display: flex;justify-content: space-around;margin-top: 6px;\">\n                            <a href=\"https://twitter.com/intent/tweet?screen_name=phcodedev&ref_src=twsrc%5Etfw\"\n                             class=\"twitter-mention-button\"\n                             data-size=\"large\"\n                             data-related=\"BracketsCont,brackets\"\n                             data-show-count=\"false\">Tweet to @phcodedev</a>\n                       </div>\n                    </div>`);\n        notification.find(\".gtstarph\").click(()=>{\n            Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"star.click\", 1);\n        });\n        NotificationUI.createToastFromTemplate(Strings.ENJOYING_APP, notification, {\n            dismissOnClick: false\n        });\n    }\n\n    function _showRequestStarsPopup() {\n        let lastShownDate = userAlreadyDidAction.lastShownGithubStarsDate;\n        let nextShowDate = new Date(lastShownDate);\n        nextShowDate.setUTCDate(nextShowDate.getUTCDate() + TWO_WEEKS_IN_DAYS);\n        let currentDate = new Date();\n        if(!lastShownDate || currentDate >= nextShowDate){\n            setTimeout(()=>{\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"star\", 1);\n                _openStarsPopup();\n                userAlreadyDidAction.lastShownGithubStarsDate = Date.now();\n                localStorage.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            }, GITHUB_STARS_POPUP_TIME);\n        }\n    }\n\n    function _showGeneralSurvey() {\n        setTimeout(()=>{\n            let surveyVersion = 5; // increment this if you want to show this again\n            var templateVars = {\n                Strings: Strings,\n                surveyURL: \"https://s.surveyplanet.com/6208d1eccd51c561fc8e59ca\"\n            };\n            if(userAlreadyDidAction.generalSurveyShownVersion !== surveyVersion){\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"survey\", \"generalShown\", 1);\n                Dialogs.showModalDialogUsingTemplate(Mustache.render(SurveyTemplate, templateVars));\n                userAlreadyDidAction.generalSurveyShownVersion = surveyVersion;\n                localStorage.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            }\n        }, GENERAL_SURVEY_TIME);\n    }\n\n    // a power user is someone who has used Phoenix at least 3 days or 8 hours in the last two weeks\n    function _isPowerUser() {\n        let usageData = PreferencesManager.getViewState(USAGE_COUNTS_KEY) || {},\n            dateKeys = Object.keys(usageData),\n            dateBefore14Days = new Date(),\n            totalUsageMinutes = 0,\n            totalUsageDays = 0;\n        dateBefore14Days.setUTCDate(dateBefore14Days.getUTCDate()-14);\n        for(let dateKey of dateKeys){\n            let date = new Date(dateKey);\n            if(date >= dateBefore14Days) {\n                totalUsageDays ++;\n                totalUsageMinutes = totalUsageMinutes + usageData[dateKey];\n            }\n        }\n        return totalUsageDays >= 3 || (totalUsageMinutes/60) >= 8;\n    }\n\n    function _openPowerUserSurvey() {\n        Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"survey\", \"powerShown\", 1);\n        const templateVars = {\n            Strings: Strings,\n            surveyURL: \"https://s.surveyplanet.com/2dgk0hbn\"\n        };\n        Dialogs.showModalDialogUsingTemplate(Mustache.render(SurveyTemplate, templateVars));\n    }\n\n    function _showPowerUserSurvey() {\n        if(_isPowerUser()) {\n            Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"power\", \"user\", 1);\n            let lastShownDate = userAlreadyDidAction.lastShownPowerSurveyDate;\n            let nextShowDate = new Date(lastShownDate);\n            nextShowDate.setUTCDate(nextShowDate.getUTCDate() + TWO_WEEKS_IN_DAYS);\n            let currentDate = new Date();\n            if(currentDate < nextShowDate){\n                return;\n            }\n            setTimeout(()=>{\n                Metrics.countEvent(Metrics.EVENT_TYPE.USER, \"notify\", \"powerSurvey\", 1);\n                let $content = $(Strings.POWER_USER_POPUP_TEXT);\n                $content.find(\"a\").click(_openPowerUserSurvey);\n                NotificationUI.createToastFromTemplate(Strings.POWER_USER_POPUP_TITLE, $content);\n                userAlreadyDidAction.lastShownPowerSurveyDate = Date.now();\n                localStorage.setItem(GUIDED_TOUR_LOCAL_STORAGE_KEY, JSON.stringify(userAlreadyDidAction));\n            }, POWER_USER_SURVEY_TIME);\n        }\n    }\n\n    let tourStarted = false;\n    exports.startTourIfNeeded = function () {\n        if(tourStarted) {\n            return;\n        }\n        tourStarted = true;\n        _showLivePreviewNotification();\n        _showPopoutLivePreviewNotification();\n        _showNewProjectNotification();\n        _startCommandTracking();\n        _showBeautifyNotification();\n        _showRequestStarsPopup();\n        _showGeneralSurvey();\n        _showPowerUserSurvey();\n    };\n});\n"],"file":"guided-tour.js"}