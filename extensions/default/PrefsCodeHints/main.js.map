{"version":3,"sources":["extensions/default/PrefsCodeHints/main.js"],"names":["define","require","exports","module","AppInit","brackets","getModule","CodeHintManager","PreferencesManager","StringMatch","ExtensionUtils","EditorManager","LanguageManager","JSONUtils","Strings","ThemeManager","CodeInspection","_","languages","getLanguages","isPrefDocument","isPrefHintsEnabled","data","language","type","description","DESCRIPTION_LANGUAGE","path","DESCRIPTION_PATH","stringMatcherOptions","preferPrefixMatches","parentKeyBlacklist","_isPrefHintsEnabled","get","_isPrefDocument","document","test","file","_name","formatHints","hints","query","hasMetadata","some","token","basicMatchSort","map","$hintItem","$","addClass","$hintObj","stringRanges","forEach","item","matched","append","text","value","PrefsCodeHints","this","ctxInfo","preferences","getAllPreferences","preference","Object","keys","pref","excludeFromHints","extend","clone","_setupTestEnvironment","testDocument","testPreferences","definePreference","DESCRIPTION_PREF_HINTS","on","e","editor","prototype","hasHints","implicitChar","getModeForSelection","getContextInfo","getCursorPos","tokenType","TOKEN_KEY","indexOf","parentKeyName","getHints","values","option","stripQuotes","string","substr","offset","trim","regexAllowedChars","key","exclusionList","match","stringMatch","TOKEN_VALUE","keyName","isArray","getProviderIDsForLanguage","getAllThemes","theme","name","valueType","val","toString","selectInitial","handleWideResults","insertHint","completion","pos","start","line","ch","end","startChar","quoteChar","jquery","find","charAt","shouldReplace","replaceRange","setCursorPos","length","appReady","hintProvider","registerHintProvider","loadStyleSheet"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2015 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    // Load dependencies.\n    var AppInit             = brackets.getModule(\"utils/AppInit\"),\n        CodeHintManager     = brackets.getModule(\"editor/CodeHintManager\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        StringMatch         = brackets.getModule(\"utils/StringMatch\"),\n        ExtensionUtils      = brackets.getModule(\"utils/ExtensionUtils\"),\n        EditorManager       = brackets.getModule(\"editor/EditorManager\"),\n        LanguageManager     = brackets.getModule(\"language/LanguageManager\"),\n        JSONUtils           = brackets.getModule(\"language/JSONUtils\"),\n        Strings             = brackets.getModule(\"strings\"),\n        ThemeManager        = brackets.getModule(\"view/ThemeManager\"),\n        CodeInspection      = brackets.getModule(\"language/CodeInspection\"),\n        _                   = brackets.getModule(\"thirdparty/lodash\"),\n        languages           = LanguageManager.getLanguages(),\n        isPrefDocument      = false,\n        isPrefHintsEnabled  = false;\n\n    // Stores data of preferences used by Brackets and its core/thirdparty extensions.\n    var data = {\n        language: {\n            type: \"object\",\n            description: Strings.DESCRIPTION_LANGUAGE\n        },\n        path: {\n            type: \"object\",\n            description: Strings.DESCRIPTION_PATH\n        }\n    };\n\n    var stringMatcherOptions = {\n        preferPrefixMatches: true\n    };\n\n    // List of parent keys for which no key hints will be provided.\n    var parentKeyBlacklist = [\n        \"language.fileExtensions\",\n        \"language.fileNames\",\n        \"path\"\n    ];\n\n    // Define a preference for code hinting.\n    PreferencesManager.definePreference(\"codehint.PrefHints\", \"boolean\", true, {\n        description: Strings.DESCRIPTION_PREF_HINTS\n    });\n\n    /**\n     * @private\n     *\n     * Determines whether or not the current document is a preferences document and\n     * user has enabled code hints\n     *\n     * @return {Boolean}\n     */\n    function _isPrefHintsEnabled() {\n        return (isPrefDocument &&\n                PreferencesManager.get(\"showCodeHints\") !== false &&\n                PreferencesManager.get(\"codehint.PrefHints\") !== false);\n    }\n\n    /**\n     * @private\n     *\n     * Determines whether or not the name of a file matches the preferences files\n     *\n     * @param {!Document} document\n     * @return {Boolean}\n     */\n    function _isPrefDocument(document) {\n        return (/^\\.?brackets\\.json$/).test(document.file._name);\n    }\n\n    // Set listeners on preference, editor and language changes.\n    PreferencesManager.on(\"change\", \"showCodeHints\", function () {\n        isPrefHintsEnabled = _isPrefHintsEnabled();\n    });\n    PreferencesManager.on(\"change\", \"codehint.PrefHints\", function () {\n        isPrefHintsEnabled = _isPrefHintsEnabled();\n    });\n    EditorManager.on(\"activeEditorChange\", function (e, editor) {\n        if (editor) {\n            isPrefDocument = _isPrefDocument(editor.document);\n        }\n        isPrefHintsEnabled = _isPrefHintsEnabled();\n    });\n    LanguageManager.on(\"languageAdded\", function () {\n        languages = LanguageManager.getLanguages();\n    });\n\n    /*\n     * Returns a sorted and formatted list of hints with the query substring\n     * highlighted.\n     *\n     * @param {Array.<Object>} hints - the list of hints to format\n     * @param {string} query - querystring used for highlighting matched\n     *      portions of each hint\n     * @return {Array.jQuery} sorted Array of jQuery DOM elements to insert\n     */\n    function formatHints(hints, query) {\n\n        var hasMetadata = hints.some(function (token) {\n            return token.type || token.description;\n        });\n\n        StringMatch.basicMatchSort(hints);\n        return hints.map(function (token) {\n            var $hintItem = $(\"<span>\").addClass(\"brackets-pref-hints\"),\n                $hintObj  = $(\"<span>\").addClass(\"hint-obj\");\n\n            // highlight the matched portion of each hint\n            if (token.stringRanges) {\n                token.stringRanges.forEach(function (item) {\n                    if (item.matched) {\n                        $hintObj.append($(\"<span>\")\n                            .text(item.text)\n                            .addClass(\"matched-hint\"));\n                    } else {\n                        $hintObj.append(item.text);\n                    }\n                });\n            } else {\n                $hintObj.text(token.value);\n            }\n\n            $hintItem.append($hintObj);\n\n            if (hasMetadata) {\n                $hintItem.data(\"type\", token.type);\n                if (token.description) {\n                    $hintItem.append($(\"<span>\")\n                                        .addClass(\"hint-description\")\n                                        .text(token.description));\n                }\n            }\n            return $hintItem;\n        });\n    }\n\n    /**\n     * @constructor\n     */\n    function PrefsCodeHints() {\n        this.ctxInfo = null;\n\n        // Add all the preferences defined except the excluded ones.\n        var preferences = PreferencesManager.getAllPreferences(),\n            preference;\n        Object.keys(preferences).forEach(function (pref) {\n            preference = preferences[pref];\n            if (preference.excludeFromHints) {\n                return;\n            }\n            data[pref] = $.extend(data[pref], preference);\n\n            // If child keys found, add them.\n            if (preference.keys) {\n                data[pref].keys = _.clone(preference.keys);\n            }\n        });\n    }\n\n    /**\n     * Determines whether or not hints are available in the current context\n     *\n     * @param {!Editor} editor\n     * @param {String} implicitChar\n     * @return {Boolean}\n     */\n    PrefsCodeHints.prototype.hasHints = function (editor, implicitChar) {\n        if (isPrefHintsEnabled && editor.getModeForSelection() === \"application/json\") {\n            this.editor = editor;\n            this.ctxInfo = JSONUtils.getContextInfo(this.editor, this.editor.getCursorPos(), true);\n\n            if (this.ctxInfo && this.ctxInfo.tokenType) {\n                // Disallow hints for blacklisted keys.\n                if (this.ctxInfo.tokenType === JSONUtils.TOKEN_KEY &&\n                        parentKeyBlacklist.indexOf(this.ctxInfo.parentKeyName) !== -1) {\n                    return false;\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n\n    /**\n     * Returns a list of hints available in the current context\n     *\n     * @param {String} implicitChar\n     * @return {!{hints: Array.<jQueryObject>, match: string, selectInitial: boolean, handleWideResults: boolean}}\n     */\n    PrefsCodeHints.prototype.getHints = function (implicitChar) {\n        var hints = [], ctxInfo, query, keys, values, option = {type: null, description: null, values: null};\n\n        ctxInfo = this.ctxInfo = JSONUtils.getContextInfo(this.editor, this.editor.getCursorPos(), true);\n\n        if (ctxInfo && ctxInfo.token) {\n            query = JSONUtils.stripQuotes(ctxInfo.token.string.substr(0, ctxInfo.offset)).trim();\n            if (JSONUtils.regexAllowedChars.test(query)) {\n                query = \"\";\n            }\n\n            if (ctxInfo.tokenType === JSONUtils.TOKEN_KEY) {\n                // Provide hints for keys\n\n                // Get options for parent key else use general options.\n                if (data[ctxInfo.parentKeyName] && data[ctxInfo.parentKeyName].keys) {\n                    keys = data[ctxInfo.parentKeyName].keys;\n                } else if (ctxInfo.parentKeyName === \"language\") {\n                    keys = languages;\n                    option.type = \"object\";\n                } else {\n                    keys = data;\n                }\n\n                hints = $.map(Object.keys(keys), function (key) {\n                    if (ctxInfo.exclusionList.indexOf(key) === -1) {\n                        var match = StringMatch.stringMatch(key, query, stringMatcherOptions);\n                        if (match) {\n                            match.type = keys[key].type || option.type;\n                            match.description = keys[key].description || null;\n                            return match;\n                        }\n                    }\n                });\n            } else if (ctxInfo.tokenType === JSONUtils.TOKEN_VALUE) {\n                // Provide hints for values.\n\n                // Get the key from data.\n                if (data[ctxInfo.parentKeyName] && data[ctxInfo.parentKeyName].keys &&\n                        data[ctxInfo.parentKeyName].keys[ctxInfo.keyName]) {\n                    option = data[ctxInfo.parentKeyName].keys[ctxInfo.keyName];\n                } else if (data[ctxInfo.keyName]) {\n                    option = data[ctxInfo.keyName];\n                }\n\n                // Get the values depending on the selected key.\n                if (option && option.type === \"boolean\") {\n                    values = [\"false\", \"true\"];\n                } else if (option && option.values && ([\"number\", \"string\"].indexOf(option.type) !== -1 ||\n                                                       (option.type === \"array\" && ctxInfo.isArray))) {\n                    values = option.values;\n                } else if (ctxInfo.isArray && ctxInfo.keyName === \"linting.prefer\" && languages[ctxInfo.parentKeyName]) {\n                    values = CodeInspection.getProviderIDsForLanguage(ctxInfo.parentKeyName);\n                } else if (ctxInfo.keyName === \"themes.theme\") {\n                    values = ThemeManager.getAllThemes().map(function (theme) {\n                        return theme.name;\n                    });\n                } else if (ctxInfo.parentKeyName === \"language.fileExtensions\" ||\n                           ctxInfo.parentKeyName === \"language.fileNames\") {\n                    values = Object.keys(languages);\n                } else {\n                    return null;\n                }\n\n                // Convert integers to strings, so StringMatch.stringMatch can match it.\n                if (option.type === \"number\" || option.valueType === \"number\") {\n                    values = values.map(function (val) {\n                        return val.toString();\n                    });\n                }\n\n                // filter through the values.\n                hints = $.map(values, function (value) {\n                    var match = StringMatch.stringMatch(value, query, stringMatcherOptions);\n                    if (match) {\n                        match.type = option.valueType || option.type;\n                        match.description = option.description || null;\n                        return match;\n                    }\n                });\n            }\n\n            return {\n                hints: formatHints(hints, query),\n                match: null,\n                selectInitial: true,\n                handleWideResults: false\n            };\n        }\n        return null;\n    };\n\n    /**\n     * Inserts a completion at current position\n     *\n     * @param {!String} completion\n     * @return {Boolean}\n     */\n    PrefsCodeHints.prototype.insertHint = function (completion) {\n        var ctxInfo = JSONUtils.getContextInfo(this.editor, this.editor.getCursorPos(), false, true),\n            pos     = this.editor.getCursorPos(),\n            start   = {line: -1, ch: -1},\n            end     = {line: -1, ch: -1},\n            startChar,\n            quoteChar,\n            type;\n\n        if (completion.jquery) {\n            type = completion.data(\"type\");\n            completion = completion.find(\".hint-obj\").text();\n        }\n        start.line = end.line = pos.line;\n\n        if (ctxInfo.tokenType === JSONUtils.TOKEN_KEY) {\n            startChar = ctxInfo.token.string.charAt(0);\n\n            // Get the quote char.\n            if (/^['\"]$/.test(startChar)) {\n                quoteChar = startChar;\n            }\n\n            // Put quotes around completion.\n            completion = quoteChar + completion + quoteChar;\n\n            // Append colon and braces, brackets and quotes.\n            if (!ctxInfo.shouldReplace) {\n                completion += \": \";\n\n                switch (type) {\n                case \"object\":\n                    completion += \"{}\";\n                    break;\n\n                case \"array\":\n                    completion += \"[]\";\n                    break;\n\n                case \"string\":\n                    completion += \"\\\"\\\"\";\n                    break;\n                }\n            }\n\n            start.ch = pos.ch - ctxInfo.offset;\n            end.ch = ctxInfo.token.end;\n            this.editor.document.replaceRange(completion, start, end);\n\n            // Place cursor inside the braces, brackets or quotes.\n            if ([\"object\", \"array\", \"string\"].indexOf(type) !== -1) {\n                this.editor.setCursorPos(start.line, start.ch + completion.length - 1);\n\n                // Start a new session in case it is an array or string.\n                if (type !== \"object\" && !ctxInfo.shouldReplace) {\n                    return true;\n                }\n                return false;\n            }\n            return true;\n        } else if (ctxInfo.tokenType === JSONUtils.TOKEN_VALUE) {\n            // In case the current token is a white-space, start and end will be same.\n            if (JSONUtils.regexAllowedChars.test(ctxInfo.token.string)) {\n                start.ch = end.ch = pos.ch;\n            } else if (ctxInfo.shouldReplace) {\n                start.ch = ctxInfo.token.start;\n                end.ch = ctxInfo.token.end;\n            } else {\n                start.ch = pos.ch - ctxInfo.offset;\n                end.ch = ctxInfo.token.end;\n            }\n\n            if (!type || type === \"string\") {\n                startChar = ctxInfo.token.string.charAt(0);\n                if (/^['\"]$/.test(startChar)) {\n                    quoteChar = startChar;\n                } else {\n                    quoteChar = \"\\\"\";\n                }\n                completion = quoteChar + completion + quoteChar;\n            }\n\n            this.editor.document.replaceRange(completion, start, end);\n            return false;\n        }\n    };\n\n    /**\n     * @private\n     *\n     * `isPrefHintsEnabled` must be set to true to allow code hints\n     *\n     * It also loads a set of preferences that we need for running unit tests, this\n     * will not break unit tests in case we add new preferences in the future.\n     *\n     * @param {!Document} testDocument\n     * @param {!Object} testPreferences\n     */\n    function _setupTestEnvironment(testDocument, testPreferences) {\n        isPrefHintsEnabled = _isPrefDocument(testDocument);\n        data = testPreferences;\n    }\n\n    AppInit.appReady(function () {\n        var hintProvider = new PrefsCodeHints();\n        CodeHintManager.registerHintProvider(hintProvider, [\"json\"], 0);\n        ExtensionUtils.loadStyleSheet(module, \"styles/brackets-prefs-hints.css\");\n\n        // For unit tests only.\n        exports.hintProvider            = hintProvider;\n        exports._setupTestEnvironment   = _setupTestEnvironment;\n    });\n\n});\n"],"file":"main.js"}