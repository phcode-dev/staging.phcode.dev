{"version":3,"sources":["extensions/default/CodeFolding/Prefs.js"],"names":["define","require","exports","module","ProjectManager","brackets","getModule","PreferencesManager","Strings","prefs","getExtensionPrefs","FOLDS_PREF_KEY","ENABLE_CODE_FOLDING","MIN_FOLD_SIZE","SAVE_FOLD_STATES","ALWAYS_USE_INDENT_FOLD","HIDE_FOLD_BUTTONS","MAX_FOLD_LEVEL","MAKE_SELECTIONS_FOLDABLE","simplify","folds","res","range","Object","keys","forEach","line","Array","isArray","from","ch","to","inflate","ranges","obj","getFolds","path","getViewState","STATE_PROJECT_CONTEXT","setFolds","allFolds","setViewState","getSetting","key","get","clearAllFolds","definePreference","name","description","DESCRIPTION_CODE_FOLDING_ENABLED","DESCRIPTION_CODE_FOLDING_MIN_FOLD_SIZE","DESCRIPTION_CODE_FOLDING_SAVE_FOLD_STATES","DESCRIPTION_CODE_FOLDING_ALWAY_USE_INDENT_FOLD","DESCRIPTION_CODE_FOLDING_HIDE_UNTIL_MOUSEOVER","DESCRIPTION_CODE_FOLDING_MAX_FOLD_LEVEL","DESCRIPTION_CODE_FOLDING_MAKE_SELECTIONS_FOLDABLE","stateManager","prefsObject"],"mappings":"AAOAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,eAA8BC,SAASC,UAAU,0BACjDC,mBAA8BF,SAASC,UAAU,kCACjDE,QAA8BH,SAASC,UAAU,WACjDG,MAA8BF,mBAAmBG,kBAAkB,gBACnEC,eAA8B,qBAE9BC,oBAA8B,sBAC9BC,cAA8B,oBAC9BC,iBAA8B,mBAC9BC,uBAA8B,yBAC9BC,kBAA8B,sBAC9BC,eAA8B,iBAC9BC,yBAA+B,4BA0BnC,SAASC,SAASC,OACd,GAAKA,MAAL,CAGA,IAAIC,IAAM,GAAIC,MAKd,OAJAC,OAAOC,KAAKJ,OAAOK,QAAQ,SAAUC,MACjCJ,MAAQF,MAAMM,MACdL,IAAIK,MAAQC,MAAMC,QAAQN,OAASA,MAAQ,CAAC,CAACA,MAAMO,KAAKH,KAAMJ,MAAMO,KAAKC,IAAK,CAACR,MAAMS,GAAGL,KAAMJ,MAAMS,GAAGD,OAEpGT,KASX,SAASW,QAAQZ,OACb,GAAKA,MAAL,CAIA,IAAIa,OAAS,GAAIC,IAMjB,OALAX,OAAOC,KAAKJ,OAAOK,QAAQ,SAAUC,MACjCQ,IAAMd,MAAMM,MACZO,OAAOP,MAAQ,CAACG,KAAM,CAACH,KAAMQ,IAAI,GAAG,GAAIJ,GAAII,IAAI,GAAG,IAAKH,GAAI,CAACL,KAAMQ,IAAI,GAAG,GAAIJ,GAAII,IAAI,GAAG,OAGtFD,QAQX,SAASE,SAASC,MACd,IAAIhB,MACJ,OAAOY,QADKzB,mBAAmB8B,aAAa1B,eAAgBJ,mBAAmB+B,uBAC1DF,OAQzB,SAASG,SAASH,KAAMhB,OACpB,MAAMoB,SAAWjC,mBAAmB8B,aAAa1B,eAAgBJ,mBAAmB+B,uBACpFE,SAASJ,MAAQjB,SAASC,OAC1Bb,mBAAmBkC,aAAa9B,eAAgB6B,SAAUjC,mBAAmB+B,uBAQjF,SAASI,WAAWC,KAChB,OAAOlC,MAAMmC,IAAID,KAMrB,SAASE,gBACLtC,mBAAmBkC,aAAa9B,eAAgB,IAzFpDF,MAAMqC,iBAAiB,UAAW,WAAW,EACtB,CAACC,KAAMnC,oBAAqBoC,YAAaxC,QAAQyC,mCACxExC,MAAMqC,iBAAiB,cAAe,SAAU,EACzB,CAACC,KAAMlC,cAAemC,YAAaxC,QAAQ0C,yCAClEzC,MAAMqC,iBAAiB,iBAAkB,WAAW,EAC7B,CAACC,KAAMjC,iBAAkBkC,YAAaxC,QAAQ2C,4CACrE1C,MAAMqC,iBAAiB,sBAAuB,WAAW,EAClC,CAACC,KAAMhC,uBAAwBiC,YAAaxC,QAAQ4C,iDAC3E3C,MAAMqC,iBAAiB,qBAAsB,WAAW,EACjC,CAACC,KAAM/B,kBAAmBgC,YAAaxC,QAAQ6C,gDACtE5C,MAAMqC,iBAAiB,eAAgB,SAAU,EAC1B,CAACC,KAAM9B,eAAgB+B,YAAaxC,QAAQ8C,0CACnE7C,MAAMqC,iBAAiB,yBAA0B,WAAW,EACrC,CAACC,KAAM7B,yBAA0B8B,YAAaxC,QAAQ+C,oDAE7EhD,mBAAmBiD,aAAaV,iBAAiBnC,eAAgB,SAAU,IA6E3ER,OAAOD,QAAQiC,SAAWA,SAC1BhC,OAAOD,QAAQqC,SAAWA,SAC1BpC,OAAOD,QAAQwC,WAAaA,WAC5BvC,OAAOD,QAAQ2C,cAAgBA,cAC/B1C,OAAOD,QAAQuD,YAAchD","sourcesContent":["/**\n * Wrapper around brackets pref system to ensure preferences are stored in in one single object instead of using multiple keys.\n * This is to make it easy for the user who edits their preferences file to easily manage the potentially numerous lines of preferences generated by the persisting code-folding state.\n * @author Patrick Oladimeji\n * @date 3/22/14 20:39:53 PM\n */\n\ndefine(function (require, exports, module) {\n\n\n    var ProjectManager              = brackets.getModule(\"project/ProjectManager\"),\n        PreferencesManager          = brackets.getModule(\"preferences/PreferencesManager\"),\n        Strings                     = brackets.getModule(\"strings\"),\n        prefs                       = PreferencesManager.getExtensionPrefs(\"code-folding\"),\n        FOLDS_PREF_KEY              = \"code-folding-folds\",\n        // preference key strings are here for now since they are not used in any UI\n        ENABLE_CODE_FOLDING         = \"Enable code folding\",\n        MIN_FOLD_SIZE               = \"Minimum fold size\",\n        SAVE_FOLD_STATES            = \"Save fold states\",\n        ALWAYS_USE_INDENT_FOLD      = \"Always use indent fold\",\n        HIDE_FOLD_BUTTONS           = \"Hide fold triangles\",\n        MAX_FOLD_LEVEL              = \"Max fold level\",\n        MAKE_SELECTIONS_FOLDABLE     = \"Makes selections foldable\";\n\n    //default preference values\n    prefs.definePreference(\"enabled\", \"boolean\", true,\n                           {name: ENABLE_CODE_FOLDING, description: Strings.DESCRIPTION_CODE_FOLDING_ENABLED});\n    prefs.definePreference(\"minFoldSize\", \"number\", 2,\n                           {name: MIN_FOLD_SIZE, description: Strings.DESCRIPTION_CODE_FOLDING_MIN_FOLD_SIZE});\n    prefs.definePreference(\"saveFoldStates\", \"boolean\", true,\n                           {name: SAVE_FOLD_STATES, description: Strings.DESCRIPTION_CODE_FOLDING_SAVE_FOLD_STATES});\n    prefs.definePreference(\"alwaysUseIndentFold\", \"boolean\", false,\n                           {name: ALWAYS_USE_INDENT_FOLD, description: Strings.DESCRIPTION_CODE_FOLDING_ALWAY_USE_INDENT_FOLD});\n    prefs.definePreference(\"hideUntilMouseover\", \"boolean\", false,\n                           {name: HIDE_FOLD_BUTTONS, description: Strings.DESCRIPTION_CODE_FOLDING_HIDE_UNTIL_MOUSEOVER});\n    prefs.definePreference(\"maxFoldLevel\", \"number\", 2,\n                           {name: MAX_FOLD_LEVEL, description: Strings.DESCRIPTION_CODE_FOLDING_MAX_FOLD_LEVEL});\n    prefs.definePreference(\"makeSelectionsFoldable\", \"boolean\", true,\n                           {name: MAKE_SELECTIONS_FOLDABLE, description: Strings.DESCRIPTION_CODE_FOLDING_MAKE_SELECTIONS_FOLDABLE});\n\n    PreferencesManager.stateManager.definePreference(FOLDS_PREF_KEY, \"object\", {});\n\n    /**\n      * Simplifies the fold ranges into an array of pairs of numbers.\n      * @param {!Object} folds the raw fold ranges indexed by line numbers\n      * @return {Object} an object whose keys are line numbers and the values are array\n      * of two 2-element arrays. First array contains [from.line, from.ch] and the second contains [to.line, to.ch]\n      */\n    function simplify(folds) {\n        if (!folds) {\n            return;\n        }\n        var res = {}, range;\n        Object.keys(folds).forEach(function (line) {\n            range = folds[line];\n            res[line] = Array.isArray(range) ? range : [[range.from.line, range.from.ch], [range.to.line, range.to.ch]];\n        });\n        return res;\n    }\n\n    /**\n      * Inflates the fold ranges stored as simplified numeric arrays. The inflation converts the data into\n      * objects whose keys are line numbers and whose values are objects in the format {from: {line, ch}, to: {line, ch}}.\n      * @param {Object}  folds the simplified fold ranges\n      * @return {Object} the converted fold ranges\n      */\n    function inflate(folds) {\n        if (!folds) {\n            return;\n        }\n         //transform the folds into objects with from and to properties\n        var ranges = {}, obj;\n        Object.keys(folds).forEach(function (line) {\n            obj = folds[line];\n            ranges[line] = {from: {line: obj[0][0], ch: obj[0][1]}, to: {line: obj[1][0], ch: obj[1][1]}};\n        });\n\n        return ranges;\n    }\n\n    /**\n      * Gets the line folds saved for the specified path.\n      * @param {string} path the document path\n      * @return {Object} the line folds for the document at the specified path\n      */\n    function getFolds(path) {\n        var folds = PreferencesManager.getViewState(FOLDS_PREF_KEY, PreferencesManager.STATE_PROJECT_CONTEXT);\n        return inflate(folds[path]);\n    }\n\n    /**\n      * Saves the line folds for the specified path\n      * @param {!string} path the path to the document\n      * @param {Object} folds the fold ranges to save for the current document\n      */\n    function setFolds(path, folds) {\n        const allFolds = PreferencesManager.getViewState(FOLDS_PREF_KEY, PreferencesManager.STATE_PROJECT_CONTEXT);\n        allFolds[path] = simplify(folds);\n        PreferencesManager.setViewState(FOLDS_PREF_KEY, allFolds, PreferencesManager.STATE_PROJECT_CONTEXT);\n    }\n\n    /**\n      * Get the code folding setting with the specified key from the store\n      * @param {!string} key The key for the setting to retrieve\n      * @return {string} the setting with the specified key\n      */\n    function getSetting(key) {\n        return prefs.get(key);\n    }\n\n    /**\n      * Clears all the saved line folds for all documents.\n      */\n    function clearAllFolds() {\n        PreferencesManager.setViewState(FOLDS_PREF_KEY, {});\n    }\n\n    module.exports.getFolds = getFolds;\n    module.exports.setFolds = setFolds;\n    module.exports.getSetting = getSetting;\n    module.exports.clearAllFolds = clearAllFolds;\n    module.exports.prefsObject = prefs;\n});\n"],"file":"Prefs.js"}