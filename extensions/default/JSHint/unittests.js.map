{"version":3,"sources":["extensions/default/JSHint/unittests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","describe","testFolder","getTestPath","testProjectsFolder","testWindow","$","CodeInspection","toggleJSLintResults","triggerHandler","beforeAll","async","createTestWindowAndRun","test","toggleEnabled","loadProjectInTestWindow","afterAll","closeTestWindow","it","awaitsForDone","openProjectFiles","awaits","expect","is","toBe"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,gBAAkBC,SAASC,UAAU,wBAEzCC,SAAS,mBAAoB,WACzB,IAAIC,WAAaJ,gBAAgBK,YAAY,uCACzCC,mBAAqBN,gBAAgBK,YAAY,oCACjDE,WACAC,EACAC,eAEAC,oBAAsB,WACtBF,EAAE,sBAAsBG,eAAe,UAG3CC,UAAUC,iBACNN,iBAAmBP,gBAAgBc,yBAEnCN,EAAID,WAAWC,GACfC,eAAiBF,WAAWN,SAASc,KAAKN,gBAC3BO,eAAc,SAEvBhB,gBAAgBiB,wBAAwBb,aAC/C,KAEHc,SAASL,iBACLN,WAAgB,KAChBC,EAAgB,WACVR,gBAAgBmB,oBAG1BC,GAAG,6DAA8DP,uBACvDQ,cAAcrB,gBAAgBsB,iBAAiB,CAAC,cAAe,wBAC/DC,OAAO,KAEbC,OAAOhB,EAAE,mBAAmBiB,GAAG,aAAaC,MAAK,GAEjDhB,sBACAc,OAAOhB,EAAE,mBAAmBiB,GAAG,aAAaC,MAAK,GAEjDhB,sBACAc,OAAOhB,EAAE,mBAAmBiB,GAAG,aAAaC,MAAK,KAGrDN,GAAG,mDAAoDP,uBAC7Cb,gBAAgBiB,wBAAwBX,mBAAqB,wBAC7De,cAAcrB,gBAAgBsB,iBAAiB,CAAC,iBAAkB,wBAClEC,OAAO,KAEbC,OAAOhB,EAAE,mBAAmBiB,GAAG,aAAaC,MAAK,KAGrDN,GAAG,6CAA8CP,uBACvCb,gBAAgBiB,wBAAwBX,mBAAqB,0BAE7De,cAAcrB,gBAAgBsB,iBAAiB,CAAC,WAAY,+BAC5DC,OAAO,KAEbC,OAAOhB,EAAE,mBAAmBiB,GAAG,aAAaC,MAAK,SAG3CL,cAAcrB,gBAAgBsB,iBAAiB,CAAC,WAAY,+BAC5DC,OAAO,KAEbC,OAAOhB,EAAE,mBAAmBiB,GAAG,aAAaC,MAAK,KAGrDN,GAAG,+CAAgDP,uBACzCb,gBAAgBiB,wBAAwBX,mBAAqB,iCAE7De,cAAcrB,gBAAgBsB,iBAAiB,CAAC,WAAY,+BAC5DC,OAAO,KAEbC,OAAOhB,EAAE,mBAAmBiB,GAAG,aAAaC,MAAK,SAG3CL,cAAcrB,gBAAgBsB,iBAAiB,CAAC,WAAY,+BAC5DC,OAAO,KAEbC,OAAOhB,EAAE,mBAAmBiB,GAAG,aAAaC,MAAK,KAGrDN,GAAG,+DAAgEP,uBACzDb,gBAAgBiB,wBAAwBX,mBAAqB,+BAC7De,cAAcrB,gBAAgBsB,iBAAiB,CAAC,iBAAkB,wBAClEC,OAAO,KAEbC,OAAOhB,EAAE,mBAAmBiB,GAAG,aAAaC,MAAK","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeAll, afterAll, awaitsForDone, awaits */\n\ndefine(function (require, exports, module) {\n\n\n    var SpecRunnerUtils = brackets.getModule(\"spec/SpecRunnerUtils\");\n\n    describe(\"extension:JSHint\", function () {\n        var testFolder = SpecRunnerUtils.getTestPath(\"/spec/Extension-test-project-files/\"),\n            testProjectsFolder = SpecRunnerUtils.getTestPath(\"/spec/JSHintExtensionTest-files/\"),\n            testWindow,\n            $,\n            CodeInspection;\n\n        var toggleJSLintResults = function () {\n            $(\"#status-inspection\").triggerHandler(\"click\");\n        };\n\n        beforeAll(async function () {\n            testWindow = await SpecRunnerUtils.createTestWindowAndRun();\n            // Load module instances from brackets.test\n            $ = testWindow.$;\n            CodeInspection = testWindow.brackets.test.CodeInspection;\n            CodeInspection.toggleEnabled(true);\n\n            await SpecRunnerUtils.loadProjectInTestWindow(testFolder);\n        }, 30000);\n\n        afterAll(async function () {\n            testWindow    = null;\n            $             = null;\n            await SpecRunnerUtils.closeTestWindow();\n        });\n\n        it(\"status icon should toggle Errors panel when errors present\", async function () {\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"errors.js\"]), \"open test file\");\n            await awaits(100);\n\n            expect($(\"#problems-panel\").is(\":visible\")).toBe(true);\n\n            toggleJSLintResults();\n            expect($(\"#problems-panel\").is(\":visible\")).toBe(false);\n\n            toggleJSLintResults();\n            expect($(\"#problems-panel\").is(\":visible\")).toBe(true);//JSHintExtensionTest-files\n        });\n\n        it(\"should show errors if invalid .jshintrc detected\", async function () {\n            await SpecRunnerUtils.loadProjectInTestWindow(testProjectsFolder + \"invalid-config\");\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"no-errors.js\"]), \"open test file\");\n            await awaits(100);\n\n            expect($(\"#problems-panel\").is(\":visible\")).toBe(true);\n        });\n\n        it(\"should load valid es6 .jshintrc in project\", async function () {\n            await SpecRunnerUtils.loadProjectInTestWindow(testProjectsFolder + \"valid-config-es6\");\n            // es6 file should have no errors in problems panel\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"es6.js\"]), \"open test file es6.js\");\n            await awaits(100);\n\n            expect($(\"#problems-panel\").is(\":visible\")).toBe(false);\n\n            // using es8 async feature in es6 jshint mode should have errors in problems panel\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"es8.js\"]), \"open test file es8.js\");\n            await awaits(100);\n\n            expect($(\"#problems-panel\").is(\":visible\")).toBe(true);\n        });\n\n        it(\"should extend valid es6 .jshintrc in project\", async function () {\n            await SpecRunnerUtils.loadProjectInTestWindow(testProjectsFolder + \"valid-config-es6-extend\");\n            // es6 file should have no errors in problems panel\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"es6.js\"]), \"open test file es6.js\");\n            await awaits(100);\n\n            expect($(\"#problems-panel\").is(\":visible\")).toBe(false);\n\n            // using es8 async feature in es6 jshint mode should have errors in problems panel\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"es8.js\"]), \"open test file es8.js\");\n            await awaits(100);\n\n            expect($(\"#problems-panel\").is(\":visible\")).toBe(true);\n        });\n\n        it(\"should show errors if invalid .jshintrc extend file detected\", async function () {\n            await SpecRunnerUtils.loadProjectInTestWindow(testProjectsFolder + \"invalid-config-extend\");\n            await awaitsForDone(SpecRunnerUtils.openProjectFiles([\"no-errors.js\"]), \"open test file\");\n            await awaits(100);\n\n            expect($(\"#problems-panel\").is(\":visible\")).toBe(true);\n        });\n    });\n});\n"],"file":"unittests.js"}