define(function(require,exports,module){var CodeInspection=brackets.getModule("language/CodeInspection"),AppInit=brackets.getModule("utils/AppInit"),PreferencesManager=brackets.getModule("preferences/PreferencesManager"),Strings=brackets.getModule("strings"),ProjectManager=brackets.getModule("project/ProjectManager"),FileSystem=brackets.getModule("filesystem/FileSystem"),IndexingWorker=brackets.getModule("worker/IndexingWorker");IndexingWorker.loadScriptInWorker(`${module.uri}/../worker/jshint-helper.js`);let prefs=PreferencesManager.getExtensionPrefs("jshint"),projectSpecificOptions=null,jsHintConfigFileErrorMessage=null;function _getLinterConfigFileErrorMsg(){return[{pos:{line:-1,ch:0},message:jsHintConfigFileErrorMessage,type:CodeInspection.Type.ERROR}]}async function lintOneFile(text,_fullPath){return new Promise(resolve=>{if(jsHintConfigFileErrorMessage)return void resolve({errors:_getLinterConfigFileErrorMsg()});text=text.replace(/^[ \t]+$/gm,"");let options=projectSpecificOptions||prefs.get("options");IndexingWorker.execPeer("jsHint",{text:text,options:options}).then(jsHintErrors=>{if(!jsHintErrors.lintResult&&jsHintErrors.errors.length){let errors=jsHintErrors.errors;errors=errors.map(function(lintError){return{pos:{line:lintError.line-1,ch:lintError.character-1},message:`${lintError.reason} jshint (${lintError.code})`,type:CodeInspection.Type.ERROR}}),resolve({errors:errors})}resolve()})})}prefs.definePreference("options","object",{esversion:11,browser:!0,node:!0,jquery:!0,rhino:!1,jasmine:!0,devel:!1},{description:Strings.DESCRIPTION_JSHINT_OPTIONS}).on("change",function(){CodeInspection.requestRun(Strings.JSHINT_NAME)});const CONFIG_FILE_NAME=".jshintrc";function removeComments(str){return str=(str=(str=str||"").replace(/\/\*(?:(?!\*\/)[\s\S])*\*\//g,"")).replace(/\/\/[^\n\r]*/g,"")}function _readConfig(dir,configFileName){return new Promise((resolve,reject)=>{configFileName=configFileName||CONFIG_FILE_NAME;let file=FileSystem.getFileForPath(dir+configFileName);file.read(function(err,content){if(err)return void resolve(null);let config;try{config=JSON.parse(removeComments(content))}catch(e){return console.log("JSHint: error parsing "+file.fullPath),void reject("Error parsing JSHint config file:    "+ProjectManager.getProjectRelativePath(file.fullPath))}if(config.extends){let extendFile=FileSystem.getFileForPath(dir+config.extends);_readConfig(extendFile.parentPath,extendFile.name).then(baseConfigResult=>{delete config.extends;let mergedConfig=$.extend({},baseConfigResult,config);config.globals&&delete config.globals,resolve(mergedConfig)}).catch(()=>{reject("Error parsing JSHint config file:    "+ProjectManager.getProjectRelativePath(extendFile.name))})}else resolve(config)})})}function _reloadOptions(){projectSpecificOptions=null,_readConfig(ProjectManager.getProjectRoot().fullPath,CONFIG_FILE_NAME).then(config=>{projectSpecificOptions=config,CodeInspection.requestRun(Strings.JSHINT_NAME),jsHintConfigFileErrorMessage=null}).catch(err=>{jsHintConfigFileErrorMessage=err,CodeInspection.requestRun(Strings.JSHINT_NAME)})}function _isFileInArray(fileToCheck,fileArray){if(!fileArray)return!1;for(let file of fileArray)if(file.fullPath===fileToCheck.fullPath)return!0;return!1}function _projectFileChanged(_evt,entry,added,removed){let configFilePath=FileSystem.getFileForPath(ProjectManager.getProjectRoot().fullPath+CONFIG_FILE_NAME);entry.fullPath===configFilePath.fullPath||_isFileInArray(configFilePath,added)?_reloadOptions():_isFileInArray(configFilePath,removed)&&(projectSpecificOptions=null)}AppInit.appReady(function(){ProjectManager.on(ProjectManager.EVENT_PROJECT_FILE_CHANGED,_projectFileChanged),ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN,_reloadOptions),_reloadOptions()}),CodeInspection.register("javascript",{name:Strings.JSHINT_NAME,scanFileAsync:lintOneFile})});
//# sourceMappingURL=main.js.map
