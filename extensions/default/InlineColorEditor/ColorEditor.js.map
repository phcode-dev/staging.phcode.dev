{"version":3,"sources":["extensions/default/InlineColorEditor/ColorEditor.js"],"names":["define","require","exports","module","KeyEvent","brackets","getModule","PreferencesManager","StringUtils","Strings","Mustache","tinycolor","ColorEditorTemplate","STEP_MULTIPLIER","ensureHexFormat","str","test","replace","as0xString","color","toHexString","_0xColorToHex","convertToStr","hexColor","_format","toString","checkSetFormat","ColorEditor","$parent","callback","swatches","this","$element","$","render","append","_callback","_handleKeydown","bind","_handleOpacityKeydown","_handleHslKeydown","_handleHueKeydown","_handleSelectionKeydown","_handleOpacityDrag","_handleHueDrag","_handleSelectionFieldDrag","_originalColor","_color","_redoColor","_isUpperCase","get","on","$colorValue","find","$buttonList","$rgbaButton","$hexButton","$hslButton","$0xButton","$currentColor","$originalColor","$selection","$selectionBase","$hueBase","$opacityGradient","$hueSlider","$hueSelector","$opacitySlider","$opacitySelector","$swatches","_addSwatches","_addListeners","css","_commitColor","_getNewOffset","pos","zeroPos","maxOffset","offset","Math","min","max","prototype","_hsv","toHsv","getRootElement","_bindColorFormatToRadioButton","_bindInputHandlers","_bindOriginalColorButton","_registerDragHandler","_bindKeyHandler","_synchronize","colorValue","getColor","getOriginalInput","colorObject","hueColor","h","_updateColorTypeRadioButtons","getFormat","val","a","isNaN","s","v","left","bottom","focus","is","destroy","off","format","removeClass","parent","addClass","buttonClass","propertyName","value","handler","self","event","newFormat","currentTarget","html","toLowerCase","newColor","toHslString","toRgbString","toPercentageRgbString","toUpperCase","click","_convertToNormalRGB","matches","match","i","percentStr","round","Number","_normalizeColorString","normalizedColor","_handleTextFieldInput","losingFocus","trim","newColorObj","newColorOk","isValid","forEach","swatch","swatchValue","stringFormat","count","COLOR_EDITOR_USED_COLOR_TIP_PLURAL","COLOR_EDITOR_USED_COLOR_TIP_SINGULAR","usedColorTip","keydown","keyCode","DOM_VK_RETURN","DOM_VK_ENTER","DOM_VK_SPACE","DOM_VK_TAB","shiftKey","next","length","isValidColor","colorVal","setColorAsHsv","hsv","oldFormat","extend","resetHsv","undefined","colorObj","_originalInput","setColorFromString","height","width","xOffset","clientX","yOffset","clientY","top","mouseupHandler","window","unbind","mousedown","undo","redo","hasCtrl","platform","DOM_VK_Z","DOM_VK_Y","DOM_VK_LEFT","DOM_VK_RIGHT","DOM_VK_UP","DOM_VK_DOWN","preventDefault","$target","target","selectionStart","selectionEnd","stopPropagation","children","step","adjustedOffset","style","hue","alpha","document","e"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    var KeyEvent           = brackets.getModule(\"utils/KeyEvent\"),\n        PreferencesManager = brackets.getModule(\"preferences/PreferencesManager\"),\n        StringUtils        = brackets.getModule(\"utils/StringUtils\"),\n        Strings            = brackets.getModule(\"strings\"),\n        Mustache           = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        tinycolor          = require(\"thirdparty/tinycolor-min\");\n\n    /** Mustache template that forms the bare DOM structure of the UI */\n    var ColorEditorTemplate = require(\"text!ColorEditorTemplate.html\");\n\n    /**\n     * @const @type {number}\n     */\n    var STEP_MULTIPLIER = 5;\n\n    /**\n     * Convert 0x notation into hex6 format for tinycolor\n     * compatibility: (\"0xFFAACC\" => \"#FFFFFF\")\n     * @param {string} str - String to ensure hex format for\n     * @returns {string} - str in hex format\n     */\n    function ensureHexFormat(str) {\n        return (/^0x/).test(str) ? str.replace(\"0x\", \"#\") : str;\n    }\n\n    /**\n     * Converts a color to a 0x-prefixed string\n     * @param {tinycolor} color - color to convert\n     * @returns {string} - color as 0x-prefixed string\n     */\n    function as0xString(color) {\n        return color.toHexString().replace(\"#\", \"0x\");\n    }\n\n    /**\n     * Converts 0x-prefixed color to hex\n     * @param {string} color - Color to convert\n     * @param {boolean} convertToString - true if color should\n     *                                    be returned as string\n     * @returns {tinycolor|string} - Hex color as a Tinycolor object\n     *                               or a hex string\n     */\n    function _0xColorToHex(color, convertToStr) {\n        var hexColor = tinycolor(color.replace(\"0x\", \"#\"));\n        hexColor._format = \"0x\";\n\n        if (convertToStr) {\n            return hexColor.toString();\n        }\n        return hexColor;\n    }\n\n    /**\n     * Ensures that a string is in Tinycolor supported format\n     * @param {string} color - Color to check the format for\n     * @param {boolean} convertToString - true if color should\n     *                                    be returned as string\n     * @returns {tinycolor|string} - Color as a Tinycolor object\n     *                               or a hex string\n     */\n    function checkSetFormat(color, convertToStr) {\n        if ((/^0x/).test(color)) {\n            return _0xColorToHex(color, convertToStr);\n        }\n        if (convertToStr) {\n            return tinycolor(color).toString();\n        }\n        return tinycolor(color);\n    }\n\n    /**\n     * Color picker control; may be used standalone or within an InlineColorEditor inline widget.\n     * @param {!jQuery} $parent  DOM node into which to append the root of the color picker UI\n     * @param {!string} color  Initially selected color\n     * @param {!function(string)} callback  Called whenever selected color changes\n     * @param {!Array.<{value:string, count:number}>} swatches  Quick-access color swatches to include in UI\n     */\n    function ColorEditor($parent, color, callback, swatches) {\n        // Create the DOM structure, filling in localized strings via Mustache\n        this.$element = $(Mustache.render(ColorEditorTemplate, Strings));\n        $parent.append(this.$element);\n\n        this._callback = callback;\n\n        this._handleKeydown = this._handleKeydown.bind(this);\n        this._handleOpacityKeydown = this._handleOpacityKeydown.bind(this);\n        this._handleHslKeydown = this._handleHslKeydown.bind(this);\n        this._handleHueKeydown = this._handleHueKeydown.bind(this);\n        this._handleSelectionKeydown = this._handleSelectionKeydown.bind(this);\n        this._handleOpacityDrag = this._handleOpacityDrag.bind(this);\n        this._handleHueDrag = this._handleHueDrag.bind(this);\n        this._handleSelectionFieldDrag = this._handleSelectionFieldDrag.bind(this);\n\n        this._originalColor = color;\n        this._color = checkSetFormat(color);\n\n        this._redoColor = null;\n        this._isUpperCase = PreferencesManager.get(\"uppercaseColors\");\n        PreferencesManager.on(\"change\", \"uppercaseColors\", function () {\n            this._isUpperCase = PreferencesManager.get(\"uppercaseColors\");\n        }.bind(this));\n\n        this.$colorValue = this.$element.find(\".color-value\");\n        this.$buttonList = this.$element.find(\"ul.button-bar\");\n        this.$rgbaButton = this.$element.find(\".rgba\");\n        this.$hexButton = this.$element.find(\".hex\");\n        this.$hslButton = this.$element.find(\".hsla\");\n        this.$0xButton = this.$element.find(\".0x\");\n        this.$currentColor = this.$element.find(\".current-color\");\n        this.$originalColor = this.$element.find(\".original-color\");\n        this.$selection = this.$element.find(\".color-selection-field\");\n        this.$selectionBase = this.$element.find(\".color-selection-field .selector-base\");\n        this.$hueBase = this.$element.find(\".hue-slider .selector-base\");\n        this.$opacityGradient = this.$element.find(\".opacity-gradient\");\n        this.$hueSlider = this.$element.find(\".hue-slider\");\n        this.$hueSelector = this.$element.find(\".hue-slider .selector-base\");\n        this.$opacitySlider = this.$element.find(\".opacity-slider\");\n        this.$opacitySelector = this.$element.find(\".opacity-slider .selector-base\");\n        this.$swatches = this.$element.find(\".swatches\");\n\n        // Create quick-access color swatches\n        this._addSwatches(swatches);\n\n        // Attach event listeners to main UI elements\n        this._addListeners();\n\n        // Initially selected color\n        this.$originalColor.css(\"background-color\", checkSetFormat(this._originalColor));\n\n        this._commitColor(color);\n    }\n\n    /**\n     * A string or tinycolor object representing the currently selected color\n     * TODO (#2201): type is unpredictable\n     * @type {tinycolor|string}\n     */\n    ColorEditor.prototype._color = null;\n\n    /**\n     * An HSV representation of the currently selected color.\n     * TODO (#2201): type of _hsv.s/.v is unpredictable\n     * @type {!{h:number, s:number|string, v:number|string, a:number}}\n     */\n    ColorEditor.prototype._hsv = tinycolor(\"rgba(0,0,0,1)\").toHsv();\n\n    /**\n     * Color that was selected before undo(), if undo was the last change made. Else null.\n     * @type {?string}\n     */\n    ColorEditor.prototype._redoColor = null;\n\n    /**\n     * Initial value the color picker was opened with\n     * @type {!string}\n     */\n    ColorEditor.prototype._originalColor = null;\n\n\n    /** Returns the root DOM node of the ColorPicker UI */\n    ColorEditor.prototype.getRootElement = function () {\n        return this.$element;\n    };\n\n    /** Attach event listeners for main UI elements */\n    ColorEditor.prototype._addListeners = function () {\n        this._bindColorFormatToRadioButton(\"rgba\");\n        this._bindColorFormatToRadioButton(\"hex\");\n        this._bindColorFormatToRadioButton(\"hsla\");\n        this._bindColorFormatToRadioButton(\"0x\");\n\n        this._bindInputHandlers();\n\n        this._bindOriginalColorButton();\n\n        this._registerDragHandler(this.$selection, this._handleSelectionFieldDrag);\n        this._registerDragHandler(this.$hueSlider, this._handleHueDrag);\n        this._registerDragHandler(this.$opacitySlider, this._handleOpacityDrag);\n        this._bindKeyHandler(this.$selectionBase, this._handleSelectionKeydown);\n        this._bindKeyHandler(this.$hueBase, this._handleHueKeydown);\n        this._bindKeyHandler(this.$opacitySelector, this._handleOpacityKeydown);\n        this._bindKeyHandler(this.$hslButton, this._handleHslKeydown);\n\n        // General key handler gets bubbling events from any focusable part of widget\n        this._bindKeyHandler(this.$element, this._handleKeydown);\n    };\n\n    /**\n     * Update all UI elements to reflect the selected color (_color and _hsv). It is usually\n     * incorrect to call this directly; use _commitColor() or setColorAsHsv() instead.\n     */\n\n    ColorEditor.prototype._synchronize = function () {\n        var colorValue  = this.getColor().getOriginalInput();\n        var colorObject = checkSetFormat(colorValue);\n        var hueColor    = \"hsl(\" + this._hsv.h + \", 100%, 50%)\";\n        this._updateColorTypeRadioButtons(colorObject.getFormat());\n        this.$colorValue.val(colorValue);\n        this.$currentColor.css(\"background-color\", checkSetFormat(colorValue, true));\n        this.$selection.css(\"background-color\", hueColor);\n        this.$hueBase.css(\"background-color\", hueColor);\n\n        // Update gradients in color square & opacity slider\n        this.$selectionBase.css(\"background-color\", colorObject.toHexString());\n        this.$opacityGradient.css(\"background-image\", \"linear-gradient(\" + hueColor + \", transparent)\");\n\n        // Update slider thumb positions\n        this.$hueSelector.css(\"bottom\", (this._hsv.h / 360 * 100) + \"%\");\n        this.$opacitySelector.css(\"bottom\", (this._hsv.a * 100) + \"%\");\n        if (!isNaN(this._hsv.s)) {      // TODO (#2201): type of _hsv.s/.v is unpredictable\n            this._hsv.s = (this._hsv.s * 100) + \"%\";\n        }\n        if (!isNaN(this._hsv.v)) {\n            this._hsv.v = (this._hsv.v * 100) + \"%\";\n        }\n        this.$selectionBase.css({\n            left: this._hsv.s,\n            bottom: this._hsv.v\n        });\n    };\n\n    /**\n     * Focus the main color square's thumb.\n     * @return {boolean} True if we focused the square, false otherwise.\n     */\n    ColorEditor.prototype.focus = function () {\n        if (!this.$selectionBase.is(\":focus\")) {\n            this.$selectionBase.focus();\n            return true;\n        }\n        return false;\n    };\n\n    /**\n     * Remove any preference listeners before destroying the editor.\n     */\n    ColorEditor.prototype.destroy = function () {\n        PreferencesManager.off(\"change\", \"uppercaseColors\");\n    };\n\n    /**\n     * @return {tinycolor|string} The currently selected color (TODO (#2201): type is unpredictable).\n     */\n    ColorEditor.prototype.getColor = function () {\n        return this._color;\n    };\n\n    /** Update the format button bar's selection */\n    ColorEditor.prototype._updateColorTypeRadioButtons = function (format) {\n        this.$buttonList.find(\"li\").removeClass(\"selected\");\n        switch (format) {\n        case \"rgb\":\n            this.$buttonList.find(\".rgba\").parent().addClass(\"selected\");\n            break;\n        case \"hex\":\n        case \"name\":\n            this.$buttonList.find(\".hex\").parent().addClass(\"selected\");\n            break;\n        case \"hsl\":\n            this.$buttonList.find(\".hsla\").parent().addClass(\"selected\");\n            break;\n        case \"0x\":\n            this.$buttonList.find(\".0x\").parent().addClass(\"selected\");\n            break;\n        }\n    };\n\n    /** Add event listeners to the format button bar */\n    ColorEditor.prototype._bindColorFormatToRadioButton = function (buttonClass, propertyName, value) {\n        var handler,\n            self = this;\n        handler = function (event) {\n            var newFormat   = $(event.currentTarget).html().toLowerCase().replace(\"%\", \"p\"),\n                newColor    = self.getColor().toString();\n\n            var colorObject = checkSetFormat(newColor);\n\n            switch (newFormat) {\n            case \"hsla\":\n                newColor = colorObject.toHslString();\n                break;\n            case \"rgba\":\n                newColor = colorObject.toRgbString();\n                break;\n            case \"prgba\":\n                newColor = colorObject.toPercentageRgbString();\n                break;\n            case \"hex\":\n                newColor = colorObject.toHexString();\n                self._hsv.a = 1;\n                break;\n            case \"0x\":\n                newColor = as0xString(colorObject);\n                self._hsv.a = 1;\n                self._format = \"0x\";\n                break;\n            }\n\n            // We need to run this again whenever RGB/HSL/Hex conversions\n            // are performed to preserve the case\n            newColor = self._isUpperCase ? newColor.toUpperCase() : newColor;\n            self._commitColor(newColor, false);\n        };\n        this.$element.find(\".\" + buttonClass).click(handler);\n    };\n\n    /** Add event listener to the \"original color value\" swatch */\n    ColorEditor.prototype._bindOriginalColorButton = function () {\n        var self = this;\n        this.$originalColor.click(function (event) {\n            self._commitColor(self._originalColor, true);\n        });\n    };\n\n    /**\n     * Convert percentage values in an RGB color into normal RGB values in the range of 0 - 255.\n     * If the original color is already in non-percentage format, does nothing.\n     * @param {string} color The color to be converted to non-percentage RGB color string.\n     * @return {string} an RGB color string in the normal format using non-percentage values\n     */\n    ColorEditor.prototype._convertToNormalRGB = function (color) {\n        var matches = color.match(/^rgb.*?([0-9]+)\\%.*?([0-9]+)\\%.*?([0-9]+)\\%/i);\n        if (matches) {\n            var i, percentStr, value;\n            for (i = 0; i < 3; i++) {\n                percentStr = matches[i + 1];\n                value = Math.round(255 * Number(percentStr) / 100);\n                if (!isNaN(value)) {\n                    color = color.replace(percentStr + \"%\", value);\n                }\n            }\n        }\n        return color;\n    };\n\n    /**\n     * Normalize the given color string into the format used by tinycolor, by adding a space\n     * after commas.\n     * @param {string} color The color to be corrected if it looks like an RGB or HSL color.\n     * @return {string} a normalized color string.\n     */\n    ColorEditor.prototype._normalizeColorString = function (color) {\n        var normalizedColor = color;\n\n        // Convert 6-digit hex to 3-digit hex as TinyColor (#ffaacc -> #fac)\n        if (color.match(/^#[0-9a-fA-F]{6}/)) {\n            return tinycolor(color).toString();\n        }\n        if (color.match(/^(rgb|hsl)/i)) {\n            normalizedColor = normalizedColor.replace(/,\\s*/g, \", \");\n            normalizedColor = normalizedColor.replace(/\\(\\s+/, \"(\");\n            normalizedColor = normalizedColor.replace(/\\s+\\)/, \")\");\n        }\n        return normalizedColor;\n    };\n\n    /** Handle changes in text field */\n    ColorEditor.prototype._handleTextFieldInput = function (losingFocus) {\n        var newColor    = $.trim(this.$colorValue.val()),\n            newColorObj = checkSetFormat(newColor),\n            newColorOk  = newColorObj.isValid();\n\n\n        // TinyColor will auto correct an incomplete rgb or hsl value into a valid color value.\n        // eg. rgb(0,0,0 -> rgb(0, 0, 0)\n        // We want to avoid having TinyColor do this, because we don't want to sync the color\n        // to the UI if it's incomplete. To accomplish this, we first normalize the original\n        // color string into the format TinyColor would generate, and then compare it to what\n        // TinyColor actually generates to see if it's different. If so, then we assume the color\n        // was incomplete to begin with.\n        if (newColorOk) {\n            newColorOk = (newColorObj.toString() === this._normalizeColorString(ensureHexFormat(newColor)));\n        }\n\n        // Restore to the previous valid color if the new color is invalid or incomplete.\n        if (losingFocus && !newColorOk) {\n            newColor = this.getColor().toString();\n        }\n\n        // Sync only if we have a valid color or we're restoring the previous valid color.\n        if (losingFocus || newColorOk) {\n            this._commitColor(newColor, true);\n        }\n    };\n\n    ColorEditor.prototype._bindInputHandlers = function () {\n        var self = this;\n\n        this.$colorValue.bind(\"input\", function (event) {\n            self._handleTextFieldInput(false);\n        });\n\n        this.$colorValue.bind(\"change\", function (event) {\n            self._handleTextFieldInput(true);\n        });\n    };\n\n    /**\n     * Populate the UI with the given color swatches and add listeners so they're selectable.\n     * @param {!Array.<{value:string, count:number}>} swatches\n     */\n    ColorEditor.prototype._addSwatches = function (swatches) {\n        var self = this;\n\n        // Create swatches\n        swatches.forEach(function (swatch) {\n            var swatchValue = checkSetFormat(swatch.value, true);\n            var stringFormat = (swatch.count > 1) ? Strings.COLOR_EDITOR_USED_COLOR_TIP_PLURAL : Strings.COLOR_EDITOR_USED_COLOR_TIP_SINGULAR,\n                usedColorTip = StringUtils.format(stringFormat, swatch.value, swatch.count);\n\n            self.$swatches.append(\"<li tabindex='0'><div class='swatch-bg'><div class='swatch' style='background-color: \" +\n                    swatchValue + \";' title='\" + usedColorTip + \"'></div></div> <span class='value'\" + \" title='\" +\n                    usedColorTip + \"'>\" + swatch.value + \"</span></li>\");\n        });\n\n        // Add key & click listeners to each\n        this.$swatches.find(\"li\").keydown(function (event) {\n            if (event.keyCode === KeyEvent.DOM_VK_RETURN ||\n                    event.keyCode === KeyEvent.DOM_VK_ENTER ||\n                    event.keyCode === KeyEvent.DOM_VK_SPACE) {\n                // Enter/Space is same as clicking on swatch\n\n                self._commitColor($(event.currentTarget).find(\".value\").html());\n            } else if (event.keyCode === KeyEvent.DOM_VK_TAB) {\n                // Tab on last swatch loops back to color square\n                if (!event.shiftKey && $(this).next(\"li\").length === 0) {\n                    self.$selectionBase.focus();\n                    return false;\n                }\n            }\n        });\n\n        this.$swatches.find(\"li\").click(function (event) {\n            self._commitColor($(event.currentTarget).find(\".value\").html());\n        });\n    };\n\n    /**\n     * Checks whether colorVal is a valid color\n     * @param {!string} colorVal\n     * @return {boolean} Whether colorVal is valid\n     */\n    ColorEditor.prototype.isValidColor = function (colorVal) {\n        return tinycolor(colorVal).isValid();\n    };\n\n    /**\n     * Sets _hsv and _color based on an HSV input, and updates the UI. Attempts to preserve\n     * the previous color format.\n     * @param {!{h:number=, s:number=, v:number=}} hsv  Any missing values use the previous color's values.\n     */\n    ColorEditor.prototype.setColorAsHsv = function (hsv) {\n        var colorVal, newColor,\n            oldFormat = tinycolor(this.getColor()).getFormat();\n\n        // Set our state to the new color\n        $.extend(this._hsv, hsv);\n        newColor = tinycolor(this._hsv);\n\n        switch (oldFormat) {\n        case \"hsl\":\n            colorVal = newColor.toHslString();\n            break;\n        case \"rgb\":\n            colorVal = newColor.toRgbString();\n            break;\n        case \"prgb\":\n            colorVal = newColor.toPercentageRgbString();\n            break;\n        case \"hex\":\n        case \"name\":\n            colorVal = this._hsv.a < 1 ? newColor.toRgbString() : newColor.toHexString();\n            break;\n        case \"0x\":\n            colorVal = as0xString(newColor);\n            break;\n        }\n        colorVal = this._isUpperCase ? colorVal.toUpperCase() : colorVal;\n        this._commitColor(colorVal, false);\n    };\n\n    /**\n     * Sets _color (and optionally _hsv) based on a string input, and updates the UI. The string's\n     * format determines the new selected color's format.\n     * @param {!string} colorVal\n     * @param {boolean=} resetHsv  Pass false ONLY if hsv set already been modified to match colorVal. Default: true.\n     */\n    ColorEditor.prototype._commitColor = function (colorVal, resetHsv) {\n\n        if (resetHsv === undefined) {\n            resetHsv = true;\n        }\n        this._callback(colorVal);\n\n        var colorObj = checkSetFormat(colorVal);\n        colorObj._originalInput = colorVal;\n        this._color = colorObj;\n\n        if (resetHsv) {\n            this._hsv = this._color.toHsv();\n        }\n\n        this._redoColor = null;  // if we had undone, this new value blows away the redo history\n        this._synchronize();\n    };\n\n    /**\n     * Sets _color and _hsv based on a string input, and updates the UI. The string's\n     * format determines the new selected color's format.\n     * @param {!string} colorVal\n     */\n    ColorEditor.prototype.setColorFromString = function (colorVal) {\n        this._commitColor(colorVal, true);  // TODO (#2204): make this less entangled with setColorAsHsv()\n    };\n\n    /** Converts a mouse coordinate to be relative to zeroPos, and clips to [0, maxOffset] */\n    function _getNewOffset(pos, zeroPos, maxOffset) {\n        var offset = pos - zeroPos;\n        offset = Math.min(maxOffset, Math.max(0, offset));\n        return offset;\n    }\n\n    /** Dragging color square's thumb */\n    ColorEditor.prototype._handleSelectionFieldDrag = function (event) {\n        var height  = this.$selection.height(),\n            width   = this.$selection.width(),\n            xOffset = _getNewOffset(event.clientX, this.$selection.offset().left, width),\n            yOffset = _getNewOffset(event.clientY, this.$selection.offset().top, height),\n            hsv     = {};\n        hsv.s = xOffset / width;\n        hsv.v = 1 - yOffset / height;\n        this.setColorAsHsv(hsv, false);\n        if (!this.$selection.find(\".selector-base\").is(\":focus\")) {\n            this.$selection.find(\".selector-base\").focus();\n        }\n    };\n\n    /** Dragging hue slider thumb */\n    ColorEditor.prototype._handleHueDrag = function (event) {\n        var height = this.$hueSlider.height(),\n            offset = _getNewOffset(event.clientY, this.$hueSlider.offset().top, height),\n            hsv    = {};\n        hsv.h = (1 - offset / height) * 360;\n        this.setColorAsHsv(hsv, false);\n        if (!this.$hueSlider.find(\".selector-base\").is(\":focus\")) {\n            this.$hueSlider.find(\".selector-base\").focus();\n        }\n    };\n\n    /** Dragging opacity slider thumb */\n    ColorEditor.prototype._handleOpacityDrag = function (event) {\n        var height = this.$opacitySlider.height(),\n            offset = _getNewOffset(event.clientY, this.$opacitySlider.offset().top, height),\n            hsv    = {};\n        hsv.a = 1 - (offset / height);\n        this.setColorAsHsv(hsv, false);\n        if (!this.$opacitySlider.find(\".selector-base\").is(\":focus\")) {\n            this.$opacitySlider.find(\".selector-base\").focus();\n        }\n    };\n\n    /**\n     * Helper for attaching drag-related mouse listeners to an element. It's up to\n     * 'handler' to actually move the element as mouse is dragged.\n     * @param {!function(jQuery.event)} handler  Called whenever drag position changes\n     */\n    ColorEditor.prototype._registerDragHandler = function ($element, handler) {\n        var mouseupHandler = function (event) {\n            $(window).unbind(\"mousemove\", handler);\n            $(window).unbind(\"mouseup\", mouseupHandler);\n        };\n        $element.mousedown(function (event) {\n            $(window).bind(\"mousemove\", handler);\n            $(window).bind(\"mouseup\", mouseupHandler);\n        });\n        $element.mousedown(handler);  // run drag-update handler on initial mousedown too\n    };\n\n    /**\n     * Handles undo gestures while color picker has focus. We don't want to let CodeMirror's\n     * usual undo logic run since it will destroy our marker.\n     */\n    ColorEditor.prototype.undo = function () {\n        if (this._originalColor.toString() !== this._color.toString()) {\n            this._commitColor(this._originalColor, true);\n            this._redoColor = this._color.toString();\n        }\n    };\n\n    /** Similarly, handle redo gestures while color picker has focus. */\n    ColorEditor.prototype.redo = function () {\n        if (this._redoColor) {\n            this._commitColor(this._redoColor, true);\n            this._redoColor = null;\n        }\n    };\n\n    /**\n     * Global handler for keys in the color editor. Catches undo/redo keys and traps\n     * arrow keys that would be handled by the scroller.\n     */\n    ColorEditor.prototype._handleKeydown = function (event) {\n        var hasCtrl = (brackets.platform === \"win\") ? (event.ctrlKey) : (event.metaKey);\n        if (hasCtrl) {\n            switch (event.keyCode) {\n            case KeyEvent.DOM_VK_Z:\n                if (event.shiftKey) {\n                    this.redo();\n                } else {\n                    this.undo();\n                }\n                return false;\n            case KeyEvent.DOM_VK_Y:\n                this.redo();\n                return false;\n            }\n        } else {\n            if (event.keyCode === KeyEvent.DOM_VK_LEFT ||\n                    event.keyCode === KeyEvent.DOM_VK_RIGHT ||\n                    event.keyCode === KeyEvent.DOM_VK_UP ||\n                    event.keyCode === KeyEvent.DOM_VK_DOWN) {\n                // Prevent arrow keys that weren't handled by a child control\n                // from being handled by a parent, either through bubbling or\n                // through default native behavior. There isn't a good general\n                // way to tell if the target would handle this event by default,\n                // so we look to see if the target is a text input control.\n                var preventDefault = false,\n                    $target = $(event.target);\n\n                // If the input has no \"type\" attribute, it defaults to text. So we\n                // have to check for both possibilities.\n                if ($target.is(\"input:not([type])\") || $target.is(\"input[type=text]\")) {\n                    // Text input control. In WebKit, if the cursor gets to the start\n                    // or end of a text field and can't move any further, the default\n                    // action doesn't take place in the text field, so the event is handled\n                    // by the outer scroller. We have to prevent in that case too.\n                    if ($target[0].selectionStart === $target[0].selectionEnd &&\n                            ((event.keyCode === KeyEvent.DOM_VK_LEFT && $target[0].selectionStart === 0) ||\n                             (event.keyCode === KeyEvent.DOM_VK_RIGHT && $target[0].selectionEnd === $target.val().length))) {\n                        preventDefault = true;\n                    }\n                } else {\n                    // Not a text input control, so we want to prevent default.\n                    preventDefault = true;\n                }\n\n                if (preventDefault) {\n                    event.stopPropagation();\n                    return false; // equivalent to event.preventDefault()\n                }\n            }\n        }\n    };\n\n    ColorEditor.prototype._handleHslKeydown = function (event) {\n        if (event.keyCode === KeyEvent.DOM_VK_TAB) {\n            // If we're the last focusable element (no color swatches), Tab wraps around to color square\n            if (!event.shiftKey) {\n                if (this.$swatches.children().length === 0) {\n                    this.$selectionBase.focus();\n                    return false;\n                }\n            }\n        }\n    };\n\n    /** Key events on the color square's thumb */\n    ColorEditor.prototype._handleSelectionKeydown = function (event) {\n        var hsv = {},\n            step = 1.5,\n            xOffset,\n            yOffset,\n            adjustedOffset;\n\n        switch (event.keyCode) {\n        case KeyEvent.DOM_VK_LEFT:\n        case KeyEvent.DOM_VK_RIGHT:\n            step = event.shiftKey ? step * STEP_MULTIPLIER : step;\n            xOffset = Number($.trim(this.$selectionBase[0].style.left.replace(\"%\", \"\")));\n            adjustedOffset = (event.keyCode === KeyEvent.DOM_VK_LEFT) ? (xOffset - step) : (xOffset + step);\n            xOffset = Math.min(100, Math.max(0, adjustedOffset));\n            hsv.s = xOffset / 100;\n            this.setColorAsHsv(hsv, false);\n            return false;\n        case KeyEvent.DOM_VK_DOWN:\n        case KeyEvent.DOM_VK_UP:\n            step = event.shiftKey ? step * STEP_MULTIPLIER : step;\n            yOffset = Number($.trim(this.$selectionBase[0].style.bottom.replace(\"%\", \"\")));\n            adjustedOffset = (event.keyCode === KeyEvent.DOM_VK_DOWN) ? (yOffset - step) : (yOffset + step);\n            yOffset = Math.min(100, Math.max(0, adjustedOffset));\n            hsv.v = yOffset / 100;\n            this.setColorAsHsv(hsv, false);\n            return false;\n        case KeyEvent.DOM_VK_TAB:\n            // Shift+Tab loops back to last focusable element: last swatch if any; format button bar if not\n            if (event.shiftKey) {\n                if (this.$swatches.children().length === 0) {\n                    this.$hslButton.focus();\n                } else {\n                    this.$swatches.find(\"li:last\").focus();\n                }\n                return false;\n            }\n            break;\n        }\n    };\n\n    /** Key events on the hue slider thumb */\n    ColorEditor.prototype._handleHueKeydown = function (event) {\n        var hsv = {},\n            hue = Number(this._hsv.h),\n            step = 3.6;\n\n        switch (event.keyCode) {\n        case KeyEvent.DOM_VK_DOWN:\n            step = event.shiftKey ? step * STEP_MULTIPLIER : step;\n            hsv.h = (hue - step) <= 0 ? 360 - step : hue - step;\n            this.setColorAsHsv(hsv, false);\n            return false;\n        case KeyEvent.DOM_VK_UP:\n            step = event.shiftKey ? step * STEP_MULTIPLIER : step;\n            hsv.h = (hue + step) >= 360 ? step : hue + step;\n            this.setColorAsHsv(hsv, false);\n            return false;\n        }\n    };\n\n    /** Key events on the opacity slider thumb */\n    ColorEditor.prototype._handleOpacityKeydown = function (event) {\n        var alpha = this._hsv.a,\n            hsv = {},\n            step = 0.01;\n\n        switch (event.keyCode) {\n        case KeyEvent.DOM_VK_DOWN:\n            step = event.shiftKey ? step * STEP_MULTIPLIER : step;\n            if (alpha > 0) {\n                hsv.a = (alpha - step) <= 0 ? 0 : alpha - step;\n                this.setColorAsHsv(hsv);\n            }\n            return false;\n        case KeyEvent.DOM_VK_UP:\n            step = event.shiftKey ? step * STEP_MULTIPLIER : step;\n            if (alpha < 100) {\n                hsv.a = (alpha + step) >= 1 ? 1 : alpha + step;\n                this.setColorAsHsv(hsv);\n            }\n            return false;\n        }\n    };\n\n    ColorEditor.prototype._bindKeyHandler = function ($element, handler) {\n        $element.bind(\"keydown\", handler);\n    };\n\n    // Prevent clicks on some UI elements (color selection field, slider and large swatch) from taking focus\n    $(window.document).on(\"mousedown\", \".color-selection-field, .slider, .large-swatch\", function (e) {\n        e.preventDefault();\n    });\n\n    exports.ColorEditor = ColorEditor;\n});\n"],"file":"ColorEditor.js"}