{"version":3,"sources":["extensions/default/InlineColorEditor/unittests.js"],"names":["define","require","exports","module","KeyEvent","brackets","getModule","PreferencesManager","SpecRunnerUtils","testContentCSS","testContentHTML","provider","inlineColorEditorProvider","InlineColorEditor","ColorEditor","tinycolor","fixPos","pos","sticky","fixSel","sel","start","end","reversed","fixSels","sels","forEach","describe","testDocument","testEditor","inline","async","makeColorEditor","cursor","promise","done","inlineResult","onAdded","awaitsForDone","testOpenColor","color","expect","toBeTruthy","_color","toBe","eventAtRatio","event","$item","ratios","trigger","$","Event","clientX","offset","left","width","clientY","top","height","beforeEach","mock","createMockEditor","doc","editor","afterEach","destroyMockEditor","it","line","ch","toEqual","spyOn","and","callThrough","addRef","toHaveBeenCalled","calls","count","onClosed","releaseRef","colorEditor","setColorFromString","getRange","getCurrentRange","replaceRange","toEql","getColor","toHexString","toLowerCase","close","not","_masterEditor","_codeMirror","undo","result","_collateColors","value","defaultSwatches","makeUI","initialColor","callback","swatches","hide","window","document","body","getRootElement","css","checkNear","val1","val2","tolerance","Math","abs","Number","checkPercentageNear","pct","val","substr","length","getColorString","getOriginalInput","testConvert","mode","buttonMap","rgba","hsla","hex","remove","colorStr","colorStrRgb","$colorValue","equals","$currentColor","$selection","toHsv","h","$hueBase","$selectionBase","awaits","$hueSelector","style","bottom","$opacitySelector","lastColor","set","get","testMousedown","opts","item","clickAt","param","expected","testDrag","dragTo","makeKeyEvent","keyCode","key","shiftKey","shift","testKey","getParam","exact","_hsv","charAt","before","after","delta","testPreventDefault","focus","selection","setSelectionRange","isDefaultPrevented","DOM_VK_RIGHT","DOM_VK_LEFT","DOM_VK_UP","DOM_VK_DOWN","$originalColor","_convertToNormalRGB","_normalizeColorString","triggerCtrlKey","$element","ctrlKeyProperty","eventProps","platform","DOM_VK_Z","_commitColor","DOM_VK_Y","$rgbaButton","click","$hslButton","$hexButton","$swatch","$swatches","find"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeEach, afterEach, awaits, awaitsForDone, spyOn */\n\ndefine(function (require, exports, module) {\n\n\n    // Modules from the SpecRunner window\n    var KeyEvent           = brackets.getModule(\"utils/KeyEvent\"),\n        PreferencesManager = brackets.getModule(\"preferences/PreferencesManager\"),\n        SpecRunnerUtils    = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        testContentCSS     = require(\"text!unittest-files/unittests.css\"),\n        testContentHTML    = require(\"text!unittest-files/unittests.html\"),\n        provider           = require(\"main\").inlineColorEditorProvider,\n        InlineColorEditor  = require(\"InlineColorEditor\").InlineColorEditor,\n        ColorEditor        = require(\"ColorEditor\").ColorEditor,\n        tinycolor          = require(\"thirdparty/tinycolor-min\");\n\n    // Helper functions for testing cursor position / selection range\n    function fixPos(pos) {\n        if (!(\"sticky\" in pos)) {\n            pos.sticky = null;\n        }\n        return pos;\n    }\n    function fixSel(sel) {\n        fixPos(sel.start);\n        fixPos(sel.end);\n        if (!(\"reversed\" in sel)) {\n            sel.reversed = false;\n        }\n        return sel;\n    }\n    function fixSels(sels) {\n        sels.forEach(function (sel) {\n            fixSel(sel);\n        });\n        return sels;\n    }\n\n    describe(\"unit:Inline Color Editor - unit\", function () {\n\n        var testDocument, testEditor, inline;\n\n        /**\n         * Creates an inline color editor connected to the given cursor position in the test editor.\n         * Note that this does *not* actually open it as an inline editor in the test editor.\n         * Tests that use this must wrap their contents in a runs() block.\n         * @param {!{line:number, ch: number}} cursor Position for which to open the inline editor.\n         * if the provider did not create an inline editor.\n         */\n        async function makeColorEditor(cursor) {\n            var promise = provider(testEditor, cursor);\n            if (promise) {\n                promise.done(function (inlineResult) {\n                    inlineResult.onAdded();\n                    inline = inlineResult;\n                });\n                await awaitsForDone(promise, \"open color editor\");\n            }\n        }\n\n        /**\n         * Expects an inline editor to be opened at the given cursor position and to have the\n         * given initial color (which should match the color at that position).\n         * @param {!{line:number, ch:number}} cursor The cursor position to try opening the inline at.\n         * @param {string} color The expected color.\n         */\n        async function testOpenColor(cursor, color) {\n            await makeColorEditor(cursor);\n            expect(inline).toBeTruthy();\n            expect(inline._color).toBe(color);\n        }\n\n        /**\n         * Simulate the given event with clientX/clientY specified by the given\n         * ratios of the item's actual width/height (offset by the left/top of the\n         * item).\n         * @param {string} event The name of the event to simulate.\n         * @param {object} $item A jQuery object to trigger the event on.\n         * @param {Array.<number>} ratios Numbers between 0 and 1 indicating the x and y positions of the\n         *      event relative to the item's width and height.\n         */\n        function eventAtRatio(event, $item, ratios) {\n            $item.trigger($.Event(event, {\n                clientX: $item.offset().left + (ratios[0] * $item.width()),\n                clientY: $item.offset().top + (ratios[1] * $item.height())\n            }));\n        }\n\n        describe(\"Inline editor - CSS\", function () {\n\n            beforeEach(function () {\n                var mock = SpecRunnerUtils.createMockEditor(testContentCSS, \"css\");\n                testDocument = mock.doc;\n                testEditor = mock.editor;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n                inline = null;\n            });\n\n            describe(\"simple open cases\", function () {\n\n                it(\"should show the correct color when opened on an #rrggbb color\", async function () {\n                    await testOpenColor({line: 1, ch: 18}, \"#abcdef\");\n                });\n                it(\"should open when at the beginning of the color\", async function () {\n                    await testOpenColor({line: 1, ch: 16}, \"#abcdef\");\n                });\n                it(\"should open when at the end of the color\", async function () {\n                    await testOpenColor({line: 1, ch: 23}, \"#abcdef\");\n                });\n                it(\"should show the correct color when opened on an #rgb color\", async function () {\n                    await testOpenColor({line: 5, ch: 18}, \"#abc\");\n                });\n                it(\"should show the correct color when opened on an rgb() color\", async function () {\n                    await testOpenColor({line: 9, ch: 18}, \"rgb(100, 200, 150)\");\n                });\n                it(\"should show the correct color when opened on an rgba() color\", async function () {\n                    await testOpenColor({line: 13, ch: 18}, \"rgba(100, 200, 150, 0.5)\");\n                });\n                it(\"should show the correct color when opened on an hsl() color\", async function () {\n                    await testOpenColor({line: 17, ch: 18}, \"hsl(180, 50%, 50%)\");\n                });\n                it(\"should show the correct color when opened on an hsla() color\", async function () {\n                    await testOpenColor({line: 21, ch: 18}, \"hsla(180, 50%, 50%, 0.5)\");\n                });\n                it(\"should show the correct color when opened on an uppercase hex color\", async function () {\n                    await testOpenColor({line: 33, ch: 18}, \"#DEFCBA\");\n                });\n                it(\"should show the correct color when opened on a color in a shorthand property\", async function () {\n                    await testOpenColor({line: 41, ch: 27}, \"#0f0f0f\");\n                });\n                it(\"should show the correct color when opened on an rgba() color with a leading period in the alpha field\", async function () {\n                    await testOpenColor({line: 45, ch: 18}, \"rgba(100, 200, 150, .5)\");\n                });\n                it(\"should show the correct color when opened on an hsla() color with a leading period in the alpha field\", async function () {\n                    await testOpenColor({line: 49, ch: 18}, \"hsla(180, 50%, 50%, .5)\");\n                });\n\n                it(\"should not open when not on a color\", async function () {\n                    await makeColorEditor({line: 1, ch: 6});\n                    expect(inline).toEqual(null);\n                });\n                it(\"should not open when on an invalid color\", async function () {\n                    await makeColorEditor({line: 25, ch: 18});\n                    expect(inline).toEqual(null);\n                });\n                it(\"should not open when on an hsl color with missing percent signs\", async function () {\n                    await makeColorEditor({line: 37, ch: 18});\n                    expect(inline).toEqual(null);\n                });\n\n                it(\"should open on the second color when there are two colors in the same line\", async function () {\n                    await testOpenColor({line: 29, ch: 48}, \"#ddeeff\");\n                });\n\n                it(\"should properly add/remove ref to document when opened/closed\", async function () {\n                    spyOn(testDocument, \"addRef\").and.callThrough();\n                    spyOn(testDocument, \"releaseRef\").and.callThrough();\n                    await makeColorEditor({line: 1, ch: 18});\n                    expect(testDocument.addRef).toHaveBeenCalled();\n                    expect(testDocument.addRef.calls.count()).toBe(1);\n\n                    inline.onClosed();\n                    expect(testDocument.releaseRef).toHaveBeenCalled();\n                    expect(testDocument.releaseRef.calls.count()).toBe(1);\n                });\n\n            });\n\n            describe(\"update host document on edit in color editor\", function () {\n\n                it(\"should update host document when change is committed in color editor\", async function () {\n                    await makeColorEditor({line: 1, ch: 18});\n                    inline.colorEditor.setColorFromString(\"#c0c0c0\");\n                    expect(testDocument.getRange({line: 1, ch: 16}, {line: 1, ch: 23})).toBe(\"#c0c0c0\");\n                });\n\n                it(\"should update correct range of host document with color format of different length\", async function () {\n                    await makeColorEditor({line: 1, ch: 18});\n                    inline.colorEditor.setColorFromString(\"rgb(20, 20, 20)\");\n                    expect(testDocument.getRange({line: 1, ch: 16}, {line: 1, ch: 31})).toBe(\"rgb(20, 20, 20)\");\n                });\n\n                it(\"should not invalidate range when change is committed\", async function () {\n                    await makeColorEditor({line: 1, ch: 18});\n                    inline.colorEditor.setColorFromString(\"rgb(20, 20, 20)\");\n                    expect(inline.getCurrentRange()).toBeTruthy();\n                });\n\n                it(\"should update correct range of host document when the in-editor color string is invalid\", async function () {\n                    await makeColorEditor({line: 1, ch: 18});\n                    testDocument.replaceRange(\"\", {line: 1, ch: 22}, {line: 1, ch: 24});\n                    inline.colorEditor.setColorFromString(\"#c0c0c0\");\n                    expect(fixSel(inline.getCurrentRange())).toEql(fixSel({start: {line: 1, ch: 16}, end: {line: 1, ch: 23}}));\n                    expect(testDocument.getRange({line: 1, ch: 16}, {line: 1, ch: 23})).toBe(\"#c0c0c0\");\n                });\n\n            });\n\n            describe(\"update color editor on edit in host editor\", function () {\n\n                it(\"should update when edit is made to color range in host editor\", async function () {\n                    await makeColorEditor({line: 1, ch: 18});\n                    spyOn(inline, \"close\");\n\n                    testDocument.replaceRange(\"0\", {line: 1, ch: 18}, {line: 1, ch: 19});\n                    expect(inline._color).toBe(\"#a0cdef\");\n                    // TODO (#2201): this assumes getColor() is a tinycolor, but sometimes it's a string\n                    expect(inline.colorEditor.getColor().toHexString().toLowerCase()).toBe(\"#a0cdef\");\n                    expect(inline.close).not.toHaveBeenCalled();\n                    expect(fixSel(inline.getCurrentRange())).toEql(fixSel({start: {line: 1, ch: 16}, end: {line: 1, ch: 23}}));\n                });\n\n                it(\"should close itself if edit is made that destroys end textmark and leaves color invalid\", async function () {\n                    await makeColorEditor({line: 1, ch: 18});\n                    spyOn(inline, \"close\");\n\n                    // Replace everything including the semicolon, so it crosses the textmark boundary.\n                    testDocument.replaceRange(\"rgb(255, 25\", {line: 1, ch: 16}, {line: 1, ch: 24});\n                    expect(inline.close).toHaveBeenCalled();\n                });\n\n                it(\"should maintain the range if the user deletes the last character of the color and types a new one\", async function () {\n                    await makeColorEditor({line: 1, ch: 18});\n                    spyOn(inline, \"close\");\n\n                    testDocument.replaceRange(\"\", {line: 1, ch: 22}, {line: 1, ch: 23});\n                    testDocument.replaceRange(\"0\", {line: 1, ch: 22}, {line: 1, ch: 22});\n                    expect(inline._color).toBe(\"#abcde0\");\n                    expect(inline.close).not.toHaveBeenCalled();\n                    expect(fixSel(inline.getCurrentRange())).toEql(fixSel({start: {line: 1, ch: 16}, end: {line: 1, ch: 23}}));\n                });\n\n                it(\"should not update the end textmark and the color shown to a shorter valid match if the marker still exists and the color becomes invalid\", async function () {\n                    await makeColorEditor({line: 1, ch: 18});\n                    testDocument.replaceRange(\"\", {line: 1, ch: 22}, {line: 1, ch: 23});\n                    expect(inline._color).toBe(\"#abcdef\");\n                    expect(fixSel(inline.getCurrentRange())).toEql(fixSel({start: {line: 1, ch: 16}, end: {line: 1, ch: 22}}));\n                });\n\n                it(\"should not update the end textmark and the color shown to a shorter valid match if the marker no longer exists and the color becomes invalid\", async function () {\n                    await makeColorEditor({line: 1, ch: 18});\n                    testDocument.replaceRange(\"\", {line: 1, ch: 22}, {line: 1, ch: 24});\n                    expect(inline._color).toBe(\"#abcdef\");\n                    expect(fixSel(inline.getCurrentRange())).toEql(fixSel({start: {line: 1, ch: 16}, end: {line: 1, ch: 22}}));\n                });\n\n            });\n\n            describe(\"edit batching\", function () {\n                it(\"should combine multiple edits within the same inline editor into a single undo in the host editor\", async function () {\n                    await makeColorEditor({line: 1, ch: 18});\n                    inline.colorEditor.setColorFromString(\"#010101\");\n                    inline.colorEditor.setColorFromString(\"#123456\");\n                    inline.colorEditor.setColorFromString(\"#bdafe0\");\n                    testDocument._masterEditor._codeMirror.undo();\n                    expect(testDocument.getRange({line: 1, ch: 16}, {line: 1, ch: 23})).toBe(\"#abcdef\");\n                });\n            });\n        });\n\n        describe(\"Inline editor - HTML\", function () {\n\n            beforeEach(function () {\n                var mock = SpecRunnerUtils.createMockEditor(testContentHTML, \"html\");\n                testDocument = mock.doc;\n                testEditor = mock.editor;\n            });\n\n            afterEach(function () {\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n                testEditor = null;\n                testDocument = null;\n            });\n\n            it(\"should open on a color in an HTML file\", async function () {\n                await testOpenColor({line: 4, ch: 30}, \"#dead01\");\n            });\n        });\n\n        describe(\"Inline editor - used colors processing\", function () {\n\n            it(\"should trim the original array to the given length\", function () {\n                var inline = new InlineColorEditor();\n                var result = inline._collateColors([\"#abcdef\", \"#fedcba\", \"#aabbcc\", \"#bbccdd\"], 2);\n                expect(result).toEqual([\n                    {value: \"#abcdef\", count: 1},\n                    {value: \"#fedcba\", count: 1}\n                ]);\n            });\n\n            it(\"should remove duplicates from the original array and sort it by usage\", function () {\n                var inline = new InlineColorEditor();\n                var result = inline._collateColors([\"#abcdef\", \"#fedcba\", \"#123456\", \"#FEDCBA\", \"#123456\", \"#123456\", \"rgb(100, 100, 100)\"], 100);\n                expect(result).toEqual([\n                    {value: \"#123456\", count: 3},\n                    {value: \"#fedcba\", count: 2},\n                    {value: \"#abcdef\", count: 1},\n                    {value: \"rgb(100, 100, 100)\", count: 1}\n                ]);\n            });\n        });\n\n        describe(\"Color editor UI\", function () {\n            var colorEditor,\n                defaultSwatches = [{value: \"#abcdef\", count: 3}, {value: \"rgba(100, 200, 250, 0.5)\", count: 2}];\n\n            /**\n             * Creates a hidden ColorEditor and appends it to the body. Note that this is a standalone\n             * ColorEditor, not inside an InlineColorEditor.\n             * @param {string} initialColor The color that should be initially set in the ColorEditor.\n             * @param {?function} callback An optional callback to be passed as the ColorEditor's callback. If\n             *     none is supplied, a dummy function is passed.\n             * @param {?Array.<{value:string, count:number}>} swatches An optional array of swatches to display.\n             *     If none is supplied, a default set of two swatches is passed.\n             * @param {boolean=} hide Whether to hide the color picker; default is true.\n             */\n            function makeUI(initialColor, callback, swatches, hide) {\n                colorEditor = new ColorEditor($(window.document.body),\n                                              initialColor,\n                                              callback || function () { },\n                                              swatches || defaultSwatches);\n                if (hide !== false) {\n                    colorEditor.getRootElement().css(\"display\", \"none\");\n                }\n            }\n\n            afterEach(function () {\n                colorEditor.getRootElement().remove();\n            });\n\n            /**\n             * Checks whether the difference between val1 and val2 is within the given tolerance.\n             * (We can't use Jasmine's .toBeCloseTo() because that takes a precision in decimal places,\n             * whereas we often need to check an absolute distance.)\n             * @param {(number|string)} val1 The first value to check.\n             * @param {(number|string)} val2 The second value to check.\n             * @param {number} tolerance The desired tolerance.\n             */\n            function checkNear(val1, val2, tolerance) {\n                expect(Math.abs(Number(val1) - Number(val2)) < (tolerance || 1.0)).toBe(true);\n            }\n            /**\n             * Checks whether the given percentage string is near the given value.\n             * @param {string} pct The percentage to check. Assumed to be a string ending in \"%\".\n             * @param {number} val The value to check against. Assumed to be a percentage number, but not ending in \"%\".\n             */\n            function checkPercentageNear(pct, val) {\n                expect(checkNear(pct.substr(0, pct.length - 1), val));\n            }\n\n            /** Returns the colorEditor's current value as a string in its current format */\n            function getColorString() {\n                return tinycolor(colorEditor.getColor()).getOriginalInput();\n            }\n\n            describe(\"simple load/commit\", function () {\n\n                it(\"should load the initial color correctly\", async function () {\n                    var colorStr    = \"rgba(77, 122, 31, 0.5)\";\n                    var colorStrRgb = \"rgb(77, 122, 31)\";\n\n                    makeUI(colorStr);\n                    expect(colorEditor.getColor().getOriginalInput()).toBe(colorStr);\n                    expect(colorEditor.$colorValue.val()).toBe(colorStr);\n                    expect(tinycolor.equals(colorEditor.$currentColor.css(\"background-color\"), colorStr)).toBe(true);\n\n                    // Not sure why the tolerances need to be larger for these.\n                    checkNear(tinycolor(colorEditor.$selection.css(\"background-color\")).toHsv().h, 90, 2.0);\n                    checkNear(tinycolor(colorEditor.$hueBase.css(\"background-color\")).toHsv().h, 90, 2.0);\n\n                    expect(tinycolor.equals(colorEditor.$selectionBase.css(\"background-color\"), colorStrRgb)).toBe(true);\n\n                    // Need to do these on a timeout since we can't seem to read back CSS positions synchronously.\n                    await awaits(1);\n\n                    checkPercentageNear(colorEditor.$hueSelector[0].style.bottom, 25);\n                    checkPercentageNear(colorEditor.$opacitySelector[0].style.bottom, 50);\n                    checkPercentageNear(colorEditor.$selectionBase[0].style.left, 74);\n                    checkPercentageNear(colorEditor.$selectionBase[0].style.bottom, 47);\n                });\n\n                it(\"should load a committed color correctly\", async function () {\n                    var colorStr = \"rgba(77, 122, 31, 0.5)\";\n                    var colorStrRgb = \"rgb(77, 122, 31)\";\n\n                    makeUI(\"#0a0a0a\");\n                    colorEditor.setColorFromString(colorStr);\n                    expect(colorEditor.getColor().getOriginalInput()).toBe(colorStr);\n                    expect(colorEditor.$colorValue.val()).toBe(colorStr);\n                    expect(tinycolor.equals(colorEditor.$currentColor.css(\"background-color\"), colorStr)).toBe(true);\n                    checkNear(tinycolor(colorEditor.$selection.css(\"background-color\")).toHsv().h, tinycolor(colorStr).toHsv().h);\n                    checkNear(tinycolor(colorEditor.$hueBase.css(\"background-color\")).toHsv().h, tinycolor(colorStr).toHsv().h);\n                    expect(tinycolor.equals(colorEditor.$selectionBase.css(\"background-color\"), colorStrRgb)).toBe(true);\n\n                    // Need to do these on a timeout since we can't seem to read back CSS positions synchronously.\n                    await awaits(1);\n\n                    checkPercentageNear(colorEditor.$hueSelector[0].style.bottom, 25);\n                    checkPercentageNear(colorEditor.$opacitySelector[0].style.bottom, 50);\n                    checkPercentageNear(colorEditor.$selectionBase[0].style.left, 74);\n                    checkPercentageNear(colorEditor.$selectionBase[0].style.bottom, 47);\n                });\n\n                it(\"should call the callback when a new color is committed\", function () {\n                    var lastColor;\n                    makeUI(\"rgba(100, 100, 100, 0.5)\", function (color) {\n                        lastColor = color;\n                    });\n                    colorEditor.setColorFromString(\"#a0a0a0\");\n                    expect(lastColor).toBe(\"#a0a0a0\");\n                });\n\n            });\n\n            /**\n             * Test whether converting the given color to the given mode results in the expected color.\n             * @param {string} initialColor The color to convert.\n             * @param {string} mode The mode to convert to: must be \"rgba\", \"hsla\", or \"hex\".\n             * @param {string} result The expected result of the conversion.\n             */\n            function testConvert(initialColor, mode, result) {\n                makeUI(initialColor);\n                var buttonMap = {\n                    \"rgba\": \"$rgbaButton\",\n                    \"hsla\": \"$hslButton\",\n                    \"hex\": \"$hexButton\"\n                };\n                colorEditor[buttonMap[mode]].trigger(\"click\");\n                expect(colorEditor.getColor().getOriginalInput()).toBe(result);\n            }\n\n            describe(\"conversions in lower case\", function () {\n\n                it(\"should convert a hex color to rgb when mode button clicked\", function () {\n                    testConvert(\"#112233\", \"rgba\", \"rgb(17, 34, 51)\");\n                });\n                it(\"should convert a hex color to hsl when mode button clicked\", function () {\n                    testConvert(\"#112233\", \"hsla\", \"hsl(210, 50%, 13%)\");\n                });\n                it(\"should convert an rgb color to hex when mode button clicked\", function () {\n                    testConvert(\"rgb(15, 160, 21)\", \"hex\", \"#0fa015\");\n                });\n                it(\"should convert an rgba color to hex (dropping alpha) when mode button clicked\", function () {\n                    testConvert(\"rgba(15, 160, 21, 0.5)\", \"hex\", \"#0fa015\");\n                });\n                it(\"should convert an rgb color to hsl when mode button clicked\", function () {\n                    testConvert(\"rgb(15, 160, 21)\", \"hsla\", \"hsl(122, 83%, 34%)\");\n                });\n                it(\"should convert an rgba color to hsla when mode button clicked\", function () {\n                    testConvert(\"rgba(15, 160, 21, 0.3)\", \"hsla\", \"hsla(122, 83%, 34%, 0.3)\");\n                });\n                it(\"should convert an hsl color to hex when mode button clicked\", function () {\n                    testConvert(\"hsl(152, 12%, 22%)\", \"hex\", \"#313f39\");\n                });\n                it(\"should convert an hsla color to hex (dropping alpha) when mode button clicked\", function () {\n                    testConvert(\"hsla(152, 12%, 22%, 0.7)\", \"hex\", \"#313f39\");\n                });\n                it(\"should convert an hsl color to rgb when mode button clicked\", function () {\n                    testConvert(\"hsl(152, 12%, 22%)\", \"rgba\", \"rgb(49, 63, 57)\");\n                });\n                it(\"should convert an hsla color to rgba when mode button clicked\", function () {\n                    testConvert(\"hsla(152, 12%, 22%, 0.7)\", \"rgba\", \"rgba(49, 63, 57, 0.7)\");\n                });\n                it(\"should convert a mixed case hsla color to rgba when mode button clicked\", function () {\n                    testConvert(\"HsLa(152, 12%, 22%, 0.7)\", \"rgba\", \"rgba(49, 63, 57, 0.7)\");\n                });\n                it(\"should convert a mixed case hex color to rgb when mode button clicked\", function () {\n                    testConvert(\"#fFfFfF\", \"rgba\", \"rgb(255, 255, 255)\");\n                });\n\n            });\n\n            describe(\"conversions in UPPER CASE\", function () {\n\n                beforeEach(function () {\n                    // Enable uppercase colors\n                    PreferencesManager.set(\"uppercaseColors\", true);\n                });\n                afterEach(function () {\n                    // Re-disable uppercase colors\n                    PreferencesManager.set(\"uppercaseColors\", false);\n                });\n\n                it(\"should use uppercase colors\", function () {\n                    expect(PreferencesManager.get(\"uppercaseColors\")).toBe(true);\n                });\n                it(\"should convert a hex color to rgb in uppercase when mode button clicked\", function () {\n                    testConvert(\"#112233\", \"rgba\", \"RGB(17, 34, 51)\");\n                });\n                it(\"should convert a hex color to hsl in uppercase when mode button clicked\", function () {\n                    testConvert(\"#112233\", \"hsla\", \"HSL(210, 50%, 13%)\");\n                });\n                it(\"should convert an rgb color to hex in uppercase when mode button clicked\", function () {\n                    testConvert(\"RGB(15, 160, 21)\", \"hex\", \"#0FA015\");\n                });\n                it(\"should convert an rgba color to hex (dropping alpha) in uppercase when mode button clicked\", function () {\n                    testConvert(\"RGBA(15, 160, 21, 0.5)\", \"hex\", \"#0FA015\");\n                });\n                it(\"should convert an rgb color to hsl in uppercase when mode button clicked\", function () {\n                    testConvert(\"RGB(15, 160, 21)\", \"hsla\", \"HSL(122, 83%, 34%)\");\n                });\n                it(\"should convert an rgba color to hsla in uppercase when mode button clicked\", function () {\n                    testConvert(\"RGBA(15, 160, 21, 0.3)\", \"hsla\", \"HSLA(122, 83%, 34%, 0.3)\");\n                });\n                it(\"should convert an hsl color to hex in uppercase when mode button clicked\", function () {\n                    testConvert(\"HSL(152, 12%, 22%)\", \"hex\", \"#313F39\");\n                });\n                it(\"should convert an hsla color to hex (dropping alpha) in uppercase when mode button clicked\", function () {\n                    testConvert(\"HSLA(152, 12%, 22%, 0.7)\", \"hex\", \"#313F39\");\n                });\n                it(\"should convert an hsl color to rgb in uppercase when mode button clicked\", function () {\n                    testConvert(\"HSL(152, 12%, 22%)\", \"rgba\", \"RGB(49, 63, 57)\");\n                });\n                it(\"should convert an hsla color to rgba in uppercase when mode button clicked\", function () {\n                    testConvert(\"HSLA(152, 12%, 22%, 0.7)\", \"rgba\", \"RGBA(49, 63, 57, 0.7)\");\n                });\n                it(\"should convert a mixed case hsla color to rgba in uppercase when mode button clicked\", function () {\n                    testConvert(\"HsLa(152, 12%, 22%, 0.7)\", \"rgba\", \"RGBA(49, 63, 57, 0.7)\");\n                });\n                it(\"should convert a mixed case hex color to rgb in uppercase when mode button clicked\", function () {\n                    testConvert(\"#fFfFfF\", \"rgba\", \"RGB(255, 255, 255)\");\n                });\n\n            });\n\n            describe(\"parameter editing with mouse\", function () {\n\n                /**\n                 * Test a mouse down event on the given UI element.\n                 * @param {object} opts The parameters to test:\n                 *     item: The (string) name of the member of ColorEditor that references the element to test.\n                 *     clickAt: An [x, y] array specifying the simulated x/y mouse position as a fraction of the\n                 *          item's width/height. For example, [0.5, 0.5] would specify a click exactly in the\n                 *          center of the element.\n                 *     param: The (string) parameter whose value we're testing (h, s, v, or a).\n                 *     expected: The expected value for the parameter.\n                 *     tolerance: The tolerance in variation for the expected value.\n                 */\n                function testMousedown(opts) {\n                    makeUI(\"#0000ff\");\n                    eventAtRatio(\"mousedown\", colorEditor[opts.item], opts.clickAt);\n                    checkNear(tinycolor(colorEditor.getColor()).toHsv()[opts.param], opts.expected, opts.tolerance);\n                    colorEditor[opts.item].trigger(\"mouseup\");  // clean up drag state\n                }\n\n                /**\n                 * Test a drag event on the given UI element.\n                 * @param {object} opts The parameters to test:\n                 *     item: The (string) name of the member of ColorEditor that references the element to test.\n                 *     clickAt: An [x, y] array specifying the simulated x/y mouse position for the initial mouse down\n                 *          as a fraction of the item's width/height. For example, [0.5, 0.5] would specify a click\n                 *          exactly in the center of the element.\n                 *     dragTo: An [x, y] array specifying the location to drag to, using the same convention as clickAt.\n                 *     param: The (string) parameter whose value we're testing (h, s, v, or a).\n                 *     expected: The expected value for the parameter.\n                 *     tolerance: The tolerance in variation for the expected value.\n                 */\n                function testDrag(opts) {\n                    makeUI(\"#0000ff\");\n                    eventAtRatio(\"mousedown\", colorEditor[opts.item], opts.clickAt);\n                    eventAtRatio(\"mousemove\", colorEditor[opts.item], opts.dragTo);\n                    checkNear(tinycolor(colorEditor.getColor()).toHsv()[opts.param], opts.expected, opts.tolerance);\n                    colorEditor[opts.item].trigger(\"mouseup\");  // clean up drag state\n                }\n\n                it(\"should set saturation on mousedown\", function () {\n                    testMousedown({\n                        item: \"$selection\",\n                        clickAt: [0.25, 0], // x: saturation, y: 1.0 - value\n                        param: \"s\",\n                        expected: 0.25,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should set saturation on drag\", function () {\n                    testDrag({\n                        item: \"$selection\",\n                        clickAt: [0.25, 0], // x: saturation, y: 1.0 - value\n                        dragTo: [0.75, 0],\n                        param: \"s\",\n                        expected: 0.75,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should clip saturation to min value\", function () {\n                    testDrag({\n                        item: \"$selection\",\n                        clickAt: [0.25, 0], // x: saturation, y: 1.0 - value\n                        dragTo: [-0.25, 0],\n                        param: \"s\",\n                        expected: 0,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should clip saturation to max value\", function () {\n                    testDrag({\n                        item: \"$selection\",\n                        clickAt: [0.25, 0], // x: saturation, y: 1.0 - value\n                        dragTo: [1.25, 0],\n                        param: \"s\",\n                        expected: 1,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should set value on mousedown\", function () {\n                    testMousedown({\n                        item: \"$selection\",\n                        clickAt: [1.0, 0.75], // x: saturation, y: 1.0 - value\n                        param: \"v\",\n                        expected: 0.25,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should set value on drag\", function () {\n                    testDrag({\n                        item: \"$selection\",\n                        clickAt: [1.0, 0.75], // x: saturation, y: 1.0 - value\n                        dragTo: [1.0, 0.25],\n                        param: \"v\",\n                        expected: 0.75,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should clip value to min value\", function () {\n                    testDrag({\n                        item: \"$selection\",\n                        clickAt: [1.0, 0.75], // x: saturation, y: 1.0 - value\n                        dragTo: [1.0, 1.25],\n                        param: \"v\",\n                        expected: 0,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should clip value to max value\", function () {\n                    testDrag({\n                        item: \"$selection\",\n                        clickAt: [1.0, 0.75],\n                        dragTo: [1.0, -0.25],\n                        param: \"v\",\n                        expected: 1,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should set hue on mousedown\", function () {\n                    testMousedown({\n                        item: \"$hueSlider\",\n                        clickAt: [0, 0.75], // x: unused, y: 1.0 - (hue / 360)\n                        param: \"h\",\n                        expected: 90,\n                        tolerance: 1\n                    });\n                });\n                it(\"should set hue on drag\", function () {\n                    testDrag({\n                        item: \"$hueSlider\",\n                        clickAt: [0, 0.75], // x: unused, y: 1.0 - (hue / 360)\n                        dragTo: [0, 0.25],\n                        param: \"h\",\n                        expected: 270,\n                        tolerance: 1\n                    });\n                });\n                it(\"should clip hue to min value\", function () {\n                    testDrag({\n                        item: \"$hueSlider\",\n                        clickAt: [0, 0.75], // x: unused, y: 1.0 - (hue / 360)\n                        dragTo: [0, 1.25],\n                        param: \"h\",\n                        expected: 0,\n                        tolerance: 1\n                    });\n                });\n                it(\"should clip hue to max value\", function () {\n                    testDrag({\n                        item: \"$hueSlider\",\n                        clickAt: [0, 0.75], // x: unused, y: 1.0 - (hue / 360)\n                        dragTo: [0, -0.25],\n                        param: \"h\",\n                        expected: 0,\n                        tolerance: 1\n                    });\n                });\n                it(\"should set opacity on mousedown\", function () {\n                    testMousedown({\n                        item: \"$opacitySlider\",\n                        clickAt: [0, 0.75], // x: unused, y: 1.0 - opacity\n                        param: \"a\",\n                        expected: 0.25,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should set opacity on drag\", function () {\n                    testDrag({\n                        item: \"$opacitySlider\",\n                        clickAt: [0, 0.75], // x: unused, y: 1.0 - opacity\n                        dragTo: [0, 0.25],\n                        param: \"a\",\n                        expected: 0.75,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should clip opacity to min value\", function () {\n                    testDrag({\n                        item: \"$opacitySlider\",\n                        clickAt: [0, 0.75], // x: unused, y: 1.0 - opacity\n                        dragTo: [0, 1.25],\n                        param: \"a\",\n                        expected: 0,\n                        tolerance: 0.1\n                    });\n                });\n                it(\"should clip opacity to max value\", function () {\n                    // A increases going up, so a clientY at -0.25 of the item's height corresponds to >100%.\n                    testDrag({\n                        item: \"$opacitySlider\",\n                        clickAt: [0, 0.75], // x: unused, y: 1.0 - opacity\n                        dragTo: [0, -0.25],\n                        param: \"a\",\n                        expected: 1,\n                        tolerance: 0.1\n                    });\n                });\n\n            });\n\n            describe(\"parameter editing with keyboard\", function () {\n\n                function makeKeyEvent(opts) {\n                    return $.Event(\"keydown\", { keyCode: opts.key, shiftKey: !!opts.shift });\n                }\n\n                /**\n                 * Test a key event on the given UI element.\n                 * @param {object} opts The parameters to test:\n                 *     color: An optional initial value to set in the ColorEditor. Defaults to \"hsla(50, 25%, 50%, 0.5)\".\n                 *     item: The (string) name of the member of ColorEditor that references the element to test.\n                 *     key: The KeyEvent key code to simulate.\n                 *     shift: Optional boolean specifying whether to simulate the shift key being down (default false).\n                 *     param: The (string) parameter whose value we're testing (h, s, v, or a).\n                 *     delta: The expected change in value for the parameter.\n                 *     tolerance: The tolerance in variation for the expected value.\n                 *     exact: True to compare the actual values stored in the _hsv object, false (default) to\n                 *          compare tinycolor's normalization of the color value.\n                 */\n                function testKey(opts) {\n\n                    function getParam() {\n                        if (opts.exact) {\n                            var result = colorEditor._hsv[opts.param];\n                            // Because of #2201, this is sometimes a string with a percentage value.\n                            if (typeof result === \"string\" && result.charAt(result.length - 1) === \"%\") {\n                                result = Number(result.substr(0, result.length - 1));\n                            }\n                            return result;\n                        }\n                        return tinycolor(colorEditor.getColor()).toHsv()[opts.param];\n\n                    }\n\n                    makeUI(opts.color || \"hsla(50, 25%, 50%, 0.5)\");\n\n                    var before = getParam();\n                    colorEditor[opts.item].trigger(makeKeyEvent(opts));\n\n                    var after = getParam();\n                    checkNear(after, before + opts.delta, opts.tolerance);\n                }\n\n                /**\n                 * Test whether the given event's default is or isn't prevented on a given key.\n                 * @param {object} opts The parameters to test:\n                 *     color: An optional initial value to set in the ColorEditor. Defaults to \"hsla(50, 25%, 50%, 0.5)\".\n                 *     item: The (string) name of the member of ColorEditor that references the element to test.\n                 *     selection: An optional array ([start, end]) specifying the selection to set in the given element.\n                 *     key: The KeyEvent key code to simulate.\n                 *     shift: Optional boolean specifying whether to simulate the shift key being down (default false).\n                 *     expected: Whether the default is expected to be prevented.\n                 */\n                function testPreventDefault(opts) {\n                    var event, $item;\n\n                    // The color picker needs to be displayed for this test; otherwise the\n                    // selection won't be properly set, because you can only set the selection\n                    // when the text field has focus.\n                    makeUI(opts.color || \"hsla(50, 25%, 50%, 0.5)\", function () { }, defaultSwatches, false);\n\n                    $item = colorEditor[opts.item];\n                    $item.focus();\n                    if (opts.selection) {\n                        $item[0].setSelectionRange(opts.selection[0], opts.selection[1]);\n                    }\n\n                    event = makeKeyEvent(opts);\n                    $item.trigger(event);\n                    expect(event.isDefaultPrevented()).toBe(opts.expected);\n                }\n\n                it(\"should increase saturation by 1.5% on right arrow\", function () {\n                    testKey({\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_RIGHT,\n                        param: \"s\",\n                        delta: 0.015,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should clip max saturation on right arrow\", function () {\n                    testKey({\n                        color: \"hsla(50, 100%, 50%, 0.5)\",\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_RIGHT,\n                        param: \"s\",\n                        delta: 0,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should increase saturation by 7.5% on shift right arrow\", function () {\n                    testKey({\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_RIGHT,\n                        shift: true,\n                        param: \"s\",\n                        delta: 0.075,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should clip max saturation on shift right arrow\", function () {\n                    testKey({\n                        color: \"hsla(50, 100%, 50%, 0.5)\",\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_RIGHT,\n                        shift: true,\n                        param: \"s\",\n                        delta: 0,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should decrease saturation by 1.5% on left arrow\", function () {\n                    testKey({\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_LEFT,\n                        param: \"s\",\n                        delta: -0.015,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should clip min saturation on left arrow\", function () {\n                    testKey({\n                        color: \"hsla(50, 0%, 50%, 0.5)\",\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_LEFT,\n                        param: \"s\",\n                        delta: 0,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should decrease saturation by 7.5% on shift left arrow\", function () {\n                    testKey({\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_LEFT,\n                        shift: true,\n                        param: \"s\",\n                        delta: -0.075,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should clip min saturation on shift left arrow\", function () {\n                    testKey({\n                        color: \"hsla(50, 0%, 50%, 0.5)\",\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_LEFT,\n                        shift: true,\n                        param: \"s\",\n                        delta: 0,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should increase value by 1.5% on up arrow\", function () {\n                    testKey({\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        param: \"v\",\n                        delta: 0.015,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should clip max value on up arrow\", function () {\n                    testKey({\n                        color: \"hsla(50, 25%, 100%, 0.5)\",\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        param: \"v\",\n                        delta: 0,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should increase value by 7.5% on shift up arrow\", function () {\n                    testKey({\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        shift: true,\n                        param: \"v\",\n                        delta: 0.075,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should clip max value on shift up arrow\", function () {\n                    testKey({\n                        color: \"hsla(50, 25%, 100%, 0.5)\",\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        shift: true,\n                        param: \"v\",\n                        delta: 0,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should decrease value by 1.5% on down arrow\", function () {\n                    testKey({\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        param: \"v\",\n                        delta: -0.015,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should clip min value on down arrow\", function () {\n                    testKey({\n                        color: \"hsla(50, 25%, 0%, 0.5)\",\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        param: \"v\",\n                        delta: 0,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should decrease value by 7.5% on shift down arrow\", function () {\n                    testKey({\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        shift: true,\n                        param: \"v\",\n                        delta: -0.075,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should clip min value on shift down arrow\", function () {\n                    testKey({\n                        color: \"hsla(50, 25%, 0%, 0.5)\",\n                        item: \"$selectionBase\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        shift: true,\n                        param: \"v\",\n                        delta: 0,\n                        tolerance: 0.01\n                    });\n                });\n                it(\"should increase hue by 3.6 on up arrow\", function () {\n                    testKey({\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        param: \"h\",\n                        delta: 3.6,\n                        tolerance: 1\n                    });\n                });\n                it(\"should wrap around max hue on up arrow\", function () {\n                    testKey({\n                        color: \"hsla(359, 25%, 50%, 0.5)\",\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        param: \"h\",\n                        delta: -359 + 3.6,\n                        tolerance: 1\n                    });\n                });\n                it(\"should increase hue by 18 on shift up arrow\", function () {\n                    testKey({\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        shift: true,\n                        param: \"h\",\n                        delta: 18,\n                        tolerance: 1\n                    });\n                });\n                it(\"should wrap around max hue on shift up arrow\", function () {\n                    testKey({\n                        color: \"hsla(359, 25%, 50%, 0.5)\",\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        shift: true,\n                        param: \"h\",\n                        delta: -359 + 18,\n                        tolerance: 1\n                    });\n                });\n                it(\"should decrease hue by 3.6 on down arrow\", function () {\n                    testKey({\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        param: \"h\",\n                        delta: -3.6,\n                        tolerance: 1\n                    });\n                });\n                it(\"should wrap around min hue on down arrow\", function () {\n                    testKey({\n                        color: \"hsla(0, 25%, 50%, 0.5)\",\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        param: \"h\",\n                        delta: 360 - 3.6,\n                        tolerance: 1\n                    });\n                });\n                it(\"should decrease hue by 18 on shift down arrow\", function () {\n                    testKey({\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        shift: true,\n                        param: \"h\",\n                        delta: -18,\n                        tolerance: 1\n                    });\n                });\n                it(\"should wrap around min hue on shift down arrow\", function () {\n                    testKey({\n                        color: \"hsla(0, 25%, 50%, 0.5)\",\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        shift: true,\n                        param: \"h\",\n                        delta: 360 - 18,\n                        tolerance: 1\n                    });\n                });\n                it(\"should increase opacity by 0.01 on up arrow\", function () {\n                    testKey({\n                        item: \"$opacitySelector\",\n                        key: KeyEvent.DOM_VK_UP,\n                        param: \"a\",\n                        delta: 0.01,\n                        tolerance: 0.005\n                    });\n                });\n                it(\"should clip max opacity on up arrow\", function () {\n                    testKey({\n                        color: \"hsla(90, 25%, 50%, 1.0)\",\n                        item: \"$opacitySelector\",\n                        key: KeyEvent.DOM_VK_UP,\n                        param: \"a\",\n                        delta: 0,\n                        tolerance: 0.005\n                    });\n                });\n                it(\"should increase opacity by 0.05 on shift up arrow\", function () {\n                    testKey({\n                        item: \"$opacitySelector\",\n                        key: KeyEvent.DOM_VK_UP,\n                        shift: true,\n                        param: \"a\",\n                        delta: 0.05,\n                        tolerance: 0.005\n                    });\n                });\n                it(\"should clip max opacity on shift up arrow\", function () {\n                    testKey({\n                        color: \"hsla(90, 25%, 50%, 1.0)\",\n                        item: \"$opacitySelector\",\n                        key: KeyEvent.DOM_VK_UP,\n                        shift: true,\n                        param: \"a\",\n                        delta: 0,\n                        tolerance: 0.005\n                    });\n                });\n                it(\"should decrease opacity by 0.01 on down arrow\", function () {\n                    testKey({\n                        item: \"$opacitySelector\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        param: \"a\",\n                        delta: -0.01,\n                        tolerance: 0.005\n                    });\n                });\n                it(\"should clip min opacity on down arrow\", function () {\n                    testKey({\n                        color: \"hsla(90, 25%, 50%, 0)\",\n                        item: \"$opacitySelector\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        param: \"a\",\n                        delta: 0,\n                        tolerance: 0.005\n                    });\n                });\n                it(\"should decrease opacity by 0.05 on shift down arrow\", function () {\n                    testKey({\n                        item: \"$opacitySelector\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        shift: true,\n                        param: \"a\",\n                        delta: -0.05,\n                        tolerance: 0.005\n                    });\n                });\n                it(\"should clip min opacity on shift down arrow\", function () {\n                    testKey({\n                        color: \"hsla(90, 25%, 50%, 0)\",\n                        item: \"$opacitySelector\",\n                        key: KeyEvent.DOM_VK_DOWN,\n                        shift: true,\n                        param: \"a\",\n                        delta: 0,\n                        tolerance: 0.005\n                    });\n                });\n\n                // For #2138\n                it(\"should increase hue by 18 on shift up arrow even if saturation is 0\", function () {\n                    testKey({\n                        color: \"hsl(180, 0, 0)\",\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        shift: true,\n                        param: \"h\",\n                        delta: 18,\n                        tolerance: 1,\n                        exact: true\n                    });\n                });\n                it(\"should increase hue by 18 on shift up arrow for a near-gray hex color\", function () {\n                    testKey({\n                        color: \"#5c5b56\",\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        shift: true,\n                        param: \"h\",\n                        delta: 18,\n                        tolerance: 1,\n                        exact: true\n                    });\n                });\n                it(\"should not change value when hue changes\", function () {\n                    testKey({\n                        color: \"#8e8247\",\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_UP,\n                        shift: true,\n                        param: \"v\",\n                        delta: 0,\n                        tolerance: 0.01,\n                        exact: true\n                    });\n                });\n\n                // For #2193 and #2229\n                it(\"should prevent default on the key event for an unhandled arrow key on non-text-field\", function () {\n                    testPreventDefault({\n                        color: \"#8e8247\",\n                        item: \"$hueBase\",\n                        key: KeyEvent.DOM_VK_RIGHT,\n                        expected: true\n                    });\n                });\n                it(\"should prevent default on left arrow at the start of the text field\", function () {\n                    testPreventDefault({\n                        color: \"#8e8247\",\n                        item: \"$colorValue\",\n                        selection: [0, 0],\n                        key: KeyEvent.DOM_VK_LEFT,\n                        expected: true\n                    });\n                });\n                it(\"should not prevent default on left arrow in the middle of the text field\", function () {\n                    testPreventDefault({\n                        color: \"#8e8247\",\n                        item: \"$colorValue\",\n                        selection: [3, 3],\n                        key: KeyEvent.DOM_VK_LEFT,\n                        expected: false\n                    });\n                });\n                it(\"should not prevent default on left arrow at the end of the text field\", function () {\n                    testPreventDefault({\n                        color: \"#8e8247\",\n                        item: \"$colorValue\",\n                        selection: [7, 7],\n                        key: KeyEvent.DOM_VK_LEFT,\n                        expected: false\n                    });\n                });\n                it(\"should not prevent default on left arrow with a range selection\", function () {\n                    testPreventDefault({\n                        color: \"#8e8247\",\n                        item: \"$colorValue\",\n                        selection: [0, 7],\n                        key: KeyEvent.DOM_VK_LEFT,\n                        expected: false\n                    });\n                });\n                it(\"should not prevent default on right arrow at the start of the text field\", function () {\n                    testPreventDefault({\n                        color: \"#8e8247\",\n                        item: \"$colorValue\",\n                        selection: [0, 0],\n                        key: KeyEvent.DOM_VK_RIGHT,\n                        expected: false\n                    });\n                });\n                it(\"should not prevent default on right arrow in the middle of the text field\", function () {\n                    testPreventDefault({\n                        color: \"#8e8247\",\n                        item: \"$colorValue\",\n                        selection: [3, 3],\n                        key: KeyEvent.DOM_VK_RIGHT,\n                        expected: false\n                    });\n                });\n                it(\"should prevent default on right arrow at the end of the text field\", function () {\n                    testPreventDefault({\n                        color: \"#8e8247\",\n                        item: \"$colorValue\",\n                        selection: [7, 7],\n                        key: KeyEvent.DOM_VK_RIGHT,\n                        expected: true\n                    });\n                });\n                it(\"should not prevent default on right arrow with a range selection\", function () {\n                    testPreventDefault({\n                        color: \"#8e8247\",\n                        item: \"$colorValue\",\n                        selection: [0, 7],\n                        key: KeyEvent.DOM_VK_RIGHT,\n                        expected: false\n                    });\n                });\n\n            });\n\n            describe(\"color swatches and original color\", function () {\n\n                it(\"should restore to original color when clicked on\", function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor.setColorFromString(\"#0000ff\");\n                    colorEditor.$originalColor.trigger(\"click\");\n                    expect(tinycolor(colorEditor.getColor()).toHexString()).toBe(\"#abcdef\");\n                });\n\n                it(\"should create swatches\", function () {\n                    makeUI(\"#abcdef\");\n                    expect($(\".swatch\").length).toBe(2);\n                });\n\n                it(\"should set color to a swatch when clicked on\", function () {\n                    makeUI(\"#fedcba\");\n                    $($(\".swatch\")[0]).trigger(\"click\");\n                    expect(tinycolor(colorEditor.getColor()).toHexString()).toBe(\"#abcdef\");\n                });\n\n            });\n\n            describe(\"input text field syncing\", function () {\n\n                it(\"should commit valid changes made in the input field on the input event\", function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor.$colorValue.val(\"#fedcba\");\n                    colorEditor.$colorValue.trigger(\"input\");\n                    expect(tinycolor(colorEditor.getColor()).toHexString()).toBe(\"#fedcba\");\n                });\n                it(\"should commit valid changes made in the input field on the change event\", function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor.$colorValue.val(\"#fedcba\");\n                    colorEditor.$colorValue.trigger(\"change\");\n                    expect(tinycolor(colorEditor.getColor()).toHexString()).toBe(\"#fedcba\");\n                });\n                it(\"should not commit changes on the input event while the value is invalid, but should keep them in the text field\", function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor.$colorValue.val(\"rgb(0, 0, 0\");\n                    colorEditor.$colorValue.trigger(\"input\");\n                    expect(tinycolor(colorEditor.getColor()).toHexString()).toBe(\"#abcdef\");\n                    expect(colorEditor.$colorValue.val()).toBe(\"rgb(0, 0, 0\");\n                });\n                it(\"should revert to the previous value on the change event while the value is invalid\", function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor.$colorValue.val(\"rgb(0, 0, 0\");\n                    colorEditor.$colorValue.trigger(\"change\");\n                    expect(tinycolor(colorEditor.getColor()).toHexString()).toBe(\"#abcdef\");\n                    expect(colorEditor.$colorValue.val()).toBe(\"#abcdef\");\n                });\n\n                it(\"should convert percentage RGB values to normal values\", function () {\n                    makeUI(\"#abcdef\");\n                    expect(colorEditor._convertToNormalRGB(\"rgb(25%, 50%, 75%)\")).toBe(\"rgb(64, 128, 191)\");\n                });\n                it(\"should normalize a string to match tinycolor's format\", function () {\n                    makeUI(\"#abcdef\");\n                    //Percentage based colors are now supported: the following test is obsolete\n                    //expect(colorEditor._normalizeColorString(\"rgb(25%,50%,75%)\")).toBe(\"rgb(64, 128, 191)\");\n                    expect(colorEditor._normalizeColorString(\"rgb(10,20,   30)\")).toBe(\"rgb(10, 20, 30)\");\n                });\n            });\n\n            describe(\"undo/redo\", function () {\n\n                function triggerCtrlKey($element, key, shift) {\n                    var ctrlKeyProperty = (brackets.platform === \"win\" ? \"ctrlKey\" : \"metaKey\"),\n                        eventProps = {keyCode: key, shiftKey: shift};\n                    eventProps[ctrlKeyProperty] = true;\n                    $element.trigger($.Event(\"keydown\", eventProps));\n                }\n\n                it(\"should undo when Ctrl-Z is pressed on a focused element in the color editor\", async function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor.setColorFromString(\"#a0a0a0\");\n                    colorEditor.$hueBase.focus();\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Z);\n                    expect(getColorString()).toBe(\"#abcdef\");\n                });\n\n                it(\"should redo when Ctrl-Shift-Z is pressed on a focused element in the color editor\", async function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor._commitColor(\"#a0a0a0\", true);\n                    colorEditor.$hueBase.focus();\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Z);\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Z, true);\n                    expect(getColorString()).toBe(\"#a0a0a0\");\n                });\n\n                it(\"should redo when Ctrl-Y is pressed on a focused element in the color editor\", async function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor._commitColor(\"#a0a0a0\", true);\n                    colorEditor.$hueBase.focus();\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Z);\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Y);\n                    expect(getColorString()).toBe(\"#a0a0a0\");\n                });\n\n                it(\"should redo when Ctrl-Y is pressed after two Ctrl-Zs (only one Ctrl-Z should take effect)\", async function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor._commitColor(\"#a0a0a0\", true);\n                    colorEditor.$hueBase.focus();\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Z);\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Z);\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Y);\n                    expect(getColorString()).toBe(\"#a0a0a0\");\n                });\n\n                it(\"should undo when Ctrl-Z is pressed after two Ctrl-Ys (only one Ctrl-Y should take effect)\", async function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor._commitColor(\"#a0a0a0\", true);\n                    colorEditor.$hueBase.focus();\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Z);\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Y);\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Y);\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Z);\n                    expect(getColorString()).toBe(\"#abcdef\");\n                });\n\n                it(\"should undo an rgba conversion\", async function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor.$rgbaButton.click();\n                    triggerCtrlKey(colorEditor.$rgbaButton, KeyEvent.DOM_VK_Z);\n                    expect(getColorString()).toBe(\"#abcdef\");\n                });\n                it(\"should undo an hsla conversion\", async function () {\n                    makeUI(\"#abcdef\");\n                    colorEditor.$hslButton.click();\n                    triggerCtrlKey(colorEditor.$hslButton, KeyEvent.DOM_VK_Z);\n                    expect(getColorString()).toBe(\"#abcdef\");\n                });\n                it(\"should undo a hex conversion\", async function () {\n                    makeUI(\"rgba(12, 32, 65, 0.2)\");\n                    colorEditor.$hexButton.trigger(\"click\");\n                    triggerCtrlKey(colorEditor.$hexButton, KeyEvent.DOM_VK_Z);\n                    expect(getColorString()).toBe(\"rgba(12, 32, 65, 0.2)\");\n                });\n\n                it(\"should undo a saturation/value change\", async function () {\n                    makeUI(\"rgba(100, 150, 200, 0.3)\");\n                    eventAtRatio(\"mousedown\", colorEditor.$selectionBase, [0.5, 0.5]);\n                    triggerCtrlKey(colorEditor.$selectionBase, KeyEvent.DOM_VK_Z);\n                    expect(getColorString()).toBe(\"rgba(100, 150, 200, 0.3)\");\n                    colorEditor.$selectionBase.trigger(\"mouseup\");  // clean up drag state\n                });\n                it(\"should undo a hue change\", async function () {\n                    makeUI(\"rgba(100, 150, 200, 0.3)\");\n                    eventAtRatio(\"mousedown\", colorEditor.$hueBase, [0, 0.5]);\n                    triggerCtrlKey(colorEditor.$hueBase, KeyEvent.DOM_VK_Z);\n                    expect(getColorString()).toBe(\"rgba(100, 150, 200, 0.3)\");\n                    colorEditor.$hueBase.trigger(\"mouseup\");  // clean up drag state\n                });\n                it(\"should undo an opacity change\", async function () {\n                    makeUI(\"rgba(100, 150, 200, 0.3)\");\n                    eventAtRatio(\"mousedown\", colorEditor.$opacitySelector, [0, 0.5]);\n                    triggerCtrlKey(colorEditor.$opacitySelector, KeyEvent.DOM_VK_Z);\n                    expect(getColorString()).toBe(\"rgba(100, 150, 200, 0.3)\");\n                    colorEditor.$opacitySelector.trigger(\"mouseup\");  // clean up drag state\n                });\n\n                it(\"should undo a text field change\", async function () {\n                    makeUI(\"rgba(100, 150, 200, 0.3)\");\n                    colorEditor.$colorValue.val(\"rgba(50, 50, 50, 0.9)\");\n                    triggerCtrlKey(colorEditor.$colorValue, KeyEvent.DOM_VK_Z);\n                    expect(getColorString()).toBe(\"rgba(100, 150, 200, 0.3)\");\n                });\n                it(\"should undo a swatch click\", async function () {\n                    makeUI(\"rgba(100, 150, 200, 0.3)\");\n                    var $swatch = $(colorEditor.$swatches.find(\"li\")[0]);\n                    $swatch.trigger(\"click\");\n                    triggerCtrlKey($swatch, KeyEvent.DOM_VK_Z);\n                    expect(getColorString()).toBe(\"rgba(100, 150, 200, 0.3)\");\n                });\n\n            });\n        });\n    });\n});\n"],"file":"unittests.js"}