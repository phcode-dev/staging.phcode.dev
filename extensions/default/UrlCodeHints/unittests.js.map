{"version":3,"sources":["extensions/default/UrlCodeHints/unittests.js"],"names":["define","require","exports","module","MasterDocumentManager","brackets","getModule","MasterMainViewManager","FileUtils","SpecRunnerUtils","UrlCodeHints","describe","extensionTestPath","getTestPath","testHtmlPath","testCssPath","testScssPath","testDocument","testEditor","hintsObj","testfilesDirHints","subfolderDirHints","UrlCodeHintsDirHintsMac","UrlCodeHintsDirHints","createMockEditor","doc","createMockEditorForDocument","async","setupTests","testFilePath","getDocumentForPath","done","awaitsFor","_edit","ACTIVE_PANE","tearDownTests","_closeAll","ALL_PANES","destroyMockEditor","expectAsyncHints","provider","expect","hasHints","toBe","getHints","toBeTruthy","Object","hasOwnProperty","resolvedHintsObj","hints","expectNoHints","toBeFalsy","verifyUrlHints","hintList","expectedHints","toEqual","fixPos","pos","sticky","beforeAll","afterAll","it","setCursorPos","line","ch","hintProvider","platform","afterEach","testWindow","workingSet","CodeHintManager","CommandManager","Commands","DocumentManager","MainViewManager","EditorManager","createTestWindowAndRun","test","loadProjectInTestWindow","push","awaitsForDone","openProjectFiles","getCurrentFullEditor","execute","SHOW_CODE_HINTS","_getCodeHintList","toContain","closeTestWindow","beforeEach","pos1","pos2","pos3","replaceRange","length","insertHint","getRange","getCursorPos","toEql","pos4","pos5"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeEach, afterEach, beforeAll, afterAll, awaitsFor, awaitsForDone */\n\ndefine(function (require, exports, module) {\n\n\n    // Modules from the SpecRunner window\n    var MasterDocumentManager     = brackets.getModule(\"document/DocumentManager\"),\n        MasterMainViewManager     = brackets.getModule(\"view/MainViewManager\"),\n        FileUtils                 = brackets.getModule(\"file/FileUtils\"),\n        SpecRunnerUtils           = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        UrlCodeHints              = require(\"main\");\n\n\n    describe(\"extension:Url Code Hinting\", function () {\n\n        var extensionTestPath   = SpecRunnerUtils.getTestPath(\"/spec/extn-urlcodehints-testfiles/\"),\n            testHtmlPath    = extensionTestPath + \"testfiles/test.html\",\n            testCssPath     = extensionTestPath + \"testfiles/subfolder/test.css\",\n            testScssPath    = extensionTestPath + \"testfiles/subfolder/test.scss\",\n            testDocument,\n            testEditor,\n            hintsObj;\n\n        // IMPORTANT: By default, Mac sorts folder contents differently from other OS's,\n        // so the files and folders in the \"testfiles\" and \"subfolder\" folder are named\n        // strategically so that they sort the same on all OS's (i.e. folders are listed\n        // first, and then files), but this is not true for UrlCodeHints folder.\n        var testfilesDirHints       = [ \"subfolder/\", \"test.html\"],\n            subfolderDirHints       = [ \"chevron.png\", \"test.css\", \"test.js\", \"test.scss\"],\n            UrlCodeHintsDirHintsMac = [ \"../testfiles/\"],\n            UrlCodeHintsDirHints    = [ \"../testfiles/\"];\n\n        /**\n         * Returns an Editor suitable for use in isolation, given a Document.\n         *\n         * @param {Document} doc - the document to be contained by the new Editor\n         * @return {Editor} - the mock editor object\n         */\n        function createMockEditor(doc) {\n            return SpecRunnerUtils.createMockEditorForDocument(doc);\n        }\n\n        async function setupTests(testFilePath) {\n            MasterDocumentManager.getDocumentForPath(testFilePath).done(function (doc) {\n                testDocument = doc;\n            });\n\n            await awaitsFor(function () {\n                return (testDocument);\n            }, \"Unable to open test document\", 2000);\n\n            // create Editor instance (containing a CodeMirror instance)\n            testEditor = createMockEditor(testDocument);\n            MasterMainViewManager._edit(MasterMainViewManager.ACTIVE_PANE, testDocument);\n        }\n\n        function tearDownTests() {\n            // The following call ensures that the document is reloaded\n            // from disk before each test\n            MasterMainViewManager._closeAll(MasterMainViewManager.ALL_PANES);\n            if(testDocument){\n                SpecRunnerUtils.destroyMockEditor(testDocument);\n            }\n            testEditor = null;\n            testDocument = null;\n            hintsObj = null;\n        }\n\n        // Helper method to ask provider for hints at current cursor position.\n        // Provider returns either an array of hints, or a deferred promise.\n        // If a promise is returned, wait for it to resolve.\n        //\n        // Since this may be async, it cannot return the hints list, so it depends\n        // on the hintsObj variable (with module scope) to exist.\n        async function expectAsyncHints(provider) {\n            expect(provider.hasHints(testEditor, null)).toBe(true);\n            hintsObj = provider.getHints();\n            expect(hintsObj).toBeTruthy();\n\n            if (hintsObj instanceof Object && hintsObj.hasOwnProperty(\"done\")) {\n                hintsObj.done(function (resolvedHintsObj) {\n                    hintsObj = resolvedHintsObj;\n                });\n            }\n\n            await awaitsFor(function () {\n                return (!hintsObj || hintsObj.hints);\n            }, \"Unable to resolve hints\", 2000);\n        }\n\n        // Ask provider for hints at current cursor position; expect it NOT to return any\n        function expectNoHints(provider) {\n            expect(provider.hasHints(testEditor, null)).toBeFalsy();\n        }\n\n        // Expect hintList to contain folder and file names.\n        function verifyUrlHints(hintList, expectedHints) {\n            expect(hintList).toEqual(expectedHints);\n        }\n\n        // Helper functions for testing cursor position / selection range\n        function fixPos(pos) {\n            if (!(\"sticky\" in pos)) {\n                pos.sticky = null;\n            }\n            return pos;\n        }\n\n        describe(\"HTML Url Code Hints\", function () {\n\n            beforeAll(async function () {\n                await setupTests(testHtmlPath);\n            });\n\n            afterAll(function () {\n                tearDownTests();\n            });\n\n            it(\"should hint for href attribute\", async function () {\n                testEditor.setCursorPos({ line: 14, ch: 12 });\n\n                // Must reset hintsObj before every call to await expectAsyncHints()\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                verifyUrlHints(hintsObj.hints, testfilesDirHints);\n            });\n\n            it(\"should hint for src attribute\", async function () {\n                testEditor.setCursorPos({ line: 15, ch: 13 });\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                verifyUrlHints(hintsObj.hints, testfilesDirHints);\n            });\n\n            it(\"should hint for poster attribute\", async function () {\n                testEditor.setCursorPos({ line: 24, ch: 17 });\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                verifyUrlHints(hintsObj.hints, testfilesDirHints);\n            });\n\n            it(\"should not hint for type attribute\", async function () {\n                testEditor.setCursorPos({ line: 15, ch: 21 });\n                expectNoHints(UrlCodeHints.hintProvider);\n            });\n\n            it(\"should not hint in query part of url\", async function () {\n                testEditor.setCursorPos({ line: 20, ch: 31 });\n                expectNoHints(UrlCodeHints.hintProvider);\n            });\n\n            it(\"should hint up 1 folder for '../'\", async function () {\n                testEditor.setCursorPos({ line: 21, ch: 14 });\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                var expectedHints = (brackets.platform !== \"win\") ? UrlCodeHintsDirHintsMac : UrlCodeHintsDirHints;\n                verifyUrlHints(hintsObj.hints, expectedHints);\n            });\n        });\n\n        describe(\"CSS Url Code Hints\", function () {\n\n            beforeAll(async function () {\n                await setupTests(testHtmlPath);\n            });\n\n            afterAll(function () {\n                tearDownTests();\n            });\n\n            it(\"should hint for @import url()\", async function () {\n                testEditor.setCursorPos({ line: 4, ch: 12 });\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                verifyUrlHints(hintsObj.hints, testfilesDirHints);\n            });\n\n            it(\"should hint for background-image: url()\", async function () {\n                testEditor.setCursorPos({ line: 6, ch: 24 });\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                verifyUrlHints(hintsObj.hints, testfilesDirHints);\n            });\n\n            it(\"should hint for border-image: url('')\", async function () {\n                testEditor.setCursorPos({ line: 7, ch: 21 });\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                verifyUrlHints(hintsObj.hints, testfilesDirHints);\n            });\n\n            it(\"should hint for list-style-image: url(\\\"\\\")\", async function () {\n                testEditor.setCursorPos({ line: 8, ch: 25 });\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                verifyUrlHints(hintsObj.hints, testfilesDirHints);\n            });\n\n            it(\"should not hint for @import outside of url()\", async function () {\n                testEditor.setCursorPos({ line: 4, ch: 15 });\n                expectNoHints(UrlCodeHints.hintProvider);\n            });\n\n            it(\"should not hint for background-image outside of url()\", async function () {\n                testEditor.setCursorPos({ line: 11, ch: 20 });\n                expectNoHints(UrlCodeHints.hintProvider);\n            });\n        });\n\n        describe(\"Url Code Hints in a subfolder\", function () {\n\n            afterEach(function () {\n                tearDownTests();\n            });\n\n            it(\"should hint for background-image: url() in CSS\", async function () {\n                await setupTests(testCssPath);\n\n                testEditor.setCursorPos({ line: 3, ch: 26 });\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                verifyUrlHints(hintsObj.hints, subfolderDirHints);\n            });\n\n            it(\"should hint for background-image: url() in SCSS\", async function () {\n                await setupTests(testScssPath);\n\n                testEditor.setCursorPos({ line: 4, ch: 34 });\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                verifyUrlHints(hintsObj.hints, subfolderDirHints);\n            });\n        });\n\n        describe(\"Project root relative Url Code Hints\", function () {\n\n            var testWindow,\n                brackets,\n                workingSet = [],\n                CodeHintManager,\n                CommandManager,\n                Commands,\n                DocumentManager,\n                MainViewManager,\n                EditorManager;\n\n            it(\"should hint site root '/'\", async function () {\n                testWindow = await SpecRunnerUtils.createTestWindowAndRun();\n                brackets        = testWindow.brackets;\n                CodeHintManager = brackets.test.CodeHintManager;\n                CommandManager  = brackets.test.CommandManager;\n                Commands        = brackets.test.Commands;\n                DocumentManager = brackets.test.DocumentManager;\n                EditorManager   = brackets.test.EditorManager;\n                MainViewManager = brackets.test.MainViewManager;\n\n                await SpecRunnerUtils.loadProjectInTestWindow(extensionTestPath);\n\n                workingSet.push(testHtmlPath);\n                await awaitsForDone(SpecRunnerUtils.openProjectFiles(workingSet), \"openProjectFiles\");\n\n                DocumentManager.getDocumentForPath(testHtmlPath).done(function (doc) {\n                    testDocument = doc;\n                });\n\n                await awaitsFor(function () {\n                    return (testDocument);\n                }, \"Unable to open test document\", 2000);\n\n                MainViewManager._edit(MainViewManager.ACTIVE_PANE, testDocument);\n                testEditor = EditorManager.getCurrentFullEditor();\n                testEditor.setCursorPos({ line: 22, ch: 12 });\n                CommandManager.execute(Commands.SHOW_CODE_HINTS);\n\n                var hintList = CodeHintManager._getCodeHintList();\n                expect(hintList).toBeTruthy();\n                expect(hintList.hints).toBeTruthy();\n                expect(hintList.hints).toContain(\"/testfiles/\");\n\n                // cleanup\n                testEditor       = null;\n                testDocument     = null;\n                testWindow       = null;\n                brackets         = null;\n                CodeHintManager  = null;\n                CommandManager   = null;\n                Commands         = null;\n                DocumentManager  = null;\n                EditorManager    = null;\n                MainViewManager  = null;\n                await SpecRunnerUtils.closeTestWindow();\n            }, 30000);\n        });\n\n        describe(\"Url Insertion\", function () {\n\n            // These tests edit doc, so we need to setup/tear-down for each test\n            beforeEach(async function () {\n                await setupTests(testHtmlPath);\n            });\n\n            afterEach(function () {\n                tearDownTests();\n            });\n\n            it(\"should handle unclosed url(\", async function () {\n                var pos1    = { line: 11, ch: 20 },\n                    pos2    = { line: 11, ch: 24 },\n                    pos3    = { line: 11, ch: 34 };\n\n                testEditor.setCursorPos(pos1);\n                testDocument.replaceRange(\"url(\", pos1, pos1);\n                testEditor.setCursorPos(pos2);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(2);\n                expect(hintsObj.hints[1]).toBe(\"test.html\");\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[1])).toBe(false);\n\n                // hint was added with closing paren\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"url(test.html)\");\n\n                // Cursor was moved past closing paren\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(pos3));\n            });\n\n            it(\"should handle unclosed url( with unclosed single-quote\", async function () {\n                var pos1    = { line: 11, ch: 20 },\n                    pos2    = { line: 11, ch: 25 },\n                    pos3    = { line: 11, ch: 36 };\n\n                testEditor.setCursorPos(pos1);\n                testDocument.replaceRange(\"url('\", pos1, pos1);\n                testEditor.setCursorPos(pos2);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(2);\n                expect(hintsObj.hints[1]).toBe(\"test.html\");\n\n                // False indicates hints were closed after insertion\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[1])).toBe(false);\n\n                // Hint was added with closing single-quote and closing paren\n                expect(testDocument.getRange(pos1, pos3)).toEql(\"url('test.html')\");\n\n                // Cursor was moved past closing single-quote and closing paren\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(pos3));\n            });\n\n            it(\"should keep hints open after inserting folder in HTML\", async function () {\n                var pos1    = { line: 18, ch: 12 },\n                    pos2    = { line: 18, ch: 22 },\n                    pos3    = { line: 18, ch: 33 },\n                    pos4    = { line: 18, ch: 34 };\n\n                testEditor.setCursorPos(pos1);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(2);\n                expect(hintsObj.hints[0]).toBe(\"subfolder/\");\n\n                // True indicates hints were remain open after insertion of folder\n                // (i.e. showing contents of inserted folder)\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(true);\n\n                // Hint was added with closing double-quote and closing paren\n                expect(testDocument.getRange(pos1, pos2)).toEqual(\"subfolder/\");\n\n                // Cursor remains inside quote\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(pos2));\n\n                // Get hints of inserted folder\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(subfolderDirHints.length);\n\n                // Complete path is displayed\n                expect(hintsObj.hints[0]).toBe(\"subfolder/chevron.png\");\n\n                // False indicates hints were closed after insertion\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(false);\n\n                // Hint was added\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"subfolder/chevron.png\");\n\n                // Cursor was moved past closing double-quote and closing paren\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(pos4));\n            });\n\n            it(\"should keep hints open after inserting folder in CSS\", async function () {\n                var pos1    = { line: 11, ch: 20 },\n                    pos2    = { line: 11, ch: 25 },\n                    pos3    = { line: 11, ch: 35 },\n                    pos4    = { line: 11, ch: 37 },\n                    pos5    = { line: 11, ch: 48 };\n\n                testEditor.setCursorPos(pos1);\n                testDocument.replaceRange('url(\"', pos1, pos1);\n                testEditor.setCursorPos(pos2);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(2);\n                expect(hintsObj.hints[0]).toBe(\"subfolder/\");\n\n                // True indicates hints were remain open after insertion of folder\n                // (i.e. showing contents of inserted folder)\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(true);\n\n                // Hint was added with closing double-quote and closing paren\n                expect(testDocument.getRange(pos1, pos4)).toEqual('url(\"subfolder/\")');\n\n                // Cursor remains inside double-quote and closing paren\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(pos3));\n\n                // Get hints of inserted folder\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(subfolderDirHints.length);\n\n                // Complete path is displayed\n                expect(hintsObj.hints[0]).toBe(\"subfolder/chevron.png\");\n\n                // False indicates hints were closed after insertion\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(false);\n\n                // Hint was added\n                expect(testDocument.getRange(pos1, pos5)).toEqual('url(\"subfolder/chevron.png\")');\n\n                // Cursor was moved past closing double-quote and closing paren\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(pos5));\n            });\n\n            it(\"should insert folder and replace file in HTML\", async function () {\n                var pos1    = { line: 23, ch: 11 },\n                    pos2    = { line: 23, ch: 21 },\n                    pos3    = { line: 23, ch: 31 },\n                    pos4    = { line: 23, ch: 32 };\n\n                testEditor.setCursorPos(pos1);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(2);\n                expect(hintsObj.hints[0]).toBe(\"subfolder/\");\n\n                // True indicates hints were remain open after insertion of folder\n                // (i.e. showing contents of inserted folder)\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(true);\n\n                // Folder was inserted (i.e. filename was not removed)\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"subfolder/test2.html\");\n\n                // Cursor is at end of inserted folder\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(pos2));\n\n                // Get hints of inserted folder\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(subfolderDirHints.length);\n\n                // Complete path is displayed\n                expect(hintsObj.hints[0]).toBe(\"subfolder/chevron.png\");\n\n                // False indicates hints were closed after insertion\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(false);\n\n                // Filename was replaced\n                expect(testDocument.getRange(pos1, pos4)).toEqual(\"subfolder/chevron.png\");\n            });\n\n            it(\"should completely replace file in HTML\", async function () {\n                var pos1    = { line: 25, ch: 11 },\n                    pos2    = { line: 25, ch: 27 },\n                    pos3    = { line: 25, ch: 34 };\n\n                testEditor.setCursorPos(pos2);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(1);\n                expect(hintsObj.hints[0]).toBe(\"subfolder/chevron.png\");\n\n                // False indicates hints were closed after insertion\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(false);\n\n                // File name was completely replaced, not just appended to\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"'subfolder/chevron.png'\");\n\n                // Cursor was moved past closing single-quote\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(pos3));\n            });\n\n            it(\"should insert filtered folder in HTML\", async function () {\n                var pos1    = { line: 23, ch: 11 },\n                    pos2    = { line: 23, ch: 14 },\n                    pos3    = { line: 23, ch: 31 };\n\n                testDocument.replaceRange(\"sub\", pos1, pos1);\n                testEditor.setCursorPos(pos2);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(1);\n                expect(hintsObj.hints[0]).toBe(\"subfolder/\");\n\n                // Partially existing folder was inserted correctly\n                UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0]);\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"subfolder/test2.html\");\n            });\n\n            it(\"should replace filtered file in HTML\", async function () {\n                var pos1    = { line: 23, ch: 11 },\n                    pos2    = { line: 23, ch: 14 },\n                    pos3    = { line: 23, ch: 21 };\n\n                testDocument.replaceRange(\"tes\", pos1, pos1);\n                testEditor.setCursorPos(pos2);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(1);\n                expect(hintsObj.hints[0]).toBe(\"test.html\");\n\n                // Partially existing file was replaced correctly\n                UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0]);\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"test.html'\");\n            });\n\n            it(\"should insert folder and replace file in CSS\", async function () {\n                var pos1    = { line: 10, ch: 24 },\n                    pos2    = { line: 10, ch: 34 },\n                    pos3    = { line: 10, ch: 43 },\n                    pos4    = { line: 10, ch: 45 };\n\n                testEditor.setCursorPos(pos1);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(2);\n                expect(hintsObj.hints[0]).toBe(\"subfolder/\");\n\n                // True indicates hints were remain open after insertion of folder\n                // (i.e. showing contents of inserted folder)\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(true);\n\n                // Folder was inserted (i.e. filename was not removed)\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"subfolder/dummy.jpg\");\n\n                // Cursor is at end of inserted folder\n                expect(fixPos(testEditor.getCursorPos())).toEql(fixPos(pos2));\n\n                // Get hints of inserted folder\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(subfolderDirHints.length);\n\n                // Complete path is displayed\n                expect(hintsObj.hints[0]).toBe(\"subfolder/chevron.png\");\n\n                // False indicates hints were closed after insertion\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(false);\n\n                // Filename was replaced\n                expect(testDocument.getRange(pos1, pos4)).toEqual(\"subfolder/chevron.png\");\n            });\n\n            it(\"should insert filtered folder in CSS\", async function () {\n                var pos1    = { line: 10, ch: 24 },\n                    pos2    = { line: 10, ch: 27 },\n                    pos3    = { line: 10, ch: 43 };\n\n                testDocument.replaceRange(\"sub\", pos1, pos1);\n                testEditor.setCursorPos(pos2);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(1);\n                expect(hintsObj.hints[0]).toBe(\"subfolder/\");\n\n                // Partially existing folder was inserted correctly\n                UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0]);\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"subfolder/dummy.jpg\");\n            });\n\n            it(\"should replace filtered file in CSS\", async function () {\n                var pos1    = { line: 10, ch: 24 },\n                    pos2    = { line: 10, ch: 27 },\n                    pos3    = { line: 10, ch: 34 };\n\n                testDocument.replaceRange(\"tes\", pos1, pos1);\n                testEditor.setCursorPos(pos2);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(1);\n                expect(hintsObj.hints[0]).toBe(\"test.html\");\n\n                // Partially existing file was replaced correctly\n                UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0]);\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"test.html)\");\n            });\n\n            it(\"should collapse consecutive path separators when inserting folder in HTML\", async function () {\n                var pos1    = { line: 22, ch: 11 },\n                    pos2    = { line: 22, ch: 22 };\n\n                testEditor.setCursorPos(pos1);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(2);\n                expect(hintsObj.hints[0]).toBe(\"subfolder/\");\n\n                // True indicates hints were remain open after insertion of folder\n                // (i.e. showing contents of inserted folder)\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(true);\n\n                // Folder was inserted and there's only 1 slash afterwards\n                expect(testDocument.getRange(pos1, pos2)).toEqual(\"subfolder/'\");\n            });\n\n            it(\"should collapse consecutive path separators when inserting folder in CSS\", async function () {\n                var pos1    = { line: 9, ch: 15 },\n                    pos2    = { line: 9, ch: 26 };\n\n                testEditor.setCursorPos(pos1);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(2);\n                expect(hintsObj.hints[0]).toBe(\"subfolder/\");\n\n                // True indicates hints were remain open after insertion of folder\n                // (i.e. showing contents of inserted folder)\n                expect(UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0])).toBe(true);\n\n                // Folder was inserted and there's only 1 slash afterwards\n                expect(testDocument.getRange(pos1, pos2)).toEqual(\"subfolder/\\\"\");\n            });\n\n            it(\"should show & insert case insensitive hints in HTML\", async function () {\n                var pos1    = { line: 18, ch: 12 },\n                    pos2    = { line: 18, ch: 13 },\n                    pos3    = { line: 18, ch: 21 };\n\n                // Insert letter that matches filename, but with different case\n                testDocument.replaceRange(\"T\", pos1, pos1);\n                testEditor.setCursorPos(pos2);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(1);\n                expect(hintsObj.hints[0]).toBe(\"test.html\");\n\n                UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0]);\n\n                // Filename case from list was inserted (overriding case inserted in page)\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"test.html\");\n            });\n\n            it(\"should show & insert case insensitive hints in CSS\", async function () {\n                var pos1    = { line: 6, ch: 24 },\n                    pos2    = { line: 6, ch: 25 },\n                    pos3    = { line: 6, ch: 33 };\n\n                // Insert letter that matches filename, but with different case\n                testDocument.replaceRange(\"T\", pos1, pos1);\n                testEditor.setCursorPos(pos2);\n                hintsObj = null;\n                await expectAsyncHints(UrlCodeHints.hintProvider);\n\n                expect(hintsObj).toBeTruthy();\n                expect(hintsObj.hints).toBeTruthy();\n                expect(hintsObj.hints.length).toBe(1);\n                expect(hintsObj.hints[0]).toBe(\"test.html\");\n\n                UrlCodeHints.hintProvider.insertHint(hintsObj.hints[0]);\n\n                // Filename case from list was inserted (overriding case inserted in page)\n                expect(testDocument.getRange(pos1, pos3)).toEqual(\"test.html\");\n            });\n        });\n\n    }); // describe(\"Url Code Hinting\"\n});\n"],"file":"unittests.js"}