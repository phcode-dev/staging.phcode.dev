define(function(require,exports,module){var CommandManager,EditorManager,PerfUtils,JSUtils,SpecRunnerUtils=brackets.getModule("spec/SpecRunnerUtils"),Strings=brackets.getModule("strings"),UnitTestReporter=brackets.getModule("test/UnitTestReporter"),extensionPath,testPath=SpecRunnerUtils.getTestPath("/spec/Extension-test-project-files/")+"/js-quickedit-unittest-files/syntax",tempPath=SpecRunnerUtils.getTempDirectory(),testWindow,initInlineTest;function rewriteProject(spec){var result=new $.Deferred,infos={},options={parseOffsets:!0,infos:infos,removePrefix:!0};return SpecRunnerUtils.copyPath(testPath,tempPath,options).done(function(){spec.infos=infos,result.resolve()}).fail(function(){result.reject()}),result.promise()}function fixPos(pos){return"sticky"in pos||(pos.sticky=null),pos}var _initInlineTest=async function(openFile,openOffset,expectInline,filesToOpen){var spec=this;filesToOpen=filesToOpen||[],expectInline=void 0===expectInline||expectInline,await awaitsForDone(rewriteProject(this),"rewriteProject"),await SpecRunnerUtils.loadProjectInTestWindow(tempPath),filesToOpen.push(openFile),await awaitsForDone(SpecRunnerUtils.openProjectFiles(filesToOpen),"openProjectFiles"),void 0!==openOffset&&await awaitsForDone(SpecRunnerUtils.toggleQuickEditAtOffset(EditorManager.getCurrentFullEditor(),this.infos[openFile].offsets[openOffset]),"toggleQuickEditAtOffset")};describe("extension:JSQuickEdit",function(){describe("javaScriptFunctionProvider",function(){beforeEach(async function(){initInlineTest=_initInlineTest.bind(this),testWindow=await SpecRunnerUtils.createTestWindowAndRun(),EditorManager=testWindow.brackets.test.EditorManager,CommandManager=testWindow.brackets.test.CommandManager,JSUtils=testWindow.brackets.test.JSUtils}),afterEach(async function(){initInlineTest=null,testWindow=null,EditorManager=null,CommandManager=null,JSUtils=null,await SpecRunnerUtils.closeTestWindow()}),it("should ignore tokens that are not function calls or references",async function(){var editor,extensionRequire,jsQuickEditMain,tokensFile="tokens.js",promise,offsets;await initInlineTest(tokensFile),jsQuickEditMain=(extensionRequire=testWindow.brackets.getModule("utils/ExtensionLoader").getRequireContextForExtension("JavaScriptQuickEdit"))("main"),editor=EditorManager.getCurrentFullEditor(),offsets=this.infos[tokensFile],promise=jsQuickEditMain.javaScriptFunctionProvider(editor,offsets[0]),expect(promise).toBe(Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND),promise=jsQuickEditMain.javaScriptFunctionProvider(editor,offsets[1]),expect(promise).toBe(Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND),promise=jsQuickEditMain.javaScriptFunctionProvider(editor,offsets[2]),expect(promise).toBe(Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND),promise=jsQuickEditMain.javaScriptFunctionProvider(editor,offsets[3]),expect(promise).toBe(Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND),promise=jsQuickEditMain.javaScriptFunctionProvider(editor,offsets[4]),expect(promise).toBe(Strings.ERROR_JSQUICKEDIT_FUNCTIONNOTFOUND)}),it("7 tests disabled as js code intelligence is not yet enabled",async function(){expect("7 tests disabled as js code intelligence is not yet enabled").toBeFalsy()})})})});
//# sourceMappingURL=unittests.js.map
