{"version":3,"sources":["extensions/default/HTMLCodeHints/integ-tests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","describe","testPath","getTestPath","FileViewController","ProjectManager","CommandManager","Commands","testWindow","EditorManager","MainViewManager","async","closeSession","awaitsForDone","execute","FILE_CLOSE_ALL","_forceClose","verifySrcJumpToDef","location","targetFileName","jumpShouldFail","openAndSelectDocument","PROJECT_MANAGER","selected","getSelectedItem","editor","expect","fullPath","toBe","getActiveEditor","setCursorPos","awaitsForFail","NAVIGATE_JUMPTO_DEFINITION","currentFile","getCurrentlyViewedFile","endsWith","toBeTrue","beforeAll","createTestWindowAndRun","test","loadProjectInTestWindow","afterAll","it","line","ch","getFocusedInlineEditor","document","file"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,MAAMC,gBAAsBC,SAASC,UAAU,wBAE/CC,SAAS,gDAAiD,WAEtD,MAAMC,SAAWJ,gBAAgBK,YAAY,iDAE7C,IAAIC,mBACAC,eACAC,eACAC,SACAC,WACAC,cACAC,gBACAX,SAyBJY,eAAeC,qBACLC,cAAcP,eAAeQ,QAAQP,SAASQ,eAAgB,CAAEC,aAAa,IAC/E,oBA6CRL,eAAeM,mBAAmBC,SAAUC,eAAgBC,sBAClDP,cACFT,mBAAmBiB,sBACfnB,SAAW,kBACXE,mBAAmBkB,kBAE3B,MAAMC,SAAWlB,eAAemB,kBAGhC,IAAIC,OAFJC,OAAOH,SAASI,UAAUC,KAAK1B,SAAW,mBAE7BO,cAAcoB,kBACpBC,aAAaZ,UAEjBE,qBACOW,cAAczB,eAAeQ,QAAQP,SAASyB,4BAChD,4BAEEnB,cAAcP,eAAeQ,QAAQP,SAASyB,4BAChD,sBAGR,IAAIC,YAAcvB,gBAAgBwB,yBAClCR,OAAOO,YAAYN,SAASQ,SAAShB,iBAChCiB,iBACCxB,eA5FVyB,UAAU1B,iBACNH,iBAAmBV,gBAAgBwC,yBACnCvC,SAAsBS,WAAWT,SACjCK,mBAAsBL,SAASwC,KAAKnC,mBACpCC,eAAsBN,SAASwC,KAAKlC,eACpCC,eAAsBP,SAASwC,KAAKjC,eACpCC,SAAsBR,SAASwC,KAAKhC,SACpCE,cAAsBV,SAASwC,KAAK9B,cACpCC,gBAAsBX,SAASwC,KAAK7B,sBAE9BZ,gBAAgB0C,wBAAwBtC,WAC/C,KAEHuC,SAAS,WACLrC,mBAAsB,KACtBC,eAAsB,KACtBG,WAAa,KACbT,SAAW,OAUf2C,GAAG,uCAAwC/B,uBACjCE,cACFT,mBAAmBiB,sBACfnB,SAAW,kBACXE,mBAAmBkB,kBAE3B,MAAMC,SAAWlB,eAAemB,kBAChCE,OAAOH,SAASI,UAAUC,KAAK1B,SAAW,mBAE1C,IAAIuB,OAAShB,cAAcoB,kBAC3BJ,OAAOK,aAAa,CAAEa,KAAM,EAAGC,GAAI,UAE7B/B,cAAcP,eAAeQ,QAAQP,SAASyB,4BAChD,sBAEJP,OAAShB,cAAcoC,yBACvBnB,OAAOD,OAAOqB,SAASC,KAAKpB,SAASQ,SAAS,6DACzCC,iBACCxB,iBAGV8B,GAAG,yCAA0C/B,uBACnCE,cACFT,mBAAmBiB,sBACfnB,SAAW,kBACXE,mBAAmBkB,kBAE3B,MAAMC,SAAWlB,eAAemB,kBAChCE,OAAOH,SAASI,UAAUC,KAAK1B,SAAW,mBAE1C,IAAIuB,OAAShB,cAAcoB,kBAC3BJ,OAAOK,aAAa,CAAEa,KAAM,EAAGC,GAAI,WAE7B/B,cAAcP,eAAeQ,QAAQP,SAASyB,4BAChD,sBAEJP,OAAShB,cAAcoC,yBACvBnB,OAAOD,OAAOqB,SAASC,KAAKpB,SAASQ,SAAS,yDACzCC,iBACCxB,iBA6BV8B,GAAG,8CAA+C/B,uBACxCM,mBAAmB,CAAE0B,KAAM,EAAGC,GAAI,IAAM,sBACxC3B,mBAAmB,CAAE0B,KAAM,GAAIC,GAAI,IAAM,mBACzC3B,mBAAmB,CAAE0B,KAAM,GAAIC,GAAI,IAAM,8BACzChC,iBAGV8B,GAAG,sDAAuD/B,uBAChDM,mBAAmB,CAAE0B,KAAM,GAAIC,GAAI,IAAM,kBAAkB,SAC3D3B,mBAAmB,CAAE0B,KAAM,EAAGC,GAAI,IAAM,kBAAkB,SAC1D3B,mBAAmB,CAAE0B,KAAM,EAAGC,GAAI,IAAM,kBAAkB,SAC1DhC","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeAll, afterAll, awaitsForDone, awaitsForFail */\n\ndefine(function (require, exports, module) {\n    // Recommended to avoid reloading the integration test window Phoenix instance for each test.\n\n    const SpecRunnerUtils     = brackets.getModule(\"spec/SpecRunnerUtils\");\n\n    describe(\"integration:HTML Code Hints integration tests\", function () {\n\n        const testPath = SpecRunnerUtils.getTestPath(\"/spec/LiveDevelopment-MultiBrowser-test-files\");\n\n        let FileViewController,     // loaded from brackets.test\n            ProjectManager,         // loaded from brackets.test;\n            CommandManager,\n            Commands,\n            testWindow,\n            EditorManager,\n            MainViewManager,\n            brackets;\n\n\n        beforeAll(async function () {\n            testWindow = await SpecRunnerUtils.createTestWindowAndRun();\n            brackets            = testWindow.brackets;\n            FileViewController  = brackets.test.FileViewController;\n            ProjectManager      = brackets.test.ProjectManager;\n            CommandManager      = brackets.test.CommandManager;\n            Commands            = brackets.test.Commands;\n            EditorManager       = brackets.test.EditorManager;\n            MainViewManager     = brackets.test.MainViewManager;\n\n            await SpecRunnerUtils.loadProjectInTestWindow(testPath);\n        }, 30000);\n\n        afterAll(function () {\n            FileViewController  = null;\n            ProjectManager      = null;\n            testWindow = null;\n            brackets = null;\n            // comment out below line if you want to debug the test window post running tests\n            //SpecRunnerUtils.closeTestWindow();\n        });\n\n        async function closeSession() {\n            await awaitsForDone(CommandManager.execute(Commands.FILE_CLOSE_ALL, { _forceClose: true }),\n                \"closing all file\");\n        }\n\n        it(\"Should jump to definition on div tag\", async function () {\n            await awaitsForDone(\n                FileViewController.openAndSelectDocument(\n                    testPath + \"/jumpToDef.html\",\n                    FileViewController.PROJECT_MANAGER\n                ));\n            const selected = ProjectManager.getSelectedItem();\n            expect(selected.fullPath).toBe(testPath + \"/jumpToDef.html\");\n\n            let editor = EditorManager.getActiveEditor();\n            editor.setCursorPos({ line: 5, ch: 6 });\n\n            await awaitsForDone(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                \"jump to def on div\");\n\n            editor = EditorManager.getFocusedInlineEditor();\n            expect(editor.document.file.fullPath.endsWith(\"LiveDevelopment-MultiBrowser-test-files/simpleShared.css\"))\n                .toBeTrue();\n            await closeSession();\n        });\n\n        it(\"Should jump to definition on css class\", async function () {\n            await awaitsForDone(\n                FileViewController.openAndSelectDocument(\n                    testPath + \"/jumpToDef.html\",\n                    FileViewController.PROJECT_MANAGER\n                ));\n            const selected = ProjectManager.getSelectedItem();\n            expect(selected.fullPath).toBe(testPath + \"/jumpToDef.html\");\n\n            let editor = EditorManager.getActiveEditor();\n            editor.setCursorPos({ line: 6, ch: 23 });\n\n            await awaitsForDone(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                \"jump to def on div\");\n\n            editor = EditorManager.getFocusedInlineEditor();\n            expect(editor.document.file.fullPath.endsWith(\"LiveDevelopment-MultiBrowser-test-files/sub/test.css\"))\n                .toBeTrue();\n            await closeSession();\n        });\n\n        async function verifySrcJumpToDef(location, targetFileName, jumpShouldFail) {\n            await awaitsForDone(\n                FileViewController.openAndSelectDocument(\n                    testPath + \"/jumpToDef.html\",\n                    FileViewController.PROJECT_MANAGER\n                ));\n            const selected = ProjectManager.getSelectedItem();\n            expect(selected.fullPath).toBe(testPath + \"/jumpToDef.html\");\n\n            let editor = EditorManager.getActiveEditor();\n            editor.setCursorPos(location);\n\n            if(jumpShouldFail){\n                await awaitsForFail(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                    \"jump to def on div\");\n            } else {\n                await awaitsForDone(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                    \"jump to def on div\");\n            }\n\n            let currentFile = MainViewManager.getCurrentlyViewedFile();\n            expect(currentFile.fullPath.endsWith(targetFileName))\n                .toBeTrue();\n            await closeSession();\n        }\n\n        it(\"Should jump to files on href/src attributes\", async function () {\n            await verifySrcJumpToDef({ line: 3, ch: 44 }, \"sub/test.css\");\n            await verifySrcJumpToDef({ line: 13, ch: 29 }, \"blank.css\");\n            await verifySrcJumpToDef({ line: 11, ch: 32 }, \"sub/icon_chevron.png\");\n            await closeSession();\n        });\n\n        it(\"Should not jump to files on non href/src attributes\", async function () {\n            await verifySrcJumpToDef({ line: 14, ch: 47 }, \"jumpToDef.html\", true);\n            await verifySrcJumpToDef({ line: 7, ch: 20 }, \"jumpToDef.html\", true);\n            await verifySrcJumpToDef({ line: 3, ch: 22 }, \"jumpToDef.html\", true);\n            await closeSession();\n        });\n\n    });\n});\n"],"file":"integ-tests.js"}