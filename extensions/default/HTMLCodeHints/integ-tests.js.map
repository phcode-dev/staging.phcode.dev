{"version":3,"sources":["extensions/default/HTMLCodeHints/integ-tests.js"],"names":["define","require","exports","module","SpecRunnerUtils","brackets","getModule","KeyEvent","describe","testPath","getTestPath","FileViewController","ProjectManager","CommandManager","Commands","testWindow","EditorManager","MainViewManager","FileSystem","$","async","closeSession","awaitsForDone","execute","FILE_CLOSE_ALL","_forceClose","verifySrcJumpToDef","location","targetFileName","jumpShouldFail","openAndSelectDocument","PROJECT_MANAGER","selected","getSelectedItem","editor","expect","fullPath","toBe","getActiveEditor","setCursorPos","awaitsForFail","NAVIGATE_JUMPTO_DEFINITION","currentFile","getCurrentlyViewedFile","endsWith","toBeTrue","_deleteFile","relativeFileName","deleted","getFileForPath","unlink","awaitsFor","createAndVerifyFileContents","fileName","firstLineOfContent","FILE_NEW","fileNameInput","toBeDefined","val","simulateKeyEvent","DOM_VK_RETURN","document","getText","split","beforeAll","createTestWindowAndRun","forceReload","test","loadProjectInTestWindow","afterAll","closeTestWindow","it","line","ch","getFocusedInlineEditor","file"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*global describe, it, expect, beforeAll, afterAll, awaitsForDone, awaitsForFail, awaits, awaitsFor */\n\ndefine(function (require, exports, module) {\n    // Recommended to avoid reloading the integration test window Phoenix instance for each test.\n\n    const SpecRunnerUtils     = brackets.getModule(\"spec/SpecRunnerUtils\"),\n        KeyEvent         = brackets.getModule(\"utils/KeyEvent\");\n\n    describe(\"LegacyInteg:HTML Code Hints integration tests\", function () {\n\n        const testPath = SpecRunnerUtils.getTestPath(\"/spec/LiveDevelopment-MultiBrowser-test-files\");\n\n        let FileViewController,     // loaded from brackets.test\n            ProjectManager,         // loaded from brackets.test;\n            CommandManager,\n            Commands,\n            testWindow,\n            EditorManager,\n            MainViewManager,\n            brackets,\n            FileSystem,\n            $;\n\n\n        beforeAll(async function () {\n            testWindow = await SpecRunnerUtils.createTestWindowAndRun({forceReload: true});\n            brackets            = testWindow.brackets;\n            $                   = testWindow.$;\n            FileViewController  = brackets.test.FileViewController;\n            ProjectManager      = brackets.test.ProjectManager;\n            CommandManager      = brackets.test.CommandManager;\n            Commands            = brackets.test.Commands;\n            EditorManager       = brackets.test.EditorManager;\n            MainViewManager     = brackets.test.MainViewManager;\n            FileSystem          = brackets.test.FileSystem;\n\n            await SpecRunnerUtils.loadProjectInTestWindow(testPath);\n        }, 30000);\n\n        afterAll(async function () {\n            FileViewController  = null;\n            ProjectManager      = null;\n            testWindow = null;\n            brackets = null;\n            await SpecRunnerUtils.closeTestWindow();\n        }, 30000);\n\n        async function closeSession() {\n            await awaitsForDone(CommandManager.execute(Commands.FILE_CLOSE_ALL, { _forceClose: true }),\n                \"closing all file\");\n        }\n\n        it(\"Should jump to definition on div tag\", async function () {\n            await awaitsForDone(\n                FileViewController.openAndSelectDocument(\n                    testPath + \"/jumpToDef.html\",\n                    FileViewController.PROJECT_MANAGER\n                ));\n            const selected = ProjectManager.getSelectedItem();\n            expect(selected.fullPath).toBe(testPath + \"/jumpToDef.html\");\n\n            let editor = EditorManager.getActiveEditor();\n            editor.setCursorPos({ line: 5, ch: 6 });\n\n            await awaitsForDone(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                \"jump to def on div\");\n\n            editor = EditorManager.getFocusedInlineEditor();\n            expect(editor.document.file.fullPath.endsWith(\"LiveDevelopment-MultiBrowser-test-files/simpleShared.css\"))\n                .toBeTrue();\n            await closeSession();\n        });\n\n        it(\"Should jump to definition on css class\", async function () {\n            await awaitsForDone(\n                FileViewController.openAndSelectDocument(\n                    testPath + \"/jumpToDef.html\",\n                    FileViewController.PROJECT_MANAGER\n                ));\n            const selected = ProjectManager.getSelectedItem();\n            expect(selected.fullPath).toBe(testPath + \"/jumpToDef.html\");\n\n            let editor = EditorManager.getActiveEditor();\n            editor.setCursorPos({ line: 6, ch: 23 });\n\n            await awaitsForDone(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                \"jump to def on div\");\n\n            editor = EditorManager.getFocusedInlineEditor();\n            expect(editor.document.file.fullPath.endsWith(\"LiveDevelopment-MultiBrowser-test-files/sub/test.css\"))\n                .toBeTrue();\n            await closeSession();\n        });\n\n        async function verifySrcJumpToDef(location, targetFileName, jumpShouldFail) {\n            await awaitsForDone(\n                FileViewController.openAndSelectDocument(\n                    testPath + \"/jumpToDef.html\",\n                    FileViewController.PROJECT_MANAGER\n                ));\n            const selected = ProjectManager.getSelectedItem();\n            expect(selected.fullPath).toBe(testPath + \"/jumpToDef.html\");\n\n            let editor = EditorManager.getActiveEditor();\n            editor.setCursorPos(location);\n\n            if(jumpShouldFail){\n                await awaitsForFail(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                    \"jump to def on div\");\n            } else {\n                await awaitsForDone(CommandManager.execute(Commands.NAVIGATE_JUMPTO_DEFINITION),\n                    \"jump to def on div\");\n            }\n\n            let currentFile = MainViewManager.getCurrentlyViewedFile();\n            expect(currentFile.fullPath.endsWith(targetFileName))\n                .toBeTrue();\n            await closeSession();\n        }\n\n        it(\"Should jump to files on href/src attributes\", async function () {\n            await verifySrcJumpToDef({ line: 3, ch: 44 }, \"sub/test.css\");\n            await verifySrcJumpToDef({ line: 13, ch: 29 }, \"blank.css\");\n            await verifySrcJumpToDef({ line: 11, ch: 32 }, \"sub/icon_chevron.png\");\n            await closeSession();\n        });\n\n        it(\"Should not jump to files on non href/src attributes\", async function () {\n            await verifySrcJumpToDef({ line: 14, ch: 47 }, \"jumpToDef.html\", true);\n            await verifySrcJumpToDef({ line: 7, ch: 20 }, \"jumpToDef.html\", true);\n            await verifySrcJumpToDef({ line: 3, ch: 22 }, \"jumpToDef.html\", true);\n            await closeSession();\n        });\n\n        async function _deleteFile(relativeFileName) {\n            let deleted = false;\n            FileSystem.getFileForPath(`${testPath}/${relativeFileName}`).unlink(()=>{\n                deleted = true;\n            });\n            await awaitsFor(function () {\n                return deleted;\n            }, \"extension interface registration notification\");\n        }\n\n        async function createAndVerifyFileContents(fileName, firstLineOfContent) {\n            await awaitsForDone(CommandManager.execute(Commands.FILE_NEW),\n                \"new file\");\n            await awaitsFor(function () {\n                return !!$(\".jstree-rename-input\")[0];\n            }, \"input to come\");\n            let fileNameInput = $(\".jstree-rename-input\");\n            expect(fileNameInput[0]).toBeDefined();\n            await _deleteFile(fileName);\n            fileNameInput.val(fileName);\n            SpecRunnerUtils.simulateKeyEvent(KeyEvent.DOM_VK_RETURN, \"keydown\", fileNameInput[0]);\n\n            await awaitsFor(function () {\n                return !$(\".jstree-rename-input\")[0];\n            }, \"input to go away\");\n            await awaitsFor(function () {\n                return !!EditorManager.getActiveEditor();\n            }, \"wait for editor to be active\");\n            expect(EditorManager.getActiveEditor().document.getText().split(\"\\n\")[0])\n                .toBe(firstLineOfContent);\n            await closeSession();\n            await _deleteFile(fileName);\n        }\n\n        it(\"Should creating new html and xhtml file with template contents\", async function () {\n            await createAndVerifyFileContents(\"test1.html\", \"<!DOCTYPE html>\");\n            await createAndVerifyFileContents(\"test1.xhtml\",\n                \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtm\" +\n                \"l1/DTD/xhtml1-strict.dtd\\\">\");\n        });\n\n        it(\"Should not put template contents for non html files creation\", async function () {\n            await createAndVerifyFileContents(\"test1.txt\", \"\");\n        });\n\n    });\n});\n"],"file":"integ-tests.js"}