{"version":3,"sources":["extensions/default/StaticServer/StaticServer.js"],"names":["define","require","exports","module","BaseServer","brackets","getModule","LiveDevelopmentUtils","FileUtils","_serverBroadcastChannel","BroadcastChannel","StaticServer","config","baseUrl","stripTrailingSlash","window","fsServerUrl","this","_sendInstrumentedContent","bind","call","prototype","Object","create","constructor","pathToUrl","path","getBaseUrl","relativePath","_pathResolver","encodeURI","urlToPath","url","indexOf","replace","decodeURI","canServe","localPath","match","isStaticHtmlFileExt","_updateInstrumentedURLSInWorker","paths","keys","_liveDocuments","console","log","_root","messageSW","type","root","then","status","catch","err","error","readyToServe","$","Deferred","resolve","promise","add","liveDocument","setInstrumentationEnabled","remove","clear","_send","location","response","_nodeDomain","exec","pathname","data","_documentKey","requestID","getResponseData","postMessage","contents","body","start","self","onmessage","event","stop","undefined"],"mappings":"AAuBAA,OAAO,SAAUC,QAASC,QAASC,QAE/B,MAAMC,WAAaC,SAASC,UAAU,sCAAsCF,WACxEG,qBAAuBF,SAASC,UAAU,wCAC1CE,UAAYH,SAASC,UAAU,kBAE7BG,wBAA0B,IAAIC,iBAAiB,4BAcrD,SAASC,aAAaC,QAClBA,OAAOC,QAAUL,UAAUM,mBAAmBC,OAAOC,aACrDC,KAAKC,yBAA2BD,KAAKC,yBAAyBC,KAAKF,MACnEb,WAAWgB,KAAKH,KAAML,QAG1BD,aAAaU,UAAYC,OAAOC,OAAOnB,WAAWiB,WAClDV,aAAaU,UAAUG,YAAcb,aAQrCA,aAAaU,UAAUI,UAAY,SAAUC,MACzC,MAAMb,QAAkBI,KAAKU,aACzBC,aAAkBX,KAAKY,cAAcH,MAGzC,OAAIE,eAAiBF,QAGPb,UAAUiB,UAAUJ,QAG3B,MASXf,aAAaU,UAAUU,UAAY,SAAUC,KACzC,IAAIN,KACAb,QAAU,GAId,MAAgB,MAFhBA,QAAUI,KAAKU,eAEgC,IAAzBK,IAAIC,QAAQpB,UAG9Ba,KAAOM,IAAIE,QAAQrB,QAAS,IAErBsB,UAAUT,OAGd,MAQXf,aAAaU,UAAUe,SAAW,SAAUC,WAGxC,OAAIA,YAAcpB,KAAKY,cAAcQ,eAMjCA,UAAUC,MAAM,QAKb/B,qBAAqBgC,oBAAoBF,aAQpD1B,aAAaU,UAAUmB,gCAAkC,WACrD,IAAIC,MAAQnB,OAAOoB,KAAKzB,KAAK0B,gBAC7BC,QAAQC,IAAI,kDAAmD5B,KAAK6B,MAAOL,OAE3E1B,OAAOgC,UAAU,CACbC,KAAM,sBACNC,KAAMhC,KAAK6B,MACXL,MAAAA,QACDS,KAAMC,SACLP,QAAQC,IAAI,6EAA8EM,UAC3FC,MAAMC,MACLT,QAAQU,MAAM,kFAAmFD,QAYzG1C,aAAaU,UAAUkC,aAAe,WAClC,OAAOC,EAAEC,WAAWC,UAAUC,WAOlChD,aAAaU,UAAUuC,IAAM,SAAUC,cAC/BA,aAAaC,2BAEbD,aAAaC,2BAA0B,GAG3C1D,WAAWiB,UAAUuC,IAAIxC,KAAKH,KAAM4C,cAGpC5C,KAAKuB,mCAMT7B,aAAaU,UAAU0C,OAAS,SAAUF,cACtCzD,WAAWiB,UAAU0C,OAAO3C,KAAKH,KAAM4C,cAEvC5C,KAAKuB,mCAMT7B,aAAaU,UAAU2C,MAAQ,WAC3B5D,WAAWiB,UAAU2C,MAAM5C,KAAKH,MAEhCA,KAAKuB,mCAOT7B,aAAaU,UAAU4C,MAAQ,SAAUC,SAAUC,UAC/ClD,KAAKmD,YAAYC,KAAK,wBAAyBH,SAASjB,KAAMiB,SAASI,SAAUH,WAUrFxD,aAAaU,UAAUH,yBAA2B,SAAUqD,MACxD,IAAI7C,KAAOT,KAAKuD,aAAaD,KAAK7C,MAC9B+C,UAAYF,KAAKE,UACjBZ,aAAe5C,KAAK0B,eAAejB,MACnCyC,SAAW,GACXN,cAAgBA,aAAaa,kBAC7BP,SAAWN,aAAaa,kBACxBjE,wBAAwBkE,YAAY,CAChC3B,KAAM,mBACNyB,UAAAA,UACA/C,KAAAA,KACAkD,SAAUT,SAASU,SAQ/BlE,aAAaU,UAAUyD,MAAQ,WAC3B,MAAMC,KAAO9D,KACbR,wBAAwBuE,UAAY,CAACC,QACT,2BAApBA,MAAMV,KAAKvB,MAEX+B,KAAK7D,yBAAyB+D,MAAMV,SAShD5D,aAAaU,UAAU6D,KAAO,WAC1BzE,wBAAwBuE,eAAYG,GAGxChF,OAAOD,QAAUS","sourcesContent":["/*\n * Copyright (c) 2012 - present Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\ndefine(function (require, exports, module) {\n\n    const BaseServer = brackets.getModule(\"LiveDevelopment/Servers/BaseServer\").BaseServer,\n        LiveDevelopmentUtils = brackets.getModule(\"LiveDevelopment/LiveDevelopmentUtils\"),\n        FileUtils = brackets.getModule(\"file/FileUtils\");\n\n    const _serverBroadcastChannel = new BroadcastChannel(\"virtual_server_broadcast\");\n\n    /**\n     * @constructor\n     * @extends {BaseServer}\n     * Live preview server that uses a built-in HTTP server to serve static\n     * and instrumented files.\n     *\n     * @param {!{baseUrl: string, root: string, pathResolver: function(string), nodeDomain: NodeDomain}} config\n     *    Configuration parameters for this server:\n     *        baseUrl        - Optional base URL (populated by the current project)\n     *        pathResolver   - Function to covert absolute native paths to project relative paths\n     *        root           - Native path to the project root (and base URL)\n     */\n    function StaticServer(config) {\n        config.baseUrl = FileUtils.stripTrailingSlash(window.fsServerUrl);\n        this._sendInstrumentedContent = this._sendInstrumentedContent.bind(this);\n        BaseServer.call(this, config);\n    }\n\n    StaticServer.prototype = Object.create(BaseServer.prototype);\n    StaticServer.prototype.constructor = StaticServer;\n\n    /**\n     * Returns a URL for a given path\n     * @param {string} path Absolute path to covert to a URL\n     * @return {?string} Converts a path within the project root to a URL.\n     *  Returns null if the path is not a descendant of the project root.\n     */\n    StaticServer.prototype.pathToUrl = function (path) {\n        const baseUrl         = this.getBaseUrl(),\n            relativePath    = this._pathResolver(path);\n\n        // See if base url has been specified and path is within project\n        if (relativePath !== path) {\n            // Map to server url. Base url is already encoded, so don't encode again.\n\n            return `${baseUrl}${encodeURI(path)}`;\n        }\n\n        return null;\n    };\n\n    /**\n     * Convert a URL to a local full file path\n     * @param {string} url\n     * @return {?string} The absolute path for given URL or null if the path is\n     *  not a descendant of the project.\n     */\n    StaticServer.prototype.urlToPath = function (url) {\n        let path,\n            baseUrl = \"\";\n\n        baseUrl = this.getBaseUrl();\n\n        if (baseUrl !== \"\" && url.indexOf(baseUrl) === 0) {\n            // Use base url to translate to local file path.\n            // Need to use encoded project path because it's decoded below.\n            path = url.replace(baseUrl, \"\");\n\n            return decodeURI(path);\n        }\n\n        return null;\n    };\n\n    /**\n     * Determines whether we can serve local file.\n     * @param {string} localPath A local path to file being served.\n     * @return {boolean} true for yes, otherwise false.\n     */\n    StaticServer.prototype.canServe = function (localPath) {\n        // If we can't transform the local path to a project relative path,\n        // the path cannot be served\n        if (localPath === this._pathResolver(localPath)) {\n            return false;\n        }\n\n        // Url ending in \"/\" implies default file, which is usually index.html.\n        // Return true to indicate that we can serve it.\n        if (localPath.match(/\\/$/)) {\n            return true;\n        }\n\n        // FUTURE: do a MIME Type lookup on file extension\n        return LiveDevelopmentUtils.isStaticHtmlFileExt(localPath);\n    };\n\n    /**\n     * @private\n     * Update the list of paths that fire \"request\" events\n     * @return {jQuery.Promise} Resolved by the StaticServer domain when the message is acknowledged.\n     */\n    StaticServer.prototype._updateInstrumentedURLSInWorker = function () {\n        let paths = Object.keys(this._liveDocuments);\n        console.log(`Static server _updateInstrumentedURLSInWorker: `, this._root, paths);\n\n        window.messageSW({\n            type: 'setInstrumentedURLs',\n            root: this._root,\n            paths\n        }).then((status)=>{\n            console.log(`Static server received msg from Service worker: setInstrumentedURLs done: `, status);\n        }).catch(err=>{\n            console.error(\"Static server received msg from Service worker: Error while setInstrumentedURLs\", err);\n        });\n    };\n\n    /**\n     * Gets the server details from the StaticServerDomain in node.\n     * The domain itself handles starting a server if necessary (when\n     * the staticServer.getServer command is called).\n     *\n     * @return {jQuery.Promise} A promise that resolves/rejects when\n     *     the server is ready/failed.\n     */\n    StaticServer.prototype.readyToServe = function () {\n        return $.Deferred().resolve().promise(); // virtual server is always assumed present in phoenix\n    };\n\n    /**\n     * See BaseServer#add. StaticServer ignores documents that do not have\n     * a setInstrumentationEnabled method. Updates request filters.\n     */\n    StaticServer.prototype.add = function (liveDocument) {\n        if (liveDocument.setInstrumentationEnabled) {\n            // enable instrumentation\n            liveDocument.setInstrumentationEnabled(true);\n        }\n\n        BaseServer.prototype.add.call(this, liveDocument);\n\n        // update the paths to watch\n        this._updateInstrumentedURLSInWorker();\n    };\n\n    /**\n     * See BaseServer#remove. Updates request filters.\n     */\n    StaticServer.prototype.remove = function (liveDocument) {\n        BaseServer.prototype.remove.call(this, liveDocument);\n\n        this._updateInstrumentedURLSInWorker();\n    };\n\n    /**\n     * See BaseServer#clear. Updates request filters.\n     */\n    StaticServer.prototype.clear = function () {\n        BaseServer.prototype.clear.call(this);\n\n        this._updateInstrumentedURLSInWorker();\n    };\n\n    /**\n     * @private\n     * Send HTTP response data back to the StaticServerSomain\n     */\n    StaticServer.prototype._send = function (location, response) {\n        this._nodeDomain.exec(\"writeFilteredResponse\", location.root, location.pathname, response);\n    };\n\n    /**\n     * @private\n     * Events raised by broadcast channel from the service worker will be captured here. The service worker will ask\n     * all phoenix instances if the url to be served should be replaced with instrumented content here or served\n     * as static file from disk.\n     * @param {{hostname: string, pathname: string, port: number, root: string, id: number}} request\n     */\n    StaticServer.prototype._sendInstrumentedContent = function (data) {\n        let path = this._documentKey(data.path),\n            requestID = data.requestID,\n            liveDocument = this._liveDocuments[path];\n        let response = {};\n        if (liveDocument && liveDocument.getResponseData) {\n            response = liveDocument.getResponseData();\n            _serverBroadcastChannel.postMessage({\n                type: 'REQUEST_RESPONSE',\n                requestID, //pass along the requestID so that the appropriate callback will be hit at the service worker\n                path,\n                contents: response.body\n            });\n        }\n    };\n\n    /**\n     * See BaseServer#start. Starts listenting to StaticServerDomain events.\n     */\n    StaticServer.prototype.start = function () {\n        const self = this;\n        _serverBroadcastChannel.onmessage = (event) => {\n            if (event.data.type === \"getInstrumentedContent\") {\n                // localStorage is domain specific so when it changes in one window it changes in the other\n                self._sendInstrumentedContent(event.data);\n            }\n        };\n\n    };\n\n    /**\n     * See BaseServer#stop. Remove event handlers from StaticServerDomain.\n     */\n    StaticServer.prototype.stop = function () {\n        _serverBroadcastChannel.onmessage = undefined;\n    };\n\n    module.exports = StaticServer;\n});\n"],"file":"StaticServer.js"}