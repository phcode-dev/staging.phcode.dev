{"version":3,"sources":["extensions/default/DebugCommands/main.js"],"names":["define","require","exports","module","_","brackets","getModule","Commands","CommandManager","Menus","FileSystem","FileUtils","PerfUtils","StringUtils","Dialogs","Strings","PreferencesManager","LocalizationUtils","MainViewManager","WorkingSetView","ExtensionManager","Mustache","Locales","ProjectManager","PerfDialogTemplate","LanguageDialogTemplate","KeyboardPrefs","JSON","parse","DEFAULT_PREFERENCES_FILENAME","SUPPORTED_PREFERENCE_TYPES","recomputeDefaultPrefs","defaultPreferencesFullPath","path","normalize","app","getApplicationSupportDirectory","DEBUG_MENU","DEBUG_REFRESH_WINDOW","DEBUG_RUN_UNIT_TESTS","DEBUG_SHOW_PERF_DATA","DEBUG_RELOAD_WITHOUT_USER_EXTS","DEBUG_NEW_BRACKETS_WINDOW","DEBUG_SWITCH_LANGUAGE","DEBUG_ENABLE_LOGGING","DEBUG_OPEN_VFS","DEBUG_OPEN_VIRTUAL_SERVER","DEBUG_OPEN_PREFERENCES_IN_SPLIT_VIEW","prefs","getExtensionPrefs","definePreference","description","DESCRIPTION_OPEN_PREFS_IN_SPLIT_VIEW","DESCRIPTION_OPEN_USER_PREFS_IN_SECOND_PANE","_testWindow","_runUnitTests","spec","queryString","testBaseURL","window","location","hostname","closed","search","href","reload","open","handleReload","execute","APP_RELOAD","handleReloadWithoutUserExts","APP_RELOAD_WITHOUT_EXTS","handleNewBracketsWindow","handleShowPerfData","templateVars","delimitedPerfData","getDelimitedPerfData","perfData","getValue","entry","Array","isArray","i","e","avg","sum","min","Number","MAX_VALUE","max","length","Math","round","String","getData","forEach","value","testName","push","breakableUrl","template","render","showModalDialogUsingTemplate","$","click","this","focus","select","handleSwitchLanguage","supportedLocales","Object","keys","$dialog","$submit","$select","locale","curLocale","isLocaleDefault","getLocale","languages","setLanguage","event","val","prop","supportedLocale","match","language","label","toUpperCase","getLocalizedLabel","sort","lang1","lang2","localeCompare","unshift","LANGUAGE_SYSTEM_DEFAULT","done","id","DIALOG_BTN_OK","setLocale","find","on","_openPrefFilesInSplitView","prefsPath","defaultPrefsPath","deferredPromise","currScheme","getLayoutScheme","file","getFileForPath","defaultPrefsFile","DEFAULT_PREFS_PANE","USER_PREFS_PANE","_openFiles","rows","columns","setLayoutScheme","FILE_OPEN","fullPath","paneId","options","isReadOnly","findInWorkingSet","_moveView","refresh","resolve","fail","reject","get","resultObj","findInAllWorkingSets","FILE_CLOSE","_isSupportedPrefType","prefType","indexOf","_getPrefType","prefItem","finalPrefType","_prefType","type","undefined","toLowerCase","initial","_initialType","_prefVar","_isValidPref","pref","excludeFromHints","_getChildPrefs","finalObj","keysFound","_populateKeys","allKeys","hasOwnProperty","_formatBasicPref","prefName","tabIndentStr","prefDescription","prefDefault","prefFormatText","prefItemType","DEFAULT_PREFERENCES_JSON_DEFAULT","format","_formatPref","indentLevel","iLevel","prefItemKeys","entireText","prefItemDesc","hasKeys","tabIndents","numKeys","property","formattedText","slice","_getDefaultPreferencesString","allPrefs","getAllPreferences","headerComment","DEFAULT_PREFERENCES_JSON_HEADER_COMMENT","_loadDefaultPrefs","_executeDefaultOpenPrefsCommand","FILE_OPEN_PREFERENCES","exists","err","doesExist","prefsString","unlink","console","error","writeText","_prefsString","handleOpenPrefsInSplitView","getUserPrefFile","splitViewPrefOn","result","Deferred","promise","_updateLogToConsoleMenuItemChecked","isLogging","setupLogging","setChecked","_handleLogging","logToConsolePref","localStorage","getItem","setItem","_openVFS","openProject","_openVirtualServer","fsServerUrl","register","CMD_REFRESH_WINDOW","CMD_RELOAD_WITHOUT_USER_EXTS","CMD_NEW_BRACKETS_WINDOW","CMD_RUN_UNIT_TESTS","CMD_SHOW_PERF_DATA","CMD_SWITCH_LANGUAGE","CMD_ENABLE_LOGGING","CMD_OPEN_VFS","CMD_OPEN_VIRTUAL_SERVER","CMD_OPEN_PREFERENCES","menu","addMenu","BEFORE","AppMenuBar","HELP_MENU","addMenuItem","refreshWindow","reloadWithoutUserExts","addMenuDivider","FILE_OPEN_KEYMAP"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,EAAIC,SAASC,UAAU,qBAEvBC,SAAyBF,SAASC,UAAU,oBAC5CE,eAAyBH,SAASC,UAAU,0BAC5CG,MAAyBJ,SAASC,UAAU,iBAC5CI,WAAyBL,SAASC,UAAU,yBAC5CK,UAAyBN,SAASC,UAAU,kBAC5CM,UAAyBP,SAASC,UAAU,mBAC5CO,YAAyBR,SAASC,UAAU,qBAC5CQ,QAAyBT,SAASC,UAAU,mBAC5CS,QAAyBV,SAASC,UAAU,WAC5CU,mBAAyBX,SAASC,UAAU,kCAC5CW,kBAAyBZ,SAASC,UAAU,2BAC5CY,gBAAyBb,SAASC,UAAU,wBAC5Ca,eAAyBd,SAASC,UAAU,0BAC5Cc,iBAAyBf,SAASC,UAAU,kCAC5Ce,SAAyBhB,SAASC,UAAU,gCAC5CgB,QAAyBjB,SAASC,UAAU,eAC5CiB,eAAyBlB,SAASC,UAAU,0BAC5CkB,mBAAyBvB,QAAQ,qCACjCwB,uBAAyBxB,QAAQ,yCAEjCyB,cAAgBC,KAAKC,MAAM3B,QAAQ,uBAGnC4B,6BAA+B,0BAC/BC,2BAA+B,CAAC,SAAU,UAAW,SAAU,QAAS,UAExEC,uBAA+B,EAC/BC,2BAA+BC,KAAKC,UAAU7B,SAAS8B,IAAIC,iCAAmC,4BAM9FC,WAAa,aAMbC,qBAAwC,sBACxCC,qBAAwC,qBACxCC,qBAAwC,qBACxCC,+BAAwC,8BACxCC,0BAAwC,0BACxCC,sBAAwC,uBACxCC,qBAAwC,sBACxCC,eAAwC,gBACxCC,0BAAwC,0BACxCC,qCAAwC,6BAGxCC,MAAQhC,mBAAmBiC,kBAAkB,mBACjDD,MAAME,iBAAiB,uBAA0B,WAAW,EAAM,CAC9DC,YAAapC,QAAQqC,uCAGzBJ,MAAME,iBAAiB,4BAA+B,WAAW,EAAM,CACnEC,YAAapC,QAAQsC,6CAIzB,IAAIC,YAAc,KAClB,SAASC,cAAcC,MACnB,IAAIC,YAAcD,KAAO,SAAWA,KAAO,cACvCE,YAAc,0BACc,cAA7BC,OAAOC,SAASC,UAAyD,cAA7BF,OAAOC,SAASC,WAE3DH,YAAc,wBAEdJ,cAAgBA,YAAYQ,OACxBR,YAAYM,SAASG,SAAWN,YAChCH,YAAYM,SAASI,KAAON,YAAcD,YAE1CH,YAAYM,SAASK,QAAO,IAGhCX,YAAcK,OAAOO,KAAKR,YAAcD,cAC5BG,SAASK,QAAO,GAIpC,SAASE,eACL3D,eAAe4D,QAAQ7D,SAAS8D,YAGpC,SAASC,8BACL9D,eAAe4D,QAAQ7D,SAASgE,yBAGpC,SAASC,0BACLb,OAAOO,KAAKP,OAAOC,SAASI,MAGhC,SAASS,qBACL,IAAIC,aAAe,CACfC,kBAAmB/D,UAAUgE,uBAC7BC,SAAU,IAGVC,SAAW,SAAUC,OAErB,GAAIC,MAAMC,QAAQF,OAAQ,CAEtB,IAAIG,EAAGC,EAAGC,IAAKC,IAAM,EAAGC,IAAMC,OAAOC,UAAWC,IAAM,EAEtD,IAAKP,EAAI,EAAGA,EAAIH,MAAMW,OAAQR,IAC1BC,EAAIJ,MAAMG,GACVI,IAAMK,KAAKL,IAAIA,IAAKH,GACpBE,KAAOF,EACPM,IAAME,KAAKF,IAAIA,IAAKN,GAGxB,OADAC,IAAMO,KAAKC,MAAY,GAANP,IAAWN,MAAMW,QAAU,GACrCG,OAAOP,KAAO,IAAMO,OAAOT,KAAO,IAAML,MAAMW,OAAS,KAAOG,OAAOJ,KAAO,IAAMI,OAAOV,GAEpG,OAAOJ,OAIPF,SAAWjE,UAAUkF,UACzB1F,EAAE2F,QAAQlB,SAAU,SAAUmB,MAAOC,UACjCvB,aAAaG,SAASqB,KAAK,CACvBD,SAAUpF,YAAYsF,aAAaF,UACnCD,MAAOlB,SAASkB,WAIxB,IAAII,SAAW/E,SAASgF,OAAO7E,mBAAoBkD,cACnD5D,QAAQwF,6BAA6BF,UAIrCG,EAAE,2BAA2BC,MAAM,WAC/BD,EAAEE,MAAMC,QAAQC,WAIxB,SAASC,uBACL,MAAMC,iBAAmBC,OAAOC,KAAKzF,SAErC,IAAI0F,QACAC,QACAC,QACAC,OACAC,UAAa/G,SAASgH,kBAAoB,KAAOhH,SAASiH,YAC1DC,UAAY,GAEZC,YAAc,SAAUC,OACxBN,OAASD,QAAQQ,MACjBT,QAAQU,KAAK,WAAYR,UAAYC,WAAa,MAGtD,IAAI,IAAIQ,mBAAmBf,iBAAiB,CACxC,IAAIgB,MAAQD,gBAAgBC,MAAM,4BAElC,GAAIA,MAAO,CACP,IAAIC,SAAWF,gBACXG,MAAQF,MAAM,GAEdA,MAAM,KACNE,OAASF,MAAM,GAAGG,eAGtBT,UAAUrB,KAAK,CAAC6B,MAAO9G,kBAAkBgH,kBAAkBF,OAAQD,SAAUA,YAIrFP,UAAUrB,KAAK,CAAC6B,MAAO9G,kBAAkBgH,kBAAkB,MAAQH,SAAU,OAG7EP,UAAUW,KAAK,SAAUC,MAAOC,OAC5B,OAAOD,MAAMJ,MAAMM,cAAcD,MAAML,SAI3CR,UAAUe,QAAQ,CAACP,MAAOhH,QAAQwH,wBAAyBT,SAAU,OAErE,IAAI1B,SAAW/E,SAASgF,OAAO5E,uBAAwB,CAAC8F,UAAWA,UAAWxG,QAASA,UACvFD,QAAQwF,6BAA6BF,UAAUoC,KAAK,SAAUC,IACtDA,KAAO3H,QAAQ4H,eAAiBvB,SAAWC,YAC3C/G,SAASsI,UAAUxB,QACnB3G,eAAe4D,QAAQ7D,SAAS8D,eAIxC2C,QAAUT,EAAE,6BACZU,QAAUD,QAAQ4B,KAAK,kCAAoC9H,QAAQ4H,cAAgB,OACnFxB,QAAUF,QAAQ4B,KAAK,WAEfC,GAAG,SAAUrB,aAAaE,IAAIN,WAG1C,SAAS0B,0BAA0BC,UAAWC,iBAAkBC,iBAE5D,IAAIC,WAAqBhI,gBAAgBiI,kBACrCC,KAAqB1I,WAAW2I,eAAeN,WAC/CO,iBAAqB5I,WAAW2I,eAAeL,kBAC/CO,mBAAqB,aACrBC,gBAAqB,cASzB,SAASC,aAEmB,IAApBP,WAAWQ,MAAqC,IAAvBR,WAAWS,SAGpCzI,gBAAgB0I,gBAAgB,EAAG,GAIvCpJ,eAAe4D,QAAQ7D,SAASsJ,UAAW,CAAEC,SAAUd,iBAAkBe,OAAQR,mBAAoBS,QAAS,CAAEC,YAAY,KACvHzB,KAAK,WAIEtH,gBAAgBgJ,iBAAiBX,mBAAoBR,YAAc,IAEnE7H,gBAAgBiJ,UAAUZ,mBAAoBC,gBAAiBJ,KAAM,GAAG,GAIxEjI,eAAeiJ,SAAQ,IAG3B5J,eAAe4D,QAAQ7D,SAASsJ,UAAW,CAAEC,SAAUf,UAAWgB,OAAQP,kBACrEhB,KAAK,WACFS,gBAAgBoB,YACjBC,KAAK,WACJrB,gBAAgBsB,aAEzBD,KAAK,WACJrB,gBAAgBsB,WAnCvBvH,MAAMwH,IAAI,+BACXjB,mBAAqB,cACrBC,gBAAqB,cAqCzB,IAAIiB,UAAYvJ,gBAAgBwJ,qBAAqB1B,kBACjDyB,WAAaA,UAAU/E,OAAS,EAChClF,eAAe4D,QAAQ7D,SAASoK,WAAY,CAACvB,KAAME,iBAAkBS,OAAQU,UAAU,GAAGV,SACrFvB,KAAK,WACFiB,eACDa,KAAK,WACJrB,gBAAgBsB,WAGxBd,aAKR,SAASmB,qBAAqBC,UAE1B,OAAI/I,2BAA2BgJ,QAAQD,WAAa,EAYxD,SAASE,aAAaC,UAElB,IAAIC,cAAgB,YAEpB,GAAID,SAAU,CAEV,IAAIE,UAAYF,SAASG,KACzB,QAAkBC,IAAdF,YACAD,cAAgBD,SAASG,KAAKE,mBAGLD,IAArBJ,SAASM,SAET,GAAItG,MAAMC,QAAQ+F,SAASM,SACvBJ,UAAY,YACT,CACH,IAAIK,oBAAuBP,SAAgB,QAEvCE,aADJK,aAAeA,aAAaF,iBAExBH,UAAYK,cAM5B,GAAIL,UAIKN,qBADLK,cAAgBC,aAEZD,cAAgB,kBAEjB,GAAIjG,MAAMC,QAAQ+F,UAIrBC,cAAgB,aACb,QAAyBG,IAArBJ,SAASM,cACSF,IAAlBJ,SAASjE,KAAoB,CAMpC,IAAIyE,SAEAA,cADqBJ,IAArBJ,SAASM,QACEN,SAASM,QAETN,SAASjE,KAGpB/B,MAAMC,QAAQuG,YAGdP,cAAgB,cAIpBA,qBAAuB,SAS/B,OAJKL,qBAAqBK,iBACtBA,cAAgB,aAGbA,cAGX,SAASQ,aAAaC,MAMlB,SAAIA,MAASA,KAAKC,kBAA2C,cAAvBZ,aAAaW,OAYvD,SAASE,eAAeZ,UAEpB,IAAIa,SAAW,GACXC,WAAY,EAEhB,IAAKd,SACD,MAAO,GAGX,SAASe,cAAcC,SAEnB,IAAIrE,KACJ,GAAyB,iBAAd,QAGP,IAAKA,QADLmE,WAAY,EACCE,QACLA,QAAQC,eAAetE,QACvBkE,SAASlE,MAAQqE,QAAQrE,OAezC,OATAoE,cAAcf,SAASM,SACvBS,cAAcf,SAASjE,MAIlB+E,WACDC,cAAcf,UAGXa,SAGX,SAASK,iBAAiBlB,SAAUmB,SAAUC,cAE1C,IAAKpB,UAAkC,iBAAf,UAAsD,WAA3BD,aAAaC,UAG5D,MAAO,GAGX,IAAIqB,gBAAkBrB,SAAS7H,aAAe,GAC1CmJ,YAAkBtB,SAASM,QAC3BiB,eAAkBH,aAAe,aAAeA,aAAe,eAC/DI,aAAkBzB,aAAaC,UAoCnC,YAlCoBI,IAAhBkB,aAA8BtB,SAAS7H,aAElB,WAAjBqJ,cAA8C,YAAjBA,cAA+C,WAAjBA,eAC3DF,YAActB,eAIFI,IAAhBkB,cAEIA,YADiB,WAAjBE,aACc,EACU,YAAjBA,cAMO,SAIGpB,IAApBiB,iBAA4D,IAA3BA,gBAAgB3G,SAI9C2G,gBAHCrH,MAAMC,QAAQqH,aAGG,GAFAvL,QAAQ0L,iCAAmC,KAAOH,aAMvD,UAAjBE,aACAF,YAAc,MACgB,IAAvBA,YAAY5G,QAAkC,YAAjB8G,cAA+C,WAAjBA,gBAClEF,YAAc,IAAOA,YAAc,KAGhCzL,YAAY6L,OAAOH,eAAgBF,gBAAiBF,SAAUG,aAGzE,SAASK,YAAYR,SAAWnB,SAAU4B,aAGtC,IAAK5B,UAAY4B,YAAc,IAAMT,WAAaA,SAASzG,OACvD,MAAO,GAGX,IAAImH,OACAC,aACAC,WAAiB,GACjBC,aAAiBhC,SAAS7H,aAAe,GACzCqJ,aAAiBzB,aAAaC,UAC9BiC,SAAiB,EACjBC,WAAiB,GACjBC,QAAiB,EAGrB,IAAKN,OAAS,EAAGA,OAASD,YAAaC,SACnCK,YAAc,KAclB,MAV+B,WAA3BnC,aAAaC,YACb8B,aAAelB,eAAeZ,UAC1BlE,OAAOC,KAAK+F,cAAcpH,OAAS,IACnCuH,SAAU,IAOG,WAAjBT,eAAyC,IAAZS,QACtBf,iBAAiBlB,SAAUmB,SAAUe,aAIhDA,YAAc,KAEVF,cAAgBA,aAAatH,OAAS,IACtCqH,WAAaG,WAAa,MAAQF,aAAe,MAGrDD,YAAcG,WAAa,IAAOf,SAAW,OAEzCW,eACAK,QAAUrG,OAAOC,KAAK+F,cAAcpH,QAIpCyH,SAAW,EACXJ,YAAc,KAGlBA,YAAc,KAMdjG,OAAOC,KAAK+F,cAAc5E,OAAOnC,QAAQ,SAAUqH,UAE/C,GAAIN,aAAab,eAAemB,UAAW,CAEvC,IAAI1B,KAAOoB,aAAaM,UAExB,GAAI3B,aAAaC,MAAO,CAEpB,IAAI2B,cAAgB,IAGhBA,cADuB,WAAvBtC,aAAaW,MACGiB,YAAYS,SAAU1B,KAAMkB,YAAc,GAE1CV,iBAAiBR,KAAM0B,SAAUF,aAGnCxH,OAAS,IACvBqH,YAAcM,cAAgB,aAQ1CN,WADAA,WAAWrH,OAAS,EACPqH,WAAWO,MAAM,GAAI,GAAK,KAAOJ,WAAa,IAE9C,OAMrB,SAASK,+BAEL,IAAIC,SAAiBxM,mBAAmByM,oBACpCC,cAAiB3M,QAAQ4M,wCAA0C,UACnEZ,WAAiB,GAoBrB,OAlBAjG,OAAOC,KAAKyG,UAAUtF,OAAOnC,QAAQ,SAAUqH,UAC3C,GAAII,SAASvB,eAAemB,UAAW,CAEnC,IAAI1B,KAAO8B,SAASJ,UAEhB3B,aAAaC,QACbqB,YAAcJ,YAAYS,SAAU1B,KAAM,GAAK,YAOvDqB,WADAA,WAAWrH,OAAS,EACPgI,cAAgBX,WAAWO,MAAM,GAAI,GAAK,QAE1CI,cAAgB,MAMrC,SAASE,kBAAkB7E,UAAWE,iBAElC,IAAID,iBAAmBhH,2BACnBoH,KAAmB1I,WAAW2I,eAAeL,kBAEjD,SAAS6E,kCAELrN,eAAe4D,QAAQ7D,SAASuN,uBAC3BtF,KAAK,WACFS,gBAAgBoB,YACjBC,KAAK,WACJrB,gBAAgBsB,WAI5BnB,KAAK2E,OAAO,SAAUC,IAAKC,WAEvB,GAAIA,UAGA,GAAIlM,sBAAuB,CAEvB,IAAImM,YAAoBX,+BACxBxL,uBAAwB,EAGxBqH,KAAK+E,OAAO,SAAUH,KACbA,KAiBDI,QAAQC,MAAM,sEAAwEL,KACtFH,mCAdAlN,UAAU2N,UAAUlF,KAAM8E,aAAa,GAClC1F,KAAK,WACFzG,uBAAwB,EACxB+G,0BAA0BC,UAAWC,iBAAkBC,mBACxDqB,KAAK,SAAU+D,OAEdD,QAAQC,MAAM,2DAA6DA,OAC3ER,2CAchB/E,0BAA0BC,UAAWC,iBAAkBC,qBAExD,CAKH,IAAIsF,aAAehB,+BACnB5M,UAAU2N,UAAUlF,KAAMmF,cAAc,GACnC/F,KAAK,WACFzG,uBAAwB,EACxB+G,0BAA0BC,UAAWC,iBAAkBC,mBACxDqB,KAAK,SAAU+D,OAEdD,QAAQC,MAAM,2DAA6DA,OAC3ER,uCAMpB,SAASW,6BAEL,IAAI1E,SAAkB9I,mBAAmByN,kBACrCrF,KAAkB1I,WAAW2I,eAAeS,UAC5C4E,gBAAkB1L,MAAMwH,IAAI,wBAC5BmE,OAAkB,IAAIpI,EAAEqI,SAE5B,OAAKF,iBAGLtF,KAAK2E,OAAO,SAAUC,IAAKC,WACnBA,UACAL,kBAAkB9D,SAAU6E,QAE5BhO,UAAU2N,UAAUlF,KAAM,IAAI,GACrBZ,KAAK,WACFoF,kBAAkB9D,SAAU6E,UAC7BrE,KAAK,WACJqE,OAAOpE,aAMpBoE,OAAOE,WAhBHrO,eAAe4D,QAAQ7D,SAASuN,uBAmB/C,SAASgB,qCACL,MAAMC,UAAYpL,OAAOqL,eACzBxO,eAAegK,IAAI5H,sBAAsBqM,WAAWF,WAGxD,SAASG,iBACL,IAAIC,iBAAmBC,aAAaC,QAAQ,iBAAmB,QAE3DF,iBADkC,SAAnCA,iBAAiB9D,cACG,QAEA,OAEvB+D,aAAaE,QAAQ,eAAgBH,kBACrCL,qCASJ,SAASS,WACLhO,eAAeiO,YAAY,KAG/B,SAASC,qBACL9L,OAAOO,KAAKP,OAAO+L,aAXvBtO,iBAAiByH,GAAG,eAAgB,SAAUJ,IAG1C1G,uBAAwB,IAY5BvB,eAAemP,SAAS5O,QAAQ6O,mBAAgCtN,qBAAgC6B,cAChG3D,eAAemP,SAAS5O,QAAQ8O,6BA3oBY,8BA2oBoDvL,6BAChG9D,eAAemP,SAAS5O,QAAQ+O,wBA3oBY,0BA2oBoDtL,yBAGhGhE,eAAemP,SAAS5O,QAAQgP,mBAjpBY,qBAipB4CxM,eAExF/C,eAAemP,SAAS5O,QAAQiP,mBAlpBY,qBAkpBoDvL,oBAEhGjE,eAAemP,SAAS5O,QAAQkP,oBAA+BtN,sBAAiCiE,sBAEhGpG,eAAemP,SAAS5O,QAAQmP,mBAAoBtN,qBAAwBsM,gBAC5E1O,eAAemP,SAAS5O,QAAQoP,aAActN,eAAkB0M,UAChE/O,eAAemP,SAAS5O,QAAQqP,wBAlpBY,0BAkpB0CX,oBAEtFjP,eAAemP,SAAS5O,QAAQsP,qBAnpBY,6BAmpBgD7B,4BAI5F,IAAI8B,KAAO7P,MAAM8P,QAAQxP,QAAQsB,WAAYA,WAAY5B,MAAM+P,OAAQ/P,MAAMgQ,WAAWC,WACxFJ,KAAKK,YAAYrO,qBAAsBZ,cAAckP,eACrDN,KAAKK,YA/pBuC,8BA+pBKjP,cAAcmP,uBAC/DP,KAAKK,YA/pBuC,2BAgqB5CL,KAAKQ,iBACLR,KAAKK,YAAYhO,uBACjB2N,KAAKQ,iBACLR,KAAKK,YAtqBuC,sBAuqB5CL,KAAKK,YAtqBuC,sBAuqB5CL,KAAKQ,iBACLR,KAAKK,YAAY/N,sBACjB0N,KAAKK,YAAY9N,gBACjByN,KAAKK,YApqBuC,2BAqqB5CL,KAAKQ,iBACLR,KAAKK,YArqBuC,8BAsqB5CL,KAAKK,YAAYpQ,SAASwQ,kBAE1BjC,qCAEA5O,QAAQqD,cAAgBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*globals path*/\n/*jslint regexp: true */\n\ndefine(function (require, exports, module) {\n\n\n    var _ = brackets.getModule(\"thirdparty/lodash\");\n\n    var Commands               = brackets.getModule(\"command/Commands\"),\n        CommandManager         = brackets.getModule(\"command/CommandManager\"),\n        Menus                  = brackets.getModule(\"command/Menus\"),\n        FileSystem             = brackets.getModule(\"filesystem/FileSystem\"),\n        FileUtils              = brackets.getModule(\"file/FileUtils\"),\n        PerfUtils              = brackets.getModule(\"utils/PerfUtils\"),\n        StringUtils            = brackets.getModule(\"utils/StringUtils\"),\n        Dialogs                = brackets.getModule(\"widgets/Dialogs\"),\n        Strings                = brackets.getModule(\"strings\"),\n        PreferencesManager     = brackets.getModule(\"preferences/PreferencesManager\"),\n        LocalizationUtils      = brackets.getModule(\"utils/LocalizationUtils\"),\n        MainViewManager        = brackets.getModule(\"view/MainViewManager\"),\n        WorkingSetView         = brackets.getModule(\"project/WorkingSetView\"),\n        ExtensionManager       = brackets.getModule(\"extensibility/ExtensionManager\"),\n        Mustache               = brackets.getModule(\"thirdparty/mustache/mustache\"),\n        Locales                = brackets.getModule(\"nls/strings\"),\n        ProjectManager         = brackets.getModule(\"project/ProjectManager\"),\n        PerfDialogTemplate     = require(\"text!htmlContent/perf-dialog.html\"),\n        LanguageDialogTemplate = require(\"text!htmlContent/language-dialog.html\");\n\n    var KeyboardPrefs = JSON.parse(require(\"text!keyboard.json\"));\n\n    // default preferences file name\n    var DEFAULT_PREFERENCES_FILENAME = \"defaultPreferences.json\",\n        SUPPORTED_PREFERENCE_TYPES   = [\"number\", \"boolean\", \"string\", \"array\", \"object\"];\n\n    var recomputeDefaultPrefs        = true,\n        defaultPreferencesFullPath   = path.normalize(brackets.app.getApplicationSupportDirectory() + \"/\" + DEFAULT_PREFERENCES_FILENAME);\n\n    /**\n     * Brackets Application Menu Constant\n     * @const {string}\n     */\n    var DEBUG_MENU = \"debug-menu\";\n\n     /**\n      * Debug commands IDs\n      * @enum {string}\n      */\n    var DEBUG_REFRESH_WINDOW                  = \"debug.refreshWindow\", // string must MATCH string in native code (brackets_extensions)\n        DEBUG_RUN_UNIT_TESTS                  = \"debug.runUnitTests\",\n        DEBUG_SHOW_PERF_DATA                  = \"debug.showPerfData\",\n        DEBUG_RELOAD_WITHOUT_USER_EXTS        = \"debug.reloadWithoutUserExts\",\n        DEBUG_NEW_BRACKETS_WINDOW             = \"debug.newBracketsWindow\",\n        DEBUG_SWITCH_LANGUAGE                 = \"debug.switchLanguage\",\n        DEBUG_ENABLE_LOGGING                  = \"debug.enableLogging\",\n        DEBUG_OPEN_VFS                        = \"debug.openVFS\",\n        DEBUG_OPEN_VIRTUAL_SERVER             = \"debug.openVirtualServer\",\n        DEBUG_OPEN_PREFERENCES_IN_SPLIT_VIEW  = \"debug.openPrefsInSplitView\";\n\n    // define a preference to turn off opening preferences in split-view.\n    var prefs = PreferencesManager.getExtensionPrefs(\"preferencesView\");\n    prefs.definePreference(\"openPrefsInSplitView\",   \"boolean\", true, {\n        description: Strings.DESCRIPTION_OPEN_PREFS_IN_SPLIT_VIEW\n    });\n\n    prefs.definePreference(\"openUserPrefsInSecondPane\",   \"boolean\", true, {\n        description: Strings.DESCRIPTION_OPEN_USER_PREFS_IN_SECOND_PANE\n    });\n\n    // Implements the 'Run Tests' menu to bring up the Jasmine unit test window\n    var _testWindow = null;\n    function _runUnitTests(spec) {\n        let queryString = spec ? \"?spec=\" + spec : \"?suite=unit\";\n        let testBaseURL = \"../test/SpecRunner.html\";\n        if(window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1'){\n            // must be a deployed in phcode.dev/other sites. point to site test url\n            testBaseURL = \"test/SpecRunner.html\";\n        }\n        if (_testWindow && !_testWindow.closed) {\n            if (_testWindow.location.search !== queryString) {\n                _testWindow.location.href = testBaseURL + queryString;\n            } else {\n                _testWindow.location.reload(true);\n            }\n        } else {\n            _testWindow = window.open(testBaseURL + queryString);\n            _testWindow.location.reload(true); // if it had been opened earlier, force a reload because it will be cached\n        }\n    }\n\n    function handleReload() {\n        CommandManager.execute(Commands.APP_RELOAD);\n    }\n\n    function handleReloadWithoutUserExts() {\n        CommandManager.execute(Commands.APP_RELOAD_WITHOUT_EXTS);\n    }\n\n    function handleNewBracketsWindow() {\n        window.open(window.location.href);\n    }\n\n    function handleShowPerfData() {\n        var templateVars = {\n            delimitedPerfData: PerfUtils.getDelimitedPerfData(),\n            perfData: []\n        };\n\n        var getValue = function (entry) {\n            // entry is either an Array or a number\n            if (Array.isArray(entry)) {\n                // For Array of values, return: minimum/average(count)/maximum/last\n                var i, e, avg, sum = 0, min = Number.MAX_VALUE, max = 0;\n\n                for (i = 0; i < entry.length; i++) {\n                    e = entry[i];\n                    min = Math.min(min, e);\n                    sum += e;\n                    max = Math.max(max, e);\n                }\n                avg = Math.round(sum * 10 / entry.length) / 10; // tenth of a millisecond\n                return String(min) + \"/\" + String(avg) + \"(\" + entry.length + \")/\" + String(max) + \"/\" + String(e);\n            }\n            return entry;\n\n        };\n\n        var perfData = PerfUtils.getData();\n        _.forEach(perfData, function (value, testName) {\n            templateVars.perfData.push({\n                testName: StringUtils.breakableUrl(testName),\n                value: getValue(value)\n            });\n        });\n\n        var template = Mustache.render(PerfDialogTemplate, templateVars);\n        Dialogs.showModalDialogUsingTemplate(template);\n\n        // Select the raw perf data field on click since select all doesn't\n        // work outside of the editor\n        $(\"#brackets-perf-raw-data\").click(function () {\n            $(this).focus().select();\n        });\n    }\n\n    function handleSwitchLanguage() {\n        const supportedLocales = Object.keys(Locales);\n\n        var $dialog,\n            $submit,\n            $select,\n            locale,\n            curLocale = (brackets.isLocaleDefault() ? null : brackets.getLocale()),\n            languages = [];\n\n        var setLanguage = function (event) {\n            locale = $select.val();\n            $submit.prop(\"disabled\", locale === (curLocale || \"\"));\n        };\n\n        for(let supportedLocale of supportedLocales){\n            var match = supportedLocale.match(/^([a-z]{2})(-[a-z]{2})?$/);\n\n            if (match) {\n                var language = supportedLocale,\n                    label = match[1];\n\n                if (match[2]) {\n                    label += match[2].toUpperCase();\n                }\n\n                languages.push({label: LocalizationUtils.getLocalizedLabel(label), language: language});\n            }\n        }\n        // add English (US), which is the root folder and should be sorted as well\n        languages.push({label: LocalizationUtils.getLocalizedLabel(\"en\"),  language: \"en\"});\n\n        // sort the languages via their display name\n        languages.sort(function (lang1, lang2) {\n            return lang1.label.localeCompare(lang2.label);\n        });\n\n        // add system default (which is placed on the very top)\n        languages.unshift({label: Strings.LANGUAGE_SYSTEM_DEFAULT, language: null});\n\n        var template = Mustache.render(LanguageDialogTemplate, {languages: languages, Strings: Strings});\n        Dialogs.showModalDialogUsingTemplate(template).done(function (id) {\n            if (id === Dialogs.DIALOG_BTN_OK && locale !== curLocale) {\n                brackets.setLocale(locale);\n                CommandManager.execute(Commands.APP_RELOAD);\n            }\n        });\n\n        $dialog = $(\".switch-language.instance\");\n        $submit = $dialog.find(\".dialog-button[data-button-id='\" + Dialogs.DIALOG_BTN_OK + \"']\");\n        $select = $dialog.find(\"select\");\n\n        $select.on(\"change\", setLanguage).val(curLocale);\n    }\n\n    function _openPrefFilesInSplitView(prefsPath, defaultPrefsPath, deferredPromise) {\n\n        var currScheme         = MainViewManager.getLayoutScheme(),\n            file               = FileSystem.getFileForPath(prefsPath),\n            defaultPrefsFile   = FileSystem.getFileForPath(defaultPrefsPath),\n            DEFAULT_PREFS_PANE = \"first-pane\",\n            USER_PREFS_PANE    = \"second-pane\";\n\n        // Exchange the panes, if default preferences need to be opened\n        // in the right pane.\n        if (!prefs.get(\"openUserPrefsInSecondPane\")) {\n            DEFAULT_PREFS_PANE = \"second-pane\";\n            USER_PREFS_PANE    = \"first-pane\";\n        }\n\n        function _openFiles() {\n\n            if (currScheme.rows === 1 && currScheme.columns === 1) {\n                // Split layout is not active yet. Initiate the\n                // split view.\n                MainViewManager.setLayoutScheme(1, 2);\n            }\n\n            // Open the default preferences in the left pane in the read only mode.\n            CommandManager.execute(Commands.FILE_OPEN, { fullPath: defaultPrefsPath, paneId: DEFAULT_PREFS_PANE, options: { isReadOnly: true } })\n                .done(function () {\n\n                    // Make sure the preference file is going to be opened in pane\n                    // specified in the preference.\n                    if (MainViewManager.findInWorkingSet(DEFAULT_PREFS_PANE, prefsPath) >= 0) {\n\n                        MainViewManager._moveView(DEFAULT_PREFS_PANE, USER_PREFS_PANE, file, 0, true);\n\n                        // Now refresh the project tree by asking\n                        // it to rebuild the UI.\n                        WorkingSetView.refresh(true);\n                    }\n\n                    CommandManager.execute(Commands.FILE_OPEN, { fullPath: prefsPath, paneId: USER_PREFS_PANE})\n                        .done(function () {\n                            deferredPromise.resolve();\n                        }).fail(function () {\n                            deferredPromise.reject();\n                        });\n                }).fail(function () {\n                    deferredPromise.reject();\n                });\n        }\n\n        var resultObj = MainViewManager.findInAllWorkingSets(defaultPrefsPath);\n        if (resultObj && resultObj.length > 0) {\n            CommandManager.execute(Commands.FILE_CLOSE, {file: defaultPrefsFile, paneId: resultObj[0].paneId})\n                .done(function () {\n                    _openFiles();\n                }).fail(function () {\n                    deferredPromise.reject();\n                });\n        } else {\n            _openFiles();\n        }\n\n    }\n\n    function _isSupportedPrefType(prefType) {\n\n        if (SUPPORTED_PREFERENCE_TYPES.indexOf(prefType) >= 0) {\n            return true;\n        }\n        return false;\n\n    }\n\n   /*\n    * This method tries to deduce the preference type\n    * based on various parameters like objects initial\n    * value, object type, object's type property.\n    */\n    function _getPrefType(prefItem) {\n\n        var finalPrefType = \"undefined\";\n\n        if (prefItem) {\n            // check the type parameter.\n            var _prefType = prefItem.type;\n            if (_prefType !== undefined) {\n                finalPrefType = prefItem.type.toLowerCase();\n                // make sure the initial property's\n                // object type matches to that of 'type' property.\n                if (prefItem.initial !== undefined) {\n\n                    if (Array.isArray(prefItem.initial)) {\n                        _prefType = \"array\";\n                    } else {\n                        var _initialType = typeof (prefItem.initial);\n                        _initialType = _initialType.toLowerCase();\n                        if (_prefType !== _initialType) {\n                            _prefType = _initialType;\n                        }\n                    }\n                }\n            }\n\n            if (_prefType) {\n                // preference object's type\n                // is defined. Check if that is valid or not.\n                finalPrefType = _prefType;\n                if (!_isSupportedPrefType(finalPrefType)) {\n                    finalPrefType = \"undefined\";\n                }\n            } else if (Array.isArray(prefItem)) {\n                // Check if the object itself\n                // is an array, in which case\n                // we log the default.\n                finalPrefType = \"array\";\n            } else if (prefItem.initial !== undefined  ||\n                       prefItem.keys !== undefined) {\n\n                // OK looks like this preference has\n                // no explicit type defined. instead\n                // it needs to be deduced from initial/keys\n                // variable.\n                var _prefVar;\n                if (prefItem.initial !== undefined) {\n                    _prefVar = prefItem.initial;\n                } else {\n                    _prefVar = prefItem.keys;\n                }\n\n                if (Array.isArray(_prefVar)) {\n                    // In cases of array the\n                    // typeof is returning a function.\n                    finalPrefType = \"array\";\n                }\n\n            } else {\n                finalPrefType = typeof (prefItem);\n            }\n        }\n\n        // Now make sure we recognize this format.\n        if (!_isSupportedPrefType(finalPrefType)) {\n            finalPrefType = \"undefined\";\n        }\n\n        return finalPrefType;\n    }\n\n    function _isValidPref(pref) {\n\n        // Make sure to generate pref description only for\n        // user overrides and don't generate for properties\n        // meant to be used for internal purposes. Also check\n        // if the preference type is valid or not.\n        if (pref && !pref.excludeFromHints && _getPrefType(pref) !== \"undefined\") {\n            return true;\n        }\n\n        return false;\n    }\n\n   /*\n    * This method tries to match between initial objects\n    * and key objects and then aggregates objects from both\n    * the properties.\n    */\n    function _getChildPrefs(prefItem) {\n\n        var finalObj = {},\n            keysFound = false;\n\n        if (!prefItem) {\n            return {};\n        }\n\n        function _populateKeys(allKeys) {\n\n            var prop;\n            if (typeof (allKeys) === \"object\") {\n                // iterate through the list.\n                keysFound = true;\n                for (prop in allKeys) {\n                    if (allKeys.hasOwnProperty(prop)) {\n                        finalObj[prop] = allKeys[prop];\n                    }\n                }\n            }\n        }\n\n        _populateKeys(prefItem.initial);\n        _populateKeys(prefItem.keys);\n\n        // Last resort: Maybe plain objects, in which case\n        // we blindly extract all the properties.\n        if (!keysFound) {\n            _populateKeys(prefItem);\n        }\n\n        return finalObj;\n    }\n\n    function _formatBasicPref(prefItem, prefName, tabIndentStr) {\n\n        if (!prefItem || typeof (prefName) !== \"string\" || _getPrefType(prefItem) === \"object\") {\n            // return empty string in case of\n            // object or pref is not defined.\n            return \"\";\n        }\n\n        var prefDescription = prefItem.description || \"\",\n            prefDefault     = prefItem.initial,\n            prefFormatText  = tabIndentStr + \"\\t// {0}\\n\" + tabIndentStr + \"\\t\\\"{1}\\\": {2}\",\n            prefItemType    = _getPrefType(prefItem);\n\n        if (prefDefault === undefined && !prefItem.description) {\n            // This could be the case when prefItem is a basic JS variable.\n            if (prefItemType === \"number\" || prefItemType === \"boolean\" || prefItemType === \"string\") {\n                prefDefault = prefItem;\n            }\n        }\n\n        if (prefDefault === undefined) {\n            if (prefItemType === \"number\") {\n                prefDefault = 0;\n            } else if (prefItemType === \"boolean\") {\n                // Defaulting the preference to false,\n                // in case this is missing.\n                prefDefault = false;\n            } else {\n                // for all other types\n                prefDefault = \"\";\n            }\n        }\n\n        if ((prefDescription === undefined || prefDescription.length === 0)) {\n            if (!Array.isArray(prefDefault)) {\n                prefDescription = Strings.DEFAULT_PREFERENCES_JSON_DEFAULT + \": \" + prefDefault;\n            } else {\n                prefDescription = \"\";\n            }\n        }\n\n        if (prefItemType === \"array\") {\n            prefDefault = \"[]\";\n        } else if (prefDefault.length === 0 || (prefItemType !== \"boolean\" && prefItemType !== \"number\")) {\n            prefDefault = \"\\\"\" + prefDefault + \"\\\"\";\n        }\n\n        return StringUtils.format(prefFormatText, prefDescription, prefName, prefDefault);\n    }\n\n    function _formatPref(prefName,  prefItem, indentLevel) {\n\n        // check for validity of the parameters being passed\n        if (!prefItem || indentLevel < 0 || !prefName || !prefName.length) {\n            return \"\";\n        }\n\n        var iLevel,\n            prefItemKeys,\n            entireText     = \"\",\n            prefItemDesc   = prefItem.description || \"\",\n            prefItemType   = _getPrefType(prefItem),\n            hasKeys        = false,\n            tabIndents     = \"\",\n            numKeys        = 0;\n\n        // Generate the indentLevel string\n        for (iLevel = 0; iLevel < indentLevel; iLevel++) {\n            tabIndents += \"\\t\";\n        }\n\n        // Check if the preference is an object.\n        if (_getPrefType(prefItem) === \"object\") {\n            prefItemKeys = _getChildPrefs(prefItem);\n            if (Object.keys(prefItemKeys).length > 0) {\n                hasKeys = true;\n            }\n        }\n\n        // There are some properties like \"highlightMatches\" that\n        // are declared as boolean type but still can take object keys.\n        // The below condition check can take care of cases like this.\n        if (prefItemType !== \"object\" && hasKeys === false) {\n            return _formatBasicPref(prefItem, prefName, tabIndents);\n        }\n\n        // Indent the beginning of the object.\n        tabIndents += \"\\t\";\n\n        if (prefItemDesc && prefItemDesc.length > 0) {\n            entireText = tabIndents + \"// \" + prefItemDesc + \"\\n\";\n        }\n\n        entireText += tabIndents + \"\\\"\" + prefName + \"\\\": \" + \"{\";\n\n        if (prefItemKeys) {\n            numKeys = Object.keys(prefItemKeys).length;\n        }\n\n        // In case the object array is empty\n        if (numKeys <= 0) {\n            entireText += \"}\";\n            return entireText;\n        }\n        entireText += \"\\n\";\n\n\n        // Now iterate through all the keys\n        // and generate nested formatted objects.\n\n        Object.keys(prefItemKeys).sort().forEach(function (property) {\n\n            if (prefItemKeys.hasOwnProperty(property)) {\n\n                var pref = prefItemKeys[property];\n\n                if (_isValidPref(pref)) {\n\n                    var formattedText = \"\";\n\n                    if (_getPrefType(pref) === \"object\") {\n                        formattedText = _formatPref(property, pref, indentLevel + 1);\n                    } else {\n                        formattedText = _formatBasicPref(pref, property, tabIndents);\n                    }\n\n                    if (formattedText.length > 0) {\n                        entireText += formattedText + \",\\n\\n\";\n                    }\n                }\n            }\n        });\n\n        // Strip \",\\n\\n\" that got added above, for the last property\n        if (entireText.length > 0) {\n            entireText = entireText.slice(0, -3) + \"\\n\" + tabIndents + \"}\";\n        } else {\n            entireText = \"{}\";\n        }\n\n        return entireText;\n    }\n\n    function _getDefaultPreferencesString() {\n\n        var allPrefs       = PreferencesManager.getAllPreferences(),\n            headerComment  = Strings.DEFAULT_PREFERENCES_JSON_HEADER_COMMENT + \"\\n\\n{\\n\",\n            entireText     = \"\";\n\n        Object.keys(allPrefs).sort().forEach(function (property) {\n            if (allPrefs.hasOwnProperty(property)) {\n\n                var pref = allPrefs[property];\n\n                if (_isValidPref(pref)) {\n                    entireText += _formatPref(property, pref, 0) + \",\\n\\n\";\n                }\n            }\n        });\n\n        // Strip \",\\n\\n\" that got added above, for the last property\n        if (entireText.length > 0) {\n            entireText = headerComment + entireText.slice(0, -3) + \"\\n}\\n\";\n        } else {\n            entireText = headerComment + \"}\\n\";\n        }\n\n        return entireText;\n    }\n\n    function _loadDefaultPrefs(prefsPath, deferredPromise) {\n\n        var defaultPrefsPath = defaultPreferencesFullPath,\n            file             = FileSystem.getFileForPath(defaultPrefsPath);\n\n        function _executeDefaultOpenPrefsCommand() {\n\n            CommandManager.execute(Commands.FILE_OPEN_PREFERENCES)\n                .done(function () {\n                    deferredPromise.resolve();\n                }).fail(function () {\n                    deferredPromise.reject();\n                });\n        }\n\n        file.exists(function (err, doesExist) {\n\n            if (doesExist) {\n\n                // Go about recreating the default preferences file.\n                if (recomputeDefaultPrefs) {\n\n                    var prefsString       = _getDefaultPreferencesString();\n                    recomputeDefaultPrefs = false;\n\n                    // We need to delete this first\n                    file.unlink(function (err) {\n                        if (!err) {\n                            // Go about recreating this\n                            // file and write the default\n                            // preferences string to this file.\n                            FileUtils.writeText(file, prefsString, true)\n                                .done(function () {\n                                    recomputeDefaultPrefs = false;\n                                    _openPrefFilesInSplitView(prefsPath, defaultPrefsPath, deferredPromise);\n                                }).fail(function (error) {\n                                    // Give a chance for default preferences command.\n                                    console.error(\"Unable to write to default preferences file! error code:\" + error);\n                                    _executeDefaultOpenPrefsCommand();\n                                });\n                        } else {\n                            // Some error occured while trying to delete\n                            // the file. In this case open the user\n                            // preferences alone.\n                            console.error(\"Unable to delete the existing default preferences file! error code:\" + err);\n                            _executeDefaultOpenPrefsCommand();\n                        }\n                    });\n\n                } else {\n                    // Default preferences already generated.\n                    // Just go about opening both the files.\n                    _openPrefFilesInSplitView(prefsPath, defaultPrefsPath, deferredPromise);\n                }\n            } else {\n\n                // The default prefs file does not exist at all.\n                // So go about recreating the default preferences\n                // file.\n                var _prefsString = _getDefaultPreferencesString();\n                FileUtils.writeText(file, _prefsString, true)\n                    .done(function () {\n                        recomputeDefaultPrefs = false;\n                        _openPrefFilesInSplitView(prefsPath, defaultPrefsPath, deferredPromise);\n                    }).fail(function (error) {\n                        // Give a chance for default preferences command.\n                        console.error(\"Unable to write to default preferences file! error code:\" + error);\n                        _executeDefaultOpenPrefsCommand();\n                    });\n            }\n        });\n    }\n\n    function handleOpenPrefsInSplitView() {\n\n        var fullPath        = PreferencesManager.getUserPrefFile(),\n            file            = FileSystem.getFileForPath(fullPath),\n            splitViewPrefOn = prefs.get(\"openPrefsInSplitView\"),\n            result          = new $.Deferred();\n\n        if (!splitViewPrefOn) {\n            return CommandManager.execute(Commands.FILE_OPEN_PREFERENCES);\n        }\n        file.exists(function (err, doesExist) {\n            if (doesExist) {\n                _loadDefaultPrefs(fullPath, result);\n            } else {\n                FileUtils.writeText(file, \"\", true)\n                        .done(function () {\n                            _loadDefaultPrefs(fullPath, result);\n                        }).fail(function () {\n                            result.reject();\n                        });\n            }\n        });\n\n\n        return result.promise();\n    }\n\n    function _updateLogToConsoleMenuItemChecked() {\n        const isLogging = window.setupLogging();\n        CommandManager.get(DEBUG_ENABLE_LOGGING).setChecked(isLogging);\n    }\n\n    function _handleLogging() {\n        let logToConsolePref = localStorage.getItem(\"logToConsole\") || \"false\";\n        if(logToConsolePref.toLowerCase() === 'true'){\n            logToConsolePref = 'false';\n        } else {\n            logToConsolePref = 'true';\n        }\n        localStorage.setItem(\"logToConsole\", logToConsolePref);\n        _updateLogToConsoleMenuItemChecked();\n    }\n\n    ExtensionManager.on(\"statusChange\", function (id) {\n        // Seems like an extension(s) got installed.\n        // Need to recompute the default prefs.\n        recomputeDefaultPrefs = true;\n    });\n\n    function _openVFS() {\n        ProjectManager.openProject(\"/\");\n    }\n\n    function _openVirtualServer() {\n        window.open(window.fsServerUrl);\n    }\n\n    /* Register all the command handlers */\n    CommandManager.register(Strings.CMD_REFRESH_WINDOW,             DEBUG_REFRESH_WINDOW,           handleReload);\n    CommandManager.register(Strings.CMD_RELOAD_WITHOUT_USER_EXTS,   DEBUG_RELOAD_WITHOUT_USER_EXTS, handleReloadWithoutUserExts);\n    CommandManager.register(Strings.CMD_NEW_BRACKETS_WINDOW,        DEBUG_NEW_BRACKETS_WINDOW,      handleNewBracketsWindow);\n\n    // Start with the \"Run Tests\" item disabled. It will be enabled later if the test file can be found.\n    CommandManager.register(Strings.CMD_RUN_UNIT_TESTS,       DEBUG_RUN_UNIT_TESTS,         _runUnitTests);\n\n    CommandManager.register(Strings.CMD_SHOW_PERF_DATA,            DEBUG_SHOW_PERF_DATA,            handleShowPerfData);\n\n    CommandManager.register(Strings.CMD_SWITCH_LANGUAGE,           DEBUG_SWITCH_LANGUAGE,           handleSwitchLanguage);\n\n    CommandManager.register(Strings.CMD_ENABLE_LOGGING, DEBUG_ENABLE_LOGGING,   _handleLogging);\n    CommandManager.register(Strings.CMD_OPEN_VFS, DEBUG_OPEN_VFS,   _openVFS);\n    CommandManager.register(Strings.CMD_OPEN_VIRTUAL_SERVER, DEBUG_OPEN_VIRTUAL_SERVER,   _openVirtualServer);\n\n    CommandManager.register(Strings.CMD_OPEN_PREFERENCES, DEBUG_OPEN_PREFERENCES_IN_SPLIT_VIEW, handleOpenPrefsInSplitView);\n    /*\n     * Debug menu\n     */\n    var menu = Menus.addMenu(Strings.DEBUG_MENU, DEBUG_MENU, Menus.BEFORE, Menus.AppMenuBar.HELP_MENU);\n    menu.addMenuItem(DEBUG_REFRESH_WINDOW, KeyboardPrefs.refreshWindow);\n    menu.addMenuItem(DEBUG_RELOAD_WITHOUT_USER_EXTS, KeyboardPrefs.reloadWithoutUserExts);\n    menu.addMenuItem(DEBUG_NEW_BRACKETS_WINDOW);\n    menu.addMenuDivider();\n    menu.addMenuItem(DEBUG_SWITCH_LANGUAGE);\n    menu.addMenuDivider();\n    menu.addMenuItem(DEBUG_RUN_UNIT_TESTS);\n    menu.addMenuItem(DEBUG_SHOW_PERF_DATA);\n    menu.addMenuDivider();\n    menu.addMenuItem(DEBUG_ENABLE_LOGGING);\n    menu.addMenuItem(DEBUG_OPEN_VFS);\n    menu.addMenuItem(DEBUG_OPEN_VIRTUAL_SERVER);\n    menu.addMenuDivider();\n    menu.addMenuItem(DEBUG_OPEN_PREFERENCES_IN_SPLIT_VIEW); // this command will enable defaultPreferences and brackets preferences to be open side by side in split view.\n    menu.addMenuItem(Commands.FILE_OPEN_KEYMAP);      // this command is defined in core, but exposed only in Debug menu for now\n\n    _updateLogToConsoleMenuItemChecked();\n    // exposed for convenience, but not official API\n    exports._runUnitTests = _runUnitTests;\n});\n"],"file":"main.js"}