{"version":3,"sources":["extensions/default/JSLint/thirdparty/jslint/intercept.js"],"names":["ADSAFE","_intercept","id","dom","lib","bunch","cookie","get","c","document","s","indexOf","v","length","JSON","parse","slice","ignore","set","value","d","j","stringify","replace","Date","setTime","getTime","toGMTString","now","jslint","source","options","errors","report","properties","edition","after","before","data","errtext","protext","retext","JSLINT","error_report","properties_report","property","___nodes___","innerHTML"],"mappings":"AAyBAA,OAAOC,WAAW,SAAUC,GAAIC,IAAKC,IAAKC,OACtC,aAKAD,IAAIE,OAAS,CACTC,IAAK,WAID,IAAIC,EAAI,IAAMC,SAASH,OAAS,IAC5BI,EAAIF,EAAEG,QAAS,IAAMT,GAAK,KAC1BU,EACJ,IACQF,GAAK,IACLA,GAAKR,GAAGW,OAAS,EACjBD,EAAIE,KAAKC,MAAMP,EAAEQ,MAAMN,EAAGF,EAAEG,QAAQ,IAAKD,MAE/C,MAAOO,SACT,OAAOL,GAEXM,IAAK,SAAUC,OAKX,IAAIC,EACAC,EAAIP,KAAKQ,UAAUH,OACdI,QAAQ,OAAQ,WAChBA,QAAQ,OAAQ,WAErBF,EAAER,OAAS,OACXO,EAAI,IAAII,MACNC,QAAQL,EAAEM,UAAY,KACxBjB,SAASH,OAASJ,GAAK,IAAMmB,EAAI,YAAcD,EAAEO,mBAMjE3B,OAAOC,WAAW,SAAUC,GAAIC,IAAKC,IAAKC,OACtC,aAWA,IAAIuB,IAAMJ,KAAKI,KAAO,WAClB,OAAO,IAAIJ,MAAOE,WAGX,YAAPxB,KACAE,IAAIyB,OAAS,SAAUC,OAAQC,QAASC,OAAQC,OAAQC,WAAYC,SAChE,IAAIC,MAAOC,OAAST,MAAOU,KAAMC,QAASC,QAASC,OAWnD,OAVAC,OAAOZ,OAAQC,SACfO,KAAOI,OAAOJ,OACdC,QAAUG,OAAOC,aAAaL,MAC9BG,OAASC,OAAOT,OAAOK,MACvBE,QAAUE,OAAOE,kBAAkBF,OAAOG,UAC1CT,MAAQR,MACRO,QAAQhB,OAAQiB,MAAQC,QAAU,IAAQ,aAC1CL,OAAOc,YAAY,GAAGC,UAAYR,QAClCN,OAAOa,YAAY,GAAGC,UAAYN,OAClCP,WAAWf,MAAMqB,SACE,KAAZD,SAEXnC,IAAI+B,QAAU,WACV,OAAOO,OAAOP","sourcesContent":["// intercept.js\n// 2012-05-09\n\n// This file makes it possible for JSLint to run as an ADsafe widget by\n// adding lib features.\n\n// It provides a JSON cookie facility. Each widget is allowed to create a\n// single JSON cookie.\n\n// It also provides a way for the widget to call JSLint. The widget cannot\n// call JSLint directly because it is loaded as a global variable. I don't\n// want to change that because other versions of JSLint depend on that.\n\n// And it provides access to the syntax tree that JSLint constructed.\n\n/*jslint nomen: true, unparam: true */\n\n/*global ADSAFE, document, JSLINT */\n\n/*properties\n    ___nodes___, _intercept, cookie, data, edition, error_report, get, getTime,\n    indexOf, innerHTML, jslint, length, now, parse, properties_report, property,\n    replace, report, set, setTime, slice, stringify, toGMTString, value\n*/\n\nADSAFE._intercept(function (id, dom, lib, bunch) {\n    'use strict';\n\n// Give every widget access to a JSON cookie. The name of the cookie will be\n// the same as the id of the widget.\n\n    lib.cookie = {\n        get: function () {\n\n// Get the raw cookie. Extract this widget's cookie, and parse it.\n\n            var c = ' ' + document.cookie + ';',\n                s = c.indexOf((' ' + id + '=')),\n                v;\n            try {\n                if (s >= 0) {\n                    s += id.length + 2;\n                    v = JSON.parse(c.slice(s, c.indexOf(';', s)));\n                }\n            } catch (ignore) {}\n            return v;\n        },\n        set: function (value) {\n\n// Set a cookie. It must be under 2000 in length. Escapify equal sign\n// and semicolon if necessary.\n\n            var d,\n                j = JSON.stringify(value)\n                    .replace(/[=]/g, '\\\\u003d')\n                    .replace(/[;]/g, '\\\\u003b');\n\n            if (j.length < 2000) {\n                d = new Date();\n                d.setTime(d.getTime() + 1e9);\n                document.cookie = id + \"=\" + j + ';expires=' + d.toGMTString();\n            }\n        }\n    };\n});\n\nADSAFE._intercept(function (id, dom, lib, bunch) {\n    'use strict';\n\n// Give only the JSLINT_ widget access to the JSLINT function.\n// We add a jslint function to its lib that calls JSLINT and\n// then gets the reports, and stuffs the results into nodes\n// provided by the widget. We do not trust a widget to stuff\n// just any HTML content.\n\n// We also add an edition function to the lib that gives the\n// widget access to the current edition string.\n\n    var now = Date.now || function () {\n        return new Date().getTime();\n    };\n\n    if (id === 'JSLINT_') {\n        lib.jslint = function (source, options, errors, report, properties, edition) {\n            var after, before = now(), data, errtext, protext, retext;\n            JSLINT(source, options);\n            data = JSLINT.data();\n            errtext = JSLINT.error_report(data);\n            retext = JSLINT.report(data);\n            protext = JSLINT.properties_report(JSLINT.property);\n            after = now();\n            edition.value(((after - before) / 1000) + ' seconds.');\n            errors.___nodes___[0].innerHTML = errtext;\n            report.___nodes___[0].innerHTML = retext;\n            properties.value(protext);\n            return errtext !== '';\n        };\n        lib.edition = function () {\n            return JSLINT.edition;\n        };\n    }\n});\n"],"file":"intercept.js"}