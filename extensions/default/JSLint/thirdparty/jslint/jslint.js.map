{"version":3,"sources":["extensions/default/JSLint/thirdparty/jslint/jslint.js"],"names":["JSLINT","array_to_object","array","value","i","length","object","Object","create","allowed_option","ass","bitwise","browser","closure","continue","couch","debug","devel","eqeq","evil","forin","indent","maxerr","maxlen","newcap","node","nomen","passfail","plusplus","properties","regexp","rhino","unparam","sloppy","stupid","sub","todo","vars","white","anonname","bang","<","<=","==","===","!==","!=",">",">=","+","-","*","/","%","begin","block_var","bundle","a_label","a_scope","already_defined","and","assignment_expression","assignment_function_expression","avoid_a","bad_assignment","bad_constructor","bad_in_a","bad_invocation","bad_new","bad_number","bad_operand","bad_wrap","combine_var","conditional_assignment","confusing_a","confusing_regexp","constructor_name_a","control_a","dangling_a","deleted","duplicate_a","empty_block","empty_case","empty_class","expected_a_b","expected_a_b_from_c_d","expected_a_at_b_c","expected_id_a","expected_identifier_a","expected_identifier_a_reserved","expected_number_a","expected_operator_a","expected_positive_a","expected_small_a","expected_space_a_b","expected_string_a","for_if","function_block","function_eval","function_loop","function_statement","function_strict","identifier_function","implied_evil","infix_in","insecure_a","isNaN","leading_decimal_a","missing_a","missing_a_after_b","missing_property","missing_space_a_b","missing_use_strict","move_invocation","move_var","name_function","nested_comment","not","not_a_constructor","not_a_defined","not_a_function","not_a_label","not_a_scope","not_greater","octal_a","parameter_arguments_a","parameter_a_get_b","parameter_set_a","radix","read_only","redefinition_a_b","reserved_a","scanned_a_b","slash_equal","statement_block","stopping","strange_loop","strict","subscript","sync_a","tag_a_in_b","todo_comment","too_long","too_many","trailing_decimal_a","unclosed","unclosed_comment","unclosed_regexp","unescaped_a","unexpected_a","unexpected_char_a","unexpected_comment","unexpected_label_a","unexpected_property_a","unexpected_space_a_b","unexpected_typeof_a","uninitialized_a","unnecessary_else","unnecessary_initialize","unnecessary_use","unreachable_a_b","unsafe","unused_a","url","use_array","use_braces","use_nested_if","use_object","use_or","use_param","use_spaces","used_before_a","var_a_not","var_loop","weird_assignment","weird_condition","weird_new","weird_program","weird_relation","weird_ternary","wrap_immediate","wrap_regexp","write_is_wrong","comments","comments_off","descapes","b","t","n","f","r","\"","\\","!","directive","escapes","\b","\t","\n","\f","\r","'","funct","functions","global_funct","global_scope","in_block","itself","json_mode","lex","lines","lookahead","node_js","numbery","next_token","option","predefined","prereg","prev_token","property","protosymbol","regexp_flag","return_this","this","scope","semicolon_coda","standard","strict_mode","syntax","token","tokens","var_mode","warnings","crlfx","cx","ix","jx","lx","nx","syx","tox","tx","x","sanitize","a","charCodeAt","toString","slice","add_to_predefined","group","keys","forEach","name","assume","artifact","tok","id","number","string","quit","message","line","character","supplant","Math","floor","warn","code","c","d","warning","raw","evidence","reason","errors","push","stop","expected_at","at","from","define","kind","master","dead","init","used","writeable","function","peek","distance","found","slot","advance","match","edge","dent","was","open","mode","wrap","identifier","shift","do_globals","do_jslint","do_properties","step_in","step_out","symbol","one_space","left","right","thru","one_space_only","no_space","no_space_only","spaces","comma","semicolon","use_strict","are_similar","Array","isArray","arity","undefined","first","second","third","expression","rbp","initial","fud","nud","lbp","led","assign","s","bp","postscript","ultimate","reserve_name","charAt","reserved","stmt","disrupt_stmt","disrupt","labeled_stmt","labeled","the_statement","breakage","apply","pop","prefix","that","type","reserve","constant","reservevar","v","infix","p","w","expected_relation","expected_condition","check_relation","relation","lvalue","assignop","op","next","suffix","optional_identifier","variable","statement","label","preamble","test","block","statements","disruptor","curly","old_block_var","old_in_block","old_strict_mode","level","tally_property","banger","property_name","function_parameters","parameters","paren","do_function","func","old_funct","old_option","old_scope","global","loopage","replace","outer","parameter","optional_label","break","json_value","json_object","brace","json_array","bracket","unique","sort","previous","String","prototype","entityify","isAlpha","isDigit","o","replacement","pos","source_row","next_line","search","it","the_token","hasOwnProperty","call","indexOf","exec","ch","result","hex","parseInt","substr","fromCharCode","quote","snippet","digit","isFinite","comment","bit","depth","flag","high","letter","low","potential","klass","Infinity","source","split","command","old_comments_off","old_indent","arguments","colon","paren_check","e","immed","get","j","set","seen","varstatement","elif","else","exception_variable","cases","particular","the_case","find_duplicate_case","blok","filter","ok","JSLint","the_source","the_option","predef","tree","data","function_data","the_function","the_scope","selects","json","var","exception","error_report","output","join","report","dl","names","detail","h","comma_needed","item","params","properties_report","key","mem","not_first","color","data_token","jslint","edition"],"mappings":"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","sourcesContent":["// jslint.js\n// 2014-07-08\n\n// Copyright (c) 2002 Douglas Crockford  (www.JSLint.com)\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// The Software shall be used for Good, not Evil.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// WARNING: JSLint will hurt your feelings.\n\n// JSLINT is a global function. It takes two parameters.\n\n//     var myResult = JSLINT(source, option);\n\n// The first parameter is either a string or an array of strings. If it is a\n// string, it will be split on '\\n' or '\\r'. If it is an array of strings, it\n// is assumed that each string represents one line. The source can be a\n// JavaScript text or a JSON text.\n\n// The second parameter is an optional object of options that control the\n// operation of JSLINT. Most of the options are booleans: They are all\n// optional and have a default value of false. One of the options, predef,\n// can be an array of names, which will be used to declare global variables,\n// or an object whose keys are used as global names, with a boolean value\n// that determines if they are assignable.\n\n// If it checks out, JSLINT returns true. Otherwise, it returns false.\n\n// If false, you can inspect JSLINT.errors to find out the problems.\n// JSLINT.errors is an array of objects containing these properties:\n\n//  {\n//      line      : The line (relative to 0) at which the lint was found\n//      character : The character (relative to 0) at which the lint was found\n//      reason    : The problem\n//      evidence  : The text line in which the problem occurred\n//      raw       : The raw message before the details were inserted\n//      a         : The first detail\n//      b         : The second detail\n//      c         : The third detail\n//      d         : The fourth detail\n//  }\n\n// If a stopping error was found, a null will be the last element of the\n// JSLINT.errors array. A stopping error means that JSLint was not confident\n// enough to continue. It does not necessarily mean that the error was\n// especially heinous.\n\n// You can request a data structure that contains JSLint's results.\n\n//     var myData = JSLINT.data();\n\n// It returns a structure with this form:\n\n//     {\n//         errors: [\n//             {\n//                 line: NUMBER,\n//                 character: NUMBER,\n//                 reason: STRING,\n//                 evidence: STRING\n//             }\n//         ],\n//         functions: [\n//             {\n//                 name: STRING,\n//                 line: NUMBER,\n//                 level: NUMBER,\n//                 parameter: [\n//                     STRING\n//                 ],\n//                 var: [\n//                     STRING\n//                 ],\n//                 exception: [\n//                     STRING\n//                 ],\n//                 closure: [\n//                     STRING\n//                 ],\n//                 outer: [\n//                     STRING\n//                 ],\n//                 global: [\n//                     STRING\n//                 ],\n//                 label: [\n//                     STRING\n//                 ]\n//             }\n//         ],\n//         global: [\n//             STRING\n//         ],\n//         member: {\n//             STRING: NUMBER\n//         },\n//         json: BOOLEAN\n//     }\n\n// You can request a Function Report, which shows all of the functions\n// and the parameters and vars that they use. This can be used to find\n// implied global variables and other problems. The report is in HTML and\n// can be inserted into an HTML <body>. It should be given the result of the\n// JSLINT.data function.\n\n//     var myReport = JSLINT.report(data);\n\n// You can request an HTML error report.\n\n//     var myErrorReport = JSLINT.error_report(data);\n\n// You can obtain an object containing all of the properties found in the\n// file. JSLINT.property contains an object containing a key for each\n// property used in the program, the value being the number of times that\n// property name was used in the file.\n\n// You can request a properties report, which produces a list of the program's\n// properties in the form of a /*properties*/ declaration.\n\n//      var myPropertyReport = JSLINT.properties_report(JSLINT.property);\n\n// You can obtain the parse tree that JSLint constructed while parsing. The\n// latest tree is kept in JSLINT.tree. A nice stringification can be produced\n// with\n\n//     JSON.stringify(JSLINT.tree, [\n//         'string',  'arity', 'name',  'first',\n//         'second', 'third', 'block', 'else'\n//     ], 4));\n\n// You can request a context coloring table. It contains information that can be\n// applied to the file that was analyzed. Context coloring colors functions\n// based on their nesting level, and variables on the color of the functions\n// in which they are defined.\n\n//      var myColorization = JSLINT.color(data);\n\n// It returns an array containing objects of this form:\n\n//      {\n//          from: COLUMN,\n//          thru: COLUMN,\n//          line: ROW,\n//          level: 0 or higher\n//      }\n\n// JSLint provides three inline directives. They look like slashstar comments,\n// and allow for setting options, declaring global variables, and establishing a\n// set of allowed property names.\n\n// These directives respect function scope.\n\n// The jslint directive is a special comment that can set one or more options.\n// For example:\n\n/*jslint\n    evil: true, nomen: true, regexp: true, todo: true\n*/\n\n// The current option set is\n\n//     ass        true, if assignment expressions should be allowed\n//     bitwise    true, if bitwise operators should be allowed\n//     browser    true, if the standard browser globals should be predefined\n//     closure    true, if Google Closure idioms should be tolerated\n//     continue   true, if the continuation statement should be tolerated\n//     debug      true, if debugger statements should be allowed\n//     devel      true, if logging should be allowed (console, alert, etc.)\n//     eqeq       true, if == should be allowed\n//     evil       true, if eval should be allowed\n//     forin      true, if for in statements need not filter\n//     indent     the indentation factor\n//     maxerr     the maximum number of errors to allow\n//     maxlen     the maximum length of a source line\n//     newcap     true, if constructor names capitalization is ignored\n//     node       true, if Node.js globals should be predefined\n//     nomen      true, if names may have dangling _\n//     passfail   true, if the scan should stop on first error\n//     plusplus   true, if increment/decrement should be allowed\n//     properties true, if all property names must be declared with /*properties*/\n//     regexp     true, if the . should be allowed in regexp literals\n//     rhino      true, if the Rhino environment globals should be predefined\n//     unparam    true, if unused parameters should be tolerated\n//     sloppy     true, if the 'use strict'; pragma is optional\n//     stupid     true, if really stupid practices are tolerated\n//     sub        true, if all forms of subscript notation are tolerated\n//     todo       true, if TODO comments are tolerated\n//     vars       true, if multiple var statements per function should be allowed\n//     white      true, if sloppy whitespace is tolerated\n\n// The properties directive declares an exclusive list of property names.\n// Any properties named in the program that are not in the list will\n// produce a warning.\n\n// For example:\n\n/*properties\n    '\\b', '\\t', '\\n', '\\f', '\\r', '!', '!=', '!==', '\"', '%', '\\'', '(begin)',\n    '(error)', '*', '+', '-', '/', '<', '<=', '==', '===', '>', '>=', '\\\\', a,\n    a_label, a_scope, already_defined, and, apply, arguments, arity, ass,\n    assign, assignment_expression, assignment_function_expression, at, avoid_a,\n    b, bad_assignment, bad_constructor, bad_in_a, bad_invocation, bad_new,\n    bad_number, bad_operand, bad_wrap, bitwise, block, break, breakage, browser,\n    c, call, charAt, charCodeAt, character, closure, code, color, combine_var,\n    comments, conditional_assignment, confusing_a, confusing_regexp,\n    constructor_name_a, continue, control_a, couch, create, d, dangling_a, data,\n    dead, debug, deleted, devel, disrupt, duplicate_a, edge, edition, elif,\n    else, empty_block, empty_case, empty_class, entityify, eqeq, error_report,\n    errors, evidence, evil, exception, exec, expected_a_at_b_c, expected_a_b,\n    expected_a_b_from_c_d, expected_id_a, expected_identifier_a,\n    expected_identifier_a_reserved, expected_number_a, expected_operator_a,\n    expected_positive_a, expected_small_a, expected_space_a_b,\n    expected_string_a, f, first, flag, floor, forEach, for_if, forin, from,\n    fromCharCode, fud, function, function_block, function_eval, function_loop,\n    function_statement, function_strict, functions, global, hasOwnProperty, id,\n    identifier, identifier_function, immed, implied_evil, indent, indexOf,\n    infix_in, init, insecure_a, isAlpha, isArray, isDigit, isNaN, join, jslint,\n    json, keys, kind, label, labeled, lbp, leading_decimal_a, led, left, length,\n    level, line, loopage, master, match, maxerr, maxlen, message, missing_a,\n    missing_a_after_b, missing_property, missing_space_a_b, missing_use_strict,\n    mode, move_invocation, move_var, n, name, name_function, nested_comment,\n    newcap, node, nomen, not, not_a_constructor, not_a_defined, not_a_function,\n    not_a_label, not_a_scope, not_greater, nud, number, octal_a, open, outer,\n    parameter, parameter_a_get_b, parameter_arguments_a, parameter_set_a,\n    params, paren, passfail, plusplus, pop, postscript, predef, properties,\n    properties_report, property, prototype, push, quote, r, radix, raw,\n    read_only, reason, redefinition_a_b, regexp, relation, replace, report,\n    reserved, reserved_a, rhino, right, scanned_a_b, scope, search, second,\n    shift, slash_equal, slice, sloppy, sort, split, statement, statement_block,\n    stop, stopping, strange_loop, strict, string, stupid, sub, subscript,\n    substr, supplant, sync_a, t, tag_a_in_b, test, third, thru, toString, todo,\n    todo_comment, token, tokens, too_long, too_many, trailing_decimal_a, tree,\n    unclosed, unclosed_comment, unclosed_regexp, unescaped_a, unexpected_a,\n    unexpected_char_a, unexpected_comment, unexpected_label_a,\n    unexpected_property_a, unexpected_space_a_b, unexpected_typeof_a,\n    uninitialized_a, unnecessary_else, unnecessary_initialize, unnecessary_use,\n    unparam, unreachable_a_b, unsafe, unused_a, url, use_array, use_braces,\n    use_nested_if, use_object, use_or, use_param, use_spaces, used,\n    used_before_a, var, var_a_not, var_loop, vars, varstatement, warn, warning,\n    was, weird_assignment, weird_condition, weird_new, weird_program,\n    weird_relation, weird_ternary, white, wrap, wrap_immediate, wrap_regexp,\n    write_is_wrong, writeable\n*/\n\n// The global directive is used to declare global variables that can\n// be accessed by the program. If a declaration is true, then the variable\n// is writeable. Otherwise, it is read-only.\n\n// We build the application inside a function so that we produce only a single\n// global variable. That function will be invoked immediately, and its return\n// value is the JSLINT function itself. That function is also an object that\n// can contain data and other functions.\n\nvar JSLINT = (function () {\n    'use strict';\n\n    function array_to_object(array, value) {\n\n// Make an object from an array of keys and a common value.\n\n        var i, length = array.length, object = Object.create(null);\n        for (i = 0; i < length; i += 1) {\n            object[array[i]] = value;\n        }\n        return object;\n    }\n\n\n    var allowed_option = {\n            ass       : true,\n            bitwise   : true,\n            browser   : true,\n            closure   : true,\n            continue  : true,\n            couch     : true,\n            debug     : true,\n            devel     : true,\n            eqeq      : true,\n            evil      : true,\n            forin     : true,\n            indent    :   10,\n            maxerr    : 1000,\n            maxlen    :  256,\n            newcap    : true,\n            node      : true,\n            nomen     : true,\n            passfail  : true,\n            plusplus  : true,\n            properties: true,\n            regexp    : true,\n            rhino     : true,\n            unparam   : true,\n            sloppy    : true,\n            stupid    : true,\n            sub       : true,\n            todo      : true,\n            vars      : true,\n            white     : true\n        },\n        anonname,       // The guessed name for anonymous functions.\n\n// These are operators that should not be used with the ! operator.\n\n        bang = {\n            '<'  : true,\n            '<=' : true,\n            '==' : true,\n            '===': true,\n            '!==': true,\n            '!=' : true,\n            '>'  : true,\n            '>=' : true,\n            '+'  : true,\n            '-'  : true,\n            '*'  : true,\n            '/'  : true,\n            '%'  : true\n        },\n        begin,          // The root token\n        block_var,     // vars defined in the current block\n\n// browser contains a set of global names that are commonly provided by a\n// web browser environment.\n\n        browser = array_to_object([\n            'clearInterval', 'clearTimeout', 'document', 'event', 'FormData',\n            'frames', 'history', 'Image', 'localStorage', 'location', 'name',\n            'navigator', 'Option', 'parent', 'screen', 'sessionStorage',\n            'setInterval', 'setTimeout', 'Storage', 'window', 'XMLHttpRequest'\n        ], false),\n\n// bundle contains the text messages.\n\n        bundle = {\n            a_label: \"'{a}' is a statement label.\",\n            a_scope: \"'{a}' used out of scope.\",\n            already_defined: \"'{a}' is already defined.\",\n            and: \"The '&&' subexpression should be wrapped in parens.\",\n            assignment_expression: \"Unexpected assignment expression.\",\n            assignment_function_expression: \"Expected an assignment or \" +\n                \"function call and instead saw an expression.\",\n            avoid_a: \"Avoid '{a}'.\",\n            bad_assignment: \"Bad assignment.\",\n            bad_constructor: \"Bad constructor.\",\n            bad_in_a: \"Bad for in variable '{a}'.\",\n            bad_invocation: \"Bad invocation.\",\n            bad_new: \"Do not use 'new' for side effects.\",\n            bad_number: \"Bad number '{a}'.\",\n            bad_operand: \"Bad operand.\",\n            bad_wrap: \"Do not wrap function literals in parens unless they \" +\n                \"are to be immediately invoked.\",\n            combine_var: \"Combine this with the previous 'var' statement.\",\n            conditional_assignment: \"Expected a conditional expression and \" +\n                \"instead saw an assignment.\",\n            confusing_a: \"Confusing use of '{a}'.\",\n            confusing_regexp: \"Confusing regular expression.\",\n            constructor_name_a: \"A constructor name '{a}' should start with \" +\n                \"an uppercase letter.\",\n            control_a: \"Unexpected control character '{a}'.\",\n            dangling_a: \"Unexpected dangling '_' in '{a}'.\",\n            deleted: \"Only properties should be deleted.\",\n            duplicate_a: \"Duplicate '{a}'.\",\n            empty_block: \"Empty block.\",\n            empty_case: \"Empty case.\",\n            empty_class: \"Empty class.\",\n            evil: \"eval is evil.\",\n            expected_a_b: \"Expected '{a}' and instead saw '{b}'.\",\n            expected_a_b_from_c_d: \"Expected '{a}' to match '{b}' from line \" +\n                \"{c} and instead saw '{d}'.\",\n            expected_a_at_b_c: \"Expected '{a}' at column {b}, not column {c}.\",\n            expected_id_a: \"Expected an id, and instead saw #{a}.\",\n            expected_identifier_a: \"Expected an identifier and instead saw '{a}'.\",\n            expected_identifier_a_reserved: \"Expected an identifier and \" +\n                \"instead saw '{a}' (a reserved word).\",\n            expected_number_a: \"Expected a number and instead saw '{a}'.\",\n            expected_operator_a: \"Expected an operator and instead saw '{a}'.\",\n            expected_positive_a: \"Expected a positive number and instead saw '{a}'\",\n            expected_small_a: \"Expected a small positive integer and instead saw '{a}'\",\n            expected_space_a_b: \"Expected exactly one space between '{a}' and '{b}'.\",\n            expected_string_a: \"Expected a string and instead saw '{a}'.\",\n            for_if: \"The body of a for in should be wrapped in an if \" +\n                \"statement to filter unwanted properties from the prototype.\",\n            function_block: \"Function statements should not be placed in blocks.\" +\n                \"Use a function expression or move the statement to the top of \" +\n                \"the outer function.\",\n            function_eval: \"The Function constructor is eval.\",\n            function_loop: \"Don't make functions within a loop.\",\n            function_statement: \"Function statements are not invocable. \" +\n                \"Wrap the whole function invocation in parens.\",\n            function_strict: \"Use the function form of 'use strict'.\",\n            identifier_function: \"Expected an identifier in an assignment \" +\n                \"and instead saw a function invocation.\",\n            implied_evil: \"Implied eval is evil. Pass a function instead of a string.\",\n            infix_in: \"Unexpected 'in'. Compare with undefined, or use the \" +\n                \"hasOwnProperty method instead.\",\n            insecure_a: \"Insecure '{a}'.\",\n            isNaN: \"Use the isNaN function to compare with NaN.\",\n            leading_decimal_a: \"A leading decimal point can be confused with a dot: '.{a}'.\",\n            missing_a: \"Missing '{a}'.\",\n            missing_a_after_b: \"Missing '{a}' after '{b}'.\",\n            missing_property: \"Missing property name.\",\n            missing_space_a_b: \"Missing space between '{a}' and '{b}'.\",\n            missing_use_strict: \"Missing 'use strict' statement.\",\n            move_invocation: \"Move the invocation into the parens that \" +\n                \"contain the function.\",\n            move_var: \"Move 'var' declarations to the top of the function.\",\n            name_function: \"Missing name in function statement.\",\n            nested_comment: \"Nested comment.\",\n            not: \"Nested not.\",\n            not_a_constructor: \"Do not use {a} as a constructor.\",\n            not_a_defined: \"'{a}' has not been fully defined yet.\",\n            not_a_function: \"'{a}' is not a function.\",\n            not_a_label: \"'{a}' is not a label.\",\n            not_a_scope: \"'{a}' is out of scope.\",\n            not_greater: \"'{a}' should not be greater than '{b}'.\",\n            octal_a: \"Don't use octal: '{a}'. Use '\\\\u....' instead.\",\n            parameter_arguments_a: \"Do not mutate parameter '{a}' when using 'arguments'.\",\n            parameter_a_get_b: \"Unexpected parameter '{a}' in get {b} function.\",\n            parameter_set_a: \"Expected parameter (value) in set {a} function.\",\n            radix: \"Missing radix parameter.\",\n            read_only: \"Read only.\",\n            redefinition_a_b: \"Redefinition of '{a}' from line {b}.\",\n            reserved_a: \"Reserved name '{a}'.\",\n            scanned_a_b: \"{a} ({b}% scanned).\",\n            slash_equal: \"A regular expression literal can be confused with '/='.\",\n            statement_block: \"Expected to see a statement and instead saw a block.\",\n            stopping: \"Stopping.\",\n            strange_loop: \"Strange loop.\",\n            strict: \"Strict violation.\",\n            subscript: \"['{a}'] is better written in dot notation.\",\n            sync_a: \"Unexpected sync method: '{a}'.\",\n            tag_a_in_b: \"A '<{a}>' must be within '<{b}>'.\",\n            todo_comment: \"Unexpected TODO comment.\",\n            too_long: \"Line too long.\",\n            too_many: \"Too many errors.\",\n            trailing_decimal_a: \"A trailing decimal point can be confused \" +\n                \"with a dot: '.{a}'.\",\n            unclosed: \"Unclosed string.\",\n            unclosed_comment: \"Unclosed comment.\",\n            unclosed_regexp: \"Unclosed regular expression.\",\n            unescaped_a: \"Unescaped '{a}'.\",\n            unexpected_a: \"Unexpected '{a}'.\",\n            unexpected_char_a: \"Unexpected character '{a}'.\",\n            unexpected_comment: \"Unexpected comment.\",\n            unexpected_label_a: \"Unexpected label '{a}'.\",\n            unexpected_property_a: \"Unexpected /*property*/ '{a}'.\",\n            unexpected_space_a_b: \"Unexpected space between '{a}' and '{b}'.\",\n            unexpected_typeof_a: \"Unexpected 'typeof'. \" +\n                \"Use '===' to compare directly with {a}.\",\n            uninitialized_a: \"Uninitialized '{a}'.\",\n            unnecessary_else: \"Unnecessary 'else' after disruption.\",\n            unnecessary_initialize: \"It is not necessary to initialize '{a}' \" +\n                \"to 'undefined'.\",\n            unnecessary_use: \"Unnecessary 'use strict'.\",\n            unreachable_a_b: \"Unreachable '{a}' after '{b}'.\",\n            unsafe: \"Unsafe character.\",\n            unused_a: \"Unused '{a}'.\",\n            url: \"JavaScript URL.\",\n            use_array: \"Use the array literal notation [].\",\n            use_braces: \"Spaces are hard to count. Use {{a}}.\",\n            use_nested_if: \"Expected 'else { if' and instead saw 'else if'.\",\n            use_object: \"Use the object literal notation {} or Object.create(null).\",\n            use_or: \"Use the || operator.\",\n            use_param: \"Use a named parameter.\",\n            use_spaces: \"Use spaces, not tabs.\",\n            used_before_a: \"'{a}' was used before it was defined.\",\n            var_a_not: \"Variable {a} was not declared correctly.\",\n            var_loop: \"Don't declare variables in a loop.\",\n            weird_assignment: \"Weird assignment.\",\n            weird_condition: \"Weird condition.\",\n            weird_new: \"Weird construction. Delete 'new'.\",\n            weird_program: \"Weird program.\",\n            weird_relation: \"Weird relation.\",\n            weird_ternary: \"Weird ternary.\",\n            wrap_immediate: \"Wrap an immediate function invocation in \" +\n                \"parentheses to assist the reader in understanding that the \" +\n                \"expression is the result of a function, and not the \" +\n                \"function itself.\",\n            wrap_regexp: \"Wrap the /regexp/ literal in parens to \" +\n                \"disambiguate the slash operator.\",\n            write_is_wrong: \"document.write can be a form of eval.\"\n        },\n        closure = array_to_object([\n            'goog'\n        ], false),\n        comments,\n        comments_off,\n        couch = array_to_object([\n            'emit', 'getRow', 'isArray', 'log', 'provides', 'registerType',\n            'require', 'send', 'start', 'sum', 'toJSON'\n        ], false),\n\n        descapes = {\n            'b': '\\b',\n            't': '\\t',\n            'n': '\\n',\n            'f': '\\f',\n            'r': '\\r',\n            '\"': '\"',\n            '/': '/',\n            '\\\\': '\\\\',\n            '!': '!'\n        },\n\n        devel = array_to_object([\n            'alert', 'confirm', 'console', 'Debug', 'opera', 'prompt', 'WSH'\n        ], false),\n        directive,\n        escapes = {\n            '\\b': '\\\\b',\n            '\\t': '\\\\t',\n            '\\n': '\\\\n',\n            '\\f': '\\\\f',\n            '\\r': '\\\\r',\n            '\\'': '\\\\\\'',\n            '\"' : '\\\\\"',\n            '/' : '\\\\/',\n            '\\\\': '\\\\\\\\'\n        },\n\n        funct,          // The current function\n\n        functions,      // All of the functions\n        global_funct,   // The global body\n        global_scope,   // The global scope\n        in_block,       // Where function statements are not allowed\n        indent,\n        itself,         // JSLINT itself\n        json_mode,\n        lex,            // the tokenizer\n        lines,\n        lookahead,\n        node = array_to_object([\n            'Buffer', 'clearImmediate', 'clearInterval', 'clearTimeout',\n            'console', 'exports', 'global', 'module', 'process',\n            'require', 'setImmediate', 'setInterval', 'setTimeout',\n            '__dirname', '__filename'\n        ], false),\n        node_js,\n        numbery = array_to_object(['indexOf', 'lastIndexOf', 'search'], true),\n        next_token,\n        option,\n        predefined,     // Global variables defined by option\n        prereg,\n        prev_token,\n        property,\n        protosymbol,\n        regexp_flag = array_to_object(['g', 'i', 'm'], true),\n        return_this = function return_this() {\n            return this;\n        },\n        rhino = array_to_object([\n            'defineClass', 'deserialize', 'gc', 'help', 'load', 'loadClass',\n            'print', 'quit', 'readFile', 'readUrl', 'runCommand', 'seal',\n            'serialize', 'spawn', 'sync', 'toint32', 'version'\n        ], false),\n\n        scope,      // An object containing an object for each variable in scope\n        semicolon_coda = array_to_object([';', '\"', '\\'', ')'], true),\n\n// standard contains the global names that are provided by the\n// ECMAScript standard.\n\n        standard = array_to_object([\n            'Array', 'Boolean', 'Date', 'decodeURI', 'decodeURIComponent',\n            'encodeURI', 'encodeURIComponent', 'Error', 'eval', 'EvalError',\n            'Function', 'isFinite', 'isNaN', 'JSON', 'Map', 'Math', 'Number',\n            'Object', 'parseInt', 'parseFloat', 'Promise', 'Proxy',\n            'RangeError', 'ReferenceError', 'Reflect', 'RegExp', 'Set',\n            'String', 'Symbol', 'SyntaxError', 'System', 'TypeError',\n            'URIError', 'WeakMap', 'WeakSet'\n        ], false),\n\n        strict_mode,\n        syntax = Object.create(null),\n        token,\n        tokens,\n        var_mode,\n        warnings,\n\n// Regular expressions. Some of these are stupidly long.\n\n// carriage return, carriage return linefeed, or linefeed\n        crlfx = /\\r\\n?|\\n/,\n// unsafe characters that are silently deleted by one or more browsers\n        cx = /[\\u0000-\\u0008\\u000a-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/,\n// identifier\n        ix = /^([a-zA-Z_$][a-zA-Z0-9_$]*)$/,\n// javascript url\n        jx = /^(?:javascript|jscript|ecmascript|vbscript)\\s*:/i,\n// star slash\n        lx = /\\*\\/|\\/\\*/,\n// characters in strings that need escapement\n        nx = /[\\u0000-\\u001f'\\\\\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n// sync\n        syx = /Sync$/,\n// comment todo\n        tox = /^\\W*to\\s*do(?:\\W|$)/i,\n// token\n        tx = /^\\s*([(){}\\[\\]\\?.,:;'\"~#@`]|={1,3}|\\/(\\*(jslint|properties|property|members?|globals?)?|=|\\/)?|\\*[\\/=]?|\\+(?:=|\\++)?|-(?:=|-+)?|[\\^%]=?|&[&=]?|\\|[|=]?|>{1,3}=?|<(?:[\\/=!]|\\!(\\[|--)?|<=?)?|\\!(\\!|==?)?|[a-zA-Z_$][a-zA-Z0-9_$]*|[0-9]+(?:[xX][0-9a-fA-F]+|\\.[0-9]*)?(?:[eE][+\\-]?[0-9]+)?)/;\n\n\n    if (typeof String.prototype.entityify !== 'function') {\n        String.prototype.entityify = function () {\n            return this\n                .replace(/&/g, '&amp;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;');\n        };\n    }\n\n    if (typeof String.prototype.isAlpha !== 'function') {\n        String.prototype.isAlpha = function () {\n            return (this >= 'a' && this <= 'z\\uffff') ||\n                (this >= 'A' && this <= 'Z\\uffff');\n        };\n    }\n\n    if (typeof String.prototype.isDigit !== 'function') {\n        String.prototype.isDigit = function () {\n            return (this >= '0' && this <= '9');\n        };\n    }\n\n    if (typeof String.prototype.supplant !== 'function') {\n        String.prototype.supplant = function (o) {\n            return this.replace(/\\{([^{}]*)\\}/g, function (a, b) {\n                var replacement = o[b];\n                return typeof replacement === 'string' ||\n                    typeof replacement === 'number' ? replacement : a;\n            });\n        };\n    }\n\n\n    function sanitize(a) {\n\n//  Escapify a troublesome character.\n\n        return escapes[a] ||\n            '\\\\u' + ('0000' + a.charCodeAt().toString(16)).slice(-4);\n    }\n\n\n    function add_to_predefined(group) {\n        Object.keys(group).forEach(function (name) {\n            predefined[name] = group[name];\n        });\n    }\n\n\n    function assume() {\n        if (option.browser) {\n            add_to_predefined(browser);\n            option.browser = false;\n        }\n        if (option.closure) {\n            add_to_predefined(closure);\n        }\n        if (option.couch) {\n            add_to_predefined(couch);\n            option.couch = false;\n        }\n        if (option.devel) {\n            add_to_predefined(devel);\n            option.devel = false;\n        }\n        if (option.node) {\n            add_to_predefined(node);\n            option.node = false;\n            node_js = true;\n        }\n        if (option.rhino) {\n            add_to_predefined(rhino);\n            option.rhino = false;\n        }\n    }\n\n\n// Produce an error warning.\n\n    function artifact(tok) {\n        if (!tok) {\n            tok = next_token;\n        }\n        return tok.id === '(number)' ? tok.number : tok.string;\n    }\n\n    function quit(message, line, character) {\n        throw {\n            name: 'JSLintError',\n            line: line,\n            character: character,\n            message: bundle.scanned_a_b.supplant({\n                a: bundle[message] || message,\n                b: Math.floor((line / lines.length) * 100)\n            })\n        };\n    }\n\n    function warn(code, line, character, a, b, c, d) {\n        var warning = {         // ~~\n            id: '(error)',\n            raw: bundle[code] || code,\n            code: code,\n            evidence: lines[line - 1] || '',\n            line: line,\n            character: character,\n            a: a || artifact(this),\n            b: b,\n            c: c,\n            d: d\n        };\n        warning.reason = warning.raw.supplant(warning);\n        itself.errors.push(warning);\n        if (option.passfail) {\n            quit('stopping', line, character);\n        }\n        warnings += 1;\n        if (warnings >= option.maxerr) {\n            quit('too_many', line, character);\n        }\n        return warning;\n    }\n\n    function stop(code, line, character, a, b, c, d) {\n        var warning = warn(code, line, character, a, b, c, d);\n        quit('stopping', warning.line, warning.character);\n    }\n\n    function expected_at(at) {\n        if (!option.white && next_token.from !== at) {\n            next_token.warn('expected_a_at_b_c', '', at, next_token.from);\n        }\n    }\n\n// lexical analysis and token construction\n\n    lex = (function lex() {\n        var character, c, from, length, line, pos, source_row;\n\n// Private lex methods\n\n        function next_line() {\n            var at;\n            character = 1;\n            source_row = lines[line];\n            line += 1;\n            if (source_row === undefined) {\n                return false;\n            }\n            at = source_row.search(/\\t/);\n            if (at >= 0) {\n                if (option.white) {\n                    source_row = source_row.replace(/\\t/g, ' ');\n                } else {\n                    warn('use_spaces', line, at + 1);\n                }\n            }\n            at = source_row.search(cx);\n            if (at >= 0) {\n                warn('unsafe', line, at);\n            }\n            if (option.maxlen && option.maxlen < source_row.length) {\n                warn('too_long', line, source_row.length);\n            }\n            return true;\n        }\n\n// Produce a token object.  The token inherits from a syntax symbol.\n\n        function it(type, value) {\n            var id, the_token;\n            if (type === '(string)') {\n                if (jx.test(value)) {\n                    warn('url', line, from);\n                }\n            }\n            the_token = Object.create(syntax[(\n                type === '(punctuator)' || (type === '(identifier)' &&\n                        Object.prototype.hasOwnProperty.call(syntax, value))\n                    ? value\n                    : type\n            )] || syntax['(error)']);\n            if (type === '(identifier)') {\n                the_token.identifier = true;\n                if (value === '__iterator__' || value === '__proto__') {\n                    stop('reserved_a', line, from, value);\n                } else if (!option.nomen &&\n                        (value.charAt(0) === '_' ||\n                        value.charAt(value.length - 1) === '_')) {\n                    warn('dangling_a', line, from, value);\n                }\n            }\n            if (type === '(number)') {\n                the_token.number = +value;\n            } else if (value !== undefined) {\n                the_token.string = String(value);\n            }\n            the_token.line = line;\n            the_token.from = from;\n            the_token.thru = character;\n            if (comments.length) {\n                the_token.comments = comments;\n                comments = [];\n            }\n            id = the_token.id;\n            prereg = id && (\n                ('(,=:[!&|?{};~+-*%^<>'.indexOf(id.charAt(id.length - 1)) >= 0) ||\n                id === 'return' || id === 'case'\n            );\n            return the_token;\n        }\n\n        function match(x) {\n            var exec = x.exec(source_row), first;\n            if (exec) {\n                length = exec[0].length;\n                first = exec[1];\n                c = first.charAt(0);\n                source_row = source_row.slice(length);\n                from = character + length - first.length;\n                character += length;\n                return first;\n            }\n            for (;;) {\n                if (!source_row) {\n                    if (!option.white) {\n                        warn('unexpected_char_a', line, character - 1, '(space)');\n                    }\n                    return;\n                }\n                c = source_row.charAt(0);\n                if (c !== ' ') {\n                    break;\n                }\n                source_row = source_row.slice(1);\n                character += 1;\n            }\n            stop('unexpected_char_a', line, character, c);\n\n        }\n\n        function string(x) {\n            var ch, at = 0, r = '', result;\n\n            function hex(n) {\n                var i = parseInt(source_row.substr(at + 1, n), 16);\n                at += n;\n                if (i >= 32 && i <= 126 &&\n                        i !== 34 && i !== 92 && i !== 39) {\n                    warn('unexpected_a', line, character, '\\\\');\n                }\n                character += n;\n                ch = String.fromCharCode(i);\n            }\n\n            if (json_mode && x !== '\"') {\n                warn('expected_a_b', line, character, '\"', x);\n            }\n\n            for (;;) {\n                while (at >= source_row.length) {\n                    at = 0;\n                    if (!next_line()) {\n                        stop('unclosed', line - 1, from);\n                    }\n                }\n                ch = source_row.charAt(at);\n                if (ch === x) {\n                    character += 1;\n                    source_row = source_row.slice(at + 1);\n                    result = it('(string)', r);\n                    result.quote = x;\n                    return result;\n                }\n                if (ch < ' ') {\n                    if (ch === '\\n' || ch === '\\r') {\n                        break;\n                    }\n                    warn('control_a', line, character + at,\n                        source_row.slice(0, at));\n                } else if (ch === '\\\\') {\n                    at += 1;\n                    character += 1;\n                    ch = source_row.charAt(at);\n                    switch (ch) {\n                    case '':\n                        warn('unexpected_a', line, character, '\\\\');\n                        next_line();\n                        at = -1;\n                        break;\n                    case '\\'':\n                        if (json_mode) {\n                            warn('unexpected_a', line, character, '\\\\\\'');\n                        }\n                        break;\n                    case 'u':\n                        hex(4);\n                        break;\n                    case 'v':\n                        if (json_mode) {\n                            warn('unexpected_a', line, character, '\\\\v');\n                        }\n                        ch = '\\v';\n                        break;\n                    case 'x':\n                        if (json_mode) {\n                            warn('unexpected_a', line, character, '\\\\x');\n                        }\n                        hex(2);\n                        break;\n                    default:\n                        if (typeof descapes[ch] !== 'string') {\n                            warn(ch >= '0' && ch <= '7' ? 'octal_a' : 'unexpected_a',\n                                line, character, '\\\\' + ch);\n                        } else {\n                            ch = descapes[ch];\n                        }\n                    }\n                }\n                r += ch;\n                character += 1;\n                at += 1;\n            }\n        }\n\n        function number(snippet) {\n            var digit;\n            if (source_row.charAt(0).isAlpha()) {\n                warn('expected_space_a_b',\n                    line, character, c, source_row.charAt(0));\n            }\n            if (c === '0') {\n                digit = snippet.charAt(1);\n                if (digit.isDigit()) {\n                    if (token.id !== '.') {\n                        warn('unexpected_a', line, character, snippet);\n                    }\n                } else if (json_mode && (digit === 'x' || digit === 'X')) {\n                    warn('unexpected_a', line, character, '0x');\n                }\n            }\n            if (snippet.slice(snippet.length - 1) === '.') {\n                warn('trailing_decimal_a', line, character, snippet);\n            }\n            digit = +snippet;\n            if (!isFinite(digit)) {\n                warn('bad_number', line, character, snippet);\n            }\n            snippet = digit;\n            return it('(number)', snippet);\n        }\n\n        function comment(snippet, type) {\n            if (comments_off) {\n                warn('unexpected_comment', line, character);\n            } else if (!option.todo && tox.test(snippet)) {\n                warn('todo_comment', line, character);\n            }\n            comments.push({\n                id: type,\n                from: from,\n                thru: character,\n                line: line,\n                string: snippet\n            });\n        }\n\n        function regexp() {\n            var at = 0,\n                b,\n                bit,\n                depth = 0,\n                flag = '',\n                high,\n                letter,\n                low,\n                potential,\n                quote,\n                result;\n            for (;;) {\n                b = true;\n                c = source_row.charAt(at);\n                at += 1;\n                switch (c) {\n                case '':\n                    stop('unclosed_regexp', line, from);\n                    return;\n                case '/':\n                    if (depth > 0) {\n                        warn('unescaped_a', line, from + at, '/');\n                    }\n                    c = source_row.slice(0, at - 1);\n                    potential = Object.create(regexp_flag);\n                    for (;;) {\n                        letter = source_row.charAt(at);\n                        if (potential[letter] !== true) {\n                            break;\n                        }\n                        potential[letter] = false;\n                        at += 1;\n                        flag += letter;\n                    }\n                    if (source_row.charAt(at).isAlpha()) {\n                        stop('unexpected_a', line, from, source_row.charAt(at));\n                    }\n                    character += at;\n                    source_row = source_row.slice(at);\n                    quote = source_row.charAt(0);\n                    if (quote === '/' || quote === '*') {\n                        stop('confusing_regexp', line, from);\n                    }\n                    result = it('(regexp)', c);\n                    result.flag = flag;\n                    return result;\n                case '\\\\':\n                    c = source_row.charAt(at);\n                    if (c < ' ') {\n                        warn('control_a', line, from + at, String(c));\n                    } else if (c === '<') {\n                        warn('unexpected_a', line, from + at, '\\\\');\n                    }\n                    at += 1;\n                    break;\n                case '(':\n                    depth += 1;\n                    b = false;\n                    if (source_row.charAt(at) === '?') {\n                        at += 1;\n                        switch (source_row.charAt(at)) {\n                        case ':':\n                        case '=':\n                        case '!':\n                            at += 1;\n                            break;\n                        default:\n                            warn('expected_a_b', line, from + at,\n                                ':', source_row.charAt(at));\n                        }\n                    }\n                    break;\n                case '|':\n                    b = false;\n                    break;\n                case ')':\n                    if (depth === 0) {\n                        warn('unescaped_a', line, from + at, ')');\n                    } else {\n                        depth -= 1;\n                    }\n                    break;\n                case ' ':\n                    pos = 1;\n                    while (source_row.charAt(at) === ' ') {\n                        at += 1;\n                        pos += 1;\n                    }\n                    if (pos > 1) {\n                        warn('use_braces', line, from + at, pos);\n                    }\n                    break;\n                case '[':\n                    c = source_row.charAt(at);\n                    if (c === '^') {\n                        at += 1;\n                        if (!option.regexp) {\n                            warn('insecure_a', line, from + at, c);\n                        } else if (source_row.charAt(at) === ']') {\n                            stop('unescaped_a', line, from + at, '^');\n                        }\n                    }\n                    bit = false;\n                    if (c === ']') {\n                        warn('empty_class', line, from + at - 1);\n                        bit = true;\n                    }\nklass:              do {\n                        c = source_row.charAt(at);\n                        at += 1;\n                        switch (c) {\n                        case '[':\n                        case '^':\n                            warn('unescaped_a', line, from + at, c);\n                            bit = true;\n                            break;\n                        case '-':\n                            if (bit) {\n                                bit = false;\n                            } else {\n                                warn('unescaped_a', line, from + at, '-');\n                                bit = true;\n                            }\n                            break;\n                        case ']':\n                            if (!bit) {\n                                warn('unescaped_a', line, from + at - 1, '-');\n                            }\n                            break klass;\n                        case '\\\\':\n                            c = source_row.charAt(at);\n                            if (c < ' ') {\n                                warn('control_a', line, from + at, String(c));\n                            } else if (c === '<') {\n                                warn('unexpected_a', line, from + at, '\\\\');\n                            }\n                            at += 1;\n                            bit = true;\n                            break;\n                        case '/':\n                            warn('unescaped_a', line, from + at - 1, '/');\n                            bit = true;\n                            break;\n                        default:\n                            bit = true;\n                        }\n                    } while (c);\n                    break;\n                case '.':\n                    if (!option.regexp) {\n                        warn('insecure_a', line, from + at, c);\n                    }\n                    break;\n                case ']':\n                case '?':\n                case '{':\n                case '}':\n                case '+':\n                case '*':\n                    warn('unescaped_a', line, from + at, c);\n                    break;\n                }\n                if (b) {\n                    switch (source_row.charAt(at)) {\n                    case '?':\n                    case '+':\n                    case '*':\n                        at += 1;\n                        if (source_row.charAt(at) === '?') {\n                            at += 1;\n                        }\n                        break;\n                    case '{':\n                        at += 1;\n                        c = source_row.charAt(at);\n                        if (c < '0' || c > '9') {\n                            warn('expected_number_a', line,\n                                from + at, c);\n                        }\n                        at += 1;\n                        low = +c;\n                        for (;;) {\n                            c = source_row.charAt(at);\n                            if (c < '0' || c > '9') {\n                                break;\n                            }\n                            at += 1;\n                            low = +c + (low * 10);\n                        }\n                        high = low;\n                        if (c === ',') {\n                            at += 1;\n                            high = Infinity;\n                            c = source_row.charAt(at);\n                            if (c >= '0' && c <= '9') {\n                                at += 1;\n                                high = +c;\n                                for (;;) {\n                                    c = source_row.charAt(at);\n                                    if (c < '0' || c > '9') {\n                                        break;\n                                    }\n                                    at += 1;\n                                    high = +c + (high * 10);\n                                }\n                            }\n                        }\n                        if (source_row.charAt(at) !== '}') {\n                            warn('expected_a_b', line, from + at,\n                                '}', c);\n                        } else {\n                            at += 1;\n                        }\n                        if (source_row.charAt(at) === '?') {\n                            at += 1;\n                        }\n                        if (low > high) {\n                            warn('not_greater', line, from + at,\n                                low, high);\n                        }\n                        break;\n                    }\n                }\n            }\n            c = source_row.slice(0, at - 1);\n            character += at;\n            source_row = source_row.slice(at);\n            return it('(regexp)', c);\n        }\n\n// Public lex methods\n\n        return {\n            init: function (source) {\n                if (typeof source === 'string') {\n                    lines = source.split(crlfx);\n                } else {\n                    lines = source;\n                }\n                line = 0;\n                next_line();\n                from = 1;\n            },\n\n// token -- this is called by advance to get the next token.\n\n            token: function () {\n                var first, i, snippet;\n\n                for (;;) {\n                    while (!source_row) {\n                        if (!next_line()) {\n                            return it('(end)');\n                        }\n                    }\n                    snippet = match(tx);\n                    if (snippet) {\n\n//      identifier\n\n                        first = snippet.charAt(0);\n                        if (first.isAlpha() || first === '_' || first === '$') {\n                            return it('(identifier)', snippet);\n                        }\n\n//      number\n\n                        if (first.isDigit()) {\n                            return number(snippet);\n                        }\n                        switch (snippet) {\n\n//      string\n\n                        case '\"':\n                        case \"'\":\n                            return string(snippet);\n\n//      // comment\n\n                        case '//':\n                            comment(source_row, '//');\n                            source_row = '';\n                            break;\n\n//      /* comment\n\n                        case '/*':\n                            for (;;) {\n                                i = source_row.search(lx);\n                                if (i >= 0) {\n                                    break;\n                                }\n                                character = source_row.length;\n                                comment(source_row);\n                                from = 0;\n                                if (!next_line()) {\n                                    stop('unclosed_comment', line, character);\n                                }\n                            }\n                            comment(source_row.slice(0, i), '/*');\n                            character += i + 2;\n                            if (source_row.charAt(i) === '/') {\n                                stop('nested_comment', line, character);\n                            }\n                            source_row = source_row.slice(i + 2);\n                            break;\n\n                        case '':\n                            break;\n//      /\n                        case '/':\n                            if (token.id === '/=') {\n                                stop('slash_equal', line, from);\n                            }\n                            return prereg\n                                ? regexp()\n                                : it('(punctuator)', snippet);\n\n//      punctuator\n                        default:\n                            return it('(punctuator)', snippet);\n                        }\n                    }\n                }\n            }\n        };\n    }());\n\n    function define(kind, token) {\n\n// Define a name.\n\n        var name = token.string,\n            master = scope[name];       // The current definition of the name\n\n// vars are created with a deadzone, so that the expression that initializes\n// the var cannot access the var. Functions are not writeable.\n\n        token.dead = false;\n        token.init = false;\n        token.kind = kind;\n        token.master = master;\n        token.used = 0;\n        token.writeable = true;\n\n// Global variables are a little weird. They can be defined multiple times.\n// Some predefined global vars are (or should) not be writeable.\n\n        if (kind === 'var' && funct === global_funct) {\n            if (!master) {\n                if (predefined[name] === false) {\n                    token.writeable = false;\n                }\n                global_scope[name] = token;\n            }\n        } else {\n\n// It is an error if the name has already been defined in this scope, except\n// when reusing an exception variable name.\n\n            if (master) {\n                if (master.function === funct) {\n                    if (master.kind !== 'exception' || kind !== 'exception' ||\n                            !master.dead) {\n                        token.warn('already_defined', name);\n                    }\n                } else if (master.function !== global_funct) {\n                    if (kind === 'var') {\n                        token.warn('redefinition_a_b', name, master.line);\n                    }\n                }\n            }\n            scope[name] = token;\n            if (kind === 'var') {\n                block_var.push(name);\n            }\n        }\n    }\n\n    function peek(distance) {\n\n// Peek ahead to a future token. The distance is how far ahead to look. The\n// default is the next token.\n\n        var found, slot = 0;\n\n        distance = distance || 0;\n        while (slot <= distance) {\n            found = lookahead[slot];\n            if (!found) {\n                found = lookahead[slot] = lex.token();\n            }\n            slot += 1;\n        }\n        return found;\n    }\n\n\n    function advance(id, match) {\n\n// Produce the next token, also looking for programming errors.\n\n        if (indent) {\n\n// If indentation checking was requested, then inspect all of the line breakings.\n// The var statement is tricky because the names might be aligned or not. We\n// look at the first line break after the var to determine the programmer's\n// intention.\n\n            if (var_mode && next_token.line !== token.line) {\n                if ((var_mode !== indent || !next_token.edge) &&\n                        next_token.from === indent.at -\n                        (next_token.edge ? option.indent : 0)) {\n                    var dent = indent;\n                    for (;;) {\n                        dent.at -= option.indent;\n                        if (dent === var_mode) {\n                            break;\n                        }\n                        dent = dent.was;\n                    }\n                    dent.open = false;\n                }\n                var_mode = null;\n            }\n            if (next_token.id === '?' && indent.mode === ':' &&\n                    token.line !== next_token.line) {\n                indent.at -= option.indent;\n            }\n            if (indent.open) {\n\n// If the token is an edge.\n\n                if (next_token.edge) {\n                    if (next_token.edge === 'label') {\n                        expected_at(1);\n                    } else if (next_token.edge === 'case' || indent.mode === 'statement') {\n                        expected_at(indent.at - option.indent);\n                    } else if (indent.mode !== 'array' || next_token.line !== token.line) {\n                        expected_at(indent.at);\n                    }\n\n// If the token is not an edge, but is the first token on the line.\n\n                } else if (next_token.line !== token.line) {\n                    if (next_token.from < indent.at + (indent.mode ===\n                            'expression' ? 0 : option.indent)) {\n                        expected_at(indent.at + option.indent);\n                    }\n                    indent.wrap = true;\n                }\n            } else if (next_token.line !== token.line) {\n                if (next_token.edge) {\n                    expected_at(indent.at);\n                } else {\n                    indent.wrap = true;\n                    if (indent.mode === 'statement' || indent.mode === 'var') {\n                        expected_at(indent.at + option.indent);\n                    } else if (next_token.from < indent.at + (indent.mode ===\n                            'expression' ? 0 : option.indent)) {\n                        expected_at(indent.at + option.indent);\n                    }\n                }\n            }\n        }\n\n        switch (token.id) {\n        case '(number)':\n            if (next_token.id === '.') {\n                next_token.warn('trailing_decimal_a');\n            }\n            break;\n        case '-':\n            if (next_token.id === '-' || next_token.id === '--') {\n                next_token.warn('confusing_a');\n            }\n            break;\n        case '+':\n            if (next_token.id === '+' || next_token.id === '++') {\n                next_token.warn('confusing_a');\n            }\n            break;\n        }\n        if (token.id === '(string)' || token.identifier) {\n            anonname = token.string;\n        }\n\n        if (id && next_token.id !== id) {\n            if (match) {\n                next_token.warn('expected_a_b_from_c_d', id,\n                    match.id, match.line, artifact());\n            } else if (!next_token.identifier || next_token.string !== id) {\n                next_token.warn('expected_a_b', id, artifact());\n            }\n        }\n        prev_token = token;\n        token = next_token;\n        next_token = lookahead.shift() || lex.token();\n        next_token.function = funct;\n        tokens.push(next_token);\n    }\n\n\n    function do_globals() {\n        var name, writeable;\n        for (;;) {\n            if (next_token.id !== '(string)' && !next_token.identifier) {\n                return;\n            }\n            name = next_token.string;\n            advance();\n            writeable = false;\n            if (next_token.id === ':') {\n                advance(':');\n                switch (next_token.id) {\n                case 'true':\n                    writeable = predefined[name] !== false;\n                    advance('true');\n                    break;\n                case 'false':\n                    advance('false');\n                    break;\n                default:\n                    next_token.stop('unexpected_a');\n                }\n            }\n            predefined[name] = writeable;\n            if (next_token.id !== ',') {\n                return;\n            }\n            advance(',');\n        }\n    }\n\n\n    function do_jslint() {\n        var name, value;\n        while (next_token.id === '(string)' || next_token.identifier) {\n            name = next_token.string;\n            if (!allowed_option[name]) {\n                next_token.stop('unexpected_a');\n            }\n            advance();\n            if (next_token.id !== ':') {\n                next_token.stop('expected_a_b', ':', artifact());\n            }\n            advance(':');\n            if (typeof allowed_option[name] === 'number') {\n                value = next_token.number;\n                if (value > allowed_option[name] || value <= 0 ||\n                        Math.floor(value) !== value) {\n                    next_token.stop('expected_small_a');\n                }\n                option[name] = value;\n            } else {\n                if (next_token.id === 'true') {\n                    option[name] = true;\n                } else if (next_token.id === 'false') {\n                    option[name] = false;\n                } else {\n                    next_token.stop('unexpected_a');\n                }\n            }\n            advance();\n            if (next_token.id === ',') {\n                advance(',');\n            }\n        }\n        assume();\n    }\n\n\n    function do_properties() {\n        var name;\n        option.properties = true;\n        for (;;) {\n            if (next_token.id !== '(string)' && !next_token.identifier) {\n                return;\n            }\n            name = next_token.string;\n            advance();\n            if (next_token.id === ':') {\n                for (;;) {\n                    advance();\n                    if (next_token.id !== '(string)' && !next_token.identifier) {\n                        break;\n                    }\n                }\n            }\n            property[name] = 0;\n            if (next_token.id !== ',') {\n                return;\n            }\n            advance(',');\n        }\n    }\n\n\n    directive = function directive() {\n        var command = this.id,\n            old_comments_off = comments_off,\n            old_indent = indent;\n        comments_off = true;\n        indent = null;\n        if (next_token.line === token.line && next_token.from === token.thru) {\n            next_token.warn('missing_space_a_b', artifact(token), artifact());\n        }\n        if (lookahead.length > 0) {\n            this.warn('unexpected_a');\n        }\n        switch (command) {\n        case '/*properties':\n        case '/*property':\n        case '/*members':\n        case '/*member':\n            do_properties();\n            break;\n        case '/*jslint':\n            do_jslint();\n            break;\n        case '/*globals':\n        case '/*global':\n            do_globals();\n            break;\n        default:\n            this.stop('unexpected_a');\n        }\n        comments_off = old_comments_off;\n        advance('*/');\n        indent = old_indent;\n    };\n\n\n// Indentation intention\n\n    function edge(mode) {\n        next_token.edge = indent ? indent.open && (mode || 'edge') : '';\n    }\n\n\n    function step_in(mode) {\n        var open;\n        if (typeof mode === 'number') {\n            indent = {\n                at: +mode,\n                open: true,\n                was: indent\n            };\n        } else if (!indent) {\n            indent = {\n                at: 1,\n                mode: 'statement',\n                open: true\n            };\n        } else if (mode === 'statement') {\n            indent = {\n                at: indent.at,\n                open: true,\n                was: indent\n            };\n        } else {\n            open = mode === 'var' || next_token.line !== token.line;\n            indent = {\n                at: (open || mode === 'control'\n                    ? indent.at + option.indent\n                    : indent.at) + (indent.wrap ? option.indent : 0),\n                mode: mode,\n                open: open,\n                was: indent\n            };\n            if (mode === 'var' && open) {\n                var_mode = indent;\n            }\n        }\n    }\n\n    function step_out(id, symbol) {\n        if (id) {\n            if (indent && indent.open) {\n                indent.at -= option.indent;\n                edge();\n            }\n            advance(id, symbol);\n        }\n        if (indent) {\n            indent = indent.was;\n        }\n    }\n\n// Functions for conformance of whitespace.\n\n    function one_space(left, right) {\n        left = left || token;\n        right = right || next_token;\n        if (right.id !== '(end)' && !option.white &&\n                (token.line !== right.line ||\n                token.thru + 1 !== right.from)) {\n            right.warn('expected_space_a_b', artifact(token), artifact(right));\n        }\n    }\n\n    function one_space_only(left, right) {\n        left = left || token;\n        right = right || next_token;\n        if (right.id !== '(end)' && (left.line !== right.line ||\n                (!option.white && left.thru + 1 !== right.from))) {\n            right.warn('expected_space_a_b', artifact(left), artifact(right));\n        }\n    }\n\n    function no_space(left, right) {\n        left = left || token;\n        right = right || next_token;\n        if ((!option.white) &&\n                left.thru !== right.from && left.line === right.line) {\n            right.warn('unexpected_space_a_b', artifact(left), artifact(right));\n        }\n    }\n\n    function no_space_only(left, right) {\n        left = left || token;\n        right = right || next_token;\n        if (right.id !== '(end)' && (left.line !== right.line ||\n                (!option.white && left.thru !== right.from))) {\n            right.warn('unexpected_space_a_b', artifact(left), artifact(right));\n        }\n    }\n\n    function spaces(left, right) {\n        if (!option.white) {\n            left = left || token;\n            right = right || next_token;\n            if (left.thru === right.from && left.line === right.line) {\n                right.warn('missing_space_a_b', artifact(left), artifact(right));\n            }\n        }\n    }\n\n    function comma() {\n        if (next_token.id !== ',') {\n            warn('expected_a_b', token.line, token.thru, ',', artifact());\n        } else {\n            if (!option.white) {\n                no_space_only();\n            }\n            advance(',');\n            spaces();\n        }\n    }\n\n\n    function semicolon() {\n        if (next_token.id !== ';') {\n            warn('expected_a_b', token.line, token.thru, ';', artifact());\n        } else {\n            if (!option.white) {\n                no_space_only();\n            }\n            advance(';');\n            if (semicolon_coda[next_token.id] !== true) {\n                spaces();\n            }\n        }\n    }\n\n    function use_strict() {\n        if (next_token.string === 'use strict') {\n            if (strict_mode) {\n                next_token.warn('unnecessary_use');\n            }\n            edge();\n            advance();\n            semicolon();\n            strict_mode = true;\n            return true;\n        }\n        return false;\n    }\n\n\n    function are_similar(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (Array.isArray(a)) {\n            if (Array.isArray(b) && a.length === b.length) {\n                var i;\n                for (i = 0; i < a.length; i += 1) {\n                    if (!are_similar(a[i], b[i])) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n        if (Array.isArray(b)) {\n            return false;\n        }\n        if (a.id === '(number)' && b.id === '(number)') {\n            return a.number === b.number;\n        }\n        if (a.arity === b.arity && a.string === b.string) {\n            switch (a.arity) {\n            case undefined:\n                return a.string === b.string;\n            case 'prefix':\n            case 'suffix':\n                return a.id === b.id && are_similar(a.first, b.first) &&\n                    a.id !== '{' && a.id !== '[';\n            case 'infix':\n                return are_similar(a.first, b.first) &&\n                    are_similar(a.second, b.second);\n            case 'ternary':\n                return are_similar(a.first, b.first) &&\n                    are_similar(a.second, b.second) &&\n                    are_similar(a.third, b.third);\n            case 'function':\n            case 'regexp':\n                return false;\n            default:\n                return true;\n            }\n        }\n        if (a.id === '.' && b.id === '[' && b.arity === 'infix') {\n            return a.second.string === b.second.string && b.second.id === '(string)';\n        }\n        if (a.id === '[' && a.arity === 'infix' && b.id === '.') {\n            return a.second.string === b.second.string && a.second.id === '(string)';\n        }\n        return false;\n    }\n\n\n// This is the heart of JSLINT, the Pratt parser. In addition to parsing, it\n// is looking for ad hoc lint patterns. We add .fud to Pratt's model, which is\n// like .nud except that it is only used on the first token of a statement.\n// Having .fud makes it much easier to define statement-oriented languages like\n// JavaScript. I retained Pratt's nomenclature.\n\n// .nud     Null denotation\n// .fud     First null denotation\n// .led     Left denotation\n//  lbp     Left binding power\n//  rbp     Right binding power\n\n// They are elements of the parsing method called Top Down Operator Precedence.\n\n    function expression(rbp, initial) {\n\n// rbp is the right binding power.\n// initial indicates that this is the first expression of a statement.\n\n        var left;\n        if (next_token.id === '(end)') {\n            token.stop('unexpected_a', next_token.id);\n        }\n        advance();\n        if (initial) {\n            anonname = 'anonymous';\n        }\n        if (initial === true && token.fud) {\n            left = token.fud();\n        } else {\n            if (token.nud) {\n                left = token.nud();\n            } else {\n                if (next_token.id === '(number)' && token.id === '.') {\n                    token.warn('leading_decimal_a', artifact());\n                    advance();\n                    return token;\n                }\n                token.stop('expected_identifier_a', artifact(token));\n            }\n            while (rbp < next_token.lbp) {\n                advance();\n                left = token.led(left);\n            }\n        }\n        if (left && left.assign && !initial) {\n            if (!option.ass) {\n                left.warn('assignment_expression');\n            }\n            if (left.id !== '=' && left.first.master) {\n                left.first.master.used = true;\n            }\n        }\n        return left;\n    }\n\n    protosymbol = {\n        nud: function () {\n            this.stop('unexpected_a');\n        },\n        led: function () {\n            this.stop('expected_operator_a');\n        },\n        warn: function (code, a, b, c, d) {\n            if (!this.warning) {\n                this.warning = warn(code, this.line || 0, this.from || 0,\n                    a || artifact(this), b, c, d);\n            }\n        },\n        stop: function (code, a, b, c, d) {\n            this.warning = undefined;\n            this.warn(code, a, b, c, d);\n            return quit('stopping', this.line, this.character);\n        },\n        lbp: 0\n    };\n\n// Functional constructors for making the symbols that will be inherited by\n// tokens.\n\n    function symbol(s, bp) {\n        var x = syntax[s];\n        if (!x) {\n            x = Object.create(protosymbol);\n            x.id = x.string = s;\n            x.lbp = bp || 0;\n            syntax[s] = x;\n        }\n        return x;\n    }\n\n    function postscript(x) {\n        x.postscript = true;\n        return x;\n    }\n\n    function ultimate(s) {\n        var x = symbol(s, 0);\n        x.from = 1;\n        x.thru = 1;\n        x.line = 0;\n        x.edge = 'edge';\n        x.string = s;\n        return postscript(x);\n    }\n\n    function reserve_name(x) {\n        var c = x.id.charAt(0);\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n            x.identifier = x.reserved = true;\n        }\n        return x;\n    }\n\n    function stmt(s, f) {\n        var x = symbol(s);\n        x.fud = f;\n        return reserve_name(x);\n    }\n\n    function disrupt_stmt(s, f) {\n        var x = stmt(s, f);\n        x.disrupt = true;\n    }\n\n    function labeled_stmt(s, f) {\n        var x = stmt(s, function labeled() {\n            var the_statement;\n            if (funct.breakage) {\n                funct.breakage.push(this);\n            } else {\n                funct.breakage = [this];\n            }\n            the_statement = f.apply(this);\n            if (funct.breakage.length > 1) {\n                funct.breakage.pop();\n            } else {\n                delete funct.breakage;\n            }\n            return the_statement;\n        });\n        x.labeled = true;\n    }\n\n    function prefix(s, f) {\n        var x = symbol(s, 150);\n        reserve_name(x);\n        x.nud = function () {\n            var that = this;\n            that.arity = 'prefix';\n            if (typeof f === 'function') {\n                that = f(that);\n                if (that.arity !== 'prefix') {\n                    return that;\n                }\n            } else {\n                if (s === 'typeof') {\n                    one_space();\n                } else {\n                    no_space_only();\n                }\n                that.first = expression(150);\n            }\n            switch (that.id) {\n            case '++':\n            case '--':\n                if (!option.plusplus) {\n                    that.warn('unexpected_a');\n                } else if ((!that.first.identifier || that.first.reserved) &&\n                        that.first.id !== '.' && that.first.id !== '[') {\n                    that.warn('bad_operand');\n                }\n                break;\n            default:\n                if (that.first.arity === 'prefix' ||\n                        that.first.arity === 'function') {\n                    that.warn('unexpected_a');\n                }\n            }\n            return that;\n        };\n        return x;\n    }\n\n\n    function type(s, t, nud) {\n        var x = symbol(s);\n        x.arity = t;\n        if (nud) {\n            x.nud = nud;\n        }\n        return x;\n    }\n\n\n    function reserve(s, f) {\n        var x = symbol(s);\n        x.identifier = x.reserved = true;\n        if (typeof f === 'function') {\n            x.nud = f;\n        }\n        return x;\n    }\n\n\n    function constant(name) {\n        var x = reserve(name);\n        x.string = name;\n        x.nud = return_this;\n        return x;\n    }\n\n\n    function reservevar(s, v) {\n        return reserve(s, function () {\n            if (typeof v === 'function') {\n                v(this);\n            }\n            return this;\n        });\n    }\n\n\n    function infix(s, p, f, w) {\n        var x = symbol(s, p);\n        reserve_name(x);\n        x.led = function (left) {\n            this.arity = 'infix';\n            if (!w) {\n                spaces(prev_token, token);\n                spaces();\n            }\n            if (!option.bitwise && this.bitwise) {\n                this.warn('unexpected_a');\n            }\n            if (typeof f === 'function') {\n                return f(left, this);\n            }\n            this.first = left;\n            this.second = expression(p);\n            return this;\n        };\n        return x;\n    }\n\n    function expected_relation(node, message) {\n        if (node.assign) {\n            node.warn(message || 'conditional_assignment');\n        }\n        return node;\n    }\n\n    function expected_condition(node, message) {\n        switch (node.id) {\n        case '[':\n        case '-':\n            if (node.arity !== 'infix') {\n                node.warn(message || 'weird_condition');\n            }\n            break;\n        case 'false':\n        case 'function':\n        case 'Infinity':\n        case 'NaN':\n        case 'null':\n        case 'true':\n        case 'undefined':\n        case 'void':\n        case '(number)':\n        case '(regexp)':\n        case '(string)':\n        case '{':\n        case '?':\n        case '~':\n            node.warn(message || 'weird_condition');\n            break;\n        case '(':\n            if (node.first.id === 'new' ||\n                    (node.first.string === 'Boolean') ||\n                    (node.first.id === '.' &&\n                        numbery[node.first.second.string] === true)) {\n                node.warn(message || 'weird_condition');\n            }\n            break;\n        }\n        return node;\n    }\n\n    function check_relation(node) {\n        switch (node.arity) {\n        case 'prefix':\n            switch (node.id) {\n            case '{':\n            case '[':\n                node.warn('unexpected_a');\n                break;\n            case '!':\n                node.warn('confusing_a');\n                break;\n            }\n            break;\n        case 'function':\n        case 'regexp':\n            node.warn('unexpected_a');\n            break;\n        default:\n            if (node.id  === 'NaN') {\n                node.warn('isNaN');\n            } else if (node.relation) {\n                node.warn('weird_relation');\n            }\n        }\n        return node;\n    }\n\n\n    function relation(s, eqeq) {\n        var x = infix(s, 100, function (left, that) {\n            check_relation(left);\n            if (eqeq && !option.eqeq) {\n                that.warn('expected_a_b', eqeq, that.id);\n            }\n            var right = expression(100);\n            if (are_similar(left, right) ||\n                    ((left.id === '(string)' || left.id === '(number)') &&\n                    (right.id === '(string)' || right.id === '(number)'))) {\n                that.warn('weird_relation');\n            } else if (left.id === 'typeof') {\n                if (right.id !== '(string)') {\n                    right.warn(\"expected_string_a\", artifact(right));\n                } else if (right.string === 'undefined' ||\n                        right.string === 'null') {\n                    left.warn(\"unexpected_typeof_a\", right.string);\n                }\n            } else if (right.id === 'typeof') {\n                if (left.id !== '(string)') {\n                    left.warn(\"expected_string_a\", artifact(left));\n                } else if (left.string === 'undefined' ||\n                        left.string === 'null') {\n                    right.warn(\"unexpected_typeof_a\", left.string);\n                }\n            }\n            that.first = left;\n            that.second = check_relation(right);\n            return that;\n        });\n        x.relation = true;\n        return x;\n    }\n\n    function lvalue(that, s) {\n        var master;\n        if (that.identifier) {\n            master = scope[that.string];\n            if (master) {\n                if (scope[that.string].writeable !== true) {\n                    that.warn('read_only');\n                }\n                master.used -= 1;\n                if (s === '=') {\n                    master.init = true;\n                }\n            } else if (that.reserved) {\n                that.warn('expected_identifier_a_reserved');\n            }\n        } else if (that.id === '.' || that.id === '[') {\n            if (!that.first || that.first.string === 'arguments') {\n                that.warn('bad_assignment');\n            }\n        } else {\n            that.warn('bad_assignment');\n        }\n    }\n\n\n    function assignop(s, op) {\n        var x = infix(s, 20, function (left, that) {\n            var next;\n            that.first = left;\n            lvalue(left, s);\n            that.second = expression(20);\n            if (that.id === '=' && are_similar(that.first, that.second)) {\n                that.warn('weird_assignment');\n            }\n            next = that;\n            while (next_token.id === '=') {\n                lvalue(next.second, '=');\n                next_token.first = next.second;\n                next.second = next_token;\n                next = next_token;\n                advance('=');\n                next.second = expression(20);\n            }\n            return that;\n        });\n        x.assign = true;\n        if (op) {\n            if (syntax[op].bitwise) {\n                x.bitwise = true;\n            }\n        }\n        return x;\n    }\n\n\n    function bitwise(s, p) {\n        var x = infix(s, p, 'number');\n        x.bitwise = true;\n        return x;\n    }\n\n\n    function suffix(s) {\n        var x = symbol(s, 150);\n        x.led = function (left) {\n            no_space_only(prev_token, token);\n            if (!option.plusplus) {\n                this.warn('unexpected_a');\n            } else if ((!left.identifier || left.reserved) &&\n                    left.id !== '.' && left.id !== '[') {\n                this.warn('bad_operand');\n            }\n            this.first = left;\n            this.arity = 'suffix';\n            return this;\n        };\n        return x;\n    }\n\n\n    function optional_identifier(variable) {\n        if (next_token.identifier) {\n            advance();\n            if (token.reserved && variable) {\n                token.warn('expected_identifier_a_reserved');\n            }\n            return token.string;\n        }\n    }\n\n\n    function identifier(variable) {\n        var i = optional_identifier(variable);\n        if (!i) {\n            next_token.stop(token.id === 'function' && next_token.id === '('\n                ? 'name_function'\n                : 'expected_identifier_a');\n        }\n        return i;\n    }\n\n\n    function statement() {\n\n        var label, preamble, the_statement;\n\n// We don't like the empty statement.\n\n        if (next_token.id === ';') {\n            next_token.warn('unexpected_a');\n            semicolon();\n            return;\n        }\n\n// Is this a labeled statement?\n\n        if (next_token.identifier && !next_token.reserved && peek().id === ':') {\n            edge('label');\n            label = next_token;\n            advance();\n            advance(':');\n            define('label', label);\n            if (next_token.labeled !== true || funct === global_funct) {\n                label.stop('unexpected_label_a');\n            } else if (jx.test(label.string + ':')) {\n                label.warn('url');\n            }\n            next_token.label = label;\n            label.init = true;\n            label.statement = next_token;\n        }\n\n// Parse the statement.\n\n        preamble = next_token;\n        if (token.id !== 'else') {\n            edge();\n        }\n        step_in('statement');\n        the_statement = expression(0, true);\n        if (the_statement) {\n\n// Look for the final semicolon.\n\n            if (the_statement.arity === 'statement') {\n                if (the_statement.id === 'switch' ||\n                        (the_statement.block && the_statement.id !== 'do')) {\n                    spaces();\n                } else {\n                    semicolon();\n                }\n            } else {\n\n// If this is an expression statement, determine if it is acceptable.\n// We do not like\n//      new Blah;\n// statements. If it is to be used at all, new should only be used to make\n// objects, not side effects. The expression statements we do like do\n// assignment or invocation or delete.\n\n                if (the_statement.id === '(') {\n                    if (the_statement.first.id === 'new') {\n                        next_token.warn('bad_new');\n                    }\n                } else if (the_statement.id === '++' ||\n                        the_statement.id === '--') {\n                    lvalue(the_statement.first);\n                } else if (!the_statement.assign &&\n                        the_statement.id !== 'delete') {\n                    if (!option.closure || !preamble.comments) {\n                        preamble.warn('assignment_function_expression');\n                    }\n                }\n                semicolon();\n            }\n        }\n        step_out();\n        if (label) {\n            label.dead = true;\n        }\n        return the_statement;\n    }\n\n\n    function statements() {\n        var array = [], disruptor, the_statement;\n\n// A disrupt statement may not be followed by any other statement.\n// If the last statement is disrupt, then the sequence is disrupt.\n\n        while (next_token.postscript !== true) {\n            if (next_token.id === ';') {\n                next_token.warn('unexpected_a');\n                semicolon();\n            } else {\n                if (next_token.string === 'use strict') {\n                    if ((!node_js) || funct !== global_funct || array.length > 0) {\n                        next_token.warn('function_strict');\n                    }\n                    use_strict();\n                }\n                if (disruptor) {\n                    next_token.warn('unreachable_a_b', next_token.string,\n                        disruptor.string);\n                    disruptor = null;\n                }\n                the_statement = statement();\n                if (the_statement) {\n                    array.push(the_statement);\n                    if (the_statement.disrupt) {\n                        disruptor = the_statement;\n                        array.disrupt = true;\n                    }\n                }\n            }\n        }\n        return array;\n    }\n\n\n    function block(kind) {\n\n// A block is a sequence of statements wrapped in braces.\n\n        var array,\n            curly = next_token,\n            old_block_var = block_var,\n            old_in_block = in_block,\n            old_strict_mode = strict_mode;\n\n        in_block = kind !== 'function' && kind !== 'try' && kind !== 'catch';\n        block_var = [];\n        if (curly.id === '{') {\n            spaces();\n            advance('{');\n            step_in();\n            if (kind === 'function' && !use_strict() && !old_strict_mode &&\n                    !option.sloppy && funct.level === 1) {\n                next_token.warn('missing_use_strict');\n            }\n            array = statements();\n            strict_mode = old_strict_mode;\n            step_out('}', curly);\n        } else if (in_block) {\n            curly.stop('expected_a_b', '{', artifact());\n        } else {\n            curly.warn('expected_a_b', '{', artifact());\n            array = [statement()];\n            array.disrupt = array[0].disrupt;\n        }\n        if (kind !== 'catch' && array.length === 0 && !option.debug) {\n            curly.warn('empty_block');\n        }\n        block_var.forEach(function (name) {\n            scope[name].dead = true;\n        });\n        block_var = old_block_var;\n        in_block = old_in_block;\n        return array;\n    }\n\n\n    function tally_property(name) {\n        if (option.properties && typeof property[name] !== 'number') {\n            token.warn('unexpected_property_a', name);\n        }\n        if (property[name]) {\n            property[name] += 1;\n        } else {\n            property[name] = 1;\n        }\n    }\n\n\n// ECMAScript parser\n\n    (function () {\n        var x = symbol('(identifier)');\n        x.nud = function () {\n            var name = this.string,\n                master = scope[name],\n                writeable;\n\n// If the master is not in scope, then we may have an undeclared variable.\n// Check the predefined list. If it was predefined, create the global\n// variable.\n\n            if (!master) {\n                writeable = predefined[name];\n                if (typeof writeable === 'boolean') {\n                    global_scope[name] = master = {\n                        dead: false,\n                        function: global_funct,\n                        kind: 'var',\n                        string: name,\n                        writeable: writeable\n                    };\n\n// But if the variable is not in scope, and is not predefined, and if we are not\n// in the global scope, then we have an undefined variable error.\n\n                } else {\n                    token.warn('used_before_a');\n                }\n            } else {\n                this.master = master;\n            }\n\n// Annotate uses that cross scope boundaries.\n\n            if (master) {\n                if (master.kind === 'label') {\n                    this.warn('a_label');\n                } else {\n                    if (master.dead === true || master.dead === funct) {\n                        this.warn('a_scope');\n                    }\n                    master.used += 1;\n                    if (master.function !== funct) {\n                        if (master.function === global_funct) {\n                            funct.global.push(name);\n                        } else {\n                            master.function.closure.push(name);\n                            funct.outer.push(name);\n                        }\n                    }\n                }\n            }\n            return this;\n        };\n        x.identifier = true;\n    }());\n\n\n// Build the syntax table by declaring the syntactic elements.\n\n    type('(array)', 'array');\n    type('(function)', 'function');\n    type('(number)', 'number', return_this);\n    type('(object)', 'object');\n    type('(string)', 'string', return_this);\n    type('(boolean)', 'boolean', return_this);\n    type('(regexp)', 'regexp', return_this);\n\n    ultimate('(begin)');\n    ultimate('(end)');\n    ultimate('(error)');\n    postscript(symbol('}'));\n    symbol(')');\n    symbol(']');\n    postscript(symbol('\"'));\n    postscript(symbol('\\''));\n    symbol(';');\n    symbol(':');\n    symbol(',');\n    symbol('#');\n    symbol('@');\n    symbol('*/');\n    postscript(reserve('case'));\n    reserve('catch');\n    postscript(reserve('default'));\n    reserve('else');\n    reserve('finally');\n\n    reservevar('arguments', function (x) {\n        if (strict_mode && funct === global_funct) {\n            x.warn('strict');\n        }\n        funct.arguments = true;\n    });\n    reservevar('eval');\n    constant('false', 'boolean');\n    constant('Infinity', 'number');\n    constant('NaN', 'number');\n    constant('null', '');\n    reservevar('this', function (x) {\n        if (strict_mode && funct.statement && funct.name.charAt(0) > 'Z') {\n            x.warn('strict');\n        }\n    });\n    constant('true', 'boolean');\n    constant('undefined', '');\n\n    infix('?', 30, function (left, that) {\n        step_in('?');\n        that.first = expected_condition(expected_relation(left));\n        that.second = expression(0);\n        spaces();\n        step_out();\n        var colon = next_token;\n        advance(':');\n        step_in(':');\n        spaces();\n        that.third = expression(10);\n        that.arity = 'ternary';\n        if (are_similar(that.second, that.third)) {\n            colon.warn('weird_ternary');\n        } else if (are_similar(that.first, that.second)) {\n            that.warn('use_or');\n        }\n        step_out();\n        return that;\n    });\n\n    infix('||', 40, function (left, that) {\n        function paren_check(that) {\n            if (that.id === '&&' && !that.paren) {\n                that.warn('and');\n            }\n            return that;\n        }\n\n        that.first = paren_check(expected_condition(expected_relation(left)));\n        that.second = paren_check(expected_relation(expression(40)));\n        if (are_similar(that.first, that.second)) {\n            that.warn('weird_condition');\n        }\n        return that;\n    });\n\n    infix('&&', 50, function (left, that) {\n        that.first = expected_condition(expected_relation(left));\n        that.second = expected_relation(expression(50));\n        if (are_similar(that.first, that.second)) {\n            that.warn('weird_condition');\n        }\n        return that;\n    });\n\n    prefix('void', function (that) {\n        that.first = expression(0);\n        that.warn('expected_a_b', 'undefined', 'void');\n        return that;\n    });\n\n    bitwise('|', 70);\n    bitwise('^', 80);\n    bitwise('&', 90);\n\n    relation('==', '===');\n    relation('===');\n    relation('!=', '!==');\n    relation('!==');\n    relation('<');\n    relation('>');\n    relation('<=');\n    relation('>=');\n\n    bitwise('<<', 120);\n    bitwise('>>', 120);\n    bitwise('>>>', 120);\n\n    infix('in', 120, function (left, that) {\n        that.warn('infix_in');\n        that.left = left;\n        that.right = expression(130);\n        return that;\n    });\n    infix('instanceof', 120);\n    infix('+', 130, function (left, that) {\n        if (left.id === '(number)') {\n            if (left.number === 0) {\n                left.warn('unexpected_a', '0');\n            }\n        } else if (left.id === '(string)') {\n            if (left.string === '') {\n                left.warn('expected_a_b', 'String', '\\'\\'');\n            }\n        }\n        var right = expression(130);\n        if (right.id === '(number)') {\n            if (right.number === 0) {\n                right.warn('unexpected_a', '0');\n            }\n        } else if (right.id === '(string)') {\n            if (right.string === '') {\n                right.warn('expected_a_b', 'String', '\\'\\'');\n            }\n        }\n        if (left.id === right.id) {\n            if (left.id === '(string)' || left.id === '(number)') {\n                if (left.id === '(string)') {\n                    left.string += right.string;\n                    if (jx.test(left.string)) {\n                        left.warn('url');\n                    }\n                } else {\n                    left.number += right.number;\n                }\n                left.thru = right.thru;\n                return left;\n            }\n        }\n        that.first = left;\n        that.second = right;\n        return that;\n    });\n    prefix('+');\n    prefix('+++', function () {\n        token.warn('confusing_a');\n        this.first = expression(150);\n        this.arity = 'prefix';\n        return this;\n    });\n    infix('+++', 130, function (left) {\n        token.warn('confusing_a');\n        this.first = left;\n        this.second = expression(130);\n        return this;\n    });\n    infix('-', 130, function (left, that) {\n        if ((left.id === '(number)' && left.number === 0) || left.id === '(string)') {\n            left.warn('unexpected_a');\n        }\n        var right = expression(130);\n        if ((right.id === '(number)' && right.number === 0) || right.id === '(string)') {\n            right.warn('unexpected_a');\n        }\n        if (left.id === right.id && left.id === '(number)') {\n            left.number -= right.number;\n            left.thru = right.thru;\n            return left;\n        }\n        that.first = left;\n        that.second = right;\n        return that;\n    });\n    prefix('-');\n    prefix('---', function () {\n        token.warn('confusing_a');\n        this.first = expression(150);\n        this.arity = 'prefix';\n        return this;\n    });\n    infix('---', 130, function (left) {\n        token.warn('confusing_a');\n        this.first = left;\n        this.second = expression(130);\n        return this;\n    });\n    infix('*', 140, function (left, that) {\n        if ((left.id === '(number)' && (left.number === 0 || left.number === 1)) || left.id === '(string)') {\n            left.warn('unexpected_a');\n        }\n        var right = expression(140);\n        if ((right.id === '(number)' && (right.number === 0 || right.number === 1)) || right.id === '(string)') {\n            right.warn('unexpected_a');\n        }\n        if (left.id === right.id && left.id === '(number)') {\n            left.number *= right.number;\n            left.thru = right.thru;\n            return left;\n        }\n        that.first = left;\n        that.second = right;\n        return that;\n    });\n    infix('/', 140, function (left, that) {\n        if ((left.id === '(number)' && left.number === 0) || left.id === '(string)') {\n            left.warn('unexpected_a');\n        }\n        var right = expression(140);\n        if ((right.id === '(number)' && (right.number === 0 || right.number === 1)) || right.id === '(string)') {\n            right.warn('unexpected_a');\n        }\n        if (left.id === right.id && left.id === '(number)') {\n            left.number /= right.number;\n            left.thru = right.thru;\n            return left;\n        }\n        that.first = left;\n        that.second = right;\n        return that;\n    });\n    infix('%', 140, function (left, that) {\n        if ((left.id === '(number)' && (left.number === 0 || left.number === 1)) || left.id === '(string)') {\n            left.warn('unexpected_a');\n        }\n        var right = expression(140);\n        if ((right.id === '(number)' && right.number === 0) || right.id === '(string)') {\n            right.warn('unexpected_a');\n        }\n        if (left.id === right.id && left.id === '(number)') {\n            left.number %= right.number;\n            left.thru = right.thru;\n            return left;\n        }\n        that.first = left;\n        that.second = right;\n        return that;\n    });\n\n    suffix('++');\n    prefix('++');\n\n    suffix('--');\n    prefix('--');\n    prefix('delete', function (that) {\n        one_space();\n        var p = expression(0);\n        if (!p || (p.id !== '.' && p.id !== '[')) {\n            next_token.warn('deleted');\n        }\n        that.first = p;\n        return that;\n    });\n\n\n    prefix('~', function (that) {\n        no_space_only();\n        if (!option.bitwise) {\n            that.warn('unexpected_a');\n        }\n        that.first = expression(150);\n        return that;\n    });\n    function banger(that) {\n        no_space_only();\n        that.first = expected_condition(expression(150));\n        if (bang[that.first.id] === that || that.first.assign) {\n            that.warn('confusing_a');\n        }\n        return that;\n    }\n    prefix('!', banger);\n    prefix('!!', banger);\n    prefix('typeof');\n    prefix('new', function (that) {\n        one_space();\n        var c = expression(160), n, p, v;\n        that.first = c;\n        if (c.id !== 'function') {\n            if (c.identifier) {\n                switch (c.string) {\n                case 'Object':\n                    token.warn('use_object');\n                    break;\n                case 'Array':\n                    if (next_token.id === '(') {\n                        p = next_token;\n                        p.first = this;\n                        advance('(');\n                        if (next_token.id !== ')') {\n                            n = expression(0);\n                            p.second = [n];\n                            if (n.id === '(string)' || next_token.id === ',') {\n                                p.warn('use_array');\n                            }\n                            while (next_token.id === ',') {\n                                advance(',');\n                                p.second.push(expression(0));\n                            }\n                        } else {\n                            token.warn('use_array');\n                        }\n                        advance(')', p);\n                        return p;\n                    }\n                    token.warn('use_array');\n                    break;\n                case 'Number':\n                case 'String':\n                case 'Boolean':\n                case 'Math':\n                case 'JSON':\n                    c.warn('not_a_constructor');\n                    break;\n                case 'Function':\n                    if (!option.evil) {\n                        next_token.warn('function_eval');\n                    }\n                    break;\n                case 'Date':\n                case 'RegExp':\n                case 'this':\n                    break;\n                default:\n                    if (c.id !== 'function') {\n                        v = c.string.charAt(0);\n                        if (!option.newcap && (v < 'A' || v > 'Z')) {\n                            token.warn('constructor_name_a');\n                        }\n                    }\n                }\n            } else {\n                if (c.id !== '.' && c.id !== '[' && c.id !== '(') {\n                    token.warn('bad_constructor');\n                }\n            }\n        } else {\n            that.warn('weird_new');\n        }\n        if (next_token.id !== '(') {\n            next_token.warn('missing_a', '()');\n        }\n        return that;\n    });\n\n    infix('(', 160, function (left, that) {\n        var e, p;\n        if (indent && indent.mode === 'expression') {\n            no_space(prev_token, token);\n        } else {\n            no_space_only(prev_token, token);\n        }\n        if (!left.immed && left.id === 'function') {\n            next_token.warn('wrap_immediate');\n        }\n        p = [];\n        if (left.identifier) {\n            if (left.string.match(/^[A-Z]([A-Z0-9_$]*[a-z][A-Za-z0-9_$]*)?$/)) {\n                if (left.string !== 'Number' && left.string !== 'String' &&\n                        left.string !== 'Boolean' && left.string !== 'Date') {\n                    if (left.string === 'Math') {\n                        left.warn('not_a_function');\n                    } else if (left.string === 'Object') {\n                        token.warn('use_object');\n                    } else if (left.string === 'Array' || !option.newcap) {\n                        left.warn('missing_a', 'new');\n                    }\n                }\n            } else if (left.string === 'JSON') {\n                left.warn('not_a_function');\n            }\n        } else if (left.id === '.') {\n            if (left.second.string === 'split' &&\n                    left.first.id === '(string)') {\n                left.second.warn('use_array');\n            }\n        }\n        step_in();\n        if (next_token.id !== ')') {\n            no_space();\n            for (;;) {\n                edge();\n                e = expression(10);\n                if (left.string === 'Boolean' && (e.id === '!' || e.id === '~')) {\n                    e.warn('weird_condition');\n                }\n                p.push(e);\n                if (next_token.id !== ',') {\n                    break;\n                }\n                comma();\n            }\n        }\n        no_space();\n        step_out(')', that);\n        if (typeof left === 'object') {\n            if (left.string === 'parseInt' && p.length === 1) {\n                left.warn('radix');\n            } else if (left.string === 'String' && p.length >= 1 && p[0].id === '(string)') {\n                left.warn('unexpected_a');\n            }\n            if (!option.evil) {\n                if (left.string === 'eval' || left.string === 'Function' ||\n                        left.string === 'execScript') {\n                    left.warn('evil');\n                } else if (p[0] && p[0].id === '(string)' &&\n                        (left.string === 'setTimeout' ||\n                        left.string === 'setInterval')) {\n                    left.warn('implied_evil');\n                }\n            }\n            if (!left.identifier && left.id !== '.' && left.id !== '[' &&\n                    left.id !== '(' && left.id !== '&&' && left.id !== '||' &&\n                    left.id !== '?') {\n                left.warn('bad_invocation');\n            }\n            if (left.id === '.') {\n                if (p.length > 0 &&\n                        left.first && left.first.first &&\n                        are_similar(p[0], left.first.first)) {\n                    if (left.second.string === 'call' ||\n                            (left.second.string === 'apply' && (p.length === 1 ||\n                            (p[1].arity === 'prefix' && p[1].id === '[')))) {\n                        left.second.warn('unexpected_a');\n                    }\n                }\n                if (left.second.string === 'toString') {\n                    if (left.first.id === '(string)' || left.first.id === '(number)') {\n                        left.second.warn('unexpected_a');\n                    }\n                }\n            }\n        }\n        that.first = left;\n        that.second = p;\n        return that;\n    }, true);\n\n    prefix('(', function (that) {\n        step_in('expression');\n        no_space();\n        edge();\n        if (next_token.id === 'function') {\n            next_token.immed = true;\n        }\n        var value = expression(0);\n        value.paren = true;\n        no_space();\n        step_out(')', that);\n        if (value.id === 'function') {\n            switch (next_token.id) {\n            case '(':\n                next_token.warn('move_invocation');\n                break;\n            case '.':\n            case '[':\n                next_token.warn('unexpected_a');\n                break;\n            default:\n                that.warn('bad_wrap');\n            }\n        } else if (!value.arity) {\n            if (!option.closure || !that.comments) {\n                that.warn('unexpected_a');\n            }\n        }\n        return value;\n    });\n\n    infix('.', 170, function (left, that) {\n        no_space(prev_token, token);\n        no_space();\n        var name = identifier();\n        if (typeof name === 'string') {\n            tally_property(name);\n        }\n        that.first = left;\n        that.second = token;\n        if (left && left.string === 'arguments' &&\n                (name === 'callee' || name === 'caller')) {\n            left.warn('avoid_a', 'arguments.' + name);\n        } else if (!option.evil && left && left.string === 'document' &&\n                (name === 'write' || name === 'writeln')) {\n            left.warn('write_is_wrong');\n        } else if (!option.stupid && syx.test(name)) {\n            token.warn('sync_a');\n        } else if (left && left.id === '{') {\n            that.warn('unexpected_a');\n        }\n        if (!option.evil && (name === 'eval' || name === 'execScript')) {\n            next_token.warn('evil');\n        }\n        return that;\n    }, true);\n\n    infix('[', 170, function (left, that) {\n        var e, s;\n        no_space_only(prev_token, token);\n        no_space();\n        step_in();\n        edge();\n        e = expression(0);\n        switch (e.id) {\n        case '(number)':\n            if (e.id === '(number)' && left.id === 'arguments') {\n                left.warn('use_param');\n            }\n            break;\n        case '(string)':\n            if (!option.evil &&\n                    (e.string === 'eval' || e.string === 'execScript')) {\n                e.warn('evil');\n            } else if (!option.sub && ix.test(e.string)) {\n                s = syntax[e.string];\n                if (!s || !s.reserved) {\n                    e.warn('subscript');\n                }\n            }\n            tally_property(e.string);\n            break;\n        }\n        if (left && (left.id === '{' || (left.id === '[' && left.arity === 'prefix'))) {\n            that.warn('unexpected_a');\n        }\n        step_out(']', that);\n        no_space(prev_token, token);\n        that.first = left;\n        that.second = e;\n        return that;\n    }, true);\n\n    prefix('[', function (that) {\n        that.first = [];\n        step_in('array');\n        while (next_token.id !== '(end)') {\n            while (next_token.id === ',') {\n                next_token.warn('unexpected_a');\n                advance(',');\n            }\n            if (next_token.id === ']') {\n                break;\n            }\n            indent.wrap = false;\n            edge();\n            that.first.push(expression(10));\n            if (next_token.id === ',') {\n                comma();\n                if (next_token.id === ']') {\n                    token.warn('unexpected_a');\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n        step_out(']', that);\n        return that;\n    }, 170);\n\n\n    function property_name() {\n        var id = optional_identifier();\n        if (!id) {\n            if (next_token.id === '(string)') {\n                id = next_token.string;\n                advance();\n            } else if (next_token.id === '(number)') {\n                id = next_token.number.toString();\n                advance();\n            }\n        }\n        return id;\n    }\n\n\n\n    assignop('=');\n    assignop('+=', '+');\n    assignop('-=', '-');\n    assignop('*=', '*');\n    assignop('/=', '/').nud = function () {\n        next_token.stop('slash_equal');\n    };\n    assignop('%=', '%');\n    assignop('&=', '&');\n    assignop('|=', '|');\n    assignop('^=', '^');\n    assignop('<<=', '<<');\n    assignop('>>=', '>>');\n    assignop('>>>=', '>>>');\n\n    function function_parameters() {\n        var id, parameters = [], paren = next_token;\n        advance('(');\n        token.function = funct;\n        step_in();\n        no_space();\n        if (next_token.id !== ')') {\n            for (;;) {\n                edge();\n                id = identifier();\n                if (token.reserved) {\n                    token.warn('expected_identifier_a_reserved');\n                }\n                define('parameter', token);\n                parameters.push(id);\n                token.init = true;\n                token.writeable = true;\n                if (next_token.id !== ',') {\n                    break;\n                }\n                comma();\n            }\n        }\n        no_space();\n        step_out(')', paren);\n        return parameters;\n    }\n\n    function do_function(func, name) {\n        var old_funct = funct,\n            old_option = option,\n            old_scope = scope;\n        scope = Object.create(old_scope);\n        funct = {\n            closure: [],\n            global: [],\n            level: old_funct.level + 1,\n            line: next_token.line,\n            loopage: 0,\n            name: name || '\\'' + (anonname || '').replace(nx, sanitize) + '\\'',\n            outer: [],\n            scope: scope\n        };\n        funct.parameter = function_parameters();\n        func.function = funct;\n        option = Object.create(old_option);\n        functions.push(funct);\n        if (name) {\n            func.name = name;\n            func.string = name;\n            define('function', func);\n            func.init = true;\n            func.used += 1;\n        }\n        func.writeable = false;\n        one_space();\n        func.block = block('function');\n        Object.keys(scope).forEach(function (name) {\n            var master = scope[name];\n            if (!master.used && master.kind !== 'exception' &&\n                    (master.kind !== 'parameter' || !option.unparam)) {\n                master.warn('unused_a');\n            } else if (!master.init) {\n                master.warn('uninitialized_a');\n            }\n        });\n        funct = old_funct;\n        option = old_option;\n        scope = old_scope;\n    }\n\n    prefix('{', function (that) {\n        var get, i, j, name, set, seen = Object.create(null);\n        that.first = [];\n        step_in();\n        while (next_token.id !== '}') {\n            indent.wrap = false;\n\n// JSLint recognizes the ES5 extension for get/set in object literals,\n// but requires that they be used in pairs.\n\n            edge();\n            if (next_token.string === 'get' && peek().id !== ':') {\n                get = next_token;\n                advance('get');\n                one_space_only();\n                name = next_token;\n                i = property_name();\n                if (!i) {\n                    next_token.stop('missing_property');\n                }\n                get.string = '';\n                do_function(get);\n                if (funct.loopage) {\n                    get.warn('function_loop');\n                }\n                if (get.function.parameter.length) {\n                    get.warn('parameter_a_get_b', get.function.parameter[0], i);\n                }\n                comma();\n                set = next_token;\n                spaces();\n                edge();\n                advance('set');\n                set.string = '';\n                one_space_only();\n                j = property_name();\n                if (i !== j) {\n                    token.stop('expected_a_b', i, j || next_token.string);\n                }\n                do_function(set);\n                if (set.block.length === 0) {\n                    token.warn('missing_a', 'throw');\n                }\n                if (set.function.parameter.length === 0) {\n                    set.stop('parameter_set_a', 'value');\n                } else if (set.function.parameter[0] !== 'value') {\n                    set.stop('expected_a_b', 'value',\n                        set.function.parameter[0]);\n                }\n                name.first = [get, set];\n            } else {\n                name = next_token;\n                i = property_name();\n                if (typeof i !== 'string') {\n                    next_token.stop('missing_property');\n                }\n                advance(':');\n                spaces();\n                name.first = expression(10);\n            }\n            that.first.push(name);\n            if (seen[i] === true) {\n                next_token.warn('duplicate_a', i);\n            }\n            seen[i] = true;\n            tally_property(i);\n            if (next_token.id !== ',') {\n                break;\n            }\n            for (;;) {\n                comma();\n                if (next_token.id !== ',') {\n                    break;\n                }\n                next_token.warn('unexpected_a');\n            }\n            if (next_token.id === '}') {\n                token.warn('unexpected_a');\n            }\n        }\n        step_out('}', that);\n        return that;\n    });\n\n    stmt('{', function () {\n        next_token.warn('statement_block');\n        this.arity = 'statement';\n        this.block = statements();\n        this.disrupt = this.block.disrupt;\n        advance('}', this);\n        return this;\n    });\n\n    stmt('/*global', directive);\n    stmt('/*globals', directive);\n    stmt('/*jslint', directive);\n    stmt('/*member', directive);\n    stmt('/*members', directive);\n    stmt('/*property', directive);\n    stmt('/*properties', directive);\n\n    stmt('var', function () {\n\n// JavaScript does not have block scope. It only has function scope. So,\n// declaring a variable in a block can have unexpected consequences.\n\n// var.first will contain an array, the array containing name tokens\n// and assignment tokens.\n\n        var assign, id, name;\n\n        if (funct.loopage) {\n            next_token.warn('var_loop');\n        } else if (funct.varstatement && !option.vars) {\n            next_token.warn('combine_var');\n        }\n        if (funct !== global_funct) {\n            funct.varstatement = true;\n        }\n        this.arity = 'statement';\n        this.first = [];\n        step_in('var');\n        for (;;) {\n            name = next_token;\n            id = identifier(true);\n            define('var', name);\n            name.dead = funct;\n            if (next_token.id === '=') {\n                if (funct === global_funct && !name.writeable) {\n                    name.warn('read_only');\n                }\n                assign = next_token;\n                assign.first = name;\n                spaces();\n                advance('=');\n                spaces();\n                if (next_token.id === 'undefined') {\n                    token.warn('unnecessary_initialize', id);\n                }\n                if (peek(0).id === '=' && next_token.identifier) {\n                    next_token.stop('var_a_not');\n                }\n                assign.second = expression(0);\n                assign.arity = 'infix';\n                name.init = true;\n                this.first.push(assign);\n            } else {\n                this.first.push(name);\n            }\n            name.dead = false;\n            name.writeable = true;\n            if (next_token.id !== ',') {\n                break;\n            }\n            comma();\n            indent.wrap = false;\n            if (var_mode && next_token.line === token.line &&\n                    this.first.length === 1) {\n                var_mode = null;\n                indent.open = false;\n                indent.at -= option.indent;\n            }\n            spaces();\n            edge();\n        }\n        var_mode = null;\n        step_out();\n        return this;\n    });\n\n    stmt('function', function () {\n        one_space();\n        if (in_block) {\n            token.warn('function_block');\n        }\n        var name = next_token,\n            id = identifier(true);\n        define('var', name);\n        if (!name.writeable) {\n            name.warn('read_only');\n        }\n        name.init = true;\n        name.statement = true;\n        no_space();\n        this.arity = 'statement';\n        do_function(this, id);\n        if (next_token.id === '(' && next_token.line === token.line) {\n            next_token.stop('function_statement');\n        }\n        return this;\n    });\n\n    prefix('function', function (that) {\n        var id = optional_identifier(true), name;\n        if (id) {\n            name = token;\n            no_space();\n        } else {\n            id = '';\n            one_space();\n        }\n        do_function(that, id);\n        if (name) {\n            name.function = that.function;\n        }\n        if (funct.loopage) {\n            that.warn('function_loop');\n        }\n        switch (next_token.id) {\n        case ';':\n        case '(':\n        case ')':\n        case ',':\n        case ']':\n        case '}':\n        case ':':\n        case '(end)':\n            break;\n        case '.':\n            if (peek().string !== 'bind' || peek(1).id !== '(') {\n                next_token.warn('unexpected_a');\n            }\n            break;\n        default:\n            next_token.stop('unexpected_a');\n        }\n        that.arity = 'function';\n        return that;\n    });\n\n    stmt('if', function () {\n        var paren = next_token;\n        one_space();\n        advance('(');\n        step_in('control');\n        no_space();\n        edge();\n        this.arity = 'statement';\n        this.first = expected_condition(expected_relation(expression(0)));\n        no_space();\n        step_out(')', paren);\n        one_space();\n        this.block = block('if');\n        if (next_token.id === 'else') {\n            if (this.block.disrupt) {\n                next_token.warn(this.elif ? 'use_nested_if' : 'unnecessary_else');\n            }\n            one_space();\n            advance('else');\n            one_space();\n            if (next_token.id === 'if') {\n                next_token.elif = true;\n                this.else = statement(true);\n            } else {\n                this.else = block('else');\n            }\n            if (this.else.disrupt && this.block.disrupt) {\n                this.disrupt = true;\n            }\n        }\n        return this;\n    });\n\n    stmt('try', function () {\n\n// try.first    The catch variable\n// try.second   The catch clause\n// try.third    The finally clause\n// try.block    The try block\n\n        var exception_variable, paren;\n        one_space();\n        this.arity = 'statement';\n        this.block = block('try');\n        if (next_token.id === 'catch') {\n            one_space();\n            advance('catch');\n            one_space();\n            paren = next_token;\n            advance('(');\n            step_in('control');\n            no_space();\n            edge();\n            exception_variable = next_token;\n            this.first = identifier();\n            define('exception', exception_variable);\n            exception_variable.init = true;\n            no_space();\n            step_out(')', paren);\n            one_space();\n            this.second = block('catch');\n            if (this.second.length) {\n                if (this.first === 'ignore') {\n                    exception_variable.warn('unexpected_a');\n                }\n            } else {\n                if (this.first !== 'ignore') {\n                    exception_variable.warn('expected_a_b', 'ignore',\n                        exception_variable.string);\n                }\n            }\n            exception_variable.dead = true;\n        }\n        if (next_token.id === 'finally') {\n            one_space();\n            advance('finally');\n            one_space();\n            this.third = block('finally');\n        } else if (!this.second) {\n            next_token.stop('expected_a_b', 'catch', artifact());\n        }\n        return this;\n    });\n\n    labeled_stmt('while', function () {\n        one_space();\n        var paren = next_token;\n        funct.loopage += 1;\n        advance('(');\n        step_in('control');\n        no_space();\n        edge();\n        this.arity = 'statement';\n        this.first = expected_relation(expression(0));\n        if (this.first.id !== 'true') {\n            expected_condition(this.first, 'unexpected_a');\n        }\n        no_space();\n        step_out(')', paren);\n        one_space();\n        this.block = block('while');\n        if (this.block.disrupt) {\n            prev_token.warn('strange_loop');\n        }\n        funct.loopage -= 1;\n        return this;\n    });\n\n    reserve('with');\n\n    labeled_stmt('switch', function () {\n\n// switch.first         the switch expression\n// switch.second        the array of cases. A case is 'case' or 'default' token:\n//    case.first        the array of case expressions\n//    case.second       the array of statements\n// If all of the arrays of statements are disrupt, then the switch is disrupt.\n\n        var cases = [],\n            old_in_block = in_block,\n            particular,\n            that = token,\n            the_case = next_token;\n\n        function find_duplicate_case(value) {\n            if (are_similar(particular, value)) {\n                value.warn('duplicate_a');\n            }\n        }\n\n        one_space();\n        advance('(');\n        no_space();\n        step_in();\n        this.arity = 'statement';\n        this.first = expected_condition(expected_relation(expression(0)));\n        no_space();\n        step_out(')', the_case);\n        one_space();\n        advance('{');\n        step_in();\n        in_block = true;\n        this.second = [];\n        if (that.from !== next_token.from && !option.white) {\n            next_token.warn('expected_a_at_b_c', next_token.string, that.from, next_token.from);\n        }\n        while (next_token.id === 'case') {\n            the_case = next_token;\n            the_case.first = [];\n            the_case.arity = 'case';\n            for (;;) {\n                spaces();\n                edge('case');\n                advance('case');\n                one_space();\n                particular = expression(0);\n                cases.forEach(find_duplicate_case);\n                cases.push(particular);\n                the_case.first.push(particular);\n                if (particular.id === 'NaN') {\n                    particular.warn('unexpected_a');\n                }\n                no_space_only();\n                advance(':');\n                if (next_token.id !== 'case') {\n                    break;\n                }\n            }\n            spaces();\n            the_case.second = statements();\n            if (the_case.second && the_case.second.length > 0) {\n                if (!the_case.second[the_case.second.length - 1].disrupt) {\n                    next_token.warn('missing_a_after_b', 'break', 'case');\n                }\n            } else {\n                next_token.warn('empty_case');\n            }\n            this.second.push(the_case);\n        }\n        if (this.second.length === 0) {\n            next_token.warn('missing_a', 'case');\n        }\n        if (next_token.id === 'default') {\n            spaces();\n            the_case = next_token;\n            the_case.arity = 'case';\n            edge('case');\n            advance('default');\n            no_space_only();\n            advance(':');\n            spaces();\n            the_case.second = statements();\n            if (the_case.second && the_case.second.length > 0) {\n                this.disrupt = the_case.second[the_case.second.length - 1].disrupt;\n            } else {\n                the_case.warn('empty_case');\n            }\n            this.second.push(the_case);\n        }\n        if (this.break) {\n            this.disrupt = false;\n        }\n        spaces();\n        step_out('}', this);\n        in_block = old_in_block;\n        return this;\n    });\n\n    stmt('debugger', function () {\n        if (!option.debug) {\n            this.warn('unexpected_a');\n        }\n        this.arity = 'statement';\n        return this;\n    });\n\n    labeled_stmt('do', function () {\n        funct.loopage += 1;\n        one_space();\n        this.arity = 'statement';\n        this.block = block('do');\n        if (this.block.disrupt) {\n            prev_token.warn('strange_loop');\n        }\n        one_space();\n        advance('while');\n        var paren = next_token;\n        one_space();\n        advance('(');\n        step_in();\n        no_space();\n        edge();\n        this.first = expected_condition(expected_relation(expression(0)), 'unexpected_a');\n        no_space();\n        step_out(')', paren);\n        funct.loopage -= 1;\n        return this;\n    });\n\n    labeled_stmt('for', function () {\n\n        var blok, filter, master, ok = false, paren = next_token, value;\n        this.arity = 'statement';\n        funct.loopage += 1;\n        advance('(');\n        if (next_token.id === ';') {\n            no_space();\n            advance(';');\n            no_space();\n            advance(';');\n            no_space();\n            advance(')');\n            blok = block('for');\n        } else {\n            step_in('control');\n            spaces(this, paren);\n            no_space();\n            if (next_token.id === 'var') {\n                next_token.stop('move_var');\n            }\n            edge();\n            if (peek(0).id === 'in') {\n                this.forin = true;\n                value = expression(1000);\n                master = value.master;\n                if (!master) {\n                    value.stop('bad_in_a');\n                }\n                if (master.kind !== 'var' || master.function !== funct ||\n                        !master.writeable || master.dead) {\n                    value.warn('bad_in_a');\n                }\n                master.init = true;\n                master.used -= 1;\n                this.first = value;\n                advance('in');\n                this.second = expression(20);\n                step_out(')', paren);\n                blok = block('for');\n                if (!option.forin) {\n                    if (blok.length === 1 && typeof blok[0] === 'object') {\n                        if (blok[0].id === 'if' && !blok[0].else) {\n                            filter = blok[0].first;\n                            while (filter.id === '&&') {\n                                filter = filter.first;\n                            }\n                            switch (filter.id) {\n                            case '===':\n                            case '!==':\n                                ok = filter.first.id === '['\n                                    ? are_similar(filter.first.first, this.second) &&\n                                        are_similar(filter.first.second, this.first)\n                                    : filter.first.id === 'typeof' &&\n                                        filter.first.first.id === '[' &&\n                                        are_similar(filter.first.first.first, this.second) &&\n                                        are_similar(filter.first.first.second, this.first);\n                                break;\n                            case '(':\n                                ok = filter.first.id === '.' && ((\n                                    are_similar(filter.first.first, this.second) &&\n                                    filter.first.second.string === 'hasOwnProperty' &&\n                                    are_similar(filter.second[0], this.first)\n                                ) || (\n                                    filter.first.first.id === '.' &&\n                                    filter.first.first.first.first &&\n                                    filter.first.first.first.first.string === 'Object' &&\n                                    filter.first.first.first.id === '.' &&\n                                    filter.first.first.first.second.string === 'prototype' &&\n                                    filter.first.first.second.string === 'hasOwnProperty' &&\n                                    filter.first.second.string === 'call' &&\n                                    are_similar(filter.second[0], this.second) &&\n                                    are_similar(filter.second[1], this.first)\n                                ));\n                                break;\n                            }\n                        } else if (blok[0].id === 'switch') {\n                            ok = blok[0].id === 'switch' &&\n                                blok[0].first.id === 'typeof' &&\n                                blok[0].first.first.id === '[' &&\n                                are_similar(blok[0].first.first.first, this.second) &&\n                                are_similar(blok[0].first.first.second, this.first);\n                        }\n                    }\n                    if (!ok) {\n                        this.warn('for_if');\n                    }\n                }\n            } else {\n                edge();\n                this.first = [];\n                for (;;) {\n                    this.first.push(expression(0, 'for'));\n                    if (next_token.id !== ',') {\n                        break;\n                    }\n                    comma();\n                }\n                semicolon();\n                edge();\n                this.second = expected_relation(expression(0));\n                if (this.second.id !== 'true') {\n                    expected_condition(this.second, 'unexpected_a');\n                }\n                semicolon(token);\n                if (next_token.id === ';') {\n                    next_token.stop('expected_a_b', ')', ';');\n                }\n                this.third = [];\n                edge();\n                for (;;) {\n                    this.third.push(expression(0, 'for'));\n                    if (next_token.id !== ',') {\n                        break;\n                    }\n                    comma();\n                }\n                no_space();\n                step_out(')', paren);\n                one_space();\n                blok = block('for');\n            }\n        }\n        if (blok.disrupt) {\n            prev_token.warn('strange_loop');\n        }\n        this.block = blok;\n        funct.loopage -= 1;\n        return this;\n    });\n\n    function optional_label(that) {\n        var label = next_token.string,\n            master;\n        that.arity = 'statement';\n        if (!funct.breakage || (!option.continue && that.id === 'continue')) {\n            that.warn('unexpected_a');\n        } else if (next_token.identifier && token.line === next_token.line) {\n            one_space_only();\n            master = scope[label];\n            if (!master || master.kind !== 'label') {\n                next_token.warn('not_a_label');\n            } else if (master.dead || master.function !== funct) {\n                next_token.warn('not_a_scope');\n            } else {\n                master.used += 1;\n                if (that.id === 'break') {\n                    master.statement.break = true;\n                }\n                if (funct.breakage[funct.breakage.length - 1] === master.statement) {\n                    next_token.warn('unexpected_a');\n                }\n            }\n            that.first = next_token;\n            advance();\n        } else {\n            if (that.id === 'break') {\n                funct.breakage[funct.breakage.length - 1].break = true;\n            }\n        }\n        return that;\n\n    }\n\n    disrupt_stmt('break', function () {\n        return optional_label(this);\n    });\n\n    disrupt_stmt('continue', function () {\n        return optional_label(this);\n    });\n\n    disrupt_stmt('return', function () {\n        if (funct === global_funct) {\n            this.warn('unexpected_a');\n        }\n        this.arity = 'statement';\n        if (next_token.id !== ';' && next_token.line === token.line) {\n            if (option.closure) {\n                spaces();\n            } else {\n                one_space_only();\n            }\n            if (next_token.id === '/' || next_token.id === '(regexp)') {\n                next_token.warn('wrap_regexp');\n            }\n            this.first = expression(0);\n            if (this.first.assign) {\n                this.first.warn('unexpected_a');\n            }\n        }\n        return this;\n    });\n\n    disrupt_stmt('throw', function () {\n        this.arity = 'statement';\n        one_space_only();\n        this.first = expression(20);\n        return this;\n    });\n\n\n//  Superfluous reserved words\n\n    reserve('class');\n    reserve('const');\n    reserve('enum');\n    reserve('export');\n    reserve('extends');\n    reserve('import');\n    reserve('super');\n\n// Harmony reserved words\n\n    reserve('implements');\n    reserve('interface');\n    reserve('let');\n    reserve('package');\n    reserve('private');\n    reserve('protected');\n    reserve('public');\n    reserve('static');\n    reserve('yield');\n\n\n// Parse JSON\n\n    function json_value() {\n\n        function json_object() {\n            var brace = next_token, object = Object.create(null);\n            advance('{');\n            if (next_token.id !== '}') {\n                while (next_token.id !== '(end)') {\n                    while (next_token.id === ',') {\n                        next_token.warn('unexpected_a');\n                        advance(',');\n                    }\n                    if (next_token.id !== '(string)') {\n                        next_token.warn('expected_string_a');\n                    }\n                    if (object[next_token.string] === true) {\n                        next_token.warn('duplicate_a');\n                    } else if (next_token.string === '__proto__') {\n                        next_token.warn('dangling_a');\n                    } else {\n                        object[next_token.string] = true;\n                    }\n                    advance();\n                    advance(':');\n                    json_value();\n                    if (next_token.id !== ',') {\n                        break;\n                    }\n                    advance(',');\n                    if (next_token.id === '}') {\n                        token.warn('unexpected_a');\n                        break;\n                    }\n                }\n            }\n            advance('}', brace);\n        }\n\n        function json_array() {\n            var bracket = next_token;\n            advance('[');\n            if (next_token.id !== ']') {\n                while (next_token.id !== '(end)') {\n                    while (next_token.id === ',') {\n                        next_token.warn('unexpected_a');\n                        advance(',');\n                    }\n                    json_value();\n                    if (next_token.id !== ',') {\n                        break;\n                    }\n                    advance(',');\n                    if (next_token.id === ']') {\n                        token.warn('unexpected_a');\n                        break;\n                    }\n                }\n            }\n            advance(']', bracket);\n        }\n\n        switch (next_token.id) {\n        case '{':\n            json_object();\n            break;\n        case '[':\n            json_array();\n            break;\n        case 'true':\n        case 'false':\n        case 'null':\n        case '(number)':\n        case '(string)':\n            advance();\n            break;\n        case '-':\n            advance('-');\n            no_space_only();\n            advance('(number)');\n            break;\n        default:\n            next_token.stop('unexpected_a');\n        }\n    }\n\n\n// The actual JSLINT function itself.\n\n    itself = function JSLint(the_source, the_option) {\n\n        var i, predef, tree;\n        itself.errors = [];\n        itself.tree = '';\n        itself.properties = '';\n        begin = prev_token = token = next_token =\n            Object.create(syntax['(begin)']);\n        tokens = [];\n        predefined = Object.create(null);\n        add_to_predefined(standard);\n        property = Object.create(null);\n        if (the_option) {\n            option = Object.create(the_option);\n            predef = option.predef;\n            if (predef) {\n                if (Array.isArray(predef)) {\n                    for (i = 0; i < predef.length; i += 1) {\n                        predefined[predef[i]] = true;\n                    }\n                } else if (typeof predef === 'object') {\n                    add_to_predefined(predef);\n                }\n            }\n        } else {\n            option = Object.create(null);\n        }\n        option.indent = +option.indent || 4;\n        option.maxerr = +option.maxerr || 50;\n        global_scope = scope = Object.create(null);\n        global_funct = funct = {\n            scope: scope,\n            loopage: 0,\n            level: 0\n        };\n        functions = [funct];\n        block_var = [];\n\n        comments = [];\n        comments_off = false;\n        in_block = false;\n        indent = null;\n        json_mode = false;\n        lookahead = [];\n        node_js = false;\n        prereg = true;\n        strict_mode = false;\n        var_mode = null;\n        warnings = 0;\n        lex.init(the_source);\n\n        assume();\n\n        try {\n            advance();\n            if (next_token.id === '(number)') {\n                next_token.stop('unexpected_a');\n            } else {\n                switch (next_token.id) {\n                case '{':\n                case '[':\n                    comments_off = true;\n                    json_mode = true;\n                    json_value();\n                    break;\n                default:\n\n// If the first token is a semicolon, ignore it. This is sometimes used when\n// files are intended to be appended to files that may be sloppy. A sloppy\n// file may be depending on semicolon insertion on its last line.\n\n                    step_in(1);\n                    if (next_token.id === ';' && !node_js) {\n                        next_token.edge = true;\n                        advance(';');\n                    }\n                    tree = statements();\n                    begin.first = tree;\n                    itself.tree = begin;\n                    if (tree.disrupt) {\n                        prev_token.warn('weird_program');\n                    }\n                }\n            }\n            indent = null;\n            advance('(end)');\n            itself.property = property;\n        } catch (e) {\n            if (e) {        // ~~\n                itself.errors.push({\n                    reason    : e.message,\n                    line      : e.line || next_token.line,\n                    character : e.character || next_token.from\n                }, null);\n            }\n        }\n        return itself.errors.length === 0;\n    };\n\n    function unique(array) {\n        array = array.sort();\n        var i, length = 0, previous, value;\n        for (i = 0; i < array.length; i += 1) {\n            value = array[i];\n            if (value !== previous) {\n                array[length] = value;\n                previous = value;\n                length += 1;\n            }\n        }\n        array.length = length;\n        return array;\n    }\n\n// Data summary.\n\n    itself.data = function () {\n        var data = {functions: []},\n            function_data,\n            i,\n            the_function,\n            the_scope;\n        data.errors = itself.errors;\n        data.json = json_mode;\n        data.global = unique(Object.keys(global_scope));\n\n        function selects(name) {\n            var kind = the_scope[name].kind;\n            switch (kind) {\n            case 'var':\n            case 'exception':\n            case 'label':\n                function_data[kind].push(name);\n                break;\n            }\n        }\n\n        for (i = 1; i < functions.length; i += 1) {\n            the_function = functions[i];\n            function_data = {\n                name: the_function.name,\n                line: the_function.line,\n                level: the_function.level,\n                parameter: the_function.parameter,\n                var: [],\n                exception: [],\n                closure: unique(the_function.closure),\n                outer: unique(the_function.outer),\n                global: unique(the_function.global),\n                label: []\n            };\n            the_scope = the_function.scope;\n            Object.keys(the_scope).forEach(selects);\n            function_data.var.sort();\n            function_data.exception.sort();\n            function_data.label.sort();\n            data.functions.push(function_data);\n        }\n        data.tokens = tokens;\n        return data;\n    };\n\n    itself.error_report = function (data) {\n        var evidence, i, output = [], warning;\n        if (data.errors.length) {\n            if (data.json) {\n                output.push('<cite>JSON: bad.</cite><br>');\n            }\n            for (i = 0; i < data.errors.length; i += 1) {\n                warning = data.errors[i];\n                if (warning) {\n                    evidence = warning.evidence || '';\n                    output.push('<cite>');\n                    if (isFinite(warning.line)) {\n                        output.push('<address>line ' +\n                            String(warning.line) +\n                            ' character ' + String(warning.character) +\n                            '</address>');\n                    }\n                    output.push(warning.reason.entityify() + '</cite>');\n                    if (evidence) {\n                        output.push('<pre>' + evidence.entityify() + '</pre>');\n                    }\n                }\n            }\n        }\n        return output.join('');\n    };\n\n\n    itself.report = function (data) {\n        var dl, i, j, names, output = [], the_function;\n\n        function detail(h, array) {\n            var comma_needed = false;\n            if (array.length) {\n                output.push(\"<dt>\" + h + \"</dt><dd>\");\n                array.forEach(function (item) {\n                    output.push((comma_needed ? ', ' : '') + item);\n                    comma_needed = true;\n                });\n                output.push(\"</dd>\");\n            }\n        }\n\n        output.push('<dl class=level0>');\n        if (data.global.length) {\n            detail('global', data.global);\n            dl = true;\n        } else if (data.json) {\n            if (!data.errors.length) {\n                output.push(\"<dt>JSON: good.</dt>\");\n            }\n        } else {\n            output.push(\"<dt><i>No new global variables introduced.</i></dt>\");\n        }\n        if (dl) {\n            output.push(\"</dl>\");\n        } else {\n            output[0] = '';\n        }\n\n        if (data.functions) {\n            for (i = 0; i < data.functions.length; i += 1) {\n                the_function = data.functions[i];\n                names = [];\n                if (the_function.params) {\n                    for (j = 0; j < the_function.params.length; j += 1) {\n                        names[j] = the_function.params[j].string;\n                    }\n                }\n                output.push('<dl class=level' + the_function.level +\n                    '><address>line ' + String(the_function.line) +\n                    '</address>' + the_function.name.entityify());\n                detail('parameter', the_function.parameter);\n                detail('variable', the_function.var);\n                detail('exception', the_function.exception);\n                detail('closure', the_function.closure);\n                detail('outer', the_function.outer);\n                detail('global', the_function.global);\n                detail('label', the_function.label);\n                output.push('</dl>');\n            }\n        }\n        return output.join('');\n    };\n\n    itself.properties_report = function (property) {\n        if (!property) {\n            return '';\n        }\n        var i,\n            key,\n            keys = Object.keys(property).sort(),\n            mem = '   ',\n            name,\n            not_first = false,\n            output = ['/*properties'];\n        for (i = 0; i < keys.length; i += 1) {\n            key = keys[i];\n            if (property[key] > 0) {\n                if (not_first) {\n                    mem += ',';\n                }\n                name = ix.test(key)\n                    ? key\n                    : '\\'' + key.replace(nx, sanitize) + '\\'';\n                if (mem.length + name.length >= 80) {\n                    output.push(mem);\n                    mem = '    ';\n                } else {\n                    mem += ' ';\n                }\n                mem += name;\n                not_first = true;\n            }\n        }\n        output.push(mem, '*/\\n');\n        return output.join('\\n');\n    };\n\n    itself.color = function (data) {\n        var from,\n            i = 1,\n            level,\n            line,\n            result = [],\n            thru,\n            data_token = data.tokens[0];\n        while (data_token && data_token.id !== '(end)') {\n            from = data_token.from;\n            line = data_token.line;\n            thru = data_token.thru;\n            level = data_token.function.level;\n            do {\n                thru = data_token.thru;\n                data_token = data.tokens[i];\n                i += 1;\n            } while (data_token && data_token.line === line &&\n                    data_token.from - thru < 5 &&\n                    level === data_token.function.level);\n            result.push({\n                line: line,\n                level: level,\n                from: from,\n                thru: thru\n            });\n        }\n        return result;\n    };\n\n    itself.jslint = itself;\n\n    itself.edition = '2014-07-08';\n\n    return itself;\n}());\n"],"file":"jslint.js"}