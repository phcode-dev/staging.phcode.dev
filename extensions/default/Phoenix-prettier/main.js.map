{"version":3,"sources":["extensions/default/Phoenix-prettier/main.js"],"names":["define","require","exports","module","AppInit","brackets","getModule","Strings","FileUtils","LanguageManager","BeautificationManager","PreferencesManager","Editor","ExtensionsWorker","prefs","getExtensionPrefs","definePreference","printWidth","semi","trailingComma","singleQuote","quoteProps","bracketSameLine","singleAttributePerLine","proseWrap","description","BEAUTIFY_OPTIONS","keys","type","BEAUTIFY_OPTION_PRINT_WIDTH","initial","BEAUTIFY_OPTION_SEMICOLON","BEAUTIFY_OPTION_PRINT_TRAILING_COMMAS","values","BEAUTIFY_OPTION_SINGLE_QUOTE","BEAUTIFY_OPTION_QUOTE_PROPS","BEAUTIFY_OPTION_PROSE_WRAP","BEAUTIFY_OPTION_BRACKET_SAME_LINE","BEAUTIFY_OPTION_SINGLE_ATTRIBUTE_PER_LINE","parsersForLanguage","html","xml","handlebars","svg","css","less","scss","javascript","jsx","json","typescript","php","markdown","gfm","yaml","_computePaddingForSelection","selectionLineText","chToStart","trimmedLine","trim","padding","substring","firstLinePadding","index","indexOf","_fixTabs","text","result","split","length","paddedText","lineEndingChar","sniffLineEndings","LINE_ENDINGS_LF","i","_adjustPrintWidthOption","prettierParams","paddingPercent","options","_trySelectionWithPartialText","editor","Promise","resolve","reject","console","log","selection","getSelection","document","getLine","start","line","ch","originalText","getText","getSelectedText","execPeer","then","response","changedText","ranges","replaceStart","replaceEnd","end","catch","_clone","obj","Object","assign","beautifyEditorProvider","filepath","file","fullPath","languageId","getLanguageForPath","getId","_loadPlugins","getSelections","get","indentWithTabs","getUseTabChar","parser","tabWidth","getTabSize","getSpaceUnits","useTabs","hasSelection","error","err","loadedPlugins","beautifyTextProvider","textToBeautify","filePathOrFileName","appReady","loadScriptInWorker","uri","registerBeautificationProvider"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global */\n//jshint-ignore:no-start\n/**\n * This module beautifies HTML/JS/other language code with the help of prettier plugin\n * See https://prettier.io/docs/en/api.html for how to use prettier API and other docs\n * To test variour prettier options, See https://prettier.io/playground/\n */\n\ndefine(function (require, exports, module) {\n\n    const AppInit = brackets.getModule(\"utils/AppInit\"),\n        Strings = brackets.getModule(\"strings\"),\n        FileUtils  = brackets.getModule(\"file/FileUtils\"),\n        LanguageManager = brackets.getModule(\"language/LanguageManager\"),\n        BeautificationManager = brackets.getModule(\"features/BeautificationManager\"),\n        PreferencesManager  = brackets.getModule(\"preferences/PreferencesManager\"),\n        Editor = brackets.getModule(\"editor/Editor\").Editor,\n        ExtensionsWorker = brackets.getModule(\"worker/ExtensionsWorker\");\n\n    const prefs = PreferencesManager.getExtensionPrefs(\"beautify\");\n    prefs.definePreference(\"options\", \"object\", {\n        printWidth: 80,\n        semi: true,\n        trailingComma: \"none\",\n        singleQuote: false,\n        quoteProps: \"as-needed\",\n        bracketSameLine: true,\n        singleAttributePerLine: false,\n        proseWrap: \"always\"\n    }, {\n        description: Strings.BEAUTIFY_OPTIONS,\n        keys: {\n            printWidth: {\n                type: \"number\",\n                description: Strings.BEAUTIFY_OPTION_PRINT_WIDTH,\n                initial: 80\n            },\n            semi: {\n                type: \"boolean\",\n                description: Strings.BEAUTIFY_OPTION_SEMICOLON,\n                initial: true\n            },\n            trailingComma: {\n                type: \"string\",\n                description: Strings.BEAUTIFY_OPTION_PRINT_TRAILING_COMMAS,\n                values: [\"none\", \"es5\", \"all\"],\n                initial: \"none\"\n            },\n            singleQuote: {\n                type: \"boolean\",\n                description: Strings.BEAUTIFY_OPTION_SINGLE_QUOTE,\n                initial: false\n            },\n            quoteProps: {\n                type: \"string\",\n                description: Strings.BEAUTIFY_OPTION_QUOTE_PROPS,\n                values: [\"as-needed\", \"consistent\", \"preserve\"],\n                initial: \"as-needed\"\n            },\n            proseWrap: {\n                type: \"string\",\n                description: Strings.BEAUTIFY_OPTION_PROSE_WRAP,\n                values: [\"always\", \"never\", \"preserve\"],\n                initial: \"always\"\n            },\n            bracketSameLine: {\n                type: \"boolean\",\n                description: Strings.BEAUTIFY_OPTION_BRACKET_SAME_LINE,\n                initial: true\n            },\n            singleAttributePerLine: {\n                type: \"boolean\",\n                description: Strings.BEAUTIFY_OPTION_SINGLE_ATTRIBUTE_PER_LINE,\n                initial: false\n            }\n        }\n    });\n\n    const parsersForLanguage = {\n        html: \"html\",\n        xml: \"html\",\n        handlebars: \"html\",\n        svg: \"html\",\n        css: \"css\",\n        less: \"less\",\n        scss: \"scss\",\n        javascript: \"babel\",\n        jsx: \"babel\",\n        json: \"json-stringify\",\n        typescript: \"typescript\",\n        php: \"php\",\n        markdown: \"markdown\",\n        gfm: \"markdown\",\n        yaml: \"yaml\"\n    };\n\n    function _computePaddingForSelection(selectionLineText, chToStart) {\n        let trimmedLine = selectionLineText.trim();\n        let padding = selectionLineText.substring(0, chToStart),\n            firstLinePadding = \"\";\n        if(trimmedLine){\n            let index = selectionLineText.indexOf(trimmedLine);\n            if(index > chToStart){\n                firstLinePadding = selectionLineText.substring(chToStart, index);\n            }\n            padding = selectionLineText.substring(0, index);\n        }\n        return {\n            padding, firstLinePadding\n        };\n    }\n\n    function _fixTabs(text, padding, firstLinePadding) {\n        const result = text.split(/\\r?\\n/);\n        if(!result || result.length === 0){\n            return text;\n        }\n\n        let paddedText = firstLinePadding + result[0].trim();\n        let length = result[result.length-1].trim() ? result.length : result.length - 1;\n        let lineEndingChar = FileUtils.sniffLineEndings(text) === FileUtils.LINE_ENDINGS_LF ? '\\n' : '\\r\\n';\n        for(let i=1; i<length; i++){\n            if(result[i].trim()){\n                paddedText = `${paddedText}${lineEndingChar}${padding}${result[i]}`;\n            } else {\n                // empty line\n                paddedText = `${paddedText}${lineEndingChar}${result[i]}`;\n            }\n        }\n        return paddedText;\n    }\n\n    /**\n     * In selections, we have to reduce line printWidth according to the padding before prettifying. We only do this\n     * if padding takes less than 70% of total line width.\n     * @param prettierParams\n     * @param padding\n     * @private\n     */\n    function _adjustPrintWidthOption(prettierParams, padding) {\n        let paddingPercent = (padding.length/prettierParams.options.printWidth) * 100;\n        if(paddingPercent < 70){\n            prettierParams.options.printWidth = prettierParams.options.printWidth - padding.length;\n        }\n    }\n\n    function _trySelectionWithPartialText(editor, prettierParams) {\n        return new Promise((resolve, reject)=>{\n            console.log(\"beautifying selection with partial text\");\n            let selection = editor.getSelection(),\n                selectionLineText = editor.document.getLine(selection.start.line);\n            let {padding, firstLinePadding} = _computePaddingForSelection(selectionLineText, selection.start.ch);\n            _adjustPrintWidthOption(prettierParams, padding);\n            let originalText = editor.document.getText();\n            prettierParams.text = editor.getSelectedText();\n            ExtensionsWorker.execPeer(\"prettify\", prettierParams).then(response=>{\n                if(!response || !response.text){\n                    reject();\n                    return;\n                }\n                resolve({\n                    originalText: originalText,\n                    changedText: _fixTabs(response.text, padding, firstLinePadding),\n                    ranges: {\n                        replaceStart: selection.start,\n                        replaceEnd: selection.end\n                    }\n                });\n            }).catch(reject);\n        });\n    }\n\n    function _clone(obj) {\n        return Object.assign({}, obj);\n    }\n\n    function beautifyEditorProvider(editor) {\n        return new Promise((resolve, reject)=>{\n            let filepath = editor.document.file.fullPath;\n            let languageId = LanguageManager.getLanguageForPath(filepath).getId();\n            _loadPlugins(languageId);\n            console.log(\"Beautifying with language id: \", languageId);\n\n            let selection = editor.getSelections();\n            if(!parsersForLanguage[languageId]\n                || selection.length >1){ // dont beautify on multiple selections or cursors\n                reject();\n                return;\n            }\n\n            let options = prefs.get(\"options\");\n            let indentWithTabs = Editor.getUseTabChar(filepath);\n            Object.assign(options, {\n                parser: parsersForLanguage[languageId],\n                tabWidth: indentWithTabs ? Editor.getTabSize() : Editor.getSpaceUnits(),\n                useTabs: indentWithTabs,\n                filepath: filepath\n            });\n            let prettierParams ={\n                text: editor.document.getText(),\n                options: options\n            };\n            if(editor.hasSelection()){\n                _trySelectionWithPartialText(editor, _clone(prettierParams)).then(resolve).catch(error=>{\n                    console.log(\"Could not prettify selection\", error);\n                    reject(error);\n                });\n            } else {\n                ExtensionsWorker.execPeer(\"prettify\", prettierParams).then(response=>{\n                    if(!response){\n                        reject();\n                        return;\n                    }\n                    resolve({\n                        originalText: prettierParams.text,\n                        changedText: response.text\n                    });\n                }).catch(err=>{\n                    console.log(\"Could not prettify text\", err);\n                    reject(err);\n                });\n            }\n        });\n    }\n\n    let loadedPlugins = {};\n    function _loadPlugins(languageId) {\n        if(!loadedPlugins[languageId] && parsersForLanguage[languageId]){\n            ExtensionsWorker.execPeer(\"loadPrettierPlugin\", parsersForLanguage[languageId]).catch(err=>{\n                console.error(\"Error Loading Prettier Plugin\", err);\n            });\n        }\n        loadedPlugins[languageId] = true;\n    }\n\n    AppInit.appReady(function () {\n        ExtensionsWorker.loadScriptInWorker(`${module.uri}/../worker/prettier-helper.js`);\n        BeautificationManager.registerBeautificationProvider(exports, Object.keys(parsersForLanguage));\n    });\n\n    function beautifyTextProvider(textToBeautify, filePathOrFileName) {\n        return new Promise((resolve, reject)=>{\n            let languageId = LanguageManager.getLanguageForPath(filePathOrFileName).getId();\n            _loadPlugins(languageId);\n            console.log(\"Beautifying text with language id: \", languageId);\n            let options = prefs.get(\"options\");\n            let indentWithTabs = Editor.getUseTabChar(filePathOrFileName);\n            Object.assign(options, {\n                parser: parsersForLanguage[languageId],\n                tabWidth: indentWithTabs ? Editor.getTabSize() : Editor.getSpaceUnits(),\n                useTabs: indentWithTabs,\n                filepath: filePathOrFileName\n            });\n            let prettierParams ={\n                text: textToBeautify,\n                options: options\n            };\n            ExtensionsWorker.execPeer(\"prettify\", prettierParams).then(response => {\n                if(!response){\n                    reject();\n                    return;\n                }\n                resolve({\n                    originalText: textToBeautify,\n                    changedText: response.text\n                });\n            }).catch(err=>{\n                console.log(\"Could not prettify text\", err);\n                reject(err);\n            });\n        });\n    }\n\n    exports.beautifyEditorProvider = beautifyEditorProvider;\n    exports.beautifyTextProvider = beautifyTextProvider;\n});\n\n\n"],"file":"main.js"}