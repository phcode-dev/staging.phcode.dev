{"version":3,"sources":["extensions/samples/TypingSpeedLogger/main.js"],"names":["define","require","exports","module","EditorManager","brackets","getModule","PerfUtils","requestAnimFrame","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","STRING_FIRSTPAINT","STRING_PAINTBEFORECHANGE","STRING_ONCHANGE","STRING_PAINTAFTERCHANGE","_getInputField","editor","_codeMirror","getInputField","initTypingSpeedLogging","inputField","inProgress","inputChangedHandler","markStart","repaintBeforeChangeHandler","isActive","addMeasurement","updateMeasurement","repaintAfterChangeHandler","finalizeMeasurement","onChangeHandler","event","change","off","on","updateFocusedEditor","focusedEditor","removeEventListener","addEventListener","getFocusedEditor"],"mappings":"AAqBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,cAAkBC,SAASC,UAAU,wBACrCC,UAAkBF,SAASC,UAAU,mBAIrCE,iBACOC,OAAOC,uBACVD,OAAOE,6BACPF,OAAOG,0BACPH,OAAOI,wBACPJ,OAAOK,yBACP,SAAUC,UACNN,OAAOO,WAAWD,SAAU,IAAO,KAI3CE,kBAA2B,8BAC3BC,yBAA2B,wCAC3BC,gBAA2B,oCAC3BC,wBAA2B,uCAE/B,SAASC,eAAeC,QACpB,OAAOA,OAAOC,YAAYC,gBAM9B,SAASC,yBACL,IAAIH,OAAS,KACTI,WAAa,KACbC,YAAa,EAEbC,oBAAsB,WAEtB,IAAID,WAAJ,CAIAA,YAAa,EAGbpB,UAAUsB,UAAU,CAChBZ,kBACAC,yBACAC,gBACAC,0BAGJ,IAAIU,2BAA6B,WACzBvB,UAAUwB,SAASd,oBACnBV,UAAUyB,eAAef,mBAGzBV,UAAUwB,SAASZ,mBAGnBZ,UAAU0B,kBAAkBf,0BAC5BV,iBAAiBsB,8BAIrBI,0BAA4B,WAC5B3B,UAAUyB,eAAeZ,yBAGzBb,UAAU4B,oBAAoBjB,0BAE9BS,YAAa,GAGbS,gBAAkB,SAAUC,MAAOf,OAAQgB,QAC3C/B,UAAUyB,eAAeb,iBACzBG,OAAOiB,IAAI,2BAA4BH,iBAEvC5B,iBAAiB0B,4BAGrB1B,iBAAiBsB,4BACjBR,OAAOkB,GAAG,2BAA4BJ,mBAGtCK,oBAAsB,SAAUC,eAC5BpB,QACAI,WAAWiB,oBAAoB,QAASf,qBAAqB,GAG7Dc,gBACApB,OAASoB,eACThB,WAAaL,eAAeqB,gBAIjBE,iBAAiB,QAAShB,qBAAqB,KAIlExB,cAAcoC,GAAG,qBAAsB,SAAUH,MAAOK,eACpDD,oBAAoBC,iBAExBD,oBAAoBrC,cAAcyC,oBAIlCpB","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\ndefine(function (require, exports, module) {\n\n\n    var EditorManager   = brackets.getModule(\"editor/EditorManager\"),\n        PerfUtils       = brackets.getModule(\"utils/PerfUtils\");\n\n    // https://paulirish.com/2011/requestanimationframe-for-smart-animating/\n    // shim layer with setTimeout fallback\n    var requestAnimFrame = (function () {\n        return window.requestAnimationFrame    ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame    ||\n            window.oRequestAnimationFrame      ||\n            window.msRequestAnimationFrame     ||\n            function (callback) {\n                window.setTimeout(callback, 1000 / 60);\n            };\n    }());\n\n    var STRING_FIRSTPAINT        = \"Typing Speed: First repaint\",\n        STRING_PAINTBEFORECHANGE = \"Typing Speed: Paint before DOM update\",\n        STRING_ONCHANGE          = \"Typing Speed: DOM update complete\",\n        STRING_PAINTAFTERCHANGE  = \"Typing Speed: Paint after DOM update\";\n\n    function _getInputField(editor) {\n        return editor._codeMirror.getInputField();\n    }\n\n    /**\n     * Installs input event handler on the current editor (full or inline).\n     */\n    function initTypingSpeedLogging() {\n        var editor = null,\n            inputField = null,\n            inProgress = false;\n\n        var inputChangedHandler = function () {\n            // CodeMirror's fastPoll will batch up input events into a consolidated change\n            if (inProgress) {\n                return;\n            }\n\n            inProgress = true;\n\n            // use a single markStart call so all start times are the same\n            PerfUtils.markStart([\n                STRING_FIRSTPAINT,\n                STRING_PAINTBEFORECHANGE,\n                STRING_ONCHANGE,\n                STRING_PAINTAFTERCHANGE\n            ]);\n\n            var repaintBeforeChangeHandler = function () {\n                if (PerfUtils.isActive(STRING_FIRSTPAINT)) {\n                    PerfUtils.addMeasurement(STRING_FIRSTPAINT);\n                }\n\n                if (PerfUtils.isActive(STRING_ONCHANGE)) {\n                    // don't know which paint event will be the last one,\n                    // so keep updating measurement until we hit onChange\n                    PerfUtils.updateMeasurement(STRING_PAINTBEFORECHANGE);\n                    requestAnimFrame(repaintBeforeChangeHandler);\n                }\n            };\n\n            var repaintAfterChangeHandler = function () {\n                PerfUtils.addMeasurement(STRING_PAINTAFTERCHANGE);\n\n                // need to tell PerfUtils that we are done updating this measurement\n                PerfUtils.finalizeMeasurement(STRING_PAINTBEFORECHANGE);\n\n                inProgress = false;\n            };\n\n            var onChangeHandler = function (event, editor, change) {\n                PerfUtils.addMeasurement(STRING_ONCHANGE);\n                editor.off(\"change.typingSpeedLogger\", onChangeHandler);\n\n                requestAnimFrame(repaintAfterChangeHandler);\n            };\n\n            requestAnimFrame(repaintBeforeChangeHandler);\n            editor.on(\"change.typingSpeedLogger\", onChangeHandler);\n        };\n\n        var updateFocusedEditor = function (focusedEditor) {\n            if (editor) {\n                inputField.removeEventListener(\"input\", inputChangedHandler, true);\n            }\n\n            if (focusedEditor) {\n                editor = focusedEditor;\n                inputField = _getInputField(focusedEditor);\n\n                // Listen for input changes in the capture phase, before\n                // CodeMirror's event handling.\n                inputField.addEventListener(\"input\", inputChangedHandler, true);\n            }\n        };\n\n        EditorManager.on(\"activeEditorChange\", function (event, focusedEditor) {\n            updateFocusedEditor(focusedEditor);\n        });\n        updateFocusedEditor(EditorManager.getFocusedEditor());\n    }\n\n    (function () {\n        initTypingSpeedLogging();\n    }());\n});\n"],"file":"main.js"}