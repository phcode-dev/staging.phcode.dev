{"version":3,"sources":["features/PriorityBasedRegistration.js"],"names":["define","require","exports","module","PreferencesManager","_providerSort","a","b","priority","RegistrationHandler","this","_providers","all","prototype","registerProvider","providerInfo","languageIds","providerObj","provider","self","forEach","languageId","push","sort","removeProvider","targetLanguageId","index","providers","targetLanguageIdArr","Array","isArray","Object","keys","length","splice","getProvidersForLanguageId","concat","filter","prefKey","constructor","name","get"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,mBAAqBH,QAAQ,kCAKjC,SAASI,cAAcC,EAAGC,GACtB,OAAOA,EAAEC,SAAWF,EAAEE,SAI1B,SAASC,sBACLC,KAAKC,WAAa,CACdC,IAAO,IAqBfH,oBAAoBI,UAAUC,iBAAmB,SAAUC,aAAcC,YAAaR,UAClF,IAAIS,YAAc,CACVC,SAAUH,aACVP,SAAUA,UAAY,GAE1BW,KAAOT,KAEXM,YAAYI,QAAQ,SAAUC,YACrBF,KAAKR,WAAWU,cACjBF,KAAKR,WAAWU,YAAc,IAElCF,KAAKR,WAAWU,YAAYC,KAAKL,aACjCE,KAAKR,WAAWU,YAAYE,KAAKlB,kBAWzCI,oBAAoBI,UAAUW,eAAiB,SAAUN,SAAUO,kBAC/D,IAAIC,MACAC,UACAC,oBACAT,KAAOT,MAGPkB,oBADAC,MAAMC,QAAQL,kBACQA,iBACfA,iBACe,CAACA,kBAEDM,OAAOC,KAAKb,KAAKR,aAGvBS,QAAQ,SAAUC,YAGlC,IAFAM,UAAYR,KAAKR,WAAWU,YAEvBK,MAAQ,EAAGA,MAAQC,UAAUM,OAAQP,QACtC,GAAIC,UAAUD,OAAOR,WAAaA,SAAU,CACxCS,UAAUO,OAAOR,MAAO,GACxB,UAOhBjB,oBAAoBI,UAAUsB,0BAA4B,SAAUd,YAChE,IAAIM,UAMJ,OANiBjB,KAAKC,WAAWU,aAAe,IAAIe,OAAO1B,KAAKC,WAAWC,KAAO,IAC7EW,KAAKlB,eAKOgC,OAAO,SAAUnB,UAC9B,IAAIoB,QAAU,WAAapB,SAASA,SAASqB,YAAYC,KACzD,OAA2C,IAApCpC,mBAAmBqC,IAAIH,YAKtCpC,QAAQO,oBAAsBA","sourcesContent":["/*\n * Copyright (c) 2019 - present Adobe. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/* eslint-disable indent */\ndefine(function (require, exports, module) {\n\n\n    var PreferencesManager = require(\"preferences/PreferencesManager\");\n\n    /**\n     * Comparator to sort providers from high to low priority\n     */\n    function _providerSort(a, b) {\n        return b.priority - a.priority;\n    }\n\n\n    function RegistrationHandler() {\n        this._providers = {\n            \"all\": []\n        };\n    }\n\n    /**\n     * The method by which a Provider registers its willingness to\n     * providing tooling feature for editors in a given language.\n     *\n     * @param {!Provider} provider\n     * The provider to be registered, described below.\n     *\n     * @param {!Array.<string>} languageIds\n     * The set of language ids for which the provider is capable of\n     * providing tooling feature. If the special language id name \"all\" is included then\n     * the provider may be called for any language.\n     *\n     * @param {?number} priority\n     * Used to break ties among providers for a particular language.\n     * Providers with a higher number will be asked for tooling before those\n     * with a lower priority value. Defaults to zero.\n     */\n    RegistrationHandler.prototype.registerProvider = function (providerInfo, languageIds, priority) {\n        var providerObj = {\n                provider: providerInfo,\n                priority: priority || 0\n            },\n            self = this;\n\n        languageIds.forEach(function (languageId) {\n            if (!self._providers[languageId]) {\n                self._providers[languageId] = [];\n            }\n            self._providers[languageId].push(providerObj);\n            self._providers[languageId].sort(_providerSort);\n        });\n    };\n\n    /**\n     * Remove a code hint provider\n     * @param {!CodeHintProvider} provider Code hint provider to remove\n     * @param {(string|Array.<string>)=} targetLanguageId Optional set of\n     *     language IDs for languages to remove the provider for. Defaults\n     *     to all languages.\n     */\n    RegistrationHandler.prototype.removeProvider = function (provider, targetLanguageId) {\n        var index,\n            providers,\n            targetLanguageIdArr,\n            self = this;\n\n        if (Array.isArray(targetLanguageId)) {\n            targetLanguageIdArr = targetLanguageId;\n        } else if (targetLanguageId) {\n            targetLanguageIdArr = [targetLanguageId];\n        } else {\n            targetLanguageIdArr = Object.keys(self._providers);\n        }\n\n        targetLanguageIdArr.forEach(function (languageId) {\n            providers = self._providers[languageId];\n\n            for (index = 0; index < providers.length; index++) {\n                if (providers[index].provider === provider) {\n                    providers.splice(index, 1);\n                    break;\n                }\n            }\n        });\n    };\n\n\n    RegistrationHandler.prototype.getProvidersForLanguageId = function (languageId) {\n        var providers = (this._providers[languageId] || []).concat(this._providers.all || [])\n            .sort(_providerSort);\n\n        // Exclude providers that are explicitly disabled in the preferences.\n        // All providers that do not have their constructor\n        // names listed in the preferences are enabled by default.\n        return providers.filter(function (provider) {\n            var prefKey = \"tooling.\" + provider.provider.constructor.name;\n            return PreferencesManager.get(prefKey) !== false;\n        });\n    };\n\n\n    exports.RegistrationHandler = RegistrationHandler;\n});\n"],"file":"PriorityBasedRegistration.js"}