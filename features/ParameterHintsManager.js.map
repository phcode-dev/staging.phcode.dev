{"version":3,"sources":["features/ParameterHintsManager.js"],"names":["define","require","exports","module","_","Commands","AppInit","CommandManager","EditorManager","Menus","KeyEvent","Strings","KeyBindingManager","ProviderRegistrationHandler","RegistrationHandler","SHOW_PARAMETER_HINT_CMD_ID","hintContainerHTML","KeyboardPrefs","key","platform","$hintContainer","$hintContent","hintState","lastChar","sessionEditor","keyDownEditor","POINTER_TOP_OFFSET","POSITION_BELOW_OFFSET","handleCursorActivity","_providerRegistrationHandler","registerHintProvider","registerProvider","bind","removeHintProvider","removeProvider","positionHint","xpos","ypos","ybot","hintWidth","width","hintHeight","top","height","left","$editorHolder","$","editorLeft","undefined","offset","Math","max","min","removeClass","addClass","_formatParameterHint","functionName","params","appendSeparators","appendParameter","typesOnly","result","pendingOptional","forEach","value","i","param","label","type","documentation","separators","isOptional","name","_formatHint","editor","hints","append","index","currentIndex","escape","empty","parameters","length","token","getToken","functionCallPos","string","NO_ARGUMENTS","dismissHint","visible","hide","setCanConsumeEscapeKeyEvent","off","popUpHint","explicit","onCursorActivity","request","$deferredPopUp","Deferred","sessionProvider","language","getLanguageForSelection","enabledProviders","getProvidersForLanguageId","getId","some","item","provider","hasParameterHints","getParameterHints","done","parameterHint","cm","_codeMirror","pos","getCursorPos","charCoords","show","bottom","on","resolveWith","fail","_globalKeyDownHook","event","keyCode","DOM_VK_ESCAPE","installListeners","addGlobalKeydownHook","_handleChange","_handleKeypressEvent","uninstallListeners","removeGlobalKeydownHook","jqEvent","String","fromCharCode","charCode","changeList","activeEditorChangeHandler","current","previous","document","handleShowParameterHint","getActiveEditor","appReady","register","CMD_SHOW_PARAMETER_HINT","menu","getMenu","AppMenuBar","EDIT_MENU","addMenuItem","AFTER","SHOW_CODE_HINTS","appendTo","find","commandId"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 - present Adobe. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/* eslint max-len: [\"error\", { \"code\": 200 }]*/\ndefine(function (require, exports, module) {\n\n\n    var _ = require(\"thirdparty/lodash\");\n\n    var Commands = require(\"command/Commands\"),\n        AppInit = require(\"utils/AppInit\"),\n        CommandManager = require(\"command/CommandManager\"),\n        EditorManager = require(\"editor/EditorManager\"),\n        Menus = require(\"command/Menus\"),\n        KeyEvent = require(\"utils/KeyEvent\"),\n        Strings = require(\"strings\"),\n        KeyBindingManager = require(\"command/KeyBindingManager\"),\n        ProviderRegistrationHandler = require(\"features/PriorityBasedRegistration\").RegistrationHandler;\n\n\n    /** @const {string} Show Function Hint command ID */\n    var SHOW_PARAMETER_HINT_CMD_ID = \"showParameterHint\", // string must MATCH string in native code (brackets_extensions)\n        hintContainerHTML = require(\"text!htmlContent/parameter-hint-template.html\"),\n        KeyboardPrefs = {\n            \"showParameterHint\": [\n                {\n                    \"key\": \"Ctrl-Shift-Space\"\n                },\n                {\n                    \"key\": \"Ctrl-Shift-Space\",\n                    \"platform\": \"mac\"\n                }\n            ]\n        };\n\n    var $hintContainer, // function hint container\n        $hintContent, // function hint content holder\n        hintState = {},\n        lastChar = null,\n        sessionEditor = null,\n        keyDownEditor = null;\n\n    // Constants\n    var POINTER_TOP_OFFSET = 4, // Size of margin + border of hint.\n        POSITION_BELOW_OFFSET = 4; // Amount to adjust to top position when the preview bubble is below the text\n\n    // keep jslint from complaining about handleCursorActivity being used before\n    // it was defined.\n    var handleCursorActivity;\n\n    var _providerRegistrationHandler = new ProviderRegistrationHandler(),\n        registerHintProvider = _providerRegistrationHandler.registerProvider.bind(_providerRegistrationHandler),\n        removeHintProvider = _providerRegistrationHandler.removeProvider.bind(_providerRegistrationHandler);\n\n    /**\n     * Position a function hint.\n     *\n     * @param {number} xpos\n     * @param {number} ypos\n     * @param {number} ybot\n     */\n    function positionHint(xpos, ypos, ybot) {\n        var hintWidth = $hintContainer.width(),\n            hintHeight = $hintContainer.height(),\n            top = ypos - hintHeight - POINTER_TOP_OFFSET,\n            left = xpos,\n            $editorHolder = $(\"#editor-holder\"),\n            editorLeft;\n\n        if ($editorHolder.offset() === undefined) {\n            // this happens in jasmine tests that run\n            // without a windowed document.\n            return;\n        }\n\n        editorLeft = $editorHolder.offset().left;\n        left = Math.max(left, editorLeft);\n        left = Math.min(left, editorLeft + $editorHolder.width() - hintWidth);\n\n        if (top < 0) {\n            $hintContainer.removeClass(\"preview-bubble-above\");\n            $hintContainer.addClass(\"preview-bubble-below\");\n            top = ybot + POSITION_BELOW_OFFSET;\n            $hintContainer.offset({\n                left: left,\n                top: top\n            });\n        } else {\n            $hintContainer.removeClass(\"preview-bubble-below\");\n            $hintContainer.addClass(\"preview-bubble-above\");\n            $hintContainer.offset({\n                left: left,\n                top: top - POINTER_TOP_OFFSET\n            });\n        }\n    }\n\n    /**\n     * Format the given parameter array. Handles separators between\n     * parameters, syntax for optional parameters, and the order of the\n     * parameter type and parameter name.\n     *\n     * @param editor\n     * @param {!Array.<{name: string, type: string, isOptional: boolean}>} params -\n     * array of parameter descriptors\n     * @param {function(string)=} appendSeparators - callback function to append separators.\n     * The separator is passed to the callback.\n     * @param {function(string, string, number)=} appendParameter - callback function to append parameter.\n     * The formatted parameter type and name is passed to the callback along with the\n     * current index of the parameter.\n     * @param {boolean=} typesOnly - only show parameter types. The\n     * default behavior is to include both parameter names and types.\n     * @return {string} - formatted parameter hint\n     */\n    function _formatParameterHint(functionName, params, appendSeparators, appendParameter, typesOnly) {\n        var result = \"\",\n            pendingOptional = false;\n\n        appendParameter(`${functionName}(`, \"\", -1);\n        params.forEach(function (value, i) {\n            var param = value.label || value.type,\n                documentation = value.documentation,\n                separators = \"\";\n\n            if (value.isOptional) {\n                // if an optional param is following by an optional parameter, then\n                // terminate the bracket. Otherwise enclose a required parameter\n                // in the same bracket.\n                if (pendingOptional) {\n                    separators += \"]\";\n                }\n\n                pendingOptional = true;\n            }\n\n            if (i > 0) {\n                separators += \", \";\n            }\n\n            if (value.isOptional) {\n                separators += \"[\";\n            }\n\n            if (appendSeparators) {\n                appendSeparators(separators);\n            }\n\n            result += separators;\n\n            if (!typesOnly && value.name) {\n                param += \" \" + value.name;\n            }\n\n            if (appendParameter) {\n                appendParameter(param, documentation, i);\n            }\n\n            result += param;\n\n        });\n\n        if (pendingOptional) {\n            if (appendSeparators) {\n                appendSeparators(\"]\");\n            }\n\n            result += \"]\";\n        }\n        appendParameter(\")\", \"\", -1);\n\n        return result;\n    }\n\n    /**\n     *  Bold the parameter at the caret.\n     *\n     *  @param {{inFunctionCall: boolean, functionCallPos: {line: number, ch: number}}} functionInfo -\n     *  tells if the caret is in a function call and the position\n     *  of the function call.\n     */\n    function _formatHint(editor, hints) {\n        $hintContent.empty();\n        $hintContent.addClass(\"brackets-hints\");\n\n        function appendSeparators(separators) {\n            $hintContent.append(separators);\n        }\n\n        function appendParameter(param, documentation, index) {\n            if (hints.currentIndex === index) {\n                $hintContent.append($(\"<span>\")\n                    .append(_.escape(param))\n                    .addClass(\"current-parameter\"));\n            } else {\n                $hintContent.append($(\"<span>\")\n                    .append(_.escape(param))\n                    .addClass(\"parameter\"));\n            }\n        }\n\n        if (hints.parameters.length > 0) {\n            let token = editor.getToken(hints.functionCallPos);\n            _formatParameterHint(token.string, hints.parameters, appendSeparators, appendParameter);\n        } else {\n            $hintContent.append(_.escape(Strings.NO_ARGUMENTS));\n        }\n    }\n\n    /**\n     * Dismiss the function hint.\n     *\n     */\n    function dismissHint(editor) {\n        if (hintState.visible) {\n            $hintContainer.hide();\n            $hintContent.empty();\n            hintState = {};\n\n            if (editor) {\n                editor.setCanConsumeEscapeKeyEvent(\"ParameterHinting\", false);\n                editor.off(\"cursorActivity.ParameterHinting\", handleCursorActivity);\n                sessionEditor = null;\n            } else if (sessionEditor) {\n                sessionEditor.setCanConsumeEscapeKeyEvent(\"ParameterHinting\", false);\n                sessionEditor.off(\"cursorActivity.ParameterHinting\", handleCursorActivity);\n                sessionEditor = null;\n            }\n        }\n    }\n\n    /**\n     * Pop up a function hint on the line above the caret position.\n     *\n     * @param {object=} editor - current Active Editor\n     * @param {boolean} True if hints are invoked through cursor activity.\n     * @return {jQuery.Promise} - The promise will not complete until the\n     *      hint has completed. Returns null, if the function hint is already\n     *      displayed or there is no function hint at the cursor.\n     *\n     */\n    function popUpHint(editor, explicit, onCursorActivity) {\n        var request = null;\n        var $deferredPopUp = $.Deferred();\n        var sessionProvider = null;\n\n        dismissHint(editor);\n        editor.setCanConsumeEscapeKeyEvent(\"ParameterHinting\", true);\n        // Find a suitable provider, if any\n        var language = editor.getLanguageForSelection(),\n            enabledProviders = _providerRegistrationHandler.getProvidersForLanguageId(language.getId());\n\n        enabledProviders.some(function (item, index) {\n            if (item.provider.hasParameterHints(editor, lastChar)) {\n                sessionProvider = item.provider;\n                return true;\n            }\n        });\n\n        if (sessionProvider) {\n            request = sessionProvider.getParameterHints(explicit, onCursorActivity);\n        }\n\n        if (request) {\n            request.done(function (parameterHint) {\n                var cm = editor._codeMirror,\n                    pos = parameterHint.functionCallPos || editor.getCursorPos();\n\n                pos = cm.charCoords(pos);\n                _formatHint(editor, parameterHint);\n\n                $hintContainer.show();\n                positionHint(pos.left, pos.top, pos.bottom);\n                hintState.visible = true;\n\n                sessionEditor = editor;\n                editor.on(\"cursorActivity.ParameterHinting\", handleCursorActivity);\n                $deferredPopUp.resolveWith(null);\n            }).fail(function () {\n                hintState = {};\n            });\n        }\n\n        return $deferredPopUp;\n    }\n\n    /**\n     *  Show the parameter the cursor is on in bold when the cursor moves.\n     *  Dismiss the pop up when the cursor moves off the function.\n     */\n    handleCursorActivity = function (event, editor) {\n        if (editor) {\n            popUpHint(editor, false, true);\n        } else {\n            dismissHint();\n        }\n    };\n\n    function _globalKeyDownHook(event) {\n        if (event.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n            dismissHint();\n        }\n    }\n\n    /**\n     * Install function hint listeners.\n     *\n     * @param {Editor} editor - editor context on which to listen for\n     *      changes\n     */\n    function installListeners(editor) {\n        KeyBindingManager.addGlobalKeydownHook(_globalKeyDownHook);\n        editor.on(\"scroll.ParameterHinting\", function () {\n            dismissHint(editor);\n        })\n            .on(\"editorChange.ParameterHinting\", _handleChange)\n            .on(\"keypress.ParameterHinting\", _handleKeypressEvent);\n    }\n\n    /**\n     * Clean up after installListeners()\n     * @param {!Editor} editor\n     */\n    function uninstallListeners(editor) {\n        KeyBindingManager.removeGlobalKeydownHook(_globalKeyDownHook);\n        editor.off(\".ParameterHinting\");\n    }\n\n    function _handleKeypressEvent(jqEvent, editor, event) {\n        keyDownEditor = editor;\n        // Last inserted character, used later by handleChange\n        lastChar = String.fromCharCode(event.charCode);\n    }\n\n    /**\n     * Start a new implicit hinting session, or update the existing hint list.\n     * Called by the editor after handleKeyEvent, which is responsible for setting\n     * the lastChar.\n     *\n     * @param {Event} event\n     * @param {Editor} editor\n     * @param {{from: Pos, to: Pos, text: Array, origin: string}} changeList\n     */\n    function _handleChange(event, editor, changeList) {\n        if (lastChar && (lastChar === '(' || lastChar === ',') && editor === keyDownEditor) {\n            keyDownEditor = null;\n            popUpHint(editor);\n        }\n    }\n\n    function activeEditorChangeHandler(event, current, previous) {\n\n        if (previous) {\n            //Removing all old Handlers\n            previous.document\n                .off(\"languageChanged.ParameterHinting\");\n            uninstallListeners(previous);\n        }\n\n        if (current) {\n            current.document\n                .on(\"languageChanged.ParameterHinting\", function () {\n                    // If current doc's language changed, reset our state by treating it as if the user switched to a\n                    // different document altogether\n                    uninstallListeners(current);\n                    installListeners(current);\n                });\n            installListeners(current);\n        }\n    }\n\n    /**\n     * Show a parameter hint in its own pop-up.\n     *\n     */\n    function handleShowParameterHint() {\n        var editor = EditorManager.getActiveEditor();\n        // Pop up function hint\n        popUpHint(editor, true, false);\n    }\n\n    AppInit.appReady(function () {\n        CommandManager.register(Strings.CMD_SHOW_PARAMETER_HINT, SHOW_PARAMETER_HINT_CMD_ID, handleShowParameterHint);\n\n        // Add the menu items\n        var menu = Menus.getMenu(Menus.AppMenuBar.EDIT_MENU);\n        if (menu) {\n            menu.addMenuItem(SHOW_PARAMETER_HINT_CMD_ID, KeyboardPrefs.showParameterHint, Menus.AFTER, Commands.SHOW_CODE_HINTS);\n        }\n        // Create the function hint container\n        $hintContainer = $(hintContainerHTML).appendTo($(\"body\"));\n        $hintContent = $hintContainer.find(\".function-hint-content-new\");\n        activeEditorChangeHandler(null, EditorManager.getActiveEditor(), null);\n\n        EditorManager.on(\"activeEditorChange\", activeEditorChangeHandler);\n\n        CommandManager.on(\"beforeExecuteCommand\", function (event, commandId) {\n            if (commandId !== SHOW_PARAMETER_HINT_CMD_ID &&\n                commandId !== Commands.SHOW_CODE_HINTS) {\n                dismissHint();\n            }\n        });\n    });\n\n    exports.registerHintProvider = registerHintProvider;\n    exports.removeHintProvider = removeHintProvider;\n});\n"],"file":"ParameterHintsManager.js"}