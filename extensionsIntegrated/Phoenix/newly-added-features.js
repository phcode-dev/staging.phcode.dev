define(function(require,exports,module){const FileViewController=require("project/FileViewController"),DocumentManager=require("document/DocumentManager"),FileSystem=require("filesystem/FileSystem"),FileUtils=require("file/FileUtils"),Metrics=require("utils/Metrics");function _getUpdateMarkdownURL(){return Phoenix.baseURL+"assets/default-project/en/Newly_added_features.md"}function _getUpdateMarkdownLocalPath(){return Phoenix.VFS.getDefaultProjectDir()+"Newly_added_features.md"}async function _getUpdateMarkdownText(){return new Promise((resolve,reject)=>{fetch(_getUpdateMarkdownURL()).then(response=>response.text()).then(async function(text){resolve(text)}).catch(reject)})}function _showNewFeatureMarkdownDoc(){setTimeout(()=>{FileViewController.openFileAndAddToWorkingSet(_getUpdateMarkdownLocalPath()),Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM,"newFeatMD","shown")},3e3)}function _cacheUpdatedCB(err){err?Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM,"cache","errorRefresh"):(Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM,"cache",`${window.Phoenix.cache.updatePendingReloadReason}.done`),Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM,"cache","updateCount",window.Phoenix.cache.updatedFilesCount||0))}async function _readMarkdownTextFile(){try{let markdownFile=FileSystem.getFileForPath(_getUpdateMarkdownLocalPath());return await window.jsPromise(DocumentManager.getDocumentText(markdownFile))}catch(e){return""}}async function _showNewUpdatesIfPresent(){let newMarkdownText=(await _getUpdateMarkdownText()).replace(/\r/g,""),currentMarkdownText;if(newMarkdownText!==(await _readMarkdownTextFile()).replace(/\r/g,"")){let markdownFile=FileSystem.getFileForPath(_getUpdateMarkdownLocalPath());FileUtils.writeText(markdownFile,newMarkdownText,!0).done(_showNewFeatureMarkdownDoc).fail(e=>{console.error("Error while showing new feature markdown on update",e)})}}exports.init=function(){Phoenix.firstBoot||window.testEnvironment||_showNewUpdatesIfPresent(),!Phoenix.browser.isTauri&&window.refreshServiceWorkerCache&&(Metrics.countEvent(Metrics.EVENT_TYPE.PLATFORM,"cache","doRefresh"),window.refreshServiceWorkerCache(_cacheUpdatedCB))}});
//# sourceMappingURL=newly-added-features.js.map
