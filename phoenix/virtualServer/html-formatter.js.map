{"version":3,"sources":["phoenix/virtualServer/html-formatter.js"],"names":["importScripts","self","HtmlFormatter","formatDate","d","day","getDate","month","toLocaleString","year","getFullYear","hours","getHours","mins","getMinutes","formatSize","s","units","i","Math","floor","log","round","pow","formatRow","icon","alt","href","name","modified","size","icons","unknown","Date","footerClose","format404","url","body","config","status","statusText","headers","Content-Type","format500","path","err","message","formatDir","route","dirPath","entries","parent","dirname","encodeURI","header","blank","back","footer","rows","map","entry","entryName","ext","extname","join","ContentType","isImage","image2","isMedia","movie","text","folder","mtime","formatFile","content","getMimeType"],"mappings":"AAwBA,GAHAA,cAAc,yCACdA,cAAc,mCAEVC,KAAKC,cAAc,CAEnB,MAAMC,WAAaC,IACf,MAAMC,IAAMD,EAAEE,UACRC,MAAQH,EAAEI,eAAe,QAAS,CAACD,MAAO,UAC1CE,KAAOL,EAAEM,cACTC,MAAQP,EAAEQ,WACVC,KAAOT,EAAEU,aACf,SAAUT,OAAOE,SAASE,QAAQE,SAASE,QAGzCE,WAAaC,IACf,MAAMC,MAAQ,CAAC,GAAI,IAAK,KACxB,IAAKD,EACD,MAAO,IAEX,MAAME,EAAIC,KAAKC,MAAMD,KAAKE,IAAIL,GAAKG,KAAKE,IAAI,OAC5C,OAAOF,KAAKG,MAAMN,EAAIG,KAAKI,IAAI,KAAML,GAAI,GAAKD,MAAMC,IAGlDM,UAAY,CACdC,KACAC,IAAM,QACNC,KACAC,KACAC,SACAC,yCACmCL,MAAQM,MAAMC,iBAAiBN,kCACzDC,SAASC,0CACAzB,WAAW,IAAI8B,KAAKJ,4CACpBd,WAAWe,iCAE3BI,YAAc,+DAKpB,SAASC,UAAUC,KACf,MAAMC,uJAMaD,kDACjBF,cAEF,MAAO,CACHG,KAAAA,KACAC,OAAQ,CACJC,OAAQ,IACRC,WAAY,YACZC,QAAS,CAACC,eAAgB,eAQtC,SAASC,UAAUC,KAAMC,KACrB,MAAMR,iOAM+DO,oCACrDC,IAAIC,yBAClBZ,cAEF,MAAO,CACHG,KAAAA,KACAC,OAAQ,CACJC,OAAQ,IACRC,WAAY,iBACZC,QAAS,CAACC,eAAgB,eAQtC,SAASK,UAAUC,MAAOC,QAASC,SAC/B,MAAMC,OAASlD,KAAK2C,KAAKQ,QAAQH,UAAY,IAEvCb,IAAMiB,UAAUL,MAAQG,QACxBG,iEAEoBL,kDACTA,8CACMlB,MAAMwB,yNAIAxB,MAAMyB,6CACxBpB,qGAELqB,oDAAsDvB,cAEtDwB,KAAOR,QAAQS,IAAIC,QACrB,IAAIC,UAAYD,MAAMhC,MAAQgC,MAC9B,MAAME,IAAM7D,KAAK2C,KAAKmB,QAAQF,WAExBlC,KAAO0B,aAAaL,QAAQ/C,KAAK2C,KAAKoB,KAAKf,QAASY,cAC1D,IAAIpC,KACAC,IAiBJ,OAdIuC,YAAYC,QAAQJ,MACpBrC,KAAOM,MAAMoC,OACbzC,IAAM,SACCuC,YAAYG,QAAQN,MAC3BrC,KAAOM,MAAMsC,MACb3C,IAAM,SACEoC,KAIRrC,KAAOM,MAAMuC,KACb5C,IAAM,UAJND,KAAOM,MAAMwC,OACb7C,IAAM,SAMHF,UAAUC,KAAMC,IAAKC,KAAMkC,UAAWD,MAAMY,MAAOZ,MAAM9B,QACjEkC,KAAK,MAER,MAAO,CACH3B,KAAMiB,OAASI,KAAOD,OACtBnB,OAAQ,CACJC,OAAQ,IACRC,WAAY,KACZC,QAAS,CAACC,eAAgB,eAKtC,SAAS+B,WAAW7B,KAAM8B,SACtB,MAAO,CACHrC,KAAMqC,QACNpC,OAAQ,CACJC,OAAQ,IACRC,WAAY,KACZC,QAAS,CAACC,eAAgBuB,YAAYU,YAAY/B,SAK9D3C,KAAKC,cAAgB,CACjBiC,UAAAA,UACAQ,UAAAA,UACAI,UAAAA,UACA0B,WAAAA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * modified by core.ai, based on work by David Humphrey <david.humphrey@senecacolleage.ca> (@humphd)\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/* global ContentType, importScripts, icons*/\n\nimportScripts('phoenix/virtualServer/content-type.js');\nimportScripts('phoenix/virtualServer/icons.js');\n\nif(!self.HtmlFormatter){\n// 20-Apr-2004 17:14\n    const formatDate = d => {\n        const day = d.getDate();\n        const month = d.toLocaleString('en-us', {month: 'short'});\n        const year = d.getFullYear();\n        const hours = d.getHours();\n        const mins = d.getMinutes();\n        return `${day}-${month}-${year} ${hours}:${mins}`;\n    };\n\n    const formatSize = s => {\n        const units = ['', 'K', 'M'];\n        if (!s) {\n            return '-';\n        }\n        const i = Math.floor(Math.log(s) / Math.log(1024));\n        return Math.round(s / Math.pow(1024, i), 2) + units[i];\n    };\n\n    const formatRow = (\n        icon,\n        alt = '[   ]',\n        href,\n        name,\n        modified,\n        size\n    ) => `<tr><td valign='top'><img src='${icon || icons.unknown}' alt='${alt}'></td><td>\n      <a href='${href}'>${name}</a></td>\n      <td align='right'>${formatDate(new Date(modified))}</td>\n      <td align='right'>${formatSize(size)}</td><td>&nbsp;</td></tr>`;\n\n    const footerClose = '<address>nohost (Web Browser Server)</address></body></html>';\n\n    /**\n     * Send an Apache-style 404\n     */\n    function format404(url) {\n        const body = `\n    <!DOCTYPE html>\n    <html><head>\n    <title>404 Not Found</title>\n    </head><body>\n    <h1>Not Found</h1>\n    <p>The requested URL ${url} was not found on this server.</p>\n    <hr>${footerClose}`;\n\n        return {\n            body,\n            config: {\n                status: 404,\n                statusText: 'Not Found',\n                headers: {'Content-Type': 'text/html'}\n            }\n        };\n    }\n\n    /**\n     * Send an Apache-style 500\n     */\n    function format500(path, err) {\n        const body = `\n    <!DOCTYPE html>\n    <html><head>\n    <title>500 Internal Server Error</title>\n    </head><body>\n    <h1>Internal Server Error</h1>\n    <p>The server encountered an internal error while attempting to access ${path}.</p>\n    <p>The error was: ${err.message}.</p>\n    <hr>${footerClose}`;\n\n        return {\n            body,\n            config: {\n                status: 500,\n                statusText: 'Internal Error',\n                headers: {'Content-Type': 'text/html'}\n            }\n        };\n    }\n\n    /**\n     * Send an Apache-style directory listing\n     */\n    function formatDir(route, dirPath, entries) {\n        const parent = self.path.dirname(dirPath) || '/';\n        // Maintain path sep, but deal with things like spaces in filenames\n        const url = encodeURI(route + parent);\n        const header = `\n    <!DOCTYPE html>\n    <html><head><title>Index of ${dirPath}</title></head>\n    <body><h1>Index of ${dirPath}</h1>\n    <table><tr><th><img src='${icons.blank}' alt='[ICO]'></th>\n    <th><b>Name</b></th><th><b>Last modified</b></th>\n    <th><b>Size</b></th><th><b>Description</b></th></tr>\n    <tr><th colspan='5'><hr></th></tr>\n    <tr><td valign='top'><img src='${icons.back}' alt='[DIR]'></td>\n    <td><a href='${url}'>Parent Directory</a></td><td>&nbsp;</td>\n    <td align='right'>  - </td><td>&nbsp;</td></tr>`;\n        const footer = `<tr><th colspan='5'><hr></th></tr></table>${footerClose}`;\n\n        const rows = entries.map(entry => {\n            let entryName = entry.name || entry;\n            const ext = self.path.extname(entryName);\n            // Maintain path sep, but deal with things like spaces in filenames\n            const href = encodeURI(`${route}${self.path.join(dirPath, entryName)}`);\n            let icon;\n            let alt;\n\n            // TODO: switch this to entry.isDirectory() if possible\n            if (ContentType.isImage(ext)) {\n                icon = icons.image2;\n                alt = '[IMG]';\n            } else if (ContentType.isMedia(ext)) {\n                icon = icons.movie;\n                alt = '[MOV]';\n            } else if (!ext) {\n                icon = icons.folder;\n                alt = '[DIR]';\n            } else {\n                icon = icons.text;\n                alt = '[TXT]';\n            }\n\n            return formatRow(icon, alt, href, entryName, entry.mtime, entry.size);\n        }).join('\\n');\n\n        return {\n            body: header + rows + footer,\n            config: {\n                status: 200,\n                statusText: 'OK',\n                headers: {'Content-Type': 'text/html'}\n            }\n        };\n    }\n\n    function formatFile(path, content) {\n        return {\n            body: content,\n            config: {\n                status: 200,\n                statusText: 'OK',\n                headers: {'Content-Type': ContentType.getMimeType(path)}\n            }\n        };\n    }\n\n    self.HtmlFormatter = {\n        format404,\n        format500,\n        formatDir,\n        formatFile\n    };\n}\n"],"file":"html-formatter.js"}