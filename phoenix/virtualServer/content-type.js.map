{"version":3,"sources":["phoenix/virtualServer/content-type.js"],"names":["importScripts","self","ContentType","getMimeType","path","lookup","isMedia","mimeType","toLowerCase","startsWith","isImage"],"mappings":"AAuBA,GAFAA,cAAc,wCAEVC,KAAKC,YAAY,CACjB,SAASC,YAAYC,MACjB,OAAOC,OAAOD,OAAS,2BAI3B,SAASE,QAAQF,MACb,IAAIG,SAAWF,OAAOD,MACtB,QAAKG,WAOY,qBAHjBA,SAAWA,SAASC,iBAQbD,SAASE,WAAW,WAAaF,SAASE,WAAW,YAIhE,SAASC,QAAQN,MACb,MAAMG,SAAWF,OAAOD,MACxB,QAAKG,UAIEA,SAASC,cAAcC,WAAW,UAG7CR,KAAKC,YAAc,CACfI,QAAAA,QACAI,QAAAA,QACAP,YAAAA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * modified by core.ai, based on work by David Humphrey <david.humphrey@senecacolleage.ca> (@humphd)\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/* global lookup, importScripts*/\n\nimportScripts('phoenix/virtualServer/mime-types.js');\n\nif(!self.ContentType){\n    function getMimeType(path) {\n        return lookup(path) || 'application/octet-stream';\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#Audio_and_video_types\n    function isMedia(path) {\n        let mimeType = lookup(path);\n        if (!mimeType) {\n            return false;\n        }\n\n        mimeType = mimeType.toLowerCase();\n\n        // Deal with OGG special case\n        if (mimeType === 'application/ogg') {\n            return true;\n        }\n\n        // Anything else with `audio/*` or `video/*` is \"media\"\n        return mimeType.startsWith('audio/') || mimeType.startsWith('video/');\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#Image_types\n    function isImage(path) {\n        const mimeType = lookup(path);\n        if (!mimeType) {\n            return false;\n        }\n\n        return mimeType.toLowerCase().startsWith('image/');\n    }\n\n    self.ContentType = {\n        isMedia,\n        isImage,\n        getMimeType\n    };\n}\n"],"file":"content-type.js"}