{"version":3,"sources":["phoenix/virtualServer/config.js"],"names":["self","Config","url","URL","location","getNormalizeRoute","route","searchParams","get","replace","disableIndexes","debug"],"mappings":"AAmBA,IAAIA,KAAKC,OAAO,CAgBZ,MAAMC,IAAM,IAAIC,IAAIC,UAapB,SAASC,oBACL,IAAIC,MAAQJ,IAAIK,aAAaC,IAAI,UAAY,KAO7C,OAFAF,OAFAA,MAAQA,MAAMG,QAAQ,OAAQ,MAEhBA,QAAQ,OAAQ,IAKlCT,KAAKC,OAAS,CACVK,MAAOD,oBACPK,eAA2D,OAA3CR,IAAIK,aAAaC,IAAI,kBACrCG,MAAyC,SAAlCT,IAAIK,aAAaC,IAAI","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * modified by core.ai, based on work by David Humphrey <david.humphrey@senecacolleage.ca> (@humphd)\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\nif(!self.Config){\n    /**\n     * Various features of the server can be configured by passing options on\n     * the query string when registering the nohost-sw.js service worker file.\n     *\n     * `route`: `String` value with the route name to use when listening for filesystem\n     * path requests. Defaults to `fs`, such that `/fs/path/to/file` would give\n     * `/path/to/file`. If the `route` includes multiple levels, pass them on the\n     * URL encoded (i.e., `'first%2Fsecond'` for `'/first/second'`).\n     *\n     * `disableIndexes`: if present (i.e., `Boolean`), directory indexes will not be shown.\n     * Users will have to know the filename they wish to get back from the server.  Defaults\n     * to `true` (i.e. directory indexes are shown).\n     *\n     * `debug`: if present (i.e., `Boolean`), enable workbox debug logging\n     */\n    const url = new URL(location);\n\n    /**\n     * Given a route string, make sure it follows the pattern we expect:\n     *  - no escaped characters\n     *  - begins with a `/`\n     *  - ends with a no trailing `/`\n     *\n     * If we were passed `'fs'`, we would normalize to `/fs` and\n     * if we were passed `'first%2Fsecond'`, `'/first/second'`\n     *\n     * @param {String} route\n     */\n    function getNormalizeRoute() {\n        let route = url.searchParams.get('route') || 'fs';\n\n        // Only a single / at the front of the route\n        route = route.replace(/^\\/*/, '/');\n        // Only a single / at the end of the route\n        route = route.replace(/\\/*$/, '');\n\n        return route;\n    }\n\n    self.Config = {\n        route: getNormalizeRoute(),\n        disableIndexes: url.searchParams.get('disableIndexes') !== null,\n        debug: url.searchParams.get('debug') === 'true'\n    };\n}\n"],"file":"config.js"}