{"version":3,"sources":["phoenix/virtual-server-loader.js"],"names":["Workbox","_getBaseURL","baseURL","window","location","href","indexOf","substring","lastIndexOf","endsWith","getRoute","_isServiceWorkerLoaderPage","indexUrl","origin","baseUrl","devURL","currentURL","console","log","async","shouldUpdate","fsServerUrl","navigator","wb","updateViaCache","_forceClearCacheIfNeeded","cacheKey","newCacheVersion","Phoenix","firstBoot","localStorage","setItem","lastClearedVersion","getItem","updatePendingReload","messageSW","type","_refreshCache","then","updatedFilesCount","catch","err","error","serverReady","debugMode","logToConsolePref","logLivePreview","loggingOptions","config","serverInstall","params","showSkipWaitingPrompt","event","updateAccepted","messageSkipWaiting","addEventListener","controlling","isUpdate","register"],"mappings":"OA8BQA,YAAc,oFAEtB,SAASC,cACL,IAAIC,QAAUC,OAAOC,SAASC,KAa9B,OAZGD,SAASC,KAAKC,QAAS,MAAM,IAC5BJ,QAAUE,SAASC,KAAKE,UAAW,EAAGH,SAASC,KAAKC,QAAS,OAE9DF,SAASC,KAAKC,QAAS,MAAM,IAC5BJ,QAAUA,QAAQK,UAAW,EAAGL,QAAQI,QAAS,OAElDF,SAASC,KAAKC,QAAS,MAAM,IAC5BJ,QAAUA,QAAQK,UAAW,EAAGL,QAAQM,YAAa,OAErDN,QAAQO,SAAS,OACjBP,SAAoB,KAEjBA,QAGX,SAASQ,WACL,MAAO,cAKX,SAASC,6BAEL,MAAMC,YAAcR,SAASS,oBACzBC,WAAaV,SAASS,UACtBE,OAAS,6BACTC,WAAaf,cAEjB,OADAgB,QAAQC,IAAI,aAAcF,WAAYJ,SAAUE,QAASC,QACjDC,aAAeF,SAAWE,aAAeJ,UAAYI,aAAeD,OAGhFI,eAAeC,eAEX,OAAO,EAMX,GApBAjB,OAAOkB,YAAcpB,cAAgBS,WAAa,IAoB9CC,8BAAgC,kBAAmBW,UAAW,CAC9DL,QAAQC,IAAI,+CAAgDf,OAAOC,SAASC,MAM5E,MAAMkB,GAAK,IAAIvB,oDAAoDU,aAAc,CAE7Ec,eAAgB,SASpB,SAASC,2BACL,MAAMC,SAAW,yBACXC,gBAAkB,KACxB,GAAGxB,OAAOyB,QAAQC,UAEd,OADAC,aAAaC,QAAQL,SAFD,OAGb,EAEX,MAAMM,mBAAqB7B,OAAO2B,aAAaG,QAAQP,UACvD,MANwB,OAMrBM,qBACCf,QAAQC,IAAI,yFACZf,OAAOyB,QAAQM,qBAAsB,EACrCX,GAAGY,UAAU,CACTC,KAAM,gBAEVN,aAAaC,QAAQL,SAZD,OAab,GAKf,SAASW,gBACFZ,6BAGHR,QAAQC,IAAI,mDACZK,GAAGY,UAAU,CACTC,KAAM,kBACPE,KAAK,EAAEC,kBAAAA,sBACNtB,QAAQC,IAAI,6CAA8CqB,mBACvDA,kBAAmB,IAClBpC,OAAOyB,QAAQM,qBAAsB,KAE1CM,MAAMC,MACLxB,QAAQyB,MAAM,8DAA+DD,QASrF,SAASE,cACL1B,QAAQC,IAAI,wCACZK,GAAGY,UAAU,CACTC,KAAM,sBACNQ,UAAuC,SAA5BzC,OAAO0C,iBAClBC,eAAgB3C,OAAO4C,eAAeD,iBACvCR,KAAMU,SACL/B,QAAQC,+EAA+E8B,OAAO9C,aAC/FsC,MAAMC,MACLxB,QAAQyB,MAAM,4DAA6DD,OAE/EJ,gBAGJ,SAASY,gBACLhC,QAAQC,IAAI,uDAnBhBf,OAAOgC,UAAY,SAAUe,QACzB,OAAO3B,GAAGY,UAAUe,SAqBxB,MAAMC,sBAAwBhC,MAAOiC,QAcjC,MAAMC,qBAAuBjC,eAEzBiC,gBACA9B,GAAG+B,sBAMX/B,GAAGgC,iBAAiB,UAAYH,QAC5BnC,QAAQC,IAAI,iGACZf,OAAOyB,QAAQM,qBAAsB,EACrCiB,sBAAsBC,SAG1B7B,GAAGiC,YAAYlB,KAAKK,aAGpBpB,GAAGgC,iBAAiB,YAAcH,QAC1BA,MAAMK,UACNR,kBAIR1B,GAAGmC","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n\n\n/** Sets up a web server for the local phoenix virtual file system root.\n * Based on https://github.com/humphd/nohost\n *\n * This module should be functionally as light weight as possible with minimal deps as it is a shell component.\n * **/\n\n\nimport {Workbox} from 'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-window.prod.mjs';\n\nfunction _getBaseURL() {\n    let baseURL = window.location.href;\n    if(location.href.indexOf( \"?\")>-1){\n        baseURL = location.href.substring( 0, location.href.indexOf( \"?\")); // remove query string params\n    }\n    if(location.href.indexOf( \"#\")>-1){\n        baseURL = baseURL.substring( 0, baseURL.indexOf( \"#\")); // remove hrefs in page\n    }\n    if(location.href.indexOf( \"/\")>-1){\n        baseURL = baseURL.substring( 0, baseURL.lastIndexOf( \"/\"));\n    }\n    if(!baseURL.endsWith('/')){\n        baseURL = baseURL + '/';\n    }\n    return baseURL;\n}\n\nfunction getRoute(){\n    return `phoenix/vfs`;\n}\n\nwindow.fsServerUrl = _getBaseURL() + getRoute() + \"/\";\n\nfunction _isServiceWorkerLoaderPage() {\n    // only http(s)://x.y.z/ or http(s)://x.y.z/index.html can load service worker, or localhost/src for dev builds\n    const indexUrl = `${location.origin}/index.html`,\n        baseUrl = `${location.origin}/`,\n        devURL = 'http://localhost:8000/src/',\n        currentURL = _getBaseURL();\n    console.log(\"currentURL\", currentURL, indexUrl, baseUrl, devURL);\n    return (currentURL === baseUrl || currentURL === indexUrl || currentURL === devURL);\n}\n\nasync function shouldUpdate() {\n    // service workers are always updated in phoenix instantly.\n    return true;\n}\n\n/**\n * Register Phoenix PWA and nohost web server service worker, passing `route` or other options.\n */\nif (_isServiceWorkerLoaderPage() && 'serviceWorker' in navigator) {\n    console.log(\"Service worker loader: Loading  from page...\", window.location.href);\n    // We cannot realistically change the url of the service worker without causing major problems in service worker\n    // load. We will have to unregister and load a new service worker and there is no way to stop the already running\n    // service worker. As such, the below debug=false is unused, but kept there for legacy purposes to not change\n    // sw url without bombing the installation base.\n    // debug=false below is unused and kept for the above reason!!!!!\n    const wb = new Workbox(`virtual-server-main.js?debug=false&route=${getRoute()}`, {\n        // https://developer.chrome.com/blog/fresher-sw/#updateviacache\n        updateViaCache: 'none'\n    });\n\n    /**\n     * This will cause a full cache reset in the browser for the phoenix scripts.\n     * This will help the user to load the latest version of phoenix on the next load.\n     * @return {boolean}\n     * @private\n     */\n    function _forceClearCacheIfNeeded() {\n        const cacheKey = \"browserCacheVersionKey\";\n        const newCacheVersion = \"V1\"; // just increment this number to V2, v3 etc. to force clear the cached content.\n        if(window.Phoenix.firstBoot){\n            localStorage.setItem(cacheKey, newCacheVersion);\n            return false;\n        }\n        const lastClearedVersion = window.localStorage.getItem(cacheKey);\n        if(lastClearedVersion !== newCacheVersion) {\n            console.log(`Service worker loader: triggering CLEAR_CACHE for live preview service worker upgrade`);\n            window.Phoenix.updatePendingReload = true;\n            wb.messageSW({\n                type: 'CLEAR_CACHE'\n            });\n            localStorage.setItem(cacheKey, newCacheVersion);\n            return true;\n        }\n        return false;\n    }\n\n    function _refreshCache() {\n        if(_forceClearCacheIfNeeded()){\n            return;\n        }\n        console.log(`Service worker loader: triggering REFRESH_CACHE`);\n        wb.messageSW({\n            type: 'REFRESH_CACHE'\n        }).then(({updatedFilesCount})=>{\n            console.log(`Service worker loader: updatedFilesCount: `, updatedFilesCount);\n            if(updatedFilesCount >0) {\n                window.Phoenix.updatePendingReload = true;\n            }\n        }).catch(err=>{\n            console.error(\"Service worker loader: Error while triggering cache refresh\", err);\n        });\n    }\n\n    // Hoist service worker comm to window for everyone be able to communicate with the sw.\n    window.messageSW = function (params) {\n        return wb.messageSW(params);\n    };\n\n    function serverReady() {\n        console.log('Service worker loader: Server ready.');\n        wb.messageSW({\n            type: 'INIT_PHOENIX_CONFIG',\n            debugMode: window.logToConsolePref === 'true',\n            logLivePreview: window.loggingOptions.logLivePreview\n        }).then((config)=>{\n            console.log(`Service worker loader: Server ready! Service worker inited at base url: ${config.baseURL}`);\n        }).catch(err=>{\n            console.error(\"Service worker loader: Error while init of service worker\", err);\n        });\n        _refreshCache();\n    }\n\n    function serverInstall() {\n        console.log('Service worker loader: Web server Worker installed.');\n    }\n\n    const showSkipWaitingPrompt = async (event) => {\n        // Assuming the user accepted the update, set up a listener\n        // that will reload the page as soon as the previously waiting\n        // service worker has taken control.\n\n        // When `event.wasWaitingBeforeRegister` is true, a previously\n        // updated service worker is still waiting.\n        // You may want to customize the UI prompt accordingly.\n\n        // This code assumes your app has a promptForUpdate() method,\n        // which returns true if the user wants to update.\n        // Implementing this is app-specific; some examples are:\n        // https://open-ui.org/components/alert.research or\n        // https://open-ui.org/components/toast.research\n        const updateAccepted = await shouldUpdate();\n\n        if (updateAccepted) {\n            wb.messageSkipWaiting();\n        }\n    };\n\n    // Add an event listener to detect when the registered\n    // service worker has installed but is waiting to activate.\n    wb.addEventListener('waiting', (event) => {\n        console.log(\"Service worker loader: A new service worker is pending load. Trying to update the worker now.\");\n        window.Phoenix.updatePendingReload = true;\n        showSkipWaitingPrompt(event);\n    });\n\n    wb.controlling.then(serverReady);\n\n    // Deal with first-run install, if necessary\n    wb.addEventListener('installed', (event) => {\n        if(!event.isUpdate) {\n            serverInstall();\n        }\n    });\n\n    wb.register();\n}\n"],"file":"virtual-server-loader.js"}