{"version":3,"sources":["phoenix/shell.js"],"names":["initVFS","ERR_CODES","initTauriShell","MAX_ALLOWED_TAURI_WINDOWS","async","getTauriWindowLabel","tauriWindows","window","__TAURI__","getAll","windowLabels","label","i","windowLabel","Error","Phoenix","app","getNodeState","cbfn","closeWindow","browser","isTauri","appWindow","close","clipboardReadText","clipboard","readText","navigator","Promise","reject","copyToClipboard","textToCopy","writeText","textArea","document","createElement","value","body","appendChild","select","execCommand","removeChild","resolve","isFullscreen","fullscreenElement","setFullscreen","enable","documentElement","requestFullscreen","exitFullscreen","getDisplayLocation","fullVFSPath","startsWith","VFS","getTauriDir","fs","getTauriPlatformPath","getMountDir","replace","Strings","STORED_IN_YOUR_BROWSER","setWindowTitle","title","setTitle","getWindowTitle","openPathInFileBrowser","toLowerCase","platformPath","tauri","invoke","path","then","catch","openURLInDefaultBrowser","url","tabIdentifier","shell","open","openURLInPhoenixWindow","windowTitle","fullscreen","resizable","height","minHeight","width","minWidth","acceptFirstMouse","preferTabs","defaultHeight","defaultWidth","tauriWindow","WebviewWindow","undefined","isTauriWindow","features","nativeWindow","zoomWebView","scaleFactor","getApplicationSupportDirectory","getAppSupportDir","getExtensionsDirectory","getExtensionDir","getUserDocumentsDirectory","getUserProjectsDirectory","getTempDirectory","getTempDir","getTimeSinceStartup","Date","now","startTime","language","appshell"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n/*global Phoenix*/\n\n\n/** Setup phoenix shell components\n *\n * This module should be functionally as light weight as possible with minimal deps as it is a shell component.\n * **/\nimport initVFS from \"./init_vfs.js\";\nimport ERR_CODES from \"./errno.js\";\nimport initTauriShell from \"./tauriShell.js\";\n\ninitVFS();\n\n// We can only have a maximum of 30 windows that have access to tauri apis\n// This limit is set in file `tauri.conf.json` in phoenix-desktop repo at json paths\n// this limit is there due to our use of phtauri:// custom protocol.\n// /tauri/security/dangerousRemoteDomainIpcAccess/0/windows and\n// /tauri/security/dangerousRemoteDomainIpcAccess/1/windows\nlet MAX_ALLOWED_TAURI_WINDOWS = 30;\n\nasync function getTauriWindowLabel() {\n    const tauriWindows = await window.__TAURI__.window.getAll();\n    const windowLabels = {};\n    for(let {label} of tauriWindows) {\n        windowLabels[label]=true;\n    }\n    for(let i=1; i<=MAX_ALLOWED_TAURI_WINDOWS; i++){\n        const windowLabel = `phcode-${i}`;\n        if(!windowLabels[windowLabel]){\n            return windowLabel;\n        }\n    }\n    throw new Error(\"Could not get a free window label to create tauri window\");\n}\nPhoenix.app = {\n    getNodeState: function (cbfn){\n        cbfn(new Error('Node cannot be run in phoenix browser mode'));\n    },\n    closeWindow: function () {\n        if(!Phoenix.browser.isTauri){\n            throw new Error(\"closeWindow is not supported in browsers\");\n        }\n        window.__TAURI__.window.appWindow.close();\n    },\n    clipboardReadText: function () {\n        if(Phoenix.browser.isTauri){\n            return window.__TAURI__.clipboard.readText();\n        } else if(window.navigator && window.navigator.clipboard){\n            return window.navigator.clipboard.readText();\n        }\n        return Promise.reject(new Error(\"clipboardReadText: Unable to access clipboard text.\"));\n    },\n    copyToClipboard: function (textToCopy) {\n        if(Phoenix.browser.isTauri){\n            return window.__TAURI__.clipboard.writeText(textToCopy);\n        } else if(window.navigator && window.navigator.clipboard){\n            return window.navigator.clipboard.writeText(textToCopy);\n        }\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = textToCopy;\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(textArea);\n        return Promise.resolve();\n    },\n    isFullscreen: function () {\n        if(!Phoenix.browser.isTauri) {\n            // use browser full screen api in browsers.\n            return Promise.resolve(!!document.fullscreenElement);\n        }\n        return window.__TAURI__.window.appWindow.isFullscreen();\n    },\n    setFullscreen: function (enable) {\n        if(!Phoenix.browser.isTauri) {\n            // use browser full screen api in browsers.\n            if (enable) {\n                return document.documentElement.requestFullscreen();\n            } else if (document.exitFullscreen) {\n                return  document.exitFullscreen();\n            } else {\n                return Promise.resolve();\n            }\n        }\n        return window.__TAURI__.window.appWindow.setFullscreen(enable);\n    },\n    getDisplayLocation: function (fullVFSPath) {\n        // reruns a user-friendly location that can be shown to the user to make some sense of the virtual file path.\n        // The returned path may not be an actual path if it is not resolvable to a platform path, but a text indicating\n        // its location. Eg: \"Stored in Your Browser\"\n        if (fullVFSPath.startsWith(Phoenix.VFS.getTauriDir())) {\n            return Phoenix.fs.getTauriPlatformPath(fullVFSPath);\n        }\n        if (fullVFSPath.startsWith(Phoenix.VFS.getMountDir())) {\n            return fullVFSPath.replace(Phoenix.VFS.getMountDir(), \"\"); // we don't show anything if it's stored on user's hard drive for better ui.\n        }\n        return window.Strings.STORED_IN_YOUR_BROWSER;\n    },\n    setWindowTitle: async function (title) {\n        window.document.title = title;\n        if(Phoenix.browser.isTauri) {\n            await window.__TAURI__.window.appWindow.setTitle(title);\n        }\n    },\n    getWindowTitle: async function () {\n        if(Phoenix.browser.isTauri) {\n            return window.__TAURI__.window.appWindow.title();\n        }\n        return window.document.title;\n    },\n    openPathInFileBrowser: function (fullVFSPath){\n        return new Promise((resolve, reject)=>{\n            if(!window.__TAURI__ ||\n                !fullVFSPath.startsWith(Phoenix.VFS.getTauriDir())) {\n                reject(\"openPathInFileBrowser is only currently supported in Native builds for tauri paths!\");\n                return;\n            }\n            if(fullVFSPath.toLowerCase().startsWith(\"http://\")\n                || fullVFSPath.toLowerCase().startsWith(\"https://\")\n                || fullVFSPath.toLowerCase().startsWith(\"file://\")) {\n                reject(\"Please use openPathInFileBrowser API to open URLs\");\n                return;\n            }\n            const platformPath = Phoenix.fs.getTauriPlatformPath(fullVFSPath);\n            window.__TAURI__.tauri\n                .invoke('show_in_folder', {path: platformPath})\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n    openURLInDefaultBrowser: function (url, tabIdentifier='_blank'){\n        return new Promise((resolve, reject)=>{\n            if(!window.__TAURI__) {\n                resolve(window.open(url, tabIdentifier, 'noopener,noreferrer'));\n                return;\n            }\n            if( !(url.toLowerCase().startsWith(\"http://\") || url.toLowerCase().startsWith(\"https://\")) ) {\n                reject(\"openURLInDefaultBrowser: URL should be http or https, but was \" + url);\n                return;\n            }\n            window.__TAURI__.shell.open(url)\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n    openURLInPhoenixWindow: async function (url, {\n        windowTitle, fullscreen, resizable,\n        height, minHeight, width, minWidth, acceptFirstMouse, preferTabs\n    } = {}){\n        const defaultHeight = 900, defaultWidth = 1366;\n        if(window.__TAURI__){\n            const windowLabel = await getTauriWindowLabel();\n            const tauriWindow = new window.__TAURI__.window.WebviewWindow(windowLabel, {\n                url,\n                title: windowTitle || windowLabel || url,\n                fullscreen,\n                resizable: resizable === undefined ? true : resizable,\n                height: height || defaultHeight,\n                minHeight: minHeight || 600,\n                width: width || defaultWidth,\n                minWidth: minWidth || 800,\n                acceptFirstMouse: acceptFirstMouse === undefined ? true : acceptFirstMouse\n            });\n            tauriWindow.isTauriWindow = true;\n            return tauriWindow;\n        }\n        let features = 'toolbar=no,location=no, status=no, menubar=no, scrollbars=yes';\n        features = `${features}, width=${width||defaultWidth}, height=${height||defaultHeight}`;\n        if(resizable === undefined || resizable){\n            features = features + \", resizable=yes\";\n        }\n        if(preferTabs) {\n            features = \"\";\n        }\n        const nativeWindow = window.open(url, '_blank', features);\n        nativeWindow.isTauriWindow = false;\n        return nativeWindow;\n    },\n    zoomWebView: async function (scaleFactor = 1) {\n        if(!Phoenix.browser.isTauri){\n            throw new Error(\"zoomWebView is not supported in browsers\");\n        }\n        if(scaleFactor < .1 || scaleFactor > 2) {\n            throw new Error(\"zoomWebView scale factor should be between .1 and 2\");\n        }\n        return window.__TAURI__.tauri.invoke(\"zoom_window\", {scaleFactor: scaleFactor});\n    },\n    getApplicationSupportDirectory: Phoenix.VFS.getAppSupportDir,\n    getExtensionsDirectory: Phoenix.VFS.getExtensionDir,\n    getUserDocumentsDirectory: Phoenix.VFS.getUserDocumentsDirectory,\n    getUserProjectsDirectory: Phoenix.VFS.getUserProjectsDirectory,\n    getTempDirectory: Phoenix.VFS.getTempDir,\n    ERR_CODES: ERR_CODES,\n    getTimeSinceStartup: function () {\n        return Date.now() - Phoenix.startTime; // milliseconds elapsed since app start\n    },\n    language: navigator.language\n};\n\nif(!window.appshell){\n    window.appshell = Phoenix;\n}\n\nif(Phoenix.browser.isTauri) {\n    initTauriShell(Phoenix.app);\n}\n"],"file":"shell.js"}