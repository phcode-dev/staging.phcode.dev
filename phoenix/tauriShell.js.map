{"version":3,"sources":["phoenix/tauriShell.js"],"names":["TAURI","window","__TAURI__","TAURI_KEYS","LAST_WINDOW_WIDTH","LAST_WINDOW_HEIGHT","appWindow","_setupWindowResizeListeners","onResized","async","payload","size","maximized","isMaximized","localStorage","setItem","height","width","positionWindow","phoenixAspectRatio","minWidth","minHeight","monitorSize","currentMonitor","targetWindowHeight","targetWindowWidth","targetHeight","parseInt","getItem","targetWidth","maximize","setSize","PhysicalSize","initTauriShell"],"mappings":"AAoBA,MAAMA,MAAQC,OAAOC,UAEfC,WAAa,CACfC,kBAAmB,0BACnBC,mBAAoB,4BAGlBC,UAAYN,OAASA,MAAMC,OAAOK,UAExC,SAASC,8BACLD,UAAUE,UAAUC,OAASC,QAASC,SAClC,MAAMC,gBAAkBN,UAAUO,cAC9BD,YACAE,aAAaC,QAAQZ,WAAWE,mBAAoBM,KAAKK,QACzDF,aAAaC,QAAQZ,WAAWC,kBAAmBO,KAAKM,UAKpER,eAAeS,iBACX,MAAMC,mBAAqB,IACvBC,SAAW,IACXC,UAAY,IAChB,IAAIC,mBAAqBtB,MAAMC,OAAOsB,kBAAkBZ,KACpDa,mBAA0C,EAArBF,YAAYN,OAAW,EAC5CS,kBALuB,IAKHD,mBACpBE,aAAeC,SAASb,aAAac,QAAQzB,WAAWE,wBAA0BmB,sBAClFK,YAAeF,SAASb,aAAac,QAAQzB,WAAWC,uBAAyBqB,qBACrF,GAAGC,aAAaV,OAASM,YAAYN,QAAUa,YAAYZ,MAAQK,YAAYL,MAI3E,OAFAX,UAAUwB,gBACVvB,8BAGDmB,aAZa,MAaZA,aAbY,KAebG,YAhBY,MAiBXA,YAjBW,WAmBTvB,UAAUyB,QAAQ,IAAI/B,MAAMC,OAAO+B,aAAaH,YAAaH,eACnEnB,8BAGJ,SAAS0B,iBACLf,gCAGWe","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*globals*/\nconst TAURI = window.__TAURI__;\n\nconst TAURI_KEYS = {\n    LAST_WINDOW_WIDTH: \"tauri.LAST_WINDOW_WIDTH\",\n    LAST_WINDOW_HEIGHT: \"tauri.LAST_WINDOW_HEIGHT\"\n};\n\nconst appWindow = TAURI && TAURI.window.appWindow;\n\nfunction _setupWindowResizeListeners() {\n    appWindow.onResized(async ({ payload: size }) => {\n        const maximized = await appWindow.isMaximized();\n        if(!maximized) {\n            localStorage.setItem(TAURI_KEYS.LAST_WINDOW_HEIGHT, size.height);\n            localStorage.setItem(TAURI_KEYS.LAST_WINDOW_WIDTH, size.width);\n        }\n    });\n}\n\nasync function positionWindow() {\n    const phoenixAspectRatio = 1.6,  // phoenix looks good in aspect ratio 1.6w:1h\n        minWidth = 800,\n        minHeight = 600;\n    let monitorSize = (await TAURI.window.currentMonitor()).size,\n        targetWindowHeight = monitorSize.height * 2/3,\n        targetWindowWidth = targetWindowHeight * phoenixAspectRatio;\n    let targetHeight = parseInt(localStorage.getItem(TAURI_KEYS.LAST_WINDOW_HEIGHT) || `${targetWindowHeight}`),\n        targetWidth =  parseInt(localStorage.getItem(TAURI_KEYS.LAST_WINDOW_WIDTH) || `${targetWindowWidth}`);\n    if(targetHeight.height > monitorSize.height || targetWidth.width > monitorSize.width){\n        // our window is larger than the monitor, so just maximise to fit to monitor\n        appWindow.maximize();\n        _setupWindowResizeListeners();\n        return;\n    }\n    if(targetHeight < minHeight){\n        targetHeight = minHeight;\n    }\n    if(targetWidth < minWidth){\n        targetWidth = minWidth;\n    }\n    await appWindow.setSize(new TAURI.window.PhysicalSize(targetWidth, targetHeight));\n    _setupWindowResizeListeners();\n}\n\nfunction initTauriShell() {\n    positionWindow();\n}\n\nexport default initTauriShell;"],"file":"tauriShell.js"}