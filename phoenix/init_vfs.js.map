{"version":3,"sources":["phoenix/init_vfs.js"],"names":["extensionDIR","appSupportDIR","tauriAssetServeDir","tauriAssetServeBaseURL","documentsDIR","tempDIR","userProjectsDir","_setupVFS","fsLib","pathLib","Phoenix","VFS","getRootDir","getMountDir","getTauriDir","getAppSupportDir","getExtensionDir","getUserExtensionDir","getDevExtensionDir","getDevTempExtensionDir","getTempDir","getTauriAssetServeDir","getUserDocumentsDirectory","getUserProjectsDirectory","_getVirtualDocumentsDirectory","getDefaultProjectDir","ensureTrailingSlash","path","endsWith","isLocalDiscPath","fullPath","startsWith","ensureExistsDir","cb","exists","fs","mkdirs","err","code","getPathForVirtualServingURL","fullURL","browser","isTauri","assetRelativePath","decodeURIComponent","replace","window","fsServerUrl","getVirtualServingURLForPath","platformPath","getTauriPlatformPath","__TAURI__","tauri","convertFileSrc","slice","ensureExistsDirAsync","async","Promise","resolve","reject","stat","stats","existsAsync","getFsEncoding","_getFsEncoding","encoding","encodingStr","toLowerCase","_SAMPLE_HTML","_tryCreateDefaultProject","projectDir","logger","reportError","indexFile","normalize","writeFile","setupAppSupportAndExtensionsDir","getTauriVirtualPath","_tauriBootVars","appLocalDir","all","setupDocumentsDir","documentDir","appName","appname","setupTempDir","tempDir","_createAppDirs","_tauriBootVarsPromise","CORE_LIB_GUARD_INTERVAL","_FS_ERROR_MESSAGE","initVFS","alert","Error","savedfs","savedPath","setInterval","console","error","_phoenixfsAppDirsCreatePromise"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Acknowledgements: https://github.com/bpedro/node-fs\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*global fs, Phoenix, logger*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n\n/** Setup virtual file system. This happens before any code of phoenix is loaded.\n * The virtual file system is rooted at /\n * Application support folder that stores app data is /app/\n * Local user storage space is mounted at path /local/\n * Trash storage space is mounted at path /trash/\n *\n * This module should be functionally as light weight as possible with minimal deps as it is a shell component.\n * **/\n\nlet extensionDIR,\n    appSupportDIR,\n    tauriAssetServeDir,\n    tauriAssetServeBaseURL,\n    documentsDIR,\n    tempDIR,\n    userProjectsDir;\n\nfunction _setupVFS(fsLib, pathLib){\n    Phoenix.VFS = {\n        getRootDir: () => '/fs/',\n        getMountDir: () => '/mnt/',\n        getTauriDir: () => '/tauri/',\n        getAppSupportDir: () => appSupportDIR,\n        getExtensionDir: () => extensionDIR,\n        getUserExtensionDir: () => `${extensionDIR}user`,\n        getDevExtensionDir: () => `${extensionDIR}dev`,\n        getDevTempExtensionDir: () => `${extensionDIR}devTemp`,\n        getTempDir: () => tempDIR,\n        getTauriAssetServeDir: () => tauriAssetServeDir,\n        getUserDocumentsDirectory: () => documentsDIR,\n        getUserProjectsDirectory: () => userProjectsDir,\n        _getVirtualDocumentsDirectory: () => '/fs/local/',\n        getDefaultProjectDir: () => `${userProjectsDir}default project/`,\n        ensureTrailingSlash: function (path) {\n            if(!path.endsWith(\"/\")) {\n                return `${path}/`;\n            }\n            return path;\n        },\n        /**\n         * Check if a given full path is located in the users local machine drive. For eg. fs access paths are accounted\n         * as local disc path, as well as tauri fs paths.\n         * @param fullPath\n         */\n        isLocalDiscPath: function (fullPath) {\n            if(fullPath &&\n                (fullPath.startsWith(Phoenix.VFS.getTauriDir()) || fullPath.startsWith(Phoenix.VFS.getMountDir()) )){\n                return true;\n            }\n            return false;\n        },\n        ensureExistsDir: function (path, cb) {\n            Phoenix.VFS.exists(path, (exists) =>{\n                // We have to do the exists check explicitly here instead of only using fs.mkdir call check EEXIST code\n                // as trying to call mkdir on `/mnt/someFolder` will throw an error even if the mount point exists.\n                // mount points can only be created by the mount call.\n                if(exists){\n                    cb();\n                    return;\n                }\n                Phoenix.fs.mkdirs(path, 0o755, true, function(err) {\n                    if (err && err.code !== 'EEXIST') {\n                        cb(err);\n                    }\n                    cb();\n                });\n            });\n        },\n        /**\n         * Converts a phoenix virtual serving url to absolute path in file system or null\n         * http://localhost:8000/src/phoenix/vfs/fs/app/extensions/user/themesforbrackets/requirejs-config.json\n         * to /fs/app/extensions/user/themesforbrackets/requirejs-config.json\n         * @param fullURL\n         * @returns {string|null}\n         */\n        getPathForVirtualServingURL: function (fullURL) {\n            if(Phoenix.browser.isTauri) {\n                if(fullURL.startsWith(tauriAssetServeBaseURL)){\n                    const assetRelativePath = decodeURIComponent(fullURL.replace(tauriAssetServeBaseURL, \"\"))\n                        .replace(/\\\\/g, \"/\"); // replace windows path forward slashes \\ to /\n                    return `${tauriAssetServeDir}${assetRelativePath}`;\n                }\n                return null;\n            }\n            if(window.fsServerUrl && fullURL.startsWith(window.fsServerUrl)){\n                return fullURL.replace(window.fsServerUrl, \"/\");\n            }\n            return null;\n        },\n        getVirtualServingURLForPath: function (fullPath) {\n            if(Phoenix.browser.isTauri) {\n                if(fullPath.startsWith(tauriAssetServeDir)){\n                    const platformPath = fs.getTauriPlatformPath(fullPath)\n                        .replace(/\\\\/g, \"/\"); // windows style paths to unix style c:\\x\\y to c:/x/y\n                    return decodeURIComponent(window.__TAURI__.tauri.convertFileSrc(platformPath));\n                }\n                return null;\n            }\n            return window.fsServerUrl.slice(0, -1) + fullPath;\n        },\n        ensureExistsDirAsync: async function (path) {\n            return new Promise((resolve, reject)=>{\n                Phoenix.VFS.ensureExistsDir(path, (err) =>{\n                    if(err){\n                        reject(err);\n                    } else {\n                        resolve();\n                    }\n                });\n            });\n        },\n        exists: function (path, cb) {\n            fs.stat(path, function (err, stats){\n                if (stats && !err) {\n                    cb(true);\n                } else {\n                    cb(false);\n                }\n            });\n        },\n        existsAsync: async function (path) {\n            return new Promise((resolve)=>{\n                Phoenix.VFS.exists(path, (exists) =>{\n                    resolve(exists);\n                });\n            });\n        },\n        fs: fsLib,\n        path: pathLib,\n        getFsEncoding: _getFsEncoding\n    };\n    Phoenix.fs = fsLib;\n    Phoenix.path = pathLib;\n\n    return Phoenix.VFS;\n}\n\nconst _getFsEncoding = function (encoding){\n    const encodingStr = encoding && encoding.toLowerCase();\n    switch (encodingStr){\n    case \"utf8\":\n    case \"utf-8\":\n        return \"utf8\";\n    case \"ascii\":\n        return \"ascii\";\n    case \"hex\":\n        return \"hex\";\n    case \"ucs2\":\n    case \"ucs-2\":\n        return \"ucs2\";\n    case \"utf16le\":\n    case \"utf-16le\":\n        return \"utf16le\";\n    case \"binary\":\n        return \"binary\";\n    case \"latin1\":\n        return \"latin1\";\n    case \"ISO8859-1\":\n        return \"ISO8859-1\";\n    }\n    return encoding;\n};\n\nconst _SAMPLE_HTML = `<!DOCTYPE html>\n<html>\n    <head>\n        <title>Phoenix Editor for the web</title>\n    </head>\n \n    <body>\n        <h1>Welcome to Phoenix</h1>\n        <p> Modern, Open-source, IDE For The Web.</p>\n    </body>\n</html>`;\n\n// always resolves even if error\nfunction _tryCreateDefaultProject() {\n    // Create phoenix app dirs\n    // Create Phoenix default project if it doesnt exist\n    return new Promise((resolve)=>{\n        let projectDir = Phoenix.VFS.getDefaultProjectDir();\n        Phoenix.VFS.exists(projectDir, (exists)=>{\n            if(!exists){\n                Phoenix.VFS.ensureExistsDir(projectDir, (err)=>{\n                    if(err){\n                        logger.reportError(err, \"Error creating default project\");\n                    }\n                    let indexFile = Phoenix.VFS.path.normalize(`${projectDir}/index.html`);\n                    Phoenix.VFS.fs.writeFile(indexFile, _SAMPLE_HTML, 'utf8', ()=>{});\n                    resolve();\n                });\n                return;\n            }\n            resolve();\n        });\n    });\n}\n\nasync function setupAppSupportAndExtensionsDir() {\n    if(Phoenix.browser.isTauri) {\n        appSupportDIR = fs.getTauriVirtualPath(window._tauriBootVars.appLocalDir);\n        if(!appSupportDIR.endsWith(\"/\")){\n            appSupportDIR = `${appSupportDIR}/`;\n        }\n        tauriAssetServeDir = `${appSupportDIR}assets/`;\n        tauriAssetServeBaseURL = decodeURIComponent(window.__TAURI__.tauri.convertFileSrc(\n            fs.getTauriPlatformPath(tauriAssetServeDir)))\n            .replace(/\\\\/g, \"/\"); // windows style paths to unix style c:\\x\\y to c:/x/y\n        extensionDIR = `${tauriAssetServeDir}extensions/`;\n    } else {\n        appSupportDIR = '/fs/app/';\n        extensionDIR = `${appSupportDIR}extensions/`;\n    }\n    await Promise.all([\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getRootDir()),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getAppSupportDir()),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getExtensionDir()),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getUserExtensionDir()),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getDevExtensionDir()),\n        Phoenix.VFS.ensureExistsDirAsync(Phoenix.VFS.getDevTempExtensionDir())\n    ]);\n}\n\nasync function setupDocumentsDir() {\n    if(Phoenix.browser.isTauri) {\n        documentsDIR = fs.getTauriVirtualPath(window._tauriBootVars.documentDir);\n        if(!documentsDIR.endsWith(\"/\")){\n            documentsDIR = `${documentsDIR}/`;\n        }\n        const appName = window._tauriBootVars.appname;\n        userProjectsDir = `${documentsDIR}${appName}/`;\n    } else {\n        documentsDIR = Phoenix.VFS._getVirtualDocumentsDirectory();\n        userProjectsDir = documentsDIR;\n    }\n    await Phoenix.VFS.ensureExistsDirAsync(documentsDIR);\n    await _tryCreateDefaultProject();\n}\n\nasync function setupTempDir() {\n    if(Phoenix.browser.isTauri) {\n        tempDIR = fs.getTauriVirtualPath(window._tauriBootVars.tempDir);\n        if(!tempDIR.endsWith(\"/\")){\n            tempDIR = `${tempDIR}/`;\n        }\n        const appName = window._tauriBootVars.appname;\n        tempDIR = `${tempDIR}${appName}/`;\n    } else {\n        tempDIR = '/temp/';\n    }\n    await Phoenix.VFS.ensureExistsDirAsync(tempDIR);\n}\n\nconst _createAppDirs = async function () {\n    if(window._tauriBootVarsPromise) {\n        await window._tauriBootVarsPromise;\n    }\n    // Create phoenix app dirs\n    await Promise.all([\n        setupAppSupportAndExtensionsDir(),\n        setupDocumentsDir(),\n        setupTempDir()\n    ]);\n};\n\n\nconst CORE_LIB_GUARD_INTERVAL = 5000;\nconst _FS_ERROR_MESSAGE = 'Oops. Phoenix could not be started due to missing file system library.';\nexport default function initVFS() {\n    if(!window.fs || !window.path || !window.Phoenix){\n        window.alert(_FS_ERROR_MESSAGE);\n        throw new Error(_FS_ERROR_MESSAGE);\n    }\n    const savedfs = window.fs, savedPath = window.path;\n    setInterval(()=>{\n        if(window.fs !== savedfs){\n            console.error(\"window.fs overwrite detected!! Some extension may have corrupted this.\" +\n                \" attempting to revert to original lib.\");\n            window.fs=savedfs;\n        }\n        if(window.path !== savedPath){\n            console.error(\"window.path overwrite detected!! Some extension may have corrupted this.\" +\n                \" attempting to revert to original lib.\");\n            window.path=savedPath;\n        }\n\n    }, CORE_LIB_GUARD_INTERVAL);\n\n    _setupVFS(window.fs, window.path);\n    window._phoenixfsAppDirsCreatePromise = _createAppDirs();\n}\n\n"],"file":"init_vfs.js"}