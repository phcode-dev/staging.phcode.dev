{"version":3,"sources":["phoenix/init_vfs.js"],"names":["_setupVFS","Phoenix","fsLib","pathLib","VFS","getRootDir","getMountDir","getAppSupportDir","getLocalDir","getTrashDir","getDefaultProjectDir","getUserDocumentsDirectory","ensureExistsDir","path","cb","exists","fs","mkdirs","err","code","ensureExistsDirAsync","async","Promise","resolve","reject","stat","stats","existsAsync","getFsEncoding","_getFsEncoding","encoding","encodingStr","toLowerCase","_FS_ERROR_MESSAGE","alertError","message","window","alert","Error","errorCb","_createAppDirs","vfs","_SAMPLE_HTML","_createDefaultProject","projectDir","firstBoot","indexFile","normalize","writeFile","init"],"mappings":"AAiCA,SAASA,UAAUC,QAASC,MAAOC,SA4D/B,OA3DAF,QAAQG,IAAM,CACVC,WAAY,IAAM,OAClBC,YAAa,IAAM,QACnBC,iBAAkB,IAAM,WACxBC,YAAa,IAAM,aACnBC,YAAa,IAAM,aACnBC,qBAAsB,IAAM,6BAC5BC,0BAA2B,IAAM,uBACjCC,gBAAiB,SAAUC,KAAMC,IAC7Bb,QAAQG,IAAIW,OAAOF,KAAOE,SAInBA,OACCD,KAGJE,GAAGC,OAAOJ,KAAM,KAAK,EAAM,SAASK,KAC5BA,KAAoB,WAAbA,IAAIC,MACXL,GAAGI,KAEPJ,UAIZM,qBAAsBC,eAAgBR,MAClC,OAAO,IAAIS,QAAQ,CAACC,QAASC,UACzBvB,QAAQG,IAAIQ,gBAAgBC,KAAOK,MAC5BA,IACCM,OAAON,KAEPK,eAKhBR,OAAQ,SAAUF,KAAMC,IACpBE,GAAGS,KAAKZ,KAAM,SAAUK,IAAKQ,OAErBZ,MADAY,OAAUR,SAOtBS,YAAaN,eAAgBR,MACzB,OAAO,IAAIS,QAASC,UAChBtB,QAAQG,IAAIW,OAAOF,KAAOE,SACtBQ,QAAQR,aAIpBC,GAAId,MACJW,KAAMV,QACNyB,cAAeC,gBAEnB5B,QAAQe,GAAKd,MACbD,QAAQY,KAAOV,QAERF,QAAQG,IAGnB,MAAMyB,eAAiB,SAAUC,UAC7B,MAAMC,YAAcD,SAASE,cAC7B,OAAQD,aACR,IAAK,OACL,IAAK,QACD,MAAO,OACX,IAAK,QACD,MAAO,QACX,IAAK,MACD,MAAO,MACX,IAAK,OACL,IAAK,QACD,MAAO,OACX,IAAK,UACL,IAAK,WACD,MAAO,UACX,IAAK,SACD,MAAO,SACX,IAAK,SACD,MAAO,SACX,IAAK,YACD,MAAO,YAEX,OAAOD,UAILG,kBAAoB,yEAEpBC,WAAa,SAAUC,QAASjB,KAElC,MADAkB,OAAOC,MAAMF,SACP,IAAIG,MAAMpB,KAAOiB,UAGrBI,QAAU,SAAUrB,KACnBA,KACCgB,WAAWD,kBAAmBf,MAIhCsB,eAAiB,SAAUC,KAE7BA,IAAI7B,gBAAgB6B,IAAIpC,aAAckC,SACtCE,IAAI7B,gBAAgB6B,IAAIlC,mBAAoBgC,SAC5CE,IAAI7B,gBAAgB6B,IAAIjC,cAAe+B,SACvCE,IAAI7B,gBAAgB6B,IAAIhC,cAAe8B,UAGrCG,aAAe,ocAcfC,sBAAwB,SAAUF,IAAKxC,SAGzC,IAAI2C,WAAaH,IAAI/B,uBACrBT,QAAQ4C,WAAY,EACpBJ,IAAI1B,OAAO6B,WAAa7B,SAChBA,QACA0B,IAAI7B,gBAAgBgC,WAAa1B,MAC7BqB,QAAQrB,KACR,IAAI4B,UAAYL,IAAI5B,KAAKkC,aAAaH,yBACtC3C,QAAQ4C,WAAY,EACpB7B,GAAGgC,UAAUF,UAAWJ,aAAc,OAAQH,6BAM/C,SAASU,KAAKhD,SACrBmC,OAAOpB,IAAOoB,OAAOvB,MAASZ,SAC9BiC,WAAWD,mBAGf,MAAMQ,IAAMzC,UAAUC,QAASmC,OAAOpB,GAAIoB,OAAOvB,MACjD2B,eAAeC,KACfE,sBAAsBF,IAAKxC","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Acknowledgements: https://github.com/bpedro/node-fs\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n// jshint ignore: start\n/*global fs*/\n/*eslint no-console: 0*/\n/*eslint strict: [\"error\", \"global\"]*/\n\n/** Setup virtual file system. This happens before any code of phoenix is loaded.\n * The virtual file system is rooted at /\n * Application support folder that stores app data is /app/\n * Local user storage space is mounted at path /local/\n * Trash storage space is mounted at path /trash/\n *\n * This module should be functionally as light weight as possible with minimal deps as it is a shell component.\n * **/\n\nfunction _setupVFS(Phoenix, fsLib, pathLib){\n    Phoenix.VFS = {\n        getRootDir: () => '/fs/',\n        getMountDir: () => '/mnt/',\n        getAppSupportDir: () => '/fs/app/',\n        getLocalDir: () => '/fs/local/',\n        getTrashDir: () => '/fs/trash/',\n        getDefaultProjectDir: () => '/fs/local/default project/',\n        getUserDocumentsDirectory: () => '/fs/local/Documents/',\n        ensureExistsDir: function (path, cb) {\n            Phoenix.VFS.exists(path, (exists) =>{\n                // We have to do the exists check explicitly here instead of only using fs.mkdir call check EEXIST code\n                // as trying to call mkdir on `/mnt/someFolder` will throw an error even if the mount point exists.\n                // mount points can only be created by the mount call.\n                if(exists){\n                    cb();\n                    return;\n                }\n                fs.mkdirs(path, 777, true, function(err) {\n                    if (err && err.code !== 'EEXIST') {\n                        cb(err);\n                    }\n                    cb();\n                });\n            });\n        },\n        ensureExistsDirAsync: async function (path) {\n            return new Promise((resolve, reject)=>{\n                Phoenix.VFS.ensureExistsDir(path, (err) =>{\n                    if(err){\n                        reject(err);\n                    } else {\n                        resolve();\n                    }\n                });\n            });\n        },\n        exists: function (path, cb) {\n            fs.stat(path, function (err, stats){\n                if (stats && !err) {\n                    cb(true);\n                } else {\n                    cb(false);\n                }\n            });\n        },\n        existsAsync: async function (path) {\n            return new Promise((resolve)=>{\n                Phoenix.VFS.exists(path, (exists) =>{\n                    resolve(exists);\n                });\n            });\n        },\n        fs: fsLib,\n        path: pathLib,\n        getFsEncoding: _getFsEncoding\n    };\n    Phoenix.fs = fsLib;\n    Phoenix.path = pathLib;\n\n    return Phoenix.VFS;\n}\n\nconst _getFsEncoding = function (encoding){\n    const encodingStr = encoding.toLowerCase();\n    switch (encodingStr){\n    case \"utf8\":\n    case \"utf-8\":\n        return \"utf8\";\n    case \"ascii\":\n        return \"ascii\";\n    case \"hex\":\n        return \"hex\";\n    case \"ucs2\":\n    case \"ucs-2\":\n        return \"ucs2\";\n    case \"utf16le\":\n    case \"utf-16le\":\n        return \"utf16le\";\n    case \"binary\":\n        return \"binary\";\n    case \"latin1\":\n        return \"latin1\";\n    case \"ISO8859-1\":\n        return \"ISO8859-1\";\n    }\n    return encoding;\n};\n\n\nconst _FS_ERROR_MESSAGE = 'Oops. Phoenix could not be started due to missing file system library.';\n\nconst alertError = function (message, err){\n    window.alert(message);\n    throw new Error(err || message);\n};\n\nconst errorCb = function (err){\n    if(err) {\n        alertError(_FS_ERROR_MESSAGE, err);\n    }\n};\n\nconst _createAppDirs = function (vfs) {\n    // Create phoenix app dirs\n    vfs.ensureExistsDir(vfs.getRootDir(), errorCb);\n    vfs.ensureExistsDir(vfs.getAppSupportDir(), errorCb);\n    vfs.ensureExistsDir(vfs.getLocalDir(), errorCb);\n    vfs.ensureExistsDir(vfs.getTrashDir(), errorCb);\n};\n\nconst _SAMPLE_HTML = `<!DOCTYPE html>\n<html>\n    <head>\n        <title>Phoenix Editor for the web</title>\n    </head>\n \n    <body>\n        <h1>Welcome to Phoenix</h1>\n        <p> Phoenix is in alpha and is under active development.</p>\n        <p> Use Google Chrome/ Microsoft Edge/ Opera browser for opening projects in your system using the \n         [File Menu > Open Folder] Option or by pressing Ctrl+Shift+O/ cmd+shift+O shortcut</p>\n    </body>\n</html>`;\n\nconst _createDefaultProject = function (vfs, Phoenix) {\n    // Create phoenix app dirs\n    // Create Phoenix default project if it doesnt exist\n    let projectDir = vfs.getDefaultProjectDir();\n    Phoenix.firstBoot = false;\n    vfs.exists(projectDir, (exists)=>{\n        if(!exists){\n            vfs.ensureExistsDir(projectDir, (err)=>{\n                errorCb(err); // just alert and proceed hoping for the best\n                let indexFile = vfs.path.normalize(`${projectDir}/index.html`);\n                Phoenix.firstBoot = true;\n                fs.writeFile(indexFile, _SAMPLE_HTML, 'utf8', errorCb);\n            });\n        }\n    });\n};\n\nexport default function init(Phoenix) {\n    if(!window.fs || !window.path || !Phoenix){\n        alertError(_FS_ERROR_MESSAGE);\n    }\n\n    const vfs = _setupVFS(Phoenix, window.fs, window.path);\n    _createAppDirs(vfs);\n    _createDefaultProject(vfs, Phoenix);\n}\n\n"],"file":"init_vfs.js"}