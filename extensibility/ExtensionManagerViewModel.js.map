{"version":3,"sources":["extensibility/ExtensionManagerViewModel.js"],"names":["define","require","exports","module","_","ExtensionManager","registry_utils","EventDispatcher","Strings","PreferencesManager","_searchFields","ExtensionManagerViewModel","this","_handleStatusChange","bind","on","source","RegistryViewModel","call","infoMessage","REGISTRY_SANITY_CHECK_WARNING","InstalledViewModel","self","_sortFullSet","_setInitialFilter","DefaultViewModel","ThemesViewModel","makeEventDispatcher","prototype","SOURCE_REGISTRY","SOURCE_THEMES","SOURCE_INSTALLED","SOURCE_DEFAULT","extensions","filterSet","sortedFullSet","_lastQuery","message","notifyCount","_initializeFromSourcePromise","dispose","off","clone","trigger","initialize","_initializeFromSource","always","_updateMessage","e","id","filter","query","force","initialList","indexOf","keywords","toLowerCase","split","filterForKeyword","extensionList","word","filteredList","forEach","entry","_getEntry","_entryMatchesQuery","push","i","currentList","length","state","EXTENSION_MANAGER_ERROR_LOAD","NO_EXTENSION_MATCHES","NO_EXTENSIONS","some","fieldSpec","cur","components","Array","isArray","keyword","_setSortedExtensionList","isTheme","sortRegistry","get","registryInfo","metadata","theme","map","name","Object","create","constructor","downloadRegistry","done","fail","keys","key","installInfo","locationType","LOCATION_DEFAULT","_countUpdates","$","Deferred","resolve","promise","sort","key1","key2","ua1","updateAvailable","ua2","metadata1","metadata2","id1","title","toLocaleLowerCase","id2","localeCompare","updateCompatible","isMarkedForUpdate","index","refilter","splice"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*unittests: ExtensionManager*/\n\ndefine(function (require, exports, module) {\n\n\n    var _ = require(\"thirdparty/lodash\");\n\n    var ExtensionManager    = require(\"extensibility/ExtensionManager\"),\n        registry_utils      = require(\"extensibility/registry_utils\"),\n        EventDispatcher     = require(\"utils/EventDispatcher\"),\n        Strings             = require(\"strings\"),\n        PreferencesManager  = require(\"preferences/PreferencesManager\");\n\n    /**\n     * @private\n     * @type {Array}\n     * A list of fields to search when trying to search for a query string in an object. Each field is\n     * represented as an array of keys to recurse downward through the object. We store this here to avoid\n     * doing it for each search call.\n     */\n    var _searchFields = [[\"metadata\", \"name\"], [\"metadata\", \"title\"], [\"metadata\", \"description\"],\n                         [\"metadata\", \"author\", \"name\"], [\"metadata\", \"keywords\"], [\"owner\"]];\n    /**\n     * The base model for the ExtensionManagerView. Keeps track of the extensions that are currently visible\n     * and manages sorting/filtering them. Must be disposed with dispose() when done.\n     * Events:\n     * - change - triggered when the data for a given extension changes. Second parameter is the extension id.\n     * - filter - triggered whenever the filtered set changes (including on initialize).\n     *\n     * @constructor\n     */\n    function ExtensionManagerViewModel() {\n        this._handleStatusChange = this._handleStatusChange.bind(this);\n\n        // Listen for extension status changes.\n        ExtensionManager\n            .on(\"statusChange.\" + this.source, this._handleStatusChange)\n            .on(\"registryUpdate.\" + this.source, this._handleStatusChange);\n    }\n    EventDispatcher.makeEventDispatcher(ExtensionManagerViewModel.prototype);\n\n    /**\n     * @type {string}\n     * Constant indicating that this model/view should initialize from the main extension registry.\n     */\n    ExtensionManagerViewModel.prototype.SOURCE_REGISTRY = \"registry\";\n\n    /**\n     * @type {string}\n     * Constant indicating that this model/view should initialize from the main extension registry with only themes.\n     */\n    ExtensionManagerViewModel.prototype.SOURCE_THEMES = \"themes\";\n\n    /**\n     * @type {string}\n     * Constant indicating that this model/view should initialize from the list of locally installed extensions.\n     */\n    ExtensionManagerViewModel.prototype.SOURCE_INSTALLED = \"installed\";\n\n    /**\n     * @type {string}\n     * Constant indicating that this model/view should initialize from the list of default bundled extensions.\n     */\n    ExtensionManagerViewModel.prototype.SOURCE_DEFAULT = \"default\";\n\n    /**\n     * @type {Object}\n     * The current set of extensions managed by this model. Same as ExtensionManager.extensions.\n     */\n    ExtensionManagerViewModel.prototype.extensions = null;\n\n    /**\n     * @type {string}\n     * The current source for the model; one of the SOURCE_* keys above.\n     */\n    ExtensionManagerViewModel.prototype.source = null;\n\n    /**\n     * @type {Array.<Object>}\n     * The list of IDs of items matching the current query and sorted with the current sort.\n     */\n    ExtensionManagerViewModel.prototype.filterSet = null;\n\n    /**\n     * @type {Object}\n     * The list of all ids from the extension list, sorted with the current sort.\n     */\n    ExtensionManagerViewModel.prototype.sortedFullSet = null;\n\n    /**\n     * @private\n     * @type {string}\n     * The last query we filtered by. Used to optimize future searches.\n     */\n    ExtensionManagerViewModel.prototype._lastQuery = null;\n\n    /**\n     * @type {string}\n     * Info message to display to the user when listing extensions\n     */\n    ExtensionManagerViewModel.prototype.infoMessage = null;\n\n    /**\n     * @type {string}\n     * An optional message to display to the user\n     */\n    ExtensionManagerViewModel.prototype.message = null;\n\n    /**\n     * @type {number}\n     * Number to show in tab's notification icon. No icon shown if 0.\n     */\n    ExtensionManagerViewModel.prototype.notifyCount = 0;\n\n    /**\n     * @private {$.Promise}\n     * Internal use only to track when initialization fails, see usage in _updateMessage.\n     */\n    ExtensionManagerViewModel.prototype._initializeFromSourcePromise = null;\n\n    /**\n     * Unregisters listeners when we're done.\n     */\n    ExtensionManagerViewModel.prototype.dispose = function () {\n        ExtensionManager.off(\".\" + this.source);\n    };\n\n    /**\n     * @private\n     * Sets up the initial filtered set based on the sorted full set.\n     */\n    ExtensionManagerViewModel.prototype._setInitialFilter = function () {\n        // Initial filtered list is the same as the sorted list.\n        this.filterSet = _.clone(this.sortedFullSet);\n        this.trigger(\"filter\");\n    };\n\n    /**\n     * @private\n     * Re-sorts the current full set based on the source we're viewing.\n     * The base implementation does nothing.\n     */\n    ExtensionManagerViewModel.prototype._sortFullSet = function () { };\n\n    /**\n     * Initializes the model from the source.\n     */\n    ExtensionManagerViewModel.prototype.initialize = function () {\n        var self = this;\n\n        this._initializeFromSourcePromise = this._initializeFromSource().always(function () {\n            self._updateMessage();\n        });\n\n        return this._initializeFromSourcePromise;\n    };\n\n    /**\n     * @private\n     * Updates the initial set and filter as necessary when the status of an extension changes,\n     * and notifies listeners of the change.\n     * @param {$.Event} e The jQuery event object.\n     * @param {string} id The id of the extension whose status changed.\n     */\n    ExtensionManagerViewModel.prototype._handleStatusChange = function (e, id) {\n        this.trigger(\"change\", id);\n    };\n\n    /**\n     * @private\n     * Searches for the given query in the current extension list and updates the filter set,\n     * dispatching a filter event.\n     * @param {string} query The string to search for.\n     * @param {boolean} force If true, always filter starting with the full set, not the last\n     *     query's filter.\n     */\n    ExtensionManagerViewModel.prototype.filter = function (query, force) {\n        var self = this, initialList;\n        if (!force && this._lastQuery && query.indexOf(this._lastQuery) === 0) {\n            // This is the old query with some new letters added, so we know we can just\n            // search in the current filter set. (This is true even if query has spaces).\n            initialList = this.filterSet;\n        } else {\n            // This is a new query, so start with the full list.\n            initialList = this.sortedFullSet;\n        }\n\n        var keywords = query.toLowerCase().split(/\\s+/);\n\n        // Takes 'extensionList' and returns a version filtered to only those that match 'keyword'\n        function filterForKeyword(extensionList, word) {\n            var filteredList = [];\n            extensionList.forEach(function (id) {\n                var entry = self._getEntry(id);\n                if (entry && self._entryMatchesQuery(entry, word)) {\n                    filteredList.push(id);\n                }\n            });\n            return filteredList;\n        }\n\n        // \"AND\" the keywords together: successively filter down the result set by each keyword in turn\n        var i, currentList = initialList;\n        for (i = 0; i < keywords.length; i++) {\n            currentList = filterForKeyword(currentList, keywords[i]);\n        }\n\n        this._lastQuery = query;\n        this.filterSet = currentList;\n\n        this._updateMessage();\n\n        this.trigger(\"filter\");\n    };\n\n    /**\n     * @private\n     * Updates an optional message displayed to the user along with the extension list.\n     */\n    ExtensionManagerViewModel.prototype._updateMessage = function () {\n        if (this._initializeFromSourcePromise && this._initializeFromSourcePromise.state() === \"rejected\") {\n            this.message = Strings.EXTENSION_MANAGER_ERROR_LOAD;\n        } else if (this.filterSet && this.filterSet.length === 0) {\n            this.message = this.sortedFullSet && this.sortedFullSet.length ? Strings.NO_EXTENSION_MATCHES : Strings.NO_EXTENSIONS;\n        } else {\n            this.message = null;\n        }\n    };\n\n    /**\n     * @private\n     * This is to be overridden by subclasses to provide the metadata for the extension\n     * with the provided `id`.\n     *\n     * @param {string} id of the extension\n     * @return {Object?} extension metadata or null if there's no matching extension\n     */\n    ExtensionManagerViewModel.prototype._getEntry = function (id) {\n        return null;\n    };\n\n    /**\n     * @private\n     * Tests if the given entry matches the query.\n     * @param {Object} entry The extension entry to test.\n     * @param {string} query The query to match against.\n     * @return {boolean} Whether the query matches.\n     */\n    ExtensionManagerViewModel.prototype._entryMatchesQuery = function (entry, query) {\n        return query === \"\" ||\n            _searchFields.some(function (fieldSpec) {\n                var i, cur = entry;\n                for (i = 0; i < fieldSpec.length; i++) {\n                    // Recurse downward through the specified fields to the leaf value.\n                    cur = cur[fieldSpec[i]];\n                    if (!cur) {\n                        return false;\n                    }\n                }\n                // If the leaf value is an array (like keywords), search each item, otherwise\n                // just search in the string.\n                if (Array.isArray(cur)) {\n                    return cur.some(function (keyword) {\n                        return keyword.toLowerCase().indexOf(query) !== -1;\n                    });\n                } else if (fieldSpec[fieldSpec.length - 1] === \"owner\") {\n                    // Special handling: ignore the authentication source when querying,\n                    // since it's not useful to search on\n                    var components = cur.split(\":\");\n                    if (components[1].toLowerCase().indexOf(query) !== -1) {\n                        return true;\n                    }\n                } else if (cur.toLowerCase().indexOf(query) !== -1) {\n                    return true;\n                }\n            });\n    };\n\n    ExtensionManagerViewModel.prototype._setSortedExtensionList = function (extensions, isTheme) {\n        this.filterSet = this.sortedFullSet = registry_utils.sortRegistry(extensions, \"registryInfo\", PreferencesManager.get(\"extensions.sort\"))\n            .filter(function (entry) {\n                if (!isTheme) {\n                    return entry.registryInfo && !entry.registryInfo.metadata.theme;\n                }\n                return entry.registryInfo && entry.registryInfo.metadata.theme;\n\n            })\n            .map(function (entry) {\n                return entry.registryInfo.metadata.name;\n            });\n    };\n\n    /**\n     * The model for the ExtensionManagerView that is responsible for handling registry-based extensions.\n     * This extends ExtensionManagerViewModel.\n     * Must be disposed with dispose() when done.\n     *\n     * Events:\n     * - change - triggered when the data for a given extension changes. Second parameter is the extension id.\n     * - filter - triggered whenever the filtered set changes (including on initialize).\n     *\n     * @constructor\n     */\n    function RegistryViewModel() {\n        ExtensionManagerViewModel.call(this);\n        this.infoMessage = Strings.REGISTRY_SANITY_CHECK_WARNING;\n    }\n\n    RegistryViewModel.prototype = Object.create(ExtensionManagerViewModel.prototype);\n    RegistryViewModel.prototype.constructor = RegistryViewModel;\n\n    /**\n     * @type {string}\n     * RegistryViewModels always have a source of SOURCE_REGISTRY.\n     */\n    RegistryViewModel.prototype.source = ExtensionManagerViewModel.prototype.SOURCE_REGISTRY;\n\n    /**\n     * Initializes the model from the remote extension registry.\n     * @return {$.Promise} a promise that's resolved with the registry JSON data\n     * or rejected if the server can't be reached.\n     */\n    RegistryViewModel.prototype._initializeFromSource = function () {\n        var self = this;\n        return ExtensionManager.downloadRegistry()\n            .done(function () {\n                self.extensions = ExtensionManager.extensions;\n\n                // Sort the registry by last published date and store the sorted list of IDs.\n                self._setSortedExtensionList(ExtensionManager.extensions, false);\n                self._setInitialFilter();\n            })\n            .fail(function () {\n                self.extensions = [];\n                self.sortedFullSet = [];\n                self.filterSet = [];\n            });\n    };\n\n    /**\n     * @private\n     * Finds the extension metadata by id. If there is no extension matching the given id,\n     * this returns `null`.\n     * @param {string} id of the extension\n     * @return {Object?} extension metadata or null if there's no matching extension\n     */\n    RegistryViewModel.prototype._getEntry = function (id) {\n        var entry = this.extensions[id];\n        if (entry) {\n            return entry.registryInfo;\n        }\n        return entry;\n    };\n\n    /**\n     * The model for the ExtensionManagerView that is responsible for handling previously-installed extensions.\n     * This extends ExtensionManagerViewModel.\n     * Must be disposed with dispose() when done.\n     *\n     * Events:\n     * - change - triggered when the data for a given extension changes. Second parameter is the extension id.\n     * - filter - triggered whenever the filtered set changes (including on initialize).\n     *\n     * @constructor\n     */\n    function InstalledViewModel() {\n        ExtensionManagerViewModel.call(this);\n\n        // when registry is downloaded, sort extensions again - those with updates will be before others\n        var self = this;\n        ExtensionManager.on(\"registryDownload.\" + this.source, function () {\n            self._sortFullSet();\n            self._setInitialFilter();\n        });\n    }\n\n    InstalledViewModel.prototype = Object.create(ExtensionManagerViewModel.prototype);\n    InstalledViewModel.prototype.constructor = InstalledViewModel;\n\n    /**\n     * @type {string}\n     * InstalledViewModels always have a source of SOURCE_INSTALLED.\n     */\n    InstalledViewModel.prototype.source = ExtensionManagerViewModel.prototype.SOURCE_INSTALLED;\n\n    /**\n     * Initializes the model from the set of locally installed extensions, sorted\n     * alphabetically by id (or name of the extension folder for legacy extensions).\n     * @return {$.Promise} a promise that's resolved when we're done initializing.\n     */\n    InstalledViewModel.prototype._initializeFromSource = function () {\n        var self = this;\n        this.extensions = ExtensionManager.extensions;\n        this.sortedFullSet = Object.keys(this.extensions)\n            .filter(function (key) {\n                return self.extensions[key].installInfo &&\n                    self.extensions[key].installInfo.locationType !== ExtensionManager.LOCATION_DEFAULT;\n            });\n        this._sortFullSet();\n        this._setInitialFilter();\n        this._countUpdates();\n\n        return new $.Deferred().resolve().promise();\n    };\n\n    /**\n     * @private\n     * Re-sorts the current full set\n     */\n    InstalledViewModel.prototype._sortFullSet = function () {\n        var self = this;\n\n        this.sortedFullSet = this.sortedFullSet.sort(function (key1, key2) {\n            // before sorting by name, put first extensions that have updates\n            var ua1 = self.extensions[key1].installInfo.updateAvailable,\n                ua2 = self.extensions[key2].installInfo.updateAvailable;\n\n            if (ua1 && !ua2) {\n                return -1;\n            } else if (!ua1 && ua2) {\n                return 1;\n            }\n\n            var metadata1 = self.extensions[key1].installInfo.metadata,\n                metadata2 = self.extensions[key2].installInfo.metadata,\n                id1 = (metadata1.title || metadata1.name).toLocaleLowerCase(),\n                id2 = (metadata2.title || metadata2.name).toLocaleLowerCase();\n\n            return id1.localeCompare(id2);\n        });\n    };\n\n    /**\n     * @private\n     * Updates notifyCount based on number of extensions with an update available\n     */\n    InstalledViewModel.prototype._countUpdates = function () {\n        var self = this;\n        this.notifyCount = 0;\n        this.sortedFullSet.forEach(function (key) {\n            if (self.extensions[key].installInfo.updateCompatible && !ExtensionManager.isMarkedForUpdate(key)) {\n                self.notifyCount++;\n            }\n        });\n    };\n\n    /**\n     * @private\n     * Updates the initial set and filter as necessary when the status of an extension changes,\n     * and notifies listeners of the change.\n     * @param {$.Event} e The jQuery event object.\n     * @param {string} id The id of the extension whose status changed.\n     */\n    InstalledViewModel.prototype._handleStatusChange = function (e, id) {\n        var index = this.sortedFullSet.indexOf(id),\n            refilter = false;\n        if (index !== -1 && !this.extensions[id].installInfo) {\n            // This was in our set, but was uninstalled. Remove it.\n            this.sortedFullSet.splice(index, 1);\n            this._countUpdates();  // may also affect update count\n            refilter = true;\n        } else if (index === -1 && this.extensions[id].installInfo) {\n            // This was not in our set, but is now installed. Add it and resort.\n            this.sortedFullSet.push(id);\n            this._sortFullSet();\n            refilter = true;\n        }\n        if (refilter) {\n            this.filter(this._lastQuery || \"\", true);\n        }\n\n        if (this.extensions[id].installInfo) {\n            // If our count of available updates may have been affected, re-count\n            this._countUpdates();\n        }\n\n        ExtensionManagerViewModel.prototype._handleStatusChange.call(this, e, id);\n    };\n\n    /**\n     * @private\n     * Finds the extension metadata by id. If there is no extension matching the given id,\n     * this returns `null`.\n     * @param {string} id of the extension\n     * @return {Object?} extension metadata or null if there's no matching extension\n     */\n    InstalledViewModel.prototype._getEntry = function (id) {\n        var entry = this.extensions[id];\n        if (entry) {\n            return entry.installInfo;\n        }\n        return entry;\n    };\n\n    /**\n     * Model for displaying default extensions that come bundled with Brackets\n     */\n    function DefaultViewModel() {\n        ExtensionManagerViewModel.call(this);\n    }\n\n    // Inheritance setup\n    DefaultViewModel.prototype = Object.create(ExtensionManagerViewModel.prototype);\n    DefaultViewModel.prototype.constructor = DefaultViewModel;\n\n    /**\n     * Add SOURCE_DEFAULT to DefaultViewModel\n     */\n    DefaultViewModel.prototype.source = ExtensionManagerViewModel.prototype.SOURCE_DEFAULT;\n\n    /**\n     * Initializes the model from the set of default extensions, sorted alphabetically by id\n     * @return {$.Promise} a promise that's resolved when we're done initializing.\n     */\n    DefaultViewModel.prototype._initializeFromSource = function () {\n        var self = this;\n        this.extensions = ExtensionManager.extensions;\n        this.sortedFullSet = Object.keys(this.extensions)\n            .filter(function (key) {\n                return self.extensions[key].installInfo &&\n                    self.extensions[key].installInfo.locationType === ExtensionManager.LOCATION_DEFAULT;\n            });\n        this._sortFullSet();\n        this._setInitialFilter();\n        return new $.Deferred().resolve().promise();\n    };\n\n    /**\n     * @private\n     * Re-sorts the current full set\n     */\n    DefaultViewModel.prototype._sortFullSet = function () {\n        var self = this;\n        this.sortedFullSet = this.sortedFullSet.sort(function (key1, key2) {\n            var metadata1 = self.extensions[key1].installInfo.metadata,\n                metadata2 = self.extensions[key2].installInfo.metadata,\n                id1 = (metadata1.title || metadata1.name).toLocaleLowerCase(),\n                id2 = (metadata2.title || metadata2.name).toLocaleLowerCase();\n            return id1.localeCompare(id2);\n        });\n    };\n\n    /**\n     * @private\n     * Finds the default extension metadata by id. If there is no default extension matching the given id,\n     * this returns `null`.\n     * @param {string} id of the theme extension\n     * @return {Object?} extension metadata or null if there's no matching extension\n     */\n    DefaultViewModel.prototype._getEntry = function (id) {\n        return this.extensions[id] ? this.extensions[id].installInfo : null;\n    };\n\n    /**\n     * The model for the ExtensionManagerView that is responsible for handling registry-based theme extensions.\n     * This extends ExtensionManagerViewModel.\n     * Must be disposed with dispose() when done.\n     *\n     * Events:\n     * - change - triggered when the data for a given extension changes. Second parameter is the extension id.\n     * - filter - triggered whenever the filtered set changes (including on initialize).\n     *\n     * @constructor\n     */\n    function ThemesViewModel() {\n        ExtensionManagerViewModel.call(this);\n    }\n\n    // Inheritance setup\n    ThemesViewModel.prototype = Object.create(ExtensionManagerViewModel.prototype);\n    ThemesViewModel.prototype.constructor = ThemesViewModel;\n\n    /**\n     * @type {string}\n     * ThemeViewModels always have a source of SOURCE_THEMES.\n     */\n    ThemesViewModel.prototype.source = ExtensionManagerViewModel.prototype.SOURCE_THEMES;\n\n    /**\n     * Initializes the model from the remote extension registry.\n     * @return {$.Promise} a promise that's resolved with the registry JSON data.\n     */\n    ThemesViewModel.prototype._initializeFromSource = function () {\n        var self = this;\n        return ExtensionManager.downloadRegistry()\n            .done(function () {\n                self.extensions = ExtensionManager.extensions;\n\n                // Sort the registry by last published date and store the sorted list of IDs.\n                self._setSortedExtensionList(ExtensionManager.extensions, true);\n                self._setInitialFilter();\n            })\n            .fail(function () {\n                self.extensions = [];\n                self.sortedFullSet = [];\n                self.filterSet = [];\n            });\n    };\n\n    /**\n     * @private\n     * Finds the theme extension metadata by id. If there is no theme extension matching the given id,\n     * this returns `null`.\n     * @param {string} id of the theme extension\n     * @return {Object?} extension metadata or null if there's no matching extension\n     */\n    ThemesViewModel.prototype._getEntry = function (id) {\n        var entry = this.extensions[id];\n        if (entry) {\n            return entry.registryInfo;\n        }\n        return entry;\n    };\n\n    exports.RegistryViewModel = RegistryViewModel;\n    exports.ThemesViewModel = ThemesViewModel;\n    exports.InstalledViewModel = InstalledViewModel;\n    exports.DefaultViewModel = DefaultViewModel;\n});\n"],"file":"ExtensionManagerViewModel.js"}