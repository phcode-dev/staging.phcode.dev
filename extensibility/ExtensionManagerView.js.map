{"version":3,"sources":["extensibility/ExtensionManagerView.js"],"names":["define","require","exports","module","Strings","EventDispatcher","StringUtils","ExtensionManager","registry_utils","InstallExtensionDialog","LocalizationUtils","LanguageManager","Mustache","PathUtils","itemTemplate","PreferencesManager","_tmpLink","window","document","createElement","ExtensionManagerView","makeEventDispatcher","prototype","initialize","model","self","this","result","$","Deferred","_itemTemplate","compile","_itemViews","$el","source","_$emptyMessage","appendTo","_$infoMessage","html","infoMessage","_$table","val","get","done","_setupEventHandlers","always","_render","resolve","promise","_toggleDescription","id","$element","showFull","description","linkTitle","info","_getEntry","metadata","VIEW_TRUNCATED_DESCRIPTION","shortdescription","VIEW_COMPLETE_DESCRIPTION","data","attr","prev","text","on","e","extensions","$oldItem","_updateMessage","filterSet","indexOf","remove","$newItem","_renderItem","replaceWith","$target","target","hasClass","markForRemoval","removeUpdate","markForDisabling","bind","_installUsingDialog","enable","entry","context","extend","isInstalled","installInfo","failedToStart","status","START_FAILED","disabled","DISABLED","hasVersionInfo","versions","registryInfo","latestVerCompatInfo","getCompatibilityInfo","brackets","apiVersion","isCompatible","requiresNewer","isCompatibleLatest","isLatestVersion","installWarningBase","EXTENSION_LATEST_INCOMPATIBLE_NEWER","EXTENSION_LATEST_INCOMPATIBLE_OLDER","installWarning","format","length","version","compatibleVersion","downloadCount","totalDownloads","lang","getLocale","shortLang","split","forEach","locale","hasOwnProperty","prop","undefined","truncate","isMarkedForRemoval","name","isMarkedForDisabling","isMarkedForUpdate","hasPendingAction","showInstallButton","SOURCE_REGISTRY","SOURCE_THEMES","updateAvailable","showUpdateButton","allowInstall","Array","isArray","i18n","translated","translatedLangs","map","value","getLocalizedLabel","sort","lang1","lang2","locales","userLangIndex","localeCompare","join","EXTENSION_TRANSLATED_LANGS","translatedIntoUserLang","isLocaleDefault","extensionTranslated","EXTENSION_TRANSLATED_USER_LANG","EXTENSION_TRANSLATED_GENERAL","isInstalledInUserFolder","locationType","LOCATION_USER","allowRemove","allowUpdate","updateCompatible","updateNotAllowedReason","CANT_UPDATE","CANT_UPDATE_DEV","removalAllowed","isDefaultOrInstalled","isDefaultAndTheme","theme","disablingAllowed","enablingAllowed","helper","homepage","parsed","parseUrl","href","protocol","language","getLanguageForExtension","filenameExtension","replace","isBinary","message","css","empty","$item","trigger","_isUpdate","compatInfo","url","getExtensionURL","updateUsingDialog","updateFromDownload","installUsingDialog","filter","query"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*unittests: ExtensionManager*/\n\ndefine(function (require, exports, module) {\n\n\n    var Strings                   = require(\"strings\"),\n        EventDispatcher           = require(\"utils/EventDispatcher\"),\n        StringUtils               = require(\"utils/StringUtils\"),\n        ExtensionManager          = require(\"extensibility/ExtensionManager\"),\n        registry_utils            = require(\"extensibility/registry_utils\"),\n        InstallExtensionDialog    = require(\"extensibility/InstallExtensionDialog\"),\n        LocalizationUtils         = require(\"utils/LocalizationUtils\"),\n        LanguageManager           = require(\"language/LanguageManager\"),\n        Mustache                  = require(\"thirdparty/mustache/mustache\"),\n        PathUtils                 = require(\"thirdparty/path-utils/path-utils\"),\n        itemTemplate              = require(\"text!htmlContent/extension-manager-view-item.html\"),\n        PreferencesManager        = require(\"preferences/PreferencesManager\");\n\n\n    /**\n     * Create a detached link element, so that we can use it later to extract url details like 'protocol'\n     */\n    var _tmpLink = window.document.createElement('a');\n\n    /**\n     * Creates a view enabling the user to install and manage extensions. Must be initialized\n     * with initialize(). When the view is closed, dispose() must be called.\n     * @constructor\n     */\n    function ExtensionManagerView() {\n    }\n    EventDispatcher.makeEventDispatcher(ExtensionManagerView.prototype);\n\n    /**\n     * Initializes the view to show a set of extensions.\n     * @param {ExtensionManagerViewModel} model Model object containing extension data to view\n     * @return {$.Promise} a promise that's resolved once the view has been initialized. Never\n     *     rejected.\n     */\n    ExtensionManagerView.prototype.initialize = function (model) {\n        var self = this,\n            result = new $.Deferred();\n        this.model = model;\n        this._itemTemplate = Mustache.compile(itemTemplate);\n        this._itemViews = {};\n        this.$el = $(\"<div class='extension-list tab-pane' id='\" + this.model.source + \"'/>\");\n        this._$emptyMessage = $(\"<div class='empty-message'/>\")\n            .appendTo(this.$el);\n        this._$infoMessage = $(\"<div class='info-message'/>\")\n            .appendTo(this.$el).html(this.model.infoMessage);\n        this._$table = $(\"<table class='table'/>\").appendTo(this.$el);\n        $(\".sort-extensions\").val(PreferencesManager.get(\"extensions.sort\"));\n\n        this.model.initialize().done(function () {\n            self._setupEventHandlers();\n        }).always(function () {\n            self._render();\n            result.resolve();\n        });\n\n        return result.promise();\n    };\n\n    /**\n     * @type {jQueryObject}\n     * The root of the view's DOM tree.\n     */\n    ExtensionManagerView.prototype.$el = null;\n\n    /**\n     * @type {Model}\n     * The view's model. Handles sorting and filtering of items in the view.\n     */\n    ExtensionManagerView.prototype.model = null;\n\n    /**\n     * @type {jQueryObject}\n     * Element showing a message when there are no extensions.\n     */\n    ExtensionManagerView.prototype._$emptyMessage = null;\n\n    /**\n     * @private\n     * @type {jQueryObject}\n     * The root of the table inside the view.\n     */\n    ExtensionManagerView.prototype._$table = null;\n\n    /**\n     * @private\n     * @type {function} The compiled template we use for rendering items in the extension list.\n     */\n    ExtensionManagerView.prototype._itemTemplate = null;\n\n    /**\n     * @private\n     * @type {Object.<string, jQueryObject>}\n     * The individual views for each item, keyed by the extension ID.\n     */\n    ExtensionManagerView.prototype._itemViews = null;\n\n    /**\n     * Toggles between truncated and full length extension descriptions\n     * @param {string} id The id of the extension clicked\n     * @param {JQueryElement} $element The DOM element of the extension clicked\n     * @param {boolean} showFull true if full length description should be shown, false for shortened version.\n     */\n    ExtensionManagerView.prototype._toggleDescription = function (id, $element, showFull) {\n        var description, linkTitle,\n            info = this.model._getEntry(id);\n\n        // Toggle between appropriate descriptions and link title,\n        // depending on if extension is installed or not\n        if (showFull) {\n            description = info.metadata.description;\n            linkTitle = Strings.VIEW_TRUNCATED_DESCRIPTION;\n        } else {\n            description = info.metadata.shortdescription;\n            linkTitle = Strings.VIEW_COMPLETE_DESCRIPTION;\n        }\n\n        $element.data(\"toggle-desc\", showFull ? \"trunc-desc\" : \"expand-desc\")\n                .attr(\"title\", linkTitle)\n                .prev(\".ext-full-description\").text(description);\n    };\n\n    /**\n     * @private\n     * Attaches our event handlers. We wait to do this until we've fully fetched the extension list.\n     */\n    ExtensionManagerView.prototype._setupEventHandlers = function () {\n        var self = this;\n\n        // Listen for model data and filter changes.\n        this.model\n            .on(\"filter\", function () {\n                self._render();\n            })\n            .on(\"change\", function (e, id) {\n                var extensions = self.model.extensions,\n                    $oldItem = self._itemViews[id];\n                self._updateMessage();\n                if (self.model.filterSet.indexOf(id) === -1) {\n                    // This extension is not in the filter set. Remove it from the view if we\n                    // were rendering it previously.\n                    if ($oldItem) {\n                        $oldItem.remove();\n                        delete self._itemViews[id];\n                    }\n                } else {\n                    // Render the item, replacing the old item if we had previously rendered it.\n                    var $newItem = self._renderItem(extensions[id], self.model._getEntry(id));\n                    if ($oldItem) {\n                        $oldItem.replaceWith($newItem);\n                        self._itemViews[id] = $newItem;\n                    }\n                }\n            });\n\n        // UI event handlers\n        this.$el\n            .on(\"click\", \"a\", function (e) {\n                var $target = $(e.target);\n                if ($target.hasClass(\"undo-remove\")) {\n                    ExtensionManager.markForRemoval($target.attr(\"data-extension-id\"), false);\n                } else if ($target.hasClass(\"remove\")) {\n                    ExtensionManager.markForRemoval($target.attr(\"data-extension-id\"), true);\n                } else if ($target.hasClass(\"undo-update\")) {\n                    ExtensionManager.removeUpdate($target.attr(\"data-extension-id\"));\n                } else if ($target.hasClass(\"undo-disable\")) {\n                    ExtensionManager.markForDisabling($target.attr(\"data-extension-id\"), false);\n                } else if ($target.data(\"toggle-desc\") === \"expand-desc\") {\n                    this._toggleDescription($target.attr(\"data-extension-id\"), $target, true);\n                } else if ($target.data(\"toggle-desc\") === \"trunc-desc\") {\n                    this._toggleDescription($target.attr(\"data-extension-id\"), $target, false);\n                }\n            }.bind(this))\n            .on(\"click\", \"button.install\", function (e) {\n                self._installUsingDialog($(e.target).attr(\"data-extension-id\"));\n            })\n            .on(\"click\", \"button.update\", function (e) {\n                self._installUsingDialog($(e.target).attr(\"data-extension-id\"), true);\n            })\n            .on(\"click\", \"button.remove\", function (e) {\n                ExtensionManager.markForRemoval($(e.target).attr(\"data-extension-id\"), true);\n            })\n            .on(\"click\", \"button.disable\", function (e) {\n                ExtensionManager.markForDisabling($(e.target).attr(\"data-extension-id\"), true);\n            })\n            .on(\"click\", \"button.enable\", function (e) {\n                ExtensionManager.enable($(e.target).attr(\"data-extension-id\"));\n            });\n    };\n\n    /**\n     * @private\n     * Renders the view for a single extension entry.\n     * @param {Object} entry The extension entry to render.\n     * @param {Object} info The extension's metadata.\n     * @return {jQueryObject} The rendered node as a jQuery object.\n     */\n    ExtensionManagerView.prototype._renderItem = function (entry, info) {\n        // Create a Mustache context object containing the entry data and our helper functions.\n\n        // Start with the basic info from the given entry, either the installation info or the\n        // registry info depending on what we're listing.\n        var context = $.extend({}, info);\n\n        // Normally we would merge the strings into the context we're passing into the template,\n        // but since we're instantiating the template for every item, it seems wrong to take the hit\n        // of copying all the strings into the context, so we just make it a subfield.\n        context.Strings = Strings;\n\n        // Calculate various bools, since Mustache doesn't let you use expressions and interprets\n        // arrays as iteration contexts.\n        context.isInstalled = !!entry.installInfo;\n        context.failedToStart = (entry.installInfo && entry.installInfo.status === ExtensionManager.START_FAILED);\n        context.disabled = (entry.installInfo && entry.installInfo.status === ExtensionManager.DISABLED);\n        context.hasVersionInfo = !!info.versions;\n\n        if (entry.registryInfo) {\n            var latestVerCompatInfo = ExtensionManager.getCompatibilityInfo(entry.registryInfo, brackets.metadata.apiVersion);\n            context.isCompatible = latestVerCompatInfo.isCompatible;\n            context.requiresNewer = latestVerCompatInfo.requiresNewer;\n            context.isCompatibleLatest = latestVerCompatInfo.isLatestVersion;\n            if (!context.isCompatibleLatest) {\n                var installWarningBase = context.requiresNewer ? Strings.EXTENSION_LATEST_INCOMPATIBLE_NEWER : Strings.EXTENSION_LATEST_INCOMPATIBLE_OLDER;\n                context.installWarning = StringUtils.format(installWarningBase, entry.registryInfo.versions[entry.registryInfo.versions.length - 1].version, latestVerCompatInfo.compatibleVersion);\n            }\n            context.downloadCount = entry.registryInfo.totalDownloads;\n        } else {\n            // We should only get here when viewing the Installed tab and some extensions don't exist in the registry\n            // (or registry is offline). These flags *should* always be ignored in that scenario, but just in case...\n            context.isCompatible = context.isCompatibleLatest = true;\n        }\n\n        // Check if extension metadata contains localized content.\n        var lang            = brackets.getLocale(),\n            shortLang       = lang.split(\"-\")[0];\n        if (info.metadata[\"package-i18n\"]) {\n            [shortLang, lang].forEach(function (locale) {\n                if (info.metadata[\"package-i18n\"].hasOwnProperty(locale)) {\n                    // only overlay specific properties with the localized values\n                    [\"title\", \"description\", \"homepage\", \"keywords\"].forEach(function (prop) {\n                        if (info.metadata[\"package-i18n\"][locale].hasOwnProperty(prop)) {\n                            info.metadata[prop] = info.metadata[\"package-i18n\"][locale][prop];\n                        }\n                    });\n                }\n            });\n        }\n\n        if (info.metadata.description !== undefined) {\n            info.metadata.shortdescription = StringUtils.truncate(info.metadata.description, 200);\n        }\n\n        context.isMarkedForRemoval = ExtensionManager.isMarkedForRemoval(info.metadata.name);\n        context.isMarkedForDisabling = ExtensionManager.isMarkedForDisabling(info.metadata.name);\n        context.isMarkedForUpdate = ExtensionManager.isMarkedForUpdate(info.metadata.name);\n        var hasPendingAction = context.isMarkedForDisabling || context.isMarkedForRemoval || context.isMarkedForUpdate;\n\n        context.showInstallButton = (this.model.source === this.model.SOURCE_REGISTRY || this.model.source === this.model.SOURCE_THEMES) && !context.updateAvailable;\n        context.showUpdateButton = context.updateAvailable && !context.isMarkedForUpdate && !context.isMarkedForRemoval;\n\n        context.allowInstall = context.isCompatible && !context.isInstalled;\n\n        if (Array.isArray(info.metadata.i18n) && info.metadata.i18n.length > 0) {\n            context.translated = true;\n            context.translatedLangs =\n                info.metadata.i18n.map(function (value) {\n                    if (value === \"root\") {\n                        value = \"en\";\n                    }\n                    return { name: LocalizationUtils.getLocalizedLabel(value), locale: value };\n                })\n                .sort(function (lang1, lang2) {\n                    // List users language first\n                    var locales         = [lang1.locale, lang2.locale],\n                        userLangIndex   = locales.indexOf(lang);\n                    if (userLangIndex > -1) {\n                        return userLangIndex;\n                    }\n                    userLangIndex = locales.indexOf(shortLang);\n                    if (userLangIndex > -1) {\n                        return userLangIndex;\n                    }\n\n                    return lang1.name.localeCompare(lang2.name);\n                })\n                .map(function (value) {\n                    return value.name;\n                })\n                .join(\", \");\n            context.translatedLangs = StringUtils.format(Strings.EXTENSION_TRANSLATED_LANGS, context.translatedLangs);\n\n            // If the selected language is System Default, match both the short (2-char) language code\n            // and the long one\n            var translatedIntoUserLang =\n                (brackets.isLocaleDefault() && info.metadata.i18n.indexOf(shortLang) > -1) ||\n                info.metadata.i18n.indexOf(lang) > -1;\n            context.extensionTranslated = StringUtils.format(\n                translatedIntoUserLang ? Strings.EXTENSION_TRANSLATED_USER_LANG : Strings.EXTENSION_TRANSLATED_GENERAL,\n                info.metadata.i18n.length\n            );\n        }\n\n        var isInstalledInUserFolder = (entry.installInfo && entry.installInfo.locationType === ExtensionManager.LOCATION_USER);\n        context.allowRemove = isInstalledInUserFolder;\n        context.allowUpdate = context.showUpdateButton && context.isCompatible && context.updateCompatible && isInstalledInUserFolder;\n        if (!context.allowUpdate) {\n            context.updateNotAllowedReason = isInstalledInUserFolder ? Strings.CANT_UPDATE : Strings.CANT_UPDATE_DEV;\n        }\n\n        context.removalAllowed = this.model.source === \"installed\" &&\n            !context.failedToStart && !hasPendingAction;\n        var isDefaultOrInstalled = this.model.source === \"default\" || this.model.source === \"installed\";\n        var isDefaultAndTheme = this.model.source === \"default\" && context.metadata.theme;\n        context.disablingAllowed = isDefaultOrInstalled && !isDefaultAndTheme && !context.disabled && !hasPendingAction;\n        context.enablingAllowed = isDefaultOrInstalled && !isDefaultAndTheme && context.disabled && !hasPendingAction;\n\n        // Copy over helper functions that we share with the registry app.\n        [\"lastVersionDate\", \"authorInfo\"].forEach(function (helper) {\n            context[helper] = registry_utils[helper];\n        });\n\n        // Do some extra validation on homepage url to make sure we don't end up executing local binary\n        if (context.metadata.homepage) {\n            var parsed = PathUtils.parseUrl(context.metadata.homepage);\n\n            // We can't rely on path-utils because of known problems with protocol identification\n            // Falling back to Browsers protocol identification mechanism\n            _tmpLink.href = context.metadata.homepage;\n\n            // Check if the homepage refers to a local resource\n            if (_tmpLink.protocol === \"file:\") {\n                var language = LanguageManager.getLanguageForExtension(parsed.filenameExtension.replace(/^\\./, ''));\n                // If identified language for the local resource is binary, don't list it\n                if (language && language.isBinary()) {\n                    delete context.metadata.homepage;\n                }\n            }\n        }\n\n        return $(this._itemTemplate(context));\n    };\n\n    /**\n     * @private\n     * Display an optional message (hiding the extension list if displayed)\n     * @return {boolean} Returns true if a message is displayed\n     */\n    ExtensionManagerView.prototype._updateMessage = function () {\n        if (this.model.message) {\n            this._$emptyMessage.css(\"display\", \"block\");\n            this._$emptyMessage.html(this.model.message);\n            this._$infoMessage.css(\"display\", \"none\");\n            this._$table.css(\"display\", \"none\");\n\n            return true;\n        }\n        this._$emptyMessage.css(\"display\", \"none\");\n        this._$infoMessage.css(\"display\", this.model.infoMessage ? \"block\" : \"none\");\n        this._$table.css(\"display\", \"\");\n\n        return false;\n\n    };\n\n    /**\n     * @private\n     * Renders the extension entry table based on the model's current filter set. Will create\n     * new items for entries that haven't yet been rendered, but will not re-render existing items.\n     */\n    ExtensionManagerView.prototype._render = function () {\n        var self = this;\n\n        this._$table.empty();\n        this._updateMessage();\n\n        this.model.filterSet.forEach(function (id) {\n            var $item = self._itemViews[id];\n            if (!$item) {\n                $item = self._renderItem(self.model.extensions[id], self.model._getEntry(id));\n                self._itemViews[id] = $item;\n            }\n            $item.appendTo(self._$table);\n        });\n\n        this.trigger(\"render\");\n    };\n\n    /**\n     * @private\n     * Install the extension with the given ID using the install dialog.\n     * @param {string} id ID of the extension to install.\n     */\n    ExtensionManagerView.prototype._installUsingDialog = function (id, _isUpdate) {\n        var entry = this.model.extensions[id];\n        if (entry && entry.registryInfo) {\n            var compatInfo = ExtensionManager.getCompatibilityInfo(entry.registryInfo, brackets.metadata.apiVersion),\n                url = ExtensionManager.getExtensionURL(id, compatInfo.compatibleVersion);\n\n            // TODO: this should set .done on the returned promise\n            if (_isUpdate) {\n                InstallExtensionDialog.updateUsingDialog(url).done(ExtensionManager.updateFromDownload);\n            } else {\n                InstallExtensionDialog.installUsingDialog(url);\n            }\n        }\n    };\n\n    /**\n     * Filters the contents of the view.\n     * @param {string} query The query to filter by.\n     */\n    ExtensionManagerView.prototype.filter = function (query) {\n        this.model.filter(query);\n    };\n\n    exports.ExtensionManagerView = ExtensionManagerView;\n});\n"],"file":"ExtensionManagerView.js"}