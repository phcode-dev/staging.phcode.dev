{"version":3,"sources":["extensibility/node/spec/Validation.spec.js"],"names":["rewire","require","packageValidator","path","temp","testFilesDirectory","join","dirname","module","filename","basicValidExtension","basicValidExtension2","basicValidTheme","missingPackageJSON","invalidJSON","invalidZip","missingNameVersion","missingMain","oneLevelDown","bogusTopDir","badname","mainInDirectory","invalidVersion","invalidBracketsVersion","ignoredFolder","describe","afterEach","cleanup","it","done","validate","err","result","expect","toBeNull","extractDir","toBeDefined","errors","length","toEqual","metadata","name","version","title","author","email","url","toBeUndefined","requirePackageJSON","theme","commonPrefix","parse","_parsePersonString","contrib","contributors","disallowedWords","validateName","__get__"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*eslint-env node */\n/*jslint node: true */\n/*global expect, describe, it, afterEach */\n\n\n\nvar rewire           = require(\"rewire\"),\n    packageValidator = rewire(\"../package-validator\"),\n    path             = require(\"path\"),\n    temp             = require(\"temp\");\n\nvar testFilesDirectory = path.join(path.dirname(module.filename),\n                                    \"..\",   // node\n                                    \"..\",   // extensibility\n                                    \"..\",   // src\n                                    \"..\",   // brackets\n                                    \"test\",\n                                    \"spec\",\n                                    \"extension-test-files\");\n\nvar basicValidExtension    = path.join(testFilesDirectory, \"basic-valid-extension.zip\"),\n    basicValidExtension2   = path.join(testFilesDirectory, \"basic-valid-extension-2.0.zip\"),\n    basicValidTheme        = path.join(testFilesDirectory, \"basic-valid-theme-1.0.zip\"),\n    missingPackageJSON     = path.join(testFilesDirectory, \"missing-package-json.zip\"),\n    invalidJSON            = path.join(testFilesDirectory, \"invalid-json.zip\"),\n    invalidZip             = path.join(testFilesDirectory, \"invalid-zip-file.zip\"),\n    missingNameVersion     = path.join(testFilesDirectory, \"missing-name-version.zip\"),\n    missingMain            = path.join(testFilesDirectory, \"missing-main.zip\"),\n    oneLevelDown           = path.join(testFilesDirectory, \"one-level-extension-master.zip\"),\n    bogusTopDir            = path.join(testFilesDirectory, \"bogus-top-dir.zip\"),\n    badname                = path.join(testFilesDirectory, \"badname.zip\"),\n    mainInDirectory        = path.join(testFilesDirectory, \"main-in-directory.zip\"),\n    invalidVersion         = path.join(testFilesDirectory, \"invalid-version.zip\"),\n    invalidBracketsVersion = path.join(testFilesDirectory, \"invalid-brackets-version.zip\"),\n    ignoredFolder          = path.join(testFilesDirectory, \"has-macosx.zip\");\n\ndescribe(\"Package Validation\", function () {\n\n    afterEach(function () {\n        temp.cleanup();\n    });\n\n    it(\"should handle a good package\", function (done) {\n        packageValidator.validate(basicValidExtension, {}, function (err, result) {\n            expect(err).toBeNull();\n            expect(result.extractDir).toBeDefined();\n            expect(result.errors.length).toEqual(0);\n            var metadata = result.metadata;\n            expect(metadata.name).toEqual(\"basic-valid-extension\");\n            expect(metadata.version).toEqual(\"1.0.0\");\n            expect(metadata.title).toEqual(\"Basic Valid Extension\");\n            expect(metadata.author.name).toEqual(\"Alfred Einstein\");\n            expect(metadata.author.email).toEqual(\"alfred_not_albert@thoseeinsteins.org\");\n            expect(metadata.author.url).toBeUndefined();\n            done();\n        });\n    });\n\n    it(\"should NOT complain about missing package.json\", function (done) {\n        packageValidator.validate(missingPackageJSON, {}, function (err, result) {\n            expect(err).toBeNull();\n            var errors = result.errors;\n            expect(errors.length).toEqual(0);\n            expect(result.metadata).toBeNull();\n            done();\n        });\n    });\n\n    it(\"should complain about missing package.json if you tell it to\", function (done) {\n        packageValidator.validate(missingPackageJSON, {\n            requirePackageJSON: true\n        }, function (err, result) {\n            expect(err).toBeNull();\n            var errors = result.errors;\n            expect(errors.length).toEqual(1);\n            expect(errors[0][0]).toEqual(\"MISSING_PACKAGE_JSON\");\n            done();\n        });\n    });\n\n    it(\"should complain about illegal path\", function (done) {\n        packageValidator.validate(path.join(testFilesDirectory, \"NO_FILE_HERE\"), {}, function (err, result) {\n            expect(err).toBeNull();\n            var errors = result.errors;\n            expect(errors.length).toEqual(1);\n            expect(errors[0][0]).toEqual(\"NOT_FOUND_ERR\");\n            expect(result.metadata).toBeUndefined();\n            done();\n        });\n    });\n\n    it(\"should complain about invalid JSON\", function (done) {\n        packageValidator.validate(invalidJSON, {}, function (err, result) {\n            expect(err).toBeNull();\n            var errors = result.errors;\n            expect(errors.length).toEqual(1);\n            expect(errors[0][0]).toEqual(\"INVALID_PACKAGE_JSON\");\n            expect(errors[0][1]).toEqual(\"SyntaxError: Unexpected token I\");\n            expect(errors[0][2]).toEqual(invalidJSON);\n            expect(result.metadata).toBeUndefined();\n            done();\n        });\n    });\n\n    it(\"should complain about an invalid zip file\", function (done) {\n        packageValidator.validate(invalidZip, {}, function (err, result) {\n            expect(err).toBeNull();\n            var errors = result.errors;\n            expect(errors.length).toEqual(1);\n            expect(errors[0][0]).toEqual(\"INVALID_ZIP_FILE\");\n            done();\n        });\n    });\n\n    it(\"should require name and version in the metadata\", function (done) {\n        packageValidator.validate(missingNameVersion, {}, function (err, result) {\n            expect(err).toBeNull();\n            var errors = result.errors;\n            expect(errors.length).toEqual(2);\n            expect(errors[0][0]).toEqual(\"MISSING_PACKAGE_NAME\");\n            expect(errors[1][0]).toEqual(\"MISSING_PACKAGE_VERSION\");\n            done();\n        });\n    });\n\n    it(\"should validate the version number\", function (done) {\n        packageValidator.validate(invalidVersion, {}, function (err, result) {\n            expect(err).toBeNull();\n            var errors = result.errors;\n            expect(errors.length).toEqual(1);\n            expect(errors[0][0]).toEqual(\"INVALID_VERSION_NUMBER\");\n            expect(errors[0][1]).toEqual(\"NOT A VERSION\");\n            done();\n        });\n    });\n\n    it(\"should require a main.js in the zip file\", function (done) {\n        packageValidator.validate(missingMain, {}, function (err, result) {\n            expect(err).toBeNull();\n            var errors = result.errors;\n            expect(errors.length).toEqual(1);\n            expect(errors[0][0]).toEqual(\"MISSING_MAIN\");\n            done();\n        });\n    });\n\n    it(\"should NOT require a main.js in the zip file for a theme\", function (done) {\n        packageValidator.validate(basicValidTheme, {}, function (err, result) {\n            expect(err).toBeNull();\n            expect(result.errors.length).toEqual(0);\n            expect(result.metadata.theme).toBeDefined();\n            done();\n        });\n    });\n\n    it(\"should determine the common prefix if there is one\", function (done) {\n        packageValidator.validate(oneLevelDown, {}, function (err, result) {\n            expect(err).toBeNull();\n            expect(result.errors.length).toEqual(0);\n            expect(result.metadata.name).toEqual(\"one-level-extension\");\n            expect(result.commonPrefix).toEqual(\"one-level-extension-master\");\n            expect(result.metadata.author.name).toEqual(\"A Person\");\n            done();\n        });\n    });\n\n    it(\"should not be fooled by bogus top directories\", function (done) {\n        packageValidator.validate(bogusTopDir, {}, function (err, result) {\n            expect(err).toBeNull();\n            expect(result.errors.length).toEqual(0);\n            expect(result.metadata.name).toEqual(\"bogus-top-dir\");\n            expect(result.commonPrefix).toEqual(\"\");\n            done();\n        });\n    });\n\n    it(\"should not allow names that contain disallowed characters\", function (done) {\n        packageValidator.validate(badname, {}, function (err, result) {\n            expect(err).toBeNull();\n            expect(result.errors.length).toEqual(1);\n            expect(result.errors[0][0]).toEqual(\"BAD_PACKAGE_NAME\");\n            done();\n        });\n    });\n\n    it(\"should complain about files that don't have main in the top dir\", function (done) {\n        packageValidator.validate(mainInDirectory, {}, function (err, result) {\n            expect(err).toBeNull();\n            var errors = result.errors;\n            expect(errors.length).toEqual(1);\n            expect(errors[0][0]).toEqual(\"MISSING_MAIN\");\n            done();\n        });\n    });\n\n    it(\"should handle a variety of person forms\", function () {\n        var parse = packageValidator._parsePersonString;\n        expect(parse(\"A Person\")).toEqual({\n            name: \"A Person\"\n        });\n        expect(parse({\n            name: \"A Person\"\n        })).toEqual({\n            name: \"A Person\"\n        });\n        expect(parse(\"A Person (http://foo.bar)\")).toEqual({\n            name: \"A Person\",\n            url: \"http://foo.bar\"\n        });\n        expect(parse(\"A Person <foo@bar>\")).toEqual({\n            name: \"A Person\",\n            email: \"foo@bar\"\n        });\n        expect(parse(\"A Person <foo@bar> (http://foo.bar)\")).toEqual({\n            name: \"A Person\",\n            email: \"foo@bar\",\n            url: \"http://foo.bar\"\n        });\n    });\n\n    it(\"should handle contributors\", function (done) {\n        packageValidator.validate(basicValidExtension2, {}, function (err, result) {\n            expect(err).toBeNull();\n            expect(result.errors.length).toEqual(0);\n            var contrib = result.metadata.contributors;\n            expect(contrib.length).toEqual(3);\n            expect(contrib[0]).toEqual({\n                name: \"Johan Einstein\"\n            });\n            expect(contrib[1]).toEqual({\n                name: \"Albert Einstein Jr.\",\n                email: \"not_that_albert@thoseeinsteins.org\"\n            });\n            expect(contrib[2]).toEqual({\n                name: \"Jens Einstein\",\n                email: \"jens@thoseeinsteins.org\"\n            });\n            done();\n        });\n    });\n\n    it(\"should validate the Brackets version\", function (done) {\n        packageValidator.validate(invalidBracketsVersion, {}, function (err, result) {\n            expect(err).toBeNull();\n            expect(result.errors.length).toEqual(1);\n            expect(result.errors[0][0]).toEqual(\"INVALID_BRACKETS_VERSION\");\n            expect(result.errors[0][1]).toEqual(\"foo\");\n            done();\n        });\n    });\n\n    it(\"should reject a package with rejected words in title or description\", function (done) {\n        packageValidator.validate(basicValidExtension, {\n            disallowedWords: [\"valid\"]\n        }, function (err, result) {\n            expect(err).toBeNull();\n            expect(result.errors.length).toEqual(2);\n            expect(result.errors[0][0]).toEqual(\"DISALLOWED_WORDS\");\n            expect(result.errors[0][1]).toEqual(\"title\");\n            expect(result.errors[0][2]).toEqual(\"valid\");\n            expect(result.errors[1][0]).toEqual(\"DISALLOWED_WORDS\");\n            expect(result.errors[1][1]).toEqual(\"name\");\n            expect(result.errors[1][2]).toEqual(\"valid\");\n            done();\n        });\n    });\n\n    it(\"should only allow certain characters in the name\", function () {\n        var validateName = packageValidator.__get__(\"validateName\");\n        expect(validateName(\"Foo\")).toEqual(false);\n        expect(validateName(\"foo\")).toEqual(true);\n        expect(validateName(\"foo2\")).toEqual(true);\n        expect(validateName(\"foo.bar\")).toEqual(true);\n        expect(validateName(\"foo-bar\")).toEqual(true);\n        expect(validateName(\"foo_bar\")).toEqual(true);\n        expect(validateName(\"foo&bar\")).toEqual(false);\n        expect(validateName(\"foo/bar\")).toEqual(false);\n        expect(validateName(\"..\")).toEqual(false);\n        expect(validateName(\".\")).toEqual(false);\n    });\n\n    it(\"should ignore the __MACOSX folder when looking for a single subfolder\", function (done) {\n        packageValidator.validate(ignoredFolder, {}, function (err, result) {\n            expect(err).toBeNull();\n            expect(result.errors.length).toEqual(0);\n            done();\n        });\n    });\n});\n"],"file":"Validation.spec.js"}