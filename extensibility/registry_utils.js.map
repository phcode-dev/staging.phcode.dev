{"version":3,"sources":["extensibility/registry_utils.js"],"names":["define","require","exports","module","htmlEscape","str","String","replace","lastVersionDate","result","this","versions","length","published","Date","toLocaleDateString","brackets","getLocale","year","month","day","formatUserId","friendlyName","nameComponents","owner","split","ownerLink","url","authorInfo","call","userId","metadata","author","name","sortRegistry","registry","subkey","sortBy","getPublishTime","entry","getTime","Number","NEGATIVE_INFINITY","sortedEntries","Object","keys","forEach","key","push","sort","entry1","entry2","registryInfo","totalDownloads"],"mappings":"AA6BAA,OAAO,SAAUC,QAASC,QAASC,QAI/B,SAASC,WAAWC,KAChB,OAAOC,OAAOD,KACTE,QAAQ,KAAM,SACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,SACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QAQvBL,QAAQM,gBAAkB,WACtB,IAAIC,OAYJ,OAXIC,KAAKC,UAAYD,KAAKC,SAASC,SAC/BH,OAASC,KAAKC,SAASD,KAAKC,SAASC,OAAS,GAAGC,aAG7CJ,QADAA,OAAS,IAAIK,KAAKL,SACFM,mBAAmBC,SAASC,YAAa,CACrDC,KAAQ,UACRC,MAAS,UACTC,IAAO,aAIZX,QAAU,IAQrBP,QAAQmB,aAAe,WACnB,IAAIC,aAEIC,eADJb,KAAKc,QAELF,aADqBZ,KAAKc,MAAMC,MAAM,KACR,IAElC,OAAOH,cASXpB,QAAQwB,UAAY,WAChB,IAAIC,IACJ,GAAIjB,KAAKc,MAAO,CACZ,IAAID,eAAiBb,KAAKc,MAAMC,MAAM,KACZ,WAAtBF,eAAe,KACfI,IAAM,sBAAwBJ,eAAe,IAGrD,OAAOI,KAOXzB,QAAQ0B,WAAa,WACjB,IAAInB,OAAS,GACTiB,UAAYxB,QAAQwB,UAAUG,KAAKnB,MACnCoB,OAAS5B,QAAQmB,aAAaQ,KAAKnB,MASvC,OARIA,KAAKqB,UAAYrB,KAAKqB,SAASC,OAC/BvB,OAASL,WAAWM,KAAKqB,SAASC,OAAOC,MAAQvB,KAAKqB,SAASC,QACxDF,SACPrB,OAASL,WAAW0B,SAEpBJ,YACAjB,OAAS,YAAcL,WAAWsB,WAAa,YAActB,WAAWsB,WAAa,KAAOjB,OAAS,QAElGA,QAUXP,QAAQgC,aAAe,SAAUC,SAAUC,OAAQC,QAC/C,SAASC,eAAeC,OACpB,OAAIA,MAAM5B,SACC,IAAIG,KAAKyB,MAAM5B,SAAS4B,MAAM5B,SAASC,OAAS,GAAGC,WAAW2B,UAGlEC,OAAOC,kBAGlB,IAAIC,cAAgB,GAmBpB,OAhBAC,OAAOC,KAAKV,UAAUW,QAAQ,SAAUC,KACpCJ,cAAcK,KAAKb,SAASY,QAEhCJ,cAAcM,KAAK,SAAUC,OAAQC,QACjC,MAAe,kBAAXd,OACIa,OAAOE,cAAgBD,OAAOC,aACvBD,OAAOC,aAAaC,eAAiBH,OAAOE,aAAaC,eAE7DZ,OAAOC,kBAGXJ,eAAgBF,QAAUe,OAAOf,SAAYe,QAC5Cb,eAAgBF,QAAUc,OAAOd,SAAYc,UAIlDP","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2013 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*\n * N.B.: This file was copied from `lib/registry_utils.js` in `https://github.com/adobe/brackets-registry`.\n * We can't use the exact same file currently because Brackets uses AMD-style modules, so this version has\n * the AMD wrapper added (and is reindented to avoid JSLint complaints).. If changes are made here, the\n * version in the registry app should be kept in sync.\n * In the future, we should have a better mechanism for sharing code between the two.\n */\n\ndefine(function (require, exports, module) {\n\n\n    // From Brackets StringUtils\n    function htmlEscape(str) {\n        return String(str)\n            .replace(/&/g, \"&amp;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#39;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\");\n    }\n\n    /**\n     * Gets the last version from the given object and returns the short form of its date.\n     * Assumes \"this\" is the current template context.\n     * @return {string} The formatted date.\n     */\n    exports.lastVersionDate = function () {\n        var result;\n        if (this.versions && this.versions.length) {\n            result = this.versions[this.versions.length - 1].published;\n            if (result) {\n                result = new Date(result);\n                result = result.toLocaleDateString(brackets.getLocale(), {\n                    \"year\": \"numeric\",\n                    \"month\": \"2-digit\",\n                    \"day\": \"2-digit\"\n                });\n            }\n        }\n        return result || \"\";\n    };\n\n    /**\n     * Returns a more friendly display form of the owner's internal user id.\n     * Assumes \"this\" is the current template context.\n     * @return {string} A display version in the form \"id (service)\".\n     */\n    exports.formatUserId = function () {\n        var friendlyName;\n        if (this.owner) {\n            var nameComponents = this.owner.split(\":\");\n            friendlyName = nameComponents[1];\n        }\n        return friendlyName;\n    };\n\n    /**\n     * Given a registry item, returns a URL that represents its owner's page on the auth service.\n     * Currently only handles GitHub.\n     * Assumes \"this\" is the current template context.\n     * @return {string} A link to that user's page on the service.\n     */\n    exports.ownerLink = function () {\n        var url;\n        if (this.owner) {\n            var nameComponents = this.owner.split(\":\");\n            if (nameComponents[0] === \"github\") {\n                url = \"https://github.com/\" + nameComponents[1];\n            }\n        }\n        return url;\n    };\n\n    /**\n     * Given a registry item, formats the author information, including a link to the owner's\n     * github page (if available) and the author's name from the metadata.\n     */\n    exports.authorInfo = function () {\n        var result = \"\",\n            ownerLink = exports.ownerLink.call(this),\n            userId = exports.formatUserId.call(this);\n        if (this.metadata && this.metadata.author) {\n            result = htmlEscape(this.metadata.author.name || this.metadata.author);\n        } else if (userId) {\n            result = htmlEscape(userId);\n        }\n        if (ownerLink) {\n            result = \"<a href='\" + htmlEscape(ownerLink) + \"' title='\" + htmlEscape(ownerLink) + \"'>\" + result + \"</a>\";\n        }\n        return result;\n    };\n\n    /**\n     * Returns an array of current registry entries, sorted by the publish date of the latest version of each entry.\n     * @param {object} registry The unsorted registry.\n     * @param {string} subkey The subkey to look for the registry metadata in. If unspecified, assumes\n     *     we should look at the top level of the object.\n     * @return {Array} Sorted array of registry entries.\n     */\n    exports.sortRegistry = function (registry, subkey, sortBy) {\n        function getPublishTime(entry) {\n            if (entry.versions) {\n                return new Date(entry.versions[entry.versions.length - 1].published).getTime();\n            }\n\n            return Number.NEGATIVE_INFINITY;\n        }\n\n        var sortedEntries = [];\n\n        // Sort the registry by last published date (newest first).\n        Object.keys(registry).forEach(function (key) {\n            sortedEntries.push(registry[key]);\n        });\n        sortedEntries.sort(function (entry1, entry2) {\n            if (sortBy !== \"publishedDate\") {\n                if (entry1.registryInfo && entry2.registryInfo) {\n                    return entry2.registryInfo.totalDownloads - entry1.registryInfo.totalDownloads;\n                }\n                return Number.NEGATIVE_INFINITY;\n\n            }\n            return getPublishTime((subkey && entry2[subkey]) || entry2) -\n                    getPublishTime((subkey && entry1[subkey]) || entry1);\n\n        });\n\n        return sortedEntries;\n    };\n});\n"],"file":"registry_utils.js"}