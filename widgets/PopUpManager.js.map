{"version":3,"sources":["widgets/PopUpManager.js"],"names":["define","require","exports","module","AppInit","EventDispatcher","CommandManager","KeyEvent","_popUps","addPopUp","$popUp","removeHandler","autoRemove","push","data","removePopUp","find","length","index","indexOf","remove","splice","removeCurrentPopUp","keyEvent","i","event","$","Event","trigger","isDefaultPrevented","stopImmediatePropagation","_keydownCaptureListener","keyCode","DOM_VK_ESCAPE","DOM_VK_ALT","brackets","platform","ctrlKey","_beforeMenuPopup","listenToContextMenu","contextMenu","on","htmlReady","window","document","body","addEventListener","commandId","makeEventDispatcher"],"mappings":"AAwBAA,OAAO,SAAUC,QAASC,QAASC,QAG/B,IAAIC,QAAkBH,QAAQ,iBAC1BI,gBAAkBJ,QAAQ,yBAC1BK,eAAkBL,QAAQ,0BAC1BM,SAAkBN,QAAQ,kBAE1BO,QAAU,GAYd,SAASC,SAASC,OAAQC,cAAeC,YACrCA,WAAaA,aAAc,EAE3BJ,QAAQK,KAAKH,OAAO,IACpBA,OAAOI,KAAK,0BAA2BF,YACvCF,OAAOI,KAAK,6BAA8BH,eAS9C,SAASI,YAAYL,QAGjB,GAAIA,OAAOM,KAAK,YAAYC,OAAS,EAAG,CACpC,IAAIN,cAAgBD,OAAOI,KAAK,8BAC5BH,eACAA,gBAMR,IAAIO,MAAQV,QAAQW,QAAQT,OAAO,IAE3BE,WADJM,OAAS,IACQR,OAAOI,KAAK,6BAEzBJ,OAAOU,SACPZ,QAAQa,OAAOH,MAAO,KAWlC,SAASI,mBAAmBC,UAExB,IAAIb,OACAc,EACAC,MAAQ,IAAIC,EAAEC,MAAM,cAExB,IAAKH,EAAIhB,QAAQS,OAAS,EAAGO,GAAK,EAAGA,IAGjC,IAFAd,OAASgB,EAAElB,QAAQgB,KAERR,KAAK,YAAYC,OAAS,EAAG,CACpCP,OAAOkB,QAAQH,OAEVA,MAAMI,uBAEHN,UACAA,SAASO,2BAGbf,YAAYL,SAWhB,OAKZ,SAASqB,wBAAwBR,WAEzBA,SAASS,UAAYzB,SAAS0B,eACxBV,SAASS,UAAYzB,SAAS2B,YAAoC,QAAtBC,SAASC,YAK3Db,SAASS,UAAYzB,SAAS2B,YAAcX,SAASc,SAIzDf,mBAAmBC,WAMvB,SAASe,mBACLhB,qBAUJ,SAASiB,oBAAoBC,aACzBA,YAAYC,GAAG,wBAAyBH,kBAG5ClC,QAAQsC,UAAU,WAEdC,OAAOC,SAASC,KAAKC,iBAAiB,UAAWf,yBAAyB,GAC1E7B,QAAQuC,GAAG,kBAAmBH,kBAG9BhC,eAAemC,GAAG,uBAAwB,SAAUhB,MAAOsB,WACvDzB,yBAKRjB,gBAAgB2C,oBAAoB9C,SAEpCA,QAAQO,SAAsBA,SAC9BP,QAAQa,YAAsBA,YAC9Bb,QAAQqC,oBAAsBA","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2012 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/**\n * Utilities for managing pop-ups.\n */\ndefine(function (require, exports, module) {\n\n\n    var AppInit         = require(\"utils/AppInit\"),\n        EventDispatcher = require(\"utils/EventDispatcher\"),\n        CommandManager  = require(\"command/CommandManager\"),\n        KeyEvent        = require(\"utils/KeyEvent\");\n\n    var _popUps = [];\n\n    /**\n     * Add Esc key handling for a popup DOM element.\n     *\n     * @param {!jQuery} $popUp jQuery object for the DOM element pop-up\n     * @param {function} removeHandler Pop-up specific remove (e.g. display:none or DOM removal)\n     * @param {?Boolean} autoRemove - Specify true to indicate the PopUpManager should\n     *      remove the popup from the _popUps array when the popup is closed. Specify false\n     *      when the popup is always persistant in the _popUps array.\n     *\n     */\n    function addPopUp($popUp, removeHandler, autoRemove) {\n        autoRemove = autoRemove || false;\n\n        _popUps.push($popUp[0]);\n        $popUp.data(\"PopUpManager-autoRemove\", autoRemove);\n        $popUp.data(\"PopUpManager-removeHandler\", removeHandler);\n    }\n\n    /**\n     * Remove Esc key handling for a pop-up. Removes the pop-up from the DOM\n     * if the pop-up is currently visible and was not originally attached.\n     *\n     * @param {!jQuery} $popUp\n     */\n    function removePopUp($popUp) {\n        // check visible first to help protect against recursive calls\n        // via removeHandler\n        if ($popUp.find(\":visible\").length > 0) {\n            var removeHandler = $popUp.data(\"PopUpManager-removeHandler\");\n            if (removeHandler) {\n                removeHandler();\n            }\n        }\n\n        // check index after removeHandler is done processing to protect\n        // against recursive calls\n        var index = _popUps.indexOf($popUp[0]);\n        if (index >= 0) {\n            var autoRemove = $popUp.data(\"PopUpManager-autoRemove\");\n            if (autoRemove) {\n                $popUp.remove();\n                _popUps.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Remove Esc key handling for a pop-up. Removes the pop-up from the DOM\n     * if the pop-up is currently visible and was not originally attached.\n     *\n     * @param {KeyboardEvent=} keyEvent (optional)\n     */\n    function removeCurrentPopUp(keyEvent) {\n        // allow the popUp to prevent closing\n        var $popUp,\n            i,\n            event = new $.Event(\"popUpClose\");\n\n        for (i = _popUps.length - 1; i >= 0; i--) {\n            $popUp = $(_popUps[i]);\n\n            if ($popUp.find(\":visible\").length > 0) {\n                $popUp.trigger(event);\n\n                if (!event.isDefaultPrevented()) {\n                    // Stop the DOM event from propagating\n                    if (keyEvent) {\n                        keyEvent.stopImmediatePropagation();\n                    }\n\n                    removePopUp($popUp);\n\n                    // TODO: right now Menus and Context Menus do not take focus away from\n                    // the editor. We need to have a focus manager to correctly manage focus\n                    // between editors and other UI elements.\n                    // For now we don't set focus here and assume individual popups\n                    // adjust focus if necessary\n                    // See story in Trello card #404\n                    //EditorManager.focusEditor();\n                }\n\n                break;\n            }\n        }\n    }\n\n    function _keydownCaptureListener(keyEvent) {\n         // Escape key or Alt key (Windows-only)\n        if (keyEvent.keyCode !== KeyEvent.DOM_VK_ESCAPE &&\n                !(keyEvent.keyCode === KeyEvent.DOM_VK_ALT && brackets.platform === \"win\")) {\n            return;\n        }\n\n        // Don't dismiss the popup if both Ctrl and Alt keys are pressed.\n        if (keyEvent.keyCode === KeyEvent.DOM_VK_ALT && keyEvent.ctrlKey) {\n            return;\n        }\n\n        removeCurrentPopUp(keyEvent);\n    }\n\n    /**\n     * A menu is being popped up, so remove any menu that is currently popped up\n     */\n    function _beforeMenuPopup() {\n        removeCurrentPopUp();\n    }\n\n    /**\n     * Context menus are also created in AppInit.htmlReady(), so they may not\n     * yet have been created when we get our AppInit.htmlReady() callback, so\n     * we provide this method to tell us when to start listening for their events\n     *\n     * @param {ContextMenu} contextMenu\n     */\n    function listenToContextMenu(contextMenu) {\n        contextMenu.on(\"beforeContextMenuOpen\", _beforeMenuPopup);\n    }\n\n    AppInit.htmlReady(function () {\n        // Register for events\n        window.document.body.addEventListener(\"keydown\", _keydownCaptureListener, true);\n        exports.on(\"beforeMenuPopup\", _beforeMenuPopup);\n\n        // Close all popups when a command is executed\n        CommandManager.on(\"beforeExecuteCommand\", function (event, commandId) {\n            removeCurrentPopUp();\n        });\n    });\n\n\n    EventDispatcher.makeEventDispatcher(exports);\n\n    exports.addPopUp            = addPopUp;\n    exports.removePopUp         = removePopUp;\n    exports.listenToContextMenu = listenToContextMenu;\n});\n"],"file":"PopUpManager.js"}