{"version":3,"sources":["search/FindBar.js"],"names":["define","require","exports","module","_","Mustache","EventDispatcher","Commands","KeyBindingManager","KeyEvent","ModalBar","PreferencesManager","MainViewManager","Strings","ViewUtils","FindUtils","QuickSearchField","Metrics","_searchBarTemplate","intervalId","lastQueriedText","lastTypedText","lastTypedTextWasRegexp","INSTANT_SEARCH_INTERVAL_MS","FindBar","options","defaults","multifile","replace","queryPlaceholder","initialQuery","initialReplaceText","scopeLabel","this","_options","extend","_closed","_enabled","makeEventDispatcher","prototype","_addFindBar","findBar","_bars","push","_removeFindBar","pull","_closeFindBars","bars","forEach","bar","close","_modalBar","$","selector","getRoot","_updateSearchBarFromPrefs","toggleClass","getViewState","_updatePrefsFromSearchBar","isRegexp","is","setViewState","_addShortcutToTooltip","$elem","commandId","replaceShortcut","getKeyBindings","oldTitle","attr","formatKeyDescriptor","displayKey","_addElementToSearchHistory","searchVal","searchHistory","maxCount","get","searchQueryIndex","indexOf","splice","length","pop","unshift","open","self","metricType","countEvent","EVENT_TYPE","SEARCH","templateVars","clone","_handleKeydown","e","keyCode","DOM_VK_ESCAPE","stopPropagation","preventDefault","replaceBatchLabel","BUTTON_REPLACE_ALL_IN_FILES","BUTTON_REPLACE_BATCH","replaceAllLabel","BUTTON_REPLACE_ALL","render","window","document","body","addEventListener","on","event","removeEventListener","showError","clearInterval","focusActivePane","trigger","searchField","destroy","executeSearchIfNeeded","isInstantSearchDisabled","getQueryInfo","query","isWorkerSearchInProgress","setInterval","$root","historyIndex","queryInfo","currentTarget","quickSearchContainer","hide","setText","val","show","showSearchHints","focus","DOM_VK_RETURN","target","focusReplace","shiftKey","DOM_VK_DOWN","DOM_VK_UP","DOM_VK_PAGE_DOWN","DOM_VK_PAGE_UP","CMD_FIND_NEXT","CMD_FIND_PREVIOUS","CMD_REPLACE","DOM_VK_TAB","ctrlKey","metaKey","altKey","id","isIndexingInProgress","showIndexingSpinner","focusQuery","searchFieldInput","verticalAdjust","offset","top","outerHeight","maxResults","firstHighlightIndex","resultProvider","asyncResult","Deferred","resolve","promise","formatter","item","onCommit","selectedItem","onHighlight","explicit","highlightZeroResults","suppressAnimation","isClosed","getOptions","isCaseSensitive","error","isHTML","$error","html","text","showFindCount","count","showNoResults","showIndicator","showMessage","$msg","getReplaceText","enable","prop","isEnabled","isReplaceEnabled","enableNavigation","enableReplace","_focus","select","removeClass","setIndexingMessage","FIND_IN_FILES_INDEXING","message","hideIndexingSpinner","addClass","redoInstantSearch","_getInitialQueryFromSelection","editor","selectionText","getSelectedText","split","getInitialQuery","currentFindBar","selection","replaceText","openedFindBar","find","stateManager","definePreference","description","FIND_HISTORY_MAX_COUNT"],"mappings":"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","sourcesContent":["/*\n * GNU AGPL-3.0 License\n *\n * Copyright (c) 2021 - present core.ai . All rights reserved.\n * Original work Copyright (c) 2014 - 2021 Adobe Systems Incorporated. All rights reserved.\n *\n * This program is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see https://opensource.org/licenses/AGPL-3.0.\n *\n */\n\n/*\n * UI for the Find/Replace and Find in Files modal bar.\n */\ndefine(function (require, exports, module) {\n\n\n    const _                  = require(\"thirdparty/lodash\"),\n        Mustache           = require(\"thirdparty/mustache/mustache\"),\n        EventDispatcher    = require(\"utils/EventDispatcher\"),\n        Commands           = require(\"command/Commands\"),\n        KeyBindingManager  = require(\"command/KeyBindingManager\"),\n        KeyEvent           = require(\"utils/KeyEvent\"),\n        ModalBar           = require(\"widgets/ModalBar\").ModalBar,\n        PreferencesManager = require(\"preferences/PreferencesManager\"),\n        MainViewManager    = require(\"view/MainViewManager\"),\n        Strings            = require(\"strings\"),\n        ViewUtils          = require(\"utils/ViewUtils\"),\n        FindUtils          = require(\"search/FindUtils\"),\n        QuickSearchField   = require(\"search/QuickSearchField\").QuickSearchField,\n        Metrics            = require(\"utils/Metrics\");\n\n    /**\n     * @private\n     * The template we use for all Find bars.\n     * @type {string}\n     */\n    const _searchBarTemplate = require(\"text!htmlContent/findreplace-bar.html\");\n\n    let intervalId = 0,\n        lastQueriedText = \"\",\n        lastTypedText = \"\",\n        lastTypedTextWasRegexp = false;\n\n    const INSTANT_SEARCH_INTERVAL_MS = 50;\n\n    /**\n     * @constructor\n     * Find Bar UI component, used for both single- and multi-file find/replace. This doesn't actually\n     * create and add the FindBar to the DOM - for that, call open().\n     *\n     * Dispatches these events:\n     *\n     * - queryChange - when the user types in the input field or sets a query option. Use getQueryInfo()\n     *      to get the current query state.\n     * - doFind - when the user chooses to do a Find Previous or Find Next.\n     *      Parameters are:\n     *          shiftKey - boolean, false for Find Next, true for Find Previous\n     * - doReplace - when the user chooses to do a single replace. Use getReplaceText() to get the current replacement text.\n     * - doReplaceBatch - when the user chooses to initiate a Replace All. Use getReplaceText() to get the current replacement text.\n     * - doReplaceAll - when the user chooses to perform a Replace All. Use getReplaceText() to get the current replacement text.\n     *-  close - when the find bar is closed\n     *\n     * @param {boolean=} options.multifile - true if this is a Find/Replace in Files (changes the behavior of Enter in\n     *      the fields, hides the navigator controls, shows the scope/filter controls, and if in replace mode, hides the\n     *      Replace button (so there's only Replace All)\n     * @param {boolean=} options.replace - true to show the Replace controls - default false\n     * @param {string=}  options.queryPlaceholder - label to show in the Find field - default empty string\n     * @param {string=}  options.initialQuery - query to populate in the Find field on open - default empty string\n     * @param {string=}  scopeLabel - HTML label to show for the scope of the search, expected to be already escaped - default empty string\n     */\n    function FindBar(options) {\n        var defaults = {\n            multifile: false,\n            replace: false,\n            queryPlaceholder: \"\",\n            initialQuery: \"\",\n            initialReplaceText: \"\",\n            scopeLabel: \"\"\n        };\n        this._options = _.extend(defaults, options);\n        this._closed = false;\n        this._enabled = true;\n    }\n    EventDispatcher.makeEventDispatcher(FindBar.prototype);\n\n    /*\n     * Global FindBar functions for making sure only one is open at a time.\n     */\n\n    // TODO: this is temporary - we should do this at the ModalBar level, but can't do that until\n    // we land the simplified Quick Open UI (#7227) that eliminates some asynchronicity in closing\n    // its ModalBar.\n\n    /**\n     * @private\n     * Register a find bar so we can close it later if another one tries to open.\n     * Note that this is a global function, not an instance function.\n     * @param {!FindBar} findBar The find bar to register.\n     */\n    FindBar._addFindBar = function (findBar) {\n        FindBar._bars = FindBar._bars || [];\n        FindBar._bars.push(findBar);\n    };\n\n    /**\n     * @private\n     * Remove a find bar from the list.\n     * Note that this is a global function, not an instance function.\n     * @param {FindBar} findBar The bar to remove.\n     */\n    FindBar._removeFindBar = function (findBar) {\n        if (FindBar._bars) {\n            _.pull(FindBar._bars, findBar);\n        }\n    };\n\n    /**\n     * @private\n     * Close all existing find bars. In theory there should be only one, but since there can be\n     * timing issues due to animation we maintain a list.\n     * Note that this is a global function, not an instance function.\n     */\n    FindBar._closeFindBars = function () {\n        var bars = FindBar._bars;\n        if (bars) {\n            bars.forEach(function (bar) {\n                bar.close(true, false);\n            });\n            bars = [];\n        }\n    };\n\n    /*\n     * Instance properties/functions\n     */\n\n    /**\n     * @private\n     * Options passed into the FindBar.\n     * @type {!{multifile: boolean, replace: boolean, queryPlaceholder: string, initialQuery: string, scopeLabel: string}}\n     */\n    FindBar.prototype._options = null;\n\n    /**\n     * @private\n     * Whether the FindBar has been closed.\n     * @type {boolean}\n     */\n    FindBar.prototype._closed = false;\n\n    /**\n     * @private\n     * Whether the FindBar is currently enabled.\n     * @type {boolean}\n     */\n    FindBar.prototype._enabled = true;\n\n    /**\n     * @private\n     * @type {?ModalBar} Modal bar containing this find bar's UI\n     */\n    FindBar.prototype._modalBar = null;\n\n    /**\n     * @private\n     * Returns the jQuery object for an element in this Find bar.\n     * @param {string} selector The selector for the element.\n     * @return {jQueryObject} The jQuery object for the element, or an empty object if the Find bar isn't yet\n     *      in the DOM or the element doesn't exist.\n     */\n    FindBar.prototype.$ = function (selector) {\n        if (this._modalBar) {\n            return $(selector, this._modalBar.getRoot());\n        }\n        return $();\n\n    };\n\n    // TODO: change IDs to classes\n\n    /**\n     * @private\n     * Set the state of the toggles in the Find bar to the saved prefs state.\n     */\n    FindBar.prototype._updateSearchBarFromPrefs = function () {\n        // Have to make sure we explicitly cast the second parameter to a boolean, because\n        // toggleClass expects literal true/false.\n        this.$(\"#find-case-sensitive\").toggleClass(\"active\", !!PreferencesManager.getViewState(\"caseSensitive\"));\n        this.$(\"#find-regexp\").toggleClass(\"active\", !!PreferencesManager.getViewState(\"regexp\"));\n    };\n\n    /**\n     * @private\n     * Save the prefs state based on the state of the toggles.\n     */\n    FindBar.prototype._updatePrefsFromSearchBar = function () {\n        var isRegexp = this.$(\"#find-regexp\").is(\".active\");\n        PreferencesManager.setViewState(\"caseSensitive\", this.$(\"#find-case-sensitive\").is(\".active\"));\n        PreferencesManager.setViewState(\"regexp\", isRegexp);\n        lastTypedTextWasRegexp = isRegexp;\n    };\n\n    /**\n     * @private\n     * Shows the keyboard shortcut for the given command in the element's tooltip.\n     * @param {jQueryObject} $elem The element to add the shortcut to.\n     * @param {string} commandId The ID for the command whose keyboard shortcut to show.\n     */\n    FindBar.prototype._addShortcutToTooltip = function ($elem, commandId) {\n        var replaceShortcut = KeyBindingManager.getKeyBindings(commandId)[0];\n        if (replaceShortcut) {\n            var oldTitle = $elem.attr(\"title\");\n            oldTitle = (oldTitle ? oldTitle + \" \" : \"\");\n            $elem.attr(\"title\", oldTitle + \"(\" + KeyBindingManager.formatKeyDescriptor(replaceShortcut.displayKey) + \")\");\n        }\n    };\n\n    /**\n     * @private\n     * Adds element to the search history queue.\n     * @param {string} search string that needs to be added to history.\n     */\n    FindBar.prototype._addElementToSearchHistory = function (searchVal) {\n        if (searchVal) {\n            var searchHistory = PreferencesManager.getViewState(\"searchHistory\");\n            var maxCount = PreferencesManager.get(\"maxSearchHistory\");\n            var searchQueryIndex = searchHistory.indexOf(searchVal);\n            if (searchQueryIndex !== -1) {\n                searchHistory.splice(searchQueryIndex, 1);\n            } else {\n                if (searchHistory.length === maxCount) {\n                    searchHistory.pop();\n                }\n            }\n            searchHistory.unshift(searchVal);\n            PreferencesManager.setViewState(\"searchHistory\", searchHistory);\n        }\n    };\n\n    /**\n     * Opens the Find bar, closing any other existing Find bars.\n     */\n    FindBar.prototype.open = function () {\n        var self = this;\n\n        // Normally, creating a new Find bar will simply cause the old one to close\n        // automatically. This can cause timing issues because the focus change might\n        // cause the new one to think it should close, too. So we simply explicitly\n        // close the old Find bar (with no animation) before creating a new one.\n        // TODO: see note above - this will move to ModalBar eventually.\n        FindBar._closeFindBars();\n        let metricType = \"findBar\";\n        if (this._options.multifile) {\n            metricType = \"findInFiles.bar\";\n        }\n        Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, metricType, \"opened\");\n\n        var templateVars = _.clone(this._options);\n        templateVars.Strings = Strings;\n        templateVars.replaceBatchLabel = (templateVars.multifile ? Strings.BUTTON_REPLACE_ALL_IN_FILES : Strings.BUTTON_REPLACE_BATCH);\n        templateVars.replaceAllLabel = Strings.BUTTON_REPLACE_ALL;\n\n        self._addElementToSearchHistory(this._options.initialQuery);\n\n        this._modalBar = new ModalBar(\n            Mustache.render(_searchBarTemplate, templateVars),\n            !!PreferencesManager.get('autoHideSearch')\t\t// 2nd arg = auto-close on Esc/blur\n        );\n\n        // Done this way because ModalBar.js seems to react unreliably when\n        // modifying it to handle the escape key - the findbar wasn't getting\n        // closed as it should, instead persisting in the background\n        function _handleKeydown(e) {\n            if (e.keyCode === KeyEvent.DOM_VK_ESCAPE) {\n                e.stopPropagation();\n                e.preventDefault();\n                self.close();\n            }\n        }\n        window.document.body.addEventListener(\"keydown\", _handleKeydown, true);\n\n        // When the ModalBar closes, clean ourselves up.\n        this._modalBar.on(\"close\", function (event) {\n            window.document.body.removeEventListener(\"keydown\", _handleKeydown, true);\n\n            // Hide error popup, since it hangs down low enough to make the slide-out look awkward\n            self.showError(null);\n            self._modalBar = null;\n            self._closed = true;\n            window.clearInterval(intervalId);\n            intervalId = 0;\n            FindBar._removeFindBar(self);\n            MainViewManager.focusActivePane();\n            self.trigger(\"close\");\n            if (self.searchField) {\n                self.searchField.destroy();\n            }\n        });\n\n        FindBar._addFindBar(this);\n\n        let executeSearchIfNeeded = function () {\n            // We only do instant search via worker.\n            if (FindUtils.isInstantSearchDisabled()) {\n                return;\n            }\n            if (self._closed) {\n                return;\n            }\n            if ( self.getQueryInfo().query !== lastQueriedText && !FindUtils.isWorkerSearchInProgress()) {\n                // init Search\n                if (self._options.multifile) {\n                    self.trigger(\"doFind\");\n                    lastQueriedText = self.getQueryInfo().query;\n                }\n            }\n        };\n        if (intervalId === 0) {\n            // we do this so that is the search query changes by any means - by keypress, or programmatically\n            // we do an instant search if the search term changes.\n            intervalId = window.setInterval(executeSearchIfNeeded, INSTANT_SEARCH_INTERVAL_MS);\n        }\n\n        var $root = this._modalBar.getRoot();\n        var historyIndex = 0;\n        $root\n            .on(\"input\", \"#find-what\", function () {\n                self.trigger(\"queryChange\");\n                var queryInfo = self.getQueryInfo();\n                lastTypedText = queryInfo.query;\n                lastTypedTextWasRegexp = queryInfo.isRegexp;\n            })\n            .on(\"click\", \"#find-case-sensitive, #find-regexp\", function (e) {\n                $(e.currentTarget).toggleClass(\"active\");\n                self._updatePrefsFromSearchBar();\n                self.trigger(\"queryChange\");\n                if (self._options.multifile) {  //instant search\n                    self.trigger(\"doFind\");\n                }\n            })\n            .on(\"click\", \".dropdown-icon\", function (e) {\n                var quickSearchContainer = $(\".quick-search-container\");\n                if (!self.searchField) {\n                    self.showSearchHints();\n                } else if (quickSearchContainer.is(':visible')) {\n                    quickSearchContainer.hide();\n                } else {\n                    self.searchField.setText(self.$(\"#find-what\").val());\n                    quickSearchContainer.show();\n                }\n                self.$(\"#find-what\").focus();\n            })\n            .on(\"keydown\", \"#find-what, #replace-with\", function (e) {\n                if (e.keyCode === KeyEvent.DOM_VK_RETURN) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    self._addElementToSearchHistory(self.$(\"#find-what\").val());\n                    if (self._options.multifile) {\n                        if ($(e.target).is(\"#find-what\")) {\n                            if (self._options.replace) {\n                                // Just set focus to the Replace field.\n                                self.focusReplace();\n                            } else {\n                                Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, \"findInFiles.bar\",\n                                    \"returnKey\");\n                                // Trigger a Find (which really means \"Find All\" in this context).\n                                self.trigger(\"openSelectedFile\");\n                            }\n                        } else {\n                            Metrics.countEvent(Metrics.EVENT_TYPE.SEARCH, \"replaceBatchInFiles.bar\",\n                                \"returnKey\");\n                            self.trigger(\"doReplaceBatch\");\n                        }\n                    } else {\n                        // In the single file case, we just want to trigger a Find Next (or Find Previous\n                        // if Shift is held down).\n                        self.trigger(\"doFind\", e.shiftKey);\n                    }\n                    historyIndex = 0;\n                } else if (e.keyCode === KeyEvent.DOM_VK_DOWN) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    self.trigger(\"selectNextResult\");\n                } else if (e.keyCode === KeyEvent.DOM_VK_UP) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    self.trigger(\"selectPrevResult\");\n                } else if (e.keyCode === KeyEvent.DOM_VK_PAGE_DOWN) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    self.trigger(\"selectNextPage\");\n                } else if (e.keyCode === KeyEvent.DOM_VK_PAGE_UP) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    self.trigger(\"selectPrevPage\");\n                }\n            })\n            .on(\"click\", \".close\", function () {\n                self.close();\n            });\n\n        if (!this._options.multifile) {\n            this._addShortcutToTooltip($(\"#find-next\"), Commands.CMD_FIND_NEXT);\n            this._addShortcutToTooltip($(\"#find-prev\"), Commands.CMD_FIND_PREVIOUS);\n            $root\n                .on(\"click\", \"#find-next\", function (e) {\n                    self.trigger(\"doFind\", false);\n                })\n                .on(\"click\", \"#find-prev\", function (e) {\n                    self.trigger(\"doFind\", true);\n                });\n        }\n\n        if (this._options.replace) {\n            this._addShortcutToTooltip($(\"#replace-yes\"), Commands.CMD_REPLACE);\n            $root\n                .on(\"click\", \"#replace-yes\", function (e) {\n                    self.trigger(\"doReplace\");\n                })\n                .on(\"click\", \"#replace-batch\", function (e) {\n                    self.trigger(\"doReplaceBatch\");\n                })\n                .on(\"click\", \"#replace-all\", function (e) {\n                    self.trigger(\"doReplaceAll\");\n                })\n                // One-off hack to make Find/Replace fields a self-contained tab cycle\n                // TODO: remove once https://trello.com/c/lTSJgOS2 implemented\n                .on(\"keydown\", function (e) {\n                    if (e.keyCode === KeyEvent.DOM_VK_TAB && !e.ctrlKey && !e.metaKey && !e.altKey) {\n                        if (e.target.id === \"replace-with\" && !e.shiftKey) {\n                            self.$(\"#find-what\").focus();\n                            e.preventDefault();\n                        } else if (e.target.id === \"find-what\" && e.shiftKey) {\n                            self.$(\"#replace-with\").focus();\n                            e.preventDefault();\n                        }\n                    }\n                });\n        }\n\n        if (this._options.multifile && FindUtils.isIndexingInProgress()) {\n            this.showIndexingSpinner();\n        }\n\n        // Set up the initial UI state.\n        this._updateSearchBarFromPrefs();\n        this.focusQuery();\n    };\n\n    /**\n     * @private\n     * Shows the search History in dropdown.\n     */\n    FindBar.prototype.showSearchHints = function () {\n        var self = this;\n        var searchFieldInput = self.$(\"#find-what\");\n        this.searchField = new QuickSearchField(searchFieldInput, {\n            verticalAdjust: searchFieldInput.offset().top > 0 ? 0 : this._modalBar.getRoot().outerHeight(),\n            maxResults: 20,\n            firstHighlightIndex: null,\n            resultProvider: function (query) {\n                var asyncResult = new $.Deferred();\n                asyncResult.resolve(PreferencesManager.getViewState(\"searchHistory\"));\n                return asyncResult.promise();\n            },\n            formatter: function (item, query) {\n                return \"<li>\" + item + \"</li>\";\n            },\n            onCommit: function (selectedItem, query) {\n                if (selectedItem) {\n                    self.$(\"#find-what\").val(selectedItem);\n                    self.trigger(\"queryChange\");\n                } else if (query.length) {\n                    self.searchField.setText(query);\n                }\n                self.$(\"#find-what\").focus();\n                $(\".quick-search-container\").hide();\n            },\n            onHighlight: function (selectedItem, query, explicit) {},\n            highlightZeroResults: false\n        });\n        this.searchField.setText(searchFieldInput.val());\n    };\n\n    /**\n     * Closes this Find bar. If already closed, does nothing.\n     * @param {boolean} suppressAnimation If true, don't do the standard closing animation. Default false.\n     */\n    FindBar.prototype.close = function (suppressAnimation) {\n        lastQueriedText = \"\";\n        if (this._modalBar) {\n            // 1st arg = restore scroll pos; 2nd arg = no animation, since getting replaced immediately\n            this._modalBar.close(true, !suppressAnimation);\n        }\n    };\n\n    /**\n     * @return {boolean} true if this FindBar has been closed.\n     */\n    FindBar.prototype.isClosed = function () {\n        return this._closed;\n    };\n\n    /**\n     * @return {Object} The options passed into the FindBar.\n     */\n    FindBar.prototype.getOptions = function () {\n        return this._options;\n    };\n\n    /**\n     * Returns the current query and parameters.\n     * @return {{query: string, caseSensitive: boolean, isRegexp: boolean}}\n     */\n    FindBar.prototype.getQueryInfo = function () {\n        return {\n            query: this.$(\"#find-what\").val() || \"\",\n            isCaseSensitive: this.$(\"#find-case-sensitive\").is(\".active\"),\n            isRegexp: this.$(\"#find-regexp\").is(\".active\")\n        };\n    };\n\n    /**\n     * Show or clear an error message related to the query.\n     * @param {?string} error The error message to show, or null to hide the error display.\n     * @param {boolean=} isHTML Whether the error message is HTML that should remain unescaped.\n     */\n    FindBar.prototype.showError = function (error, isHTML) {\n        var $error = this.$(\".error\");\n        if (error) {\n            if (isHTML) {\n                $error.html(error);\n            } else {\n                $error.text(error);\n            }\n            $error.show();\n        } else {\n            $error.hide();\n        }\n    };\n\n    /**\n     * Set the find count.\n     * @param {string} count The find count message to show. Can be the empty string to hide it.\n     */\n    FindBar.prototype.showFindCount = function (count) {\n        this.$(\"#find-counter\").text(count);\n    };\n\n    /**\n     * Show or hide the no-results indicator and optional message. This is also used to\n     * indicate regular expression errors.\n     * @param {boolean} showIndicator\n     * @param {boolean} showMessage\n     */\n    FindBar.prototype.showNoResults = function (showIndicator, showMessage) {\n        ViewUtils.toggleClass(this.$(\"#find-what\"), \"no-results\", showIndicator);\n\n        var $msg = this.$(\".no-results-message\");\n        if (showMessage) {\n            $msg.show();\n        } else {\n            $msg.hide();\n        }\n    };\n\n    /**\n     * Returns the current replace text.\n     * @return {string}\n     */\n    FindBar.prototype.getReplaceText = function () {\n        return this.$(\"#replace-with\").val() || \"\";\n    };\n\n    /**\n     * Enables or disables the controls in the Find bar. Note that if enable is true, *all* controls will be\n     * re-enabled, even if some were previously disabled using enableNavigation() or enableReplace(), so you\n     * will need to refresh their enable state after calling this.\n     * @param {boolean} enable Whether to enable or disable the controls.\n     */\n    FindBar.prototype.enable = function (enable) {\n        this.$(\"#find-what, #replace-with, #find-prev, #find-next, #find-case-sensitive, #find-regexp\").prop(\"disabled\", !enable);\n        this._enabled = enable;\n    };\n\n    FindBar.prototype.focus = function (enable) {\n        this.$(\"#find-what\").focus();\n    };\n\n    /**\n     * @return {boolean} true if the FindBar is enabled.\n     */\n    FindBar.prototype.isEnabled = function () {\n        return this._enabled;\n    };\n\n    /**\n     * @return {boolean} true if the Replace button is enabled.\n     */\n    FindBar.prototype.isReplaceEnabled = function () {\n        return this.$(\"#replace-yes\").is(\":enabled\");\n    };\n\n    /**\n     * Enable or disable the navigation controls if present. Note that if the Find bar is currently disabled\n     * (i.e. isEnabled() returns false), this will have no effect.\n     * @param {boolean} enable Whether to enable the controls.\n     */\n    FindBar.prototype.enableNavigation = function (enable) {\n        if (this.isEnabled()) {\n            this.$(\"#find-prev, #find-next\").prop(\"disabled\", !enable);\n        }\n    };\n\n    /**\n     * Enable or disable the replace controls if present. Note that if the Find bar is currently disabled\n     * (i.e. isEnabled() returns false), this will have no effect.\n     * @param {boolean} enable Whether to enable the controls.\n     */\n    FindBar.prototype.enableReplace = function (enable) {\n        if (this.isEnabled) {\n            this.$(\"#replace-yes, #replace-batch, #replace-all\").prop(\"disabled\", !enable);\n        }\n    };\n\n    /**\n     * @private\n     * Focus and select the contents of the given field.\n     * @param {string} selector The selector for the field.\n     */\n    FindBar.prototype._focus = function (selector) {\n        this.$(selector)\n            .focus()\n            .get(0).select();\n    };\n\n    /**\n     * Sets focus to the query field and selects its text.\n     */\n    FindBar.prototype.focusQuery = function () {\n        this._focus(\"#find-what\");\n    };\n\n    /**\n     * Sets focus to the replace field and selects its text.\n     */\n    FindBar.prototype.focusReplace = function () {\n        this._focus(\"#replace-with\");\n    };\n\n    /**\n     * The indexing spinner is usually shown when node is indexing files\n     */\n    FindBar.prototype.showIndexingSpinner = function () {\n        this.$(\"#indexing-spinner\").removeClass(\"forced-hidden\");\n        this.setIndexingMessage(Strings.FIND_IN_FILES_INDEXING);\n    };\n\n    FindBar.prototype.setIndexingMessage = function (message) {\n        this.$(\"#indexing-spinner-message\").text(message);\n    };\n\n    FindBar.prototype.hideIndexingSpinner = function () {\n        this.$(\"#indexing-spinner\").addClass(\"forced-hidden\");\n    };\n\n    /**\n     * Force a search again\n     */\n    FindBar.prototype.redoInstantSearch = function () {\n        this.trigger(\"doFind\");\n    };\n\n    /*\n     * Returns the string used to prepopulate the find bar\n     * @param {!Editor} editor\n     * @return {string} first line of primary selection to populate the find bar\n     */\n    FindBar._getInitialQueryFromSelection = function(editor) {\n        var selectionText = editor.getSelectedText();\n        if (selectionText) {\n            return selectionText\n                .replace(/^\\n*/, \"\") // Trim possible newlines at the very beginning of the selection\n                .split(\"\\n\")[0];\n        }\n        return \"\";\n    };\n\n    /**\n     * Gets you the right query and replace text to prepopulate the Find Bar.\n     * @static\n     * @param {?FindBar} currentFindBar The currently open Find Bar, if any\n     * @param {?Editor} The active editor, if any\n     * @return {query: string, replaceText: string} Query and Replace text to prepopulate the Find Bar with\n     */\n    FindBar.getInitialQuery = function (currentFindBar, editor) {\n        var query,\n            selection = editor ? FindBar._getInitialQueryFromSelection(editor) : \"\",\n            replaceText = \"\";\n\n        if (currentFindBar && !currentFindBar.isClosed()) {\n            // The modalBar was already up. When creating the new modalBar, copy the\n            // current query instead of using the passed-in selected text.\n            var queryInfo = currentFindBar.getQueryInfo();\n            query = (!queryInfo.isRegexp && selection) || queryInfo.query;\n            replaceText = currentFindBar.getReplaceText();\n        } else {\n            var openedFindBar = FindBar._bars && _.find(FindBar._bars,\n                function (bar) {\n                    return !bar.isClosed();\n                }\n            );\n\n            if (openedFindBar) {\n                query = openedFindBar.getQueryInfo().query;\n                replaceText = openedFindBar.getReplaceText();\n            } else if (editor) {\n                query = (!lastTypedTextWasRegexp && selection) || lastQueriedText || lastTypedText;\n            }\n        }\n\n        return {query: query, replaceText: replaceText};\n    };\n\n    PreferencesManager.stateManager.definePreference(\"caseSensitive\", \"boolean\", false);\n    PreferencesManager.stateManager.definePreference(\"regexp\", \"boolean\", false);\n    PreferencesManager.stateManager.definePreference(\"searchHistory\", \"array\", []);\n    PreferencesManager.definePreference(\"maxSearchHistory\", \"number\", 10, {\n        description: Strings.FIND_HISTORY_MAX_COUNT\n    });\n\n    exports.FindBar = FindBar;\n});\n"],"file":"FindBar.js"}